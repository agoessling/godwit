
godwit-v01.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a090  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000c200  8000c200  0000c600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001170  8000c400  8000c400  0000c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000050c  00000004  8000d570  0000dc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000418  00000510  8000da7c  0000e110  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000012a0  00000000  00000000  0000e140  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00002720  00000000  00000000  0000f3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002fc79  00000000  00000000  00011b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005b0f  00000000  00000000  00041779  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001226d  00000000  00000000  00047288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003438  00000000  00000000  000594f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000073ca  00000000  00000000  0005c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000b0bf  00000000  00000000  00063cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 0112b8b2  00000000  00000000  0006edb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  00007000  00007000  00000400  2**0
                  ALLOC
 18 .debug_ranges 00001300  00000000  00000000  0119a670  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf e1 a0 	sub	pc,pc,-7776

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	eb cd 40 80 	pushm	r7,lr
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80002008:	1a 97       	mov	r7,sp
8000200a:	20 2d       	sub	sp,8
8000200c:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002010:	fe 68 00 00 	mov	r8,-131072
80002014:	70 08       	ld.w	r8,r8[0x0]
80002016:	30 09       	mov	r9,0
80002018:	ef 49 ff fc 	st.w	r7[-4],r9
8000201c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002020:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002024:	5c 58       	castu.b	r8
80002026:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000202a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000202e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002032:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80002036:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000203a:	fe 68 00 00 	mov	r8,-131072
8000203e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002042:	91 09       	st.w	r8[0x0],r9
}
80002044:	2f ed       	sub	sp,-8
80002046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000204a:	d7 03       	nop

8000204c <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
8000204c:	eb cd 40 80 	pushm	r7,lr
80002050:	1a 97       	mov	r7,sp
80002052:	20 1d       	sub	sp,4
80002054:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80002058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205c:	e0 69 e1 c0 	mov	r9,57792
80002060:	ea 19 00 e4 	orh	r9,0xe4
80002064:	12 38       	cp.w	r8,r9
80002066:	e0 88 00 1b 	brls	8000209c <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
8000206a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000206e:	e0 69 c3 80 	mov	r9,50048
80002072:	ea 19 01 c9 	orh	r9,0x1c9
80002076:	12 38       	cp.w	r8,r9
80002078:	e0 8b 00 0a 	brhi	8000208c <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000207c:	30 1c       	mov	r12,1
8000207e:	f0 1f 00 0d 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002082:	3f fb       	mov	r11,-1
80002084:	31 1c       	mov	r12,17
80002086:	f0 1f 00 0c 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000208a:	c1 08       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000208c:	30 1c       	mov	r12,1
8000208e:	f0 1f 00 09 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80002092:	3f fb       	mov	r11,-1
80002094:	31 0c       	mov	r12,16
80002096:	f0 1f 00 08 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000209a:	c0 88       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
8000209c:	30 0c       	mov	r12,0
8000209e:	f0 1f 00 05 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800020a2:	3f fb       	mov	r11,-1
800020a4:	31 1c       	mov	r12,17
800020a6:	f0 1f 00 04 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800020aa:	2f fd       	sub	sp,-4
800020ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800020b0:	80 00       	ld.sh	r0,r0[0x0]
800020b2:	20 04       	sub	r4,0
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	21 04       	sub	r4,16

800020b8 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800020b8:	eb cd 40 80 	pushm	r7,lr
800020bc:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800020be:	fe 68 00 00 	mov	r8,-131072
800020c2:	70 28       	ld.w	r8,r8[0x8]
800020c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020c8:	5c 58       	castu.b	r8
}
800020ca:	10 9c       	mov	r12,r8
800020cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800020d0 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800020d0:	eb cd 40 80 	pushm	r7,lr
800020d4:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800020d6:	f0 1f 00 05 	mcall	800020e8 <flashcdw_default_wait_until_ready+0x18>
800020da:	18 98       	mov	r8,r12
800020dc:	ec 18 00 01 	eorl	r8,0x1
800020e0:	5c 58       	castu.b	r8
800020e2:	cf a1       	brne	800020d6 <flashcdw_default_wait_until_ready+0x6>
}
800020e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 b8       	sub	r8,11

800020ec <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
800020ec:	eb cd 40 80 	pushm	r7,lr
800020f0:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800020f2:	fe 68 00 00 	mov	r8,-131072
800020f6:	70 28       	ld.w	r8,r8[0x8]
800020f8:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
800020fc:	10 9c       	mov	r12,r8
800020fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002102:	d7 03       	nop

80002104 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002104:	eb cd 40 80 	pushm	r7,lr
80002108:	1a 97       	mov	r7,sp
8000210a:	20 3d       	sub	sp,12
8000210c:	ef 4c ff f8 	st.w	r7[-8],r12
80002110:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002114:	49 b8       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002116:	70 08       	ld.w	r8,r8[0x0]
80002118:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000211a:	fe 68 00 00 	mov	r8,-131072
8000211e:	70 18       	ld.w	r8,r8[0x4]
80002120:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002128:	5c 58       	castu.b	r8
8000212a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000212e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002136:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000213a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
8000213e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002142:	58 08       	cp.w	r8,0
80002144:	c0 b5       	brlt	8000215a <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
80002146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000214a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000214e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002152:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80002156:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
8000215a:	3a 58       	mov	r8,-91
8000215c:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002160:	fe 68 00 00 	mov	r8,-131072
80002164:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002168:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
8000216a:	f0 1f 00 07 	mcall	80002184 <flashcdw_issue_command+0x80>
8000216e:	18 99       	mov	r9,r12
80002170:	48 68       	lddpc	r8,80002188 <flashcdw_issue_command+0x84>
80002172:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80002174:	48 38       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002176:	70 08       	ld.w	r8,r8[0x0]
80002178:	5d 18       	icall	r8
}
8000217a:	2f dd       	sub	sp,-12
8000217c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002180:	00 00       	add	r0,r0
80002182:	00 04       	add	r4,r0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 ec       	sub	r12,14
80002188:	00 00       	add	r0,r0
8000218a:	05 10       	ld.sh	r0,r2++

8000218c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000218c:	eb cd 40 80 	pushm	r7,lr
80002190:	1a 97       	mov	r7,sp
80002192:	20 4d       	sub	sp,16
80002194:	ef 4c ff f4 	st.w	r7[-12],r12
80002198:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000219c:	30 08       	mov	r8,0
8000219e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800021a2:	30 08       	mov	r8,0
800021a4:	ef 48 ff fc 	st.w	r7[-4],r8
800021a8:	c1 c8       	rjmp	800021e0 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800021aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021ae:	70 19       	ld.w	r9,r8[0x4]
800021b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021b4:	70 08       	ld.w	r8,r8[0x0]
800021b6:	12 9b       	mov	r11,r9
800021b8:	10 9c       	mov	r12,r8
800021ba:	f0 1f 00 10 	mcall	800021f8 <gpio_enable_module+0x6c>
800021be:	18 98       	mov	r8,r12
800021c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021c4:	f3 e8 10 08 	or	r8,r9,r8
800021c8:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
800021cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021d0:	2f 88       	sub	r8,-8
800021d2:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800021d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021da:	2f f8       	sub	r8,-1
800021dc:	ef 48 ff fc 	st.w	r7[-4],r8
800021e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800021e8:	10 39       	cp.w	r9,r8
800021ea:	ce 03       	brcs	800021aa <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
800021ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800021f0:	10 9c       	mov	r12,r8
800021f2:	2f cd       	sub	sp,-16
800021f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 fc       	sub	r12,31

800021fc <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800021fc:	eb cd 40 80 	pushm	r7,lr
80002200:	1a 97       	mov	r7,sp
80002202:	20 3d       	sub	sp,12
80002204:	ef 4c ff f8 	st.w	r7[-8],r12
80002208:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000220c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002210:	a5 98       	lsr	r8,0x5
80002212:	a9 78       	lsl	r8,0x9
80002214:	e0 28 d4 00 	sub	r8,54272
80002218:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000221c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002220:	58 78       	cp.w	r8,7
80002222:	e0 8b 01 16 	brhi	8000244e <gpio_enable_module_pin+0x252>
80002226:	fe f9 02 4e 	ld.w	r9,pc[590]
8000222a:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000222e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002232:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002236:	30 19       	mov	r9,1
80002238:	f2 08 09 48 	lsl	r8,r9,r8
8000223c:	10 99       	mov	r9,r8
8000223e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002242:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002248:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000224c:	30 19       	mov	r9,1
8000224e:	f2 08 09 48 	lsl	r8,r9,r8
80002252:	10 99       	mov	r9,r8
80002254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002258:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000225a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000225e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002262:	30 19       	mov	r9,1
80002264:	f2 08 09 48 	lsl	r8,r9,r8
80002268:	10 99       	mov	r9,r8
8000226a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000226e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002270:	cf 18       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002276:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000227a:	30 19       	mov	r9,1
8000227c:	f2 08 09 48 	lsl	r8,r9,r8
80002280:	10 99       	mov	r9,r8
80002282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002286:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000228c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002290:	30 19       	mov	r9,1
80002292:	f2 08 09 48 	lsl	r8,r9,r8
80002296:	10 99       	mov	r9,r8
80002298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000229c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000229e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022a6:	30 19       	mov	r9,1
800022a8:	f2 08 09 48 	lsl	r8,r9,r8
800022ac:	10 99       	mov	r9,r8
800022ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022b2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022b4:	cc f8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800022b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022be:	30 19       	mov	r9,1
800022c0:	f2 08 09 48 	lsl	r8,r9,r8
800022c4:	10 99       	mov	r9,r8
800022c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ca:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800022cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022d4:	30 19       	mov	r9,1
800022d6:	f2 08 09 48 	lsl	r8,r9,r8
800022da:	10 99       	mov	r9,r8
800022dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800022e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022ea:	30 19       	mov	r9,1
800022ec:	f2 08 09 48 	lsl	r8,r9,r8
800022f0:	10 99       	mov	r9,r8
800022f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022f6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022f8:	ca d8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800022fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002302:	30 19       	mov	r9,1
80002304:	f2 08 09 48 	lsl	r8,r9,r8
80002308:	10 99       	mov	r9,r8
8000230a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000230e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002314:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002318:	30 19       	mov	r9,1
8000231a:	f2 08 09 48 	lsl	r8,r9,r8
8000231e:	10 99       	mov	r9,r8
80002320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002324:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000232a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000232e:	30 19       	mov	r9,1
80002330:	f2 08 09 48 	lsl	r8,r9,r8
80002334:	10 99       	mov	r9,r8
80002336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000233a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000233c:	c8 b8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000233e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002342:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002346:	30 19       	mov	r9,1
80002348:	f2 08 09 48 	lsl	r8,r9,r8
8000234c:	10 99       	mov	r9,r8
8000234e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002352:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002358:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000235c:	30 19       	mov	r9,1
8000235e:	f2 08 09 48 	lsl	r8,r9,r8
80002362:	10 99       	mov	r9,r8
80002364:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002368:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000236a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002372:	30 19       	mov	r9,1
80002374:	f2 08 09 48 	lsl	r8,r9,r8
80002378:	10 99       	mov	r9,r8
8000237a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000237e:	91 d9       	st.w	r8[0x34],r9
		break;
80002380:	c6 98       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002386:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000238a:	30 19       	mov	r9,1
8000238c:	f2 08 09 48 	lsl	r8,r9,r8
80002390:	10 99       	mov	r9,r8
80002392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002396:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023a0:	30 19       	mov	r9,1
800023a2:	f2 08 09 48 	lsl	r8,r9,r8
800023a6:	10 99       	mov	r9,r8
800023a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023ac:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023b6:	30 19       	mov	r9,1
800023b8:	f2 08 09 48 	lsl	r8,r9,r8
800023bc:	10 99       	mov	r9,r8
800023be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023c2:	91 d9       	st.w	r8[0x34],r9
		break;
800023c4:	c4 78       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800023c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023ce:	30 19       	mov	r9,1
800023d0:	f2 08 09 48 	lsl	r8,r9,r8
800023d4:	10 99       	mov	r9,r8
800023d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023da:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800023dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023e4:	30 19       	mov	r9,1
800023e6:	f2 08 09 48 	lsl	r8,r9,r8
800023ea:	10 99       	mov	r9,r8
800023ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023f0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023fa:	30 19       	mov	r9,1
800023fc:	f2 08 09 48 	lsl	r8,r9,r8
80002400:	10 99       	mov	r9,r8
80002402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002406:	91 d9       	st.w	r8[0x34],r9
		break;
80002408:	c2 58       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000240a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000240e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002412:	30 19       	mov	r9,1
80002414:	f2 08 09 48 	lsl	r8,r9,r8
80002418:	10 99       	mov	r9,r8
8000241a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002424:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002428:	30 19       	mov	r9,1
8000242a:	f2 08 09 48 	lsl	r8,r9,r8
8000242e:	10 99       	mov	r9,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000243a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000243e:	30 19       	mov	r9,1
80002440:	f2 08 09 48 	lsl	r8,r9,r8
80002444:	10 99       	mov	r9,r8
80002446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244a:	91 d9       	st.w	r8[0x34],r9
		break;
8000244c:	c0 38       	rjmp	80002452 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000244e:	30 18       	mov	r8,1
80002450:	c0 d8       	rjmp	8000246a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002456:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000245a:	30 19       	mov	r9,1
8000245c:	f2 08 09 48 	lsl	r8,r9,r8
80002460:	10 99       	mov	r9,r8
80002462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002466:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80002468:	30 08       	mov	r8,0
}
8000246a:	10 9c       	mov	r12,r8
8000246c:	2f dd       	sub	sp,-12
8000246e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002472:	00 00       	add	r0,r0
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	c4 00       	breq	800024f6 <_get_interrupt_handler+0x26>

80002478 <gpio_enable_gpio_pin>:
 *            GPIO mode of PX21, AVR32_PIN_PX21 can be used. Module pins such as
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
80002478:	eb cd 40 80 	pushm	r7,lr
8000247c:	1a 97       	mov	r7,sp
8000247e:	20 2d       	sub	sp,8
80002480:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002488:	a5 98       	lsr	r8,0x5
8000248a:	a9 78       	lsl	r8,0x9
8000248c:	e0 28 d4 00 	sub	r8,54272
80002490:	ef 48 ff fc 	st.w	r7[-4],r8
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002494:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002498:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000249c:	30 19       	mov	r9,1
8000249e:	f2 08 09 48 	lsl	r8,r9,r8
800024a2:	10 99       	mov	r9,r8
800024a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a8:	f1 49 00 48 	st.w	r8[72],r9
	gpio_port->gpers = 1 << (pin & 0x1F);
800024ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800024b4:	30 19       	mov	r9,1
800024b6:	f2 08 09 48 	lsl	r8,r9,r8
800024ba:	10 99       	mov	r9,r8
800024bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024c0:	91 19       	st.w	r8[0x4],r9
}
800024c2:	2f ed       	sub	sp,-8
800024c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800024c8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800024c8:	eb cd 40 80 	pushm	r7,lr
800024cc:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
800024ce:	c0 08       	rjmp	800024ce <_unhandled_interrupt+0x6>

800024d0 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
800024d0:	eb cd 40 80 	pushm	r7,lr
800024d4:	1a 97       	mov	r7,sp
800024d6:	20 3d       	sub	sp,12
800024d8:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800024dc:	fe 78 10 00 	mov	r8,-61440
800024e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800024e4:	f2 09 11 03 	rsub	r9,r9,3
800024e8:	28 09       	sub	r9,-128
800024ea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800024ee:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800024f2:	fe 78 10 00 	mov	r8,-61440
800024f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024fa:	2c 09       	sub	r9,-64
800024fc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002500:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	58 08       	cp.w	r8,0
8000250a:	c1 30       	breq	80002530 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000250c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002510:	48 b8       	lddpc	r8,8000253c <_get_interrupt_handler+0x6c>
80002512:	a1 79       	lsl	r9,0x1
80002514:	2f f9       	sub	r9,-1
80002516:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000251a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000251e:	f0 08 12 00 	clz	r8,r8
80002522:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80002526:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002528:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000252c:	70 08       	ld.w	r8,r8[0x0]
8000252e:	c0 28       	rjmp	80002532 <_get_interrupt_handler+0x62>
80002530:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002532:	10 9c       	mov	r12,r8
80002534:	2f dd       	sub	sp,-12
80002536:	e3 cd 80 80 	ldm	sp++,r7,pc
8000253a:	00 00       	add	r0,r0
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	c4 20       	breq	800025c2 <INTC_init_interrupts+0x6e>

80002540 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80002540:	eb cd 40 80 	pushm	r7,lr
80002544:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002546:	48 38       	lddpc	r8,80002550 <INTC_init_evba+0x10>
80002548:	e3 b8 00 01 	mtsr	0x4,r8
}
8000254c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002550:	80 00       	ld.sh	r0,r0[0x0]
80002552:	c2 00       	breq	80002592 <INTC_init_interrupts+0x3e>

80002554 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002554:	eb cd 40 80 	pushm	r7,lr
80002558:	1a 97       	mov	r7,sp
8000255a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000255c:	f0 1f 00 20 	mcall	800025dc <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002560:	30 08       	mov	r8,0
80002562:	ef 48 ff f8 	st.w	r7[-8],r8
80002566:	c3 18       	rjmp	800025c8 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002568:	30 08       	mov	r8,0
8000256a:	ef 48 ff fc 	st.w	r7[-4],r8
8000256e:	c1 48       	rjmp	80002596 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002574:	49 b8       	lddpc	r8,800025e0 <INTC_init_interrupts+0x8c>
80002576:	a1 79       	lsl	r9,0x1
80002578:	2f f9       	sub	r9,-1
8000257a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000257e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002582:	a3 68       	lsl	r8,0x2
80002584:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002588:	49 79       	lddpc	r9,800025e4 <INTC_init_interrupts+0x90>
8000258a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000258c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002590:	2f f8       	sub	r8,-1
80002592:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80002596:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000259a:	49 28       	lddpc	r8,800025e0 <INTC_init_interrupts+0x8c>
8000259c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025a4:	10 39       	cp.w	r9,r8
800025a6:	fe 9b ff e5 	brhi	80002570 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025aa:	fe 78 10 00 	mov	r8,-61440
800025ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025b2:	48 eb       	lddpc	r11,800025e8 <INTC_init_interrupts+0x94>
800025b4:	48 ea       	lddpc	r10,800025ec <INTC_init_interrupts+0x98>
800025b6:	f6 0a 01 0a 	sub	r10,r11,r10
800025ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800025be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025c2:	2f f8       	sub	r8,-1
800025c4:	ef 48 ff f8 	st.w	r7[-8],r8
800025c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025cc:	e0 48 00 21 	cp.w	r8,33
800025d0:	fe 98 ff cc 	brls	80002568 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
800025d4:	2f ed       	sub	sp,-8
800025d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800025da:	00 00       	add	r0,r0
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	25 40       	sub	r0,84
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	c4 20       	breq	80002666 <INTC_register_interrupt+0x76>
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	24 c8       	sub	r8,76
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	c3 04       	brge	8000264a <INTC_register_interrupt+0x5a>
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	c2 00       	breq	8000262e <INTC_register_interrupt+0x3e>

800025f0 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800025f0:	eb cd 40 80 	pushm	r7,lr
800025f4:	1a 97       	mov	r7,sp
800025f6:	20 4d       	sub	sp,16
800025f8:	ef 4c ff f8 	st.w	r7[-8],r12
800025fc:	ef 4b ff f4 	st.w	r7[-12],r11
80002600:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002604:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002608:	a5 98       	lsr	r8,0x5
8000260a:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000260e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002612:	4a 78       	lddpc	r8,800026ac <INTC_register_interrupt+0xbc>
80002614:	a1 79       	lsl	r9,0x1
80002616:	2f f9       	sub	r9,-1
80002618:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000261c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002620:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002624:	a3 68       	lsl	r8,0x2
80002626:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000262a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000262e:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002634:	58 08       	cp.w	r8,0
80002636:	c0 c1       	brne	8000264e <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002638:	fe 78 10 00 	mov	r8,-61440
8000263c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002640:	49 cb       	lddpc	r11,800026b0 <INTC_register_interrupt+0xc0>
80002642:	49 da       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002644:	f6 0a 01 0a 	sub	r10,r11,r10
80002648:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000264c:	c2 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000264e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002652:	58 18       	cp.w	r8,1
80002654:	c0 d1       	brne	8000266e <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002656:	fe 78 10 00 	mov	r8,-61440
8000265a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000265e:	49 7b       	lddpc	r11,800026b8 <INTC_register_interrupt+0xc8>
80002660:	49 5a       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002662:	f6 0a 01 0a 	sub	r10,r11,r10
80002666:	bf aa       	sbr	r10,0x1e
80002668:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000266c:	c1 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000266e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002672:	58 28       	cp.w	r8,2
80002674:	c0 d1       	brne	8000268e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002676:	fe 78 10 00 	mov	r8,-61440
8000267a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000267e:	49 0b       	lddpc	r11,800026bc <INTC_register_interrupt+0xcc>
80002680:	48 da       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002682:	f6 0a 01 0a 	sub	r10,r11,r10
80002686:	bf ba       	sbr	r10,0x1f
80002688:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000268c:	c0 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000268e:	fe 78 10 00 	mov	r8,-61440
80002692:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002696:	48 bb       	lddpc	r11,800026c0 <INTC_register_interrupt+0xd0>
80002698:	48 7a       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
8000269a:	f6 0a 01 0a 	sub	r10,r11,r10
8000269e:	ea 1a c0 00 	orh	r10,0xc000
800026a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800026a6:	2f cd       	sub	sp,-16
800026a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ac:	80 00       	ld.sh	r0,r0[0x0]
800026ae:	c4 20       	breq	80002732 <pdca_get_handler+0x6>
800026b0:	80 00       	ld.sh	r0,r0[0x0]
800026b2:	c3 04       	brge	80002712 <cpu_irq_restore+0xe>
800026b4:	80 00       	ld.sh	r0,r0[0x0]
800026b6:	c2 00       	breq	800026f6 <cpu_irq_is_enabled_flags+0x14>
800026b8:	80 00       	ld.sh	r0,r0[0x0]
800026ba:	c3 12       	brcc	8000271c <cpu_irq_restore+0x18>
800026bc:	80 00       	ld.sh	r0,r0[0x0]
800026be:	c3 20       	breq	80002722 <cpu_irq_restore+0x1e>
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	c3 2e       	rcall	80002326 <gpio_enable_module_pin+0x12a>

800026c4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800026c4:	eb cd 40 80 	pushm	r7,lr
800026c8:	1a 97       	mov	r7,sp
800026ca:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026cc:	e1 b8 00 00 	mfsr	r8,0x0
800026d0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800026d4:	d3 03       	ssrf	0x10

	return flags;
800026d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800026da:	10 9c       	mov	r12,r8
800026dc:	2f fd       	sub	sp,-4
800026de:	e3 cd 80 80 	ldm	sp++,r7,pc

800026e2 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800026e2:	eb cd 40 80 	pushm	r7,lr
800026e6:	1a 97       	mov	r7,sp
800026e8:	20 1d       	sub	sp,4
800026ea:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800026ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026f2:	e6 18 00 01 	andh	r8,0x1,COH
800026f6:	5f 08       	sreq	r8
800026f8:	5c 58       	castu.b	r8
}
800026fa:	10 9c       	mov	r12,r8
800026fc:	2f fd       	sub	sp,-4
800026fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002702:	d7 03       	nop

80002704 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80002704:	eb cd 40 80 	pushm	r7,lr
80002708:	1a 97       	mov	r7,sp
8000270a:	20 1d       	sub	sp,4
8000270c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002710:	ee fc ff fc 	ld.w	r12,r7[-4]
80002714:	f0 1f 00 05 	mcall	80002728 <cpu_irq_restore+0x24>
80002718:	18 98       	mov	r8,r12
8000271a:	58 08       	cp.w	r8,0
8000271c:	c0 20       	breq	80002720 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000271e:	d5 03       	csrf	0x10
   }

	barrier();
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 80 	ldm	sp++,r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	26 e2       	sub	r2,110

8000272c <pdca_get_handler>:

#include "compiler.h"
#include "pdca.h"

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
8000272c:	eb cd 40 80 	pushm	r7,lr
80002730:	1a 97       	mov	r7,sp
80002732:	20 2d       	sub	sp,8
80002734:	18 98       	mov	r8,r12
80002736:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
8000273a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000273e:	a7 68       	lsl	r8,0x6
80002740:	e0 38 00 00 	sub	r8,65536
80002744:	ef 48 ff fc 	st.w	r7[-4],r8

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002748:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000274c:	30 f8       	mov	r8,15
8000274e:	f0 09 18 00 	cp.b	r9,r8
80002752:	e0 88 00 04 	brls	8000275a <pdca_get_handler+0x2e>
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80002756:	3f f8       	mov	r8,-1
80002758:	c0 38       	rjmp	8000275e <pdca_get_handler+0x32>
	}

	return pdca_channel;
8000275a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000275e:	10 9c       	mov	r12,r8
80002760:	2f ed       	sub	sp,-8
80002762:	e3 cd 80 80 	ldm	sp++,r7,pc
80002766:	d7 03       	nop

80002768 <pdca_init_channel>:

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80002768:	eb cd 40 80 	pushm	r7,lr
8000276c:	1a 97       	mov	r7,sp
8000276e:	20 4d       	sub	sp,16
80002770:	18 98       	mov	r8,r12
80002772:	ef 4b ff f0 	st.w	r7[-16],r11
80002776:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000277a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000277e:	10 9c       	mov	r12,r8
80002780:	f0 1f 00 29 	mcall	80002824 <pdca_init_channel+0xbc>
80002784:	18 98       	mov	r8,r12
			pdca_ch_number);
80002786:	ef 48 ff f8 	st.w	r7[-8],r8

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
8000278a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000278e:	10 9c       	mov	r12,r8
80002790:	f0 1f 00 26 	mcall	80002828 <pdca_init_channel+0xc0>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
80002794:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002798:	10 9c       	mov	r12,r8
8000279a:	f0 1f 00 25 	mcall	8000282c <pdca_init_channel+0xc4>
	
	irqflags_t flags = cpu_irq_save();
8000279e:	f0 1f 00 25 	mcall	80002830 <pdca_init_channel+0xc8>
800027a2:	18 98       	mov	r8,r12
800027a4:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)opt->addr;
800027a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ac:	70 08       	ld.w	r8,r8[0x0]
800027ae:	10 99       	mov	r9,r8
800027b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b4:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = opt->size;
800027b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ba:	70 19       	ld.w	r9,r8[0x4]
800027bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027c0:	91 29       	st.w	r8[0x8],r9
	pdca_channel->psr = opt->pid;
800027c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027c6:	70 49       	ld.w	r9,r8[0x10]
800027c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027cc:	91 19       	st.w	r8[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
800027ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027d2:	70 28       	ld.w	r8,r8[0x8]
800027d4:	10 99       	mov	r9,r8
800027d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027da:	91 39       	st.w	r8[0xc],r9
	pdca_channel->tcrr = opt->r_size;
800027dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027e0:	70 39       	ld.w	r9,r8[0xc]
800027e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027e6:	91 49       	st.w	r8[0x10],r9
	pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
800027e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ec:	f1 38 00 18 	ld.ub	r8,r8[24]
800027f0:	a3 68       	lsl	r8,0x2
800027f2:	10 99       	mov	r9,r8
800027f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027f8:	70 58       	ld.w	r8,r8[0x14]
800027fa:	10 49       	or	r9,r8
	pdca_channel->mar = (uint32_t)opt->addr;
	pdca_channel->tcr = opt->size;
	pdca_channel->psr = opt->pid;
	pdca_channel->marr = (uint32_t)opt->r_addr;
	pdca_channel->tcrr = opt->r_size;
	pdca_channel->mr =
800027fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002800:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002806:	e0 69 01 00 	mov	r9,256
8000280a:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
8000280c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002810:	70 b8       	ld.w	r8,r8[0x2c]
	
	cpu_irq_restore(flags);
80002812:	ee fc ff fc 	ld.w	r12,r7[-4]
80002816:	f0 1f 00 08 	mcall	80002834 <pdca_init_channel+0xcc>

	return PDCA_SUCCESS;
8000281a:	30 08       	mov	r8,0
}
8000281c:	10 9c       	mov	r12,r8
8000281e:	2f cd       	sub	sp,-16
80002820:	e3 cd 80 80 	ldm	sp++,r7,pc
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	27 2c       	sub	r12,114
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	29 08       	sub	r8,-112
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	29 88       	sub	r8,-104
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	26 c4       	sub	r4,108
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	27 04       	sub	r4,112

80002838 <pdca_disable>:

	return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
}

void pdca_disable(uint8_t pdca_ch_number)
{
80002838:	eb cd 40 80 	pushm	r7,lr
8000283c:	1a 97       	mov	r7,sp
8000283e:	20 2d       	sub	sp,8
80002840:	18 98       	mov	r8,r12
80002842:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002846:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000284a:	10 9c       	mov	r12,r8
8000284c:	f0 1f 00 06 	mcall	80002864 <pdca_disable+0x2c>
80002850:	18 98       	mov	r8,r12
			pdca_ch_number);
80002852:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000285a:	30 29       	mov	r9,2
8000285c:	91 59       	st.w	r8[0x14],r9
}
8000285e:	2f ed       	sub	sp,-8
80002860:	e3 cd 80 80 	ldm	sp++,r7,pc
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	27 2c       	sub	r12,114

80002868 <pdca_enable>:

void pdca_enable(uint8_t pdca_ch_number)
{
80002868:	eb cd 40 80 	pushm	r7,lr
8000286c:	1a 97       	mov	r7,sp
8000286e:	20 2d       	sub	sp,8
80002870:	18 98       	mov	r8,r12
80002872:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002876:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000287a:	10 9c       	mov	r12,r8
8000287c:	f0 1f 00 06 	mcall	80002894 <pdca_enable+0x2c>
80002880:	18 98       	mov	r8,r12
			pdca_ch_number);
80002882:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80002886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000288a:	30 19       	mov	r9,1
8000288c:	91 59       	st.w	r8[0x14],r9
}
8000288e:	2f ed       	sub	sp,-8
80002890:	e3 cd 80 80 	ldm	sp++,r7,pc
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	27 2c       	sub	r12,114

80002898 <pdca_load_channel>:
	return pdca_channel->tcr;
}

void pdca_load_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
80002898:	eb cd 40 80 	pushm	r7,lr
8000289c:	1a 97       	mov	r7,sp
8000289e:	20 5d       	sub	sp,20
800028a0:	18 98       	mov	r8,r12
800028a2:	ef 4b ff f0 	st.w	r7[-16],r11
800028a6:	ef 4a ff ec 	st.w	r7[-20],r10
800028aa:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800028ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800028b2:	10 9c       	mov	r12,r8
800028b4:	f0 1f 00 12 	mcall	800028fc <pdca_load_channel+0x64>
800028b8:	18 98       	mov	r8,r12
			pdca_ch_number);
800028ba:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800028be:	f0 1f 00 11 	mcall	80002900 <pdca_load_channel+0x68>
800028c2:	18 98       	mov	r8,r12
800028c4:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)addr;
800028c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028d0:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = size;
800028d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800028da:	91 29       	st.w	r8[0x8],r9
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800028dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e0:	e0 69 01 00 	mov	r9,256
800028e4:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
800028e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ea:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
800028ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800028f0:	f0 1f 00 05 	mcall	80002904 <pdca_load_channel+0x6c>
}
800028f4:	2f bd       	sub	sp,-20
800028f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800028fa:	00 00       	add	r0,r0
800028fc:	80 00       	ld.sh	r0,r0[0x0]
800028fe:	27 2c       	sub	r12,114
80002900:	80 00       	ld.sh	r0,r0[0x0]
80002902:	26 c4       	sub	r4,108
80002904:	80 00       	ld.sh	r0,r0[0x0]
80002906:	27 04       	sub	r4,112

80002908 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002908:	eb cd 40 80 	pushm	r7,lr
8000290c:	1a 97       	mov	r7,sp
8000290e:	20 3d       	sub	sp,12
80002910:	18 98       	mov	r8,r12
80002912:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002916:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000291a:	10 9c       	mov	r12,r8
8000291c:	f0 1f 00 0c 	mcall	8000294c <pdca_disable_interrupt_transfer_complete+0x44>
80002920:	18 98       	mov	r8,r12
			pdca_ch_number);
80002922:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
80002926:	f0 1f 00 0b 	mcall	80002950 <pdca_disable_interrupt_transfer_complete+0x48>
8000292a:	18 98       	mov	r8,r12
8000292c:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002930:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002934:	30 29       	mov	r9,2
80002936:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
80002938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000293c:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
8000293e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002942:	f0 1f 00 05 	mcall	80002954 <pdca_disable_interrupt_transfer_complete+0x4c>
}
80002946:	2f dd       	sub	sp,-12
80002948:	e3 cd 80 80 	ldm	sp++,r7,pc
8000294c:	80 00       	ld.sh	r0,r0[0x0]
8000294e:	27 2c       	sub	r12,114
80002950:	80 00       	ld.sh	r0,r0[0x0]
80002952:	26 c4       	sub	r4,108
80002954:	80 00       	ld.sh	r0,r0[0x0]
80002956:	27 04       	sub	r4,112

80002958 <pdca_enable_interrupt_transfer_complete>:

void pdca_enable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002958:	eb cd 40 80 	pushm	r7,lr
8000295c:	1a 97       	mov	r7,sp
8000295e:	20 2d       	sub	sp,8
80002960:	18 98       	mov	r8,r12
80002962:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002966:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000296a:	10 9c       	mov	r12,r8
8000296c:	f0 1f 00 06 	mcall	80002984 <pdca_enable_interrupt_transfer_complete+0x2c>
80002970:	18 98       	mov	r8,r12
			pdca_ch_number);
80002972:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80002976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000297a:	30 29       	mov	r9,2
8000297c:	91 89       	st.w	r8[0x20],r9
}
8000297e:	2f ed       	sub	sp,-8
80002980:	e3 cd 80 80 	ldm	sp++,r7,pc
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	27 2c       	sub	r12,114

80002988 <pdca_disable_interrupt_reload_counter_zero>:

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
80002988:	eb cd 40 80 	pushm	r7,lr
8000298c:	1a 97       	mov	r7,sp
8000298e:	20 3d       	sub	sp,12
80002990:	18 98       	mov	r8,r12
80002992:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002996:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000299a:	10 9c       	mov	r12,r8
8000299c:	f0 1f 00 0c 	mcall	800029cc <pdca_disable_interrupt_reload_counter_zero+0x44>
800029a0:	18 98       	mov	r8,r12
			pdca_ch_number);
800029a2:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800029a6:	f0 1f 00 0b 	mcall	800029d0 <pdca_disable_interrupt_reload_counter_zero+0x48>
800029aa:	18 98       	mov	r8,r12
800029ac:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800029b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029b4:	30 19       	mov	r9,1
800029b6:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
800029b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029bc:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
800029be:	ee fc ff fc 	ld.w	r12,r7[-4]
800029c2:	f0 1f 00 05 	mcall	800029d4 <pdca_disable_interrupt_reload_counter_zero+0x4c>
}
800029c6:	2f dd       	sub	sp,-12
800029c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800029cc:	80 00       	ld.sh	r0,r0[0x0]
800029ce:	27 2c       	sub	r12,114
800029d0:	80 00       	ld.sh	r0,r0[0x0]
800029d2:	26 c4       	sub	r4,108
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	27 04       	sub	r4,112

800029d8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800029d8:	eb cd 40 80 	pushm	r7,lr
800029dc:	1a 97       	mov	r7,sp
800029de:	20 1d       	sub	sp,4
800029e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800029e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029e8:	e6 18 00 01 	andh	r8,0x1,COH
800029ec:	5f 08       	sreq	r8
800029ee:	5c 58       	castu.b	r8
}
800029f0:	10 9c       	mov	r12,r8
800029f2:	2f fd       	sub	sp,-4
800029f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800029f8 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
800029f8:	eb cd 40 80 	pushm	r7,lr
800029fc:	1a 97       	mov	r7,sp
800029fe:	20 2d       	sub	sp,8
80002a00:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
80002a04:	e1 b8 00 00 	mfsr	r8,0x0
80002a08:	10 9c       	mov	r12,r8
80002a0a:	f0 1f 00 0f 	mcall	80002a44 <pm_set_mclk_source+0x4c>
80002a0e:	18 98       	mov	r8,r12
80002a10:	ef 68 ff ff 	st.b	r7[-1],r8
80002a14:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
80002a16:	fe 78 14 00 	mov	r8,-60416
80002a1a:	fc 19 aa 00 	movh	r9,0xaa00
80002a1e:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80002a22:	fe 78 14 00 	mov	r8,-60416
80002a26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a2a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002a2c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a30:	30 08       	mov	r8,0
80002a32:	f0 09 18 00 	cp.b	r9,r8
80002a36:	c0 20       	breq	80002a3a <pm_set_mclk_source+0x42>
80002a38:	d5 03       	csrf	0x10

  return PASS;
80002a3a:	30 08       	mov	r8,0
}
80002a3c:	10 9c       	mov	r12,r8
80002a3e:	2f ed       	sub	sp,-8
80002a40:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	29 d8       	sub	r8,-99

80002a48 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
80002a48:	eb cd 40 80 	pushm	r7,lr
80002a4c:	1a 97       	mov	r7,sp
80002a4e:	20 4d       	sub	sp,16
80002a50:	ef 4c ff f4 	st.w	r7[-12],r12
80002a54:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002a58:	fe 78 14 00 	mov	r8,-60416
80002a5c:	70 18       	ld.w	r8,r8[0x4]
80002a5e:	30 09       	mov	r9,0
80002a60:	ef 49 ff f8 	st.w	r7[-8],r9
80002a64:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002a68:	fe 78 14 00 	mov	r8,-60416
80002a6c:	f0 f8 00 d4 	ld.w	r8,r8[212]
80002a70:	e2 18 00 20 	andl	r8,0x20,COH
80002a74:	cf a0       	breq	80002a68 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80002a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a7a:	30 19       	mov	r9,1
80002a7c:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002a80:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80002a84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a88:	5c 58       	castu.b	r8
80002a8a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a8e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a96:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002a9a:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002a9e:	e1 b8 00 00 	mfsr	r8,0x0
80002aa2:	10 9c       	mov	r12,r8
80002aa4:	f0 1f 00 12 	mcall	80002aec <pm_set_clk_domain_div+0xa4>
80002aa8:	18 98       	mov	r8,r12
80002aaa:	ef 68 ff ff 	st.b	r7[-1],r8
80002aae:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002ab0:	fe 78 14 00 	mov	r8,-60416
80002ab4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002ab8:	2f f9       	sub	r9,-1
80002aba:	a3 69       	lsl	r9,0x2
80002abc:	ea 19 aa 00 	orh	r9,0xaa00
80002ac0:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ac8:	a3 68       	lsl	r8,0x2
80002aca:	e0 28 eb fc 	sub	r8,60412
80002ace:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ad2:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002ad4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002ad8:	30 08       	mov	r8,0
80002ada:	f0 09 18 00 	cp.b	r9,r8
80002ade:	c0 20       	breq	80002ae2 <pm_set_clk_domain_div+0x9a>
80002ae0:	d5 03       	csrf	0x10

  return PASS;
80002ae2:	30 08       	mov	r8,0
}
80002ae4:	10 9c       	mov	r12,r8
80002ae6:	2f cd       	sub	sp,-16
80002ae8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	29 d8       	sub	r8,-99

80002af0 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80002af0:	eb cd 40 80 	pushm	r7,lr
80002af4:	1a 97       	mov	r7,sp
80002af6:	20 3d       	sub	sp,12
80002af8:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002afc:	fe 78 14 00 	mov	r8,-60416
80002b00:	70 18       	ld.w	r8,r8[0x4]
80002b02:	30 09       	mov	r9,0
80002b04:	ef 49 ff f8 	st.w	r7[-8],r9
80002b08:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002b0c:	fe 78 14 00 	mov	r8,-60416
80002b10:	f0 f8 00 d4 	ld.w	r8,r8[212]
80002b14:	e2 18 00 20 	andl	r8,0x20,COH
80002b18:	cf a0       	breq	80002b0c <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80002b1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b1e:	30 09       	mov	r9,0
80002b20:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002b24:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002b28:	e1 b8 00 00 	mfsr	r8,0x0
80002b2c:	10 9c       	mov	r12,r8
80002b2e:	f0 1f 00 13 	mcall	80002b78 <pm_disable_clk_domain_div+0x88>
80002b32:	18 98       	mov	r8,r12
80002b34:	ef 68 ff ff 	st.b	r7[-1],r8
80002b38:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002b3a:	fe 78 14 00 	mov	r8,-60416
80002b3e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b42:	2f f9       	sub	r9,-1
80002b44:	a3 69       	lsl	r9,0x2
80002b46:	ea 19 aa 00 	orh	r9,0xaa00
80002b4a:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002b4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b52:	a3 68       	lsl	r8,0x2
80002b54:	e0 28 eb fc 	sub	r8,60412
80002b58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b5c:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002b5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002b62:	30 08       	mov	r8,0
80002b64:	f0 09 18 00 	cp.b	r9,r8
80002b68:	c0 20       	breq	80002b6c <pm_disable_clk_domain_div+0x7c>
80002b6a:	d5 03       	csrf	0x10

  return PASS;
80002b6c:	30 08       	mov	r8,0
}
80002b6e:	10 9c       	mov	r12,r8
80002b70:	2f dd       	sub	sp,-12
80002b72:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b76:	00 00       	add	r0,r0
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	29 d8       	sub	r8,-99

80002b7c <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
80002b7c:	eb cd 40 80 	pushm	r7,lr
80002b80:	1a 97       	mov	r7,sp
80002b82:	20 5d       	sub	sp,20
80002b84:	ef 4c ff f8 	st.w	r7[-8],r12
80002b88:	ef 4b ff f4 	st.w	r7[-12],r11
80002b8c:	ef 4a ff f0 	st.w	r7[-16],r10
80002b90:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
80002b94:	ee fb ff f4 	ld.w	r11,r7[-12]
80002b98:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b9c:	f0 1f 00 21 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002ba0:	18 98       	mov	r8,r12
80002ba2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002baa:	58 88       	cp.w	r8,8
80002bac:	c0 51       	brne	80002bb6 <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
80002bae:	30 0c       	mov	r12,0
80002bb0:	f0 1f 00 1d 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002bb4:	c0 68       	rjmp	80002bc0 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
80002bb6:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bba:	30 0c       	mov	r12,0
80002bbc:	f0 1f 00 1b 	mcall	80002c28 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
80002bc0:	ee fb ff f0 	ld.w	r11,r7[-16]
80002bc4:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bc8:	f0 1f 00 16 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002bcc:	18 98       	mov	r8,r12
80002bce:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002bd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bd6:	58 88       	cp.w	r8,8
80002bd8:	c0 51       	brne	80002be2 <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
80002bda:	30 2c       	mov	r12,2
80002bdc:	f0 1f 00 12 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002be0:	c0 68       	rjmp	80002bec <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
80002be2:	ee fb ff fc 	ld.w	r11,r7[-4]
80002be6:	30 2c       	mov	r12,2
80002be8:	f0 1f 00 10 	mcall	80002c28 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
80002bec:	ee fb ff ec 	ld.w	r11,r7[-20]
80002bf0:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bf4:	f0 1f 00 0b 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002bf8:	18 98       	mov	r8,r12
80002bfa:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002bfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c02:	58 88       	cp.w	r8,8
80002c04:	c0 51       	brne	80002c0e <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80002c06:	30 3c       	mov	r12,3
80002c08:	f0 1f 00 07 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002c0c:	c0 68       	rjmp	80002c18 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80002c0e:	ee fb ff fc 	ld.w	r11,r7[-4]
80002c12:	30 3c       	mov	r12,3
80002c14:	f0 1f 00 05 	mcall	80002c28 <pm_set_all_cksel+0xac>
}
80002c18:	2f bd       	sub	sp,-20
80002c1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c1e:	00 00       	add	r0,r0
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	2c 2c       	sub	r12,-62
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	2a f0       	sub	r0,-81
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	2a 48       	sub	r8,-92

80002c2c <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80002c2c:	eb cd 40 80 	pushm	r7,lr
80002c30:	1a 97       	mov	r7,sp
80002c32:	20 3d       	sub	sp,12
80002c34:	ef 4c ff f8 	st.w	r7[-8],r12
80002c38:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80002c3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002c44:	f0 09 0d 08 	divu	r8,r8,r9
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80002c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c50:	58 18       	cp.w	r8,1
80002c52:	c0 31       	brne	80002c58 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80002c54:	30 88       	mov	r8,8
80002c56:	c0 78       	rjmp	80002c64 <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80002c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c5c:	5c 98       	brev	r8
80002c5e:	f0 08 12 00 	clz	r8,r8
80002c62:	20 18       	sub	r8,1
  }
}
80002c64:	10 9c       	mov	r12,r8
80002c66:	2f dd       	sub	sp,-12
80002c68:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c6c <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80002c6c:	eb cd 40 80 	pushm	r7,lr
80002c70:	1a 97       	mov	r7,sp
80002c72:	20 1d       	sub	sp,4
80002c74:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80002c78:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c7c:	f0 1f 00 04 	mcall	80002c8c <pcl_configure_clocks+0x20>
80002c80:	18 98       	mov	r8,r12
  #endif
#endif
}
80002c82:	10 9c       	mov	r12,r8
80002c84:	2f fd       	sub	sp,-4
80002c86:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c8a:	00 00       	add	r0,r0
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	2d 90       	sub	r0,-39

80002c90 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	1a 97       	mov	r7,sp
80002c96:	20 1d       	sub	sp,4
80002c98:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80002c9c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ca0:	e0 7b c2 00 	mov	r11,115200
80002ca4:	30 0c       	mov	r12,0
80002ca6:	f0 1f 00 04 	mcall	80002cb4 <pcl_configure_clocks_rcsys+0x24>
80002caa:	18 98       	mov	r8,r12
}
80002cac:	10 9c       	mov	r12,r8
80002cae:	2f fd       	sub	sp,-4
80002cb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2e 00       	sub	r0,-32

80002cb8 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80002cb8:	eb cd 40 80 	pushm	r7,lr
80002cbc:	1a 97       	mov	r7,sp
80002cbe:	20 1d       	sub	sp,4
80002cc0:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80002cc4:	f0 1f 00 08 	mcall	80002ce4 <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80002cc8:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ccc:	e0 6b 0e 00 	mov	r11,3584
80002cd0:	ea 1b 07 27 	orh	r11,0x727
80002cd4:	30 3c       	mov	r12,3
80002cd6:	f0 1f 00 05 	mcall	80002ce8 <pcl_configure_clocks_rc120m+0x30>
80002cda:	18 98       	mov	r8,r12
}
80002cdc:	10 9c       	mov	r12,r8
80002cde:	2f fd       	sub	sp,-4
80002ce0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ce4:	80 00       	ld.sh	r0,r0[0x0]
80002ce6:	35 7c       	mov	r12,87
80002ce8:	80 00       	ld.sh	r0,r0[0x0]
80002cea:	2e 00       	sub	r0,-32

80002cec <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80002cec:	eb cd 40 80 	pushm	r7,lr
80002cf0:	1a 97       	mov	r7,sp
80002cf2:	20 2d       	sub	sp,8
80002cf4:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80002cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfc:	70 58       	ld.w	r8,r8[0x14]
80002cfe:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80002d02:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d06:	30 0c       	mov	r12,0
80002d08:	f0 1f 00 0b 	mcall	80002d34 <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80002d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d10:	70 68       	ld.w	r8,r8[0x18]
80002d12:	30 1a       	mov	r10,1
80002d14:	10 9b       	mov	r11,r8
80002d16:	30 0c       	mov	r12,0
80002d18:	f0 1f 00 08 	mcall	80002d38 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80002d1c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d20:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d24:	30 1c       	mov	r12,1
80002d26:	f0 1f 00 06 	mcall	80002d3c <pcl_configure_clocks_osc0+0x50>
80002d2a:	18 98       	mov	r8,r12
}
80002d2c:	10 9c       	mov	r12,r8
80002d2e:	2f ed       	sub	sp,-8
80002d30:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	30 1c       	mov	r12,1
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	30 cc       	mov	r12,12
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	2e 00       	sub	r0,-32

80002d40 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80002d40:	eb cd 40 80 	pushm	r7,lr
80002d44:	1a 97       	mov	r7,sp
80002d46:	20 3d       	sub	sp,12
80002d48:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80002d4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d50:	70 78       	ld.w	r8,r8[0x1c]
80002d52:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80002d56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d5a:	70 88       	ld.w	r8,r8[0x20]
80002d5c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80002d60:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d64:	30 0b       	mov	r11,0
80002d66:	30 19       	mov	r9,1
80002d68:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d6c:	f0 1f 00 07 	mcall	80002d88 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80002d70:	ee fa ff f4 	ld.w	r10,r7[-12]
80002d74:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d78:	30 2c       	mov	r12,2
80002d7a:	f0 1f 00 05 	mcall	80002d8c <pcl_configure_clocks_dfll0+0x4c>
80002d7e:	18 98       	mov	r8,r12
}
80002d80:	10 9c       	mov	r12,r8
80002d82:	2f dd       	sub	sp,-12
80002d84:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	33 48       	mov	r8,52
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2e 00       	sub	r0,-32

80002d90 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80002d90:	eb cd 40 80 	pushm	r7,lr
80002d94:	1a 97       	mov	r7,sp
80002d96:	20 1d       	sub	sp,4
80002d98:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80002d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002da0:	70 08       	ld.w	r8,r8[0x0]
80002da2:	58 08       	cp.w	r8,0
80002da4:	c0 71       	brne	80002db2 <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80002da6:	ee fc ff fc 	ld.w	r12,r7[-4]
80002daa:	f0 1f 00 12 	mcall	80002df0 <pcl_configure_clocks_uc3l+0x60>
80002dae:	18 98       	mov	r8,r12
80002db0:	c1 c8       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80002db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002db6:	70 08       	ld.w	r8,r8[0x0]
80002db8:	58 98       	cp.w	r8,9
80002dba:	c0 71       	brne	80002dc8 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80002dbc:	ee fc ff fc 	ld.w	r12,r7[-4]
80002dc0:	f0 1f 00 0d 	mcall	80002df4 <pcl_configure_clocks_uc3l+0x64>
80002dc4:	18 98       	mov	r8,r12
80002dc6:	c1 18       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80002dc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002dcc:	70 08       	ld.w	r8,r8[0x0]
80002dce:	58 18       	cp.w	r8,1
80002dd0:	c0 71       	brne	80002dde <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80002dd2:	ee fc ff fc 	ld.w	r12,r7[-4]
80002dd6:	f0 1f 00 09 	mcall	80002df8 <pcl_configure_clocks_uc3l+0x68>
80002dda:	18 98       	mov	r8,r12
80002ddc:	c0 68       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80002dde:	ee fc ff fc 	ld.w	r12,r7[-4]
80002de2:	f0 1f 00 07 	mcall	80002dfc <pcl_configure_clocks_uc3l+0x6c>
80002de6:	18 98       	mov	r8,r12
  }
}
80002de8:	10 9c       	mov	r12,r8
80002dea:	2f fd       	sub	sp,-4
80002dec:	e3 cd 80 80 	ldm	sp++,r7,pc
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	2c 90       	sub	r0,-55
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2c b8       	sub	r8,-53
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	2c ec       	sub	r12,-50
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	2d 40       	sub	r0,-44

80002e00 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80002e00:	eb cd 40 80 	pushm	r7,lr
80002e04:	1a 97       	mov	r7,sp
80002e06:	20 3d       	sub	sp,12
80002e08:	ef 4c ff fc 	st.w	r7[-4],r12
80002e0c:	ef 4b ff f8 	st.w	r7[-8],r11
80002e10:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80002e14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e18:	70 39       	ld.w	r9,r8[0xc]
80002e1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e1e:	70 2a       	ld.w	r10,r8[0x8]
80002e20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e24:	70 18       	ld.w	r8,r8[0x4]
80002e26:	10 9b       	mov	r11,r8
80002e28:	ee fc ff f8 	ld.w	r12,r7[-8]
80002e2c:	f0 1f 00 09 	mcall	80002e50 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80002e30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e34:	70 18       	ld.w	r8,r8[0x4]
80002e36:	10 9c       	mov	r12,r8
80002e38:	f0 1f 00 07 	mcall	80002e54 <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80002e3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002e40:	f0 1f 00 06 	mcall	80002e58 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80002e44:	30 08       	mov	r8,0
}
80002e46:	10 9c       	mov	r12,r8
80002e48:	2f dd       	sub	sp,-12
80002e4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e4e:	00 00       	add	r0,r0
80002e50:	80 00       	ld.sh	r0,r0[0x0]
80002e52:	2b 7c       	sub	r12,-73
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	20 4c       	sub	r12,4
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	29 f8       	sub	r8,-97

80002e5c <pwma_wait_for_ready>:
/*! \brief Wait for PWMA Module to be ready for writing.
 *
 * \param pwma Pointer to the PWMA module.
 */
static inline void pwma_wait_for_ready(volatile avr32_pwma_t *pwma)
{
80002e5c:	eb cd 40 80 	pushm	r7,lr
80002e60:	1a 97       	mov	r7,sp
80002e62:	20 1d       	sub	sp,4
80002e64:	ef 4c ff fc 	st.w	r7[-4],r12
	 while (pwma->sr & AVR32_PWMA_SR_BUSY_MASK);
80002e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e6c:	70 78       	ld.w	r8,r8[0x1c]
80002e6e:	e2 18 00 08 	andl	r8,0x8,COH
80002e72:	cf b1       	brne	80002e68 <pwma_wait_for_ready+0xc>
}
80002e74:	2f fd       	sub	sp,-4
80002e76:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e7a:	d7 03       	nop

80002e7c <pwma_config_enable>:
	pwma_set_channels_value(pwma, channel_mask, duty_cycles);
}

bool pwma_config_enable(volatile avr32_pwma_t *pwma, uint32_t pwma_freq_hz, 
						uint32_t gclk_freq_hz, uint16_t spread)
{
80002e7c:	eb cd 40 80 	pushm	r7,lr
80002e80:	1a 97       	mov	r7,sp
80002e82:	20 5d       	sub	sp,20
80002e84:	ef 4c ff f8 	st.w	r7[-8],r12
80002e88:	ef 4b ff f4 	st.w	r7[-12],r11
80002e8c:	ef 4a ff f0 	st.w	r7[-16],r10
80002e90:	12 98       	mov	r8,r9
80002e92:	ef 58 ff ec 	st.h	r7[-20],r8
	uint16_t top_value;

	/* Calculate the Effective Top Value (ETV)
	 * where ETV = (Tpwma/Tgclk)-1
	 */
	top_value = (div_ceil(gclk_freq_hz,pwma_freq_hz))-1; 
80002e96:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002e9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e9e:	f2 08 00 08 	add	r8,r9,r8
80002ea2:	20 18       	sub	r8,1
80002ea4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002ea8:	f0 09 0d 08 	divu	r8,r8,r9
80002eac:	5c 88       	casts.h	r8
80002eae:	20 18       	sub	r8,1
80002eb0:	ef 58 ff fe 	st.h	r7[-2],r8

	/* Check for the maximum limit of TOP 
	 * and SPREAD value that can be loaded
	 */
	if (spread > PWMA_MAXIMUM_SPREAD)
80002eb4:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80002eb8:	e0 68 01 ff 	mov	r8,511
80002ebc:	f0 09 19 00 	cp.h	r9,r8
80002ec0:	e0 88 00 04 	brls	80002ec8 <pwma_config_enable+0x4c>
		return FAIL;
80002ec4:	30 18       	mov	r8,1
80002ec6:	c2 a8       	rjmp	80002f1a <pwma_config_enable+0x9e>
	if (top_value > PWMA_MAXIMUM_TOP)
80002ec8:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002ecc:	e0 68 0f ff 	mov	r8,4095
80002ed0:	f0 09 19 00 	cp.h	r9,r8
80002ed4:	e0 88 00 04 	brls	80002edc <pwma_config_enable+0x60>
		return FAIL;
80002ed8:	30 18       	mov	r8,1
80002eda:	c2 08       	rjmp	80002f1a <pwma_config_enable+0x9e>

	/* Disable all PWMA interrupts(if any) before enabling PWMA */
	if(pwma->imr & AVR32_PWMA_IMR_MASK)
80002edc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ee0:	70 68       	ld.w	r8,r8[0x18]
80002ee2:	e2 18 00 05 	andl	r8,0x5,COH
80002ee6:	c0 50       	breq	80002ef0 <pwma_config_enable+0x74>
		pwma->idr=AVR32_PWMA_IDR_MASK;
80002ee8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eec:	30 59       	mov	r9,5
80002eee:	91 59       	st.w	r8[0x14],r9

	pwma->cr = 
			AVR32_PWMA_EN_MASK                      //Enable the PWMA module
			|(spread <<AVR32_PWMA_CR_SPREAD_OFFSET) //Load the SPREAD value 
80002ef0:	ef 18 ff ec 	ld.uh	r8,r7[-20]
80002ef4:	b1 68       	lsl	r8,0x10
	/* Disable all PWMA interrupts(if any) before enabling PWMA */
	if(pwma->imr & AVR32_PWMA_IMR_MASK)
		pwma->idr=AVR32_PWMA_IDR_MASK;

	pwma->cr = 
			AVR32_PWMA_EN_MASK                      //Enable the PWMA module
80002ef6:	e8 18 00 03 	orl	r8,0x3

	/* Disable all PWMA interrupts(if any) before enabling PWMA */
	if(pwma->imr & AVR32_PWMA_IMR_MASK)
		pwma->idr=AVR32_PWMA_IDR_MASK;

	pwma->cr = 
80002efa:	10 99       	mov	r9,r8
80002efc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f00:	91 09       	st.w	r8[0x0],r9
			AVR32_PWMA_EN_MASK                      //Enable the PWMA module
			|(spread <<AVR32_PWMA_CR_SPREAD_OFFSET) //Load the SPREAD value 
			| AVR32_PWMA_CR_TCLR_MASK ;             //Clear the timebase counter

	/* Wait for the PWMA to be ready for writing. */
	pwma_wait_for_ready(pwma);
80002f02:	ee fc ff f8 	ld.w	r12,r7[-8]
80002f06:	f0 1f 00 08 	mcall	80002f24 <pwma_config_enable+0xa8>

	/* Load the TOP value. */
	#if (defined(_AVR32_PWMA_201_H_INCLUDED) ||\
		defined(AVR32_PWMA_200_H_INCLUDED))
		pwma->tvr = top_value & AVR32_PWMA_TVR_TOP_MASK;
80002f0a:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002f0e:	f3 d8 c0 0c 	bfextu	r9,r8,0x0,0xc
80002f12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f16:	91 b9       	st.w	r8[0x2c],r9
	#else
		pwma->cr |= (top_value <<AVR32_PWMA_CR_TOP_OFFSET);
	#endif

	return PASS;
80002f18:	30 08       	mov	r8,0
}
80002f1a:	10 9c       	mov	r12,r8
80002f1c:	2f bd       	sub	sp,-20
80002f1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f22:	00 00       	add	r0,r0
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	2e 5c       	sub	r12,-27

80002f28 <pwma_set_channels_value>:

bool pwma_set_channels_value(volatile avr32_pwma_t *pwma,
							uint64_t channel_mask,
							uint16_t duty_cycle)
{
80002f28:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80002f2c:	1a 97       	mov	r7,sp
80002f2e:	20 7d       	sub	sp,28
80002f30:	ef 4c ff f0 	st.w	r7[-16],r12
80002f34:	ee eb ff e8 	st.d	r7[-24],r10
80002f38:	12 98       	mov	r8,r9
80002f3a:	ef 58 ff e4 	st.h	r7[-28],r8
	uint32_t channel_mask_low = channel_mask & 0xffffffff;
80002f3e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f42:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t channel_mask_high = (channel_mask >> 32) & 0xffffffff;
80002f46:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002f4a:	f0 02 16 00 	lsr	r2,r8,0x0
80002f4e:	30 03       	mov	r3,0
80002f50:	04 98       	mov	r8,r2
80002f52:	ef 48 ff f8 	st.w	r7[-8],r8
	uint16_t read_top;
	uint16_t read_spread;

	/* Read the spread and top value */
	read_spread = pwma->CR.spread;
80002f56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f5a:	70 08       	ld.w	r8,r8[0x0]
80002f5c:	f1 d8 c2 09 	bfextu	r8,r8,0x10,0x9
80002f60:	5c 88       	casts.h	r8
80002f62:	ef 58 ff fe 	st.h	r7[-2],r8
	read_top = pwma->CR.top;
80002f66:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f6a:	70 08       	ld.w	r8,r8[0x0]
80002f6c:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80002f70:	5c 58       	castu.b	r8
80002f72:	ef 58 ff fc 	st.h	r7[-4],r8
	/*
	 * check if the duty cycle exceeds TOP (in normal mode)
	 * else check if the duty cycle exceed TOP-SPREAD (if spread is 
	 * enabled). if yes, return FAIL.
	 */
	if (duty_cycle > (read_top-read_spread))
80002f76:	ef 19 ff e4 	ld.uh	r9,r7[-28]
80002f7a:	ef 1a ff fc 	ld.uh	r10,r7[-4]
80002f7e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80002f82:	f4 08 01 08 	sub	r8,r10,r8
80002f86:	10 39       	cp.w	r9,r8
80002f88:	e0 8a 00 04 	brle	80002f90 <pwma_set_channels_value+0x68>
		return FAIL;
80002f8c:	30 18       	mov	r8,1
80002f8e:	c2 08       	rjmp	80002fce <pwma_set_channels_value+0xa6>

	/* Wait for the PWMA to be ready for writing.*/
	pwma_wait_for_ready(pwma);
80002f90:	ee fc ff f0 	ld.w	r12,r7[-16]
80002f94:	f0 1f 00 11 	mcall	80002fd8 <pwma_set_channels_value+0xb0>

	/* Set the common duty cycle value. */
	pwma->isduty = duty_cycle & AVR32_PWMA_ISDUTY_DUTY_MASK;
80002f98:	ef 18 ff e4 	ld.uh	r8,r7[-28]
80002f9c:	f3 d8 c0 0c 	bfextu	r9,r8,0x0,0xc
80002fa0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002fa4:	91 19       	st.w	r8[0x4],r9
	 * Define the interlinked channels. ISCHSET0 register 
	 * controls first 32 channels (0 to 31)
	 */
	#if (defined(_AVR32_PWMA_201_H_INCLUDED) ||\
		defined(AVR32_PWMA_200_H_INCLUDED))
		pwma->chgroup[0].ischset = channel_mask_low;
80002fa6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002faa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002fae:	91 c9       	st.w	r8[0x30],r9
	#else
		pwma->ischset0 = channel_mask_low;
	#endif

	/* Wait for the PWMA to be ready for writing.*/
	pwma_wait_for_ready(pwma);
80002fb0:	ee fc ff f0 	ld.w	r12,r7[-16]
80002fb4:	f0 1f 00 09 	mcall	80002fd8 <pwma_set_channels_value+0xb0>
	 * Define the interlinked channels. ISCHSET1 register 
	 * controls next 32 channels (32 to 63)
	 */
	#if (defined(_AVR32_PWMA_201_H_INCLUDED) ||\
		defined(AVR32_PWMA_200_H_INCLUDED))
	pwma->chgroup[1].ischset = channel_mask_high;
80002fb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002fbc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002fc0:	f1 49 00 40 	st.w	r8[64],r9
	#else
	pwma->ischset1 = channel_mask_high;
	#endif

	/* Wait for the PWMA to be ready for writing. */
	pwma_wait_for_ready(pwma);
80002fc4:	ee fc ff f0 	ld.w	r12,r7[-16]
80002fc8:	f0 1f 00 04 	mcall	80002fd8 <pwma_set_channels_value+0xb0>

	return PASS;
80002fcc:	30 08       	mov	r8,0
}
80002fce:	10 9c       	mov	r12,r8
80002fd0:	2f 9d       	sub	sp,-28
80002fd2:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
80002fd6:	00 00       	add	r0,r0
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	2e 5c       	sub	r12,-27

80002fdc <pwma_enable_cwg_mode>:
}

#if (defined(_AVR32_PWMA_201_H_INCLUDED) || defined(AVR32_PWMA_200_H_INCLUDED))
void pwma_enable_cwg_mode(volatile avr32_pwma_t *pwma,
						 uint32_t channel_mask)
{
80002fdc:	eb cd 40 80 	pushm	r7,lr
80002fe0:	1a 97       	mov	r7,sp
80002fe2:	20 2d       	sub	sp,8
80002fe4:	ef 4c ff fc 	st.w	r7[-4],r12
80002fe8:	ef 4b ff f8 	st.w	r7[-8],r11
	/* Enable the Composite waveform Mode */
	/* CWG0 controls channels first 32 pairs of channels channel (0 to 63) */
	pwma->chgroup[0].cwg = channel_mask;
80002fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ff0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ff4:	91 f9       	st.w	r8[0x3c],r9
}
80002ff6:	2f ed       	sub	sp,-8
80002ff8:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ffc <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002ffc:	eb cd 40 80 	pushm	r7,lr
80003000:	1a 97       	mov	r7,sp
80003002:	20 1d       	sub	sp,4
80003004:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000300c:	e6 18 00 01 	andh	r8,0x1,COH
80003010:	5f 08       	sreq	r8
80003012:	5c 58       	castu.b	r8
}
80003014:	10 9c       	mov	r12,r8
80003016:	2f fd       	sub	sp,-4
80003018:	e3 cd 80 80 	ldm	sp++,r7,pc

8000301c <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
8000301c:	eb cd 40 80 	pushm	r7,lr
80003020:	1a 97       	mov	r7,sp
80003022:	20 4d       	sub	sp,16
80003024:	ef 4c ff f4 	st.w	r7[-12],r12
80003028:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
8000302c:	fe 78 18 00 	mov	r8,-59392
80003030:	70 78       	ld.w	r8,r8[0x1c]
80003032:	30 09       	mov	r9,0
80003034:	ef 49 ff f8 	st.w	r7[-8],r9
80003038:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // crystal frequency. Gain G3 (for power optimization) is unused and if 
  // required will need to be set manually.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8000303c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003040:	30 19       	mov	r9,1
80003042:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003046:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal < 12000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
8000304a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000304e:	e0 69 1a ff 	mov	r9,6911
80003052:	ea 19 00 b7 	orh	r9,0xb7
80003056:	12 38       	cp.w	r8,r9
80003058:	e0 88 00 10 	brls	80003078 <scif_configure_osc_crystalmode+0x5c>
8000305c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003060:	e0 69 23 ff 	mov	r9,9215
80003064:	ea 19 00 f4 	orh	r9,0xf4
80003068:	12 38       	cp.w	r8,r9
8000306a:	e0 8b 00 04 	brhi	80003072 <scif_configure_osc_crystalmode+0x56>
8000306e:	30 18       	mov	r8,1
80003070:	c0 28       	rjmp	80003074 <scif_configure_osc_crystalmode+0x58>
80003072:	30 28       	mov	r8,2
80003074:	10 99       	mov	r9,r8
80003076:	c0 28       	rjmp	8000307a <scif_configure_osc_crystalmode+0x5e>
80003078:	30 09       	mov	r9,0
8000307a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000307e:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80003082:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        AVR32_SCIF_OSCCTRL0_GAIN_G2;
  AVR32_ENTER_CRITICAL_REGION( );
80003086:	e1 b8 00 00 	mfsr	r8,0x0
8000308a:	10 9c       	mov	r12,r8
8000308c:	f0 1f 00 0f 	mcall	800030c8 <scif_configure_osc_crystalmode+0xac>
80003090:	18 98       	mov	r8,r12
80003092:	ef 68 ff ff 	st.b	r7[-1],r8
80003096:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80003098:	fe 78 18 00 	mov	r8,-59392
8000309c:	31 c9       	mov	r9,28
8000309e:	ea 19 aa 00 	orh	r9,0xaa00
800030a2:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
800030a4:	fe 78 18 00 	mov	r8,-59392
800030a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030ac:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800030ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800030b2:	30 08       	mov	r8,0
800030b4:	f0 09 18 00 	cp.b	r9,r8
800030b8:	c0 20       	breq	800030bc <scif_configure_osc_crystalmode+0xa0>
800030ba:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
800030bc:	30 08       	mov	r8,0
}
800030be:	10 9c       	mov	r12,r8
800030c0:	2f cd       	sub	sp,-16
800030c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800030c6:	00 00       	add	r0,r0
800030c8:	80 00       	ld.sh	r0,r0[0x0]
800030ca:	2f fc       	sub	r12,-1

800030cc <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800030cc:	eb cd 40 80 	pushm	r7,lr
800030d0:	1a 97       	mov	r7,sp
800030d2:	20 5d       	sub	sp,20
800030d4:	ef 4c ff f4 	st.w	r7[-12],r12
800030d8:	ef 4b ff f0 	st.w	r7[-16],r11
800030dc:	14 98       	mov	r8,r10
800030de:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
800030e2:	fe 78 18 00 	mov	r8,-59392
800030e6:	70 78       	ld.w	r8,r8[0x1c]
800030e8:	30 09       	mov	r9,0
800030ea:	ef 49 ff f8 	st.w	r7[-8],r9
800030ee:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
800030f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030f6:	5c 58       	castu.b	r8
800030f8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800030fc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003100:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003104:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80003108:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
8000310c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003110:	30 19       	mov	r9,1
80003112:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80003116:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8000311a:	e1 b8 00 00 	mfsr	r8,0x0
8000311e:	10 9c       	mov	r12,r8
80003120:	f0 1f 00 16 	mcall	80003178 <scif_enable_osc+0xac>
80003124:	18 98       	mov	r8,r12
80003126:	ef 68 ff ff 	st.b	r7[-1],r8
8000312a:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
8000312c:	fe 78 18 00 	mov	r8,-59392
80003130:	31 c9       	mov	r9,28
80003132:	ea 19 aa 00 	orh	r9,0xaa00
80003136:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80003138:	fe 78 18 00 	mov	r8,-59392
8000313c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003140:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003142:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003146:	30 08       	mov	r8,0
80003148:	f0 09 18 00 	cp.b	r9,r8
8000314c:	c0 20       	breq	80003150 <scif_enable_osc+0x84>
8000314e:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80003150:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80003154:	30 08       	mov	r8,0
80003156:	f0 09 18 00 	cp.b	r9,r8
8000315a:	c0 90       	breq	8000316c <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
8000315c:	30 2c       	mov	r12,2
8000315e:	f0 1f 00 08 	mcall	8000317c <scif_enable_osc+0xb0>
80003162:	18 98       	mov	r8,r12
80003164:	58 08       	cp.w	r8,0
80003166:	c0 30       	breq	8000316c <scif_enable_osc+0xa0>
      return -1;
80003168:	3f f8       	mov	r8,-1
8000316a:	c0 28       	rjmp	8000316e <scif_enable_osc+0xa2>
  }

  return PASS;
8000316c:	30 08       	mov	r8,0
}
8000316e:	10 9c       	mov	r12,r8
80003170:	2f bd       	sub	sp,-20
80003172:	e3 cd 80 80 	ldm	sp++,r7,pc
80003176:	00 00       	add	r0,r0
80003178:	80 00       	ld.sh	r0,r0[0x0]
8000317a:	2f fc       	sub	r12,-1
8000317c:	80 00       	ld.sh	r0,r0[0x0]
8000317e:	36 8c       	mov	r12,104

80003180 <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
80003180:	eb cd 40 80 	pushm	r7,lr
80003184:	1a 97       	mov	r7,sp
80003186:	20 4d       	sub	sp,16
80003188:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
8000318c:	fe 78 18 00 	mov	r8,-59392
80003190:	70 98       	ld.w	r8,r8[0x24]
80003192:	30 09       	mov	r9,0
80003194:	ef 49 ff f8 	st.w	r7[-8],r9
80003198:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
8000319c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a0:	30 19       	mov	r9,1
800031a2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800031a6:	ef 48 ff f8 	st.w	r7[-8],r8
#if (UC3L0128 || UC3L0256 || UC3L3_L4)
  u_avr32_scif_dfll0conf.DFLL0CONF.ccen = ENABLE;
800031aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031ae:	30 19       	mov	r9,1
800031b0:	f1 d9 d0 a1 	bfins	r8,r9,0x5,0x1
800031b4:	ef 48 ff f8 	st.w	r7[-8],r8
#endif
  AVR32_ENTER_CRITICAL_REGION( );
800031b8:	e1 b8 00 00 	mfsr	r8,0x0
800031bc:	10 9c       	mov	r12,r8
800031be:	f0 1f 00 61 	mcall	80003340 <scif_dfll0_closedloop_start+0x1c0>
800031c2:	18 98       	mov	r8,r12
800031c4:	ef 68 ff fc 	st.b	r7[-4],r8
800031c8:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
800031ca:	fe 78 18 00 	mov	r8,-59392
800031ce:	32 49       	mov	r9,36
800031d0:	ea 19 aa 00 	orh	r9,0xaa00
800031d4:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
800031d6:	fe 78 18 00 	mov	r8,-59392
800031da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800031de:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800031e0:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800031e4:	30 08       	mov	r8,0
800031e6:	f0 09 18 00 	cp.b	r9,r8
800031ea:	c0 20       	breq	800031ee <scif_dfll0_closedloop_start+0x6e>
800031ec:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
800031ee:	e0 6c 40 00 	mov	r12,16384
800031f2:	f0 1f 00 55 	mcall	80003344 <scif_dfll0_closedloop_start+0x1c4>
800031f6:	18 98       	mov	r8,r12
800031f8:	58 08       	cp.w	r8,0
800031fa:	c0 30       	breq	80003200 <scif_dfll0_closedloop_start+0x80>
    return -1;
800031fc:	3f f8       	mov	r8,-1
800031fe:	c9 c8       	rjmp	80003336 <scif_dfll0_closedloop_start+0x1b6>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80003200:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003204:	70 48       	ld.w	r8,r8[0x10]
80003206:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
8000320a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000320e:	70 38       	ld.w	r8,r8[0xc]
80003210:	b1 68       	lsl	r8,0x10
80003212:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80003216:	f3 e8 10 08 	or	r8,r9,r8
8000321a:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
8000321e:	e1 b8 00 00 	mfsr	r8,0x0
80003222:	10 9c       	mov	r12,r8
80003224:	f0 1f 00 47 	mcall	80003340 <scif_dfll0_closedloop_start+0x1c0>
80003228:	18 98       	mov	r8,r12
8000322a:	ef 68 ff fd 	st.b	r7[-3],r8
8000322e:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
80003230:	fe 78 18 00 	mov	r8,-59392
80003234:	32 c9       	mov	r9,44
80003236:	ea 19 aa 00 	orh	r9,0xaa00
8000323a:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
8000323c:	fe 78 18 00 	mov	r8,-59392
80003240:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003244:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003246:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000324a:	30 08       	mov	r8,0
8000324c:	f0 09 18 00 	cp.b	r9,r8
80003250:	c0 20       	breq	80003254 <scif_dfll0_closedloop_start+0xd4>
80003252:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80003254:	e0 6c 40 00 	mov	r12,16384
80003258:	f0 1f 00 3b 	mcall	80003344 <scif_dfll0_closedloop_start+0x1c4>
8000325c:	18 98       	mov	r8,r12
8000325e:	58 08       	cp.w	r8,0
80003260:	c0 30       	breq	80003266 <scif_dfll0_closedloop_start+0xe6>
    return -1;
80003262:	3f f8       	mov	r8,-1
80003264:	c6 98       	rjmp	80003336 <scif_dfll0_closedloop_start+0x1b6>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
80003266:	e1 b8 00 00 	mfsr	r8,0x0
8000326a:	10 9c       	mov	r12,r8
8000326c:	f0 1f 00 35 	mcall	80003340 <scif_dfll0_closedloop_start+0x1c0>
80003270:	18 98       	mov	r8,r12
80003272:	ef 68 ff fe 	st.b	r7[-2],r8
80003276:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
80003278:	fe 78 18 00 	mov	r8,-59392
8000327c:	32 89       	mov	r9,40
8000327e:	ea 19 aa 00 	orh	r9,0xaa00
80003282:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
80003284:	fe 78 18 00 	mov	r8,-59392
80003288:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000328c:	72 19       	ld.w	r9,r9[0x4]
8000328e:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
80003292:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003296:	72 29       	ld.w	r9,r9[0x8]
80003298:	b1 69       	lsl	r9,0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
8000329a:	f5 e9 10 09 	or	r9,r10,r9
8000329e:	91 a9       	st.w	r8[0x28],r9
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
800032a0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800032a4:	30 08       	mov	r8,0
800032a6:	f0 09 18 00 	cp.b	r9,r8
800032aa:	c0 20       	breq	800032ae <scif_dfll0_closedloop_start+0x12e>
800032ac:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
800032ae:	e0 6c 40 00 	mov	r12,16384
800032b2:	f0 1f 00 25 	mcall	80003344 <scif_dfll0_closedloop_start+0x1c4>
800032b6:	18 98       	mov	r8,r12
800032b8:	58 08       	cp.w	r8,0
800032ba:	c0 30       	breq	800032c0 <scif_dfll0_closedloop_start+0x140>
    return -1;
800032bc:	3f f8       	mov	r8,-1
800032be:	c3 c8       	rjmp	80003336 <scif_dfll0_closedloop_start+0x1b6>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
800032c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c4:	30 19       	mov	r9,1
800032c6:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800032ca:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
800032ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032d2:	70 08       	ld.w	r8,r8[0x0]
800032d4:	5c 58       	castu.b	r8
800032d6:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
800032da:	e1 b8 00 00 	mfsr	r8,0x0
800032de:	10 9c       	mov	r12,r8
800032e0:	f0 1f 00 18 	mcall	80003340 <scif_dfll0_closedloop_start+0x1c0>
800032e4:	18 98       	mov	r8,r12
800032e6:	ef 68 ff ff 	st.b	r7[-1],r8
800032ea:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
800032ec:	fe 78 18 00 	mov	r8,-59392
800032f0:	32 49       	mov	r9,36
800032f2:	ea 19 aa 00 	orh	r9,0xaa00
800032f6:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
800032f8:	fe 78 18 00 	mov	r8,-59392
800032fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003300:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003302:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003306:	30 08       	mov	r8,0
80003308:	f0 09 18 00 	cp.b	r9,r8
8000330c:	c0 20       	breq	80003310 <scif_dfll0_closedloop_start+0x190>
8000330e:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80003310:	e0 6c 40 00 	mov	r12,16384
80003314:	f0 1f 00 0c 	mcall	80003344 <scif_dfll0_closedloop_start+0x1c4>
80003318:	18 98       	mov	r8,r12
8000331a:	58 08       	cp.w	r8,0
8000331c:	c0 30       	breq	80003322 <scif_dfll0_closedloop_start+0x1a2>
    return -1;
8000331e:	3f f8       	mov	r8,-1
80003320:	c0 b8       	rjmp	80003336 <scif_dfll0_closedloop_start+0x1b6>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
80003322:	e0 6c 02 00 	mov	r12,512
80003326:	f0 1f 00 08 	mcall	80003344 <scif_dfll0_closedloop_start+0x1c4>
8000332a:	18 98       	mov	r8,r12
8000332c:	58 08       	cp.w	r8,0
8000332e:	c0 30       	breq	80003334 <scif_dfll0_closedloop_start+0x1b4>
    return -1;
80003330:	3f f8       	mov	r8,-1
80003332:	c0 28       	rjmp	80003336 <scif_dfll0_closedloop_start+0x1b6>

  return PASS;
80003334:	30 08       	mov	r8,0
}
80003336:	10 9c       	mov	r12,r8
80003338:	2f cd       	sub	sp,-16
8000333a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000333e:	00 00       	add	r0,r0
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	2f fc       	sub	r12,-1
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	36 8c       	mov	r12,104

80003348 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
80003348:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000334c:	1a 97       	mov	r7,sp
8000334e:	21 6d       	sub	sp,88
80003350:	ef 4c ff e4 	st.w	r7[-28],r12
80003354:	ee eb ff dc 	st.d	r7[-36],r10
80003358:	12 98       	mov	r8,r9
8000335a:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
8000335e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003362:	70 08       	ld.w	r8,r8[0x0]
80003364:	58 08       	cp.w	r8,0
80003366:	c0 61       	brne	80003372 <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
80003368:	e0 78 c2 00 	mov	r8,115200
8000336c:	ef 48 ff fc 	st.w	r7[-4],r8
80003370:	c3 38       	rjmp	800033d6 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
80003372:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003376:	70 08       	ld.w	r8,r8[0x0]
80003378:	58 18       	cp.w	r8,1
8000337a:	c0 60       	breq	80003386 <scif_dfll0_closedloop_configure_and_start+0x3e>
8000337c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003380:	70 08       	ld.w	r8,r8[0x0]
80003382:	58 98       	cp.w	r8,9
80003384:	c0 61       	brne	80003390 <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
80003386:	e0 68 80 00 	mov	r8,32768
8000338a:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
8000338e:	c2 48       	rjmp	800033d6 <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
80003390:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003394:	70 08       	ld.w	r8,r8[0x0]
80003396:	58 38       	cp.w	r8,3
80003398:	c0 71       	brne	800033a6 <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
8000339a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000339e:	70 38       	ld.w	r8,r8[0xc]
800033a0:	ef 48 ff fc 	st.w	r7[-4],r8
800033a4:	c1 98       	rjmp	800033d6 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
800033a6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800033aa:	70 08       	ld.w	r8,r8[0x0]
800033ac:	58 48       	cp.w	r8,4
800033ae:	c0 81       	brne	800033be <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
800033b0:	e0 68 0e 00 	mov	r8,3584
800033b4:	ea 18 07 27 	orh	r8,0x727
800033b8:	ef 48 ff fc 	st.w	r7[-4],r8
800033bc:	c0 d8       	rjmp	800033d6 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
800033be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800033c2:	70 08       	ld.w	r8,r8[0x0]
800033c4:	58 b8       	cp.w	r8,11
800033c6:	c0 61       	brne	800033d2 <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
800033c8:	e0 68 03 e8 	mov	r8,1000
800033cc:	ef 48 ff fc 	st.w	r7[-4],r8
800033d0:	c0 38       	rjmp	800033d6 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
800033d2:	3f f8       	mov	r8,-1
800033d4:	cc 98       	rjmp	80003566 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
800033d6:	ee fb ff e4 	ld.w	r11,r7[-28]
800033da:	30 0c       	mov	r12,0
800033dc:	f0 1f 00 65 	mcall	80003570 <scif_dfll0_closedloop_configure_and_start+0x228>
800033e0:	18 98       	mov	r8,r12
800033e2:	58 08       	cp.w	r8,0
800033e4:	c0 30       	breq	800033ea <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
800033e6:	3f f8       	mov	r8,-1
800033e8:	cb f8       	rjmp	80003566 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
800033ea:	ee ea ff dc 	ld.d	r10,r7[-36]
800033ee:	14 98       	mov	r8,r10
800033f0:	16 99       	mov	r9,r11
800033f2:	f0 0c 16 18 	lsr	r12,r8,0x18
800033f6:	f2 03 15 08 	lsl	r3,r9,0x8
800033fa:	f9 e3 10 03 	or	r3,r12,r3
800033fe:	f0 02 15 08 	lsl	r2,r8,0x8
80003402:	e4 0a 01 0a 	sub	r10,r2,r10
80003406:	e6 0b 01 4b 	sbc	r11,r3,r11
8000340a:	e0 68 5a 00 	mov	r8,23040
8000340e:	ea 18 a0 08 	orh	r8,0xa008
80003412:	3f d9       	mov	r9,-3
80003414:	10 0a       	add	r10,r8
80003416:	f6 09 00 4b 	adc	r11,r11,r9
8000341a:	e0 68 77 80 	mov	r8,30592
8000341e:	ea 18 06 8e 	orh	r8,0x68e
80003422:	30 09       	mov	r9,0
80003424:	f0 1f 00 54 	mcall	80003574 <scif_dfll0_closedloop_configure_and_start+0x22c>
80003428:	14 98       	mov	r8,r10
8000342a:	16 99       	mov	r9,r11
8000342c:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
80003430:	ee fa ff fc 	ld.w	r10,r7[-4]
80003434:	ef 4a ff ac 	st.w	r7[-84],r10
80003438:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000343c:	bf 58       	asr	r8,0x1f
8000343e:	ef 48 ff a8 	st.w	r7[-88],r8
80003442:	ee e8 ff a8 	ld.d	r8,r7[-88]
80003446:	ee ea ff dc 	ld.d	r10,r7[-36]
8000344a:	f0 1f 00 4b 	mcall	80003574 <scif_dfll0_closedloop_configure_and_start+0x22c>
8000344e:	14 98       	mov	r8,r10
80003450:	16 99       	mov	r9,r11
80003452:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
80003456:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000345a:	70 28       	ld.w	r8,r8[0x8]
8000345c:	58 08       	cp.w	r8,0
8000345e:	c2 e1       	brne	800034ba <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
80003460:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003464:	b1 88       	lsr	r8,0x10
80003466:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000346a:	b1 69       	lsl	r9,0x10
8000346c:	ef 49 ff b0 	st.w	r7[-80],r9
80003470:	ee f9 ff b0 	ld.w	r9,r7[-80]
80003474:	f1 e9 10 09 	or	r9,r8,r9
80003478:	ef 49 ff b0 	st.w	r7[-80],r9
8000347c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003480:	b1 68       	lsl	r8,0x10
80003482:	ef 48 ff b4 	st.w	r7[-76],r8
80003486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000348a:	ef 48 ff bc 	st.w	r7[-68],r8
8000348e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003492:	bf 58       	asr	r8,0x1f
80003494:	ef 48 ff b8 	st.w	r7[-72],r8
80003498:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000349c:	ee ea ff b0 	ld.d	r10,r7[-80]
800034a0:	f0 1f 00 35 	mcall	80003574 <scif_dfll0_closedloop_configure_and_start+0x22c>
800034a4:	14 98       	mov	r8,r10
800034a6:	16 99       	mov	r9,r11
800034a8:	10 99       	mov	r9,r8
800034aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034ae:	b1 68       	lsl	r8,0x10
800034b0:	f2 08 01 08 	sub	r8,r9,r8
800034b4:	ef 48 ff ec 	st.w	r7[-20],r8
800034b8:	c4 68       	rjmp	80003544 <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
800034ba:	ee f8 ff e0 	ld.w	r8,r7[-32]
800034be:	b1 88       	lsr	r8,0x10
800034c0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800034c4:	b1 69       	lsl	r9,0x10
800034c6:	ef 49 ff c0 	st.w	r7[-64],r9
800034ca:	ee fa ff c0 	ld.w	r10,r7[-64]
800034ce:	f1 ea 10 0a 	or	r10,r8,r10
800034d2:	ef 4a ff c0 	st.w	r7[-64],r10
800034d6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800034da:	b1 68       	lsl	r8,0x10
800034dc:	ef 48 ff c4 	st.w	r7[-60],r8
800034e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800034e4:	ef 49 ff cc 	st.w	r7[-52],r9
800034e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034ec:	bf 58       	asr	r8,0x1f
800034ee:	ef 48 ff c8 	st.w	r7[-56],r8
800034f2:	ee e8 ff c8 	ld.d	r8,r7[-56]
800034f6:	ee ea ff c0 	ld.d	r10,r7[-64]
800034fa:	f0 1f 00 1f 	mcall	80003574 <scif_dfll0_closedloop_configure_and_start+0x22c>
800034fe:	14 98       	mov	r8,r10
80003500:	16 99       	mov	r9,r11
80003502:	ee fa ff f0 	ld.w	r10,r7[-16]
80003506:	ef 4a ff d4 	st.w	r7[-44],r10
8000350a:	30 0a       	mov	r10,0
8000350c:	ef 4a ff d0 	st.w	r7[-48],r10
80003510:	ee fa ff d4 	ld.w	r10,r7[-44]
80003514:	b1 8a       	lsr	r10,0x10
80003516:	ee f1 ff d0 	ld.w	r1,r7[-48]
8000351a:	b1 61       	lsl	r1,0x10
8000351c:	f5 e1 10 01 	or	r1,r10,r1
80003520:	ee f0 ff d4 	ld.w	r0,r7[-44]
80003524:	b1 60       	lsl	r0,0x10
80003526:	00 18       	sub	r8,r0
80003528:	f2 01 01 49 	sbc	r9,r9,r1
8000352c:	10 08       	add	r8,r8
8000352e:	f2 09 00 49 	adc	r9,r9,r9
80003532:	10 99       	mov	r9,r8
80003534:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003538:	70 18       	ld.w	r8,r8[0x4]
8000353a:	2f f8       	sub	r8,-1
8000353c:	f2 08 02 48 	mul	r8,r9,r8
80003540:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
80003544:	30 48       	mov	r8,4
80003546:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
8000354a:	30 48       	mov	r8,4
8000354c:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
80003550:	ee c8 00 18 	sub	r8,r7,24
80003554:	10 9c       	mov	r12,r8
80003556:	f0 1f 00 09 	mcall	80003578 <scif_dfll0_closedloop_configure_and_start+0x230>
8000355a:	18 98       	mov	r8,r12
8000355c:	58 08       	cp.w	r8,0
8000355e:	c0 30       	breq	80003564 <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
80003560:	3f f8       	mov	r8,-1
80003562:	c0 28       	rjmp	80003566 <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
80003564:	30 08       	mov	r8,0
}
80003566:	10 9c       	mov	r12,r8
80003568:	2e ad       	sub	sp,-88
8000356a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000356e:	00 00       	add	r0,r0
80003570:	80 00       	ld.sh	r0,r0[0x0]
80003572:	36 20       	mov	r0,98
80003574:	80 00       	ld.sh	r0,r0[0x0]
80003576:	67 52       	ld.w	r2,r3[0x54]
80003578:	80 00       	ld.sh	r0,r0[0x0]
8000357a:	31 80       	mov	r0,24

8000357c <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
8000357c:	eb cd 40 80 	pushm	r7,lr
80003580:	1a 97       	mov	r7,sp
80003582:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
80003584:	e1 b8 00 00 	mfsr	r8,0x0
80003588:	10 9c       	mov	r12,r8
8000358a:	f0 1f 00 0e 	mcall	800035c0 <scif_start_rc120M+0x44>
8000358e:	18 98       	mov	r8,r12
80003590:	ef 68 ff ff 	st.b	r7[-1],r8
80003594:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80003596:	fe 78 18 00 	mov	r8,-59392
8000359a:	35 89       	mov	r9,88
8000359c:	ea 19 aa 00 	orh	r9,0xaa00
800035a0:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
800035a2:	fe 78 18 00 	mov	r8,-59392
800035a6:	30 19       	mov	r9,1
800035a8:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800035ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800035b0:	30 08       	mov	r8,0
800035b2:	f0 09 18 00 	cp.b	r9,r8
800035b6:	c0 20       	breq	800035ba <scif_start_rc120M+0x3e>
800035b8:	d5 03       	csrf	0x10
}
800035ba:	2f fd       	sub	sp,-4
800035bc:	e3 cd 80 80 	ldm	sp++,r7,pc
800035c0:	80 00       	ld.sh	r0,r0[0x0]
800035c2:	2f fc       	sub	r12,-1

800035c4 <scif_disable_rc32out>:
  AVR32_SCIF.rc32kcr = temp;
  AVR32_LEAVE_CRITICAL_REGION( );
}

void scif_disable_rc32out(void)
{
800035c4:	eb cd 40 80 	pushm	r7,lr
800035c8:	1a 97       	mov	r7,sp
800035ca:	20 2d       	sub	sp,8
  unsigned long temp;
  AVR32_ENTER_CRITICAL_REGION( );
800035cc:	e1 b8 00 00 	mfsr	r8,0x0
800035d0:	10 9c       	mov	r12,r8
800035d2:	f0 1f 00 13 	mcall	8000361c <scif_disable_rc32out+0x58>
800035d6:	18 98       	mov	r8,r12
800035d8:	ef 68 ff ff 	st.b	r7[-1],r8
800035dc:	d3 03       	ssrf	0x10
  temp = AVR32_PM.ppcr & (~AVR32_PM_PPCR_FRC32_MASK);
800035de:	fe 78 14 00 	mov	r8,-60416
800035e2:	f0 f8 01 60 	ld.w	r8,r8[352]
800035e6:	a1 d8       	cbr	r8,0x1
800035e8:	ef 48 ff f8 	st.w	r7[-8],r8
  // Un-force the RC32 signal from being output on the dedicated pin (PA20).
  AVR32_PM.unlock = 0xAA000000 | AVR32_PM_PPCR;
800035ec:	fe 78 14 00 	mov	r8,-60416
800035f0:	e0 69 01 60 	mov	r9,352
800035f4:	ea 19 aa 00 	orh	r9,0xaa00
800035f8:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.ppcr = temp;
800035fc:	fe 78 14 00 	mov	r8,-60416
80003600:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003604:	f1 49 01 60 	st.w	r8[352],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003608:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000360c:	30 08       	mov	r8,0
8000360e:	f0 09 18 00 	cp.b	r9,r8
80003612:	c0 20       	breq	80003616 <scif_disable_rc32out+0x52>
80003614:	d5 03       	csrf	0x10
}
80003616:	2f ed       	sub	sp,-8
80003618:	e3 cd 80 80 	ldm	sp++,r7,pc
8000361c:	80 00       	ld.sh	r0,r0[0x0]
8000361e:	2f fc       	sub	r12,-1

80003620 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80003620:	eb cd 40 80 	pushm	r7,lr
80003624:	1a 97       	mov	r7,sp
80003626:	20 2d       	sub	sp,8
80003628:	ef 4c ff fc 	st.w	r7[-4],r12
8000362c:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003630:	fe 78 18 00 	mov	r8,-59392
80003634:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003638:	2e 49       	sub	r9,-28
8000363a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000363e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003642:	5c 58       	castu.b	r8
80003644:	c0 30       	breq	8000364a <scif_start_gclk+0x2a>
    return -1;
80003646:	3f f8       	mov	r8,-1
80003648:	c1 e8       	rjmp	80003684 <scif_start_gclk+0x64>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000364a:	fe 78 18 00 	mov	r8,-59392
8000364e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003652:	ee fa ff f8 	ld.w	r10,r7[-8]
80003656:	74 1a       	ld.w	r10,r10[0x4]
80003658:	f4 0b 15 10 	lsl	r11,r10,0x10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8000365c:	ee fa ff f8 	ld.w	r10,r7[-8]
80003660:	74 2a       	ld.w	r10,r10[0x8]
80003662:	a1 7a       	lsl	r10,0x1
80003664:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80003668:	14 4b       	or	r11,r10
8000366a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000366e:	74 0a       	ld.w	r10,r10[0x0]
80003670:	a9 6a       	lsl	r10,0x8
80003672:	e2 1a 1f 00 	andl	r10,0x1f00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
80003676:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000367a:	a1 aa       	sbr	r10,0x0
8000367c:	2e 49       	sub	r9,-28
8000367e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80003682:	30 08       	mov	r8,0
}
80003684:	10 9c       	mov	r12,r8
80003686:	2f ed       	sub	sp,-8
80003688:	e3 cd 80 80 	ldm	sp++,r7,pc

8000368c <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
8000368c:	eb cd 40 80 	pushm	r7,lr
80003690:	1a 97       	mov	r7,sp
80003692:	20 2d       	sub	sp,8
80003694:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
80003698:	e0 78 86 a0 	mov	r8,100000
8000369c:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
800036a0:	c0 c8       	rjmp	800036b8 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
800036a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036a6:	20 18       	sub	r8,1
800036a8:	ef 48 ff fc 	st.w	r7[-4],r8
800036ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036b0:	58 08       	cp.w	r8,0
800036b2:	c0 31       	brne	800036b8 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
800036b4:	3f f8       	mov	r8,-1
800036b6:	c0 a8       	rjmp	800036ca <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
800036b8:	fe 78 18 00 	mov	r8,-59392
800036bc:	70 59       	ld.w	r9,r8[0x14]
800036be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036c2:	f3 e8 00 08 	and	r8,r9,r8
800036c6:	ce e0       	breq	800036a2 <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
800036c8:	30 08       	mov	r8,0
}
800036ca:	10 9c       	mov	r12,r8
800036cc:	2f ed       	sub	sp,-8
800036ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800036d2 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800036d2:	eb cd 40 80 	pushm	r7,lr
800036d6:	1a 97       	mov	r7,sp
800036d8:	20 1d       	sub	sp,4
800036da:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800036de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036e2:	e6 18 00 01 	andh	r8,0x1,COH
800036e6:	5f 08       	sreq	r8
800036e8:	5c 58       	castu.b	r8
}
800036ea:	10 9c       	mov	r12,r8
800036ec:	2f fd       	sub	sp,-4
800036ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800036f2:	d7 03       	nop

800036f4 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800036f4:	eb cd 40 80 	pushm	r7,lr
800036f8:	1a 97       	mov	r7,sp
800036fa:	20 4d       	sub	sp,16
800036fc:	ef 4c ff f8 	st.w	r7[-8],r12
80003700:	ef 4b ff f4 	st.w	r7[-12],r11
80003704:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003708:	e1 b8 00 00 	mfsr	r8,0x0
8000370c:	10 9c       	mov	r12,r8
8000370e:	f0 1f 00 73 	mcall	800038d8 <tc_configure_interrupts+0x1e4>
80003712:	18 98       	mov	r8,r12
80003714:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003718:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000371c:	58 28       	cp.w	r8,2
8000371e:	e0 88 00 04 	brls	80003726 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80003722:	3f f8       	mov	r8,-1
80003724:	cd 68       	rjmp	800038d0 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003726:	ee fb ff f4 	ld.w	r11,r7[-12]
8000372a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000372e:	70 08       	ld.w	r8,r8[0x0]
80003730:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003734:	5c 58       	castu.b	r8
80003736:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000373a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000373e:	70 08       	ld.w	r8,r8[0x0]
80003740:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003744:	5c 58       	castu.b	r8
80003746:	a7 68       	lsl	r8,0x6
80003748:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
8000374a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000374e:	70 08       	ld.w	r8,r8[0x0]
80003750:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80003754:	5c 58       	castu.b	r8
80003756:	a5 78       	lsl	r8,0x5
80003758:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000375a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000375e:	70 08       	ld.w	r8,r8[0x0]
80003760:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003764:	5c 58       	castu.b	r8
80003766:	a5 68       	lsl	r8,0x4
80003768:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000376a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000376e:	70 08       	ld.w	r8,r8[0x0]
80003770:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003774:	5c 58       	castu.b	r8
80003776:	a3 78       	lsl	r8,0x3
80003778:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000377a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000377e:	70 08       	ld.w	r8,r8[0x0]
80003780:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80003784:	5c 58       	castu.b	r8
80003786:	a3 68       	lsl	r8,0x2
80003788:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
8000378a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000378e:	70 08       	ld.w	r8,r8[0x0]
80003790:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003794:	5c 58       	castu.b	r8
80003796:	a1 78       	lsl	r8,0x1
80003798:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
8000379a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000379e:	70 08       	ld.w	r8,r8[0x0]
800037a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800037a4:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800037a6:	f3 e8 10 08 	or	r8,r9,r8
800037aa:	10 99       	mov	r9,r8
800037ac:	ee fa ff f8 	ld.w	r10,r7[-8]
800037b0:	f6 08 15 06 	lsl	r8,r11,0x6
800037b4:	f4 08 00 08 	add	r8,r10,r8
800037b8:	2d c8       	sub	r8,-36
800037ba:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800037bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800037c0:	30 08       	mov	r8,0
800037c2:	f0 09 18 00 	cp.b	r9,r8
800037c6:	c0 20       	breq	800037ca <tc_configure_interrupts+0xd6>
800037c8:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800037ca:	ee fb ff f4 	ld.w	r11,r7[-12]
800037ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037d2:	70 08       	ld.w	r8,r8[0x0]
800037d4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800037d8:	5c 58       	castu.b	r8
800037da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800037de:	c0 41       	brne	800037e6 <tc_configure_interrupts+0xf2>
800037e0:	e0 69 00 80 	mov	r9,128
800037e4:	c0 28       	rjmp	800037e8 <tc_configure_interrupts+0xf4>
800037e6:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800037e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037ec:	70 08       	ld.w	r8,r8[0x0]
800037ee:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800037f2:	5c 58       	castu.b	r8
800037f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800037f8:	c0 31       	brne	800037fe <tc_configure_interrupts+0x10a>
800037fa:	34 08       	mov	r8,64
800037fc:	c0 28       	rjmp	80003800 <tc_configure_interrupts+0x10c>
800037fe:	30 08       	mov	r8,0
80003800:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80003802:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003806:	70 08       	ld.w	r8,r8[0x0]
80003808:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000380c:	5c 58       	castu.b	r8
8000380e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003812:	c0 31       	brne	80003818 <tc_configure_interrupts+0x124>
80003814:	32 08       	mov	r8,32
80003816:	c0 28       	rjmp	8000381a <tc_configure_interrupts+0x126>
80003818:	30 08       	mov	r8,0
8000381a:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
8000381c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003820:	70 08       	ld.w	r8,r8[0x0]
80003822:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003826:	5c 58       	castu.b	r8
80003828:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000382c:	c0 31       	brne	80003832 <tc_configure_interrupts+0x13e>
8000382e:	31 08       	mov	r8,16
80003830:	c0 28       	rjmp	80003834 <tc_configure_interrupts+0x140>
80003832:	30 08       	mov	r8,0
80003834:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80003836:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000383a:	70 08       	ld.w	r8,r8[0x0]
8000383c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003840:	5c 58       	castu.b	r8
80003842:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003846:	c0 31       	brne	8000384c <tc_configure_interrupts+0x158>
80003848:	30 88       	mov	r8,8
8000384a:	c0 28       	rjmp	8000384e <tc_configure_interrupts+0x15a>
8000384c:	30 08       	mov	r8,0
8000384e:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80003850:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003854:	70 08       	ld.w	r8,r8[0x0]
80003856:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000385a:	5c 58       	castu.b	r8
8000385c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003860:	c0 31       	brne	80003866 <tc_configure_interrupts+0x172>
80003862:	30 48       	mov	r8,4
80003864:	c0 28       	rjmp	80003868 <tc_configure_interrupts+0x174>
80003866:	30 08       	mov	r8,0
80003868:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000386a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000386e:	70 08       	ld.w	r8,r8[0x0]
80003870:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003874:	5c 58       	castu.b	r8
80003876:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000387a:	c0 31       	brne	80003880 <tc_configure_interrupts+0x18c>
8000387c:	30 28       	mov	r8,2
8000387e:	c0 28       	rjmp	80003882 <tc_configure_interrupts+0x18e>
80003880:	30 08       	mov	r8,0
80003882:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80003884:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003888:	70 08       	ld.w	r8,r8[0x0]
8000388a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000388e:	5c 58       	castu.b	r8
80003890:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003894:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80003896:	f3 e8 10 08 	or	r8,r9,r8
8000389a:	10 99       	mov	r9,r8
8000389c:	ee fa ff f8 	ld.w	r10,r7[-8]
800038a0:	f6 08 15 06 	lsl	r8,r11,0x6
800038a4:	f4 08 00 08 	add	r8,r10,r8
800038a8:	2d 88       	sub	r8,-40
800038aa:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800038ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800038b4:	a1 78       	lsl	r8,0x1
800038b6:	2f f8       	sub	r8,-1
800038b8:	a5 78       	lsl	r8,0x5
800038ba:	f2 08 00 08 	add	r8,r9,r8
800038be:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800038c0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038c4:	30 08       	mov	r8,0
800038c6:	f0 09 18 00 	cp.b	r9,r8
800038ca:	c0 20       	breq	800038ce <tc_configure_interrupts+0x1da>
800038cc:	d5 03       	csrf	0x10

  return 0;
800038ce:	30 08       	mov	r8,0
}
800038d0:	10 9c       	mov	r12,r8
800038d2:	2f cd       	sub	sp,-16
800038d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800038d8:	80 00       	ld.sh	r0,r0[0x0]
800038da:	36 d2       	mov	r2,109

800038dc <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800038dc:	eb cd 40 80 	pushm	r7,lr
800038e0:	1a 97       	mov	r7,sp
800038e2:	20 2d       	sub	sp,8
800038e4:	ef 4c ff fc 	st.w	r7[-4],r12
800038e8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800038ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038f0:	70 08       	ld.w	r8,r8[0x0]
800038f2:	58 28       	cp.w	r8,2
800038f4:	e0 88 00 04 	brls	800038fc <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
800038f8:	3f f8       	mov	r8,-1
800038fa:	c9 78       	rjmp	80003a28 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800038fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003900:	70 09       	ld.w	r9,r8[0x0]
80003902:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003906:	70 18       	ld.w	r8,r8[0x4]
80003908:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
8000390c:	5c 58       	castu.b	r8
8000390e:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80003912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003916:	70 18       	ld.w	r8,r8[0x4]
80003918:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
8000391c:	5c 58       	castu.b	r8
8000391e:	bd 68       	lsl	r8,0x1c
80003920:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80003922:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003926:	70 18       	ld.w	r8,r8[0x4]
80003928:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
8000392c:	5c 58       	castu.b	r8
8000392e:	bb 68       	lsl	r8,0x1a
80003930:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80003932:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003936:	70 18       	ld.w	r8,r8[0x4]
80003938:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
8000393c:	5c 58       	castu.b	r8
8000393e:	b9 68       	lsl	r8,0x18
80003940:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80003942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003946:	70 18       	ld.w	r8,r8[0x4]
80003948:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
8000394c:	5c 58       	castu.b	r8
8000394e:	b7 68       	lsl	r8,0x16
80003950:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80003952:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003956:	70 18       	ld.w	r8,r8[0x4]
80003958:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
8000395c:	5c 58       	castu.b	r8
8000395e:	b5 68       	lsl	r8,0x14
80003960:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80003962:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003966:	70 18       	ld.w	r8,r8[0x4]
80003968:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
8000396c:	5c 58       	castu.b	r8
8000396e:	b3 68       	lsl	r8,0x12
80003970:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80003972:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003976:	70 18       	ld.w	r8,r8[0x4]
80003978:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000397c:	5c 58       	castu.b	r8
8000397e:	b1 68       	lsl	r8,0x10
80003980:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80003984:	10 9a       	mov	r10,r8
80003986:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80003988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000398c:	70 18       	ld.w	r8,r8[0x4]
8000398e:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80003992:	5c 58       	castu.b	r8
80003994:	ad 78       	lsl	r8,0xd
80003996:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80003998:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000399c:	70 18       	ld.w	r8,r8[0x4]
8000399e:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
800039a2:	5c 58       	castu.b	r8
800039a4:	ad 68       	lsl	r8,0xc
800039a6:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
800039a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039ac:	70 18       	ld.w	r8,r8[0x4]
800039ae:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800039b2:	5c 58       	castu.b	r8
800039b4:	ab 68       	lsl	r8,0xa
800039b6:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
800039b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039bc:	70 18       	ld.w	r8,r8[0x4]
800039be:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800039c2:	5c 58       	castu.b	r8
800039c4:	a9 68       	lsl	r8,0x8
800039c6:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
800039c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039cc:	70 18       	ld.w	r8,r8[0x4]
800039ce:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800039d2:	5c 58       	castu.b	r8
800039d4:	a7 78       	lsl	r8,0x7
800039d6:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
800039d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039dc:	70 18       	ld.w	r8,r8[0x4]
800039de:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800039e2:	5c 58       	castu.b	r8
800039e4:	a7 68       	lsl	r8,0x6
800039e6:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
800039e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039ec:	70 18       	ld.w	r8,r8[0x4]
800039ee:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
800039f2:	5c 58       	castu.b	r8
800039f4:	a5 68       	lsl	r8,0x4
800039f6:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
800039f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039fc:	70 18       	ld.w	r8,r8[0x4]
800039fe:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003a02:	5c 58       	castu.b	r8
80003a04:	a3 78       	lsl	r8,0x3
80003a06:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80003a08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a0c:	70 18       	ld.w	r8,r8[0x4]
80003a0e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003a12:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80003a14:	f5 e8 10 08 	or	r8,r10,r8
80003a18:	10 9a       	mov	r10,r8
80003a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a1e:	a5 69       	lsl	r9,0x4
80003a20:	2f f9       	sub	r9,-1
80003a22:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80003a26:	30 08       	mov	r8,0
}
80003a28:	10 9c       	mov	r12,r8
80003a2a:	2f ed       	sub	sp,-8
80003a2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003a30 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80003a30:	eb cd 40 80 	pushm	r7,lr
80003a34:	1a 97       	mov	r7,sp
80003a36:	20 2d       	sub	sp,8
80003a38:	ef 4c ff fc 	st.w	r7[-4],r12
80003a3c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003a40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a44:	58 28       	cp.w	r8,2
80003a46:	e0 88 00 04 	brls	80003a4e <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
80003a4a:	3f f8       	mov	r8,-1
80003a4c:	c0 b8       	rjmp	80003a62 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80003a4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a52:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003a56:	a7 68       	lsl	r8,0x6
80003a58:	f2 08 00 08 	add	r8,r9,r8
80003a5c:	30 59       	mov	r9,5
80003a5e:	91 09       	st.w	r8[0x0],r9

  return 0;
80003a60:	30 08       	mov	r8,0
}
80003a62:	10 9c       	mov	r12,r8
80003a64:	2f ed       	sub	sp,-8
80003a66:	e3 cd 80 80 	ldm	sp++,r7,pc

80003a6a <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80003a6a:	eb cd 40 80 	pushm	r7,lr
80003a6e:	1a 97       	mov	r7,sp
80003a70:	20 3d       	sub	sp,12
80003a72:	ef 4c ff fc 	st.w	r7[-4],r12
80003a76:	ef 4b ff f8 	st.w	r7[-8],r11
80003a7a:	14 98       	mov	r8,r10
80003a7c:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003a80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a84:	58 28       	cp.w	r8,2
80003a86:	e0 88 00 04 	brls	80003a8e <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
80003a8a:	3f f8       	mov	r8,-1
80003a8c:	c2 78       	rjmp	80003ada <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80003a8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003a92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a96:	a5 69       	lsl	r9,0x4
80003a98:	2f f9       	sub	r9,-1
80003a9a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003a9e:	e2 18 80 00 	andl	r8,0x8000,COH
80003aa2:	c1 a0       	breq	80003ad6 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80003aa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003aa8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003aac:	ee fa ff fc 	ld.w	r10,r7[-4]
80003ab0:	a7 69       	lsl	r9,0x6
80003ab2:	f4 09 00 09 	add	r9,r10,r9
80003ab6:	2e 49       	sub	r9,-28
80003ab8:	72 09       	ld.w	r9,r9[0x0]
80003aba:	12 9a       	mov	r10,r9
80003abc:	e0 1a 00 00 	andl	r10,0x0
80003ac0:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80003ac4:	f5 e9 10 09 	or	r9,r10,r9
80003ac8:	ee fa ff fc 	ld.w	r10,r7[-4]
80003acc:	a7 68       	lsl	r8,0x6
80003ace:	f4 08 00 08 	add	r8,r10,r8
80003ad2:	2e 48       	sub	r8,-28
80003ad4:	91 09       	st.w	r8[0x0],r9

  return value;
80003ad6:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
80003ada:	10 9c       	mov	r12,r8
80003adc:	2f dd       	sub	sp,-12
80003ade:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ae2 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003ae2:	eb cd 40 80 	pushm	r7,lr
80003ae6:	1a 97       	mov	r7,sp
80003ae8:	20 5d       	sub	sp,20
80003aea:	ef 4c ff f4 	st.w	r7[-12],r12
80003aee:	ef 4b ff f0 	st.w	r7[-16],r11
80003af2:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80003af6:	30 08       	mov	r8,0
80003af8:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80003afc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003b00:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003b04:	f0 09 0d 08 	divu	r8,r8,r9
80003b08:	a1 98       	lsr	r8,0x1
80003b0a:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003b0e:	c0 b8       	rjmp	80003b24 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80003b10:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b14:	2f f8       	sub	r8,-1
80003b16:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80003b1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b1e:	a1 98       	lsr	r8,0x1
80003b20:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003b24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b28:	e0 48 00 ff 	cp.w	r8,255
80003b2c:	e0 88 00 09 	brls	80003b3e <twim_set_speed+0x5c>
80003b30:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b34:	30 78       	mov	r8,7
80003b36:	f0 09 18 00 	cp.b	r9,r8
80003b3a:	fe 98 ff eb 	brls	80003b10 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80003b3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b42:	30 78       	mov	r8,7
80003b44:	f0 09 18 00 	cp.b	r9,r8
80003b48:	e0 88 00 04 	brls	80003b50 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80003b4c:	3f 88       	mov	r8,-8
80003b4e:	c1 a8       	rjmp	80003b82 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003b50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b54:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80003b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b5c:	a1 98       	lsr	r8,0x1
80003b5e:	ee fa ff f8 	ld.w	r10,r7[-8]
80003b62:	f4 08 01 08 	sub	r8,r10,r8
80003b66:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80003b68:	10 49       	or	r9,r8
80003b6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003b6e:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80003b70:	10 49       	or	r9,r8
80003b72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b76:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80003b78:	10 49       	or	r9,r8
80003b7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b7e:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80003b80:	30 08       	mov	r8,0
}
80003b82:	10 9c       	mov	r12,r8
80003b84:	2f bd       	sub	sp,-20
80003b86:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b8a <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003b8a:	eb cd 40 80 	pushm	r7,lr
80003b8e:	1a 97       	mov	r7,sp
80003b90:	20 1d       	sub	sp,4
80003b92:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003b96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b9a:	e6 18 00 01 	andh	r8,0x1,COH
80003b9e:	5f 08       	sreq	r8
80003ba0:	5c 58       	castu.b	r8
}
80003ba2:	10 9c       	mov	r12,r8
80003ba4:	2f fd       	sub	sp,-4
80003ba6:	e3 cd 80 80 	ldm	sp++,r7,pc

80003baa <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003baa:	eb cd 40 80 	pushm	r7,lr
80003bae:	1a 97       	mov	r7,sp
80003bb0:	20 7d       	sub	sp,28
80003bb2:	ef 4c ff ec 	st.w	r7[-20],r12
80003bb6:	ef 4b ff e8 	st.w	r7[-24],r11
80003bba:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003bbe:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003bc2:	f0 09 15 04 	lsl	r9,r8,0x4
80003bc6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003bca:	10 39       	cp.w	r9,r8
80003bcc:	e0 8b 00 04 	brhi	80003bd4 <usart_set_async_baudrate+0x2a>
80003bd0:	31 08       	mov	r8,16
80003bd2:	c0 28       	rjmp	80003bd6 <usart_set_async_baudrate+0x2c>
80003bd4:	30 88       	mov	r8,8
80003bd6:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003bda:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003bde:	f0 09 15 03 	lsl	r9,r8,0x3
80003be2:	ee fa ff f0 	ld.w	r10,r7[-16]
80003be6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003bea:	f4 08 02 48 	mul	r8,r10,r8
80003bee:	a1 98       	lsr	r8,0x1
80003bf0:	f2 08 00 08 	add	r8,r9,r8
80003bf4:	ee fa ff f0 	ld.w	r10,r7[-16]
80003bf8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003bfc:	f4 09 02 49 	mul	r9,r10,r9
80003c00:	f0 09 0d 08 	divu	r8,r8,r9
80003c04:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003c08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c0c:	a3 98       	lsr	r8,0x3
80003c0e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80003c12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003c16:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003c1a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003c1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c22:	58 08       	cp.w	r8,0
80003c24:	c0 70       	breq	80003c32 <usart_set_async_baudrate+0x88>
80003c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c2a:	e0 48 ff ff 	cp.w	r8,65535
80003c2e:	e0 88 00 04 	brls	80003c36 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80003c32:	30 18       	mov	r8,1
80003c34:	c2 08       	rjmp	80003c74 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003c36:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003c3a:	70 18       	ld.w	r8,r8[0x4]
80003c3c:	10 99       	mov	r9,r8
80003c3e:	e4 19 ff f7 	andh	r9,0xfff7
80003c42:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003c46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c4a:	59 08       	cp.w	r8,16
80003c4c:	c0 40       	breq	80003c54 <usart_set_async_baudrate+0xaa>
80003c4e:	e8 68 00 00 	mov	r8,524288
80003c52:	c0 28       	rjmp	80003c56 <usart_set_async_baudrate+0xac>
80003c54:	30 08       	mov	r8,0
80003c56:	10 49       	or	r9,r8
80003c58:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003c5c:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80003c5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c62:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003c66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c6a:	10 49       	or	r9,r8
80003c6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003c70:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80003c72:	30 08       	mov	r8,0
}
80003c74:	10 9c       	mov	r12,r8
80003c76:	2f 9d       	sub	sp,-28
80003c78:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c7c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80003c7c:	eb cd 40 80 	pushm	r7,lr
80003c80:	1a 97       	mov	r7,sp
80003c82:	20 2d       	sub	sp,8
80003c84:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003c88:	e1 b8 00 00 	mfsr	r8,0x0
80003c8c:	10 9c       	mov	r12,r8
80003c8e:	f0 1f 00 18 	mcall	80003cec <usart_reset+0x70>
80003c92:	18 98       	mov	r8,r12
80003c94:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003c98:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003c9c:	30 08       	mov	r8,0
80003c9e:	f0 09 18 00 	cp.b	r9,r8
80003ca2:	c0 20       	breq	80003ca6 <usart_reset+0x2a>
80003ca4:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003ca6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003caa:	3f f9       	mov	r9,-1
80003cac:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80003cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003cb2:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003cb4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003cb8:	30 08       	mov	r8,0
80003cba:	f0 09 18 00 	cp.b	r9,r8
80003cbe:	c0 20       	breq	80003cc2 <usart_reset+0x46>
80003cc0:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003cc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003cc6:	30 09       	mov	r9,0
80003cc8:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80003cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003cce:	30 09       	mov	r9,0
80003cd0:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80003cd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003cd6:	30 09       	mov	r9,0
80003cd8:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003cda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003cde:	e8 69 61 0c 	mov	r9,549132
80003ce2:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003ce4:	2f ed       	sub	sp,-8
80003ce6:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cea:	00 00       	add	r0,r0
80003cec:	80 00       	ld.sh	r0,r0[0x0]
80003cee:	3b 8a       	mov	r10,-72

80003cf0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003cf0:	eb cd 40 80 	pushm	r7,lr
80003cf4:	1a 97       	mov	r7,sp
80003cf6:	20 3d       	sub	sp,12
80003cf8:	ef 4c ff fc 	st.w	r7[-4],r12
80003cfc:	ef 4b ff f8 	st.w	r7[-8],r11
80003d00:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003d04:	ee fc ff fc 	ld.w	r12,r7[-4]
80003d08:	f0 1f 00 54 	mcall	80003e58 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80003d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d10:	58 08       	cp.w	r8,0
80003d12:	c3 90       	breq	80003d84 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80003d14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d18:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003d1a:	30 48       	mov	r8,4
80003d1c:	f0 09 18 00 	cp.b	r9,r8
80003d20:	e0 88 00 32 	brls	80003d84 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80003d24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d28:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003d2a:	30 98       	mov	r8,9
80003d2c:	f0 09 18 00 	cp.b	r9,r8
80003d30:	e0 8b 00 2a 	brhi	80003d84 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d38:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003d3a:	30 78       	mov	r8,7
80003d3c:	f0 09 18 00 	cp.b	r9,r8
80003d40:	e0 8b 00 22 	brhi	80003d84 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80003d44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d48:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003d4a:	e0 68 01 01 	mov	r8,257
80003d4e:	f0 09 19 00 	cp.h	r9,r8
80003d52:	e0 8b 00 19 	brhi	80003d84 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80003d56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d5a:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003d5e:	30 38       	mov	r8,3
80003d60:	f0 09 18 00 	cp.b	r9,r8
80003d64:	e0 8b 00 10 	brhi	80003d84 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003d68:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d70:	70 08       	ld.w	r8,r8[0x0]
80003d72:	12 9a       	mov	r10,r9
80003d74:	10 9b       	mov	r11,r8
80003d76:	ee fc ff fc 	ld.w	r12,r7[-4]
80003d7a:	f0 1f 00 39 	mcall	80003e5c <usart_init_rs232+0x16c>
80003d7e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003d80:	58 18       	cp.w	r8,1
80003d82:	c0 31       	brne	80003d88 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80003d84:	30 18       	mov	r8,1
80003d86:	c6 48       	rjmp	80003e4e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80003d88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d8c:	11 c9       	ld.ub	r9,r8[0x4]
80003d8e:	30 98       	mov	r8,9
80003d90:	f0 09 18 00 	cp.b	r9,r8
80003d94:	c0 a1       	brne	80003da8 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003d96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d9a:	70 18       	ld.w	r8,r8[0x4]
80003d9c:	10 99       	mov	r9,r8
80003d9e:	b1 b9       	sbr	r9,0x11
80003da0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003da4:	91 19       	st.w	r8[0x4],r9
80003da6:	c0 d8       	rjmp	80003dc0 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003da8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dac:	70 19       	ld.w	r9,r8[0x4]
80003dae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003db2:	11 c8       	ld.ub	r8,r8[0x4]
80003db4:	20 58       	sub	r8,5
80003db6:	a7 68       	lsl	r8,0x6
80003db8:	10 49       	or	r9,r8
80003dba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dbe:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dc4:	70 19       	ld.w	r9,r8[0x4]
80003dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dca:	11 d8       	ld.ub	r8,r8[0x5]
80003dcc:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80003dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dd4:	f1 38 00 08 	ld.ub	r8,r8[8]
80003dd8:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003dda:	f5 e8 10 08 	or	r8,r10,r8
80003dde:	10 49       	or	r9,r8
80003de0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003de4:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dea:	90 39       	ld.sh	r9,r8[0x6]
80003dec:	30 28       	mov	r8,2
80003dee:	f0 09 19 00 	cp.h	r9,r8
80003df2:	e0 88 00 14 	brls	80003e1a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003df6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dfa:	70 18       	ld.w	r8,r8[0x4]
80003dfc:	10 99       	mov	r9,r8
80003dfe:	ad b9       	sbr	r9,0xd
80003e00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e04:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003e06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e0a:	90 38       	ld.sh	r8,r8[0x6]
80003e0c:	5c 78       	castu.h	r8
80003e0e:	20 28       	sub	r8,2
80003e10:	10 99       	mov	r9,r8
80003e12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e16:	91 a9       	st.w	r8[0x28],r9
80003e18:	c0 d8       	rjmp	80003e32 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003e1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e1e:	70 19       	ld.w	r9,r8[0x4]
80003e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e24:	90 38       	ld.sh	r8,r8[0x6]
80003e26:	5c 78       	castu.h	r8
80003e28:	ad 68       	lsl	r8,0xc
80003e2a:	10 49       	or	r9,r8
80003e2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e30:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003e32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e36:	70 18       	ld.w	r8,r8[0x4]
80003e38:	10 99       	mov	r9,r8
80003e3a:	e0 19 ff f0 	andl	r9,0xfff0
80003e3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e42:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e48:	35 09       	mov	r9,80
80003e4a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003e4c:	30 08       	mov	r8,0
}
80003e4e:	10 9c       	mov	r12,r8
80003e50:	2f dd       	sub	sp,-12
80003e52:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e56:	00 00       	add	r0,r0
80003e58:	80 00       	ld.sh	r0,r0[0x0]
80003e5a:	3c 7c       	mov	r12,-57
80003e5c:	80 00       	ld.sh	r0,r0[0x0]
80003e5e:	3b aa       	mov	r10,-70

80003e60 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003e60:	48 dd       	lddpc	sp,80003e94 <udata_clear_loop_end+0x6>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
80003e62:	48 e0       	lddpc	r0,80003e98 <udata_clear_loop_end+0xa>
  mtsr    AVR32_EVBA, r0
80003e64:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003e68:	d5 53       	csrf	0x15

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80003e6a:	48 d0       	lddpc	r0,80003e9c <udata_clear_loop_end+0xe>
  lda.w   r1, _edata
80003e6c:	48 d1       	lddpc	r1,80003ea0 <udata_clear_loop_end+0x12>
  cp      r0, r1
80003e6e:	02 30       	cp.w	r0,r1
  brhs    idata_load_loop_end
80003e70:	c0 62       	brcc	80003e7c <idata_load_loop_end>
  lda.w   r2, _data_lma
80003e72:	48 d2       	lddpc	r2,80003ea4 <udata_clear_loop_end+0x16>

80003e74 <idata_load_loop>:
idata_load_loop:
  ld.d    r4, r2++
80003e74:	a5 05       	ld.d	r4,r2++
  st.d    r0++, r4
80003e76:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003e78:	02 30       	cp.w	r0,r1
  brlo    idata_load_loop
80003e7a:	cf d3       	brcs	80003e74 <idata_load_loop>

80003e7c <idata_load_loop_end>:
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003e7c:	48 b0       	lddpc	r0,80003ea8 <udata_clear_loop_end+0x1a>
  lda.w   r1, _end
80003e7e:	48 c1       	lddpc	r1,80003eac <udata_clear_loop_end+0x1e>
  cp      r0, r1
80003e80:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003e82:	c0 62       	brcc	80003e8e <udata_clear_loop_end>
  mov     r2, 0
80003e84:	30 02       	mov	r2,0
  mov     r3, 0
80003e86:	30 03       	mov	r3,0

80003e88 <udata_clear_loop>:
udata_clear_loop:
  st.d    r0++, r2
80003e88:	a1 22       	st.d	r0++,r2
  cp      r0, r1
80003e8a:	02 30       	cp.w	r0,r1
  brlo    udata_clear_loop
80003e8c:	cf e3       	brcs	80003e88 <udata_clear_loop>

80003e8e <udata_clear_loop_end>:
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003e8e:	fe cf e3 1e 	sub	pc,pc,-7394
80003e92:	d7 03       	nop
80003e94:	00 00       	add	r0,r0
80003e96:	80 00       	ld.sh	r0,r0[0x0]
80003e98:	80 00       	ld.sh	r0,r0[0x0]
80003e9a:	c2 00       	breq	80003eda <cpu_irq_is_enabled_flags+0xc>
80003e9c:	00 00       	add	r0,r0
80003e9e:	00 04       	add	r4,r0
80003ea0:	00 00       	add	r0,r0
80003ea2:	05 10       	ld.sh	r0,r2++
80003ea4:	80 00       	ld.sh	r0,r0[0x0]
80003ea6:	d5 70       	acall	0x57
80003ea8:	00 00       	add	r0,r0
80003eaa:	05 10       	ld.sh	r0,r2++
80003eac:	00 00       	add	r0,r0
80003eae:	09 28       	ld.uh	r8,r4++

80003eb0 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80003eb0:	eb cd 40 80 	pushm	r7,lr
80003eb4:	1a 97       	mov	r7,sp
80003eb6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003eb8:	e1 b8 00 00 	mfsr	r8,0x0
80003ebc:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80003ec0:	d3 03       	ssrf	0x10

	return flags;
80003ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80003ec6:	10 9c       	mov	r12,r8
80003ec8:	2f fd       	sub	sp,-4
80003eca:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ece <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003ece:	eb cd 40 80 	pushm	r7,lr
80003ed2:	1a 97       	mov	r7,sp
80003ed4:	20 1d       	sub	sp,4
80003ed6:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003eda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ede:	e6 18 00 01 	andh	r8,0x1,COH
80003ee2:	5f 08       	sreq	r8
80003ee4:	5c 58       	castu.b	r8
}
80003ee6:	10 9c       	mov	r12,r8
80003ee8:	2f fd       	sub	sp,-4
80003eea:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eee:	d7 03       	nop

80003ef0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80003ef0:	eb cd 40 80 	pushm	r7,lr
80003ef4:	1a 97       	mov	r7,sp
80003ef6:	20 1d       	sub	sp,4
80003ef8:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003efc:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f00:	f0 1f 00 05 	mcall	80003f14 <cpu_irq_restore+0x24>
80003f04:	18 98       	mov	r8,r12
80003f06:	58 08       	cp.w	r8,0
80003f08:	c0 20       	breq	80003f0c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80003f0a:	d5 03       	csrf	0x10
   }

	barrier();
}
80003f0c:	2f fd       	sub	sp,-4
80003f0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f12:	00 00       	add	r0,r0
80003f14:	80 00       	ld.sh	r0,r0[0x0]
80003f16:	3e ce       	mov	lr,-20

80003f18 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
80003f18:	eb cd 40 80 	pushm	r7,lr
80003f1c:	1a 97       	mov	r7,sp
80003f1e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80003f20:	f0 1f 00 0c 	mcall	80003f50 <osc_priv_enable_osc32+0x38>
80003f24:	18 98       	mov	r8,r12
80003f26:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
80003f2a:	fe 78 18 00 	mov	r8,-59392
80003f2e:	32 09       	mov	r9,32
80003f30:	ea 19 aa 00 	orh	r9,0xaa00
80003f34:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
80003f36:	fe 78 18 00 	mov	r8,-59392
80003f3a:	e0 79 00 0d 	mov	r9,65549
80003f3e:	91 89       	st.w	r8[0x20],r9
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_EN32K)
			| (1U << AVR32_SCIF_OSCCTRL32_EN1K)
			| (BOARD_OSC32_PINSEL << AVR32_SCIF_OSCCTRL32_PINSEL)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
80003f40:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f44:	f0 1f 00 04 	mcall	80003f54 <osc_priv_enable_osc32+0x3c>
}
80003f48:	2f fd       	sub	sp,-4
80003f4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f4e:	00 00       	add	r0,r0
80003f50:	80 00       	ld.sh	r0,r0[0x0]
80003f52:	3e b0       	mov	r0,-21
80003f54:	80 00       	ld.sh	r0,r0[0x0]
80003f56:	3e f0       	mov	r0,-17

80003f58 <osc_priv_enable_rc32k>:
	cpu_irq_restore(flags);
}
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc32k(void)
{
80003f58:	eb cd 40 80 	pushm	r7,lr
80003f5c:	1a 97       	mov	r7,sp
80003f5e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80003f60:	f0 1f 00 0c 	mcall	80003f90 <osc_priv_enable_rc32k+0x38>
80003f64:	18 98       	mov	r8,r12
80003f66:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC32KCR;
80003f6a:	fe 78 18 00 	mov	r8,-59392
80003f6e:	36 c9       	mov	r9,108
80003f70:	ea 19 aa 00 	orh	r9,0xaa00
80003f74:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc32kcr = 1U << AVR32_SCIF_RC32KCR_EN;
80003f76:	fe 78 18 00 	mov	r8,-59392
80003f7a:	30 19       	mov	r9,1
80003f7c:	f1 49 00 6c 	st.w	r8[108],r9
	cpu_irq_restore(flags);
80003f80:	ee fc ff fc 	ld.w	r12,r7[-4]
80003f84:	f0 1f 00 04 	mcall	80003f94 <osc_priv_enable_rc32k+0x3c>
}
80003f88:	2f fd       	sub	sp,-4
80003f8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f8e:	00 00       	add	r0,r0
80003f90:	80 00       	ld.sh	r0,r0[0x0]
80003f92:	3e b0       	mov	r0,-21
80003f94:	80 00       	ld.sh	r0,r0[0x0]
80003f96:	3e f0       	mov	r0,-17

80003f98 <osc_priv_enable_rc120m>:
	AVR32_SCIF.rc32kcr = 0;
	cpu_irq_restore(flags);
}

void osc_priv_enable_rc120m(void)
{
80003f98:	eb cd 40 80 	pushm	r7,lr
80003f9c:	1a 97       	mov	r7,sp
80003f9e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = cpu_irq_save();
80003fa0:	f0 1f 00 0c 	mcall	80003fd0 <osc_priv_enable_rc120m+0x38>
80003fa4:	18 98       	mov	r8,r12
80003fa6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
80003faa:	fe 78 18 00 	mov	r8,-59392
80003fae:	35 89       	mov	r9,88
80003fb0:	ea 19 aa 00 	orh	r9,0xaa00
80003fb4:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
80003fb6:	fe 78 18 00 	mov	r8,-59392
80003fba:	30 19       	mov	r9,1
80003fbc:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
80003fc0:	ee fc ff fc 	ld.w	r12,r7[-4]
80003fc4:	f0 1f 00 04 	mcall	80003fd4 <osc_priv_enable_rc120m+0x3c>
}
80003fc8:	2f fd       	sub	sp,-4
80003fca:	e3 cd 80 80 	ldm	sp++,r7,pc
80003fce:	00 00       	add	r0,r0
80003fd0:	80 00       	ld.sh	r0,r0[0x0]
80003fd2:	3e b0       	mov	r0,-21
80003fd4:	80 00       	ld.sh	r0,r0[0x0]
80003fd6:	3e f0       	mov	r0,-17

80003fd8 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80003fd8:	eb cd 40 80 	pushm	r7,lr
80003fdc:	1a 97       	mov	r7,sp
80003fde:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003fe0:	e1 b8 00 00 	mfsr	r8,0x0
80003fe4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80003fe8:	d3 03       	ssrf	0x10

	return flags;
80003fea:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80003fee:	10 9c       	mov	r12,r8
80003ff0:	2f fd       	sub	sp,-4
80003ff2:	e3 cd 80 80 	ldm	sp++,r7,pc

80003ff6 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003ff6:	eb cd 40 80 	pushm	r7,lr
80003ffa:	1a 97       	mov	r7,sp
80003ffc:	20 1d       	sub	sp,4
80003ffe:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004002:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004006:	e6 18 00 01 	andh	r8,0x1,COH
8000400a:	5f 08       	sreq	r8
8000400c:	5c 58       	castu.b	r8
}
8000400e:	10 9c       	mov	r12,r8
80004010:	2f fd       	sub	sp,-4
80004012:	e3 cd 80 80 	ldm	sp++,r7,pc
80004016:	d7 03       	nop

80004018 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80004018:	eb cd 40 80 	pushm	r7,lr
8000401c:	1a 97       	mov	r7,sp
8000401e:	20 1d       	sub	sp,4
80004020:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80004024:	ee fc ff fc 	ld.w	r12,r7[-4]
80004028:	f0 1f 00 05 	mcall	8000403c <cpu_irq_restore+0x24>
8000402c:	18 98       	mov	r8,r12
8000402e:	58 08       	cp.w	r8,0
80004030:	c0 20       	breq	80004034 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80004032:	d5 03       	csrf	0x10
   }

	barrier();
}
80004034:	2f fd       	sub	sp,-4
80004036:	e3 cd 80 80 	ldm	sp++,r7,pc
8000403a:	00 00       	add	r0,r0
8000403c:	80 00       	ld.sh	r0,r0[0x0]
8000403e:	3f f6       	mov	r6,-1

80004040 <pll_enable>:
	AVR32_SCIF.pll0 = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
80004040:	eb cd 40 80 	pushm	r7,lr
80004044:	1a 97       	mov	r7,sp
80004046:	20 3d       	sub	sp,12
80004048:	ef 4c ff f8 	st.w	r7[-8],r12
8000404c:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
80004050:	f0 1f 00 0f 	mcall	8000408c <pll_enable+0x4c>
80004054:	18 98       	mov	r8,r12
80004056:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock =
8000405a:	fe 78 18 00 	mov	r8,-59392
			(AVR32_SCIF_UNLOCK_KEY_VALUE<<AVR32_SCIF_UNLOCK_KEY_OFFSET) |
			(AVR32_SCIF_PLL0 + (4 * pll_id));
8000405e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004062:	2d a9       	sub	r9,-38
80004064:	a3 69       	lsl	r9,0x2

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	AVR32_SCIF.unlock =
			(AVR32_SCIF_UNLOCK_KEY_VALUE<<AVR32_SCIF_UNLOCK_KEY_OFFSET) |
80004066:	ea 19 aa 00 	orh	r9,0xaa00
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	AVR32_SCIF.unlock =
8000406a:	91 69       	st.w	r8[0x18],r9
			(AVR32_SCIF_UNLOCK_KEY_VALUE<<AVR32_SCIF_UNLOCK_KEY_OFFSET) |
			(AVR32_SCIF_PLL0 + (4 * pll_id));
	AVR32_SCIF.pll0 = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
8000406c:	fe 78 18 00 	mov	r8,-59392
80004070:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004074:	72 09       	ld.w	r9,r9[0x0]
80004076:	a1 a9       	sbr	r9,0x0
80004078:	f1 49 00 98 	st.w	r8[152],r9
	cpu_irq_restore(flags);
8000407c:	ee fc ff fc 	ld.w	r12,r7[-4]
80004080:	f0 1f 00 04 	mcall	80004090 <pll_enable+0x50>
}
80004084:	2f dd       	sub	sp,-12
80004086:	e3 cd 80 80 	ldm	sp++,r7,pc
8000408a:	00 00       	add	r0,r0
8000408c:	80 00       	ld.sh	r0,r0[0x0]
8000408e:	3f d8       	mov	r8,-3
80004090:	80 00       	ld.sh	r0,r0[0x0]
80004092:	40 18       	lddsp	r8,sp[0x4]

80004094 <str2int>:
#include <math.h>

static void find_data(const char *c, int data_i[50]);

static int str2int(char* pStr, unsigned int len)
{
80004094:	eb cd 40 80 	pushm	r7,lr
80004098:	1a 97       	mov	r7,sp
8000409a:	20 4d       	sub	sp,16
8000409c:	ef 4c ff f4 	st.w	r7[-12],r12
800040a0:	ef 4b ff f0 	st.w	r7[-16],r11
	int iRetVal = 0;
800040a4:	30 08       	mov	r8,0
800040a6:	ef 48 ff f8 	st.w	r7[-8],r8
	int cnt = 0;
800040aa:	30 08       	mov	r8,0
800040ac:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(pStr){
800040b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040b4:	58 08       	cp.w	r8,0
800040b6:	c3 10       	breq	80004118 <str2int+0x84>
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
800040b8:	c1 a8       	rjmp	800040ec <str2int+0x58>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
800040ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800040be:	12 98       	mov	r8,r9
800040c0:	a3 68       	lsl	r8,0x2
800040c2:	12 08       	add	r8,r9
800040c4:	a1 78       	lsl	r8,0x1
800040c6:	10 99       	mov	r9,r8
800040c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040cc:	11 88       	ld.ub	r8,r8[0x0]
800040ce:	23 08       	sub	r8,48
800040d0:	f2 08 00 08 	add	r8,r9,r8
800040d4:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
800040d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040dc:	2f f8       	sub	r8,-1
800040de:	ef 48 ff f4 	st.w	r7[-12],r8
			cnt++;
800040e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040e6:	2f f8       	sub	r8,-1
800040e8:	ef 48 ff fc 	st.w	r7[-4],r8
{
	int iRetVal = 0;
	int cnt = 0;
	
	if(pStr){
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
800040ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800040f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800040f4:	10 39       	cp.w	r9,r8
800040f6:	c1 12       	brcc	80004118 <str2int+0x84>
800040f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800040fc:	11 89       	ld.ub	r9,r8[0x0]
800040fe:	33 98       	mov	r8,57
80004100:	f0 09 18 00 	cp.b	r9,r8
80004104:	e0 8b 00 0a 	brhi	80004118 <str2int+0x84>
80004108:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000410c:	11 89       	ld.ub	r9,r8[0x0]
8000410e:	32 f8       	mov	r8,47
80004110:	f0 09 18 00 	cp.b	r9,r8
80004114:	fe 9b ff d3 	brhi	800040ba <str2int+0x26>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
			cnt++;
		}
	}
	return iRetVal;
80004118:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000411c:	10 9c       	mov	r12,r8
8000411e:	2f cd       	sub	sp,-16
80004120:	e3 cd 80 80 	ldm	sp++,r7,pc

80004124 <str2float>:

static float str2float(char* pStr){
80004124:	eb cd 40 c0 	pushm	r6-r7,lr
80004128:	1a 97       	mov	r7,sp
8000412a:	20 3d       	sub	sp,12
8000412c:	ef 4c ff f4 	st.w	r7[-12],r12
	float iRetVal = 0;
80004130:	30 08       	mov	r8,0
80004132:	ef 48 ff f8 	st.w	r7[-8],r8
	char *decP;
	
	if(pStr){
80004136:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000413a:	58 08       	cp.w	r8,0
8000413c:	e0 80 00 8c 	breq	80004254 <str2float+0x130>
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80004140:	c1 d8       	rjmp	8000417a <str2float+0x56>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
80004142:	fc 1b 41 20 	movh	r11,0x4120
80004146:	ee fc ff f8 	ld.w	r12,r7[-8]
8000414a:	f0 1f 00 46 	mcall	80004260 <str2float+0x13c>
8000414e:	18 98       	mov	r8,r12
80004150:	10 96       	mov	r6,r8
80004152:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004156:	11 88       	ld.ub	r8,r8[0x0]
80004158:	23 08       	sub	r8,48
8000415a:	10 9c       	mov	r12,r8
8000415c:	f0 1f 00 42 	mcall	80004264 <str2float+0x140>
80004160:	18 98       	mov	r8,r12
80004162:	10 9b       	mov	r11,r8
80004164:	0c 9c       	mov	r12,r6
80004166:	f0 1f 00 41 	mcall	80004268 <str2float+0x144>
8000416a:	18 98       	mov	r8,r12
8000416c:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
80004170:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004174:	2f f8       	sub	r8,-1
80004176:	ef 48 ff f4 	st.w	r7[-12],r8
static float str2float(char* pStr){
	float iRetVal = 0;
	char *decP;
	
	if(pStr){
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
8000417a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000417e:	11 88       	ld.ub	r8,r8[0x0]
80004180:	58 08       	cp.w	r8,0
80004182:	c1 10       	breq	800041a4 <str2float+0x80>
80004184:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004188:	11 89       	ld.ub	r9,r8[0x0]
8000418a:	33 98       	mov	r8,57
8000418c:	f0 09 18 00 	cp.b	r9,r8
80004190:	e0 8b 00 0a 	brhi	800041a4 <str2float+0x80>
80004194:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004198:	11 89       	ld.ub	r9,r8[0x0]
8000419a:	32 f8       	mov	r8,47
8000419c:	f0 09 18 00 	cp.b	r9,r8
800041a0:	fe 9b ff d1 	brhi	80004142 <str2float+0x1e>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
		}
	
		if(*pStr == '.'){
800041a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041a8:	11 89       	ld.ub	r9,r8[0x0]
800041aa:	32 e8       	mov	r8,46
800041ac:	f0 09 18 00 	cp.b	r9,r8
800041b0:	c5 21       	brne	80004254 <str2float+0x130>
			decP = pStr++;
800041b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041b6:	ef 48 ff fc 	st.w	r7[-4],r8
800041ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041be:	2f f8       	sub	r8,-1
800041c0:	ef 48 ff f4 	st.w	r7[-12],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
800041c4:	c1 d8       	rjmp	800041fe <str2float+0xda>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
800041c6:	fc 1b 41 20 	movh	r11,0x4120
800041ca:	ee fc ff f8 	ld.w	r12,r7[-8]
800041ce:	f0 1f 00 25 	mcall	80004260 <str2float+0x13c>
800041d2:	18 98       	mov	r8,r12
800041d4:	10 96       	mov	r6,r8
800041d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041da:	11 88       	ld.ub	r8,r8[0x0]
800041dc:	23 08       	sub	r8,48
800041de:	10 9c       	mov	r12,r8
800041e0:	f0 1f 00 21 	mcall	80004264 <str2float+0x140>
800041e4:	18 98       	mov	r8,r12
800041e6:	10 9b       	mov	r11,r8
800041e8:	0c 9c       	mov	r12,r6
800041ea:	f0 1f 00 20 	mcall	80004268 <str2float+0x144>
800041ee:	18 98       	mov	r8,r12
800041f0:	ef 48 ff f8 	st.w	r7[-8],r8
				pStr++;
800041f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800041f8:	2f f8       	sub	r8,-1
800041fa:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	
		if(*pStr == '.'){
			decP = pStr++;
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
800041fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004202:	11 88       	ld.ub	r8,r8[0x0]
80004204:	58 08       	cp.w	r8,0
80004206:	c1 b0       	breq	8000423c <str2float+0x118>
80004208:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000420c:	11 89       	ld.ub	r9,r8[0x0]
8000420e:	33 98       	mov	r8,57
80004210:	f0 09 18 00 	cp.b	r9,r8
80004214:	e0 8b 00 14 	brhi	8000423c <str2float+0x118>
80004218:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000421c:	11 89       	ld.ub	r9,r8[0x0]
8000421e:	32 f8       	mov	r8,47
80004220:	f0 09 18 00 	cp.b	r9,r8
80004224:	fe 9b ff d1 	brhi	800041c6 <str2float+0xa2>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
80004228:	c0 a8       	rjmp	8000423c <str2float+0x118>
				iRetVal = iRetVal/10;
8000422a:	fc 1b 41 20 	movh	r11,0x4120
8000422e:	ee fc ff f8 	ld.w	r12,r7[-8]
80004232:	f0 1f 00 0f 	mcall	8000426c <str2float+0x148>
80004236:	18 98       	mov	r8,r12
80004238:	ef 48 ff f8 	st.w	r7[-8],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
8000423c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004240:	20 18       	sub	r8,1
80004242:	ef 48 ff f4 	st.w	r7[-12],r8
80004246:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000424a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000424e:	10 39       	cp.w	r9,r8
80004250:	fe 9b ff ed 	brhi	8000422a <str2float+0x106>
				iRetVal = iRetVal/10;
			}
		}
	}
	
	return iRetVal;
80004254:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004258:	10 9c       	mov	r12,r8
8000425a:	2f dd       	sub	sp,-12
8000425c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004260:	80 00       	ld.sh	r0,r0[0x0]
80004262:	65 9c       	ld.w	r12,r2[0x64]
80004264:	80 00       	ld.sh	r0,r0[0x0]
80004266:	66 7e       	ld.w	lr,r3[0x1c]
80004268:	80 00       	ld.sh	r0,r0[0x0]
8000426a:	64 f0       	ld.w	r0,r2[0x3c]
8000426c:	80 00       	ld.sh	r0,r0[0x0]
8000426e:	62 bc       	ld.w	r12,r1[0x2c]

80004270 <uc530_parse_default>:

int uc530_parse_default(char *str, unsigned int len, uc530_data_t *gps_data){
80004270:	eb cd 40 80 	pushm	r7,lr
80004274:	1a 97       	mov	r7,sp
80004276:	fa cd 00 dc 	sub	sp,sp,220
8000427a:	ef 4c ff 2c 	st.w	r7[-212],r12
8000427e:	ef 4b ff 28 	st.w	r7[-216],r11
80004282:	ef 4a ff 24 	st.w	r7[-220],r10
	char *nmea = str;
80004286:	ee f8 ff 2c 	ld.w	r8,r7[-212]
8000428a:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
8000428e:	30 08       	mov	r8,0
80004290:	ef 48 ff fc 	st.w	r7[-4],r8
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
80004294:	e0 8f 02 36 	bral	80004700 <uc530_parse_default+0x490>
		if(found_start){
80004298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000429c:	58 08       	cp.w	r8,0
8000429e:	e0 80 02 22 	breq	800046e2 <uc530_parse_default+0x472>
			// Ignore standard 'GP'
			nmea += 2;
800042a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042a6:	2f e8       	sub	r8,-2
800042a8:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// Find Data Indices
			find_data(nmea, data_i);
800042ac:	ee c8 00 d0 	sub	r8,r7,208
800042b0:	10 9b       	mov	r11,r8
800042b2:	ee fc ff f8 	ld.w	r12,r7[-8]
800042b6:	f0 1f 01 1c 	mcall	80004724 <uc530_parse_default+0x4b4>
			gps_data->valid = 1;
800042ba:	ee f8 ff 24 	ld.w	r8,r7[-220]
800042be:	30 19       	mov	r9,1
800042c0:	f1 49 00 40 	st.w	r8[64],r9
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
800042c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042c8:	11 89       	ld.ub	r9,r8[0x0]
800042ca:	34 78       	mov	r8,71
800042cc:	f0 09 18 00 	cp.b	r9,r8
800042d0:	c5 f1       	brne	8000438e <uc530_parse_default+0x11e>
800042d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042d6:	2f f8       	sub	r8,-1
800042d8:	11 89       	ld.ub	r9,r8[0x0]
800042da:	34 78       	mov	r8,71
800042dc:	f0 09 18 00 	cp.b	r9,r8
800042e0:	c5 71       	brne	8000438e <uc530_parse_default+0x11e>
800042e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042e6:	2f e8       	sub	r8,-2
800042e8:	11 89       	ld.ub	r9,r8[0x0]
800042ea:	34 18       	mov	r8,65
800042ec:	f0 09 18 00 	cp.b	r9,r8
800042f0:	c4 f1       	brne	8000438e <uc530_parse_default+0x11e>
				// Fix Indicator
				if(data_i[5] != -1){
800042f2:	ee f8 ff 44 	ld.w	r8,r7[-188]
800042f6:	5b f8       	cp.w	r8,-1
800042f8:	c1 20       	breq	8000431c <uc530_parse_default+0xac>
					gps_data->fix_status = str2int(nmea+data_i[5],10);
800042fa:	ee f8 ff 44 	ld.w	r8,r7[-188]
800042fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004302:	f2 08 00 08 	add	r8,r9,r8
80004306:	30 ab       	mov	r11,10
80004308:	10 9c       	mov	r12,r8
8000430a:	f0 1f 01 08 	mcall	80004728 <uc530_parse_default+0x4b8>
8000430e:	18 98       	mov	r8,r12
80004310:	5c 58       	castu.b	r8
80004312:	ee f9 ff 24 	ld.w	r9,r7[-220]
80004316:	f3 68 00 30 	st.b	r9[48],r8
8000431a:	c0 68       	rjmp	80004326 <uc530_parse_default+0xb6>
				}
				else
					gps_data->valid = 0;
8000431c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004320:	30 09       	mov	r9,0
80004322:	f1 49 00 40 	st.w	r8[64],r9
				
				// Number of Satellites
				if(data_i[6] != -1){
80004326:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000432a:	5b f8       	cp.w	r8,-1
8000432c:	c1 20       	breq	80004350 <uc530_parse_default+0xe0>
					gps_data->num_sats = str2int(nmea+data_i[6],10);
8000432e:	ee f8 ff 48 	ld.w	r8,r7[-184]
80004332:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004336:	f2 08 00 08 	add	r8,r9,r8
8000433a:	30 ab       	mov	r11,10
8000433c:	10 9c       	mov	r12,r8
8000433e:	f0 1f 00 fb 	mcall	80004728 <uc530_parse_default+0x4b8>
80004342:	18 98       	mov	r8,r12
80004344:	5c 58       	castu.b	r8
80004346:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000434a:	f3 68 00 31 	st.b	r9[49],r8
8000434e:	c0 68       	rjmp	8000435a <uc530_parse_default+0xea>
				}
				else
					gps_data->valid = 0;
80004350:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004354:	30 09       	mov	r9,0
80004356:	f1 49 00 40 	st.w	r8[64],r9
					
				// Altitude
				if(data_i[8] != -1){
8000435a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000435e:	5b f8       	cp.w	r8,-1
80004360:	c1 00       	breq	80004380 <uc530_parse_default+0x110>
					gps_data->alt = str2float(nmea+data_i[8]);
80004362:	ee f8 ff 50 	ld.w	r8,r7[-176]
80004366:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000436a:	f2 08 00 08 	add	r8,r9,r8
8000436e:	10 9c       	mov	r12,r8
80004370:	f0 1f 00 ef 	mcall	8000472c <uc530_parse_default+0x4bc>
80004374:	18 99       	mov	r9,r12
80004376:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000437a:	91 99       	st.w	r8[0x24],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
8000437c:	e0 8f 01 af 	bral	800046da <uc530_parse_default+0x46a>
				// Altitude
				if(data_i[8] != -1){
					gps_data->alt = str2float(nmea+data_i[8]);
				}
				else
					gps_data->valid = 0;
80004380:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004384:	30 09       	mov	r9,0
80004386:	f1 49 00 40 	st.w	r8[64],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
8000438a:	e0 8f 01 a8 	bral	800046da <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
8000438e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004392:	11 89       	ld.ub	r9,r8[0x0]
80004394:	35 28       	mov	r8,82
80004396:	f0 09 18 00 	cp.b	r9,r8
8000439a:	e0 81 01 2d 	brne	800045f4 <uc530_parse_default+0x384>
8000439e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043a2:	2f f8       	sub	r8,-1
800043a4:	11 89       	ld.ub	r9,r8[0x0]
800043a6:	34 d8       	mov	r8,77
800043a8:	f0 09 18 00 	cp.b	r9,r8
800043ac:	e0 81 01 24 	brne	800045f4 <uc530_parse_default+0x384>
800043b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043b4:	2f e8       	sub	r8,-2
800043b6:	11 89       	ld.ub	r9,r8[0x0]
800043b8:	34 38       	mov	r8,67
800043ba:	f0 09 18 00 	cp.b	r9,r8
800043be:	e0 81 01 1b 	brne	800045f4 <uc530_parse_default+0x384>
				// Time
				if(data_i[0] != -1){
800043c2:	ee f8 ff 30 	ld.w	r8,r7[-208]
800043c6:	5b f8       	cp.w	r8,-1
800043c8:	c2 f0       	breq	80004426 <uc530_parse_default+0x1b6>
					// Hours
					gps_data->hour = str2int(nmea+data_i[0], 2);
800043ca:	ee f8 ff 30 	ld.w	r8,r7[-208]
800043ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043d2:	f2 08 00 08 	add	r8,r9,r8
800043d6:	30 2b       	mov	r11,2
800043d8:	10 9c       	mov	r12,r8
800043da:	f0 1f 00 d4 	mcall	80004728 <uc530_parse_default+0x4b8>
800043de:	18 98       	mov	r8,r12
800043e0:	5c 58       	castu.b	r8
800043e2:	ee f9 ff 24 	ld.w	r9,r7[-220]
800043e6:	b2 b8       	st.b	r9[0x3],r8
					
					// Minutes
					gps_data->minute = str2int(nmea+data_i[0]+2, 2);
800043e8:	ee f8 ff 30 	ld.w	r8,r7[-208]
800043ec:	2f e8       	sub	r8,-2
800043ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043f2:	f2 08 00 08 	add	r8,r9,r8
800043f6:	30 2b       	mov	r11,2
800043f8:	10 9c       	mov	r12,r8
800043fa:	f0 1f 00 cc 	mcall	80004728 <uc530_parse_default+0x4b8>
800043fe:	18 98       	mov	r8,r12
80004400:	5c 58       	castu.b	r8
80004402:	ee f9 ff 24 	ld.w	r9,r7[-220]
80004406:	b2 c8       	st.b	r9[0x4],r8
					
					// Seconds
					gps_data->second = str2float(nmea+data_i[0]+4);
80004408:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000440c:	2f c8       	sub	r8,-4
8000440e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004412:	f2 08 00 08 	add	r8,r9,r8
80004416:	10 9c       	mov	r12,r8
80004418:	f0 1f 00 c5 	mcall	8000472c <uc530_parse_default+0x4bc>
8000441c:	18 99       	mov	r9,r12
8000441e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004422:	91 29       	st.w	r8[0x8],r9
80004424:	c0 68       	rjmp	80004430 <uc530_parse_default+0x1c0>
				}
				else
					gps_data->valid = 0;
80004426:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000442a:	30 09       	mov	r9,0
8000442c:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude
				if(data_i[2] != -1){
80004430:	ee f8 ff 38 	ld.w	r8,r7[-200]
80004434:	5b f8       	cp.w	r8,-1
80004436:	c2 00       	breq	80004476 <uc530_parse_default+0x206>
					// Degrees
					gps_data->lat.deg = str2int(nmea+data_i[2], 2);
80004438:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000443c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004440:	f2 08 00 08 	add	r8,r9,r8
80004444:	30 2b       	mov	r11,2
80004446:	10 9c       	mov	r12,r8
80004448:	f0 1f 00 b8 	mcall	80004728 <uc530_parse_default+0x4b8>
8000444c:	18 98       	mov	r8,r12
8000444e:	5c 58       	castu.b	r8
80004450:	ee f9 ff 24 	ld.w	r9,r7[-220]
80004454:	f3 68 00 0c 	st.b	r9[12],r8
					
					// Minutes
					gps_data->lat.min = str2float(nmea+data_i[2]+2);
80004458:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000445c:	2f e8       	sub	r8,-2
8000445e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004462:	f2 08 00 08 	add	r8,r9,r8
80004466:	10 9c       	mov	r12,r8
80004468:	f0 1f 00 b1 	mcall	8000472c <uc530_parse_default+0x4bc>
8000446c:	18 99       	mov	r9,r12
8000446e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004472:	91 49       	st.w	r8[0x10],r9
80004474:	c0 68       	rjmp	80004480 <uc530_parse_default+0x210>
				}
				else
					gps_data->valid = 0;
80004476:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000447a:	30 09       	mov	r9,0
8000447c:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude Hemi
				if(data_i[3] != -1){
80004480:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80004484:	5b f8       	cp.w	r8,-1
80004486:	c0 d0       	breq	800044a0 <uc530_parse_default+0x230>
					gps_data->lat.hemi = *(nmea+data_i[3]);
80004488:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000448c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004490:	f2 08 00 08 	add	r8,r9,r8
80004494:	11 88       	ld.ub	r8,r8[0x0]
80004496:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000449a:	f3 68 00 14 	st.b	r9[20],r8
8000449e:	c0 68       	rjmp	800044aa <uc530_parse_default+0x23a>
				}
				else
					gps_data->valid = 0;
800044a0:	ee f8 ff 24 	ld.w	r8,r7[-220]
800044a4:	30 09       	mov	r9,0
800044a6:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude
				if(data_i[4] != -1){
800044aa:	ee f8 ff 40 	ld.w	r8,r7[-192]
800044ae:	5b f8       	cp.w	r8,-1
800044b0:	c2 00       	breq	800044f0 <uc530_parse_default+0x280>
					// Degrees
					gps_data->longi.deg = str2int(nmea+data_i[4], 3);
800044b2:	ee f8 ff 40 	ld.w	r8,r7[-192]
800044b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044ba:	f2 08 00 08 	add	r8,r9,r8
800044be:	30 3b       	mov	r11,3
800044c0:	10 9c       	mov	r12,r8
800044c2:	f0 1f 00 9a 	mcall	80004728 <uc530_parse_default+0x4b8>
800044c6:	18 98       	mov	r8,r12
800044c8:	5c 58       	castu.b	r8
800044ca:	ee f9 ff 24 	ld.w	r9,r7[-220]
800044ce:	f3 68 00 18 	st.b	r9[24],r8
					
					// Minutes
					gps_data->longi.min = str2float(nmea+data_i[4]+3);
800044d2:	ee f8 ff 40 	ld.w	r8,r7[-192]
800044d6:	2f d8       	sub	r8,-3
800044d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044dc:	f2 08 00 08 	add	r8,r9,r8
800044e0:	10 9c       	mov	r12,r8
800044e2:	f0 1f 00 93 	mcall	8000472c <uc530_parse_default+0x4bc>
800044e6:	18 99       	mov	r9,r12
800044e8:	ee f8 ff 24 	ld.w	r8,r7[-220]
800044ec:	91 79       	st.w	r8[0x1c],r9
800044ee:	c0 68       	rjmp	800044fa <uc530_parse_default+0x28a>
				}
				else
					gps_data->valid = 0;
800044f0:	ee f8 ff 24 	ld.w	r8,r7[-220]
800044f4:	30 09       	mov	r9,0
800044f6:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude Hemi
				if(data_i[5] != -1){
800044fa:	ee f8 ff 44 	ld.w	r8,r7[-188]
800044fe:	5b f8       	cp.w	r8,-1
80004500:	c0 d0       	breq	8000451a <uc530_parse_default+0x2aa>
					gps_data->longi.hemi = *(nmea+data_i[5]);
80004502:	ee f8 ff 44 	ld.w	r8,r7[-188]
80004506:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000450a:	f2 08 00 08 	add	r8,r9,r8
8000450e:	11 88       	ld.ub	r8,r8[0x0]
80004510:	ee f9 ff 24 	ld.w	r9,r7[-220]
80004514:	f3 68 00 20 	st.b	r9[32],r8
80004518:	c0 68       	rjmp	80004524 <uc530_parse_default+0x2b4>
				}
				else
					gps_data->valid = 0;
8000451a:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000451e:	30 09       	mov	r9,0
80004520:	f1 49 00 40 	st.w	r8[64],r9
					
				// Speed
				if(data_i[6] != -1){
80004524:	ee f8 ff 48 	ld.w	r8,r7[-184]
80004528:	5b f8       	cp.w	r8,-1
8000452a:	c0 f0       	breq	80004548 <uc530_parse_default+0x2d8>
					gps_data->spd = str2float(nmea+data_i[6]);
8000452c:	ee f8 ff 48 	ld.w	r8,r7[-184]
80004530:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004534:	f2 08 00 08 	add	r8,r9,r8
80004538:	10 9c       	mov	r12,r8
8000453a:	f0 1f 00 7d 	mcall	8000472c <uc530_parse_default+0x4bc>
8000453e:	18 99       	mov	r9,r12
80004540:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004544:	91 a9       	st.w	r8[0x28],r9
80004546:	c0 68       	rjmp	80004552 <uc530_parse_default+0x2e2>
				}
				else
					gps_data->valid = 0;
80004548:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000454c:	30 09       	mov	r9,0
8000454e:	f1 49 00 40 	st.w	r8[64],r9
					
				// Heading
				if(data_i[7] != -1){
80004552:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80004556:	5b f8       	cp.w	r8,-1
80004558:	c0 f0       	breq	80004576 <uc530_parse_default+0x306>
					gps_data->hdg = str2float(nmea+data_i[7]);
8000455a:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000455e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004562:	f2 08 00 08 	add	r8,r9,r8
80004566:	10 9c       	mov	r12,r8
80004568:	f0 1f 00 71 	mcall	8000472c <uc530_parse_default+0x4bc>
8000456c:	18 99       	mov	r9,r12
8000456e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004572:	91 b9       	st.w	r8[0x2c],r9
80004574:	c0 68       	rjmp	80004580 <uc530_parse_default+0x310>
				}
				else
					gps_data->valid = 0;
80004576:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000457a:	30 09       	mov	r9,0
8000457c:	f1 49 00 40 	st.w	r8[64],r9
					
				// Date
				if(data_i[8] != -1){
80004580:	ee f8 ff 50 	ld.w	r8,r7[-176]
80004584:	5b f8       	cp.w	r8,-1
80004586:	c3 10       	breq	800045e8 <uc530_parse_default+0x378>
					// Day
					gps_data->day = str2int(nmea+data_i[8], 2);
80004588:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000458c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004590:	f2 08 00 08 	add	r8,r9,r8
80004594:	30 2b       	mov	r11,2
80004596:	10 9c       	mov	r12,r8
80004598:	f0 1f 00 64 	mcall	80004728 <uc530_parse_default+0x4b8>
8000459c:	18 98       	mov	r8,r12
8000459e:	5c 58       	castu.b	r8
800045a0:	ee f9 ff 24 	ld.w	r9,r7[-220]
800045a4:	b2 a8       	st.b	r9[0x2],r8
					
					// Month
					gps_data->month = str2int(nmea+data_i[8]+2, 2);
800045a6:	ee f8 ff 50 	ld.w	r8,r7[-176]
800045aa:	2f e8       	sub	r8,-2
800045ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045b0:	f2 08 00 08 	add	r8,r9,r8
800045b4:	30 2b       	mov	r11,2
800045b6:	10 9c       	mov	r12,r8
800045b8:	f0 1f 00 5c 	mcall	80004728 <uc530_parse_default+0x4b8>
800045bc:	18 98       	mov	r8,r12
800045be:	5c 58       	castu.b	r8
800045c0:	ee f9 ff 24 	ld.w	r9,r7[-220]
800045c4:	b2 98       	st.b	r9[0x1],r8
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
800045c6:	ee f8 ff 50 	ld.w	r8,r7[-176]
800045ca:	2f c8       	sub	r8,-4
800045cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045d0:	f2 08 00 08 	add	r8,r9,r8
800045d4:	30 ab       	mov	r11,10
800045d6:	10 9c       	mov	r12,r8
800045d8:	f0 1f 00 54 	mcall	80004728 <uc530_parse_default+0x4b8>
800045dc:	18 98       	mov	r8,r12
800045de:	5c 58       	castu.b	r8
800045e0:	ee f9 ff 24 	ld.w	r9,r7[-220]
800045e4:	b2 88       	st.b	r9[0x0],r8
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
800045e6:	c7 a8       	rjmp	800046da <uc530_parse_default+0x46a>
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
				}
				else
					gps_data->valid = 0;
800045e8:	ee f8 ff 24 	ld.w	r8,r7[-220]
800045ec:	30 09       	mov	r9,0
800045ee:	f1 49 00 40 	st.w	r8[64],r9
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
800045f2:	c7 48       	rjmp	800046da <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//GSV
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='V')){
800045f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f8:	11 89       	ld.ub	r9,r8[0x0]
800045fa:	34 78       	mov	r8,71
800045fc:	f0 09 18 00 	cp.b	r9,r8
80004600:	c1 11       	brne	80004622 <uc530_parse_default+0x3b2>
80004602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004606:	2f f8       	sub	r8,-1
80004608:	11 89       	ld.ub	r9,r8[0x0]
8000460a:	35 38       	mov	r8,83
8000460c:	f0 09 18 00 	cp.b	r9,r8
80004610:	c0 91       	brne	80004622 <uc530_parse_default+0x3b2>
80004612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004616:	2f e8       	sub	r8,-2
80004618:	11 89       	ld.ub	r9,r8[0x0]
8000461a:	35 68       	mov	r8,86
8000461c:	f0 09 18 00 	cp.b	r9,r8
80004620:	c5 d0       	breq	800046da <uc530_parse_default+0x46a>
				
			}
			//GSA
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='A')){
80004622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004626:	11 89       	ld.ub	r9,r8[0x0]
80004628:	34 78       	mov	r8,71
8000462a:	f0 09 18 00 	cp.b	r9,r8
8000462e:	c5 61       	brne	800046da <uc530_parse_default+0x46a>
80004630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004634:	2f f8       	sub	r8,-1
80004636:	11 89       	ld.ub	r9,r8[0x0]
80004638:	35 38       	mov	r8,83
8000463a:	f0 09 18 00 	cp.b	r9,r8
8000463e:	c4 e1       	brne	800046da <uc530_parse_default+0x46a>
80004640:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004644:	2f e8       	sub	r8,-2
80004646:	11 89       	ld.ub	r9,r8[0x0]
80004648:	34 18       	mov	r8,65
8000464a:	f0 09 18 00 	cp.b	r9,r8
8000464e:	c4 61       	brne	800046da <uc530_parse_default+0x46a>
				// PDOP
				if(data_i[14] != -1){
80004650:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004654:	5b f8       	cp.w	r8,-1
80004656:	c0 f0       	breq	80004674 <uc530_parse_default+0x404>
					gps_data->pdop = str2float(nmea+data_i[14]);
80004658:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000465c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004660:	f2 08 00 08 	add	r8,r9,r8
80004664:	10 9c       	mov	r12,r8
80004666:	f0 1f 00 32 	mcall	8000472c <uc530_parse_default+0x4bc>
8000466a:	18 99       	mov	r9,r12
8000466c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004670:	91 d9       	st.w	r8[0x34],r9
80004672:	c0 68       	rjmp	8000467e <uc530_parse_default+0x40e>
				}
				else
					gps_data->valid = 0;
80004674:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004678:	30 09       	mov	r9,0
8000467a:	f1 49 00 40 	st.w	r8[64],r9
					
				// HDOP
				if(data_i[15] != -1){
8000467e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80004682:	5b f8       	cp.w	r8,-1
80004684:	c0 f0       	breq	800046a2 <uc530_parse_default+0x432>
					gps_data->hdop = str2float(nmea+data_i[15]);
80004686:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000468a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000468e:	f2 08 00 08 	add	r8,r9,r8
80004692:	10 9c       	mov	r12,r8
80004694:	f0 1f 00 26 	mcall	8000472c <uc530_parse_default+0x4bc>
80004698:	18 99       	mov	r9,r12
8000469a:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000469e:	91 e9       	st.w	r8[0x38],r9
800046a0:	c0 68       	rjmp	800046ac <uc530_parse_default+0x43c>
				}
				else
					gps_data->valid = 0;
800046a2:	ee f8 ff 24 	ld.w	r8,r7[-220]
800046a6:	30 09       	mov	r9,0
800046a8:	f1 49 00 40 	st.w	r8[64],r9
					
				// VDOP
				if(data_i[16] != -1){
800046ac:	ee f8 ff 70 	ld.w	r8,r7[-144]
800046b0:	5b f8       	cp.w	r8,-1
800046b2:	c0 f0       	breq	800046d0 <uc530_parse_default+0x460>
					gps_data->vdop = str2float(nmea+data_i[16]);
800046b4:	ee f8 ff 70 	ld.w	r8,r7[-144]
800046b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800046bc:	f2 08 00 08 	add	r8,r9,r8
800046c0:	10 9c       	mov	r12,r8
800046c2:	f0 1f 00 1b 	mcall	8000472c <uc530_parse_default+0x4bc>
800046c6:	18 99       	mov	r9,r12
800046c8:	ee f8 ff 24 	ld.w	r8,r7[-220]
800046cc:	91 f9       	st.w	r8[0x3c],r9
800046ce:	c0 68       	rjmp	800046da <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
800046d0:	ee f8 ff 24 	ld.w	r8,r7[-220]
800046d4:	30 09       	mov	r9,0
800046d6:	f1 49 00 40 	st.w	r8[64],r9
			}
			
			found_start = 0;
800046da:	30 08       	mov	r8,0
800046dc:	ef 48 ff fc 	st.w	r7[-4],r8
800046e0:	c0 b8       	rjmp	800046f6 <uc530_parse_default+0x486>
		}
		else if(*nmea == '$')
800046e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046e6:	11 89       	ld.ub	r9,r8[0x0]
800046e8:	32 48       	mov	r8,36
800046ea:	f0 09 18 00 	cp.b	r9,r8
800046ee:	c0 41       	brne	800046f6 <uc530_parse_default+0x486>
			found_start = 1;
800046f0:	30 18       	mov	r8,1
800046f2:	ef 48 ff fc 	st.w	r7[-4],r8
		
		// Increment to next character
		nmea++;
800046f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046fa:	2f f8       	sub	r8,-1
800046fc:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
80004700:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004704:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80004708:	f2 08 01 08 	sub	r8,r9,r8
8000470c:	10 99       	mov	r9,r8
8000470e:	ee f8 ff 28 	ld.w	r8,r7[-216]
80004712:	10 39       	cp.w	r9,r8
80004714:	fe 93 fd c2 	brlo	80004298 <uc530_parse_default+0x28>
		
		// Increment to next character
		nmea++;
	}
	
	return UC530_SUCCESS;
80004718:	30 18       	mov	r8,1
}
8000471a:	10 9c       	mov	r12,r8
8000471c:	2c 9d       	sub	sp,-220
8000471e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004722:	00 00       	add	r0,r0
80004724:	80 00       	ld.sh	r0,r0[0x0]
80004726:	47 30       	lddsp	r0,sp[0x1cc]
80004728:	80 00       	ld.sh	r0,r0[0x0]
8000472a:	40 94       	lddsp	r4,sp[0x24]
8000472c:	80 00       	ld.sh	r0,r0[0x0]
8000472e:	41 24       	lddsp	r4,sp[0x48]

80004730 <find_data>:

// Finds indices of data fields between commas
// will list up to 50 indices or scan 200 characters
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
80004730:	eb cd 40 80 	pushm	r7,lr
80004734:	1a 97       	mov	r7,sp
80004736:	20 4d       	sub	sp,16
80004738:	ef 4c ff f4 	st.w	r7[-12],r12
8000473c:	ef 4b ff f0 	st.w	r7[-16],r11
	unsigned int str_cnt = 0;
80004740:	30 08       	mov	r8,0
80004742:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int data_cnt = 0;
80004746:	30 08       	mov	r8,0
80004748:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while((str_cnt < 200) && (data_cnt < 50)){
8000474c:	c4 68       	rjmp	800047d8 <find_data+0xa8>
		if(str[str_cnt] == ','){
8000474e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004752:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004756:	f2 08 00 08 	add	r8,r9,r8
8000475a:	11 89       	ld.ub	r9,r8[0x0]
8000475c:	32 c8       	mov	r8,44
8000475e:	f0 09 18 00 	cp.b	r9,r8
80004762:	c2 b1       	brne	800047b8 <find_data+0x88>
			str_cnt++;
80004764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004768:	2f f8       	sub	r8,-1
8000476a:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// No Data
			if(str[str_cnt] == ',')
8000476e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004776:	f2 08 00 08 	add	r8,r9,r8
8000477a:	11 89       	ld.ub	r9,r8[0x0]
8000477c:	32 c8       	mov	r8,44
8000477e:	f0 09 18 00 	cp.b	r9,r8
80004782:	c0 b1       	brne	80004798 <find_data+0x68>
				data_i[data_cnt] = -1;
80004784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004788:	a3 68       	lsl	r8,0x2
8000478a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000478e:	f2 08 00 08 	add	r8,r9,r8
80004792:	3f f9       	mov	r9,-1
80004794:	91 09       	st.w	r8[0x0],r9
80004796:	c0 b8       	rjmp	800047ac <find_data+0x7c>
			// Mark index
			else
				data_i[data_cnt] = str_cnt;
80004798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000479c:	a3 68       	lsl	r8,0x2
8000479e:	ee f9 ff f0 	ld.w	r9,r7[-16]
800047a2:	f2 08 00 08 	add	r8,r9,r8
800047a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800047aa:	91 09       	st.w	r8[0x0],r9
				
			data_cnt++;
800047ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047b0:	2f f8       	sub	r8,-1
800047b2:	ef 48 ff fc 	st.w	r7[-4],r8
800047b6:	c1 18       	rjmp	800047d8 <find_data+0xa8>
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
800047b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800047bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047c0:	f2 08 00 08 	add	r8,r9,r8
800047c4:	11 89       	ld.ub	r9,r8[0x0]
800047c6:	30 d8       	mov	r8,13
800047c8:	f0 09 18 00 	cp.b	r9,r8
800047cc:	c1 30       	breq	800047f2 <find_data+0xc2>
			return;
		
		else
			str_cnt++;
800047ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047d2:	2f f8       	sub	r8,-1
800047d4:	ef 48 ff f8 	st.w	r7[-8],r8
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
	unsigned int str_cnt = 0;
	unsigned int data_cnt = 0;
	
	while((str_cnt < 200) && (data_cnt < 50)){
800047d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047dc:	e0 48 00 c7 	cp.w	r8,199
800047e0:	e0 8b 00 0a 	brhi	800047f4 <find_data+0xc4>
800047e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047e8:	e0 48 00 31 	cp.w	r8,49
800047ec:	fe 98 ff b1 	brls	8000474e <find_data+0x1e>
800047f0:	c0 28       	rjmp	800047f4 <find_data+0xc4>
			data_cnt++;
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
			return;
800047f2:	d7 03       	nop
		
		else
			str_cnt++;
	}
800047f4:	2f cd       	sub	sp,-16
800047f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800047fa:	d7 03       	nop

800047fc <st7529_D07_WRITE>:

// LCD OFFSETS
#define ST7529_XOFFSET	16
#define ST7529_YOFFSET	0

inline static void st7529_D07_WRITE(uint8_t data){
800047fc:	eb cd 40 80 	pushm	r7,lr
80004800:	1a 97       	mov	r7,sp
80004802:	20 1d       	sub	sp,4
80004804:	18 98       	mov	r8,r12
80004806:	ef 68 ff fc 	st.b	r7[-4],r8
    // Clear Old Values
    AVR32_GPIO_LOCAL.port[0].ovrc = ST7529_D07_PORTA_PINS;
8000480a:	fc 18 40 00 	movh	r8,0x4000
8000480e:	e0 69 17 09 	mov	r9,5897
80004812:	ea 19 00 40 	orh	r9,0x40
80004816:	f1 49 00 58 	st.w	r8[88],r9
    AVR32_GPIO_LOCAL.port[1].ovrc = ST7529_D07_PORTB_PINS;
8000481a:	fc 18 40 00 	movh	r8,0x4000
8000481e:	e0 69 10 00 	mov	r9,4096
80004822:	f1 49 01 58 	st.w	r8[344],r9

    // Set Value
    AVR32_GPIO_LOCAL.port[0].ovrs = st7529_pin_map_lut[data].porta;
80004826:	fc 18 40 00 	movh	r8,0x4000
8000482a:	ef 3a ff fc 	ld.ub	r10,r7[-4]
8000482e:	48 a9       	lddpc	r9,80004854 <st7529_D07_WRITE+0x58>
80004830:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
80004834:	f1 49 00 54 	st.w	r8[84],r9
    AVR32_GPIO_LOCAL.port[1].ovrs = st7529_pin_map_lut[data].portb;
80004838:	fc 18 40 00 	movh	r8,0x4000
8000483c:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80004840:	48 59       	lddpc	r9,80004854 <st7529_D07_WRITE+0x58>
80004842:	a1 7a       	lsl	r10,0x1
80004844:	2f fa       	sub	r10,-1
80004846:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000484a:	f1 49 01 54 	st.w	r8[340],r9
}
8000484e:	2f fd       	sub	sp,-4
80004850:	e3 cd 80 80 	ldm	sp++,r7,pc
80004854:	80 00       	ld.sh	r0,r0[0x0]
80004856:	c5 30       	breq	800048fc <st7529_init+0x90>

80004858 <st7529_delay_write>:

/********* HELPER FUNCTIONS ***********/
#define st7529_delay_us(delay)      cpu_delay_us(delay, ST7529_FCPU)
#define st7529_delay_ms(delay)      cpu_delay_ms(delay, ST7529_FCPU)

inline static void st7529_delay_write(void){
80004858:	eb cd 40 80 	pushm	r7,lr
8000485c:	1a 97       	mov	r7,sp
	asm volatile("nop");
8000485e:	d7 03       	nop
	asm volatile("nop");
80004860:	d7 03       	nop
	asm volatile("nop");
80004862:	d7 03       	nop
	asm volatile("nop");
80004864:	d7 03       	nop
}
80004866:	e3 cd 80 80 	ldm	sp++,r7,pc
8000486a:	d7 03       	nop

8000486c <st7529_init>:
static inline void st7529_write_cmd(uint8_t);
static inline void st7529_write_data(uint8_t);
static inline uint8_t st7529_read_data(void);

// Initializes ST7529
void st7529_init(void){
8000486c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80004870:	1a 97       	mov	r7,sp
80004872:	fa cd 00 dc 	sub	sp,sp,220
80004876:	30 28       	mov	r8,2
80004878:	ef 48 ff 6c 	st.w	r7[-148],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
8000487c:	fc 1b 40 00 	movh	r11,0x4000
80004880:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80004884:	f0 0a 16 05 	lsr	r10,r8,0x5
80004888:	ee f8 ff 6c 	ld.w	r8,r7[-148]
8000488c:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004890:	30 18       	mov	r8,1
80004892:	f0 09 09 48 	lsl	r8,r8,r9
80004896:	10 99       	mov	r9,r8
80004898:	f4 08 15 08 	lsl	r8,r10,0x8
8000489c:	f6 08 00 08 	add	r8,r11,r8
800048a0:	2b c8       	sub	r8,-68
800048a2:	91 09       	st.w	r8[0x0],r9
800048a4:	30 28       	mov	r8,2
800048a6:	ef 48 ff 70 	st.w	r7[-144],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800048aa:	fc 1b 40 00 	movh	r11,0x4000
800048ae:	ee f8 ff 70 	ld.w	r8,r7[-144]
800048b2:	f0 0a 16 05 	lsr	r10,r8,0x5
800048b6:	ee f8 ff 70 	ld.w	r8,r7[-144]
800048ba:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800048be:	30 18       	mov	r8,1
800048c0:	f0 09 09 48 	lsl	r8,r8,r9
800048c4:	10 99       	mov	r9,r8
800048c6:	f4 08 15 08 	lsl	r8,r10,0x8
800048ca:	f6 08 00 08 	add	r8,r11,r8
800048ce:	2a 88       	sub	r8,-88
800048d0:	91 09       	st.w	r8[0x0],r9
800048d2:	30 18       	mov	r8,1
800048d4:	ef 48 ff 74 	st.w	r7[-140],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800048d8:	fc 1b 40 00 	movh	r11,0x4000
800048dc:	ee f8 ff 74 	ld.w	r8,r7[-140]
800048e0:	f0 0a 16 05 	lsr	r10,r8,0x5
800048e4:	ee f8 ff 74 	ld.w	r8,r7[-140]
800048e8:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800048ec:	30 18       	mov	r8,1
800048ee:	f0 09 09 48 	lsl	r8,r8,r9
800048f2:	10 99       	mov	r9,r8
800048f4:	f4 08 15 08 	lsl	r8,r10,0x8
800048f8:	f6 08 00 08 	add	r8,r11,r8
800048fc:	2b c8       	sub	r8,-68
800048fe:	91 09       	st.w	r8[0x0],r9
80004900:	30 18       	mov	r8,1
80004902:	ef 48 ff 78 	st.w	r7[-136],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004906:	fc 1b 40 00 	movh	r11,0x4000
8000490a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000490e:	f0 0a 16 05 	lsr	r10,r8,0x5
80004912:	ee f8 ff 78 	ld.w	r8,r7[-136]
80004916:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000491a:	30 18       	mov	r8,1
8000491c:	f0 09 09 48 	lsl	r8,r8,r9
80004920:	10 99       	mov	r9,r8
80004922:	f4 08 15 08 	lsl	r8,r10,0x8
80004926:	f6 08 00 08 	add	r8,r11,r8
8000492a:	2a c8       	sub	r8,-84
8000492c:	91 09       	st.w	r8[0x0],r9
8000492e:	31 28       	mov	r8,18
80004930:	ef 48 ff 7c 	st.w	r7[-132],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004934:	fc 1b 40 00 	movh	r11,0x4000
80004938:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000493c:	f0 0a 16 05 	lsr	r10,r8,0x5
80004940:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80004944:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004948:	30 18       	mov	r8,1
8000494a:	f0 09 09 48 	lsl	r8,r8,r9
8000494e:	10 99       	mov	r9,r8
80004950:	f4 08 15 08 	lsl	r8,r10,0x8
80004954:	f6 08 00 08 	add	r8,r11,r8
80004958:	2b c8       	sub	r8,-68
8000495a:	91 09       	st.w	r8[0x0],r9
8000495c:	31 28       	mov	r8,18
8000495e:	ef 48 ff 80 	st.w	r7[-128],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004962:	fc 1b 40 00 	movh	r11,0x4000
80004966:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000496a:	f0 0a 16 05 	lsr	r10,r8,0x5
8000496e:	ee f8 ff 80 	ld.w	r8,r7[-128]
80004972:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004976:	30 18       	mov	r8,1
80004978:	f0 09 09 48 	lsl	r8,r8,r9
8000497c:	10 99       	mov	r9,r8
8000497e:	f4 08 15 08 	lsl	r8,r10,0x8
80004982:	f6 08 00 08 	add	r8,r11,r8
80004986:	2a c8       	sub	r8,-84
80004988:	91 09       	st.w	r8[0x0],r9
8000498a:	30 58       	mov	r8,5
8000498c:	ef 48 ff 84 	st.w	r7[-124],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004990:	fc 1b 40 00 	movh	r11,0x4000
80004994:	ee f8 ff 84 	ld.w	r8,r7[-124]
80004998:	f0 0a 16 05 	lsr	r10,r8,0x5
8000499c:	ee f8 ff 84 	ld.w	r8,r7[-124]
800049a0:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800049a4:	30 18       	mov	r8,1
800049a6:	f0 09 09 48 	lsl	r8,r8,r9
800049aa:	10 99       	mov	r9,r8
800049ac:	f4 08 15 08 	lsl	r8,r10,0x8
800049b0:	f6 08 00 08 	add	r8,r11,r8
800049b4:	2b c8       	sub	r8,-68
800049b6:	91 09       	st.w	r8[0x0],r9
800049b8:	30 58       	mov	r8,5
800049ba:	ef 48 ff 88 	st.w	r7[-120],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800049be:	fc 1b 40 00 	movh	r11,0x4000
800049c2:	ee f8 ff 88 	ld.w	r8,r7[-120]
800049c6:	f0 0a 16 05 	lsr	r10,r8,0x5
800049ca:	ee f8 ff 88 	ld.w	r8,r7[-120]
800049ce:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800049d2:	30 18       	mov	r8,1
800049d4:	f0 09 09 48 	lsl	r8,r8,r9
800049d8:	10 99       	mov	r9,r8
800049da:	f4 08 15 08 	lsl	r8,r10,0x8
800049de:	f6 08 00 08 	add	r8,r11,r8
800049e2:	2a c8       	sub	r8,-84
800049e4:	91 09       	st.w	r8[0x0],r9
800049e6:	32 b8       	mov	r8,43
800049e8:	ef 48 ff 8c 	st.w	r7[-116],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800049ec:	fc 1b 40 00 	movh	r11,0x4000
800049f0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800049f4:	f0 0a 16 05 	lsr	r10,r8,0x5
800049f8:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800049fc:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004a00:	30 18       	mov	r8,1
80004a02:	f0 09 09 48 	lsl	r8,r8,r9
80004a06:	10 99       	mov	r9,r8
80004a08:	f4 08 15 08 	lsl	r8,r10,0x8
80004a0c:	f6 08 00 08 	add	r8,r11,r8
80004a10:	2b c8       	sub	r8,-68
80004a12:	91 09       	st.w	r8[0x0],r9
80004a14:	32 b8       	mov	r8,43
80004a16:	ef 48 ff 90 	st.w	r7[-112],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004a1a:	fc 1b 40 00 	movh	r11,0x4000
80004a1e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80004a22:	f0 0a 16 05 	lsr	r10,r8,0x5
80004a26:	ee f8 ff 90 	ld.w	r8,r7[-112]
80004a2a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004a2e:	30 18       	mov	r8,1
80004a30:	f0 09 09 48 	lsl	r8,r8,r9
80004a34:	10 99       	mov	r9,r8
80004a36:	f4 08 15 08 	lsl	r8,r10,0x8
80004a3a:	f6 08 00 08 	add	r8,r11,r8
80004a3e:	2a c8       	sub	r8,-84
80004a40:	91 09       	st.w	r8[0x0],r9
    st7529_RD_DIR_OUT();
    st7529_RD_SET();
    st7529_WR_DIR_OUT();
    st7529_WR_SET();

    st7529_D07_DIR_OUT();   // Idles as output
80004a42:	fc 18 40 00 	movh	r8,0x4000
80004a46:	e0 69 17 09 	mov	r9,5897
80004a4a:	ea 19 00 40 	orh	r9,0x40
80004a4e:	f1 49 00 44 	st.w	r8[68],r9
80004a52:	fc 18 40 00 	movh	r8,0x4000
80004a56:	e0 69 10 00 	mov	r9,4096
80004a5a:	f1 49 01 44 	st.w	r8[324],r9
80004a5e:	30 18       	mov	r8,1
80004a60:	ef 48 ff 94 	st.w	r7[-108],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004a64:	fc 1b 40 00 	movh	r11,0x4000
80004a68:	ee f8 ff 94 	ld.w	r8,r7[-108]
80004a6c:	f0 0a 16 05 	lsr	r10,r8,0x5
80004a70:	ee f8 ff 94 	ld.w	r8,r7[-108]
80004a74:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004a78:	30 18       	mov	r8,1
80004a7a:	f0 09 09 48 	lsl	r8,r8,r9
80004a7e:	10 99       	mov	r9,r8
80004a80:	f4 08 15 08 	lsl	r8,r10,0x8
80004a84:	f6 08 00 08 	add	r8,r11,r8
80004a88:	2a 88       	sub	r8,-88
80004a8a:	91 09       	st.w	r8[0x0],r9
80004a8c:	30 18       	mov	r8,1
80004a8e:	ef 48 ff 9c 	st.w	r7[-100],r8
80004a92:	e0 68 78 40 	mov	r8,30784
80004a96:	ea 18 01 7d 	orh	r8,0x17d
80004a9a:	ef 48 ff 98 	st.w	r7[-104],r8
80004a9e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80004aa2:	ef 48 ff a4 	st.w	r7[-92],r8
80004aa6:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004aaa:	ef 48 ff a0 	st.w	r7[-96],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004aae:	ee fc ff a4 	ld.w	r12,r7[-92]
80004ab2:	ef 4c ff 30 	st.w	r7[-208],r12
80004ab6:	30 0b       	mov	r11,0
80004ab8:	ef 4b ff 2c 	st.w	r7[-212],r11
80004abc:	ee f9 ff a0 	ld.w	r9,r7[-96]
80004ac0:	ef 49 ff 28 	st.w	r7[-216],r9
80004ac4:	30 08       	mov	r8,0
80004ac6:	ef 48 ff 24 	st.w	r7[-220],r8
80004aca:	ee fa ff 2c 	ld.w	r10,r7[-212]
80004ace:	ee fc ff 28 	ld.w	r12,r7[-216]
80004ad2:	b9 3a       	mul	r10,r12
80004ad4:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004ad8:	ee fb ff 30 	ld.w	r11,r7[-208]
80004adc:	b7 38       	mul	r8,r11
80004ade:	10 0a       	add	r10,r8
80004ae0:	ee fc ff 30 	ld.w	r12,r7[-208]
80004ae4:	ee fb ff 28 	ld.w	r11,r7[-216]
80004ae8:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004aec:	12 0a       	add	r10,r9
80004aee:	14 99       	mov	r9,r10
80004af0:	e0 6a 03 e7 	mov	r10,999
80004af4:	30 0b       	mov	r11,0
80004af6:	f0 0a 00 0a 	add	r10,r8,r10
80004afa:	f2 0b 00 4b 	adc	r11,r9,r11
80004afe:	e0 68 03 e8 	mov	r8,1000
80004b02:	30 09       	mov	r9,0
80004b04:	f0 1f 01 3a 	mcall	80004fec <st7529_init+0x780>
80004b08:	14 98       	mov	r8,r10
80004b0a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004b0c:	ef 48 ff ac 	st.w	r7[-84],r8
80004b10:	ee c8 00 bc 	sub	r8,r7,188
80004b14:	ef 48 ff a8 	st.w	r7[-88],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004b18:	e1 b8 00 42 	mfsr	r8,0x108
80004b1c:	10 99       	mov	r9,r8
80004b1e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004b22:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004b24:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004b28:	70 09       	ld.w	r9,r8[0x0]
80004b2a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004b2e:	10 09       	add	r9,r8
80004b30:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004b34:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004b36:	ee f9 ff a8 	ld.w	r9,r7[-88]
80004b3a:	30 08       	mov	r8,0
80004b3c:	f3 68 00 08 	st.b	r9[8],r8
80004b40:	ee c8 00 bc 	sub	r8,r7,188
80004b44:	ef 48 ff b0 	st.w	r7[-80],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004b48:	e1 b8 00 42 	mfsr	r8,0x108
80004b4c:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004b50:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004b54:	f1 39 00 08 	ld.ub	r9,r8[8]
80004b58:	30 28       	mov	r8,2
80004b5a:	f0 09 18 00 	cp.b	r9,r8
80004b5e:	c0 31       	brne	80004b64 <st7529_init+0x2f8>
    return false;
80004b60:	30 08       	mov	r8,0
80004b62:	c4 38       	rjmp	80004be8 <st7529_init+0x37c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004b64:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004b68:	f1 39 00 08 	ld.ub	r9,r8[8]
80004b6c:	30 18       	mov	r8,1
80004b6e:	f0 09 18 00 	cp.b	r9,r8
80004b72:	c0 31       	brne	80004b78 <st7529_init+0x30c>
    return true;
80004b74:	30 18       	mov	r8,1
80004b76:	c3 98       	rjmp	80004be8 <st7529_init+0x37c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004b78:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004b7c:	70 09       	ld.w	r9,r8[0x0]
80004b7e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004b82:	70 18       	ld.w	r8,r8[0x4]
80004b84:	10 39       	cp.w	r9,r8
80004b86:	e0 88 00 1a 	brls	80004bba <st7529_init+0x34e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004b8a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004b8e:	70 08       	ld.w	r8,r8[0x0]
80004b90:	ee f9 ff b4 	ld.w	r9,r7[-76]
80004b94:	10 39       	cp.w	r9,r8
80004b96:	c1 02       	brcc	80004bb6 <st7529_init+0x34a>
80004b98:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004b9c:	70 18       	ld.w	r8,r8[0x4]
80004b9e:	ee f9 ff b4 	ld.w	r9,r7[-76]
80004ba2:	10 39       	cp.w	r9,r8
80004ba4:	e0 88 00 09 	brls	80004bb6 <st7529_init+0x34a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004ba8:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004bac:	30 18       	mov	r8,1
80004bae:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004bb2:	30 18       	mov	r8,1
80004bb4:	c1 a8       	rjmp	80004be8 <st7529_init+0x37c>
    }
    return false;
80004bb6:	30 08       	mov	r8,0
80004bb8:	c1 88       	rjmp	80004be8 <st7529_init+0x37c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004bba:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004bbe:	70 08       	ld.w	r8,r8[0x0]
80004bc0:	ee f9 ff b4 	ld.w	r9,r7[-76]
80004bc4:	10 39       	cp.w	r9,r8
80004bc6:	c0 93       	brcs	80004bd8 <st7529_init+0x36c>
80004bc8:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004bcc:	70 18       	ld.w	r8,r8[0x4]
80004bce:	ee f9 ff b4 	ld.w	r9,r7[-76]
80004bd2:	10 39       	cp.w	r9,r8
80004bd4:	e0 88 00 09 	brls	80004be6 <st7529_init+0x37a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004bd8:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004bdc:	30 18       	mov	r8,1
80004bde:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004be2:	30 18       	mov	r8,1
80004be4:	c0 28       	rjmp	80004be8 <st7529_init+0x37c>
    }
    return false;
80004be6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004be8:	58 08       	cp.w	r8,0
80004bea:	ca b0       	breq	80004b40 <st7529_init+0x2d4>
80004bec:	30 28       	mov	r8,2
80004bee:	ef 48 ff b8 	st.w	r7[-72],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004bf2:	fc 1a 40 00 	movh	r10,0x4000
80004bf6:	ee f8 ff b8 	ld.w	r8,r7[-72]
80004bfa:	a5 98       	lsr	r8,0x5
80004bfc:	ee f9 ff b8 	ld.w	r9,r7[-72]
80004c00:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004c04:	30 1b       	mov	r11,1
80004c06:	f6 09 09 49 	lsl	r9,r11,r9
80004c0a:	a9 68       	lsl	r8,0x8
80004c0c:	f4 08 00 08 	add	r8,r10,r8
80004c10:	2a c8       	sub	r8,-84
80004c12:	91 09       	st.w	r8[0x0],r9
80004c14:	30 a8       	mov	r8,10
80004c16:	ef 48 ff c0 	st.w	r7[-64],r8
80004c1a:	e0 68 78 40 	mov	r8,30784
80004c1e:	ea 18 01 7d 	orh	r8,0x17d
80004c22:	ef 48 ff bc 	st.w	r7[-68],r8
80004c26:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004c2a:	ef 48 ff c8 	st.w	r7[-56],r8
80004c2e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004c32:	ef 48 ff c4 	st.w	r7[-60],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004c36:	ee f9 ff c8 	ld.w	r9,r7[-56]
80004c3a:	ef 49 ff 40 	st.w	r7[-192],r9
80004c3e:	30 08       	mov	r8,0
80004c40:	ef 48 ff 3c 	st.w	r7[-196],r8
80004c44:	ee fc ff c4 	ld.w	r12,r7[-60]
80004c48:	ef 4c ff 38 	st.w	r7[-200],r12
80004c4c:	30 0b       	mov	r11,0
80004c4e:	ef 4b ff 34 	st.w	r7[-204],r11
80004c52:	ee fa ff 3c 	ld.w	r10,r7[-196]
80004c56:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004c5a:	b3 3a       	mul	r10,r9
80004c5c:	ee f8 ff 34 	ld.w	r8,r7[-204]
80004c60:	ee fc ff 40 	ld.w	r12,r7[-192]
80004c64:	b9 38       	mul	r8,r12
80004c66:	10 0a       	add	r10,r8
80004c68:	ee fb ff 40 	ld.w	r11,r7[-192]
80004c6c:	ee fc ff 38 	ld.w	r12,r7[-200]
80004c70:	f6 0c 06 48 	mulu.d	r8,r11,r12
80004c74:	12 0a       	add	r10,r9
80004c76:	14 99       	mov	r9,r10
80004c78:	e0 6a 03 e7 	mov	r10,999
80004c7c:	30 0b       	mov	r11,0
80004c7e:	f0 0a 00 0a 	add	r10,r8,r10
80004c82:	f2 0b 00 4b 	adc	r11,r9,r11
80004c86:	e0 68 03 e8 	mov	r8,1000
80004c8a:	30 09       	mov	r9,0
80004c8c:	f0 1f 00 d8 	mcall	80004fec <st7529_init+0x780>
80004c90:	14 98       	mov	r8,r10
80004c92:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004c94:	ef 48 ff d0 	st.w	r7[-48],r8
80004c98:	ee c8 00 b0 	sub	r8,r7,176
80004c9c:	ef 48 ff cc 	st.w	r7[-52],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004ca0:	e1 b8 00 42 	mfsr	r8,0x108
80004ca4:	10 99       	mov	r9,r8
80004ca6:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004caa:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004cac:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004cb0:	70 09       	ld.w	r9,r8[0x0]
80004cb2:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004cb6:	10 09       	add	r9,r8
80004cb8:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004cbc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004cbe:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004cc2:	30 08       	mov	r8,0
80004cc4:	f3 68 00 08 	st.b	r9[8],r8
80004cc8:	ee c8 00 b0 	sub	r8,r7,176
80004ccc:	ef 48 ff d4 	st.w	r7[-44],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004cd0:	e1 b8 00 42 	mfsr	r8,0x108
80004cd4:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004cd8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004cdc:	f1 39 00 08 	ld.ub	r9,r8[8]
80004ce0:	30 28       	mov	r8,2
80004ce2:	f0 09 18 00 	cp.b	r9,r8
80004ce6:	c0 31       	brne	80004cec <st7529_init+0x480>
    return false;
80004ce8:	30 08       	mov	r8,0
80004cea:	c4 38       	rjmp	80004d70 <st7529_init+0x504>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004cec:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004cf0:	f1 39 00 08 	ld.ub	r9,r8[8]
80004cf4:	30 18       	mov	r8,1
80004cf6:	f0 09 18 00 	cp.b	r9,r8
80004cfa:	c0 31       	brne	80004d00 <st7529_init+0x494>
    return true;
80004cfc:	30 18       	mov	r8,1
80004cfe:	c3 98       	rjmp	80004d70 <st7529_init+0x504>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004d00:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004d04:	70 09       	ld.w	r9,r8[0x0]
80004d06:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004d0a:	70 18       	ld.w	r8,r8[0x4]
80004d0c:	10 39       	cp.w	r9,r8
80004d0e:	e0 88 00 1a 	brls	80004d42 <st7529_init+0x4d6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004d12:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004d16:	70 08       	ld.w	r8,r8[0x0]
80004d18:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d1c:	10 39       	cp.w	r9,r8
80004d1e:	c1 02       	brcc	80004d3e <st7529_init+0x4d2>
80004d20:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004d24:	70 18       	ld.w	r8,r8[0x4]
80004d26:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d2a:	10 39       	cp.w	r9,r8
80004d2c:	e0 88 00 09 	brls	80004d3e <st7529_init+0x4d2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004d30:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004d34:	30 18       	mov	r8,1
80004d36:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004d3a:	30 18       	mov	r8,1
80004d3c:	c1 a8       	rjmp	80004d70 <st7529_init+0x504>
    }
    return false;
80004d3e:	30 08       	mov	r8,0
80004d40:	c1 88       	rjmp	80004d70 <st7529_init+0x504>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004d42:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004d46:	70 08       	ld.w	r8,r8[0x0]
80004d48:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d4c:	10 39       	cp.w	r9,r8
80004d4e:	c0 93       	brcs	80004d60 <st7529_init+0x4f4>
80004d50:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004d54:	70 18       	ld.w	r8,r8[0x4]
80004d56:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d5a:	10 39       	cp.w	r9,r8
80004d5c:	e0 88 00 09 	brls	80004d6e <st7529_init+0x502>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004d60:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004d64:	30 18       	mov	r8,1
80004d66:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004d6a:	30 18       	mov	r8,1
80004d6c:	c0 28       	rjmp	80004d70 <st7529_init+0x504>
    }
    return false;
80004d6e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004d70:	58 08       	cp.w	r8,0
80004d72:	ca b0       	breq	80004cc8 <st7529_init+0x45c>
	st7529_delay_ms(1);
	
    st7529_RST_SET();       // Release reset
	st7529_delay_ms(10);
	
    st7529_write_cmd(ST7529_EXTIN);
80004d74:	33 0c       	mov	r12,48
80004d76:	f0 1f 00 9f 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_cmd(ST7529_SLPOUT);
80004d7a:	e0 6c 00 94 	mov	r12,148
80004d7e:	f0 1f 00 9d 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_cmd(ST7529_OSCON);
80004d82:	e0 6c 00 d1 	mov	r12,209
80004d86:	f0 1f 00 9b 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_cmd(ST7529_PWRCTRL);
80004d8a:	32 0c       	mov	r12,32
80004d8c:	f0 1f 00 99 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_BOOSTER);  // Booster First
80004d90:	30 8c       	mov	r12,8
80004d92:	f0 1f 00 99 	mcall	80004ff4 <st7529_init+0x788>
80004d96:	36 48       	mov	r8,100
80004d98:	ef 48 ff e0 	st.w	r7[-32],r8
80004d9c:	e0 68 78 40 	mov	r8,30784
80004da0:	ea 18 01 7d 	orh	r8,0x17d
80004da4:	ef 48 ff dc 	st.w	r7[-36],r8
80004da8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004dac:	ef 48 ff e8 	st.w	r7[-24],r8
80004db0:	ee f8 ff dc 	ld.w	r8,r7[-36]
80004db4:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004db8:	ee f0 ff e8 	ld.w	r0,r7[-24]
80004dbc:	30 01       	mov	r1,0
80004dbe:	ee f2 ff e4 	ld.w	r2,r7[-28]
80004dc2:	30 03       	mov	r3,0
80004dc4:	e2 02 02 4a 	mul	r10,r1,r2
80004dc8:	e6 00 02 48 	mul	r8,r3,r0
80004dcc:	10 0a       	add	r10,r8
80004dce:	e0 02 06 48 	mulu.d	r8,r0,r2
80004dd2:	12 0a       	add	r10,r9
80004dd4:	14 99       	mov	r9,r10
80004dd6:	e0 6a 03 e7 	mov	r10,999
80004dda:	30 0b       	mov	r11,0
80004ddc:	f0 0a 00 0a 	add	r10,r8,r10
80004de0:	f2 0b 00 4b 	adc	r11,r9,r11
80004de4:	e0 68 03 e8 	mov	r8,1000
80004de8:	30 09       	mov	r9,0
80004dea:	f0 1f 00 81 	mcall	80004fec <st7529_init+0x780>
80004dee:	14 98       	mov	r8,r10
80004df0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004df2:	ef 48 ff f0 	st.w	r7[-16],r8
80004df6:	ee c8 00 a4 	sub	r8,r7,164
80004dfa:	ef 48 ff ec 	st.w	r7[-20],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004dfe:	e1 b8 00 42 	mfsr	r8,0x108
80004e02:	10 99       	mov	r9,r8
80004e04:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004e08:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004e0a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004e0e:	70 09       	ld.w	r9,r8[0x0]
80004e10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004e14:	10 09       	add	r9,r8
80004e16:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004e1a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004e1c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004e20:	30 08       	mov	r8,0
80004e22:	f3 68 00 08 	st.b	r9[8],r8
80004e26:	ee c8 00 a4 	sub	r8,r7,164
80004e2a:	ef 48 ff f4 	st.w	r7[-12],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004e2e:	e1 b8 00 42 	mfsr	r8,0x108
80004e32:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004e36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e3a:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e3e:	30 28       	mov	r8,2
80004e40:	f0 09 18 00 	cp.b	r9,r8
80004e44:	c0 31       	brne	80004e4a <st7529_init+0x5de>
    return false;
80004e46:	30 08       	mov	r8,0
80004e48:	c4 38       	rjmp	80004ece <st7529_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004e4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e4e:	f1 39 00 08 	ld.ub	r9,r8[8]
80004e52:	30 18       	mov	r8,1
80004e54:	f0 09 18 00 	cp.b	r9,r8
80004e58:	c0 31       	brne	80004e5e <st7529_init+0x5f2>
    return true;
80004e5a:	30 18       	mov	r8,1
80004e5c:	c3 98       	rjmp	80004ece <st7529_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004e5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e62:	70 09       	ld.w	r9,r8[0x0]
80004e64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e68:	70 18       	ld.w	r8,r8[0x4]
80004e6a:	10 39       	cp.w	r9,r8
80004e6c:	e0 88 00 1a 	brls	80004ea0 <st7529_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004e70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e74:	70 08       	ld.w	r8,r8[0x0]
80004e76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e7a:	10 39       	cp.w	r9,r8
80004e7c:	c1 02       	brcc	80004e9c <st7529_init+0x630>
80004e7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004e82:	70 18       	ld.w	r8,r8[0x4]
80004e84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e88:	10 39       	cp.w	r9,r8
80004e8a:	e0 88 00 09 	brls	80004e9c <st7529_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004e8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004e92:	30 18       	mov	r8,1
80004e94:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004e98:	30 18       	mov	r8,1
80004e9a:	c1 a8       	rjmp	80004ece <st7529_init+0x662>
    }
    return false;
80004e9c:	30 08       	mov	r8,0
80004e9e:	c1 88       	rjmp	80004ece <st7529_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004ea0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ea4:	70 08       	ld.w	r8,r8[0x0]
80004ea6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004eaa:	10 39       	cp.w	r9,r8
80004eac:	c0 93       	brcs	80004ebe <st7529_init+0x652>
80004eae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004eb2:	70 18       	ld.w	r8,r8[0x4]
80004eb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004eb8:	10 39       	cp.w	r9,r8
80004eba:	e0 88 00 09 	brls	80004ecc <st7529_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004ebe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004ec2:	30 18       	mov	r8,1
80004ec4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004ec8:	30 18       	mov	r8,1
80004eca:	c0 28       	rjmp	80004ece <st7529_init+0x662>
    }
    return false;
80004ecc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004ece:	58 08       	cp.w	r8,0
80004ed0:	ca b0       	breq	80004e26 <st7529_init+0x5ba>
	st7529_delay_ms(100);
    st7529_write_cmd(ST7529_PWRCTRL);
80004ed2:	32 0c       	mov	r12,32
80004ed4:	f0 1f 00 47 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_PARAM0);
80004ed8:	30 bc       	mov	r12,11
80004eda:	f0 1f 00 47 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_VOLCTRL);
80004ede:	e0 6c 00 81 	mov	r12,129
80004ee2:	f0 1f 00 44 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_VOLCTRL_PARAM0);
80004ee6:	32 ac       	mov	r12,42
80004ee8:	f0 1f 00 43 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_VOLCTRL_PARAM1);
80004eec:	30 4c       	mov	r12,4
80004eee:	f0 1f 00 42 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISCTRL);
80004ef2:	e0 6c 00 ca 	mov	r12,202
80004ef6:	f0 1f 00 3f 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_DISCTRL_PARAM0);
80004efa:	30 0c       	mov	r12,0
80004efc:	f0 1f 00 3e 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM1);
80004f00:	32 3c       	mov	r12,35
80004f02:	f0 1f 00 3d 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM2);
80004f06:	30 0c       	mov	r12,0
80004f08:	f0 1f 00 3b 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISINV);
80004f0c:	e0 6c 00 a7 	mov	r12,167
80004f10:	f0 1f 00 38 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_cmd(ST7529_COMSCN);
80004f14:	e0 6c 00 bb 	mov	r12,187
80004f18:	f0 1f 00 36 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_COMSCN_PARAM0);
80004f1c:	30 2c       	mov	r12,2
80004f1e:	f0 1f 00 36 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_DATSDR);
80004f22:	e0 6c 00 bc 	mov	r12,188
80004f26:	f0 1f 00 33 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_DATSDR_PARAM0);
80004f2a:	30 4c       	mov	r12,4
80004f2c:	f0 1f 00 32 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM1);
80004f30:	30 0c       	mov	r12,0
80004f32:	f0 1f 00 31 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM2);
80004f36:	30 2c       	mov	r12,2
80004f38:	f0 1f 00 2f 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_LASET);
80004f3c:	37 5c       	mov	r12,117
80004f3e:	f0 1f 00 2d 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_LASET_PARAM0);
80004f42:	30 0c       	mov	r12,0
80004f44:	f0 1f 00 2c 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_LASET_PARAM1);
80004f48:	e0 6c 00 9f 	mov	r12,159
80004f4c:	f0 1f 00 2a 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_CASET);
80004f50:	31 5c       	mov	r12,21
80004f52:	f0 1f 00 28 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_CASET_PARAM0);
80004f56:	30 0c       	mov	r12,0
80004f58:	f0 1f 00 27 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_CASET_PARAM1);
80004f5c:	35 4c       	mov	r12,84
80004f5e:	f0 1f 00 26 	mcall	80004ff4 <st7529_init+0x788>

    st7529_write_cmd(ST7529_EXTOUT);
80004f62:	33 1c       	mov	r12,49
80004f64:	f0 1f 00 23 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_cmd(ST7529_ANASET);
80004f68:	33 2c       	mov	r12,50
80004f6a:	f0 1f 00 22 	mcall	80004ff0 <st7529_init+0x784>
    st7529_write_data(ST7529_ANASET_PARAM0);
80004f6e:	30 1c       	mov	r12,1
80004f70:	f0 1f 00 21 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM1);
80004f74:	30 0c       	mov	r12,0
80004f76:	f0 1f 00 20 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM2);
80004f7a:	30 2c       	mov	r12,2
80004f7c:	f0 1f 00 1e 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_SWINT);
80004f80:	33 4c       	mov	r12,52
80004f82:	f0 1f 00 1c 	mcall	80004ff0 <st7529_init+0x784>

    st7529_write_cmd(ST7529_EXTIN);
80004f86:	33 0c       	mov	r12,48
80004f88:	f0 1f 00 1a 	mcall	80004ff0 <st7529_init+0x784>
	
	st7529_write_cmd(ST7529_RAMWR);
80004f8c:	35 cc       	mov	r12,92
80004f8e:	f0 1f 00 19 	mcall	80004ff0 <st7529_init+0x784>
	
	// Clear Display
	for(int i=0; i<41000; i++){
80004f92:	30 08       	mov	r8,0
80004f94:	ef 48 ff 68 	st.w	r7[-152],r8
80004f98:	c0 98       	rjmp	80004faa <st7529_init+0x73e>
		st7529_write_data(0x00);
80004f9a:	30 0c       	mov	r12,0
80004f9c:	f0 1f 00 16 	mcall	80004ff4 <st7529_init+0x788>
    st7529_write_cmd(ST7529_EXTIN);
	
	st7529_write_cmd(ST7529_RAMWR);
	
	// Clear Display
	for(int i=0; i<41000; i++){
80004fa0:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004fa4:	2f f8       	sub	r8,-1
80004fa6:	ef 48 ff 68 	st.w	r7[-152],r8
80004faa:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004fae:	e0 48 a0 27 	cp.w	r8,40999
80004fb2:	fe 9a ff f4 	brle	80004f9a <st7529_init+0x72e>
		st7529_write_data(0x00);
	}
	
	st7529_write_cmd(ST7529_DISON);
80004fb6:	e0 6c 00 af 	mov	r12,175
80004fba:	f0 1f 00 0e 	mcall	80004ff0 <st7529_init+0x784>
80004fbe:	30 18       	mov	r8,1
80004fc0:	ef 48 ff fc 	st.w	r7[-4],r8
80004fc4:	fc 1a 40 00 	movh	r10,0x4000
80004fc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fcc:	a5 98       	lsr	r8,0x5
80004fce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004fd2:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004fd6:	30 1b       	mov	r11,1
80004fd8:	f6 09 09 49 	lsl	r9,r11,r9
80004fdc:	a9 68       	lsl	r8,0x8
80004fde:	f4 08 00 08 	add	r8,r10,r8
80004fe2:	2a c8       	sub	r8,-84
80004fe4:	91 09       	st.w	r8[0x0],r9
	
    st7529_CS_SET();
}
80004fe6:	2c 9d       	sub	sp,-220
80004fe8:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004fec:	80 00       	ld.sh	r0,r0[0x0]
80004fee:	67 52       	ld.w	r2,r3[0x54]
80004ff0:	80 00       	ld.sh	r0,r0[0x0]
80004ff2:	4f f8       	lddpc	r8,800051ec <st7529_put_5x7_text+0xa4>
80004ff4:	80 00       	ld.sh	r0,r0[0x0]
80004ff6:	50 c8       	stdsp	sp[0x30],r8

80004ff8 <st7529_write_cmd>:

static inline void st7529_write_cmd(uint8_t data){
80004ff8:	eb cd 40 80 	pushm	r7,lr
80004ffc:	1a 97       	mov	r7,sp
80004ffe:	20 5d       	sub	sp,20
80005000:	18 98       	mov	r8,r12
80005002:	ef 68 ff ec 	st.b	r7[-20],r8
80005006:	31 28       	mov	r8,18
80005008:	ef 48 ff f0 	st.w	r7[-16],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
8000500c:	fc 1a 40 00 	movh	r10,0x4000
80005010:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005014:	a5 98       	lsr	r8,0x5
80005016:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000501a:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000501e:	30 1b       	mov	r11,1
80005020:	f6 09 09 49 	lsl	r9,r11,r9
80005024:	a9 68       	lsl	r8,0x8
80005026:	f4 08 00 08 	add	r8,r10,r8
8000502a:	2a 88       	sub	r8,-88
8000502c:	91 09       	st.w	r8[0x0],r9
8000502e:	32 b8       	mov	r8,43
80005030:	ef 48 ff f4 	st.w	r7[-12],r8
80005034:	fc 1a 40 00 	movh	r10,0x4000
80005038:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000503c:	a5 98       	lsr	r8,0x5
8000503e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005042:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80005046:	30 1b       	mov	r11,1
80005048:	f6 09 09 49 	lsl	r9,r11,r9
8000504c:	a9 68       	lsl	r8,0x8
8000504e:	f4 08 00 08 	add	r8,r10,r8
80005052:	2a 88       	sub	r8,-88
80005054:	91 09       	st.w	r8[0x0],r9
    st7529_A0_CLR();
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
80005056:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000505a:	10 9c       	mov	r12,r8
8000505c:	f0 1f 00 19 	mcall	800050c0 <st7529_write_cmd+0xc8>
	
	st7529_delay_write();
80005060:	f0 1f 00 19 	mcall	800050c4 <st7529_write_cmd+0xcc>
80005064:	32 b8       	mov	r8,43
80005066:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000506a:	fc 1a 40 00 	movh	r10,0x4000
8000506e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005072:	a5 98       	lsr	r8,0x5
80005074:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005078:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000507c:	30 1b       	mov	r11,1
8000507e:	f6 09 09 49 	lsl	r9,r11,r9
80005082:	a9 68       	lsl	r8,0x8
80005084:	f4 08 00 08 	add	r8,r10,r8
80005088:	2a c8       	sub	r8,-84
8000508a:	91 09       	st.w	r8[0x0],r9
8000508c:	31 28       	mov	r8,18
8000508e:	ef 48 ff fc 	st.w	r7[-4],r8
80005092:	fc 1a 40 00 	movh	r10,0x4000
80005096:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000509a:	a5 98       	lsr	r8,0x5
8000509c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800050a0:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800050a4:	30 1b       	mov	r11,1
800050a6:	f6 09 09 49 	lsl	r9,r11,r9
800050aa:	a9 68       	lsl	r8,0x8
800050ac:	f4 08 00 08 	add	r8,r10,r8
800050b0:	2a c8       	sub	r8,-84
800050b2:	91 09       	st.w	r8[0x0],r9
	
    st7529_WR_SET();
    st7529_A0_SET();
	
	st7529_delay_write();
800050b4:	f0 1f 00 04 	mcall	800050c4 <st7529_write_cmd+0xcc>
}
800050b8:	2f bd       	sub	sp,-20
800050ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800050be:	00 00       	add	r0,r0
800050c0:	80 00       	ld.sh	r0,r0[0x0]
800050c2:	47 fc       	lddsp	r12,sp[0x1fc]
800050c4:	80 00       	ld.sh	r0,r0[0x0]
800050c6:	48 58       	lddpc	r8,800050d8 <st7529_write_data+0x10>

800050c8 <st7529_write_data>:

static inline void st7529_write_data(uint8_t data){
800050c8:	eb cd 40 80 	pushm	r7,lr
800050cc:	1a 97       	mov	r7,sp
800050ce:	20 3d       	sub	sp,12
800050d0:	18 98       	mov	r8,r12
800050d2:	ef 68 ff f4 	st.b	r7[-12],r8
800050d6:	32 b8       	mov	r8,43
800050d8:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800050dc:	fc 1a 40 00 	movh	r10,0x4000
800050e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050e4:	a5 98       	lsr	r8,0x5
800050e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050ea:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800050ee:	30 1b       	mov	r11,1
800050f0:	f6 09 09 49 	lsl	r9,r11,r9
800050f4:	a9 68       	lsl	r8,0x8
800050f6:	f4 08 00 08 	add	r8,r10,r8
800050fa:	2a 88       	sub	r8,-88
800050fc:	91 09       	st.w	r8[0x0],r9
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
800050fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005102:	10 9c       	mov	r12,r8
80005104:	f0 1f 00 0f 	mcall	80005140 <st7529_write_data+0x78>
	
	st7529_delay_write();
80005108:	f0 1f 00 0f 	mcall	80005144 <st7529_write_data+0x7c>
8000510c:	32 b8       	mov	r8,43
8000510e:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80005112:	fc 1a 40 00 	movh	r10,0x4000
80005116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000511a:	a5 98       	lsr	r8,0x5
8000511c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005120:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80005124:	30 1b       	mov	r11,1
80005126:	f6 09 09 49 	lsl	r9,r11,r9
8000512a:	a9 68       	lsl	r8,0x8
8000512c:	f4 08 00 08 	add	r8,r10,r8
80005130:	2a c8       	sub	r8,-84
80005132:	91 09       	st.w	r8[0x0],r9

    st7529_WR_SET(); 
	
	st7529_delay_write();
80005134:	f0 1f 00 04 	mcall	80005144 <st7529_write_data+0x7c>
}
80005138:	2f dd       	sub	sp,-12
8000513a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000513e:	00 00       	add	r0,r0
80005140:	80 00       	ld.sh	r0,r0[0x0]
80005142:	47 fc       	lddsp	r12,sp[0x1fc]
80005144:	80 00       	ld.sh	r0,r0[0x0]
80005146:	48 58       	lddpc	r8,80005158 <st7529_put_5x7_text+0x10>

80005148 <st7529_put_5x7_text>:
// len: length of character string (not including null termination)
// NOTES:
// To avoid reads, this function assumes two rows of cleared pixels above
// each character.

void st7529_put_5x7_text(uint8_t x, uint8_t y, char *str, uint32_t len){
80005148:	eb cd 40 80 	pushm	r7,lr
8000514c:	1a 97       	mov	r7,sp
8000514e:	20 ad       	sub	sp,40
80005150:	16 98       	mov	r8,r11
80005152:	ef 4a ff dc 	st.w	r7[-36],r10
80005156:	ef 49 ff d8 	st.w	r7[-40],r9
8000515a:	18 99       	mov	r9,r12
8000515c:	ef 69 ff e4 	st.b	r7[-28],r9
80005160:	ef 68 ff e0 	st.b	r7[-32],r8
80005164:	30 18       	mov	r8,1
80005166:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
8000516a:	fc 1a 40 00 	movh	r10,0x4000
8000516e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005172:	a5 98       	lsr	r8,0x5
80005174:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005178:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000517c:	30 1b       	mov	r11,1
8000517e:	f6 09 09 49 	lsl	r9,r11,r9
80005182:	a9 68       	lsl	r8,0x8
80005184:	f4 08 00 08 	add	r8,r10,r8
80005188:	2a 88       	sub	r8,-88
8000518a:	91 09       	st.w	r8[0x0],r9

    st7529_CS_CLR();
	
	x = x + ST7529_XOFFSET;
8000518c:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80005190:	2f 08       	sub	r8,-16
80005192:	ef 68 ff e4 	st.b	r7[-28],r8
	y = y + ST7529_YOFFSET;
	
    // Set Start and End Lines/Columns
    uint32_t end_line = x+6*len-1;
80005196:	ef 3a ff e4 	ld.ub	r10,r7[-28]
8000519a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000519e:	12 98       	mov	r8,r9
800051a0:	a1 78       	lsl	r8,0x1
800051a2:	12 08       	add	r8,r9
800051a4:	a1 78       	lsl	r8,0x1
800051a6:	f4 08 00 08 	add	r8,r10,r8
800051aa:	20 18       	sub	r8,1
800051ac:	ef 48 ff e8 	st.w	r7[-24],r8
    uint32_t end_col = y/3+2;
800051b0:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800051b4:	e0 68 aa ab 	mov	r8,43691
800051b8:	ea 18 aa aa 	orh	r8,0xaaaa
800051bc:	f2 08 06 48 	mulu.d	r8,r9,r8
800051c0:	f2 08 16 01 	lsr	r8,r9,0x1
800051c4:	5c 58       	castu.b	r8
800051c6:	2f e8       	sub	r8,-2
800051c8:	ef 48 ff ec 	st.w	r7[-20],r8

    st7529_write_cmd(ST7529_LASET);
800051cc:	37 5c       	mov	r12,117
800051ce:	f0 1f 00 db 	mcall	80005538 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(x);
800051d2:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800051d6:	10 9c       	mov	r12,r8
800051d8:	f0 1f 00 d9 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_line);
800051dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800051e0:	5c 58       	castu.b	r8
800051e2:	10 9c       	mov	r12,r8
800051e4:	f0 1f 00 d6 	mcall	8000553c <st7529_put_5x7_text+0x3f4>

    st7529_write_cmd(ST7529_CASET);
800051e8:	31 5c       	mov	r12,21
800051ea:	f0 1f 00 d4 	mcall	80005538 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(y/3);
800051ee:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800051f2:	e0 68 aa ab 	mov	r8,43691
800051f6:	ea 18 aa aa 	orh	r8,0xaaaa
800051fa:	f2 08 06 48 	mulu.d	r8,r9,r8
800051fe:	f2 08 16 01 	lsr	r8,r9,0x1
80005202:	5c 58       	castu.b	r8
80005204:	10 9c       	mov	r12,r8
80005206:	f0 1f 00 ce 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_col);
8000520a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000520e:	5c 58       	castu.b	r8
80005210:	10 9c       	mov	r12,r8
80005212:	f0 1f 00 cb 	mcall	8000553c <st7529_put_5x7_text+0x3f4>

    // Write Text Data
    st7529_write_cmd(ST7529_RAMWR);
80005216:	35 cc       	mov	r12,92
80005218:	f0 1f 00 c8 	mcall	80005538 <st7529_put_5x7_text+0x3f0>

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
8000521c:	30 08       	mov	r8,0
8000521e:	ef 48 ff f0 	st.w	r7[-16],r8
80005222:	c7 58       	rjmp	8000530c <st7529_put_5x7_text+0x1c4>
        if((iline % 6) == 5){
80005224:	ee fa ff f0 	ld.w	r10,r7[-16]
80005228:	e0 68 aa ab 	mov	r8,43691
8000522c:	ea 18 aa aa 	orh	r8,0xaaaa
80005230:	f4 08 06 48 	mulu.d	r8,r10,r8
80005234:	a3 89       	lsr	r9,0x2
80005236:	12 98       	mov	r8,r9
80005238:	a1 78       	lsl	r8,0x1
8000523a:	12 08       	add	r8,r9
8000523c:	a1 78       	lsl	r8,0x1
8000523e:	f4 08 01 09 	sub	r9,r10,r8
80005242:	58 59       	cp.w	r9,5
80005244:	c0 b1       	brne	8000525a <st7529_put_5x7_text+0x112>
            st7529_write_data(0x00);
80005246:	30 0c       	mov	r12,0
80005248:	f0 1f 00 bd 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
8000524c:	30 0c       	mov	r12,0
8000524e:	f0 1f 00 bc 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80005252:	30 0c       	mov	r12,0
80005254:	f0 1f 00 ba 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
80005258:	c5 58       	rjmp	80005302 <st7529_put_5x7_text+0x1ba>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
8000525a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000525e:	e0 68 aa ab 	mov	r8,43691
80005262:	ea 18 aa aa 	orh	r8,0xaaaa
80005266:	f2 08 06 48 	mulu.d	r8,r9,r8
8000526a:	f2 08 16 02 	lsr	r8,r9,0x2
8000526e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80005272:	f2 08 00 08 	add	r8,r9,r8
80005276:	11 88       	ld.ub	r8,r8[0x0]
80005278:	10 99       	mov	r9,r8
8000527a:	12 98       	mov	r8,r9
8000527c:	a3 68       	lsl	r8,0x2
8000527e:	12 08       	add	r8,r9
80005280:	10 9b       	mov	r11,r8
80005282:	ee fa ff f0 	ld.w	r10,r7[-16]
80005286:	e0 68 aa ab 	mov	r8,43691
8000528a:	ea 18 aa aa 	orh	r8,0xaaaa
8000528e:	f4 08 06 48 	mulu.d	r8,r10,r8
80005292:	a3 89       	lsr	r9,0x2
80005294:	12 98       	mov	r8,r9
80005296:	a1 78       	lsl	r8,0x1
80005298:	12 08       	add	r8,r9
8000529a:	a1 78       	lsl	r8,0x1
8000529c:	f4 08 01 09 	sub	r9,r10,r8
800052a0:	f6 09 00 08 	add	r8,r11,r9
800052a4:	f0 c8 00 a0 	sub	r8,r8,160
800052a8:	fe f9 02 98 	ld.w	r9,pc[664]
800052ac:	f2 08 07 08 	ld.ub	r8,r9[r8]
800052b0:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<6))
800052b4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800052b8:	e2 18 00 40 	andl	r8,0x40,COH
800052bc:	c0 60       	breq	800052c8 <st7529_put_5x7_text+0x180>
                st7529_write_data(0xFF);
800052be:	e0 6c 00 ff 	mov	r12,255
800052c2:	f0 1f 00 9f 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
800052c6:	c0 48       	rjmp	800052ce <st7529_put_5x7_text+0x186>
            else
                st7529_write_data(0x00);
800052c8:	30 0c       	mov	r12,0
800052ca:	f0 1f 00 9d 	mcall	8000553c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<5))
800052ce:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800052d2:	e2 18 00 20 	andl	r8,0x20,COH
800052d6:	c0 60       	breq	800052e2 <st7529_put_5x7_text+0x19a>
                st7529_write_data(0xFF);
800052d8:	e0 6c 00 ff 	mov	r12,255
800052dc:	f0 1f 00 98 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
800052e0:	c0 48       	rjmp	800052e8 <st7529_put_5x7_text+0x1a0>
            else
                st7529_write_data(0x00);
800052e2:	30 0c       	mov	r12,0
800052e4:	f0 1f 00 96 	mcall	8000553c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<4))
800052e8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800052ec:	e2 18 00 10 	andl	r8,0x10,COH
800052f0:	c0 60       	breq	800052fc <st7529_put_5x7_text+0x1b4>
                st7529_write_data(0xFF);
800052f2:	e0 6c 00 ff 	mov	r12,255
800052f6:	f0 1f 00 92 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
800052fa:	c0 48       	rjmp	80005302 <st7529_put_5x7_text+0x1ba>
            else
                st7529_write_data(0x00);
800052fc:	30 0c       	mov	r12,0
800052fe:	f0 1f 00 90 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
    st7529_write_cmd(ST7529_RAMWR);

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
80005302:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005306:	2f f8       	sub	r8,-1
80005308:	ef 48 ff f0 	st.w	r7[-16],r8
8000530c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005310:	12 98       	mov	r8,r9
80005312:	a1 78       	lsl	r8,0x1
80005314:	12 08       	add	r8,r9
80005316:	a1 78       	lsl	r8,0x1
80005318:	10 99       	mov	r9,r8
8000531a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000531e:	10 39       	cp.w	r9,r8
80005320:	fe 9b ff 82 	brhi	80005224 <st7529_put_5x7_text+0xdc>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80005324:	30 08       	mov	r8,0
80005326:	ef 48 ff f0 	st.w	r7[-16],r8
8000532a:	c7 48       	rjmp	80005412 <st7529_put_5x7_text+0x2ca>
        if((iline % 6) == 5){
8000532c:	ee fa ff f0 	ld.w	r10,r7[-16]
80005330:	e0 68 aa ab 	mov	r8,43691
80005334:	ea 18 aa aa 	orh	r8,0xaaaa
80005338:	f4 08 06 48 	mulu.d	r8,r10,r8
8000533c:	a3 89       	lsr	r9,0x2
8000533e:	12 98       	mov	r8,r9
80005340:	a1 78       	lsl	r8,0x1
80005342:	12 08       	add	r8,r9
80005344:	a1 78       	lsl	r8,0x1
80005346:	f4 08 01 09 	sub	r9,r10,r8
8000534a:	58 59       	cp.w	r9,5
8000534c:	c0 b1       	brne	80005362 <st7529_put_5x7_text+0x21a>
            st7529_write_data(0x00);
8000534e:	30 0c       	mov	r12,0
80005350:	f0 1f 00 7b 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80005354:	30 0c       	mov	r12,0
80005356:	f0 1f 00 7a 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
8000535a:	30 0c       	mov	r12,0
8000535c:	f0 1f 00 78 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
80005360:	c5 48       	rjmp	80005408 <st7529_put_5x7_text+0x2c0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80005362:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005366:	e0 68 aa ab 	mov	r8,43691
8000536a:	ea 18 aa aa 	orh	r8,0xaaaa
8000536e:	f2 08 06 48 	mulu.d	r8,r9,r8
80005372:	f2 08 16 02 	lsr	r8,r9,0x2
80005376:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000537a:	f2 08 00 08 	add	r8,r9,r8
8000537e:	11 88       	ld.ub	r8,r8[0x0]
80005380:	10 99       	mov	r9,r8
80005382:	12 98       	mov	r8,r9
80005384:	a3 68       	lsl	r8,0x2
80005386:	12 08       	add	r8,r9
80005388:	10 9b       	mov	r11,r8
8000538a:	ee fa ff f0 	ld.w	r10,r7[-16]
8000538e:	e0 68 aa ab 	mov	r8,43691
80005392:	ea 18 aa aa 	orh	r8,0xaaaa
80005396:	f4 08 06 48 	mulu.d	r8,r10,r8
8000539a:	a3 89       	lsr	r9,0x2
8000539c:	12 98       	mov	r8,r9
8000539e:	a1 78       	lsl	r8,0x1
800053a0:	12 08       	add	r8,r9
800053a2:	a1 78       	lsl	r8,0x1
800053a4:	f4 08 01 09 	sub	r9,r10,r8
800053a8:	f6 09 00 08 	add	r8,r11,r9
800053ac:	f0 c8 00 a0 	sub	r8,r8,160
800053b0:	4e 49       	lddpc	r9,80005540 <st7529_put_5x7_text+0x3f8>
800053b2:	f2 08 07 08 	ld.ub	r8,r9[r8]
800053b6:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<3))
800053ba:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053be:	e2 18 00 08 	andl	r8,0x8,COH
800053c2:	c0 60       	breq	800053ce <st7529_put_5x7_text+0x286>
                st7529_write_data(0xFF);
800053c4:	e0 6c 00 ff 	mov	r12,255
800053c8:	f0 1f 00 5d 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
800053cc:	c0 48       	rjmp	800053d4 <st7529_put_5x7_text+0x28c>
            else
                st7529_write_data(0x00);
800053ce:	30 0c       	mov	r12,0
800053d0:	f0 1f 00 5b 	mcall	8000553c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<2))
800053d4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053d8:	e2 18 00 04 	andl	r8,0x4,COH
800053dc:	c0 60       	breq	800053e8 <st7529_put_5x7_text+0x2a0>
                st7529_write_data(0xFF);
800053de:	e0 6c 00 ff 	mov	r12,255
800053e2:	f0 1f 00 57 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
800053e6:	c0 48       	rjmp	800053ee <st7529_put_5x7_text+0x2a6>
            else
                st7529_write_data(0x00);
800053e8:	30 0c       	mov	r12,0
800053ea:	f0 1f 00 55 	mcall	8000553c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<1))
800053ee:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800053f2:	e2 18 00 02 	andl	r8,0x2,COH
800053f6:	c0 60       	breq	80005402 <st7529_put_5x7_text+0x2ba>
                st7529_write_data(0xFF);
800053f8:	e0 6c 00 ff 	mov	r12,255
800053fc:	f0 1f 00 50 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
80005400:	c0 48       	rjmp	80005408 <st7529_put_5x7_text+0x2c0>
            else
                st7529_write_data(0x00);
80005402:	30 0c       	mov	r12,0
80005404:	f0 1f 00 4e 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80005408:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000540c:	2f f8       	sub	r8,-1
8000540e:	ef 48 ff f0 	st.w	r7[-16],r8
80005412:	ee f9 ff d8 	ld.w	r9,r7[-40]
80005416:	12 98       	mov	r8,r9
80005418:	a1 78       	lsl	r8,0x1
8000541a:	12 08       	add	r8,r9
8000541c:	a1 78       	lsl	r8,0x1
8000541e:	10 99       	mov	r9,r8
80005420:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005424:	10 39       	cp.w	r9,r8
80005426:	fe 9b ff 83 	brhi	8000532c <st7529_put_5x7_text+0x1e4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
8000542a:	30 08       	mov	r8,0
8000542c:	ef 48 ff f0 	st.w	r7[-16],r8
80005430:	c6 18       	rjmp	800054f2 <st7529_put_5x7_text+0x3aa>
        if((iline % 6) == 5){
80005432:	ee fa ff f0 	ld.w	r10,r7[-16]
80005436:	e0 68 aa ab 	mov	r8,43691
8000543a:	ea 18 aa aa 	orh	r8,0xaaaa
8000543e:	f4 08 06 48 	mulu.d	r8,r10,r8
80005442:	a3 89       	lsr	r9,0x2
80005444:	12 98       	mov	r8,r9
80005446:	a1 78       	lsl	r8,0x1
80005448:	12 08       	add	r8,r9
8000544a:	a1 78       	lsl	r8,0x1
8000544c:	f4 08 01 09 	sub	r9,r10,r8
80005450:	58 59       	cp.w	r9,5
80005452:	c0 b1       	brne	80005468 <st7529_put_5x7_text+0x320>
            st7529_write_data(0x00);
80005454:	30 0c       	mov	r12,0
80005456:	f0 1f 00 3a 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
8000545a:	30 0c       	mov	r12,0
8000545c:	f0 1f 00 38 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80005460:	30 0c       	mov	r12,0
80005462:	f0 1f 00 37 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
80005466:	c4 18       	rjmp	800054e8 <st7529_put_5x7_text+0x3a0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80005468:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000546c:	e0 68 aa ab 	mov	r8,43691
80005470:	ea 18 aa aa 	orh	r8,0xaaaa
80005474:	f2 08 06 48 	mulu.d	r8,r9,r8
80005478:	f2 08 16 02 	lsr	r8,r9,0x2
8000547c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80005480:	f2 08 00 08 	add	r8,r9,r8
80005484:	11 88       	ld.ub	r8,r8[0x0]
80005486:	10 99       	mov	r9,r8
80005488:	12 98       	mov	r8,r9
8000548a:	a3 68       	lsl	r8,0x2
8000548c:	12 08       	add	r8,r9
8000548e:	10 9b       	mov	r11,r8
80005490:	ee fa ff f0 	ld.w	r10,r7[-16]
80005494:	e0 68 aa ab 	mov	r8,43691
80005498:	ea 18 aa aa 	orh	r8,0xaaaa
8000549c:	f4 08 06 48 	mulu.d	r8,r10,r8
800054a0:	a3 89       	lsr	r9,0x2
800054a2:	12 98       	mov	r8,r9
800054a4:	a1 78       	lsl	r8,0x1
800054a6:	12 08       	add	r8,r9
800054a8:	a1 78       	lsl	r8,0x1
800054aa:	f4 08 01 09 	sub	r9,r10,r8
800054ae:	f6 09 00 08 	add	r8,r11,r9
800054b2:	f0 c8 00 a0 	sub	r8,r8,160
800054b6:	4a 39       	lddpc	r9,80005540 <st7529_put_5x7_text+0x3f8>
800054b8:	f2 08 07 08 	ld.ub	r8,r9[r8]
800054bc:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<0))
800054c0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800054c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800054c8:	5c 58       	castu.b	r8
800054ca:	c0 60       	breq	800054d6 <st7529_put_5x7_text+0x38e>
                st7529_write_data(0xFF);
800054cc:	e0 6c 00 ff 	mov	r12,255
800054d0:	f0 1f 00 1b 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
800054d4:	c0 48       	rjmp	800054dc <st7529_put_5x7_text+0x394>
            else
                st7529_write_data(0x00);
800054d6:	30 0c       	mov	r12,0
800054d8:	f0 1f 00 19 	mcall	8000553c <st7529_put_5x7_text+0x3f4>

            st7529_write_data(0x00);
800054dc:	30 0c       	mov	r12,0
800054de:	f0 1f 00 18 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
800054e2:	30 0c       	mov	r12,0
800054e4:	f0 1f 00 16 	mcall	8000553c <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
800054e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800054ec:	2f f8       	sub	r8,-1
800054ee:	ef 48 ff f0 	st.w	r7[-16],r8
800054f2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800054f6:	12 98       	mov	r8,r9
800054f8:	a1 78       	lsl	r8,0x1
800054fa:	12 08       	add	r8,r9
800054fc:	a1 78       	lsl	r8,0x1
800054fe:	10 99       	mov	r9,r8
80005500:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005504:	10 39       	cp.w	r9,r8
80005506:	fe 9b ff 96 	brhi	80005432 <st7529_put_5x7_text+0x2ea>
8000550a:	30 18       	mov	r8,1
8000550c:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80005510:	fc 1a 40 00 	movh	r10,0x4000
80005514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005518:	a5 98       	lsr	r8,0x5
8000551a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000551e:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80005522:	30 1b       	mov	r11,1
80005524:	f6 09 09 49 	lsl	r9,r11,r9
80005528:	a9 68       	lsl	r8,0x8
8000552a:	f4 08 00 08 	add	r8,r10,r8
8000552e:	2a c8       	sub	r8,-84
80005530:	91 09       	st.w	r8[0x0],r9
            st7529_write_data(0x00);
        }
    }

    st7529_CS_SET();
}
80005532:	2f 6d       	sub	sp,-40
80005534:	e3 cd 80 80 	ldm	sp++,r7,pc
80005538:	80 00       	ld.sh	r0,r0[0x0]
8000553a:	4f f8       	lddpc	r8,80005734 <pll_config_init+0x7c>
8000553c:	80 00       	ld.sh	r0,r0[0x0]
8000553e:	50 c8       	stdsp	sp[0x30],r8
80005540:	80 00       	ld.sh	r0,r0[0x0]
80005542:	cd 30       	breq	800054e8 <st7529_put_5x7_text+0x3a0>
80005544:	54 69       	stdsp	sp[0x118],r9
80005546:	6d 65       	ld.w	r5,r6[0x58]
80005548:	3a 20       	mov	r0,-94
8000554a:	25 64       	sub	r4,86
8000554c:	3a 25       	mov	r5,-94
8000554e:	64 3a       	ld.w	r10,r2[0xc]
80005550:	25 66       	sub	r6,86
80005552:	00 00       	add	r0,r0
80005554:	4e 75       	lddpc	r5,800056f0 <pll_config_init+0x38>
80005556:	6d 20       	ld.w	r0,r6[0x48]
80005558:	53 61       	stdsp	sp[0xd8],r1
8000555a:	74 73       	ld.w	r3,r10[0x1c]
8000555c:	3a 20       	mov	r0,-94
8000555e:	25 64       	sub	r4,86
80005560:	00 00       	add	r0,r0
	...

80005564 <osc_enable>:
extern void osc_priv_disable_rc32k(void);
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);

static inline void osc_enable(uint8_t id)
{
80005564:	eb cd 40 80 	pushm	r7,lr
80005568:	1a 97       	mov	r7,sp
8000556a:	20 1d       	sub	sp,4
8000556c:	18 98       	mov	r8,r12
8000556e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80005572:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80005576:	58 28       	cp.w	r8,2
80005578:	c0 80       	breq	80005588 <osc_enable+0x24>
8000557a:	58 38       	cp.w	r8,3
8000557c:	c0 90       	breq	8000558e <osc_enable+0x2a>
8000557e:	58 18       	cp.w	r8,1
80005580:	c0 91       	brne	80005592 <osc_enable+0x2e>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
80005582:	f0 1f 00 06 	mcall	80005598 <osc_enable+0x34>
		break;
80005586:	c0 68       	rjmp	80005592 <osc_enable+0x2e>
#endif

	case OSC_ID_RC32K:
		osc_priv_enable_rc32k();
80005588:	f0 1f 00 05 	mcall	8000559c <osc_enable+0x38>
		break;
8000558c:	c0 38       	rjmp	80005592 <osc_enable+0x2e>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8000558e:	f0 1f 00 05 	mcall	800055a0 <osc_enable+0x3c>

	default:
		/* unhandled_case(id); */
		break;
	}
}
80005592:	2f fd       	sub	sp,-4
80005594:	e3 cd 80 80 	ldm	sp++,r7,pc
80005598:	80 00       	ld.sh	r0,r0[0x0]
8000559a:	3f 18       	mov	r8,-15
8000559c:	80 00       	ld.sh	r0,r0[0x0]
8000559e:	3f 58       	mov	r8,-11
800055a0:	80 00       	ld.sh	r0,r0[0x0]
800055a2:	3f 98       	mov	r8,-7

800055a4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
800055a4:	eb cd 40 80 	pushm	r7,lr
800055a8:	1a 97       	mov	r7,sp
800055aa:	20 1d       	sub	sp,4
800055ac:	18 98       	mov	r8,r12
800055ae:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800055b2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800055b6:	58 28       	cp.w	r8,2
800055b8:	c1 30       	breq	800055de <osc_is_ready+0x3a>
800055ba:	e0 89 00 05 	brgt	800055c4 <osc_is_ready+0x20>
800055be:	58 18       	cp.w	r8,1
800055c0:	c0 70       	breq	800055ce <osc_is_ready+0x2a>
800055c2:	c2 08       	rjmp	80005602 <osc_is_ready+0x5e>
800055c4:	58 38       	cp.w	r8,3
800055c6:	c1 40       	breq	800055ee <osc_is_ready+0x4a>
800055c8:	58 48       	cp.w	r8,4
800055ca:	c1 a0       	breq	800055fe <osc_is_ready+0x5a>
800055cc:	c1 b8       	rjmp	80005602 <osc_is_ready+0x5e>
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
#if (UC3L3_L4 || UC3L0128 || UC3L0256)
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_PCLKSR_OSC32RDY));
800055ce:	fe 78 18 00 	mov	r8,-59392
800055d2:	70 58       	ld.w	r8,r8[0x14]
800055d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800055d8:	5f 18       	srne	r8
800055da:	5c 58       	castu.b	r8
800055dc:	c1 48       	rjmp	80005604 <osc_is_ready+0x60>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
#endif
#endif

	case OSC_ID_RC32K:
		return !!(AVR32_SCIF.rc32kcr & (1 << AVR32_SCIF_RC32KCR_EN));
800055de:	fe 78 18 00 	mov	r8,-59392
800055e2:	71 b8       	ld.w	r8,r8[0x6c]
800055e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800055e8:	5f 18       	srne	r8
800055ea:	5c 58       	castu.b	r8
800055ec:	c0 c8       	rjmp	80005604 <osc_is_ready+0x60>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
800055ee:	fe 78 18 00 	mov	r8,-59392
800055f2:	71 68       	ld.w	r8,r8[0x58]
800055f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800055f8:	5f 18       	srne	r8
800055fa:	5c 58       	castu.b	r8
800055fc:	c0 48       	rjmp	80005604 <osc_is_ready+0x60>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
800055fe:	30 18       	mov	r8,1
80005600:	c0 28       	rjmp	80005604 <osc_is_ready+0x60>

	default:
		/* unhandled_case(id); */
		return false;
80005602:	30 08       	mov	r8,0
	}
}
80005604:	10 9c       	mov	r12,r8
80005606:	2f fd       	sub	sp,-4
80005608:	e3 cd 80 80 	ldm	sp++,r7,pc

8000560c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000560c:	eb cd 40 80 	pushm	r7,lr
80005610:	1a 97       	mov	r7,sp
80005612:	20 1d       	sub	sp,4
80005614:	18 98       	mov	r8,r12
80005616:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000561a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000561e:	58 28       	cp.w	r8,2
80005620:	c0 e0       	breq	8000563c <osc_get_rate+0x30>
80005622:	e0 89 00 05 	brgt	8000562c <osc_get_rate+0x20>
80005626:	58 18       	cp.w	r8,1
80005628:	c0 70       	breq	80005636 <osc_get_rate+0x2a>
8000562a:	c1 48       	rjmp	80005652 <osc_get_rate+0x46>
8000562c:	58 38       	cp.w	r8,3
8000562e:	c0 a0       	breq	80005642 <osc_get_rate+0x36>
80005630:	58 48       	cp.w	r8,4
80005632:	c0 d0       	breq	8000564c <osc_get_rate+0x40>
80005634:	c0 f8       	rjmp	80005652 <osc_get_rate+0x46>
		return BOARD_OSC0_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80005636:	e0 68 80 00 	mov	r8,32768
8000563a:	c0 d8       	rjmp	80005654 <osc_get_rate+0x48>
#endif

	case OSC_ID_RC32K:
		return OSC_RC32K_NOMINAL_HZ;
8000563c:	e0 68 7d 00 	mov	r8,32000
80005640:	c0 a8       	rjmp	80005654 <osc_get_rate+0x48>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80005642:	e0 68 0e 00 	mov	r8,3584
80005646:	ea 18 07 27 	orh	r8,0x727
8000564a:	c0 58       	rjmp	80005654 <osc_get_rate+0x48>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8000564c:	e0 78 c1 38 	mov	r8,115000
80005650:	c0 28       	rjmp	80005654 <osc_get_rate+0x48>

	default:
		/* unhandled_case(id); */
		return 0;
80005652:	30 08       	mov	r8,0
	}
}
80005654:	10 9c       	mov	r12,r8
80005656:	2f fd       	sub	sp,-4
80005658:	e3 cd 80 80 	ldm	sp++,r7,pc

8000565c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000565c:	eb cd 40 80 	pushm	r7,lr
80005660:	1a 97       	mov	r7,sp
80005662:	20 1d       	sub	sp,4
80005664:	18 98       	mov	r8,r12
80005666:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000566a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000566e:	10 9c       	mov	r12,r8
80005670:	f0 1f 00 05 	mcall	80005684 <osc_wait_ready+0x28>
80005674:	18 98       	mov	r8,r12
80005676:	ec 18 00 01 	eorl	r8,0x1
8000567a:	5c 58       	castu.b	r8
8000567c:	cf 71       	brne	8000566a <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000567e:	2f fd       	sub	sp,-4
80005680:	e3 cd 80 80 	ldm	sp++,r7,pc
80005684:	80 00       	ld.sh	r0,r0[0x0]
80005686:	55 a4       	stdsp	sp[0x168],r4

80005688 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
80005688:	eb cd 40 80 	pushm	r7,lr
8000568c:	1a 97       	mov	r7,sp
8000568e:	20 2d       	sub	sp,8
80005690:	ef 4c ff fc 	st.w	r7[-4],r12
80005694:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80005698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000569c:	70 09       	ld.w	r9,r8[0x0]
8000569e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056a2:	2f d8       	sub	r8,-3
800056a4:	30 1a       	mov	r10,1
800056a6:	f4 08 09 48 	lsl	r8,r10,r8
800056aa:	10 49       	or	r9,r8
800056ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056b0:	91 09       	st.w	r8[0x0],r9
}
800056b2:	2f ed       	sub	sp,-8
800056b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800056b8 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
800056b8:	eb cd 40 80 	pushm	r7,lr
800056bc:	1a 97       	mov	r7,sp
800056be:	20 5d       	sub	sp,20
800056c0:	ef 4c ff f8 	st.w	r7[-8],r12
800056c4:	ef 4b ff f4 	st.w	r7[-12],r11
800056c8:	ef 4a ff f0 	st.w	r7[-16],r10
800056cc:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
800056d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800056d4:	5c 58       	castu.b	r8
800056d6:	10 9c       	mov	r12,r8
800056d8:	f0 1f 00 2e 	mcall	80005790 <pll_config_init+0xd8>
800056dc:	18 99       	mov	r9,r12
800056de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056e2:	f2 08 02 48 	mul	r8,r9,r8
800056e6:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
800056ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056ee:	ee f9 ff f0 	ld.w	r9,r7[-16]
800056f2:	f0 09 0d 08 	divu	r8,r8,r9
800056f6:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
800056fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056fe:	30 09       	mov	r9,0
80005700:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
80005702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005706:	e0 69 b3 ff 	mov	r9,46079
8000570a:	ea 19 04 c4 	orh	r9,0x4c4
8000570e:	12 38       	cp.w	r8,r9
80005710:	e0 8b 00 16 	brhi	8000573c <pll_config_init+0x84>
80005714:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005718:	58 88       	cp.w	r8,8
8000571a:	e0 8b 00 11 	brhi	8000573c <pll_config_init+0x84>
		mul *= 2;
8000571e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005722:	a1 78       	lsl	r8,0x1
80005724:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
80005728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000572c:	a1 78       	lsl	r8,0x1
8000572e:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
80005732:	30 1b       	mov	r11,1
80005734:	ee fc ff f8 	ld.w	r12,r7[-8]
80005738:	f0 1f 00 17 	mcall	80005794 <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000573c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005740:	e0 69 fe 7f 	mov	r9,65151
80005744:	ea 19 0a 21 	orh	r9,0xa21
80005748:	12 38       	cp.w	r8,r9
8000574a:	e0 8b 00 07 	brhi	80005758 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000574e:	30 0b       	mov	r11,0
80005750:	ee fc ff f8 	ld.w	r12,r7[-8]
80005754:	f0 1f 00 10 	mcall	80005794 <pll_config_init+0xdc>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
80005758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000575c:	70 09       	ld.w	r9,r8[0x0]
8000575e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005762:	20 18       	sub	r8,1
80005764:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
80005768:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000576c:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8000576e:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
80005770:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005774:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
80005776:	f5 e8 10 08 	or	r8,r10,r8
8000577a:	f3 e8 10 08 	or	r8,r9,r8
8000577e:	10 99       	mov	r9,r8
80005780:	ea 19 3f 00 	orh	r9,0x3f00
80005784:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005788:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8000578a:	2f bd       	sub	sp,-20
8000578c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005790:	80 00       	ld.sh	r0,r0[0x0]
80005792:	56 0c       	stdsp	sp[0x180],r12
80005794:	80 00       	ld.sh	r0,r0[0x0]
80005796:	56 88       	stdsp	sp[0x1a0],r8

80005798 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
80005798:	eb cd 40 80 	pushm	r7,lr
8000579c:	1a 97       	mov	r7,sp
8000579e:	20 1d       	sub	sp,4
800057a0:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);
#if (UC3L3_L4 || UC3L0128 || UC3L0256)
	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PCLKSR_PLLLOCK0 + pll_id)));
800057a4:	fe 78 18 00 	mov	r8,-59392
800057a8:	70 59       	ld.w	r9,r8[0x14]
800057aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057ae:	2e f8       	sub	r8,-17
800057b0:	30 1a       	mov	r10,1
800057b2:	f4 08 09 48 	lsl	r8,r10,r8
800057b6:	f3 e8 00 08 	and	r8,r9,r8
800057ba:	5f 18       	srne	r8
800057bc:	5c 58       	castu.b	r8
#else
	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLLLOCK0 + pll_id)));
#endif
}
800057be:	10 9c       	mov	r12,r8
800057c0:	2f fd       	sub	sp,-4
800057c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800057c6:	d7 03       	nop

800057c8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
800057c8:	eb cd 40 80 	pushm	r7,lr
800057cc:	1a 97       	mov	r7,sp
800057ce:	20 1d       	sub	sp,4
800057d0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
800057d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057d8:	58 08       	cp.w	r8,0
800057da:	c0 f1       	brne	800057f8 <pll_enable_source+0x30>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
800057dc:	30 0c       	mov	r12,0
800057de:	f0 1f 00 09 	mcall	80005800 <pll_enable_source+0x38>
800057e2:	18 98       	mov	r8,r12
800057e4:	ec 18 00 01 	eorl	r8,0x1
800057e8:	5c 58       	castu.b	r8
800057ea:	c0 70       	breq	800057f8 <pll_enable_source+0x30>
			osc_enable(OSC_ID_OSC0);
800057ec:	30 0c       	mov	r12,0
800057ee:	f0 1f 00 06 	mcall	80005804 <pll_enable_source+0x3c>
			osc_wait_ready(OSC_ID_OSC0);
800057f2:	30 0c       	mov	r12,0
800057f4:	f0 1f 00 05 	mcall	80005808 <pll_enable_source+0x40>

	default:
		Assert(false);
		break;
	}
}
800057f8:	2f fd       	sub	sp,-4
800057fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800057fe:	00 00       	add	r0,r0
80005800:	80 00       	ld.sh	r0,r0[0x0]
80005802:	55 a4       	stdsp	sp[0x168],r4
80005804:	80 00       	ld.sh	r0,r0[0x0]
80005806:	55 64       	stdsp	sp[0x158],r4
80005808:	80 00       	ld.sh	r0,r0[0x0]
8000580a:	56 5c       	stdsp	sp[0x194],r12

8000580c <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000580c:	eb cd 40 80 	pushm	r7,lr
80005810:	1a 97       	mov	r7,sp
80005812:	20 2d       	sub	sp,8
80005814:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80005818:	ee fc ff f8 	ld.w	r12,r7[-8]
8000581c:	f0 1f 00 15 	mcall	80005870 <pll_enable_config_defaults+0x64>
80005820:	18 98       	mov	r8,r12
80005822:	58 08       	cp.w	r8,0
80005824:	c2 21       	brne	80005868 <pll_enable_config_defaults+0x5c>
		return; // Pll already running
	}
	switch (pll_id) {
80005826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000582a:	58 08       	cp.w	r8,0
8000582c:	c0 d1       	brne	80005846 <pll_enable_config_defaults+0x3a>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000582e:	30 0c       	mov	r12,0
80005830:	f0 1f 00 11 	mcall	80005874 <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
80005834:	ee c8 00 04 	sub	r8,r7,4
80005838:	e0 69 05 b8 	mov	r9,1464
8000583c:	30 1a       	mov	r10,1
8000583e:	30 0b       	mov	r11,0
80005840:	10 9c       	mov	r12,r8
80005842:	f0 1f 00 0e 	mcall	80005878 <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
80005846:	ee c8 00 04 	sub	r8,r7,4
8000584a:	ee fb ff f8 	ld.w	r11,r7[-8]
8000584e:	10 9c       	mov	r12,r8
80005850:	f0 1f 00 0b 	mcall	8000587c <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
80005854:	ee fc ff f8 	ld.w	r12,r7[-8]
80005858:	f0 1f 00 06 	mcall	80005870 <pll_enable_config_defaults+0x64>
8000585c:	18 98       	mov	r8,r12
8000585e:	ec 18 00 01 	eorl	r8,0x1
80005862:	5c 58       	castu.b	r8
80005864:	cf 81       	brne	80005854 <pll_enable_config_defaults+0x48>
80005866:	c0 28       	rjmp	8000586a <pll_enable_config_defaults+0x5e>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
80005868:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000586a:	2f ed       	sub	sp,-8
8000586c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005870:	80 00       	ld.sh	r0,r0[0x0]
80005872:	57 98       	stdsp	sp[0x1e4],r8
80005874:	80 00       	ld.sh	r0,r0[0x0]
80005876:	57 c8       	stdsp	sp[0x1f0],r8
80005878:	80 00       	ld.sh	r0,r0[0x0]
8000587a:	56 b8       	stdsp	sp[0x1ac],r8
8000587c:	80 00       	ld.sh	r0,r0[0x0]
8000587e:	40 40       	lddsp	r0,sp[0x10]

80005880 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80005880:	eb cd 40 80 	pushm	r7,lr
80005884:	1a 97       	mov	r7,sp
80005886:	20 2d       	sub	sp,8
80005888:	ef 4c ff fc 	st.w	r7[-4],r12
8000588c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80005890:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005894:	30 09       	mov	r9,0
80005896:	91 09       	st.w	r8[0x0],r9
}
80005898:	2f ed       	sub	sp,-8
8000589a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000589e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000589e:	eb cd 40 80 	pushm	r7,lr
800058a2:	1a 97       	mov	r7,sp
800058a4:	20 2d       	sub	sp,8
800058a6:	ef 4c ff fc 	st.w	r7[-4],r12
800058aa:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800058ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b2:	70 08       	ld.w	r8,r8[0x0]
800058b4:	10 99       	mov	r9,r8
800058b6:	e0 19 e0 ff 	andl	r9,0xe0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
800058ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058be:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800058c0:	10 49       	or	r9,r8
800058c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058c6:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
800058c8:	2f ed       	sub	sp,-8
800058ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800058ce <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
800058ce:	eb cd 40 80 	pushm	r7,lr
800058d2:	1a 97       	mov	r7,sp
800058d4:	20 2d       	sub	sp,8
800058d6:	ef 4c ff fc 	st.w	r7[-4],r12
800058da:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
800058de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058e2:	70 08       	ld.w	r8,r8[0x0]
800058e4:	10 99       	mov	r9,r8
800058e6:	e2 19 ff fd 	andl	r9,0xfffd,COH
800058ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058ee:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
800058f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058f4:	58 18       	cp.w	r8,1
800058f6:	e0 88 00 17 	brls	80005924 <genclk_config_set_divider+0x56>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
800058fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058fe:	70 08       	ld.w	r8,r8[0x0]
80005900:	10 99       	mov	r9,r8
80005902:	a1 b9       	sbr	r9,0x1
80005904:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005908:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8000590a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000590e:	70 09       	ld.w	r9,r8[0x0]
80005910:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005914:	2f f8       	sub	r8,-1
80005916:	a1 98       	lsr	r8,0x1
80005918:	20 18       	sub	r8,1
8000591a:	b1 68       	lsl	r8,0x10
8000591c:	10 49       	or	r9,r8
8000591e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005922:	91 09       	st.w	r8[0x0],r9
	}
}
80005924:	2f ed       	sub	sp,-8
80005926:	e3 cd 80 80 	ldm	sp++,r7,pc

8000592a <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000592a:	eb cd 40 80 	pushm	r7,lr
8000592e:	1a 97       	mov	r7,sp
80005930:	20 2d       	sub	sp,8
80005932:	ef 4c ff fc 	st.w	r7[-4],r12
80005936:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8000593a:	fe 78 18 00 	mov	r8,-59392
8000593e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005942:	ee fa ff fc 	ld.w	r10,r7[-4]
80005946:	74 0a       	ld.w	r10,r10[0x0]
80005948:	a1 aa       	sbr	r10,0x0
8000594a:	2e 49       	sub	r9,-28
8000594c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80005950:	2f ed       	sub	sp,-8
80005952:	e3 cd 80 80 	ldm	sp++,r7,pc
80005956:	d7 03       	nop

80005958 <genclk_enable_source>:
{
	AVR32_SCIF.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
80005958:	eb cd 40 80 	pushm	r7,lr
8000595c:	1a 97       	mov	r7,sp
8000595e:	20 1d       	sub	sp,4
80005960:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
80005964:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005968:	58 c8       	cp.w	r8,12
8000596a:	e0 8b 00 3b 	brhi	800059e0 <genclk_enable_source+0x88>
8000596e:	49 f9       	lddpc	r9,800059e8 <genclk_enable_source+0x90>
80005970:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
		break;

#ifdef BOARD_OSC32_HZ
	case GENCLK_SRC_OSC32K:
	case GENCLK_SRC_CLK_1K: // The 1K linked on OSC32K
		if (!osc_is_ready(OSC_ID_OSC32)) {
80005974:	30 1c       	mov	r12,1
80005976:	f0 1f 00 1e 	mcall	800059ec <genclk_enable_source+0x94>
8000597a:	18 98       	mov	r8,r12
8000597c:	ec 18 00 01 	eorl	r8,0x1
80005980:	5c 58       	castu.b	r8
80005982:	c2 a0       	breq	800059d6 <genclk_enable_source+0x7e>
			osc_enable(OSC_ID_OSC32);
80005984:	30 1c       	mov	r12,1
80005986:	f0 1f 00 1b 	mcall	800059f0 <genclk_enable_source+0x98>
			osc_wait_ready(OSC_ID_OSC32);
8000598a:	30 1c       	mov	r12,1
8000598c:	f0 1f 00 1a 	mcall	800059f4 <genclk_enable_source+0x9c>
		}
		break;
80005990:	c2 88       	rjmp	800059e0 <genclk_enable_source+0x88>
#endif

	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
80005992:	30 3c       	mov	r12,3
80005994:	f0 1f 00 16 	mcall	800059ec <genclk_enable_source+0x94>
80005998:	18 98       	mov	r8,r12
8000599a:	ec 18 00 01 	eorl	r8,0x1
8000599e:	5c 58       	castu.b	r8
800059a0:	c1 d0       	breq	800059da <genclk_enable_source+0x82>
			osc_enable(OSC_ID_RC120M);
800059a2:	30 3c       	mov	r12,3
800059a4:	f0 1f 00 13 	mcall	800059f0 <genclk_enable_source+0x98>
			osc_wait_ready(OSC_ID_RC120M);
800059a8:	30 3c       	mov	r12,3
800059aa:	f0 1f 00 13 	mcall	800059f4 <genclk_enable_source+0x9c>
		}
		break;
800059ae:	c1 98       	rjmp	800059e0 <genclk_enable_source+0x88>

	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
800059b0:	30 2c       	mov	r12,2
800059b2:	f0 1f 00 0f 	mcall	800059ec <genclk_enable_source+0x94>
800059b6:	18 98       	mov	r8,r12
800059b8:	ec 18 00 01 	eorl	r8,0x1
800059bc:	5c 58       	castu.b	r8
800059be:	c1 00       	breq	800059de <genclk_enable_source+0x86>
			osc_enable(OSC_ID_RC32K);
800059c0:	30 2c       	mov	r12,2
800059c2:	f0 1f 00 0c 	mcall	800059f0 <genclk_enable_source+0x98>
			osc_wait_ready(OSC_ID_RC32K);
800059c6:	30 2c       	mov	r12,2
800059c8:	f0 1f 00 0b 	mcall	800059f4 <genclk_enable_source+0x9c>
		}
		break;
800059cc:	c0 a8       	rjmp	800059e0 <genclk_enable_source+0x88>
#endif

#if ( UC3L0128 || UC3L0256 || UC3L3_L4 )
# ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
800059ce:	30 0c       	mov	r12,0
800059d0:	f0 1f 00 0a 	mcall	800059f8 <genclk_enable_source+0xa0>
800059d4:	c0 68       	rjmp	800059e0 <genclk_enable_source+0x88>
	case GENCLK_SRC_CLK_1K: // The 1K linked on OSC32K
		if (!osc_is_ready(OSC_ID_OSC32)) {
			osc_enable(OSC_ID_OSC32);
			osc_wait_ready(OSC_ID_OSC32);
		}
		break;
800059d6:	d7 03       	nop
800059d8:	c0 48       	rjmp	800059e0 <genclk_enable_source+0x88>
	case GENCLK_SRC_RC120M:
		if (!osc_is_ready(OSC_ID_RC120M)) {
			osc_enable(OSC_ID_RC120M);
			osc_wait_ready(OSC_ID_RC120M);
		}
		break;
800059da:	d7 03       	nop
800059dc:	c0 28       	rjmp	800059e0 <genclk_enable_source+0x88>
	case GENCLK_SRC_RC32K:
		if (!osc_is_ready(OSC_ID_RC32K)) {
			osc_enable(OSC_ID_RC32K);
			osc_wait_ready(OSC_ID_RC32K);
		}
		break;
800059de:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
800059e0:	2f fd       	sub	sp,-4
800059e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800059e6:	00 00       	add	r0,r0
800059e8:	80 00       	ld.sh	r0,r0[0x0]
800059ea:	cf 10       	breq	800059cc <genclk_enable_source+0x74>
800059ec:	80 00       	ld.sh	r0,r0[0x0]
800059ee:	55 a4       	stdsp	sp[0x168],r4
800059f0:	80 00       	ld.sh	r0,r0[0x0]
800059f2:	55 64       	stdsp	sp[0x158],r4
800059f4:	80 00       	ld.sh	r0,r0[0x0]
800059f6:	56 5c       	stdsp	sp[0x194],r12
800059f8:	80 00       	ld.sh	r0,r0[0x0]
800059fa:	58 0c       	cp.w	r12,0

800059fc <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
800059fc:	eb cd 40 80 	pushm	r7,lr
80005a00:	1a 97       	mov	r7,sp
80005a02:	20 4d       	sub	sp,16
80005a04:	ef 4c ff f8 	st.w	r7[-8],r12
80005a08:	ef 4b ff f4 	st.w	r7[-12],r11
80005a0c:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
80005a10:	ee c8 00 04 	sub	r8,r7,4
80005a14:	ee fb ff f8 	ld.w	r11,r7[-8]
80005a18:	10 9c       	mov	r12,r8
80005a1a:	f0 1f 00 10 	mcall	80005a58 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
80005a1e:	ee fc ff f4 	ld.w	r12,r7[-12]
80005a22:	f0 1f 00 0f 	mcall	80005a5c <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
80005a26:	ee c8 00 04 	sub	r8,r7,4
80005a2a:	ee fb ff f4 	ld.w	r11,r7[-12]
80005a2e:	10 9c       	mov	r12,r8
80005a30:	f0 1f 00 0c 	mcall	80005a60 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
80005a34:	ee c8 00 04 	sub	r8,r7,4
80005a38:	ee fb ff f0 	ld.w	r11,r7[-16]
80005a3c:	10 9c       	mov	r12,r8
80005a3e:	f0 1f 00 0a 	mcall	80005a64 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
80005a42:	ee c8 00 04 	sub	r8,r7,4
80005a46:	ee fb ff f8 	ld.w	r11,r7[-8]
80005a4a:	10 9c       	mov	r12,r8
80005a4c:	f0 1f 00 07 	mcall	80005a68 <genclk_enable_config+0x6c>
}
80005a50:	2f cd       	sub	sp,-16
80005a52:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a56:	00 00       	add	r0,r0
80005a58:	80 00       	ld.sh	r0,r0[0x0]
80005a5a:	58 80       	cp.w	r0,8
80005a5c:	80 00       	ld.sh	r0,r0[0x0]
80005a5e:	59 58       	cp.w	r8,21
80005a60:	80 00       	ld.sh	r0,r0[0x0]
80005a62:	58 9e       	cp.w	lr,9
80005a64:	80 00       	ld.sh	r0,r0[0x0]
80005a66:	58 ce       	cp.w	lr,12
80005a68:	80 00       	ld.sh	r0,r0[0x0]
80005a6a:	59 2a       	cp.w	r10,18

80005a6c <usart_timeout_handler>:

volatile uint32_t tick_cnt = 0;
volatile uint32_t last_cnt = 0;

// GPS USART TIMEOUT INTERRUPT
ISR(usart_timeout_handler, AVR32_USART3_IRQ, 0){
80005a6c:	eb cd 40 80 	pushm	r7,lr
80005a70:	1a 97       	mov	r7,sp
	// Reset Timeout Flag
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
80005a72:	fe 78 3c 00 	mov	r8,-50176
80005a76:	fe 79 3c 00 	mov	r9,-50176
80005a7a:	72 09       	ld.w	r9,r9[0x0]
80005a7c:	ab b9       	sbr	r9,0xb
80005a7e:	91 09       	st.w	r8[0x0],r9
	
	usart_timeout_flag = 1;
80005a80:	49 28       	lddpc	r8,80005ac8 <usart_timeout_handler+0x5c>
80005a82:	30 19       	mov	r9,1
80005a84:	91 09       	st.w	r8[0x0],r9
	
	// Parse GPS Data
	uc530_parse_default(usart_rx_buffer,
80005a86:	49 2a       	lddpc	r10,80005acc <usart_timeout_handler+0x60>
80005a88:	e0 6b 02 58 	mov	r11,600
80005a8c:	49 1c       	lddpc	r12,80005ad0 <usart_timeout_handler+0x64>
80005a8e:	f0 1f 00 12 	mcall	80005ad4 <usart_timeout_handler+0x68>
						sizeof(usart_rx_buffer),
						&gps_data);
	
	// Reload DMA Address					
	pdca_load_channel(0,
80005a92:	e0 6a 02 58 	mov	r10,600
80005a96:	48 fb       	lddpc	r11,80005ad0 <usart_timeout_handler+0x64>
80005a98:	30 0c       	mov	r12,0
80005a9a:	f0 1f 00 10 	mcall	80005ad8 <usart_timeout_handler+0x6c>
					  (void *)usart_rx_buffer,
					  sizeof(usart_rx_buffer));
			
	// Deal With Tick Timer
	last_cnt = tick_cnt;
80005a9e:	49 08       	lddpc	r8,80005adc <usart_timeout_handler+0x70>
80005aa0:	70 09       	ld.w	r9,r8[0x0]
80005aa2:	49 08       	lddpc	r8,80005ae0 <usart_timeout_handler+0x74>
80005aa4:	91 09       	st.w	r8[0x0],r9
	tick_cnt = 0;
80005aa6:	48 e8       	lddpc	r8,80005adc <usart_timeout_handler+0x70>
80005aa8:	30 09       	mov	r9,0
80005aaa:	91 09       	st.w	r8[0x0],r9
	AVR32_TC0.channel[0].ccr = AVR32_TC_CCR0_SWTRG_MASK;	// Reset Counter
80005aac:	fe 78 58 00 	mov	r8,-43008
80005ab0:	30 49       	mov	r9,4
80005ab2:	91 09       	st.w	r8[0x0],r9
	AVR32_TC0.channel[0].sr;	// Reset any interrupt flags
80005ab4:	fe 78 58 00 	mov	r8,-43008
80005ab8:	70 88       	ld.w	r8,r8[0x20]
	AVR32_TC0.channel[0].ier = AVR32_TC_IER0_CPCS_MASK;	// Enable Compare Match Interrupt
80005aba:	fe 78 58 00 	mov	r8,-43008
80005abe:	31 09       	mov	r9,16
80005ac0:	91 99       	st.w	r8[0x24],r9
}
80005ac2:	e3 cd 40 80 	ldm	sp++,r7,lr
80005ac6:	d6 03       	rete
80005ac8:	00 00       	add	r0,r0
80005aca:	06 08       	add	r8,r3
80005acc:	00 00       	add	r0,r0
80005ace:	06 68       	and	r8,r3
80005ad0:	00 00       	add	r0,r0
80005ad2:	06 c4       	st.b	r3++,r4
80005ad4:	80 00       	ld.sh	r0,r0[0x0]
80005ad6:	42 70       	lddsp	r0,sp[0x9c]
80005ad8:	80 00       	ld.sh	r0,r0[0x0]
80005ada:	28 98       	sub	r8,-119
80005adc:	00 00       	add	r0,r0
80005ade:	06 10       	sub	r0,r3
80005ae0:	00 00       	add	r0,r0
80005ae2:	06 14       	sub	r4,r3

80005ae4 <sens_rx_complete_handler>:

ISR(sens_rx_complete_handler, AVR32_PDCA_IRQ_1, 0){
80005ae4:	eb cd 40 80 	pushm	r7,lr
80005ae8:	1a 97       	mov	r7,sp
	// Disable Interrupt By Writing To TCR
	AVR32_PDCA.channel[1].tcr = sizeof(sens_rx_buffer);
80005aea:	fe 78 00 00 	mov	r8,-65536
80005aee:	30 69       	mov	r9,6
80005af0:	f1 49 00 48 	st.w	r8[72],r9
	
	switch(sens_rx_state){
80005af4:	48 e8       	lddpc	r8,80005b2c <sens_rx_complete_handler+0x48>
80005af6:	70 08       	ld.w	r8,r8[0x0]
80005af8:	58 08       	cp.w	r8,0
80005afa:	c0 40       	breq	80005b02 <sens_rx_complete_handler+0x1e>
80005afc:	58 18       	cp.w	r8,1
80005afe:	c1 00       	breq	80005b1e <sens_rx_complete_handler+0x3a>
80005b00:	c1 28       	rjmp	80005b24 <sens_rx_complete_handler+0x40>
		case SENS_STATE_PRESSURE:
			// Start Next Calculation
			twim_write_dma(&AVR32_TWIM0, 2, 0x77, sens_tx_buffer, 2);
80005b02:	30 28       	mov	r8,2
80005b04:	48 b9       	lddpc	r9,80005b30 <sens_rx_complete_handler+0x4c>
80005b06:	37 7a       	mov	r10,119
80005b08:	30 2b       	mov	r11,2
80005b0a:	fe 7c 44 00 	mov	r12,-48128
80005b0e:	f0 1f 00 0a 	mcall	80005b34 <sens_rx_complete_handler+0x50>
		
			// Do stuff with Pressure Data
			
			// Initiate Mag Transfer
			sens_rx_state = SENS_STATE_MAG;
80005b12:	48 78       	lddpc	r8,80005b2c <sens_rx_complete_handler+0x48>
80005b14:	30 19       	mov	r9,1
80005b16:	91 09       	st.w	r8[0x0],r9
			sens_rx_start();
80005b18:	f0 1f 00 08 	mcall	80005b38 <sens_rx_complete_handler+0x54>
			break;
80005b1c:	c0 48       	rjmp	80005b24 <sens_rx_complete_handler+0x40>
			
		case SENS_STATE_MAG:
			// Do Stuff With Data
			
			sens_rx_state = SENS_STATE_PRESSURE;
80005b1e:	48 48       	lddpc	r8,80005b2c <sens_rx_complete_handler+0x48>
80005b20:	30 09       	mov	r9,0
80005b22:	91 09       	st.w	r8[0x0],r9
			break;
			
		default:
			break;			
	}
}
80005b24:	e3 cd 40 80 	ldm	sp++,r7,lr
80005b28:	d6 03       	rete
80005b2a:	00 00       	add	r0,r0
80005b2c:	00 00       	add	r0,r0
80005b2e:	06 0c       	add	r12,r3
80005b30:	00 00       	add	r0,r0
80005b32:	00 08       	add	r8,r0
80005b34:	80 00       	ld.sh	r0,r0[0x0]
80005b36:	5e 20       	reths	r0
80005b38:	80 00       	ld.sh	r0,r0[0x0]
80005b3a:	60 b4       	ld.w	r4,r0[0x2c]

80005b3c <tick_handler>:

ISR(tick_handler, AVR32_TC0_IRQ0, 0){
80005b3c:	eb cd 40 80 	pushm	r7,lr
80005b40:	1a 97       	mov	r7,sp
	// Clear Interrupt
	AVR32_TC0.channel[0].sr;
80005b42:	fe 78 58 00 	mov	r8,-43008
80005b46:	70 88       	ld.w	r8,r8[0x20]
	
	tick_cnt++;
80005b48:	48 98       	lddpc	r8,80005b6c <tick_handler+0x30>
80005b4a:	70 08       	ld.w	r8,r8[0x0]
80005b4c:	f0 c9 ff ff 	sub	r9,r8,-1
80005b50:	48 78       	lddpc	r8,80005b6c <tick_handler+0x30>
80005b52:	91 09       	st.w	r8[0x0],r9
	
	if(tick_cnt < TICK_RATE-1){
80005b54:	48 68       	lddpc	r8,80005b6c <tick_handler+0x30>
80005b56:	70 08       	ld.w	r8,r8[0x0]
80005b58:	59 28       	cp.w	r8,18
80005b5a:	e0 88 00 06 	brls	80005b66 <tick_handler+0x2a>
		// Do Regular Things
	}
	else
		// Disable Interrupt
		AVR32_TC0.channel[0].idr = AVR32_TC_IDR0_CPCS_MASK;
80005b5e:	fe 78 58 00 	mov	r8,-43008
80005b62:	31 09       	mov	r9,16
80005b64:	91 a9       	st.w	r8[0x28],r9
}
80005b66:	e3 cd 40 80 	ldm	sp++,r7,lr
80005b6a:	d6 03       	rete
80005b6c:	00 00       	add	r0,r0
80005b6e:	06 10       	sub	r0,r3

80005b70 <main>:

int main (void)
{
80005b70:	eb cd 40 80 	pushm	r7,lr
80005b74:	1a 97       	mov	r7,sp
80005b76:	20 dd       	sub	sp,52
	char text[50];
	
	board_init();
80005b78:	f0 1f 00 2f 	mcall	80005c34 <main+0xc4>
	setup_clocks();
80005b7c:	f0 1f 00 2f 	mcall	80005c38 <main+0xc8>
 * \note This function must have been called at least once before using other
 *       functions in this interface.
 */
__always_inline static void gpio_local_init(void)
{
	Set_system_register(AVR32_CPUCR,
80005b80:	e1 b8 00 03 	mfsr	r8,0xc
80005b84:	b1 a8       	sbr	r8,0x10
80005b86:	e3 b8 00 03 	mtsr	0xc,r8
	
	gpio_local_init();
	
	st7529_init();
80005b8a:	f0 1f 00 2d 	mcall	80005c3c <main+0xcc>
	setup_gps_uart();
80005b8e:	f0 1f 00 2d 	mcall	80005c40 <main+0xd0>
	setup_uart_dma();
80005b92:	f0 1f 00 2d 	mcall	80005c44 <main+0xd4>
	setup_sens_twi();
80005b96:	f0 1f 00 2d 	mcall	80005c48 <main+0xd8>
	
	setup_magnetometer();
80005b9a:	f0 1f 00 2d 	mcall	80005c4c <main+0xdc>
	setup_barometer();
80005b9e:	f0 1f 00 2d 	mcall	80005c50 <main+0xe0>
	setup_buzzer();
80005ba2:	f0 1f 00 2d 	mcall	80005c54 <main+0xe4>
	
	setup_tick();
80005ba6:	f0 1f 00 2d 	mcall	80005c58 <main+0xe8>
	
	setup_interrupts();
80005baa:	f0 1f 00 2d 	mcall	80005c5c <main+0xec>
80005bae:	c0 28       	rjmp	80005bb2 <main+0x42>
			
			st7529_put_5x7_text(0,9,text,12);
			
			sens_rx_start();
		}
	}
80005bb0:	d7 03       	nop
	setup_tick();
	
	setup_interrupts();
	
	while(1){
		if(usart_timeout_flag){
80005bb2:	4a c8       	lddpc	r8,80005c60 <main+0xf0>
80005bb4:	70 08       	ld.w	r8,r8[0x0]
80005bb6:	58 08       	cp.w	r8,0
80005bb8:	cf c0       	breq	80005bb0 <main+0x40>
			usart_timeout_flag = 0;
80005bba:	4a a8       	lddpc	r8,80005c60 <main+0xf0>
80005bbc:	30 09       	mov	r9,0
80005bbe:	91 09       	st.w	r8[0x0],r9
			
			sprintf(text,"Time: %d:%d:%f",
					gps_data.hour,gps_data.minute,gps_data.second);
80005bc0:	4a 98       	lddpc	r8,80005c64 <main+0xf4>
80005bc2:	70 28       	ld.w	r8,r8[0x8]
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80005bc4:	10 9c       	mov	r12,r8
80005bc6:	f0 1f 00 29 	mcall	80005c68 <main+0xf8>
80005bca:	14 98       	mov	r8,r10
80005bcc:	16 99       	mov	r9,r11
					gps_data.hour,gps_data.minute,gps_data.second);
80005bce:	4a 6a       	lddpc	r10,80005c64 <main+0xf4>
80005bd0:	15 ca       	ld.ub	r10,r10[0x4]
80005bd2:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80005bd4:	14 9c       	mov	r12,r10
					gps_data.hour,gps_data.minute,gps_data.second);
80005bd6:	4a 4a       	lddpc	r10,80005c64 <main+0xf4>
80005bd8:	15 ba       	ld.ub	r10,r10[0x3]
80005bda:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80005bdc:	14 9b       	mov	r11,r10
80005bde:	ee ca 00 34 	sub	r10,r7,52
80005be2:	bb 29       	st.d	--sp,r8
80005be4:	1a dc       	st.w	--sp,r12
80005be6:	1a db       	st.w	--sp,r11
80005be8:	4a 1b       	lddpc	r11,80005c6c <main+0xfc>
80005bea:	14 9c       	mov	r12,r10
80005bec:	f0 1f 00 21 	mcall	80005c70 <main+0x100>
80005bf0:	2f cd       	sub	sp,-16
					gps_data.hour,gps_data.minute,gps_data.second);
					
			st7529_put_5x7_text(0,0,text,17);
80005bf2:	ee c8 00 34 	sub	r8,r7,52
80005bf6:	31 19       	mov	r9,17
80005bf8:	10 9a       	mov	r10,r8
80005bfa:	30 0b       	mov	r11,0
80005bfc:	30 0c       	mov	r12,0
80005bfe:	f0 1f 00 1e 	mcall	80005c74 <main+0x104>
			
			sprintf(text,"Num Sats: %d", gps_data.num_sats);
80005c02:	49 98       	lddpc	r8,80005c64 <main+0xf4>
80005c04:	f1 38 00 31 	ld.ub	r8,r8[49]
80005c08:	5c 58       	castu.b	r8
80005c0a:	10 99       	mov	r9,r8
80005c0c:	ee c8 00 34 	sub	r8,r7,52
80005c10:	1a d9       	st.w	--sp,r9
80005c12:	49 ab       	lddpc	r11,80005c78 <main+0x108>
80005c14:	10 9c       	mov	r12,r8
80005c16:	f0 1f 00 17 	mcall	80005c70 <main+0x100>
80005c1a:	2f fd       	sub	sp,-4
			
			st7529_put_5x7_text(0,9,text,12);
80005c1c:	ee c8 00 34 	sub	r8,r7,52
80005c20:	30 c9       	mov	r9,12
80005c22:	10 9a       	mov	r10,r8
80005c24:	30 9b       	mov	r11,9
80005c26:	30 0c       	mov	r12,0
80005c28:	f0 1f 00 13 	mcall	80005c74 <main+0x104>
			
			sens_rx_start();
80005c2c:	f0 1f 00 14 	mcall	80005c7c <main+0x10c>
		}
	}
80005c30:	cc 1b       	rjmp	80005bb2 <main+0x42>
80005c32:	00 00       	add	r0,r0
80005c34:	80 00       	ld.sh	r0,r0[0x0]
80005c36:	62 b0       	ld.w	r0,r1[0x2c]
80005c38:	80 00       	ld.sh	r0,r0[0x0]
80005c3a:	5c 80       	casts.h	r0
80005c3c:	80 00       	ld.sh	r0,r0[0x0]
80005c3e:	48 6c       	lddpc	r12,80005c54 <main+0xe4>
80005c40:	80 00       	ld.sh	r0,r0[0x0]
80005c42:	5c fc       	rol	r12
80005c44:	80 00       	ld.sh	r0,r0[0x0]
80005c46:	5d 50       	*unknown*
80005c48:	80 00       	ld.sh	r0,r0[0x0]
80005c4a:	5d 74       	*unknown*
80005c4c:	80 00       	ld.sh	r0,r0[0x0]
80005c4e:	5f cc       	srvs	r12
80005c50:	80 00       	ld.sh	r0,r0[0x0]
80005c52:	60 00       	ld.w	r0,r0[0x0]
80005c54:	80 00       	ld.sh	r0,r0[0x0]
80005c56:	61 64       	ld.w	r4,r0[0x58]
80005c58:	80 00       	ld.sh	r0,r0[0x0]
80005c5a:	62 14       	ld.w	r4,r1[0x4]
80005c5c:	80 00       	ld.sh	r0,r0[0x0]
80005c5e:	62 64       	ld.w	r4,r1[0x18]
80005c60:	00 00       	add	r0,r0
80005c62:	06 08       	add	r8,r3
80005c64:	00 00       	add	r0,r0
80005c66:	06 68       	and	r8,r3
80005c68:	80 00       	ld.sh	r0,r0[0x0]
80005c6a:	66 f2       	ld.w	r2,r3[0x3c]
80005c6c:	80 00       	ld.sh	r0,r0[0x0]
80005c6e:	55 44       	stdsp	sp[0x150],r4
80005c70:	80 00       	ld.sh	r0,r0[0x0]
80005c72:	69 b8       	ld.w	r8,r4[0x6c]
80005c74:	80 00       	ld.sh	r0,r0[0x0]
80005c76:	51 48       	stdsp	sp[0x50],r8
80005c78:	80 00       	ld.sh	r0,r0[0x0]
80005c7a:	55 54       	stdsp	sp[0x154],r4
80005c7c:	80 00       	ld.sh	r0,r0[0x0]
80005c7e:	60 b4       	ld.w	r4,r0[0x2c]

80005c80 <setup_clocks>:
}

void setup_clocks(void){
80005c80:	eb cd 40 80 	pushm	r7,lr
80005c84:	1a 97       	mov	r7,sp
80005c86:	20 dd       	sub	sp,52
	scif_disable_rc32out();
80005c88:	f0 1f 00 1b 	mcall	80005cf4 <setup_clocks+0x74>
	
	pcl_freq_param_t pcl_params;
	scif_gclk_opt_t gclk_opts;
	
	pcl_params.main_clk_src = PCL_MC_DFLL0;
80005c8c:	30 78       	mov	r8,7
80005c8e:	ef 48 ff dc 	st.w	r7[-36],r8
	pcl_params.cpu_f = CPU_FREQ;
80005c92:	e0 68 78 40 	mov	r8,30784
80005c96:	ea 18 01 7d 	orh	r8,0x17d
80005c9a:	ef 48 ff e0 	st.w	r7[-32],r8
	pcl_params.pba_f = CPU_FREQ;
80005c9e:	e0 68 78 40 	mov	r8,30784
80005ca2:	ea 18 01 7d 	orh	r8,0x17d
80005ca6:	ef 48 ff e4 	st.w	r7[-28],r8
	pcl_params.pbb_f = CPU_FREQ;
80005caa:	e0 68 78 40 	mov	r8,30784
80005cae:	ea 18 01 7d 	orh	r8,0x17d
80005cb2:	ef 48 ff e8 	st.w	r7[-24],r8
	pcl_params.pbc_f = CPU_FREQ;
80005cb6:	e0 68 78 40 	mov	r8,30784
80005cba:	ea 18 01 7d 	orh	r8,0x17d
80005cbe:	ef 48 ff ec 	st.w	r7[-20],r8
	pcl_params.dfll_f = DFLL_FREQ;
80005cc2:	e0 68 e1 00 	mov	r8,57600
80005cc6:	ea 18 05 f5 	orh	r8,0x5f5
80005cca:	ef 48 ff f8 	st.w	r7[-8],r8
	
	gclk_opts.clock_source = SCIF_GCCTRL_SLOWCLOCK;
80005cce:	30 08       	mov	r8,0
80005cd0:	ef 48 ff cc 	st.w	r7[-52],r8
	gclk_opts.diven = false;
80005cd4:	30 08       	mov	r8,0
80005cd6:	ef 48 ff d4 	st.w	r7[-44],r8
	
	pcl_params.pextra_params = &gclk_opts;
80005cda:	ee c8 00 34 	sub	r8,r7,52
80005cde:	ef 48 ff fc 	st.w	r7[-4],r8
	
	pcl_configure_clocks(&pcl_params);
80005ce2:	ee c8 00 24 	sub	r8,r7,36
80005ce6:	10 9c       	mov	r12,r8
80005ce8:	f0 1f 00 04 	mcall	80005cf8 <setup_clocks+0x78>
}
80005cec:	2f 3d       	sub	sp,-52
80005cee:	e3 cd 80 80 	ldm	sp++,r7,pc
80005cf2:	00 00       	add	r0,r0
80005cf4:	80 00       	ld.sh	r0,r0[0x0]
80005cf6:	35 c4       	mov	r4,92
80005cf8:	80 00       	ld.sh	r0,r0[0x0]
80005cfa:	2c 6c       	sub	r12,-58

80005cfc <setup_gps_uart>:

void setup_gps_uart(void){
80005cfc:	eb cd 40 80 	pushm	r7,lr
80005d00:	1a 97       	mov	r7,sp
		.paritytype		= USART_NO_PARITY,
		.stopbits		= USART_1_STOPBIT,
		.channelmode	= USART_NORMAL_CHMODE
	};
	
	gpio_enable_module(USART_GPIO_MAP, 2);
80005d02:	30 2b       	mov	r11,2
80005d04:	48 fc       	lddpc	r12,80005d40 <setup_gps_uart+0x44>
80005d06:	f0 1f 00 10 	mcall	80005d44 <setup_gps_uart+0x48>
	
	usart_init_rs232(&AVR32_USART3, &USART_OPTIONS, CPU_FREQ);
80005d0a:	e0 6a 78 40 	mov	r10,30784
80005d0e:	ea 1a 01 7d 	orh	r10,0x17d
80005d12:	48 eb       	lddpc	r11,80005d48 <setup_gps_uart+0x4c>
80005d14:	fe 7c 3c 00 	mov	r12,-50176
80005d18:	f0 1f 00 0d 	mcall	80005d4c <setup_gps_uart+0x50>
	
	(&AVR32_USART3)->ier = AVR32_USART_IER_TIMEOUT_MASK;
80005d1c:	fe 78 3c 00 	mov	r8,-50176
80005d20:	e0 69 01 00 	mov	r9,256
80005d24:	91 29       	st.w	r8[0x8],r9
	(&AVR32_USART3)->rtor = 100;
80005d26:	fe 78 3c 00 	mov	r8,-50176
80005d2a:	36 49       	mov	r9,100
80005d2c:	91 99       	st.w	r8[0x24],r9
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
80005d2e:	fe 78 3c 00 	mov	r8,-50176
80005d32:	fe 79 3c 00 	mov	r9,-50176
80005d36:	72 09       	ld.w	r9,r9[0x0]
80005d38:	ab b9       	sbr	r9,0xb
80005d3a:	91 09       	st.w	r8[0x0],r9
}
80005d3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d40:	80 00       	ld.sh	r0,r0[0x0]
80005d42:	cf cc       	rcall	80005f3a <twim_write_blocking+0xaa>
80005d44:	80 00       	ld.sh	r0,r0[0x0]
80005d46:	21 8c       	sub	r12,24
80005d48:	80 00       	ld.sh	r0,r0[0x0]
80005d4a:	cf dc       	rcall	80005f44 <twim_write_blocking+0xb4>
80005d4c:	80 00       	ld.sh	r0,r0[0x0]
80005d4e:	3c f0       	mov	r0,-49

80005d50 <setup_uart_dma>:

void setup_uart_dma(void){
80005d50:	eb cd 40 80 	pushm	r7,lr
80005d54:	1a 97       	mov	r7,sp
		.size = sizeof(usart_rx_buffer),
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(0, &PDCA_OPTIONS);
80005d56:	48 5b       	lddpc	r11,80005d68 <setup_uart_dma+0x18>
80005d58:	30 0c       	mov	r12,0
80005d5a:	f0 1f 00 05 	mcall	80005d6c <setup_uart_dma+0x1c>
	pdca_enable(0);
80005d5e:	30 0c       	mov	r12,0
80005d60:	f0 1f 00 04 	mcall	80005d70 <setup_uart_dma+0x20>
}
80005d64:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d68:	80 00       	ld.sh	r0,r0[0x0]
80005d6a:	cf b0       	breq	80005d60 <setup_uart_dma+0x10>
80005d6c:	80 00       	ld.sh	r0,r0[0x0]
80005d6e:	27 68       	sub	r8,118
80005d70:	80 00       	ld.sh	r0,r0[0x0]
80005d72:	28 68       	sub	r8,-122

80005d74 <setup_sens_twi>:

void setup_sens_twi(void){
80005d74:	eb cd 40 80 	pushm	r7,lr
80005d78:	1a 97       	mov	r7,sp
80005d7a:	20 4d       	sub	sp,16
	// Setup Pins
	gpio_enable_gpio_pin(AVR32_PIN_PA21);
80005d7c:	31 5c       	mov	r12,21
80005d7e:	f0 1f 00 20 	mcall	80005dfc <setup_sens_twi+0x88>
	gpio_enable_gpio_pin(AVR32_PIN_PB05);
80005d82:	32 5c       	mov	r12,37
80005d84:	f0 1f 00 1e 	mcall	80005dfc <setup_sens_twi+0x88>
	
	const gpio_map_t TWIM_PIN_MAP = {
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION},
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION}
	};
80005d88:	49 e9       	lddpc	r9,80005e00 <setup_sens_twi+0x8c>
80005d8a:	ee c8 00 10 	sub	r8,r7,16
80005d8e:	20 08       	sub	r8,0
80005d90:	20 09       	sub	r9,0
80005d92:	72 0a       	ld.w	r10,r9[0x0]
80005d94:	91 0a       	st.w	r8[0x0],r10
80005d96:	72 1a       	ld.w	r10,r9[0x4]
80005d98:	91 1a       	st.w	r8[0x4],r10
80005d9a:	72 2a       	ld.w	r10,r9[0x8]
80005d9c:	91 2a       	st.w	r8[0x8],r10
80005d9e:	72 39       	ld.w	r9,r9[0xc]
80005da0:	91 39       	st.w	r8[0xc],r9
	
	gpio_enable_module(TWIM_PIN_MAP, 2);
80005da2:	ee c8 00 10 	sub	r8,r7,16
80005da6:	30 2b       	mov	r11,2
80005da8:	10 9c       	mov	r12,r8
80005daa:	f0 1f 00 17 	mcall	80005e04 <setup_sens_twi+0x90>
	
	// Setup TWI
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MEN_MASK;	// Enable Master
80005dae:	fe 78 44 00 	mov	r8,-48128
80005db2:	30 19       	mov	r9,1
80005db4:	91 09       	st.w	r8[0x0],r9
	AVR32_TWIM0.scr = ~0UL;	// Clear all Status
80005db6:	fe 78 44 00 	mov	r8,-48128
80005dba:	3f f9       	mov	r9,-1
80005dbc:	91 b9       	st.w	r8[0x2c],r9
	
	twim_set_speed(&AVR32_TWIM0, 200000UL, PBA_FREQ);	// Set to 200kHz
80005dbe:	e0 6a 78 40 	mov	r10,30784
80005dc2:	ea 1a 01 7d 	orh	r10,0x17d
80005dc6:	e2 7b 0d 40 	mov	r11,200000
80005dca:	fe 7c 44 00 	mov	r12,-48128
80005dce:	f0 1f 00 0f 	mcall	80005e08 <setup_sens_twi+0x94>
		.size = 6,
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(1, &PDCA_OPTIONS1);
80005dd2:	48 fb       	lddpc	r11,80005e0c <setup_sens_twi+0x98>
80005dd4:	30 1c       	mov	r12,1
80005dd6:	f0 1f 00 0f 	mcall	80005e10 <setup_sens_twi+0x9c>
	pdca_enable_interrupt_transfer_complete(1);
80005dda:	30 1c       	mov	r12,1
80005ddc:	f0 1f 00 0e 	mcall	80005e14 <setup_sens_twi+0xa0>
	pdca_enable(1);
80005de0:	30 1c       	mov	r12,1
80005de2:	f0 1f 00 0e 	mcall	80005e18 <setup_sens_twi+0xa4>
		.size = 0,
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(2, &PDCA_OPTIONS2);
80005de6:	48 eb       	lddpc	r11,80005e1c <setup_sens_twi+0xa8>
80005de8:	30 2c       	mov	r12,2
80005dea:	f0 1f 00 0a 	mcall	80005e10 <setup_sens_twi+0x9c>
	pdca_enable(2);
80005dee:	30 2c       	mov	r12,2
80005df0:	f0 1f 00 0a 	mcall	80005e18 <setup_sens_twi+0xa4>
}
80005df4:	2f cd       	sub	sp,-16
80005df6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dfa:	00 00       	add	r0,r0
80005dfc:	80 00       	ld.sh	r0,r0[0x0]
80005dfe:	24 78       	sub	r8,71
80005e00:	80 00       	ld.sh	r0,r0[0x0]
80005e02:	cf 68       	rjmp	80005fee <setup_magnetometer+0x22>
80005e04:	80 00       	ld.sh	r0,r0[0x0]
80005e06:	21 8c       	sub	r12,24
80005e08:	80 00       	ld.sh	r0,r0[0x0]
80005e0a:	3a e2       	mov	r2,-82
80005e0c:	80 00       	ld.sh	r0,r0[0x0]
80005e0e:	cf 78       	rjmp	80005ffc <setup_magnetometer+0x30>
80005e10:	80 00       	ld.sh	r0,r0[0x0]
80005e12:	27 68       	sub	r8,118
80005e14:	80 00       	ld.sh	r0,r0[0x0]
80005e16:	29 58       	sub	r8,-107
80005e18:	80 00       	ld.sh	r0,r0[0x0]
80005e1a:	28 68       	sub	r8,-122
80005e1c:	80 00       	ld.sh	r0,r0[0x0]
80005e1e:	cf 94       	brge	80005e10 <setup_sens_twi+0x9c>

80005e20 <twim_write_dma>:

void twim_write_dma(volatile avr32_twim_t *twim, uint8_t dma_ch, uint8_t saddr, uint8_t *bytes, uint8_t len){
80005e20:	eb cd 40 80 	pushm	r7,lr
80005e24:	1a 97       	mov	r7,sp
80005e26:	20 5d       	sub	sp,20
80005e28:	ef 4c ff fc 	st.w	r7[-4],r12
80005e2c:	ef 49 ff f0 	st.w	r7[-16],r9
80005e30:	16 99       	mov	r9,r11
80005e32:	ef 69 ff f8 	st.b	r7[-8],r9
80005e36:	14 99       	mov	r9,r10
80005e38:	ef 69 ff f4 	st.b	r7[-12],r9
80005e3c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Load DMA
	pdca_load_channel(dma_ch, (void *)bytes, len);
80005e40:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005e44:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005e48:	12 9a       	mov	r10,r9
80005e4a:	ee fb ff f0 	ld.w	r11,r7[-16]
80005e4e:	10 9c       	mov	r12,r8
80005e50:	f0 1f 00 0f 	mcall	80005e8c <twim_write_dma+0x6c>
	
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005e54:	c0 38       	rjmp	80005e5a <twim_write_dma+0x3a>
		cpu_relax();
80005e56:	fe cf ff fc 	sub	pc,pc,-4
void twim_write_dma(volatile avr32_twim_t *twim, uint8_t dma_ch, uint8_t saddr, uint8_t *bytes, uint8_t len){
	// Load DMA
	pdca_load_channel(dma_ch, (void *)bytes, len);
	
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005e5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e5e:	70 78       	ld.w	r8,r8[0x1c]
80005e60:	e2 18 00 10 	andl	r8,0x10,COH
80005e64:	cf 90       	breq	80005e56 <twim_write_dma+0x36>
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005e66:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005e6a:	f0 09 15 01 	lsl	r9,r8,0x1
	| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
80005e6e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005e72:	b1 68       	lsl	r8,0x10
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
80005e74:	f3 e8 10 08 	or	r8,r9,r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005e78:	e8 18 e0 00 	orl	r8,0xe000
80005e7c:	10 99       	mov	r9,r8
80005e7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e82:	91 39       	st.w	r8[0xc],r9
	| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop after NBYTES
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
}
80005e84:	2f bd       	sub	sp,-20
80005e86:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e8a:	00 00       	add	r0,r0
80005e8c:	80 00       	ld.sh	r0,r0[0x0]
80005e8e:	28 98       	sub	r8,-119

80005e90 <twim_write_blocking>:

void twim_write_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t *bytes, uint8_t len){
80005e90:	eb cd 40 80 	pushm	r7,lr
80005e94:	1a 97       	mov	r7,sp
80005e96:	20 5d       	sub	sp,20
80005e98:	ef 4c ff f8 	st.w	r7[-8],r12
80005e9c:	ef 4a ff f0 	st.w	r7[-16],r10
80005ea0:	12 98       	mov	r8,r9
80005ea2:	16 99       	mov	r9,r11
80005ea4:	ef 69 ff f4 	st.b	r7[-12],r9
80005ea8:	ef 68 ff ec 	st.b	r7[-20],r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005eac:	c0 38       	rjmp	80005eb2 <twim_write_blocking+0x22>
		cpu_relax();
80005eae:	fe cf ff fc 	sub	pc,pc,-4
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
}

void twim_write_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t *bytes, uint8_t len){
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005eb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005eb6:	70 78       	ld.w	r8,r8[0x1c]
80005eb8:	e2 18 00 10 	andl	r8,0x10,COH
80005ebc:	cf 90       	breq	80005eae <twim_write_blocking+0x1e>
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005ebe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80005ec2:	f0 09 15 01 	lsl	r9,r8,0x1
			| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
80005ec6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005eca:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
80005ecc:	f3 e8 10 08 	or	r8,r9,r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005ed0:	e8 18 e0 00 	orl	r8,0xe000
80005ed4:	10 99       	mov	r9,r8
80005ed6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005eda:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
			| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
			| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop after NBYTES
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	twim->thr = *bytes++;	// Load data
80005edc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005ee0:	11 88       	ld.ub	r8,r8[0x0]
80005ee2:	10 99       	mov	r9,r8
80005ee4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ee8:	91 69       	st.w	r8[0x18],r9
80005eea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005eee:	2f f8       	sub	r8,-1
80005ef0:	ef 48 ff f0 	st.w	r7[-16],r8
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
80005ef4:	30 08       	mov	r8,0
80005ef6:	ef 48 ff fc 	st.w	r7[-4],r8
80005efa:	c1 c8       	rjmp	80005f32 <twim_write_blocking+0xa2>
		// Wait for TXRDY
		while(!(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)){
			cpu_relax();
80005efc:	fe cf ff fc 	sub	pc,pc,-4
80005f00:	c0 28       	rjmp	80005f04 <twim_write_blocking+0x74>
	twim->thr = *bytes++;	// Load data
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
		// Wait for TXRDY
		while(!(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)){
80005f02:	d7 03       	nop
80005f04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f08:	70 78       	ld.w	r8,r8[0x1c]
80005f0a:	e2 18 00 02 	andl	r8,0x2,COH
80005f0e:	cf 70       	breq	80005efc <twim_write_blocking+0x6c>
			cpu_relax();
		}
		
		twim->thr = *bytes++;
80005f10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f14:	11 88       	ld.ub	r8,r8[0x0]
80005f16:	10 99       	mov	r9,r8
80005f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f1c:	91 69       	st.w	r8[0x18],r9
80005f1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005f22:	2f f8       	sub	r8,-1
80005f24:	ef 48 ff f0 	st.w	r7[-16],r8
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	twim->thr = *bytes++;	// Load data
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
80005f28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f2c:	2f f8       	sub	r8,-1
80005f2e:	ef 48 ff fc 	st.w	r7[-4],r8
80005f32:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005f36:	20 18       	sub	r8,1
80005f38:	10 99       	mov	r9,r8
80005f3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f3e:	10 39       	cp.w	r9,r8
80005f40:	fe 9b ff e1 	brhi	80005f02 <twim_write_blocking+0x72>
			cpu_relax();
		}
		
		twim->thr = *bytes++;
	}
}
80005f44:	2f bd       	sub	sp,-20
80005f46:	e3 cd 80 80 	ldm	sp++,r7,pc

80005f4a <twim_read_blocking>:

uint8_t twim_read_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t raddr){
80005f4a:	eb cd 40 80 	pushm	r7,lr
80005f4e:	1a 97       	mov	r7,sp
80005f50:	20 3d       	sub	sp,12
80005f52:	ef 4c ff fc 	st.w	r7[-4],r12
80005f56:	16 99       	mov	r9,r11
80005f58:	14 98       	mov	r8,r10
80005f5a:	ef 69 ff f8 	st.b	r7[-8],r9
80005f5e:	ef 68 ff f4 	st.b	r7[-12],r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005f62:	c0 38       	rjmp	80005f68 <twim_read_blocking+0x1e>
		cpu_relax();
80005f64:	fe cf ff fc 	sub	pc,pc,-4
	}
}

uint8_t twim_read_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t raddr){
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005f68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f6c:	70 78       	ld.w	r8,r8[0x1c]
80005f6e:	e2 18 00 10 	andl	r8,0x10,COH
80005f72:	cf 90       	breq	80005f64 <twim_read_blocking+0x1a>
		cpu_relax();
	}
	
	// Write Read Address
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005f74:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005f78:	a1 78       	lsl	r8,0x1
80005f7a:	ea 18 00 01 	orh	r8,0x1
80005f7e:	e8 18 a0 00 	orl	r8,0xa000
80005f82:	10 99       	mov	r9,r8
80005f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f88:	91 39       	st.w	r8[0xc],r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Byte
	twim->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005f8a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005f8e:	a1 78       	lsl	r8,0x1
80005f90:	ea 18 00 01 	orh	r8,0x1
80005f94:	e8 18 e0 01 	orl	r8,0xe001
80005f98:	10 99       	mov	r9,r8
80005f9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f9e:	91 49       	st.w	r8[0x10],r9
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
		
	// Start Read Address Write
	twim->thr = raddr;
80005fa0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80005fa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fa8:	91 69       	st.w	r8[0x18],r9
	
	// Wait For Read Byte
	while(!(twim->sr & AVR32_TWIM_SR_RXRDY_MASK)){
80005faa:	c0 38       	rjmp	80005fb0 <twim_read_blocking+0x66>
		cpu_relax();
80005fac:	fe cf ff fc 	sub	pc,pc,-4
		
	// Start Read Address Write
	twim->thr = raddr;
	
	// Wait For Read Byte
	while(!(twim->sr & AVR32_TWIM_SR_RXRDY_MASK)){
80005fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fb4:	70 78       	ld.w	r8,r8[0x1c]
80005fb6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005fba:	cf 90       	breq	80005fac <twim_read_blocking+0x62>
		cpu_relax();
	}
	
	return twim->rhr;
80005fbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fc0:	70 58       	ld.w	r8,r8[0x14]
80005fc2:	5c 58       	castu.b	r8
}
80005fc4:	10 9c       	mov	r12,r8
80005fc6:	2f dd       	sub	sp,-12
80005fc8:	e3 cd 80 80 	ldm	sp++,r7,pc

80005fcc <setup_magnetometer>:

void setup_magnetometer(void){
80005fcc:	eb cd 40 80 	pushm	r7,lr
80005fd0:	1a 97       	mov	r7,sp
	// Device Address = 0x0E
	// CTRL_REG1 = 0x10
	// ODR = 5Hz, OSR = 64, Enable => 0x51
	static const uint8_t bytes1[] = {0x10, 0x51};
	twim_write_blocking(&AVR32_TWIM0,0x0E,bytes1,2);
80005fd2:	30 29       	mov	r9,2
80005fd4:	48 8a       	lddpc	r10,80005ff4 <setup_magnetometer+0x28>
80005fd6:	30 eb       	mov	r11,14
80005fd8:	fe 7c 44 00 	mov	r12,-48128
80005fdc:	f0 1f 00 07 	mcall	80005ff8 <setup_magnetometer+0x2c>
	
	// CTRL_REG2 = 0x11
	// AUTO_MRST_EN = 1 => 0x80
	static const uint8_t bytes2[] = {0x11, 0x80};
	twim_write_blocking(&AVR32_TWIM0,0x0E,bytes2,2);
80005fe0:	30 29       	mov	r9,2
80005fe2:	48 7a       	lddpc	r10,80005ffc <setup_magnetometer+0x30>
80005fe4:	30 eb       	mov	r11,14
80005fe6:	fe 7c 44 00 	mov	r12,-48128
80005fea:	f0 1f 00 04 	mcall	80005ff8 <setup_magnetometer+0x2c>
}
80005fee:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ff2:	00 00       	add	r0,r0
80005ff4:	80 00       	ld.sh	r0,r0[0x0]
80005ff6:	cf 60       	breq	80005fe2 <setup_magnetometer+0x16>
80005ff8:	80 00       	ld.sh	r0,r0[0x0]
80005ffa:	5e 90       	retgt	r0
80005ffc:	80 00       	ld.sh	r0,r0[0x0]
80005ffe:	cf 64       	brge	80005fea <setup_magnetometer+0x1e>

80006000 <setup_barometer>:

void setup_barometer(void){
80006000:	eb cd 40 c0 	pushm	r6-r7,lr
80006004:	1a 97       	mov	r7,sp
80006006:	20 3d       	sub	sp,12
	// Disable DMA
	pdca_disable(1);
80006008:	30 1c       	mov	r12,1
8000600a:	f0 1f 00 27 	mcall	800060a4 <setup_barometer+0xa4>
	
	uint32_t data = 0;
8000600e:	30 08       	mov	r8,0
80006010:	ef 48 ff f4 	st.w	r7[-12],r8
	volatile avr32_twim_t *twim = &AVR32_TWIM0;
80006014:	fe 78 44 00 	mov	r8,-48128
80006018:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// Get Calibration Data	
	for(uint32_t i=0; i<11; i++){
8000601c:	30 08       	mov	r8,0
8000601e:	ef 48 ff fc 	st.w	r7[-4],r8
80006022:	c3 68       	rjmp	8000608e <setup_barometer+0x8e>
		// Get MSB
		data = twim_read_blocking(twim, 0x77, (0xAA+2*i));
80006024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006028:	2a b8       	sub	r8,-85
8000602a:	5c 58       	castu.b	r8
8000602c:	a1 78       	lsl	r8,0x1
8000602e:	5c 58       	castu.b	r8
80006030:	10 9a       	mov	r10,r8
80006032:	37 7b       	mov	r11,119
80006034:	ee fc ff f8 	ld.w	r12,r7[-8]
80006038:	f0 1f 00 1c 	mcall	800060a8 <setup_barometer+0xa8>
8000603c:	18 98       	mov	r8,r12
8000603e:	ef 48 ff f4 	st.w	r7[-12],r8
		// Get LSB
		data = (data<<8)|twim_read_blocking(twim, 0x77, 0xAA+2*i+1);
80006042:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006046:	f0 06 15 08 	lsl	r6,r8,0x8
8000604a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000604e:	2a b8       	sub	r8,-85
80006050:	5c 58       	castu.b	r8
80006052:	a1 78       	lsl	r8,0x1
80006054:	5c 58       	castu.b	r8
80006056:	2f f8       	sub	r8,-1
80006058:	5c 58       	castu.b	r8
8000605a:	10 9a       	mov	r10,r8
8000605c:	37 7b       	mov	r11,119
8000605e:	ee fc ff f8 	ld.w	r12,r7[-8]
80006062:	f0 1f 00 12 	mcall	800060a8 <setup_barometer+0xa8>
80006066:	18 98       	mov	r8,r12
80006068:	ed e8 10 08 	or	r8,r6,r8
8000606c:	ef 48 ff f4 	st.w	r7[-12],r8
		
		*((uint16_t *)&bmp180_cal_data+i) = data;
80006070:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006074:	f0 09 15 01 	lsl	r9,r8,0x1
80006078:	48 d8       	lddpc	r8,800060ac <setup_barometer+0xac>
8000607a:	10 09       	add	r9,r8
8000607c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006080:	5c 88       	casts.h	r8
80006082:	b2 08       	st.h	r9[0x0],r8
	
	uint32_t data = 0;
	volatile avr32_twim_t *twim = &AVR32_TWIM0;
	
	// Get Calibration Data	
	for(uint32_t i=0; i<11; i++){
80006084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006088:	2f f8       	sub	r8,-1
8000608a:	ef 48 ff fc 	st.w	r7[-4],r8
8000608e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006092:	58 a8       	cp.w	r8,10
80006094:	fe 98 ff c8 	brls	80006024 <setup_barometer+0x24>
		data = (data<<8)|twim_read_blocking(twim, 0x77, 0xAA+2*i+1);
		
		*((uint16_t *)&bmp180_cal_data+i) = data;
	}
	
	pdca_enable(1);
80006098:	30 1c       	mov	r12,1
8000609a:	f0 1f 00 06 	mcall	800060b0 <setup_barometer+0xb0>
}
8000609e:	2f dd       	sub	sp,-12
800060a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800060a4:	80 00       	ld.sh	r0,r0[0x0]
800060a6:	28 38       	sub	r8,-125
800060a8:	80 00       	ld.sh	r0,r0[0x0]
800060aa:	5f 4a       	srge	r10
800060ac:	00 00       	add	r0,r0
800060ae:	06 50       	eor	r0,r3
800060b0:	80 00       	ld.sh	r0,r0[0x0]
800060b2:	28 68       	sub	r8,-122

800060b4 <sens_rx_start>:

void sens_rx_start(void){
800060b4:	eb cd 40 80 	pushm	r7,lr
800060b8:	1a 97       	mov	r7,sp
800060ba:	20 1d       	sub	sp,4
	uint8_t length;
	uint8_t saddr;
	uint8_t raddr;
	
	switch(sens_rx_state){
800060bc:	4a 78       	lddpc	r8,80006158 <sens_rx_start+0xa4>
800060be:	70 08       	ld.w	r8,r8[0x0]
800060c0:	58 18       	cp.w	r8,1
800060c2:	c0 e0       	breq	800060de <sens_rx_start+0x2a>
800060c4:	c0 33       	brcs	800060ca <sens_rx_start+0x16>
800060c6:	58 28       	cp.w	r8,2
800060c8:	c4 31       	brne	8000614e <sens_rx_start+0x9a>
		case SENS_STATE_PRESSURE:
		case SENS_STATE_TEMP:
			length = 3;
800060ca:	30 38       	mov	r8,3
800060cc:	ef 68 ff fd 	st.b	r7[-3],r8
			saddr = 0x77;
800060d0:	37 78       	mov	r8,119
800060d2:	ef 68 ff fe 	st.b	r7[-2],r8
			raddr = 0xF6;
800060d6:	3f 68       	mov	r8,-10
800060d8:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
800060dc:	c0 b8       	rjmp	800060f2 <sens_rx_start+0x3e>
			
		case SENS_STATE_MAG:
			length = 6;
800060de:	30 68       	mov	r8,6
800060e0:	ef 68 ff fd 	st.b	r7[-3],r8
			saddr = 0x0E;
800060e4:	30 e8       	mov	r8,14
800060e6:	ef 68 ff fe 	st.b	r7[-2],r8
			raddr = 0x01;
800060ea:	30 18       	mov	r8,1
800060ec:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
800060f0:	d7 03       	nop
		default:
			return;
	}
	
	// Setup DMA
	pdca_load_channel(1,(void *)sens_rx_buffer,length);
800060f2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800060f6:	10 9a       	mov	r10,r8
800060f8:	49 9b       	lddpc	r11,8000615c <sens_rx_start+0xa8>
800060fa:	30 1c       	mov	r12,1
800060fc:	f0 1f 00 19 	mcall	80006160 <sens_rx_start+0xac>
	
	// Wait For TWIM Idle
	while(!(AVR32_TWIM0.sr & AVR32_TWIM_SR_IDLE_MASK)){
80006100:	c0 38       	rjmp	80006106 <sens_rx_start+0x52>
		cpu_relax();
80006102:	fe cf ff fc 	sub	pc,pc,-4
	
	// Setup DMA
	pdca_load_channel(1,(void *)sens_rx_buffer,length);
	
	// Wait For TWIM Idle
	while(!(AVR32_TWIM0.sr & AVR32_TWIM_SR_IDLE_MASK)){
80006106:	fe 78 44 00 	mov	r8,-48128
8000610a:	70 78       	ld.w	r8,r8[0x1c]
8000610c:	e2 18 00 10 	andl	r8,0x10,COH
80006110:	cf 90       	breq	80006102 <sens_rx_start+0x4e>
		cpu_relax();
	}
	
	// Read Address write
	AVR32_TWIM0.cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80006112:	fe 78 44 00 	mov	r8,-48128
80006116:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000611a:	a1 79       	lsl	r9,0x1
8000611c:	ea 19 00 01 	orh	r9,0x1
80006120:	e8 19 a0 00 	orl	r9,0xa000
80006124:	91 39       	st.w	r8[0xc],r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Bytes
	AVR32_TWIM0.ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80006126:	fe 78 44 00 	mov	r8,-48128
8000612a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000612e:	f2 0a 15 01 	lsl	r10,r9,0x1
	| (length << AVR32_TWIM_CMDR_NBYTES_OFFSET)		// Num Bytes
80006132:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006136:	b1 69       	lsl	r9,0x10
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
80006138:	f5 e9 10 09 	or	r9,r10,r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Bytes
	AVR32_TWIM0.ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
8000613c:	e8 19 e0 01 	orl	r9,0xe001
80006140:	91 49       	st.w	r8[0x10],r9
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
	
	// Initial Read Address Write
	AVR32_TWIM0.thr = raddr;
80006142:	fe 78 44 00 	mov	r8,-48128
80006146:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000614a:	91 69       	st.w	r8[0x18],r9
8000614c:	c0 28       	rjmp	80006150 <sens_rx_start+0x9c>
			saddr = 0x0E;
			raddr = 0x01;
			break;
			
		default:
			return;
8000614e:	d7 03       	nop
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
	
	// Initial Read Address Write
	AVR32_TWIM0.thr = raddr;
}
80006150:	2f fd       	sub	sp,-4
80006152:	e3 cd 80 80 	ldm	sp++,r7,pc
80006156:	00 00       	add	r0,r0
80006158:	00 00       	add	r0,r0
8000615a:	06 0c       	add	r12,r3
8000615c:	00 00       	add	r0,r0
8000615e:	09 1c       	ld.sh	r12,r4++
80006160:	80 00       	ld.sh	r0,r0[0x0]
80006162:	28 98       	sub	r8,-119

80006164 <setup_buzzer>:

void setup_buzzer(void){
80006164:	eb cd 40 80 	pushm	r7,lr
80006168:	1a 97       	mov	r7,sp
	// Setup Generic Clock for PWM
	genclk_enable_config(AVR32_SCIF_GCLK_PWMA, AVR32_SCIF_GCCTRL_OSCSEL_CLK_PBA, PBA_FREQ/50000UL);
8000616a:	e0 6a 01 f4 	mov	r10,500
8000616e:	30 7b       	mov	r11,7
80006170:	30 3c       	mov	r12,3
80006172:	f0 1f 00 23 	mcall	800061fc <setup_buzzer+0x98>
	static const gpio_map_t PWMA_GPIO_MAP = {
		{AVR32_PWMA_14_PIN, AVR32_PWMA_14_FUNCTION},
		{AVR32_PWMA_20_0_PIN, AVR32_PWMA_20_0_FUNCTION},
	};
	
	gpio_enable_module(PWMA_GPIO_MAP, 2);
80006176:	30 2b       	mov	r11,2
80006178:	4a 2c       	lddpc	r12,80006200 <setup_buzzer+0x9c>
8000617a:	f0 1f 00 23 	mcall	80006204 <setup_buzzer+0xa0>
	
	pwma_config_enable(&AVR32_PWMA, 400, 50000UL, 0);	
8000617e:	30 09       	mov	r9,0
80006180:	e0 6a c3 50 	mov	r10,50000
80006184:	e0 6b 01 90 	mov	r11,400
80006188:	fe 7c 54 00 	mov	r12,-44032
8000618c:	f0 1f 00 1f 	mcall	80006208 <setup_buzzer+0xa4>
	
	pwma_set_channels_value(&AVR32_PWMA, (1<<14), AVR32_PWMA.CR.top/2);
80006190:	fe 78 54 00 	mov	r8,-44032
80006194:	70 08       	ld.w	r8,r8[0x0]
80006196:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
8000619a:	5c 58       	castu.b	r8
8000619c:	a1 98       	lsr	r8,0x1
8000619e:	5c 58       	castu.b	r8
800061a0:	10 99       	mov	r9,r8
800061a2:	e0 6a 40 00 	mov	r10,16384
800061a6:	30 0b       	mov	r11,0
800061a8:	fe 7c 54 00 	mov	r12,-44032
800061ac:	f0 1f 00 18 	mcall	8000620c <setup_buzzer+0xa8>
	pwma_set_channels_value(&AVR32_PWMA, (1<<20), AVR32_PWMA.CR.top/2);
800061b0:	fe 78 54 00 	mov	r8,-44032
800061b4:	70 08       	ld.w	r8,r8[0x0]
800061b6:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
800061ba:	5c 58       	castu.b	r8
800061bc:	a1 98       	lsr	r8,0x1
800061be:	5c 58       	castu.b	r8
800061c0:	10 99       	mov	r9,r8
800061c2:	fc 1a 00 10 	movh	r10,0x10
800061c6:	30 0b       	mov	r11,0
800061c8:	fe 7c 54 00 	mov	r12,-44032
800061cc:	f0 1f 00 10 	mcall	8000620c <setup_buzzer+0xa8>
	pwma_set_channels_value(&AVR32_PWMA, (1<<21), AVR32_PWMA.CR.top);
800061d0:	fe 78 54 00 	mov	r8,-44032
800061d4:	70 08       	ld.w	r8,r8[0x0]
800061d6:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
800061da:	5c 58       	castu.b	r8
800061dc:	10 99       	mov	r9,r8
800061de:	fc 1a 00 20 	movh	r10,0x20
800061e2:	30 0b       	mov	r11,0
800061e4:	fe 7c 54 00 	mov	r12,-44032
800061e8:	f0 1f 00 09 	mcall	8000620c <setup_buzzer+0xa8>
	pwma_enable_cwg_mode(&AVR32_PWMA, (1<<10));
800061ec:	e0 6b 04 00 	mov	r11,1024
800061f0:	fe 7c 54 00 	mov	r12,-44032
800061f4:	f0 1f 00 07 	mcall	80006210 <setup_buzzer+0xac>
}
800061f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800061fc:	80 00       	ld.sh	r0,r0[0x0]
800061fe:	59 fc       	cp.w	r12,31
80006200:	80 00       	ld.sh	r0,r0[0x0]
80006202:	cf 50       	breq	800061ec <setup_buzzer+0x88>
80006204:	80 00       	ld.sh	r0,r0[0x0]
80006206:	21 8c       	sub	r12,24
80006208:	80 00       	ld.sh	r0,r0[0x0]
8000620a:	2e 7c       	sub	r12,-25
8000620c:	80 00       	ld.sh	r0,r0[0x0]
8000620e:	2f 28       	sub	r8,-14
80006210:	80 00       	ld.sh	r0,r0[0x0]
80006212:	2f dc       	sub	r12,-3

80006214 <setup_tick>:

void setup_tick(void){
80006214:	eb cd 40 80 	pushm	r7,lr
80006218:	1a 97       	mov	r7,sp
		.cpas = 0,
		.lovrs = 0,
		.covfs = 0
	};
	
	tc_init_waveform(&AVR32_TC0, &waveform_opt);
8000621a:	48 db       	lddpc	r11,8000624c <setup_tick+0x38>
8000621c:	fe 7c 58 00 	mov	r12,-43008
80006220:	f0 1f 00 0c 	mcall	80006250 <setup_tick+0x3c>
	// Achieve TICK_RATE ticks, but empty slot before GPS packet
	// for margin.
	tc_write_rc(&AVR32_TC0, 0, PBA_FREQ/128/(TICK_RATE+1));
80006224:	e0 6a 24 54 	mov	r10,9300
80006228:	30 0b       	mov	r11,0
8000622a:	fe 7c 58 00 	mov	r12,-43008
8000622e:	f0 1f 00 0a 	mcall	80006254 <setup_tick+0x40>
	tc_configure_interrupts(&AVR32_TC0, 0, &tc_interrupt);
80006232:	48 aa       	lddpc	r10,80006258 <setup_tick+0x44>
80006234:	30 0b       	mov	r11,0
80006236:	fe 7c 58 00 	mov	r12,-43008
8000623a:	f0 1f 00 09 	mcall	8000625c <setup_tick+0x48>
	
	tc_start(&AVR32_TC0, 0);
8000623e:	30 0b       	mov	r11,0
80006240:	fe 7c 58 00 	mov	r12,-43008
80006244:	f0 1f 00 07 	mcall	80006260 <setup_tick+0x4c>
}
80006248:	e3 cd 80 80 	ldm	sp++,r7,pc
8000624c:	80 00       	ld.sh	r0,r0[0x0]
8000624e:	cf 44       	brge	80006236 <setup_tick+0x22>
80006250:	80 00       	ld.sh	r0,r0[0x0]
80006252:	38 dc       	mov	r12,-115
80006254:	80 00       	ld.sh	r0,r0[0x0]
80006256:	3a 6a       	mov	r10,-90
80006258:	80 00       	ld.sh	r0,r0[0x0]
8000625a:	cf 4c       	rcall	80006442 <__avr32_f32_sub+0x22>
8000625c:	80 00       	ld.sh	r0,r0[0x0]
8000625e:	36 f4       	mov	r4,111
80006260:	80 00       	ld.sh	r0,r0[0x0]
80006262:	3a 30       	mov	r0,-93

80006264 <setup_interrupts>:

void setup_interrupts(void){
80006264:	eb cd 40 80 	pushm	r7,lr
80006268:	1a 97       	mov	r7,sp
	Disable_global_interrupt();
8000626a:	d3 03       	ssrf	0x10
	
	INTC_init_interrupts();
8000626c:	f0 1f 00 0c 	mcall	8000629c <setup_interrupts+0x38>
	INTC_register_interrupt(&usart_timeout_handler, AVR32_USART3_IRQ, AVR32_INTC_INT0);
80006270:	30 0a       	mov	r10,0
80006272:	e0 6b 02 40 	mov	r11,576
80006276:	48 bc       	lddpc	r12,800062a0 <setup_interrupts+0x3c>
80006278:	f0 1f 00 0b 	mcall	800062a4 <setup_interrupts+0x40>
	INTC_register_interrupt(&sens_rx_complete_handler, AVR32_PDCA_IRQ_1, AVR32_INTC_INT0);
8000627c:	30 0a       	mov	r10,0
8000627e:	e0 6b 00 81 	mov	r11,129
80006282:	48 ac       	lddpc	r12,800062a8 <setup_interrupts+0x44>
80006284:	f0 1f 00 08 	mcall	800062a4 <setup_interrupts+0x40>
	INTC_register_interrupt(&tick_handler, AVR32_TC0_IRQ0, AVR32_INTC_INT0);
80006288:	30 0a       	mov	r10,0
8000628a:	e0 6b 03 20 	mov	r11,800
8000628e:	48 8c       	lddpc	r12,800062ac <setup_interrupts+0x48>
80006290:	f0 1f 00 05 	mcall	800062a4 <setup_interrupts+0x40>
	
	Enable_global_interrupt();
80006294:	d5 03       	csrf	0x10
80006296:	e3 cd 80 80 	ldm	sp++,r7,pc
8000629a:	00 00       	add	r0,r0
8000629c:	80 00       	ld.sh	r0,r0[0x0]
8000629e:	25 54       	sub	r4,85
800062a0:	80 00       	ld.sh	r0,r0[0x0]
800062a2:	5a 6c       	cp.w	r12,-26
800062a4:	80 00       	ld.sh	r0,r0[0x0]
800062a6:	25 f0       	sub	r0,95
800062a8:	80 00       	ld.sh	r0,r0[0x0]
800062aa:	5a e4       	cp.w	r4,-18
800062ac:	80 00       	ld.sh	r0,r0[0x0]
800062ae:	5b 3c       	cp.w	r12,-13

800062b0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
800062b0:	eb cd 40 80 	pushm	r7,lr
800062b4:	1a 97       	mov	r7,sp
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
800062b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800062ba:	d7 03       	nop

800062bc <__avr32_f32_div>:
800062bc:	f7 ec 20 08 	eor	r8,r11,r12
800062c0:	a1 7c       	lsl	r12,0x1
800062c2:	a1 7b       	lsl	r11,0x1
800062c4:	c7 a0       	breq	800063b8 <__divsf_return_op1+0x16>
800062c6:	18 7c       	tst	r12,r12
800062c8:	f9 b9 00 00 	moveq	r9,0
800062cc:	c0 90       	breq	800062de <__avr32_f32_div+0x22>
800062ce:	f8 09 16 18 	lsr	r9,r12,0x18
800062d2:	c7 e0       	breq	800063ce <__divsf_return_op1+0x2c>
800062d4:	e0 49 00 ff 	cp.w	r9,255
800062d8:	c6 82       	brcc	800063a8 <__divsf_return_op1+0x6>
800062da:	a7 7c       	lsl	r12,0x7
800062dc:	bf bc       	sbr	r12,0x1f
800062de:	f6 0a 16 18 	lsr	r10,r11,0x18
800062e2:	c7 e0       	breq	800063de <__divsf_return_op1+0x3c>
800062e4:	e0 4a 00 ff 	cp.w	r10,255
800062e8:	c6 62       	brcc	800063b4 <__divsf_return_op1+0x12>
800062ea:	a7 7b       	lsl	r11,0x7
800062ec:	bf bb       	sbr	r11,0x1f
800062ee:	58 09       	cp.w	r9,0
800062f0:	f5 bc 00 00 	subfeq	r12,0
800062f4:	5e 0d       	reteq	0
800062f6:	1a d5       	st.w	--sp,r5
800062f8:	bb 27       	st.d	--sp,r6
800062fa:	14 19       	sub	r9,r10
800062fc:	28 19       	sub	r9,-127
800062fe:	fc 1a 80 00 	movh	r10,0x8000
80006302:	a3 8c       	lsr	r12,0x2
80006304:	f6 05 16 02 	lsr	r5,r11,0x2
80006308:	f4 0b 16 01 	lsr	r11,r10,0x1
8000630c:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80006310:	5c d6       	com	r6
80006312:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80006316:	f6 05 06 46 	mulu.d	r6,r11,r5
8000631a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000631e:	f6 07 06 46 	mulu.d	r6,r11,r7
80006322:	ee 0b 15 02 	lsl	r11,r7,0x2
80006326:	f6 05 06 46 	mulu.d	r6,r11,r5
8000632a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000632e:	f6 07 06 46 	mulu.d	r6,r11,r7
80006332:	ee 0b 15 02 	lsl	r11,r7,0x2
80006336:	f6 05 06 46 	mulu.d	r6,r11,r5
8000633a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000633e:	f6 07 06 46 	mulu.d	r6,r11,r7
80006342:	ee 0b 15 02 	lsl	r11,r7,0x2
80006346:	f6 05 06 46 	mulu.d	r6,r11,r5
8000634a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000634e:	f6 07 06 46 	mulu.d	r6,r11,r7
80006352:	ee 0b 15 02 	lsl	r11,r7,0x2
80006356:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000635a:	a5 8c       	lsr	r12,0x4
8000635c:	ed b7 00 1c 	bld	r7,0x1c
80006360:	c0 40       	breq	80006368 <__avr32_f32_div+0xac>
80006362:	a1 77       	lsl	r7,0x1
80006364:	20 19       	sub	r9,1
80006366:	a1 7c       	lsl	r12,0x1
80006368:	58 09       	cp.w	r9,0
8000636a:	e0 8a 00 42 	brle	800063ee <__avr32_f32_div_res_subnormal>
8000636e:	e0 17 ff e0 	andl	r7,0xffe0
80006372:	e8 17 00 10 	orl	r7,0x10
80006376:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000637a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000637e:	58 0a       	cp.w	r10,0

80006380 <__avr32_f32_div_round_subnormal>:
80006380:	f8 0b 13 00 	cpc	r11,r12
80006384:	5f 3b       	srlo	r11
80006386:	ea 0b 17 00 	moveq	r11,r5
8000638a:	ee 0c 16 05 	lsr	r12,r7,0x5
8000638e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80006392:	bb 07       	ld.d	r6,sp++
80006394:	1b 05       	ld.w	r5,sp++
80006396:	ed b8 00 1f 	bld	r8,0x1f
8000639a:	ef bc 00 1f 	bst	r12,0x1f
8000639e:	16 0c       	add	r12,r11
800063a0:	5e fc       	retal	r12

800063a2 <__divsf_return_op1>:
800063a2:	a1 78       	lsl	r8,0x1
800063a4:	5d 0c       	ror	r12
800063a6:	5e fc       	retal	r12
800063a8:	5e 1e       	retne	-1
800063aa:	fc 19 ff 00 	movh	r9,0xff00
800063ae:	12 3b       	cp.w	r11,r9
800063b0:	cf 93       	brcs	800063a2 <__divsf_return_op1>
800063b2:	5e fe       	retal	-1
800063b4:	5e 0d       	reteq	0
800063b6:	5e fe       	retal	-1
800063b8:	18 7c       	tst	r12,r12
800063ba:	5e 0e       	reteq	-1
800063bc:	f8 09 16 18 	lsr	r9,r12,0x18
800063c0:	c0 70       	breq	800063ce <__divsf_return_op1+0x2c>
800063c2:	e0 49 00 ff 	cp.w	r9,255
800063c6:	cf 12       	brcc	800063a8 <__divsf_return_op1+0x6>
800063c8:	fc 1c ff 00 	movh	r12,0xff00
800063cc:	ce bb       	rjmp	800063a2 <__divsf_return_op1>
800063ce:	a7 7c       	lsl	r12,0x7
800063d0:	f8 09 12 00 	clz	r9,r12
800063d4:	f8 09 09 4c 	lsl	r12,r12,r9
800063d8:	f2 09 11 01 	rsub	r9,r9,1
800063dc:	c8 1b       	rjmp	800062de <__avr32_f32_div+0x22>
800063de:	a7 7b       	lsl	r11,0x7
800063e0:	f6 0a 12 00 	clz	r10,r11
800063e4:	f6 0a 09 4b 	lsl	r11,r11,r10
800063e8:	f4 0a 11 01 	rsub	r10,r10,1
800063ec:	c8 5b       	rjmp	800062f6 <__avr32_f32_div+0x3a>

800063ee <__avr32_f32_div_res_subnormal>:
800063ee:	5c 39       	neg	r9
800063f0:	2f f9       	sub	r9,-1
800063f2:	f1 b9 04 a0 	satu	r9,0x5
800063f6:	f2 0a 11 20 	rsub	r10,r9,32
800063fa:	ee 09 0a 47 	lsr	r7,r7,r9
800063fe:	f8 0a 09 46 	lsl	r6,r12,r10
80006402:	f8 09 0a 4c 	lsr	r12,r12,r9
80006406:	e0 17 ff e0 	andl	r7,0xffe0
8000640a:	e8 17 00 10 	orl	r7,0x10
8000640e:	ea 07 06 4a 	mulu.d	r10,r5,r7
80006412:	30 09       	mov	r9,0
80006414:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80006418:	0c 3a       	cp.w	r10,r6
8000641a:	cb 3b       	rjmp	80006380 <__avr32_f32_div_round_subnormal>

8000641c <__avr32_f32_sub_from_add>:
8000641c:	ee 1b 80 00 	eorh	r11,0x8000

80006420 <__avr32_f32_sub>:
80006420:	f7 ec 20 08 	eor	r8,r11,r12
80006424:	c6 46       	brmi	800064ec <__avr32_f32_add_from_sub>
80006426:	18 98       	mov	r8,r12
80006428:	e6 1c 80 00 	andh	r12,0x8000,COH
8000642c:	bf db       	cbr	r11,0x1f
8000642e:	bf d8       	cbr	r8,0x1f
80006430:	f0 0b 0c 4a 	max	r10,r8,r11
80006434:	f0 0b 0d 49 	min	r9,r8,r11
80006438:	10 3a       	cp.w	r10,r8
8000643a:	f7 bc 01 01 	subne	r12,1
8000643e:	e6 1c 80 00 	andh	r12,0x8000,COH
80006442:	f4 08 15 08 	lsl	r8,r10,0x8
80006446:	bf b8       	sbr	r8,0x1f
80006448:	b7 9a       	lsr	r10,0x17
8000644a:	e0 4a 00 ff 	cp.w	r10,255
8000644e:	c3 80       	breq	800064be <__avr32_f32_sub_op1_nan_or_inf>
80006450:	f2 0b 15 08 	lsl	r11,r9,0x8
80006454:	bf bb       	sbr	r11,0x1f
80006456:	b7 99       	lsr	r9,0x17
80006458:	1a dc       	st.w	--sp,r12
8000645a:	c2 90       	breq	800064ac <__avr32_f32_sub_op2_subnormal>
8000645c:	f4 09 01 0c 	sub	r12,r10,r9
80006460:	c0 c0       	breq	80006478 <__avr32_f32_sub_shift_done>
80006462:	f1 bc 04 a0 	satu	r12,0x5
80006466:	f8 09 11 20 	rsub	r9,r12,32
8000646a:	f6 09 09 49 	lsl	r9,r11,r9
8000646e:	f7 b8 01 01 	subne	r8,1
80006472:	5f 19       	srne	r9
80006474:	f6 0c 0a 4b 	lsr	r11,r11,r12

80006478 <__avr32_f32_sub_shift_done>:
80006478:	16 18       	sub	r8,r11
8000647a:	1b 0c       	ld.w	r12,sp++
8000647c:	f0 0b 12 00 	clz	r11,r8
80006480:	5e 3d       	retlo	0
80006482:	f0 0b 09 48 	lsl	r8,r8,r11
80006486:	16 1a       	sub	r10,r11
80006488:	e0 8a 00 26 	brle	800064d4 <__avr32_f32_sub_subnormal_result>
8000648c:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80006490:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80006494:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80006498 <__avr32_f32_sub_round>:
80006498:	fc 1a 80 00 	movh	r10,0x8000
8000649c:	ed bc 00 00 	bld	r12,0x0
800064a0:	f7 ba 01 ff 	subne	r10,-1
800064a4:	14 39       	cp.w	r9,r10
800064a6:	f7 bc 02 ff 	subhs	r12,-1
800064aa:	5e fc       	retal	r12

800064ac <__avr32_f32_sub_op2_subnormal>:
800064ac:	bf db       	cbr	r11,0x1f
800064ae:	f9 b9 01 01 	movne	r9,1
800064b2:	58 0a       	cp.w	r10,0
800064b4:	cd 41       	brne	8000645c <__avr32_f32_sub+0x3c>
800064b6:	bf d8       	cbr	r8,0x1f
800064b8:	f9 ba 01 01 	movne	r10,1
800064bc:	cd 0b       	rjmp	8000645c <__avr32_f32_sub+0x3c>

800064be <__avr32_f32_sub_op1_nan_or_inf>:
800064be:	f0 0b 15 01 	lsl	r11,r8,0x1
800064c2:	5e 1e       	retne	-1
800064c4:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800064c8:	f2 0b 16 17 	lsr	r11,r9,0x17
800064cc:	e0 4b 00 ff 	cp.w	r11,255
800064d0:	5e 1c       	retne	r12
800064d2:	5e fe       	retal	-1

800064d4 <__avr32_f32_sub_subnormal_result>:
800064d4:	f4 0a 11 09 	rsub	r10,r10,9
800064d8:	f4 0b 11 20 	rsub	r11,r10,32
800064dc:	5e 3d       	retlo	0
800064de:	f0 0a 0a 4a 	lsr	r10,r8,r10
800064e2:	14 4c       	or	r12,r10
800064e4:	f0 0b 09 48 	lsl	r8,r8,r11
800064e8:	10 49       	or	r9,r8
800064ea:	cd 7b       	rjmp	80006498 <__avr32_f32_sub_round>

800064ec <__avr32_f32_add_from_sub>:
800064ec:	ee 1b 80 00 	eorh	r11,0x8000

800064f0 <__avr32_f32_add>:
800064f0:	f7 ec 20 08 	eor	r8,r11,r12
800064f4:	c9 46       	brmi	8000641c <__avr32_f32_sub_from_add>
800064f6:	18 98       	mov	r8,r12
800064f8:	e6 1c 80 00 	andh	r12,0x8000,COH
800064fc:	bf db       	cbr	r11,0x1f
800064fe:	bf d8       	cbr	r8,0x1f
80006500:	f0 0b 0c 4a 	max	r10,r8,r11
80006504:	f0 0b 0d 49 	min	r9,r8,r11
80006508:	f4 08 15 08 	lsl	r8,r10,0x8
8000650c:	bf b8       	sbr	r8,0x1f
8000650e:	b7 9a       	lsr	r10,0x17
80006510:	e0 4a 00 ff 	cp.w	r10,255
80006514:	c2 d0       	breq	8000656e <__avr32_f32_add_op1_nan_or_inf>
80006516:	f2 0b 15 08 	lsl	r11,r9,0x8
8000651a:	bf bb       	sbr	r11,0x1f
8000651c:	b7 99       	lsr	r9,0x17
8000651e:	c1 e0       	breq	8000655a <__avr32_f32_add_op2_subnormal>
80006520:	1a dc       	st.w	--sp,r12
80006522:	14 29       	rsub	r9,r10
80006524:	f1 b9 04 a0 	satu	r9,0x5
80006528:	f6 09 0a 4c 	lsr	r12,r11,r9
8000652c:	f2 09 11 18 	rsub	r9,r9,24
80006530:	f6 09 09 4b 	lsl	r11,r11,r9
80006534:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80006538:	18 08       	add	r8,r12
8000653a:	1b 0c       	ld.w	r12,sp++
8000653c:	c2 63       	brcs	80006588 <__avr32_f32_add_res_of>
8000653e:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80006542:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80006546:	fc 1a 80 00 	movh	r10,0x8000
8000654a:	ed bc 00 00 	bld	r12,0x0
8000654e:	f7 ba 01 ff 	subne	r10,-1
80006552:	14 3b       	cp.w	r11,r10
80006554:	f7 bc 02 ff 	subhs	r12,-1
80006558:	5e fc       	retal	r12

8000655a <__avr32_f32_add_op2_subnormal>:
8000655a:	bf db       	cbr	r11,0x1f
8000655c:	f9 b9 01 01 	movne	r9,1
80006560:	58 0a       	cp.w	r10,0
80006562:	cd f1       	brne	80006520 <__avr32_f32_add+0x30>
80006564:	bf d8       	cbr	r8,0x1f
80006566:	10 0b       	add	r11,r8
80006568:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000656c:	5e fc       	retal	r12

8000656e <__avr32_f32_add_op1_nan_or_inf>:
8000656e:	f0 0b 15 01 	lsl	r11,r8,0x1
80006572:	5e 1e       	retne	-1
80006574:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80006578:	f2 0b 16 17 	lsr	r11,r9,0x17
8000657c:	e0 4b 00 ff 	cp.w	r11,255
80006580:	5e 1c       	retne	r12
80006582:	a9 79       	lsl	r9,0x9
80006584:	5e 0c       	reteq	r12
80006586:	5e fe       	retal	-1

80006588 <__avr32_f32_add_res_of>:
80006588:	a1 98       	lsr	r8,0x1
8000658a:	2f fa       	sub	r10,-1
8000658c:	e0 4a 00 ff 	cp.w	r10,255
80006590:	f9 b8 00 00 	moveq	r8,0
80006594:	f9 bb 00 00 	moveq	r11,0
80006598:	cd 3b       	rjmp	8000653e <__avr32_f32_add+0x4e>
8000659a:	d7 03       	nop

8000659c <__avr32_f32_mul>:
8000659c:	18 98       	mov	r8,r12
8000659e:	16 5c       	eor	r12,r11
800065a0:	e6 1c 80 00 	andh	r12,0x8000,COH
800065a4:	bf d8       	cbr	r8,0x1f
800065a6:	c6 60       	breq	80006672 <__avr32_f32_mul_op1_zero>
800065a8:	bf db       	cbr	r11,0x1f
800065aa:	f0 0b 0c 4a 	max	r10,r8,r11
800065ae:	f0 0b 0d 49 	min	r9,r8,r11
800065b2:	f4 08 15 08 	lsl	r8,r10,0x8
800065b6:	bf b8       	sbr	r8,0x1f
800065b8:	b7 9a       	lsr	r10,0x17
800065ba:	e0 4a 00 ff 	cp.w	r10,255
800065be:	c3 d0       	breq	80006638 <__avr32_f32_mul_op1_nan_or_inf>
800065c0:	f2 0b 15 08 	lsl	r11,r9,0x8
800065c4:	bf bb       	sbr	r11,0x1f
800065c6:	b7 99       	lsr	r9,0x17
800065c8:	c2 40       	breq	80006610 <__avr32_f32_mul_op2_subnormal>
800065ca:	14 09       	add	r9,r10
800065cc:	f0 0b 06 4a 	mulu.d	r10,r8,r11
800065d0:	f6 08 15 01 	lsl	r8,r11,0x1
800065d4:	f0 0b 17 20 	movhs	r11,r8
800065d8:	f7 b9 02 01 	subhs	r9,1
800065dc:	a9 8a       	lsr	r10,0x8
800065de:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
800065e2:	27 e9       	sub	r9,126
800065e4:	e0 8a 00 39 	brle	80006656 <__avr32_f32_mul_res_subnormal>
800065e8:	e0 49 00 ff 	cp.w	r9,255
800065ec:	c0 f4       	brge	8000660a <__avr32_f32_mul_round+0x14>
800065ee:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
800065f2:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

800065f6 <__avr32_f32_mul_round>:
800065f6:	fc 18 80 00 	movh	r8,0x8000
800065fa:	ed bc 00 00 	bld	r12,0x0
800065fe:	f7 b8 01 ff 	subne	r8,-1
80006602:	10 3a       	cp.w	r10,r8
80006604:	f7 bc 02 ff 	subhs	r12,-1
80006608:	5e fc       	retal	r12
8000660a:	ea 1c 7f 80 	orh	r12,0x7f80
8000660e:	5e fc       	retal	r12

80006610 <__avr32_f32_mul_op2_subnormal>:
80006610:	bf db       	cbr	r11,0x1f
80006612:	f6 09 12 00 	clz	r9,r11
80006616:	5e 3d       	retlo	0
80006618:	20 89       	sub	r9,8
8000661a:	f6 09 09 4b 	lsl	r11,r11,r9
8000661e:	f2 09 11 01 	rsub	r9,r9,1
80006622:	14 7a       	tst	r10,r10
80006624:	cd 31       	brne	800065ca <__avr32_f32_mul+0x2e>
80006626:	bf d8       	cbr	r8,0x1f
80006628:	f6 0a 12 00 	clz	r10,r11
8000662c:	5e 3d       	retlo	0
8000662e:	f0 0a 09 48 	lsl	r8,r8,r10
80006632:	f4 0a 11 01 	rsub	r10,r10,1
80006636:	cc ab       	rjmp	800065ca <__avr32_f32_mul+0x2e>

80006638 <__avr32_f32_mul_op1_nan_or_inf>:
80006638:	f0 0b 15 01 	lsl	r11,r8,0x1
8000663c:	5e 1e       	retne	-1
8000663e:	12 79       	tst	r9,r9
80006640:	5e 0e       	reteq	-1
80006642:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80006646:	f2 0b 16 17 	lsr	r11,r9,0x17
8000664a:	e0 4b 00 ff 	cp.w	r11,255
8000664e:	5e 1c       	retne	r12
80006650:	a9 79       	lsl	r9,0x9
80006652:	5e 0c       	reteq	r12
80006654:	5e fe       	retal	-1

80006656 <__avr32_f32_mul_res_subnormal>:
80006656:	f2 09 11 09 	rsub	r9,r9,9
8000665a:	f2 08 11 20 	rsub	r8,r9,32
8000665e:	5e 3d       	retlo	0
80006660:	f6 09 0a 49 	lsr	r9,r11,r9
80006664:	12 4c       	or	r12,r9
80006666:	f6 08 09 4b 	lsl	r11,r11,r8
8000666a:	e4 1a 00 ff 	andh	r10,0xff
8000666e:	16 4a       	or	r10,r11
80006670:	cc 3b       	rjmp	800065f6 <__avr32_f32_mul_round>

80006672 <__avr32_f32_mul_op1_zero>:
80006672:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80006676:	e0 4a 00 ff 	cp.w	r10,255
8000667a:	5e 1c       	retne	r12
8000667c:	5e 0e       	reteq	-1

8000667e <__avr32_s32_to_f32>:
8000667e:	58 0c       	cp.w	r12,0
80006680:	5e 0c       	reteq	r12
80006682:	18 9b       	mov	r11,r12
80006684:	5c 4c       	abs	r12
80006686:	e0 6a 00 9e 	mov	r10,158
8000668a:	f8 09 12 00 	clz	r9,r12
8000668e:	12 1a       	sub	r10,r9
80006690:	f8 09 09 4c 	lsl	r12,r12,r9
80006694:	58 0a       	cp.w	r10,0
80006696:	e0 8a 00 15 	brle	800066c0 <__avr32_s32_to_f32_subnormal>
8000669a:	37 f9       	mov	r9,127
8000669c:	ed bc 00 08 	bld	r12,0x8
800066a0:	f7 b9 00 ff 	subeq	r9,-1
800066a4:	12 0c       	add	r12,r9
800066a6:	f7 ba 03 fe 	sublo	r10,-2
800066aa:	ed bc 00 1f 	bld	r12,0x1f
800066ae:	f7 ba 01 01 	subne	r10,1
800066b2:	f8 0c 16 07 	lsr	r12,r12,0x7
800066b6:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
800066ba:	a1 7b       	lsl	r11,0x1
800066bc:	5d 0c       	ror	r12
800066be:	5e fc       	retal	r12

800066c0 <__avr32_s32_to_f32_subnormal>:
800066c0:	f4 0a 11 01 	rsub	r10,r10,1
800066c4:	59 9a       	cp.w	r10,25
800066c6:	f9 bc 02 00 	movhs	r12,0
800066ca:	c1 32       	brcc	800066f0 <__avr32_s32_to_f32_subnormal+0x30>
800066cc:	f4 09 11 20 	rsub	r9,r10,32
800066d0:	f8 09 09 49 	lsl	r9,r12,r9
800066d4:	5f 19       	srne	r9
800066d6:	f8 0a 0a 4c 	lsr	r12,r12,r10
800066da:	12 4c       	or	r12,r9
800066dc:	37 f9       	mov	r9,127
800066de:	ed bc 00 08 	bld	r12,0x8
800066e2:	f7 b9 00 ff 	subeq	r9,-1
800066e6:	12 0c       	add	r12,r9
800066e8:	f8 0c 16 07 	lsr	r12,r12,0x7
800066ec:	a1 7b       	lsl	r11,0x1
800066ee:	5d 0c       	ror	r12
800066f0:	5e fc       	retal	r12

800066f2 <__avr32_f32_to_f64>:
800066f2:	f8 0b 15 01 	lsl	r11,r12,0x1
800066f6:	f9 ba 00 00 	moveq	r10,0
800066fa:	5e 0b       	reteq	r11
800066fc:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80006700:	e0 49 00 ff 	cp.w	r9,255
80006704:	c1 e0       	breq	80006740 <__extendsfdf_return_op1+0x6>
80006706:	a7 7b       	lsl	r11,0x7
80006708:	30 0a       	mov	r10,0
8000670a:	58 09       	cp.w	r9,0
8000670c:	f7 b9 00 ff 	subeq	r9,-1
80006710:	5f 18       	srne	r8
80006712:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80006716:	fe 39 fc 80 	sub	r9,-896
8000671a:	f6 08 12 00 	clz	r8,r11
8000671e:	10 19       	sub	r9,r8
80006720:	f6 08 09 4b 	lsl	r11,r11,r8
80006724:	ed bb 00 1f 	bld	r11,0x1f
80006728:	f7 b9 01 01 	subne	r9,1
8000672c:	ab 9a       	lsr	r10,0xb
8000672e:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80006732:	a1 7b       	lsl	r11,0x1
80006734:	ab 9b       	lsr	r11,0xb
80006736:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000673a <__extendsfdf_return_op1>:
8000673a:	a1 7c       	lsl	r12,0x1
8000673c:	5d 0b       	ror	r11
8000673e:	5e fb       	retal	r11
80006740:	fc 1a ff e0 	movh	r10,0xffe0
80006744:	a9 6b       	lsl	r11,0x8
80006746:	f9 bb 01 ff 	movne	r11,-1
8000674a:	f4 0b 17 00 	moveq	r11,r10
8000674e:	30 0a       	mov	r10,0
80006750:	cf 5b       	rjmp	8000673a <__extendsfdf_return_op1>

80006752 <__avr32_udiv64>:
80006752:	d4 31       	pushm	r0-r7,lr
80006754:	1a 97       	mov	r7,sp
80006756:	20 3d       	sub	sp,12
80006758:	10 9c       	mov	r12,r8
8000675a:	12 9e       	mov	lr,r9
8000675c:	14 93       	mov	r3,r10
8000675e:	58 09       	cp.w	r9,0
80006760:	e0 81 00 bd 	brne	800068da <__avr32_udiv64+0x188>
80006764:	16 38       	cp.w	r8,r11
80006766:	e0 88 00 40 	brls	800067e6 <__avr32_udiv64+0x94>
8000676a:	f0 08 12 00 	clz	r8,r8
8000676e:	c0 d0       	breq	80006788 <__avr32_udiv64+0x36>
80006770:	f6 08 09 4b 	lsl	r11,r11,r8
80006774:	f0 09 11 20 	rsub	r9,r8,32
80006778:	f8 08 09 4c 	lsl	r12,r12,r8
8000677c:	f4 09 0a 49 	lsr	r9,r10,r9
80006780:	f4 08 09 43 	lsl	r3,r10,r8
80006784:	f3 eb 10 0b 	or	r11,r9,r11
80006788:	f8 0e 16 10 	lsr	lr,r12,0x10
8000678c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006790:	f6 0e 0d 00 	divu	r0,r11,lr
80006794:	e6 0b 16 10 	lsr	r11,r3,0x10
80006798:	00 99       	mov	r9,r0
8000679a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000679e:	e0 0a 02 48 	mul	r8,r0,r10
800067a2:	10 3b       	cp.w	r11,r8
800067a4:	c0 a2       	brcc	800067b8 <__avr32_udiv64+0x66>
800067a6:	20 19       	sub	r9,1
800067a8:	18 0b       	add	r11,r12
800067aa:	18 3b       	cp.w	r11,r12
800067ac:	c0 63       	brcs	800067b8 <__avr32_udiv64+0x66>
800067ae:	10 3b       	cp.w	r11,r8
800067b0:	f7 b9 03 01 	sublo	r9,1
800067b4:	f7 dc e3 0b 	addcs	r11,r11,r12
800067b8:	f6 08 01 01 	sub	r1,r11,r8
800067bc:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800067c0:	e2 0e 0d 00 	divu	r0,r1,lr
800067c4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800067c8:	00 98       	mov	r8,r0
800067ca:	e0 0a 02 4a 	mul	r10,r0,r10
800067ce:	14 33       	cp.w	r3,r10
800067d0:	c0 82       	brcc	800067e0 <__avr32_udiv64+0x8e>
800067d2:	20 18       	sub	r8,1
800067d4:	18 03       	add	r3,r12
800067d6:	18 33       	cp.w	r3,r12
800067d8:	c0 43       	brcs	800067e0 <__avr32_udiv64+0x8e>
800067da:	14 33       	cp.w	r3,r10
800067dc:	f7 b8 03 01 	sublo	r8,1
800067e0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800067e4:	cd f8       	rjmp	800069a2 <__avr32_udiv64+0x250>
800067e6:	58 08       	cp.w	r8,0
800067e8:	c0 51       	brne	800067f2 <__avr32_udiv64+0xa0>
800067ea:	30 19       	mov	r9,1
800067ec:	f2 08 0d 08 	divu	r8,r9,r8
800067f0:	10 9c       	mov	r12,r8
800067f2:	f8 06 12 00 	clz	r6,r12
800067f6:	c0 41       	brne	800067fe <__avr32_udiv64+0xac>
800067f8:	18 1b       	sub	r11,r12
800067fa:	30 19       	mov	r9,1
800067fc:	c4 08       	rjmp	8000687c <__avr32_udiv64+0x12a>
800067fe:	ec 01 11 20 	rsub	r1,r6,32
80006802:	f4 01 0a 49 	lsr	r9,r10,r1
80006806:	f8 06 09 4c 	lsl	r12,r12,r6
8000680a:	f6 06 09 48 	lsl	r8,r11,r6
8000680e:	f6 01 0a 41 	lsr	r1,r11,r1
80006812:	f3 e8 10 08 	or	r8,r9,r8
80006816:	f8 03 16 10 	lsr	r3,r12,0x10
8000681a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000681e:	e2 03 0d 00 	divu	r0,r1,r3
80006822:	f0 0b 16 10 	lsr	r11,r8,0x10
80006826:	00 9e       	mov	lr,r0
80006828:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000682c:	e0 05 02 49 	mul	r9,r0,r5
80006830:	12 3b       	cp.w	r11,r9
80006832:	c0 a2       	brcc	80006846 <__avr32_udiv64+0xf4>
80006834:	20 1e       	sub	lr,1
80006836:	18 0b       	add	r11,r12
80006838:	18 3b       	cp.w	r11,r12
8000683a:	c0 63       	brcs	80006846 <__avr32_udiv64+0xf4>
8000683c:	12 3b       	cp.w	r11,r9
8000683e:	f7 be 03 01 	sublo	lr,1
80006842:	f7 dc e3 0b 	addcs	r11,r11,r12
80006846:	12 1b       	sub	r11,r9
80006848:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000684c:	f6 03 0d 02 	divu	r2,r11,r3
80006850:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80006854:	04 99       	mov	r9,r2
80006856:	e4 05 02 4b 	mul	r11,r2,r5
8000685a:	16 38       	cp.w	r8,r11
8000685c:	c0 a2       	brcc	80006870 <__avr32_udiv64+0x11e>
8000685e:	20 19       	sub	r9,1
80006860:	18 08       	add	r8,r12
80006862:	18 38       	cp.w	r8,r12
80006864:	c0 63       	brcs	80006870 <__avr32_udiv64+0x11e>
80006866:	16 38       	cp.w	r8,r11
80006868:	f7 b9 03 01 	sublo	r9,1
8000686c:	f1 dc e3 08 	addcs	r8,r8,r12
80006870:	f4 06 09 43 	lsl	r3,r10,r6
80006874:	f0 0b 01 0b 	sub	r11,r8,r11
80006878:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000687c:	f8 06 16 10 	lsr	r6,r12,0x10
80006880:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80006884:	f6 06 0d 00 	divu	r0,r11,r6
80006888:	e6 0b 16 10 	lsr	r11,r3,0x10
8000688c:	00 9a       	mov	r10,r0
8000688e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006892:	e0 0e 02 48 	mul	r8,r0,lr
80006896:	10 3b       	cp.w	r11,r8
80006898:	c0 a2       	brcc	800068ac <__avr32_udiv64+0x15a>
8000689a:	20 1a       	sub	r10,1
8000689c:	18 0b       	add	r11,r12
8000689e:	18 3b       	cp.w	r11,r12
800068a0:	c0 63       	brcs	800068ac <__avr32_udiv64+0x15a>
800068a2:	10 3b       	cp.w	r11,r8
800068a4:	f7 ba 03 01 	sublo	r10,1
800068a8:	f7 dc e3 0b 	addcs	r11,r11,r12
800068ac:	f6 08 01 01 	sub	r1,r11,r8
800068b0:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800068b4:	e2 06 0d 00 	divu	r0,r1,r6
800068b8:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800068bc:	00 98       	mov	r8,r0
800068be:	e0 0e 02 4b 	mul	r11,r0,lr
800068c2:	16 33       	cp.w	r3,r11
800068c4:	c0 82       	brcc	800068d4 <__avr32_udiv64+0x182>
800068c6:	20 18       	sub	r8,1
800068c8:	18 03       	add	r3,r12
800068ca:	18 33       	cp.w	r3,r12
800068cc:	c0 43       	brcs	800068d4 <__avr32_udiv64+0x182>
800068ce:	16 33       	cp.w	r3,r11
800068d0:	f7 b8 03 01 	sublo	r8,1
800068d4:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800068d8:	c6 98       	rjmp	800069aa <__avr32_udiv64+0x258>
800068da:	16 39       	cp.w	r9,r11
800068dc:	e0 8b 00 65 	brhi	800069a6 <__avr32_udiv64+0x254>
800068e0:	f2 09 12 00 	clz	r9,r9
800068e4:	c0 b1       	brne	800068fa <__avr32_udiv64+0x1a8>
800068e6:	10 3a       	cp.w	r10,r8
800068e8:	5f 2a       	srhs	r10
800068ea:	1c 3b       	cp.w	r11,lr
800068ec:	5f b8       	srhi	r8
800068ee:	10 4a       	or	r10,r8
800068f0:	f2 0a 18 00 	cp.b	r10,r9
800068f4:	c5 90       	breq	800069a6 <__avr32_udiv64+0x254>
800068f6:	30 18       	mov	r8,1
800068f8:	c5 98       	rjmp	800069aa <__avr32_udiv64+0x258>
800068fa:	f0 09 09 46 	lsl	r6,r8,r9
800068fe:	f2 03 11 20 	rsub	r3,r9,32
80006902:	fc 09 09 4e 	lsl	lr,lr,r9
80006906:	f0 03 0a 48 	lsr	r8,r8,r3
8000690a:	f6 09 09 4c 	lsl	r12,r11,r9
8000690e:	f4 03 0a 42 	lsr	r2,r10,r3
80006912:	ef 46 ff f4 	st.w	r7[-12],r6
80006916:	f6 03 0a 43 	lsr	r3,r11,r3
8000691a:	18 42       	or	r2,r12
8000691c:	f1 ee 10 0c 	or	r12,r8,lr
80006920:	f8 01 16 10 	lsr	r1,r12,0x10
80006924:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80006928:	e6 01 0d 04 	divu	r4,r3,r1
8000692c:	e4 03 16 10 	lsr	r3,r2,0x10
80006930:	08 9e       	mov	lr,r4
80006932:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80006936:	e8 06 02 48 	mul	r8,r4,r6
8000693a:	10 33       	cp.w	r3,r8
8000693c:	c0 a2       	brcc	80006950 <__avr32_udiv64+0x1fe>
8000693e:	20 1e       	sub	lr,1
80006940:	18 03       	add	r3,r12
80006942:	18 33       	cp.w	r3,r12
80006944:	c0 63       	brcs	80006950 <__avr32_udiv64+0x1fe>
80006946:	10 33       	cp.w	r3,r8
80006948:	f7 be 03 01 	sublo	lr,1
8000694c:	e7 dc e3 03 	addcs	r3,r3,r12
80006950:	10 13       	sub	r3,r8
80006952:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80006956:	e6 01 0d 00 	divu	r0,r3,r1
8000695a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000695e:	00 98       	mov	r8,r0
80006960:	e0 06 02 46 	mul	r6,r0,r6
80006964:	0c 3b       	cp.w	r11,r6
80006966:	c0 a2       	brcc	8000697a <__avr32_udiv64+0x228>
80006968:	20 18       	sub	r8,1
8000696a:	18 0b       	add	r11,r12
8000696c:	18 3b       	cp.w	r11,r12
8000696e:	c0 63       	brcs	8000697a <__avr32_udiv64+0x228>
80006970:	0c 3b       	cp.w	r11,r6
80006972:	f7 dc e3 0b 	addcs	r11,r11,r12
80006976:	f7 b8 03 01 	sublo	r8,1
8000697a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000697e:	ee f4 ff f4 	ld.w	r4,r7[-12]
80006982:	0c 1b       	sub	r11,r6
80006984:	f0 04 06 42 	mulu.d	r2,r8,r4
80006988:	06 95       	mov	r5,r3
8000698a:	16 35       	cp.w	r5,r11
8000698c:	e0 8b 00 0a 	brhi	800069a0 <__avr32_udiv64+0x24e>
80006990:	5f 0b       	sreq	r11
80006992:	f4 09 09 49 	lsl	r9,r10,r9
80006996:	12 32       	cp.w	r2,r9
80006998:	5f b9       	srhi	r9
8000699a:	f7 e9 00 09 	and	r9,r11,r9
8000699e:	c0 60       	breq	800069aa <__avr32_udiv64+0x258>
800069a0:	20 18       	sub	r8,1
800069a2:	30 09       	mov	r9,0
800069a4:	c0 38       	rjmp	800069aa <__avr32_udiv64+0x258>
800069a6:	30 09       	mov	r9,0
800069a8:	12 98       	mov	r8,r9
800069aa:	10 9a       	mov	r10,r8
800069ac:	12 93       	mov	r3,r9
800069ae:	10 92       	mov	r2,r8
800069b0:	12 9b       	mov	r11,r9
800069b2:	2f dd       	sub	sp,-12
800069b4:	d8 32       	popm	r0-r7,pc
800069b6:	d7 03       	nop

800069b8 <sprintf>:
800069b8:	d4 01       	pushm	lr
800069ba:	21 7d       	sub	sp,92
800069bc:	e0 68 ff ff 	mov	r8,65535
800069c0:	ea 18 7f ff 	orh	r8,0x7fff
800069c4:	50 58       	stdsp	sp[0x14],r8
800069c6:	50 28       	stdsp	sp[0x8],r8
800069c8:	e0 68 02 08 	mov	r8,520
800069cc:	ba 68       	st.h	sp[0xc],r8
800069ce:	3f f8       	mov	r8,-1
800069d0:	ba 78       	st.h	sp[0xe],r8
800069d2:	48 88       	lddpc	r8,800069f0 <sprintf+0x38>
800069d4:	50 4c       	stdsp	sp[0x10],r12
800069d6:	16 9a       	mov	r10,r11
800069d8:	50 0c       	stdsp	sp[0x0],r12
800069da:	fa c9 ff a0 	sub	r9,sp,-96
800069de:	70 0c       	ld.w	r12,r8[0x0]
800069e0:	1a 9b       	mov	r11,sp
800069e2:	ca 7d       	rcall	80006d30 <_vfprintf_r>
800069e4:	30 09       	mov	r9,0
800069e6:	40 08       	lddsp	r8,sp[0x0]
800069e8:	b0 89       	st.b	r8[0x0],r9
800069ea:	2e 9d       	sub	sp,-92
800069ec:	d8 02       	popm	pc
800069ee:	d7 03       	nop
800069f0:	00 00       	add	r0,r0
800069f2:	00 fc       	st.b	--r0,r12

800069f4 <get_arg>:
800069f4:	d4 31       	pushm	r0-r7,lr
800069f6:	20 8d       	sub	sp,32
800069f8:	fa c4 ff bc 	sub	r4,sp,-68
800069fc:	50 4b       	stdsp	sp[0x10],r11
800069fe:	68 2e       	ld.w	lr,r4[0x8]
80006a00:	50 58       	stdsp	sp[0x14],r8
80006a02:	12 96       	mov	r6,r9
80006a04:	7c 0b       	ld.w	r11,lr[0x0]
80006a06:	70 05       	ld.w	r5,r8[0x0]
80006a08:	50 6e       	stdsp	sp[0x18],lr
80006a0a:	58 0b       	cp.w	r11,0
80006a0c:	f4 0b 17 00 	moveq	r11,r10
80006a10:	68 03       	ld.w	r3,r4[0x0]
80006a12:	68 11       	ld.w	r1,r4[0x4]
80006a14:	40 49       	lddsp	r9,sp[0x10]
80006a16:	30 08       	mov	r8,0
80006a18:	c2 e9       	rjmp	80006c74 <get_arg+0x280>
80006a1a:	2f fb       	sub	r11,-1
80006a1c:	32 5c       	mov	r12,37
80006a1e:	17 8a       	ld.ub	r10,r11[0x0]
80006a20:	f8 0a 18 00 	cp.b	r10,r12
80006a24:	5f 1e       	srne	lr
80006a26:	f0 0a 18 00 	cp.b	r10,r8
80006a2a:	5f 1c       	srne	r12
80006a2c:	fd ec 00 0c 	and	r12,lr,r12
80006a30:	f0 0c 18 00 	cp.b	r12,r8
80006a34:	cf 31       	brne	80006a1a <get_arg+0x26>
80006a36:	58 0a       	cp.w	r10,0
80006a38:	e0 80 01 2b 	breq	80006c8e <get_arg+0x29a>
80006a3c:	30 0c       	mov	r12,0
80006a3e:	3f fa       	mov	r10,-1
80006a40:	18 90       	mov	r0,r12
80006a42:	50 3a       	stdsp	sp[0xc],r10
80006a44:	18 94       	mov	r4,r12
80006a46:	18 92       	mov	r2,r12
80006a48:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80006a4c:	16 97       	mov	r7,r11
80006a4e:	50 7c       	stdsp	sp[0x1c],r12
80006a50:	4c ec       	lddpc	r12,80006b88 <get_arg+0x194>
80006a52:	0f 3a       	ld.ub	r10,r7++
80006a54:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80006a58:	40 7c       	lddsp	r12,sp[0x1c]
80006a5a:	1c 0c       	add	r12,lr
80006a5c:	4c ce       	lddpc	lr,80006b8c <get_arg+0x198>
80006a5e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80006a62:	20 1e       	sub	lr,1
80006a64:	50 0e       	stdsp	sp[0x0],lr
80006a66:	4c be       	lddpc	lr,80006b90 <get_arg+0x19c>
80006a68:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80006a6c:	50 7c       	stdsp	sp[0x1c],r12
80006a6e:	40 0c       	lddsp	r12,sp[0x0]
80006a70:	58 7c       	cp.w	r12,7
80006a72:	e0 8b 00 fa 	brhi	80006c66 <get_arg+0x272>
80006a76:	4c 8e       	lddpc	lr,80006b94 <get_arg+0x1a0>
80006a78:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80006a7c:	36 8b       	mov	r11,104
80006a7e:	f6 0a 18 00 	cp.b	r10,r11
80006a82:	e0 80 00 f2 	breq	80006c66 <get_arg+0x272>
80006a86:	37 1b       	mov	r11,113
80006a88:	f6 0a 18 00 	cp.b	r10,r11
80006a8c:	c0 70       	breq	80006a9a <get_arg+0xa6>
80006a8e:	34 cb       	mov	r11,76
80006a90:	f6 0a 18 00 	cp.b	r10,r11
80006a94:	c0 51       	brne	80006a9e <get_arg+0xaa>
80006a96:	a3 b4       	sbr	r4,0x3
80006a98:	ce 78       	rjmp	80006c66 <get_arg+0x272>
80006a9a:	a5 b4       	sbr	r4,0x5
80006a9c:	ce 58       	rjmp	80006c66 <get_arg+0x272>
80006a9e:	08 9a       	mov	r10,r4
80006aa0:	0e 9b       	mov	r11,r7
80006aa2:	a5 aa       	sbr	r10,0x4
80006aa4:	17 3c       	ld.ub	r12,r11++
80006aa6:	a5 b4       	sbr	r4,0x5
80006aa8:	36 ce       	mov	lr,108
80006aaa:	fc 0c 18 00 	cp.b	r12,lr
80006aae:	e0 80 00 dd 	breq	80006c68 <get_arg+0x274>
80006ab2:	14 94       	mov	r4,r10
80006ab4:	cd 98       	rjmp	80006c66 <get_arg+0x272>
80006ab6:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80006aba:	36 7c       	mov	r12,103
80006abc:	f8 0a 18 00 	cp.b	r10,r12
80006ac0:	e0 8b 00 27 	brhi	80006b0e <get_arg+0x11a>
80006ac4:	36 5b       	mov	r11,101
80006ac6:	f6 0a 18 00 	cp.b	r10,r11
80006aca:	c4 82       	brcc	80006b5a <get_arg+0x166>
80006acc:	34 fb       	mov	r11,79
80006ace:	f6 0a 18 00 	cp.b	r10,r11
80006ad2:	c4 80       	breq	80006b62 <get_arg+0x16e>
80006ad4:	e0 8b 00 0c 	brhi	80006aec <get_arg+0xf8>
80006ad8:	34 5b       	mov	r11,69
80006ada:	f6 0a 18 00 	cp.b	r10,r11
80006ade:	c3 e0       	breq	80006b5a <get_arg+0x166>
80006ae0:	34 7b       	mov	r11,71
80006ae2:	f6 0a 18 00 	cp.b	r10,r11
80006ae6:	c3 a0       	breq	80006b5a <get_arg+0x166>
80006ae8:	34 4b       	mov	r11,68
80006aea:	c0 88       	rjmp	80006afa <get_arg+0x106>
80006aec:	35 8b       	mov	r11,88
80006aee:	f6 0a 18 00 	cp.b	r10,r11
80006af2:	c2 c0       	breq	80006b4a <get_arg+0x156>
80006af4:	e0 8b 00 07 	brhi	80006b02 <get_arg+0x10e>
80006af8:	35 5b       	mov	r11,85
80006afa:	f6 0a 18 00 	cp.b	r10,r11
80006afe:	c3 51       	brne	80006b68 <get_arg+0x174>
80006b00:	c3 18       	rjmp	80006b62 <get_arg+0x16e>
80006b02:	36 3b       	mov	r11,99
80006b04:	f6 0a 18 00 	cp.b	r10,r11
80006b08:	c2 f0       	breq	80006b66 <get_arg+0x172>
80006b0a:	36 4b       	mov	r11,100
80006b0c:	c0 e8       	rjmp	80006b28 <get_arg+0x134>
80006b0e:	37 0b       	mov	r11,112
80006b10:	f6 0a 18 00 	cp.b	r10,r11
80006b14:	c2 50       	breq	80006b5e <get_arg+0x16a>
80006b16:	e0 8b 00 0d 	brhi	80006b30 <get_arg+0x13c>
80006b1a:	36 eb       	mov	r11,110
80006b1c:	f6 0a 18 00 	cp.b	r10,r11
80006b20:	c1 f0       	breq	80006b5e <get_arg+0x16a>
80006b22:	e0 8b 00 14 	brhi	80006b4a <get_arg+0x156>
80006b26:	36 9b       	mov	r11,105
80006b28:	f6 0a 18 00 	cp.b	r10,r11
80006b2c:	c1 e1       	brne	80006b68 <get_arg+0x174>
80006b2e:	c0 e8       	rjmp	80006b4a <get_arg+0x156>
80006b30:	37 5b       	mov	r11,117
80006b32:	f6 0a 18 00 	cp.b	r10,r11
80006b36:	c0 a0       	breq	80006b4a <get_arg+0x156>
80006b38:	37 8b       	mov	r11,120
80006b3a:	f6 0a 18 00 	cp.b	r10,r11
80006b3e:	c0 60       	breq	80006b4a <get_arg+0x156>
80006b40:	37 3b       	mov	r11,115
80006b42:	f6 0a 18 00 	cp.b	r10,r11
80006b46:	c1 11       	brne	80006b68 <get_arg+0x174>
80006b48:	c0 b8       	rjmp	80006b5e <get_arg+0x16a>
80006b4a:	ed b4 00 04 	bld	r4,0x4
80006b4e:	c0 a0       	breq	80006b62 <get_arg+0x16e>
80006b50:	ed b4 00 05 	bld	r4,0x5
80006b54:	c0 91       	brne	80006b66 <get_arg+0x172>
80006b56:	30 20       	mov	r0,2
80006b58:	c0 88       	rjmp	80006b68 <get_arg+0x174>
80006b5a:	30 40       	mov	r0,4
80006b5c:	c0 68       	rjmp	80006b68 <get_arg+0x174>
80006b5e:	30 30       	mov	r0,3
80006b60:	c0 48       	rjmp	80006b68 <get_arg+0x174>
80006b62:	30 10       	mov	r0,1
80006b64:	c0 28       	rjmp	80006b68 <get_arg+0x174>
80006b66:	30 00       	mov	r0,0
80006b68:	40 3b       	lddsp	r11,sp[0xc]
80006b6a:	5b fb       	cp.w	r11,-1
80006b6c:	c0 40       	breq	80006b74 <get_arg+0x180>
80006b6e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80006b72:	c7 a8       	rjmp	80006c66 <get_arg+0x272>
80006b74:	58 60       	cp.w	r0,6
80006b76:	e0 8b 00 78 	brhi	80006c66 <get_arg+0x272>
80006b7a:	6c 0a       	ld.w	r10,r6[0x0]
80006b7c:	ea cc ff ff 	sub	r12,r5,-1
80006b80:	48 6e       	lddpc	lr,80006b98 <get_arg+0x1a4>
80006b82:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80006b86:	d7 03       	nop
80006b88:	80 00       	ld.sh	r0,r0[0x0]
80006b8a:	d2 bc       	*unknown*
80006b8c:	80 00       	ld.sh	r0,r0[0x0]
80006b8e:	d1 f4       	*unknown*
80006b90:	80 00       	ld.sh	r0,r0[0x0]
80006b92:	d1 88       	*unknown*
80006b94:	80 00       	ld.sh	r0,r0[0x0]
80006b96:	cf e8       	rjmp	80006d92 <_vfprintf_r+0x62>
80006b98:	80 00       	ld.sh	r0,r0[0x0]
80006b9a:	d0 08       	*unknown*
80006b9c:	f4 cb ff f8 	sub	r11,r10,-8
80006ba0:	8d 0b       	st.w	r6[0x0],r11
80006ba2:	f4 ea 00 00 	ld.d	r10,r10[0]
80006ba6:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80006baa:	c0 f8       	rjmp	80006bc8 <get_arg+0x1d4>
80006bac:	f4 cb ff fc 	sub	r11,r10,-4
80006bb0:	8d 0b       	st.w	r6[0x0],r11
80006bb2:	74 0a       	ld.w	r10,r10[0x0]
80006bb4:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80006bb8:	c0 88       	rjmp	80006bc8 <get_arg+0x1d4>
80006bba:	f4 cb ff f8 	sub	r11,r10,-8
80006bbe:	8d 0b       	st.w	r6[0x0],r11
80006bc0:	f4 ea 00 00 	ld.d	r10,r10[0]
80006bc4:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80006bc8:	0e 9b       	mov	r11,r7
80006bca:	18 95       	mov	r5,r12
80006bcc:	c4 e8       	rjmp	80006c68 <get_arg+0x274>
80006bce:	62 0a       	ld.w	r10,r1[0x0]
80006bd0:	5b fa       	cp.w	r10,-1
80006bd2:	c0 b1       	brne	80006be8 <get_arg+0x1f4>
80006bd4:	50 19       	stdsp	sp[0x4],r9
80006bd6:	50 28       	stdsp	sp[0x8],r8
80006bd8:	e0 6a 00 80 	mov	r10,128
80006bdc:	30 0b       	mov	r11,0
80006bde:	02 9c       	mov	r12,r1
80006be0:	e0 a0 1e 30 	rcall	8000a840 <memset>
80006be4:	40 28       	lddsp	r8,sp[0x8]
80006be6:	40 19       	lddsp	r9,sp[0x4]
80006be8:	e4 cc 00 01 	sub	r12,r2,1
80006bec:	0e 9b       	mov	r11,r7
80006bee:	50 3c       	stdsp	sp[0xc],r12
80006bf0:	f2 0c 0c 49 	max	r9,r9,r12
80006bf4:	c3 a8       	rjmp	80006c68 <get_arg+0x274>
80006bf6:	62 0a       	ld.w	r10,r1[0x0]
80006bf8:	5b fa       	cp.w	r10,-1
80006bfa:	c0 b1       	brne	80006c10 <get_arg+0x21c>
80006bfc:	50 19       	stdsp	sp[0x4],r9
80006bfe:	50 28       	stdsp	sp[0x8],r8
80006c00:	e0 6a 00 80 	mov	r10,128
80006c04:	30 0b       	mov	r11,0
80006c06:	02 9c       	mov	r12,r1
80006c08:	e0 a0 1e 1c 	rcall	8000a840 <memset>
80006c0c:	40 28       	lddsp	r8,sp[0x8]
80006c0e:	40 19       	lddsp	r9,sp[0x4]
80006c10:	20 12       	sub	r2,1
80006c12:	30 0a       	mov	r10,0
80006c14:	0e 9b       	mov	r11,r7
80006c16:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80006c1a:	f2 02 0c 49 	max	r9,r9,r2
80006c1e:	c2 58       	rjmp	80006c68 <get_arg+0x274>
80006c20:	16 97       	mov	r7,r11
80006c22:	6c 0a       	ld.w	r10,r6[0x0]
80006c24:	f4 cb ff fc 	sub	r11,r10,-4
80006c28:	8d 0b       	st.w	r6[0x0],r11
80006c2a:	74 0a       	ld.w	r10,r10[0x0]
80006c2c:	0e 9b       	mov	r11,r7
80006c2e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80006c32:	2f f5       	sub	r5,-1
80006c34:	c1 a8       	rjmp	80006c68 <get_arg+0x274>
80006c36:	f4 c2 00 30 	sub	r2,r10,48
80006c3a:	c0 68       	rjmp	80006c46 <get_arg+0x252>
80006c3c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80006c40:	2f f7       	sub	r7,-1
80006c42:	f4 02 00 12 	add	r2,r10,r2<<0x1
80006c46:	0f 8a       	ld.ub	r10,r7[0x0]
80006c48:	58 0a       	cp.w	r10,0
80006c4a:	c0 e0       	breq	80006c66 <get_arg+0x272>
80006c4c:	23 0a       	sub	r10,48
80006c4e:	58 9a       	cp.w	r10,9
80006c50:	fe 98 ff f6 	brls	80006c3c <get_arg+0x248>
80006c54:	c0 98       	rjmp	80006c66 <get_arg+0x272>
80006c56:	2f f7       	sub	r7,-1
80006c58:	0f 8a       	ld.ub	r10,r7[0x0]
80006c5a:	58 0a       	cp.w	r10,0
80006c5c:	c0 50       	breq	80006c66 <get_arg+0x272>
80006c5e:	23 0a       	sub	r10,48
80006c60:	58 9a       	cp.w	r10,9
80006c62:	fe 98 ff fa 	brls	80006c56 <get_arg+0x262>
80006c66:	0e 9b       	mov	r11,r7
80006c68:	40 7c       	lddsp	r12,sp[0x1c]
80006c6a:	30 ba       	mov	r10,11
80006c6c:	f4 0c 18 00 	cp.b	r12,r10
80006c70:	fe 91 fe ec 	brne	80006a48 <get_arg+0x54>
80006c74:	40 42       	lddsp	r2,sp[0x10]
80006c76:	17 8c       	ld.ub	r12,r11[0x0]
80006c78:	0a 32       	cp.w	r2,r5
80006c7a:	5f 4a       	srge	r10
80006c7c:	f0 0c 18 00 	cp.b	r12,r8
80006c80:	5f 1c       	srne	r12
80006c82:	f9 ea 00 0a 	and	r10,r12,r10
80006c86:	f0 0a 18 00 	cp.b	r10,r8
80006c8a:	fe 91 fe c9 	brne	80006a1c <get_arg+0x28>
80006c8e:	30 08       	mov	r8,0
80006c90:	40 4e       	lddsp	lr,sp[0x10]
80006c92:	17 8a       	ld.ub	r10,r11[0x0]
80006c94:	e2 05 00 21 	add	r1,r1,r5<<0x2
80006c98:	f0 0a 18 00 	cp.b	r10,r8
80006c9c:	fc 09 17 10 	movne	r9,lr
80006ca0:	e6 05 00 38 	add	r8,r3,r5<<0x3
80006ca4:	06 9e       	mov	lr,r3
80006ca6:	c2 a8       	rjmp	80006cfa <get_arg+0x306>
80006ca8:	62 0a       	ld.w	r10,r1[0x0]
80006caa:	58 3a       	cp.w	r10,3
80006cac:	c1 e0       	breq	80006ce8 <get_arg+0x2f4>
80006cae:	e0 89 00 07 	brgt	80006cbc <get_arg+0x2c8>
80006cb2:	58 1a       	cp.w	r10,1
80006cb4:	c1 a0       	breq	80006ce8 <get_arg+0x2f4>
80006cb6:	58 2a       	cp.w	r10,2
80006cb8:	c1 81       	brne	80006ce8 <get_arg+0x2f4>
80006cba:	c0 58       	rjmp	80006cc4 <get_arg+0x2d0>
80006cbc:	58 5a       	cp.w	r10,5
80006cbe:	c0 c0       	breq	80006cd6 <get_arg+0x2e2>
80006cc0:	c0 b5       	brlt	80006cd6 <get_arg+0x2e2>
80006cc2:	c1 38       	rjmp	80006ce8 <get_arg+0x2f4>
80006cc4:	6c 0a       	ld.w	r10,r6[0x0]
80006cc6:	f4 cc ff f8 	sub	r12,r10,-8
80006cca:	8d 0c       	st.w	r6[0x0],r12
80006ccc:	f4 e2 00 00 	ld.d	r2,r10[0]
80006cd0:	f0 e3 00 00 	st.d	r8[0],r2
80006cd4:	c1 08       	rjmp	80006cf4 <get_arg+0x300>
80006cd6:	6c 0a       	ld.w	r10,r6[0x0]
80006cd8:	f4 cc ff f8 	sub	r12,r10,-8
80006cdc:	8d 0c       	st.w	r6[0x0],r12
80006cde:	f4 e2 00 00 	ld.d	r2,r10[0]
80006ce2:	f0 e3 00 00 	st.d	r8[0],r2
80006ce6:	c0 78       	rjmp	80006cf4 <get_arg+0x300>
80006ce8:	6c 0a       	ld.w	r10,r6[0x0]
80006cea:	f4 cc ff fc 	sub	r12,r10,-4
80006cee:	8d 0c       	st.w	r6[0x0],r12
80006cf0:	74 0a       	ld.w	r10,r10[0x0]
80006cf2:	91 0a       	st.w	r8[0x0],r10
80006cf4:	2f f5       	sub	r5,-1
80006cf6:	2f 88       	sub	r8,-8
80006cf8:	2f c1       	sub	r1,-4
80006cfa:	12 35       	cp.w	r5,r9
80006cfc:	fe 9a ff d6 	brle	80006ca8 <get_arg+0x2b4>
80006d00:	1c 93       	mov	r3,lr
80006d02:	40 52       	lddsp	r2,sp[0x14]
80006d04:	40 6e       	lddsp	lr,sp[0x18]
80006d06:	85 05       	st.w	r2[0x0],r5
80006d08:	9d 0b       	st.w	lr[0x0],r11
80006d0a:	40 4b       	lddsp	r11,sp[0x10]
80006d0c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80006d10:	2f 8d       	sub	sp,-32
80006d12:	d8 32       	popm	r0-r7,pc

80006d14 <__sprint_r>:
80006d14:	d4 21       	pushm	r4-r7,lr
80006d16:	14 97       	mov	r7,r10
80006d18:	74 28       	ld.w	r8,r10[0x8]
80006d1a:	58 08       	cp.w	r8,0
80006d1c:	c0 41       	brne	80006d24 <__sprint_r+0x10>
80006d1e:	95 18       	st.w	r10[0x4],r8
80006d20:	10 9c       	mov	r12,r8
80006d22:	d8 22       	popm	r4-r7,pc
80006d24:	e0 a0 18 ca 	rcall	80009eb8 <__sfvwrite_r>
80006d28:	30 08       	mov	r8,0
80006d2a:	8f 18       	st.w	r7[0x4],r8
80006d2c:	8f 28       	st.w	r7[0x8],r8
80006d2e:	d8 22       	popm	r4-r7,pc

80006d30 <_vfprintf_r>:
80006d30:	d4 31       	pushm	r0-r7,lr
80006d32:	fa cd 06 bc 	sub	sp,sp,1724
80006d36:	51 09       	stdsp	sp[0x40],r9
80006d38:	16 91       	mov	r1,r11
80006d3a:	14 97       	mov	r7,r10
80006d3c:	18 95       	mov	r5,r12
80006d3e:	e0 a0 1a 33 	rcall	8000a1a4 <_localeconv_r>
80006d42:	78 0c       	ld.w	r12,r12[0x0]
80006d44:	50 cc       	stdsp	sp[0x30],r12
80006d46:	58 05       	cp.w	r5,0
80006d48:	c0 70       	breq	80006d56 <_vfprintf_r+0x26>
80006d4a:	6a 68       	ld.w	r8,r5[0x18]
80006d4c:	58 08       	cp.w	r8,0
80006d4e:	c0 41       	brne	80006d56 <_vfprintf_r+0x26>
80006d50:	0a 9c       	mov	r12,r5
80006d52:	e0 a0 17 4f 	rcall	80009bf0 <__sinit>
80006d56:	4d 08       	lddpc	r8,80006e94 <_vfprintf_r+0x164>
80006d58:	10 31       	cp.w	r1,r8
80006d5a:	c0 31       	brne	80006d60 <_vfprintf_r+0x30>
80006d5c:	6a 01       	ld.w	r1,r5[0x0]
80006d5e:	c0 a8       	rjmp	80006d72 <_vfprintf_r+0x42>
80006d60:	4c e8       	lddpc	r8,80006e98 <_vfprintf_r+0x168>
80006d62:	10 31       	cp.w	r1,r8
80006d64:	c0 31       	brne	80006d6a <_vfprintf_r+0x3a>
80006d66:	6a 11       	ld.w	r1,r5[0x4]
80006d68:	c0 58       	rjmp	80006d72 <_vfprintf_r+0x42>
80006d6a:	4c d8       	lddpc	r8,80006e9c <_vfprintf_r+0x16c>
80006d6c:	10 31       	cp.w	r1,r8
80006d6e:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80006d72:	82 68       	ld.sh	r8,r1[0xc]
80006d74:	ed b8 00 03 	bld	r8,0x3
80006d78:	c0 41       	brne	80006d80 <_vfprintf_r+0x50>
80006d7a:	62 48       	ld.w	r8,r1[0x10]
80006d7c:	58 08       	cp.w	r8,0
80006d7e:	c0 71       	brne	80006d8c <_vfprintf_r+0x5c>
80006d80:	02 9b       	mov	r11,r1
80006d82:	0a 9c       	mov	r12,r5
80006d84:	e0 a0 0f 6c 	rcall	80008c5c <__swsetup_r>
80006d88:	e0 81 0f 63 	brne	80008c4e <_vfprintf_r+0x1f1e>
80006d8c:	82 68       	ld.sh	r8,r1[0xc]
80006d8e:	10 99       	mov	r9,r8
80006d90:	e2 19 00 1a 	andl	r9,0x1a,COH
80006d94:	58 a9       	cp.w	r9,10
80006d96:	c3 c1       	brne	80006e0e <_vfprintf_r+0xde>
80006d98:	82 79       	ld.sh	r9,r1[0xe]
80006d9a:	30 0a       	mov	r10,0
80006d9c:	f4 09 19 00 	cp.h	r9,r10
80006da0:	c3 75       	brlt	80006e0e <_vfprintf_r+0xde>
80006da2:	a1 d8       	cbr	r8,0x1
80006da4:	fb 58 05 d0 	st.h	sp[1488],r8
80006da8:	62 88       	ld.w	r8,r1[0x20]
80006daa:	fb 48 05 e4 	st.w	sp[1508],r8
80006dae:	62 a8       	ld.w	r8,r1[0x28]
80006db0:	fb 48 05 ec 	st.w	sp[1516],r8
80006db4:	fa c8 ff bc 	sub	r8,sp,-68
80006db8:	fb 48 05 d4 	st.w	sp[1492],r8
80006dbc:	fb 48 05 c4 	st.w	sp[1476],r8
80006dc0:	e0 68 04 00 	mov	r8,1024
80006dc4:	fb 48 05 d8 	st.w	sp[1496],r8
80006dc8:	fb 48 05 cc 	st.w	sp[1484],r8
80006dcc:	30 08       	mov	r8,0
80006dce:	fb 59 05 d2 	st.h	sp[1490],r9
80006dd2:	0e 9a       	mov	r10,r7
80006dd4:	41 09       	lddsp	r9,sp[0x40]
80006dd6:	fa c7 fa 3c 	sub	r7,sp,-1476
80006dda:	fb 48 05 dc 	st.w	sp[1500],r8
80006dde:	0a 9c       	mov	r12,r5
80006de0:	0e 9b       	mov	r11,r7
80006de2:	ca 7f       	rcall	80006d30 <_vfprintf_r>
80006de4:	50 bc       	stdsp	sp[0x2c],r12
80006de6:	c0 95       	brlt	80006df8 <_vfprintf_r+0xc8>
80006de8:	0e 9b       	mov	r11,r7
80006dea:	0a 9c       	mov	r12,r5
80006dec:	e0 a0 16 26 	rcall	80009a38 <_fflush_r>
80006df0:	40 be       	lddsp	lr,sp[0x2c]
80006df2:	f9 be 01 ff 	movne	lr,-1
80006df6:	50 be       	stdsp	sp[0x2c],lr
80006df8:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80006dfc:	ed b8 00 06 	bld	r8,0x6
80006e00:	e0 81 0f 29 	brne	80008c52 <_vfprintf_r+0x1f22>
80006e04:	82 68       	ld.sh	r8,r1[0xc]
80006e06:	a7 a8       	sbr	r8,0x6
80006e08:	a2 68       	st.h	r1[0xc],r8
80006e0a:	e0 8f 0f 24 	bral	80008c52 <_vfprintf_r+0x1f22>
80006e0e:	30 08       	mov	r8,0
80006e10:	fb 48 06 b4 	st.w	sp[1716],r8
80006e14:	fb 48 06 90 	st.w	sp[1680],r8
80006e18:	fb 48 06 8c 	st.w	sp[1676],r8
80006e1c:	fb 48 06 b0 	st.w	sp[1712],r8
80006e20:	30 08       	mov	r8,0
80006e22:	30 09       	mov	r9,0
80006e24:	50 a7       	stdsp	sp[0x28],r7
80006e26:	50 78       	stdsp	sp[0x1c],r8
80006e28:	fa c3 f9 e0 	sub	r3,sp,-1568
80006e2c:	3f f8       	mov	r8,-1
80006e2e:	50 59       	stdsp	sp[0x14],r9
80006e30:	fb 43 06 88 	st.w	sp[1672],r3
80006e34:	fb 48 05 44 	st.w	sp[1348],r8
80006e38:	12 9c       	mov	r12,r9
80006e3a:	50 69       	stdsp	sp[0x18],r9
80006e3c:	50 d9       	stdsp	sp[0x34],r9
80006e3e:	50 e9       	stdsp	sp[0x38],r9
80006e40:	50 b9       	stdsp	sp[0x2c],r9
80006e42:	12 97       	mov	r7,r9
80006e44:	0a 94       	mov	r4,r5
80006e46:	40 a2       	lddsp	r2,sp[0x28]
80006e48:	32 5a       	mov	r10,37
80006e4a:	30 08       	mov	r8,0
80006e4c:	c0 28       	rjmp	80006e50 <_vfprintf_r+0x120>
80006e4e:	2f f2       	sub	r2,-1
80006e50:	05 89       	ld.ub	r9,r2[0x0]
80006e52:	f0 09 18 00 	cp.b	r9,r8
80006e56:	5f 1b       	srne	r11
80006e58:	f4 09 18 00 	cp.b	r9,r10
80006e5c:	5f 19       	srne	r9
80006e5e:	f3 eb 00 0b 	and	r11,r9,r11
80006e62:	f0 0b 18 00 	cp.b	r11,r8
80006e66:	cf 41       	brne	80006e4e <_vfprintf_r+0x11e>
80006e68:	40 ab       	lddsp	r11,sp[0x28]
80006e6a:	e4 0b 01 06 	sub	r6,r2,r11
80006e6e:	c2 50       	breq	80006eb8 <_vfprintf_r+0x188>
80006e70:	fa f8 06 90 	ld.w	r8,sp[1680]
80006e74:	0c 08       	add	r8,r6
80006e76:	87 0b       	st.w	r3[0x0],r11
80006e78:	fb 48 06 90 	st.w	sp[1680],r8
80006e7c:	87 16       	st.w	r3[0x4],r6
80006e7e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006e82:	2f f8       	sub	r8,-1
80006e84:	fb 48 06 8c 	st.w	sp[1676],r8
80006e88:	58 78       	cp.w	r8,7
80006e8a:	e0 89 00 0b 	brgt	80006ea0 <_vfprintf_r+0x170>
80006e8e:	2f 83       	sub	r3,-8
80006e90:	c1 18       	rjmp	80006eb2 <_vfprintf_r+0x182>
80006e92:	d7 03       	nop
80006e94:	80 00       	ld.sh	r0,r0[0x0]
80006e96:	d3 cc       	*unknown*
80006e98:	80 00       	ld.sh	r0,r0[0x0]
80006e9a:	d3 ec       	*unknown*
80006e9c:	80 00       	ld.sh	r0,r0[0x0]
80006e9e:	d4 0c       	*unknown*
80006ea0:	fa ca f9 78 	sub	r10,sp,-1672
80006ea4:	02 9b       	mov	r11,r1
80006ea6:	08 9c       	mov	r12,r4
80006ea8:	c3 6f       	rcall	80006d14 <__sprint_r>
80006eaa:	e0 81 0e ce 	brne	80008c46 <_vfprintf_r+0x1f16>
80006eae:	fa c3 f9 e0 	sub	r3,sp,-1568
80006eb2:	40 ba       	lddsp	r10,sp[0x2c]
80006eb4:	0c 0a       	add	r10,r6
80006eb6:	50 ba       	stdsp	sp[0x2c],r10
80006eb8:	05 89       	ld.ub	r9,r2[0x0]
80006eba:	30 08       	mov	r8,0
80006ebc:	f0 09 18 00 	cp.b	r9,r8
80006ec0:	e0 80 0e b2 	breq	80008c24 <_vfprintf_r+0x1ef4>
80006ec4:	30 09       	mov	r9,0
80006ec6:	fb 68 06 bb 	st.b	sp[1723],r8
80006eca:	0e 96       	mov	r6,r7
80006ecc:	e4 c8 ff ff 	sub	r8,r2,-1
80006ed0:	3f fe       	mov	lr,-1
80006ed2:	50 93       	stdsp	sp[0x24],r3
80006ed4:	50 41       	stdsp	sp[0x10],r1
80006ed6:	0e 93       	mov	r3,r7
80006ed8:	04 91       	mov	r1,r2
80006eda:	50 89       	stdsp	sp[0x20],r9
80006edc:	50 a8       	stdsp	sp[0x28],r8
80006ede:	50 2e       	stdsp	sp[0x8],lr
80006ee0:	50 39       	stdsp	sp[0xc],r9
80006ee2:	12 95       	mov	r5,r9
80006ee4:	12 90       	mov	r0,r9
80006ee6:	10 97       	mov	r7,r8
80006ee8:	08 92       	mov	r2,r4
80006eea:	c0 78       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80006eec:	3f fc       	mov	r12,-1
80006eee:	08 97       	mov	r7,r4
80006ef0:	50 2c       	stdsp	sp[0x8],r12
80006ef2:	c0 38       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80006ef4:	30 0b       	mov	r11,0
80006ef6:	50 3b       	stdsp	sp[0xc],r11
80006ef8:	0f 38       	ld.ub	r8,r7++
80006efa:	c0 28       	rjmp	80006efe <_vfprintf_r+0x1ce>
80006efc:	12 90       	mov	r0,r9
80006efe:	f0 c9 00 20 	sub	r9,r8,32
80006f02:	e0 49 00 58 	cp.w	r9,88
80006f06:	e0 8b 0a 36 	brhi	80008372 <_vfprintf_r+0x1642>
80006f0a:	4d 9a       	lddpc	r10,8000706c <_vfprintf_r+0x33c>
80006f0c:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80006f10:	50 a7       	stdsp	sp[0x28],r7
80006f12:	50 80       	stdsp	sp[0x20],r0
80006f14:	0c 97       	mov	r7,r6
80006f16:	04 94       	mov	r4,r2
80006f18:	06 96       	mov	r6,r3
80006f1a:	02 92       	mov	r2,r1
80006f1c:	4d 59       	lddpc	r9,80007070 <_vfprintf_r+0x340>
80006f1e:	40 93       	lddsp	r3,sp[0x24]
80006f20:	10 90       	mov	r0,r8
80006f22:	40 41       	lddsp	r1,sp[0x10]
80006f24:	50 d9       	stdsp	sp[0x34],r9
80006f26:	e0 8f 08 95 	bral	80008050 <_vfprintf_r+0x1320>
80006f2a:	30 08       	mov	r8,0
80006f2c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80006f30:	f0 09 18 00 	cp.b	r9,r8
80006f34:	ce 21       	brne	80006ef8 <_vfprintf_r+0x1c8>
80006f36:	32 08       	mov	r8,32
80006f38:	c6 e8       	rjmp	80007014 <_vfprintf_r+0x2e4>
80006f3a:	a1 a5       	sbr	r5,0x0
80006f3c:	cd eb       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80006f3e:	0f 89       	ld.ub	r9,r7[0x0]
80006f40:	f2 c8 00 30 	sub	r8,r9,48
80006f44:	58 98       	cp.w	r8,9
80006f46:	e0 8b 00 1d 	brhi	80006f80 <_vfprintf_r+0x250>
80006f4a:	ee c8 ff ff 	sub	r8,r7,-1
80006f4e:	30 0b       	mov	r11,0
80006f50:	23 09       	sub	r9,48
80006f52:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80006f56:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80006f5a:	11 39       	ld.ub	r9,r8++
80006f5c:	f2 ca 00 30 	sub	r10,r9,48
80006f60:	58 9a       	cp.w	r10,9
80006f62:	fe 98 ff f7 	brls	80006f50 <_vfprintf_r+0x220>
80006f66:	e0 49 00 24 	cp.w	r9,36
80006f6a:	cc 51       	brne	80006ef4 <_vfprintf_r+0x1c4>
80006f6c:	e0 4b 00 20 	cp.w	r11,32
80006f70:	e0 89 0e 6a 	brgt	80008c44 <_vfprintf_r+0x1f14>
80006f74:	20 1b       	sub	r11,1
80006f76:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006f7a:	12 3b       	cp.w	r11,r9
80006f7c:	c0 95       	brlt	80006f8e <_vfprintf_r+0x25e>
80006f7e:	c1 08       	rjmp	80006f9e <_vfprintf_r+0x26e>
80006f80:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006f84:	ec ca ff ff 	sub	r10,r6,-1
80006f88:	12 36       	cp.w	r6,r9
80006f8a:	c1 f5       	brlt	80006fc8 <_vfprintf_r+0x298>
80006f8c:	c2 68       	rjmp	80006fd8 <_vfprintf_r+0x2a8>
80006f8e:	fa ce f9 44 	sub	lr,sp,-1724
80006f92:	10 97       	mov	r7,r8
80006f94:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80006f98:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80006f9c:	c3 58       	rjmp	80007006 <_vfprintf_r+0x2d6>
80006f9e:	10 97       	mov	r7,r8
80006fa0:	fa c8 f9 50 	sub	r8,sp,-1712
80006fa4:	1a d8       	st.w	--sp,r8
80006fa6:	fa c8 fa b8 	sub	r8,sp,-1352
80006faa:	1a d8       	st.w	--sp,r8
80006fac:	fa c8 fb b4 	sub	r8,sp,-1100
80006fb0:	02 9a       	mov	r10,r1
80006fb2:	1a d8       	st.w	--sp,r8
80006fb4:	04 9c       	mov	r12,r2
80006fb6:	fa c8 f9 40 	sub	r8,sp,-1728
80006fba:	fa c9 ff b4 	sub	r9,sp,-76
80006fbe:	fe b0 fd 1b 	rcall	800069f4 <get_arg>
80006fc2:	2f dd       	sub	sp,-12
80006fc4:	78 00       	ld.w	r0,r12[0x0]
80006fc6:	c2 08       	rjmp	80007006 <_vfprintf_r+0x2d6>
80006fc8:	fa cc f9 44 	sub	r12,sp,-1724
80006fcc:	14 96       	mov	r6,r10
80006fce:	f8 03 00 38 	add	r8,r12,r3<<0x3
80006fd2:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80006fd6:	c1 88       	rjmp	80007006 <_vfprintf_r+0x2d6>
80006fd8:	41 08       	lddsp	r8,sp[0x40]
80006fda:	59 f9       	cp.w	r9,31
80006fdc:	e0 89 00 11 	brgt	80006ffe <_vfprintf_r+0x2ce>
80006fe0:	f0 cb ff fc 	sub	r11,r8,-4
80006fe4:	51 0b       	stdsp	sp[0x40],r11
80006fe6:	70 00       	ld.w	r0,r8[0x0]
80006fe8:	fa cb f9 44 	sub	r11,sp,-1724
80006fec:	f6 09 00 38 	add	r8,r11,r9<<0x3
80006ff0:	f1 40 fd 88 	st.w	r8[-632],r0
80006ff4:	2f f9       	sub	r9,-1
80006ff6:	14 96       	mov	r6,r10
80006ff8:	fb 49 06 b4 	st.w	sp[1716],r9
80006ffc:	c0 58       	rjmp	80007006 <_vfprintf_r+0x2d6>
80006ffe:	70 00       	ld.w	r0,r8[0x0]
80007000:	14 96       	mov	r6,r10
80007002:	2f c8       	sub	r8,-4
80007004:	51 08       	stdsp	sp[0x40],r8
80007006:	58 00       	cp.w	r0,0
80007008:	fe 94 ff 78 	brge	80006ef8 <_vfprintf_r+0x1c8>
8000700c:	5c 30       	neg	r0
8000700e:	a3 a5       	sbr	r5,0x2
80007010:	c7 4b       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80007012:	32 b8       	mov	r8,43
80007014:	fb 68 06 bb 	st.b	sp[1723],r8
80007018:	c7 0b       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
8000701a:	0f 38       	ld.ub	r8,r7++
8000701c:	e0 48 00 2a 	cp.w	r8,42
80007020:	c0 30       	breq	80007026 <_vfprintf_r+0x2f6>
80007022:	30 09       	mov	r9,0
80007024:	c7 d8       	rjmp	8000711e <_vfprintf_r+0x3ee>
80007026:	0f 88       	ld.ub	r8,r7[0x0]
80007028:	f0 c9 00 30 	sub	r9,r8,48
8000702c:	58 99       	cp.w	r9,9
8000702e:	e0 8b 00 23 	brhi	80007074 <_vfprintf_r+0x344>
80007032:	ee c4 ff ff 	sub	r4,r7,-1
80007036:	30 0b       	mov	r11,0
80007038:	23 08       	sub	r8,48
8000703a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000703e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80007042:	09 38       	ld.ub	r8,r4++
80007044:	f0 c9 00 30 	sub	r9,r8,48
80007048:	58 99       	cp.w	r9,9
8000704a:	fe 98 ff f7 	brls	80007038 <_vfprintf_r+0x308>
8000704e:	e0 48 00 24 	cp.w	r8,36
80007052:	fe 91 ff 51 	brne	80006ef4 <_vfprintf_r+0x1c4>
80007056:	e0 4b 00 20 	cp.w	r11,32
8000705a:	e0 89 0d f5 	brgt	80008c44 <_vfprintf_r+0x1f14>
8000705e:	20 1b       	sub	r11,1
80007060:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007064:	10 3b       	cp.w	r11,r8
80007066:	c0 e5       	brlt	80007082 <_vfprintf_r+0x352>
80007068:	c1 58       	rjmp	80007092 <_vfprintf_r+0x362>
8000706a:	d7 03       	nop
8000706c:	80 00       	ld.sh	r0,r0[0x0]
8000706e:	d0 24       	*unknown*
80007070:	80 00       	ld.sh	r0,r0[0x0]
80007072:	d2 60       	acall	0x26
80007074:	fa fa 06 b4 	ld.w	r10,sp[1716]
80007078:	ec c9 ff ff 	sub	r9,r6,-1
8000707c:	14 36       	cp.w	r6,r10
8000707e:	c1 f5       	brlt	800070bc <_vfprintf_r+0x38c>
80007080:	c2 88       	rjmp	800070d0 <_vfprintf_r+0x3a0>
80007082:	fa ca f9 44 	sub	r10,sp,-1724
80007086:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000708a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000708e:	50 2b       	stdsp	sp[0x8],r11
80007090:	c3 c8       	rjmp	80007108 <_vfprintf_r+0x3d8>
80007092:	fa c8 f9 50 	sub	r8,sp,-1712
80007096:	1a d8       	st.w	--sp,r8
80007098:	fa c8 fa b8 	sub	r8,sp,-1352
8000709c:	1a d8       	st.w	--sp,r8
8000709e:	fa c8 fb b4 	sub	r8,sp,-1100
800070a2:	02 9a       	mov	r10,r1
800070a4:	1a d8       	st.w	--sp,r8
800070a6:	04 9c       	mov	r12,r2
800070a8:	fa c8 f9 40 	sub	r8,sp,-1728
800070ac:	fa c9 ff b4 	sub	r9,sp,-76
800070b0:	fe b0 fc a2 	rcall	800069f4 <get_arg>
800070b4:	2f dd       	sub	sp,-12
800070b6:	78 0c       	ld.w	r12,r12[0x0]
800070b8:	50 2c       	stdsp	sp[0x8],r12
800070ba:	c2 78       	rjmp	80007108 <_vfprintf_r+0x3d8>
800070bc:	12 96       	mov	r6,r9
800070be:	0e 94       	mov	r4,r7
800070c0:	fa c9 f9 44 	sub	r9,sp,-1724
800070c4:	f2 03 00 38 	add	r8,r9,r3<<0x3
800070c8:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800070cc:	50 28       	stdsp	sp[0x8],r8
800070ce:	c1 d8       	rjmp	80007108 <_vfprintf_r+0x3d8>
800070d0:	41 08       	lddsp	r8,sp[0x40]
800070d2:	59 fa       	cp.w	r10,31
800070d4:	e0 89 00 14 	brgt	800070fc <_vfprintf_r+0x3cc>
800070d8:	f0 cb ff fc 	sub	r11,r8,-4
800070dc:	70 08       	ld.w	r8,r8[0x0]
800070de:	51 0b       	stdsp	sp[0x40],r11
800070e0:	50 28       	stdsp	sp[0x8],r8
800070e2:	fa c6 f9 44 	sub	r6,sp,-1724
800070e6:	40 2e       	lddsp	lr,sp[0x8]
800070e8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
800070ec:	f1 4e fd 88 	st.w	r8[-632],lr
800070f0:	2f fa       	sub	r10,-1
800070f2:	0e 94       	mov	r4,r7
800070f4:	fb 4a 06 b4 	st.w	sp[1716],r10
800070f8:	12 96       	mov	r6,r9
800070fa:	c0 78       	rjmp	80007108 <_vfprintf_r+0x3d8>
800070fc:	70 0c       	ld.w	r12,r8[0x0]
800070fe:	0e 94       	mov	r4,r7
80007100:	2f c8       	sub	r8,-4
80007102:	50 2c       	stdsp	sp[0x8],r12
80007104:	12 96       	mov	r6,r9
80007106:	51 08       	stdsp	sp[0x40],r8
80007108:	40 2b       	lddsp	r11,sp[0x8]
8000710a:	58 0b       	cp.w	r11,0
8000710c:	fe 95 fe f0 	brlt	80006eec <_vfprintf_r+0x1bc>
80007110:	08 97       	mov	r7,r4
80007112:	cf 3a       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80007114:	f2 09 00 29 	add	r9,r9,r9<<0x2
80007118:	0f 38       	ld.ub	r8,r7++
8000711a:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000711e:	f0 ca 00 30 	sub	r10,r8,48
80007122:	58 9a       	cp.w	r10,9
80007124:	fe 98 ff f8 	brls	80007114 <_vfprintf_r+0x3e4>
80007128:	3f fa       	mov	r10,-1
8000712a:	f2 0a 0c 49 	max	r9,r9,r10
8000712e:	50 29       	stdsp	sp[0x8],r9
80007130:	ce 7a       	rjmp	80006efe <_vfprintf_r+0x1ce>
80007132:	a7 b5       	sbr	r5,0x7
80007134:	ce 2a       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80007136:	30 09       	mov	r9,0
80007138:	23 08       	sub	r8,48
8000713a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000713e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80007142:	0f 38       	ld.ub	r8,r7++
80007144:	f0 ca 00 30 	sub	r10,r8,48
80007148:	58 9a       	cp.w	r10,9
8000714a:	fe 98 ff f7 	brls	80007138 <_vfprintf_r+0x408>
8000714e:	e0 48 00 24 	cp.w	r8,36
80007152:	fe 91 fe d5 	brne	80006efc <_vfprintf_r+0x1cc>
80007156:	e0 49 00 20 	cp.w	r9,32
8000715a:	e0 89 0d 75 	brgt	80008c44 <_vfprintf_r+0x1f14>
8000715e:	f2 c3 00 01 	sub	r3,r9,1
80007162:	30 19       	mov	r9,1
80007164:	50 39       	stdsp	sp[0xc],r9
80007166:	cc 9a       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80007168:	a3 b5       	sbr	r5,0x3
8000716a:	cc 7a       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
8000716c:	a7 a5       	sbr	r5,0x6
8000716e:	cc 5a       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80007170:	0a 98       	mov	r8,r5
80007172:	a5 b5       	sbr	r5,0x5
80007174:	a5 a8       	sbr	r8,0x4
80007176:	0f 89       	ld.ub	r9,r7[0x0]
80007178:	36 ce       	mov	lr,108
8000717a:	fc 09 18 00 	cp.b	r9,lr
8000717e:	f7 b7 00 ff 	subeq	r7,-1
80007182:	f0 05 17 10 	movne	r5,r8
80007186:	cb 9a       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
80007188:	a5 b5       	sbr	r5,0x5
8000718a:	cb 7a       	rjmp	80006ef8 <_vfprintf_r+0x1c8>
8000718c:	50 a7       	stdsp	sp[0x28],r7
8000718e:	50 80       	stdsp	sp[0x20],r0
80007190:	0c 97       	mov	r7,r6
80007192:	10 90       	mov	r0,r8
80007194:	06 96       	mov	r6,r3
80007196:	04 94       	mov	r4,r2
80007198:	40 93       	lddsp	r3,sp[0x24]
8000719a:	02 92       	mov	r2,r1
8000719c:	0e 99       	mov	r9,r7
8000719e:	40 41       	lddsp	r1,sp[0x10]
800071a0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800071a4:	40 3c       	lddsp	r12,sp[0xc]
800071a6:	58 0c       	cp.w	r12,0
800071a8:	c1 d0       	breq	800071e2 <_vfprintf_r+0x4b2>
800071aa:	10 36       	cp.w	r6,r8
800071ac:	c0 64       	brge	800071b8 <_vfprintf_r+0x488>
800071ae:	fa cb f9 44 	sub	r11,sp,-1724
800071b2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800071b6:	c1 d8       	rjmp	800071f0 <_vfprintf_r+0x4c0>
800071b8:	fa c8 f9 50 	sub	r8,sp,-1712
800071bc:	1a d8       	st.w	--sp,r8
800071be:	fa c8 fa b8 	sub	r8,sp,-1352
800071c2:	1a d8       	st.w	--sp,r8
800071c4:	fa c8 fb b4 	sub	r8,sp,-1100
800071c8:	1a d8       	st.w	--sp,r8
800071ca:	fa c8 f9 40 	sub	r8,sp,-1728
800071ce:	fa c9 ff b4 	sub	r9,sp,-76
800071d2:	04 9a       	mov	r10,r2
800071d4:	0c 9b       	mov	r11,r6
800071d6:	08 9c       	mov	r12,r4
800071d8:	fe b0 fc 0e 	rcall	800069f4 <get_arg>
800071dc:	2f dd       	sub	sp,-12
800071de:	19 b8       	ld.ub	r8,r12[0x3]
800071e0:	c2 28       	rjmp	80007224 <_vfprintf_r+0x4f4>
800071e2:	2f f7       	sub	r7,-1
800071e4:	10 39       	cp.w	r9,r8
800071e6:	c0 84       	brge	800071f6 <_vfprintf_r+0x4c6>
800071e8:	fa ca f9 44 	sub	r10,sp,-1724
800071ec:	f4 06 00 36 	add	r6,r10,r6<<0x3
800071f0:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800071f4:	c1 88       	rjmp	80007224 <_vfprintf_r+0x4f4>
800071f6:	41 09       	lddsp	r9,sp[0x40]
800071f8:	59 f8       	cp.w	r8,31
800071fa:	e0 89 00 12 	brgt	8000721e <_vfprintf_r+0x4ee>
800071fe:	f2 ca ff fc 	sub	r10,r9,-4
80007202:	51 0a       	stdsp	sp[0x40],r10
80007204:	72 09       	ld.w	r9,r9[0x0]
80007206:	fa c6 f9 44 	sub	r6,sp,-1724
8000720a:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000720e:	2f f8       	sub	r8,-1
80007210:	f5 49 fd 88 	st.w	r10[-632],r9
80007214:	fb 48 06 b4 	st.w	sp[1716],r8
80007218:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000721c:	c0 48       	rjmp	80007224 <_vfprintf_r+0x4f4>
8000721e:	13 b8       	ld.ub	r8,r9[0x3]
80007220:	2f c9       	sub	r9,-4
80007222:	51 09       	stdsp	sp[0x40],r9
80007224:	fb 68 06 60 	st.b	sp[1632],r8
80007228:	30 0e       	mov	lr,0
8000722a:	30 08       	mov	r8,0
8000722c:	30 12       	mov	r2,1
8000722e:	fb 68 06 bb 	st.b	sp[1723],r8
80007232:	50 2e       	stdsp	sp[0x8],lr
80007234:	e0 8f 08 b1 	bral	80008396 <_vfprintf_r+0x1666>
80007238:	50 a7       	stdsp	sp[0x28],r7
8000723a:	50 80       	stdsp	sp[0x20],r0
8000723c:	0c 97       	mov	r7,r6
8000723e:	04 94       	mov	r4,r2
80007240:	06 96       	mov	r6,r3
80007242:	02 92       	mov	r2,r1
80007244:	40 93       	lddsp	r3,sp[0x24]
80007246:	10 90       	mov	r0,r8
80007248:	40 41       	lddsp	r1,sp[0x10]
8000724a:	a5 a5       	sbr	r5,0x4
8000724c:	c0 a8       	rjmp	80007260 <_vfprintf_r+0x530>
8000724e:	50 a7       	stdsp	sp[0x28],r7
80007250:	50 80       	stdsp	sp[0x20],r0
80007252:	0c 97       	mov	r7,r6
80007254:	04 94       	mov	r4,r2
80007256:	06 96       	mov	r6,r3
80007258:	02 92       	mov	r2,r1
8000725a:	40 93       	lddsp	r3,sp[0x24]
8000725c:	10 90       	mov	r0,r8
8000725e:	40 41       	lddsp	r1,sp[0x10]
80007260:	ed b5 00 05 	bld	r5,0x5
80007264:	c5 11       	brne	80007306 <_vfprintf_r+0x5d6>
80007266:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000726a:	40 3c       	lddsp	r12,sp[0xc]
8000726c:	58 0c       	cp.w	r12,0
8000726e:	c1 e0       	breq	800072aa <_vfprintf_r+0x57a>
80007270:	10 36       	cp.w	r6,r8
80007272:	c0 64       	brge	8000727e <_vfprintf_r+0x54e>
80007274:	fa cb f9 44 	sub	r11,sp,-1724
80007278:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000727c:	c2 08       	rjmp	800072bc <_vfprintf_r+0x58c>
8000727e:	fa c8 f9 50 	sub	r8,sp,-1712
80007282:	1a d8       	st.w	--sp,r8
80007284:	fa c8 fa b8 	sub	r8,sp,-1352
80007288:	0c 9b       	mov	r11,r6
8000728a:	1a d8       	st.w	--sp,r8
8000728c:	fa c8 fb b4 	sub	r8,sp,-1100
80007290:	1a d8       	st.w	--sp,r8
80007292:	fa c9 ff b4 	sub	r9,sp,-76
80007296:	fa c8 f9 40 	sub	r8,sp,-1728
8000729a:	04 9a       	mov	r10,r2
8000729c:	08 9c       	mov	r12,r4
8000729e:	fe b0 fb ab 	rcall	800069f4 <get_arg>
800072a2:	2f dd       	sub	sp,-12
800072a4:	78 1b       	ld.w	r11,r12[0x4]
800072a6:	78 09       	ld.w	r9,r12[0x0]
800072a8:	c2 b8       	rjmp	800072fe <_vfprintf_r+0x5ce>
800072aa:	ee ca ff ff 	sub	r10,r7,-1
800072ae:	10 37       	cp.w	r7,r8
800072b0:	c0 b4       	brge	800072c6 <_vfprintf_r+0x596>
800072b2:	fa c9 f9 44 	sub	r9,sp,-1724
800072b6:	14 97       	mov	r7,r10
800072b8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800072bc:	ec fb fd 8c 	ld.w	r11,r6[-628]
800072c0:	ec f9 fd 88 	ld.w	r9,r6[-632]
800072c4:	c1 d8       	rjmp	800072fe <_vfprintf_r+0x5ce>
800072c6:	41 09       	lddsp	r9,sp[0x40]
800072c8:	59 f8       	cp.w	r8,31
800072ca:	e0 89 00 14 	brgt	800072f2 <_vfprintf_r+0x5c2>
800072ce:	f2 cb ff f8 	sub	r11,r9,-8
800072d2:	51 0b       	stdsp	sp[0x40],r11
800072d4:	fa c6 f9 44 	sub	r6,sp,-1724
800072d8:	72 1b       	ld.w	r11,r9[0x4]
800072da:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800072de:	72 09       	ld.w	r9,r9[0x0]
800072e0:	f9 4b fd 8c 	st.w	r12[-628],r11
800072e4:	f9 49 fd 88 	st.w	r12[-632],r9
800072e8:	2f f8       	sub	r8,-1
800072ea:	14 97       	mov	r7,r10
800072ec:	fb 48 06 b4 	st.w	sp[1716],r8
800072f0:	c0 78       	rjmp	800072fe <_vfprintf_r+0x5ce>
800072f2:	f2 c8 ff f8 	sub	r8,r9,-8
800072f6:	72 1b       	ld.w	r11,r9[0x4]
800072f8:	14 97       	mov	r7,r10
800072fa:	51 08       	stdsp	sp[0x40],r8
800072fc:	72 09       	ld.w	r9,r9[0x0]
800072fe:	16 98       	mov	r8,r11
80007300:	fa e9 00 00 	st.d	sp[0],r8
80007304:	ca e8       	rjmp	80007460 <_vfprintf_r+0x730>
80007306:	ed b5 00 04 	bld	r5,0x4
8000730a:	c1 71       	brne	80007338 <_vfprintf_r+0x608>
8000730c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007310:	40 3e       	lddsp	lr,sp[0xc]
80007312:	58 0e       	cp.w	lr,0
80007314:	c0 80       	breq	80007324 <_vfprintf_r+0x5f4>
80007316:	10 36       	cp.w	r6,r8
80007318:	c6 94       	brge	800073ea <_vfprintf_r+0x6ba>
8000731a:	fa cc f9 44 	sub	r12,sp,-1724
8000731e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007322:	c8 28       	rjmp	80007426 <_vfprintf_r+0x6f6>
80007324:	ee ca ff ff 	sub	r10,r7,-1
80007328:	10 37       	cp.w	r7,r8
8000732a:	e0 84 00 81 	brge	8000742c <_vfprintf_r+0x6fc>
8000732e:	fa cb f9 44 	sub	r11,sp,-1724
80007332:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007336:	c7 78       	rjmp	80007424 <_vfprintf_r+0x6f4>
80007338:	ed b5 00 06 	bld	r5,0x6
8000733c:	c4 b1       	brne	800073d2 <_vfprintf_r+0x6a2>
8000733e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007342:	40 3c       	lddsp	r12,sp[0xc]
80007344:	58 0c       	cp.w	r12,0
80007346:	c1 d0       	breq	80007380 <_vfprintf_r+0x650>
80007348:	10 36       	cp.w	r6,r8
8000734a:	c0 64       	brge	80007356 <_vfprintf_r+0x626>
8000734c:	fa cb f9 44 	sub	r11,sp,-1724
80007350:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007354:	c1 f8       	rjmp	80007392 <_vfprintf_r+0x662>
80007356:	fa c8 f9 50 	sub	r8,sp,-1712
8000735a:	1a d8       	st.w	--sp,r8
8000735c:	fa c8 fa b8 	sub	r8,sp,-1352
80007360:	1a d8       	st.w	--sp,r8
80007362:	fa c8 fb b4 	sub	r8,sp,-1100
80007366:	1a d8       	st.w	--sp,r8
80007368:	fa c8 f9 40 	sub	r8,sp,-1728
8000736c:	fa c9 ff b4 	sub	r9,sp,-76
80007370:	04 9a       	mov	r10,r2
80007372:	0c 9b       	mov	r11,r6
80007374:	08 9c       	mov	r12,r4
80007376:	fe b0 fb 3f 	rcall	800069f4 <get_arg>
8000737a:	2f dd       	sub	sp,-12
8000737c:	98 18       	ld.sh	r8,r12[0x2]
8000737e:	c2 68       	rjmp	800073ca <_vfprintf_r+0x69a>
80007380:	ee ca ff ff 	sub	r10,r7,-1
80007384:	10 37       	cp.w	r7,r8
80007386:	c0 94       	brge	80007398 <_vfprintf_r+0x668>
80007388:	fa c9 f9 44 	sub	r9,sp,-1724
8000738c:	14 97       	mov	r7,r10
8000738e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007392:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007396:	c1 a8       	rjmp	800073ca <_vfprintf_r+0x69a>
80007398:	41 09       	lddsp	r9,sp[0x40]
8000739a:	59 f8       	cp.w	r8,31
8000739c:	e0 89 00 13 	brgt	800073c2 <_vfprintf_r+0x692>
800073a0:	f2 cb ff fc 	sub	r11,r9,-4
800073a4:	51 0b       	stdsp	sp[0x40],r11
800073a6:	72 09       	ld.w	r9,r9[0x0]
800073a8:	fa c6 f9 44 	sub	r6,sp,-1724
800073ac:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800073b0:	2f f8       	sub	r8,-1
800073b2:	f7 49 fd 88 	st.w	r11[-632],r9
800073b6:	fb 48 06 b4 	st.w	sp[1716],r8
800073ba:	14 97       	mov	r7,r10
800073bc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800073c0:	c0 58       	rjmp	800073ca <_vfprintf_r+0x69a>
800073c2:	92 18       	ld.sh	r8,r9[0x2]
800073c4:	14 97       	mov	r7,r10
800073c6:	2f c9       	sub	r9,-4
800073c8:	51 09       	stdsp	sp[0x40],r9
800073ca:	50 18       	stdsp	sp[0x4],r8
800073cc:	bf 58       	asr	r8,0x1f
800073ce:	50 08       	stdsp	sp[0x0],r8
800073d0:	c4 88       	rjmp	80007460 <_vfprintf_r+0x730>
800073d2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800073d6:	40 3c       	lddsp	r12,sp[0xc]
800073d8:	58 0c       	cp.w	r12,0
800073da:	c1 d0       	breq	80007414 <_vfprintf_r+0x6e4>
800073dc:	10 36       	cp.w	r6,r8
800073de:	c0 64       	brge	800073ea <_vfprintf_r+0x6ba>
800073e0:	fa cb f9 44 	sub	r11,sp,-1724
800073e4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800073e8:	c1 f8       	rjmp	80007426 <_vfprintf_r+0x6f6>
800073ea:	fa c8 f9 50 	sub	r8,sp,-1712
800073ee:	1a d8       	st.w	--sp,r8
800073f0:	fa c8 fa b8 	sub	r8,sp,-1352
800073f4:	0c 9b       	mov	r11,r6
800073f6:	1a d8       	st.w	--sp,r8
800073f8:	fa c8 fb b4 	sub	r8,sp,-1100
800073fc:	04 9a       	mov	r10,r2
800073fe:	1a d8       	st.w	--sp,r8
80007400:	08 9c       	mov	r12,r4
80007402:	fa c8 f9 40 	sub	r8,sp,-1728
80007406:	fa c9 ff b4 	sub	r9,sp,-76
8000740a:	fe b0 fa f5 	rcall	800069f4 <get_arg>
8000740e:	2f dd       	sub	sp,-12
80007410:	78 0b       	ld.w	r11,r12[0x0]
80007412:	c2 48       	rjmp	8000745a <_vfprintf_r+0x72a>
80007414:	ee ca ff ff 	sub	r10,r7,-1
80007418:	10 37       	cp.w	r7,r8
8000741a:	c0 94       	brge	8000742c <_vfprintf_r+0x6fc>
8000741c:	fa c9 f9 44 	sub	r9,sp,-1724
80007420:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007424:	14 97       	mov	r7,r10
80007426:	ec fb fd 88 	ld.w	r11,r6[-632]
8000742a:	c1 88       	rjmp	8000745a <_vfprintf_r+0x72a>
8000742c:	41 09       	lddsp	r9,sp[0x40]
8000742e:	59 f8       	cp.w	r8,31
80007430:	e0 89 00 11 	brgt	80007452 <_vfprintf_r+0x722>
80007434:	f2 cb ff fc 	sub	r11,r9,-4
80007438:	51 0b       	stdsp	sp[0x40],r11
8000743a:	fa c6 f9 44 	sub	r6,sp,-1724
8000743e:	72 0b       	ld.w	r11,r9[0x0]
80007440:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007444:	f3 4b fd 88 	st.w	r9[-632],r11
80007448:	2f f8       	sub	r8,-1
8000744a:	14 97       	mov	r7,r10
8000744c:	fb 48 06 b4 	st.w	sp[1716],r8
80007450:	c0 58       	rjmp	8000745a <_vfprintf_r+0x72a>
80007452:	72 0b       	ld.w	r11,r9[0x0]
80007454:	14 97       	mov	r7,r10
80007456:	2f c9       	sub	r9,-4
80007458:	51 09       	stdsp	sp[0x40],r9
8000745a:	50 1b       	stdsp	sp[0x4],r11
8000745c:	bf 5b       	asr	r11,0x1f
8000745e:	50 0b       	stdsp	sp[0x0],r11
80007460:	fa ea 00 00 	ld.d	r10,sp[0]
80007464:	58 0a       	cp.w	r10,0
80007466:	5c 2b       	cpc	r11
80007468:	c0 e4       	brge	80007484 <_vfprintf_r+0x754>
8000746a:	30 08       	mov	r8,0
8000746c:	fa ea 00 00 	ld.d	r10,sp[0]
80007470:	30 09       	mov	r9,0
80007472:	f0 0a 01 0a 	sub	r10,r8,r10
80007476:	f2 0b 01 4b 	sbc	r11,r9,r11
8000747a:	32 d8       	mov	r8,45
8000747c:	fa eb 00 00 	st.d	sp[0],r10
80007480:	fb 68 06 bb 	st.b	sp[1723],r8
80007484:	30 18       	mov	r8,1
80007486:	e0 8f 06 fe 	bral	80008282 <_vfprintf_r+0x1552>
8000748a:	50 a7       	stdsp	sp[0x28],r7
8000748c:	50 80       	stdsp	sp[0x20],r0
8000748e:	0c 97       	mov	r7,r6
80007490:	04 94       	mov	r4,r2
80007492:	06 96       	mov	r6,r3
80007494:	02 92       	mov	r2,r1
80007496:	40 93       	lddsp	r3,sp[0x24]
80007498:	10 90       	mov	r0,r8
8000749a:	40 41       	lddsp	r1,sp[0x10]
8000749c:	0e 99       	mov	r9,r7
8000749e:	ed b5 00 03 	bld	r5,0x3
800074a2:	c4 11       	brne	80007524 <_vfprintf_r+0x7f4>
800074a4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800074a8:	40 3a       	lddsp	r10,sp[0xc]
800074aa:	58 0a       	cp.w	r10,0
800074ac:	c1 90       	breq	800074de <_vfprintf_r+0x7ae>
800074ae:	10 36       	cp.w	r6,r8
800074b0:	c6 45       	brlt	80007578 <_vfprintf_r+0x848>
800074b2:	fa c8 f9 50 	sub	r8,sp,-1712
800074b6:	1a d8       	st.w	--sp,r8
800074b8:	fa c8 fa b8 	sub	r8,sp,-1352
800074bc:	1a d8       	st.w	--sp,r8
800074be:	fa c8 fb b4 	sub	r8,sp,-1100
800074c2:	0c 9b       	mov	r11,r6
800074c4:	1a d8       	st.w	--sp,r8
800074c6:	04 9a       	mov	r10,r2
800074c8:	fa c8 f9 40 	sub	r8,sp,-1728
800074cc:	fa c9 ff b4 	sub	r9,sp,-76
800074d0:	08 9c       	mov	r12,r4
800074d2:	fe b0 fa 91 	rcall	800069f4 <get_arg>
800074d6:	2f dd       	sub	sp,-12
800074d8:	78 16       	ld.w	r6,r12[0x4]
800074da:	50 76       	stdsp	sp[0x1c],r6
800074dc:	c4 88       	rjmp	8000756c <_vfprintf_r+0x83c>
800074de:	2f f7       	sub	r7,-1
800074e0:	10 39       	cp.w	r9,r8
800074e2:	c0 c4       	brge	800074fa <_vfprintf_r+0x7ca>
800074e4:	fa ce f9 44 	sub	lr,sp,-1724
800074e8:	fc 06 00 36 	add	r6,lr,r6<<0x3
800074ec:	ec fc fd 8c 	ld.w	r12,r6[-628]
800074f0:	50 7c       	stdsp	sp[0x1c],r12
800074f2:	ec f6 fd 88 	ld.w	r6,r6[-632]
800074f6:	50 56       	stdsp	sp[0x14],r6
800074f8:	c6 68       	rjmp	800075c4 <_vfprintf_r+0x894>
800074fa:	41 09       	lddsp	r9,sp[0x40]
800074fc:	59 f8       	cp.w	r8,31
800074fe:	e0 89 00 10 	brgt	8000751e <_vfprintf_r+0x7ee>
80007502:	f2 ca ff f8 	sub	r10,r9,-8
80007506:	72 1b       	ld.w	r11,r9[0x4]
80007508:	51 0a       	stdsp	sp[0x40],r10
8000750a:	72 09       	ld.w	r9,r9[0x0]
8000750c:	fa ca f9 44 	sub	r10,sp,-1724
80007510:	50 7b       	stdsp	sp[0x1c],r11
80007512:	50 59       	stdsp	sp[0x14],r9
80007514:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007518:	40 5b       	lddsp	r11,sp[0x14]
8000751a:	40 7a       	lddsp	r10,sp[0x1c]
8000751c:	c4 78       	rjmp	800075aa <_vfprintf_r+0x87a>
8000751e:	72 18       	ld.w	r8,r9[0x4]
80007520:	50 78       	stdsp	sp[0x1c],r8
80007522:	c4 c8       	rjmp	800075ba <_vfprintf_r+0x88a>
80007524:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007528:	40 3e       	lddsp	lr,sp[0xc]
8000752a:	58 0e       	cp.w	lr,0
8000752c:	c2 30       	breq	80007572 <_vfprintf_r+0x842>
8000752e:	10 36       	cp.w	r6,r8
80007530:	c0 94       	brge	80007542 <_vfprintf_r+0x812>
80007532:	fa cc f9 44 	sub	r12,sp,-1724
80007536:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000753a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000753e:	50 7b       	stdsp	sp[0x1c],r11
80007540:	cd 9b       	rjmp	800074f2 <_vfprintf_r+0x7c2>
80007542:	fa c8 f9 50 	sub	r8,sp,-1712
80007546:	1a d8       	st.w	--sp,r8
80007548:	fa c8 fa b8 	sub	r8,sp,-1352
8000754c:	04 9a       	mov	r10,r2
8000754e:	1a d8       	st.w	--sp,r8
80007550:	fa c8 fb b4 	sub	r8,sp,-1100
80007554:	0c 9b       	mov	r11,r6
80007556:	1a d8       	st.w	--sp,r8
80007558:	08 9c       	mov	r12,r4
8000755a:	fa c8 f9 40 	sub	r8,sp,-1728
8000755e:	fa c9 ff b4 	sub	r9,sp,-76
80007562:	fe b0 fa 49 	rcall	800069f4 <get_arg>
80007566:	2f dd       	sub	sp,-12
80007568:	78 1a       	ld.w	r10,r12[0x4]
8000756a:	50 7a       	stdsp	sp[0x1c],r10
8000756c:	78 0c       	ld.w	r12,r12[0x0]
8000756e:	50 5c       	stdsp	sp[0x14],r12
80007570:	c2 a8       	rjmp	800075c4 <_vfprintf_r+0x894>
80007572:	2f f7       	sub	r7,-1
80007574:	10 39       	cp.w	r9,r8
80007576:	c0 94       	brge	80007588 <_vfprintf_r+0x858>
80007578:	fa c9 f9 44 	sub	r9,sp,-1724
8000757c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007580:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80007584:	50 78       	stdsp	sp[0x1c],r8
80007586:	cb 6b       	rjmp	800074f2 <_vfprintf_r+0x7c2>
80007588:	41 09       	lddsp	r9,sp[0x40]
8000758a:	59 f8       	cp.w	r8,31
8000758c:	e0 89 00 15 	brgt	800075b6 <_vfprintf_r+0x886>
80007590:	f2 ca ff f8 	sub	r10,r9,-8
80007594:	72 16       	ld.w	r6,r9[0x4]
80007596:	72 09       	ld.w	r9,r9[0x0]
80007598:	51 0a       	stdsp	sp[0x40],r10
8000759a:	50 59       	stdsp	sp[0x14],r9
8000759c:	fa ce f9 44 	sub	lr,sp,-1724
800075a0:	50 76       	stdsp	sp[0x1c],r6
800075a2:	fc 08 00 39 	add	r9,lr,r8<<0x3
800075a6:	40 5b       	lddsp	r11,sp[0x14]
800075a8:	0c 9a       	mov	r10,r6
800075aa:	f2 eb fd 88 	st.d	r9[-632],r10
800075ae:	2f f8       	sub	r8,-1
800075b0:	fb 48 06 b4 	st.w	sp[1716],r8
800075b4:	c0 88       	rjmp	800075c4 <_vfprintf_r+0x894>
800075b6:	72 1c       	ld.w	r12,r9[0x4]
800075b8:	50 7c       	stdsp	sp[0x1c],r12
800075ba:	f2 c8 ff f8 	sub	r8,r9,-8
800075be:	51 08       	stdsp	sp[0x40],r8
800075c0:	72 09       	ld.w	r9,r9[0x0]
800075c2:	50 59       	stdsp	sp[0x14],r9
800075c4:	40 5b       	lddsp	r11,sp[0x14]
800075c6:	40 7a       	lddsp	r10,sp[0x1c]
800075c8:	e0 a0 1d 94 	rcall	8000b0f0 <__isinfd>
800075cc:	18 96       	mov	r6,r12
800075ce:	c1 50       	breq	800075f8 <_vfprintf_r+0x8c8>
800075d0:	30 08       	mov	r8,0
800075d2:	30 09       	mov	r9,0
800075d4:	40 5b       	lddsp	r11,sp[0x14]
800075d6:	40 7a       	lddsp	r10,sp[0x1c]
800075d8:	e0 a0 22 98 	rcall	8000bb08 <__avr32_f64_cmp_lt>
800075dc:	c0 40       	breq	800075e4 <_vfprintf_r+0x8b4>
800075de:	32 d8       	mov	r8,45
800075e0:	fb 68 06 bb 	st.b	sp[1723],r8
800075e4:	4d 18       	lddpc	r8,80007728 <_vfprintf_r+0x9f8>
800075e6:	4d 26       	lddpc	r6,8000772c <_vfprintf_r+0x9fc>
800075e8:	a7 d5       	cbr	r5,0x7
800075ea:	e0 40 00 47 	cp.w	r0,71
800075ee:	f0 06 17 a0 	movle	r6,r8
800075f2:	30 32       	mov	r2,3
800075f4:	e0 8f 06 d4 	bral	8000839c <_vfprintf_r+0x166c>
800075f8:	40 5b       	lddsp	r11,sp[0x14]
800075fa:	40 7a       	lddsp	r10,sp[0x1c]
800075fc:	e0 a0 1d 8f 	rcall	8000b11a <__isnand>
80007600:	c0 c0       	breq	80007618 <_vfprintf_r+0x8e8>
80007602:	50 26       	stdsp	sp[0x8],r6
80007604:	4c b8       	lddpc	r8,80007730 <_vfprintf_r+0xa00>
80007606:	4c c6       	lddpc	r6,80007734 <_vfprintf_r+0xa04>
80007608:	a7 d5       	cbr	r5,0x7
8000760a:	e0 40 00 47 	cp.w	r0,71
8000760e:	f0 06 17 a0 	movle	r6,r8
80007612:	30 32       	mov	r2,3
80007614:	e0 8f 06 ca 	bral	800083a8 <_vfprintf_r+0x1678>
80007618:	40 2a       	lddsp	r10,sp[0x8]
8000761a:	5b fa       	cp.w	r10,-1
8000761c:	c0 41       	brne	80007624 <_vfprintf_r+0x8f4>
8000761e:	30 69       	mov	r9,6
80007620:	50 29       	stdsp	sp[0x8],r9
80007622:	c1 18       	rjmp	80007644 <_vfprintf_r+0x914>
80007624:	e0 40 00 47 	cp.w	r0,71
80007628:	5f 09       	sreq	r9
8000762a:	e0 40 00 67 	cp.w	r0,103
8000762e:	5f 08       	sreq	r8
80007630:	f3 e8 10 08 	or	r8,r9,r8
80007634:	f8 08 18 00 	cp.b	r8,r12
80007638:	c0 60       	breq	80007644 <_vfprintf_r+0x914>
8000763a:	40 28       	lddsp	r8,sp[0x8]
8000763c:	58 08       	cp.w	r8,0
8000763e:	f9 b8 00 01 	moveq	r8,1
80007642:	50 28       	stdsp	sp[0x8],r8
80007644:	40 78       	lddsp	r8,sp[0x1c]
80007646:	40 59       	lddsp	r9,sp[0x14]
80007648:	fa e9 06 94 	st.d	sp[1684],r8
8000764c:	a9 a5       	sbr	r5,0x8
8000764e:	fa f8 06 94 	ld.w	r8,sp[1684]
80007652:	58 08       	cp.w	r8,0
80007654:	c0 65       	brlt	80007660 <_vfprintf_r+0x930>
80007656:	40 5e       	lddsp	lr,sp[0x14]
80007658:	30 0c       	mov	r12,0
8000765a:	50 6e       	stdsp	sp[0x18],lr
8000765c:	50 9c       	stdsp	sp[0x24],r12
8000765e:	c0 78       	rjmp	8000766c <_vfprintf_r+0x93c>
80007660:	40 5b       	lddsp	r11,sp[0x14]
80007662:	32 da       	mov	r10,45
80007664:	ee 1b 80 00 	eorh	r11,0x8000
80007668:	50 9a       	stdsp	sp[0x24],r10
8000766a:	50 6b       	stdsp	sp[0x18],r11
8000766c:	e0 40 00 46 	cp.w	r0,70
80007670:	5f 09       	sreq	r9
80007672:	e0 40 00 66 	cp.w	r0,102
80007676:	5f 08       	sreq	r8
80007678:	f3 e8 10 08 	or	r8,r9,r8
8000767c:	50 48       	stdsp	sp[0x10],r8
8000767e:	c0 40       	breq	80007686 <_vfprintf_r+0x956>
80007680:	40 22       	lddsp	r2,sp[0x8]
80007682:	30 39       	mov	r9,3
80007684:	c1 08       	rjmp	800076a4 <_vfprintf_r+0x974>
80007686:	e0 40 00 45 	cp.w	r0,69
8000768a:	5f 09       	sreq	r9
8000768c:	e0 40 00 65 	cp.w	r0,101
80007690:	5f 08       	sreq	r8
80007692:	40 22       	lddsp	r2,sp[0x8]
80007694:	10 49       	or	r9,r8
80007696:	2f f2       	sub	r2,-1
80007698:	40 46       	lddsp	r6,sp[0x10]
8000769a:	ec 09 18 00 	cp.b	r9,r6
8000769e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800076a2:	30 29       	mov	r9,2
800076a4:	fa c8 f9 5c 	sub	r8,sp,-1700
800076a8:	1a d8       	st.w	--sp,r8
800076aa:	fa c8 f9 54 	sub	r8,sp,-1708
800076ae:	1a d8       	st.w	--sp,r8
800076b0:	fa c8 f9 4c 	sub	r8,sp,-1716
800076b4:	08 9c       	mov	r12,r4
800076b6:	1a d8       	st.w	--sp,r8
800076b8:	04 98       	mov	r8,r2
800076ba:	40 9b       	lddsp	r11,sp[0x24]
800076bc:	40 aa       	lddsp	r10,sp[0x28]
800076be:	e0 a0 0b cd 	rcall	80008e58 <_dtoa_r>
800076c2:	e0 40 00 47 	cp.w	r0,71
800076c6:	5f 19       	srne	r9
800076c8:	e0 40 00 67 	cp.w	r0,103
800076cc:	5f 18       	srne	r8
800076ce:	18 96       	mov	r6,r12
800076d0:	2f dd       	sub	sp,-12
800076d2:	f3 e8 00 08 	and	r8,r9,r8
800076d6:	c0 41       	brne	800076de <_vfprintf_r+0x9ae>
800076d8:	ed b5 00 00 	bld	r5,0x0
800076dc:	c3 81       	brne	8000774c <_vfprintf_r+0xa1c>
800076de:	ec 02 00 0e 	add	lr,r6,r2
800076e2:	50 3e       	stdsp	sp[0xc],lr
800076e4:	40 4c       	lddsp	r12,sp[0x10]
800076e6:	58 0c       	cp.w	r12,0
800076e8:	c1 50       	breq	80007712 <_vfprintf_r+0x9e2>
800076ea:	0d 89       	ld.ub	r9,r6[0x0]
800076ec:	33 08       	mov	r8,48
800076ee:	f0 09 18 00 	cp.b	r9,r8
800076f2:	c0 b1       	brne	80007708 <_vfprintf_r+0x9d8>
800076f4:	30 08       	mov	r8,0
800076f6:	30 09       	mov	r9,0
800076f8:	40 6b       	lddsp	r11,sp[0x18]
800076fa:	40 7a       	lddsp	r10,sp[0x1c]
800076fc:	e0 a0 21 bf 	rcall	8000ba7a <__avr32_f64_cmp_eq>
80007700:	fb b2 00 01 	rsubeq	r2,1
80007704:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80007708:	40 3b       	lddsp	r11,sp[0xc]
8000770a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000770e:	10 0b       	add	r11,r8
80007710:	50 3b       	stdsp	sp[0xc],r11
80007712:	40 6b       	lddsp	r11,sp[0x18]
80007714:	30 08       	mov	r8,0
80007716:	30 09       	mov	r9,0
80007718:	40 7a       	lddsp	r10,sp[0x1c]
8000771a:	e0 a0 21 b0 	rcall	8000ba7a <__avr32_f64_cmp_eq>
8000771e:	c1 10       	breq	80007740 <_vfprintf_r+0xa10>
80007720:	40 3a       	lddsp	r10,sp[0xc]
80007722:	fb 4a 06 a4 	st.w	sp[1700],r10
80007726:	c0 d8       	rjmp	80007740 <_vfprintf_r+0xa10>
80007728:	80 00       	ld.sh	r0,r0[0x0]
8000772a:	d2 74       	*unknown*
8000772c:	80 00       	ld.sh	r0,r0[0x0]
8000772e:	d2 78       	*unknown*
80007730:	80 00       	ld.sh	r0,r0[0x0]
80007732:	d2 7c       	*unknown*
80007734:	80 00       	ld.sh	r0,r0[0x0]
80007736:	d2 80       	acall	0x28
80007738:	10 c9       	st.b	r8++,r9
8000773a:	fb 48 06 a4 	st.w	sp[1700],r8
8000773e:	c0 28       	rjmp	80007742 <_vfprintf_r+0xa12>
80007740:	33 09       	mov	r9,48
80007742:	fa f8 06 a4 	ld.w	r8,sp[1700]
80007746:	40 3e       	lddsp	lr,sp[0xc]
80007748:	1c 38       	cp.w	r8,lr
8000774a:	cf 73       	brcs	80007738 <_vfprintf_r+0xa08>
8000774c:	e0 40 00 47 	cp.w	r0,71
80007750:	5f 09       	sreq	r9
80007752:	e0 40 00 67 	cp.w	r0,103
80007756:	5f 08       	sreq	r8
80007758:	f3 e8 10 08 	or	r8,r9,r8
8000775c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80007760:	0c 19       	sub	r9,r6
80007762:	50 69       	stdsp	sp[0x18],r9
80007764:	58 08       	cp.w	r8,0
80007766:	c0 b0       	breq	8000777c <_vfprintf_r+0xa4c>
80007768:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000776c:	5b d8       	cp.w	r8,-3
8000776e:	c0 55       	brlt	80007778 <_vfprintf_r+0xa48>
80007770:	40 2c       	lddsp	r12,sp[0x8]
80007772:	18 38       	cp.w	r8,r12
80007774:	e0 8a 00 6a 	brle	80007848 <_vfprintf_r+0xb18>
80007778:	20 20       	sub	r0,2
8000777a:	c0 58       	rjmp	80007784 <_vfprintf_r+0xa54>
8000777c:	e0 40 00 65 	cp.w	r0,101
80007780:	e0 89 00 46 	brgt	8000780c <_vfprintf_r+0xadc>
80007784:	fa fb 06 ac 	ld.w	r11,sp[1708]
80007788:	fb 60 06 9c 	st.b	sp[1692],r0
8000778c:	20 1b       	sub	r11,1
8000778e:	fb 4b 06 ac 	st.w	sp[1708],r11
80007792:	c0 47       	brpl	8000779a <_vfprintf_r+0xa6a>
80007794:	5c 3b       	neg	r11
80007796:	32 d8       	mov	r8,45
80007798:	c0 28       	rjmp	8000779c <_vfprintf_r+0xa6c>
8000779a:	32 b8       	mov	r8,43
8000779c:	fb 68 06 9d 	st.b	sp[1693],r8
800077a0:	58 9b       	cp.w	r11,9
800077a2:	e0 8a 00 1d 	brle	800077dc <_vfprintf_r+0xaac>
800077a6:	fa c9 fa 35 	sub	r9,sp,-1483
800077aa:	30 aa       	mov	r10,10
800077ac:	12 98       	mov	r8,r9
800077ae:	0e 9c       	mov	r12,r7
800077b0:	0c 92       	mov	r2,r6
800077b2:	f6 0a 0c 06 	divs	r6,r11,r10
800077b6:	0e 9b       	mov	r11,r7
800077b8:	2d 0b       	sub	r11,-48
800077ba:	10 fb       	st.b	--r8,r11
800077bc:	0c 9b       	mov	r11,r6
800077be:	58 96       	cp.w	r6,9
800077c0:	fe 99 ff f9 	brgt	800077b2 <_vfprintf_r+0xa82>
800077c4:	2d 0b       	sub	r11,-48
800077c6:	18 97       	mov	r7,r12
800077c8:	04 96       	mov	r6,r2
800077ca:	10 fb       	st.b	--r8,r11
800077cc:	fa ca f9 62 	sub	r10,sp,-1694
800077d0:	c0 38       	rjmp	800077d6 <_vfprintf_r+0xaa6>
800077d2:	11 3b       	ld.ub	r11,r8++
800077d4:	14 cb       	st.b	r10++,r11
800077d6:	12 38       	cp.w	r8,r9
800077d8:	cf d3       	brcs	800077d2 <_vfprintf_r+0xaa2>
800077da:	c0 98       	rjmp	800077ec <_vfprintf_r+0xabc>
800077dc:	2d 0b       	sub	r11,-48
800077de:	33 08       	mov	r8,48
800077e0:	fb 6b 06 9f 	st.b	sp[1695],r11
800077e4:	fb 68 06 9e 	st.b	sp[1694],r8
800077e8:	fa ca f9 60 	sub	r10,sp,-1696
800077ec:	fa c8 f9 64 	sub	r8,sp,-1692
800077f0:	f4 08 01 08 	sub	r8,r10,r8
800077f4:	50 e8       	stdsp	sp[0x38],r8
800077f6:	10 92       	mov	r2,r8
800077f8:	40 6b       	lddsp	r11,sp[0x18]
800077fa:	16 02       	add	r2,r11
800077fc:	58 1b       	cp.w	r11,1
800077fe:	e0 89 00 05 	brgt	80007808 <_vfprintf_r+0xad8>
80007802:	ed b5 00 00 	bld	r5,0x0
80007806:	c3 51       	brne	80007870 <_vfprintf_r+0xb40>
80007808:	2f f2       	sub	r2,-1
8000780a:	c3 38       	rjmp	80007870 <_vfprintf_r+0xb40>
8000780c:	e0 40 00 66 	cp.w	r0,102
80007810:	c1 c1       	brne	80007848 <_vfprintf_r+0xb18>
80007812:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007816:	58 02       	cp.w	r2,0
80007818:	e0 8a 00 0c 	brle	80007830 <_vfprintf_r+0xb00>
8000781c:	40 2a       	lddsp	r10,sp[0x8]
8000781e:	58 0a       	cp.w	r10,0
80007820:	c0 41       	brne	80007828 <_vfprintf_r+0xaf8>
80007822:	ed b5 00 00 	bld	r5,0x0
80007826:	c2 51       	brne	80007870 <_vfprintf_r+0xb40>
80007828:	2f f2       	sub	r2,-1
8000782a:	40 29       	lddsp	r9,sp[0x8]
8000782c:	12 02       	add	r2,r9
8000782e:	c0 b8       	rjmp	80007844 <_vfprintf_r+0xb14>
80007830:	40 28       	lddsp	r8,sp[0x8]
80007832:	58 08       	cp.w	r8,0
80007834:	c0 61       	brne	80007840 <_vfprintf_r+0xb10>
80007836:	ed b5 00 00 	bld	r5,0x0
8000783a:	c0 30       	breq	80007840 <_vfprintf_r+0xb10>
8000783c:	30 12       	mov	r2,1
8000783e:	c1 98       	rjmp	80007870 <_vfprintf_r+0xb40>
80007840:	40 22       	lddsp	r2,sp[0x8]
80007842:	2f e2       	sub	r2,-2
80007844:	36 60       	mov	r0,102
80007846:	c1 58       	rjmp	80007870 <_vfprintf_r+0xb40>
80007848:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000784c:	40 6e       	lddsp	lr,sp[0x18]
8000784e:	1c 32       	cp.w	r2,lr
80007850:	c0 65       	brlt	8000785c <_vfprintf_r+0xb2c>
80007852:	ed b5 00 00 	bld	r5,0x0
80007856:	f7 b2 00 ff 	subeq	r2,-1
8000785a:	c0 a8       	rjmp	8000786e <_vfprintf_r+0xb3e>
8000785c:	e4 08 11 02 	rsub	r8,r2,2
80007860:	40 6c       	lddsp	r12,sp[0x18]
80007862:	58 02       	cp.w	r2,0
80007864:	f0 02 17 a0 	movle	r2,r8
80007868:	f9 b2 09 01 	movgt	r2,1
8000786c:	18 02       	add	r2,r12
8000786e:	36 70       	mov	r0,103
80007870:	40 9b       	lddsp	r11,sp[0x24]
80007872:	58 0b       	cp.w	r11,0
80007874:	e0 80 05 94 	breq	8000839c <_vfprintf_r+0x166c>
80007878:	32 d8       	mov	r8,45
8000787a:	fb 68 06 bb 	st.b	sp[1723],r8
8000787e:	e0 8f 05 93 	bral	800083a4 <_vfprintf_r+0x1674>
80007882:	50 a7       	stdsp	sp[0x28],r7
80007884:	04 94       	mov	r4,r2
80007886:	0c 97       	mov	r7,r6
80007888:	02 92       	mov	r2,r1
8000788a:	06 96       	mov	r6,r3
8000788c:	40 41       	lddsp	r1,sp[0x10]
8000788e:	40 93       	lddsp	r3,sp[0x24]
80007890:	0e 99       	mov	r9,r7
80007892:	ed b5 00 05 	bld	r5,0x5
80007896:	c4 81       	brne	80007926 <_vfprintf_r+0xbf6>
80007898:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000789c:	40 3e       	lddsp	lr,sp[0xc]
8000789e:	58 0e       	cp.w	lr,0
800078a0:	c1 d0       	breq	800078da <_vfprintf_r+0xbaa>
800078a2:	10 36       	cp.w	r6,r8
800078a4:	c0 64       	brge	800078b0 <_vfprintf_r+0xb80>
800078a6:	fa cc f9 44 	sub	r12,sp,-1724
800078aa:	f8 06 00 36 	add	r6,r12,r6<<0x3
800078ae:	c1 d8       	rjmp	800078e8 <_vfprintf_r+0xbb8>
800078b0:	fa c8 f9 50 	sub	r8,sp,-1712
800078b4:	1a d8       	st.w	--sp,r8
800078b6:	fa c8 fa b8 	sub	r8,sp,-1352
800078ba:	04 9a       	mov	r10,r2
800078bc:	1a d8       	st.w	--sp,r8
800078be:	fa c8 fb b4 	sub	r8,sp,-1100
800078c2:	0c 9b       	mov	r11,r6
800078c4:	1a d8       	st.w	--sp,r8
800078c6:	08 9c       	mov	r12,r4
800078c8:	fa c8 f9 40 	sub	r8,sp,-1728
800078cc:	fa c9 ff b4 	sub	r9,sp,-76
800078d0:	fe b0 f8 92 	rcall	800069f4 <get_arg>
800078d4:	2f dd       	sub	sp,-12
800078d6:	78 0a       	ld.w	r10,r12[0x0]
800078d8:	c2 08       	rjmp	80007918 <_vfprintf_r+0xbe8>
800078da:	2f f7       	sub	r7,-1
800078dc:	10 39       	cp.w	r9,r8
800078de:	c0 84       	brge	800078ee <_vfprintf_r+0xbbe>
800078e0:	fa cb f9 44 	sub	r11,sp,-1724
800078e4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800078e8:	ec fa fd 88 	ld.w	r10,r6[-632]
800078ec:	c1 68       	rjmp	80007918 <_vfprintf_r+0xbe8>
800078ee:	41 09       	lddsp	r9,sp[0x40]
800078f0:	59 f8       	cp.w	r8,31
800078f2:	e0 89 00 10 	brgt	80007912 <_vfprintf_r+0xbe2>
800078f6:	f2 ca ff fc 	sub	r10,r9,-4
800078fa:	51 0a       	stdsp	sp[0x40],r10
800078fc:	fa c6 f9 44 	sub	r6,sp,-1724
80007900:	72 0a       	ld.w	r10,r9[0x0]
80007902:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007906:	f3 4a fd 88 	st.w	r9[-632],r10
8000790a:	2f f8       	sub	r8,-1
8000790c:	fb 48 06 b4 	st.w	sp[1716],r8
80007910:	c0 48       	rjmp	80007918 <_vfprintf_r+0xbe8>
80007912:	72 0a       	ld.w	r10,r9[0x0]
80007914:	2f c9       	sub	r9,-4
80007916:	51 09       	stdsp	sp[0x40],r9
80007918:	40 be       	lddsp	lr,sp[0x2c]
8000791a:	1c 98       	mov	r8,lr
8000791c:	95 1e       	st.w	r10[0x4],lr
8000791e:	bf 58       	asr	r8,0x1f
80007920:	95 08       	st.w	r10[0x0],r8
80007922:	fe 9f fa 92 	bral	80006e46 <_vfprintf_r+0x116>
80007926:	ed b5 00 04 	bld	r5,0x4
8000792a:	c4 80       	breq	800079ba <_vfprintf_r+0xc8a>
8000792c:	e2 15 00 40 	andl	r5,0x40,COH
80007930:	c4 50       	breq	800079ba <_vfprintf_r+0xc8a>
80007932:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007936:	40 3c       	lddsp	r12,sp[0xc]
80007938:	58 0c       	cp.w	r12,0
8000793a:	c1 d0       	breq	80007974 <_vfprintf_r+0xc44>
8000793c:	10 36       	cp.w	r6,r8
8000793e:	c0 64       	brge	8000794a <_vfprintf_r+0xc1a>
80007940:	fa cb f9 44 	sub	r11,sp,-1724
80007944:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007948:	c1 d8       	rjmp	80007982 <_vfprintf_r+0xc52>
8000794a:	fa c8 f9 50 	sub	r8,sp,-1712
8000794e:	1a d8       	st.w	--sp,r8
80007950:	fa c8 fa b8 	sub	r8,sp,-1352
80007954:	04 9a       	mov	r10,r2
80007956:	1a d8       	st.w	--sp,r8
80007958:	fa c8 fb b4 	sub	r8,sp,-1100
8000795c:	0c 9b       	mov	r11,r6
8000795e:	1a d8       	st.w	--sp,r8
80007960:	08 9c       	mov	r12,r4
80007962:	fa c8 f9 40 	sub	r8,sp,-1728
80007966:	fa c9 ff b4 	sub	r9,sp,-76
8000796a:	fe b0 f8 45 	rcall	800069f4 <get_arg>
8000796e:	2f dd       	sub	sp,-12
80007970:	78 0a       	ld.w	r10,r12[0x0]
80007972:	c2 08       	rjmp	800079b2 <_vfprintf_r+0xc82>
80007974:	2f f7       	sub	r7,-1
80007976:	10 39       	cp.w	r9,r8
80007978:	c0 84       	brge	80007988 <_vfprintf_r+0xc58>
8000797a:	fa ca f9 44 	sub	r10,sp,-1724
8000797e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007982:	ec fa fd 88 	ld.w	r10,r6[-632]
80007986:	c1 68       	rjmp	800079b2 <_vfprintf_r+0xc82>
80007988:	41 09       	lddsp	r9,sp[0x40]
8000798a:	59 f8       	cp.w	r8,31
8000798c:	e0 89 00 10 	brgt	800079ac <_vfprintf_r+0xc7c>
80007990:	f2 ca ff fc 	sub	r10,r9,-4
80007994:	51 0a       	stdsp	sp[0x40],r10
80007996:	fa c6 f9 44 	sub	r6,sp,-1724
8000799a:	72 0a       	ld.w	r10,r9[0x0]
8000799c:	ec 08 00 39 	add	r9,r6,r8<<0x3
800079a0:	f3 4a fd 88 	st.w	r9[-632],r10
800079a4:	2f f8       	sub	r8,-1
800079a6:	fb 48 06 b4 	st.w	sp[1716],r8
800079aa:	c0 48       	rjmp	800079b2 <_vfprintf_r+0xc82>
800079ac:	72 0a       	ld.w	r10,r9[0x0]
800079ae:	2f c9       	sub	r9,-4
800079b0:	51 09       	stdsp	sp[0x40],r9
800079b2:	40 be       	lddsp	lr,sp[0x2c]
800079b4:	b4 0e       	st.h	r10[0x0],lr
800079b6:	fe 9f fa 48 	bral	80006e46 <_vfprintf_r+0x116>
800079ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
800079be:	40 3c       	lddsp	r12,sp[0xc]
800079c0:	58 0c       	cp.w	r12,0
800079c2:	c1 d0       	breq	800079fc <_vfprintf_r+0xccc>
800079c4:	10 36       	cp.w	r6,r8
800079c6:	c0 64       	brge	800079d2 <_vfprintf_r+0xca2>
800079c8:	fa cb f9 44 	sub	r11,sp,-1724
800079cc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800079d0:	c1 d8       	rjmp	80007a0a <_vfprintf_r+0xcda>
800079d2:	fa c8 f9 50 	sub	r8,sp,-1712
800079d6:	1a d8       	st.w	--sp,r8
800079d8:	fa c8 fa b8 	sub	r8,sp,-1352
800079dc:	04 9a       	mov	r10,r2
800079de:	1a d8       	st.w	--sp,r8
800079e0:	fa c8 fb b4 	sub	r8,sp,-1100
800079e4:	0c 9b       	mov	r11,r6
800079e6:	1a d8       	st.w	--sp,r8
800079e8:	08 9c       	mov	r12,r4
800079ea:	fa c8 f9 40 	sub	r8,sp,-1728
800079ee:	fa c9 ff b4 	sub	r9,sp,-76
800079f2:	fe b0 f8 01 	rcall	800069f4 <get_arg>
800079f6:	2f dd       	sub	sp,-12
800079f8:	78 0a       	ld.w	r10,r12[0x0]
800079fa:	c2 08       	rjmp	80007a3a <_vfprintf_r+0xd0a>
800079fc:	2f f7       	sub	r7,-1
800079fe:	10 39       	cp.w	r9,r8
80007a00:	c0 84       	brge	80007a10 <_vfprintf_r+0xce0>
80007a02:	fa ca f9 44 	sub	r10,sp,-1724
80007a06:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007a0a:	ec fa fd 88 	ld.w	r10,r6[-632]
80007a0e:	c1 68       	rjmp	80007a3a <_vfprintf_r+0xd0a>
80007a10:	41 09       	lddsp	r9,sp[0x40]
80007a12:	59 f8       	cp.w	r8,31
80007a14:	e0 89 00 10 	brgt	80007a34 <_vfprintf_r+0xd04>
80007a18:	f2 ca ff fc 	sub	r10,r9,-4
80007a1c:	51 0a       	stdsp	sp[0x40],r10
80007a1e:	fa c6 f9 44 	sub	r6,sp,-1724
80007a22:	72 0a       	ld.w	r10,r9[0x0]
80007a24:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007a28:	f3 4a fd 88 	st.w	r9[-632],r10
80007a2c:	2f f8       	sub	r8,-1
80007a2e:	fb 48 06 b4 	st.w	sp[1716],r8
80007a32:	c0 48       	rjmp	80007a3a <_vfprintf_r+0xd0a>
80007a34:	72 0a       	ld.w	r10,r9[0x0]
80007a36:	2f c9       	sub	r9,-4
80007a38:	51 09       	stdsp	sp[0x40],r9
80007a3a:	40 be       	lddsp	lr,sp[0x2c]
80007a3c:	95 0e       	st.w	r10[0x0],lr
80007a3e:	fe 9f fa 04 	bral	80006e46 <_vfprintf_r+0x116>
80007a42:	50 a7       	stdsp	sp[0x28],r7
80007a44:	50 80       	stdsp	sp[0x20],r0
80007a46:	0c 97       	mov	r7,r6
80007a48:	04 94       	mov	r4,r2
80007a4a:	06 96       	mov	r6,r3
80007a4c:	02 92       	mov	r2,r1
80007a4e:	40 93       	lddsp	r3,sp[0x24]
80007a50:	10 90       	mov	r0,r8
80007a52:	40 41       	lddsp	r1,sp[0x10]
80007a54:	a5 a5       	sbr	r5,0x4
80007a56:	c0 a8       	rjmp	80007a6a <_vfprintf_r+0xd3a>
80007a58:	50 a7       	stdsp	sp[0x28],r7
80007a5a:	50 80       	stdsp	sp[0x20],r0
80007a5c:	0c 97       	mov	r7,r6
80007a5e:	04 94       	mov	r4,r2
80007a60:	06 96       	mov	r6,r3
80007a62:	02 92       	mov	r2,r1
80007a64:	40 93       	lddsp	r3,sp[0x24]
80007a66:	10 90       	mov	r0,r8
80007a68:	40 41       	lddsp	r1,sp[0x10]
80007a6a:	ed b5 00 05 	bld	r5,0x5
80007a6e:	c5 d1       	brne	80007b28 <_vfprintf_r+0xdf8>
80007a70:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007a74:	40 3c       	lddsp	r12,sp[0xc]
80007a76:	58 0c       	cp.w	r12,0
80007a78:	c2 60       	breq	80007ac4 <_vfprintf_r+0xd94>
80007a7a:	10 36       	cp.w	r6,r8
80007a7c:	c0 a4       	brge	80007a90 <_vfprintf_r+0xd60>
80007a7e:	fa cb f9 44 	sub	r11,sp,-1724
80007a82:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007a86:	ec e8 fd 88 	ld.d	r8,r6[-632]
80007a8a:	fa e9 00 00 	st.d	sp[0],r8
80007a8e:	c1 88       	rjmp	80007abe <_vfprintf_r+0xd8e>
80007a90:	fa c8 f9 50 	sub	r8,sp,-1712
80007a94:	1a d8       	st.w	--sp,r8
80007a96:	fa c8 fa b8 	sub	r8,sp,-1352
80007a9a:	04 9a       	mov	r10,r2
80007a9c:	1a d8       	st.w	--sp,r8
80007a9e:	0c 9b       	mov	r11,r6
80007aa0:	fa c8 fb b4 	sub	r8,sp,-1100
80007aa4:	08 9c       	mov	r12,r4
80007aa6:	1a d8       	st.w	--sp,r8
80007aa8:	fa c8 f9 40 	sub	r8,sp,-1728
80007aac:	fa c9 ff b4 	sub	r9,sp,-76
80007ab0:	fe b0 f7 a2 	rcall	800069f4 <get_arg>
80007ab4:	2f dd       	sub	sp,-12
80007ab6:	f8 ea 00 00 	ld.d	r10,r12[0]
80007aba:	fa eb 00 00 	st.d	sp[0],r10
80007abe:	30 08       	mov	r8,0
80007ac0:	e0 8f 03 de 	bral	8000827c <_vfprintf_r+0x154c>
80007ac4:	ee ca ff ff 	sub	r10,r7,-1
80007ac8:	10 37       	cp.w	r7,r8
80007aca:	c0 b4       	brge	80007ae0 <_vfprintf_r+0xdb0>
80007acc:	fa c9 f9 44 	sub	r9,sp,-1724
80007ad0:	14 97       	mov	r7,r10
80007ad2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007ad6:	ec ea fd 88 	ld.d	r10,r6[-632]
80007ada:	fa eb 00 00 	st.d	sp[0],r10
80007ade:	c1 88       	rjmp	80007b0e <_vfprintf_r+0xdde>
80007ae0:	41 09       	lddsp	r9,sp[0x40]
80007ae2:	59 f8       	cp.w	r8,31
80007ae4:	e0 89 00 18 	brgt	80007b14 <_vfprintf_r+0xde4>
80007ae8:	f2 e6 00 00 	ld.d	r6,r9[0]
80007aec:	f2 cb ff f8 	sub	r11,r9,-8
80007af0:	fa e7 00 00 	st.d	sp[0],r6
80007af4:	51 0b       	stdsp	sp[0x40],r11
80007af6:	fa c6 f9 44 	sub	r6,sp,-1724
80007afa:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007afe:	fa e6 00 00 	ld.d	r6,sp[0]
80007b02:	f2 e7 fd 88 	st.d	r9[-632],r6
80007b06:	2f f8       	sub	r8,-1
80007b08:	14 97       	mov	r7,r10
80007b0a:	fb 48 06 b4 	st.w	sp[1716],r8
80007b0e:	40 38       	lddsp	r8,sp[0xc]
80007b10:	e0 8f 03 b6 	bral	8000827c <_vfprintf_r+0x154c>
80007b14:	f2 e6 00 00 	ld.d	r6,r9[0]
80007b18:	40 38       	lddsp	r8,sp[0xc]
80007b1a:	fa e7 00 00 	st.d	sp[0],r6
80007b1e:	2f 89       	sub	r9,-8
80007b20:	14 97       	mov	r7,r10
80007b22:	51 09       	stdsp	sp[0x40],r9
80007b24:	e0 8f 03 ac 	bral	8000827c <_vfprintf_r+0x154c>
80007b28:	ed b5 00 04 	bld	r5,0x4
80007b2c:	c1 61       	brne	80007b58 <_vfprintf_r+0xe28>
80007b2e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007b32:	40 3e       	lddsp	lr,sp[0xc]
80007b34:	58 0e       	cp.w	lr,0
80007b36:	c0 80       	breq	80007b46 <_vfprintf_r+0xe16>
80007b38:	10 36       	cp.w	r6,r8
80007b3a:	c6 74       	brge	80007c08 <_vfprintf_r+0xed8>
80007b3c:	fa cc f9 44 	sub	r12,sp,-1724
80007b40:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007b44:	c8 08       	rjmp	80007c44 <_vfprintf_r+0xf14>
80007b46:	ee ca ff ff 	sub	r10,r7,-1
80007b4a:	10 37       	cp.w	r7,r8
80007b4c:	c7 f4       	brge	80007c4a <_vfprintf_r+0xf1a>
80007b4e:	fa cb f9 44 	sub	r11,sp,-1724
80007b52:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007b56:	c7 68       	rjmp	80007c42 <_vfprintf_r+0xf12>
80007b58:	ed b5 00 06 	bld	r5,0x6
80007b5c:	c4 a1       	brne	80007bf0 <_vfprintf_r+0xec0>
80007b5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007b62:	40 3c       	lddsp	r12,sp[0xc]
80007b64:	58 0c       	cp.w	r12,0
80007b66:	c1 d0       	breq	80007ba0 <_vfprintf_r+0xe70>
80007b68:	10 36       	cp.w	r6,r8
80007b6a:	c0 64       	brge	80007b76 <_vfprintf_r+0xe46>
80007b6c:	fa cb f9 44 	sub	r11,sp,-1724
80007b70:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007b74:	c1 f8       	rjmp	80007bb2 <_vfprintf_r+0xe82>
80007b76:	fa c8 f9 50 	sub	r8,sp,-1712
80007b7a:	1a d8       	st.w	--sp,r8
80007b7c:	fa c8 fa b8 	sub	r8,sp,-1352
80007b80:	1a d8       	st.w	--sp,r8
80007b82:	fa c8 fb b4 	sub	r8,sp,-1100
80007b86:	1a d8       	st.w	--sp,r8
80007b88:	fa c8 f9 40 	sub	r8,sp,-1728
80007b8c:	fa c9 ff b4 	sub	r9,sp,-76
80007b90:	04 9a       	mov	r10,r2
80007b92:	0c 9b       	mov	r11,r6
80007b94:	08 9c       	mov	r12,r4
80007b96:	fe b0 f7 2f 	rcall	800069f4 <get_arg>
80007b9a:	2f dd       	sub	sp,-12
80007b9c:	98 18       	ld.sh	r8,r12[0x2]
80007b9e:	c2 68       	rjmp	80007bea <_vfprintf_r+0xeba>
80007ba0:	ee ca ff ff 	sub	r10,r7,-1
80007ba4:	10 37       	cp.w	r7,r8
80007ba6:	c0 94       	brge	80007bb8 <_vfprintf_r+0xe88>
80007ba8:	fa c9 f9 44 	sub	r9,sp,-1724
80007bac:	14 97       	mov	r7,r10
80007bae:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007bb2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007bb6:	c1 a8       	rjmp	80007bea <_vfprintf_r+0xeba>
80007bb8:	41 09       	lddsp	r9,sp[0x40]
80007bba:	59 f8       	cp.w	r8,31
80007bbc:	e0 89 00 13 	brgt	80007be2 <_vfprintf_r+0xeb2>
80007bc0:	f2 cb ff fc 	sub	r11,r9,-4
80007bc4:	51 0b       	stdsp	sp[0x40],r11
80007bc6:	72 09       	ld.w	r9,r9[0x0]
80007bc8:	fa c6 f9 44 	sub	r6,sp,-1724
80007bcc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007bd0:	2f f8       	sub	r8,-1
80007bd2:	f7 49 fd 88 	st.w	r11[-632],r9
80007bd6:	fb 48 06 b4 	st.w	sp[1716],r8
80007bda:	14 97       	mov	r7,r10
80007bdc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007be0:	c0 58       	rjmp	80007bea <_vfprintf_r+0xeba>
80007be2:	92 18       	ld.sh	r8,r9[0x2]
80007be4:	14 97       	mov	r7,r10
80007be6:	2f c9       	sub	r9,-4
80007be8:	51 09       	stdsp	sp[0x40],r9
80007bea:	5c 78       	castu.h	r8
80007bec:	50 18       	stdsp	sp[0x4],r8
80007bee:	c4 68       	rjmp	80007c7a <_vfprintf_r+0xf4a>
80007bf0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007bf4:	40 3c       	lddsp	r12,sp[0xc]
80007bf6:	58 0c       	cp.w	r12,0
80007bf8:	c1 d0       	breq	80007c32 <_vfprintf_r+0xf02>
80007bfa:	10 36       	cp.w	r6,r8
80007bfc:	c0 64       	brge	80007c08 <_vfprintf_r+0xed8>
80007bfe:	fa cb f9 44 	sub	r11,sp,-1724
80007c02:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007c06:	c1 f8       	rjmp	80007c44 <_vfprintf_r+0xf14>
80007c08:	fa c8 f9 50 	sub	r8,sp,-1712
80007c0c:	1a d8       	st.w	--sp,r8
80007c0e:	fa c8 fa b8 	sub	r8,sp,-1352
80007c12:	0c 9b       	mov	r11,r6
80007c14:	1a d8       	st.w	--sp,r8
80007c16:	fa c8 fb b4 	sub	r8,sp,-1100
80007c1a:	04 9a       	mov	r10,r2
80007c1c:	1a d8       	st.w	--sp,r8
80007c1e:	08 9c       	mov	r12,r4
80007c20:	fa c8 f9 40 	sub	r8,sp,-1728
80007c24:	fa c9 ff b4 	sub	r9,sp,-76
80007c28:	fe b0 f6 e6 	rcall	800069f4 <get_arg>
80007c2c:	2f dd       	sub	sp,-12
80007c2e:	78 0b       	ld.w	r11,r12[0x0]
80007c30:	c2 48       	rjmp	80007c78 <_vfprintf_r+0xf48>
80007c32:	ee ca ff ff 	sub	r10,r7,-1
80007c36:	10 37       	cp.w	r7,r8
80007c38:	c0 94       	brge	80007c4a <_vfprintf_r+0xf1a>
80007c3a:	fa c9 f9 44 	sub	r9,sp,-1724
80007c3e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007c42:	14 97       	mov	r7,r10
80007c44:	ec fb fd 88 	ld.w	r11,r6[-632]
80007c48:	c1 88       	rjmp	80007c78 <_vfprintf_r+0xf48>
80007c4a:	41 09       	lddsp	r9,sp[0x40]
80007c4c:	59 f8       	cp.w	r8,31
80007c4e:	e0 89 00 11 	brgt	80007c70 <_vfprintf_r+0xf40>
80007c52:	f2 cb ff fc 	sub	r11,r9,-4
80007c56:	51 0b       	stdsp	sp[0x40],r11
80007c58:	fa c6 f9 44 	sub	r6,sp,-1724
80007c5c:	72 0b       	ld.w	r11,r9[0x0]
80007c5e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007c62:	f3 4b fd 88 	st.w	r9[-632],r11
80007c66:	2f f8       	sub	r8,-1
80007c68:	14 97       	mov	r7,r10
80007c6a:	fb 48 06 b4 	st.w	sp[1716],r8
80007c6e:	c0 58       	rjmp	80007c78 <_vfprintf_r+0xf48>
80007c70:	72 0b       	ld.w	r11,r9[0x0]
80007c72:	14 97       	mov	r7,r10
80007c74:	2f c9       	sub	r9,-4
80007c76:	51 09       	stdsp	sp[0x40],r9
80007c78:	50 1b       	stdsp	sp[0x4],r11
80007c7a:	30 0e       	mov	lr,0
80007c7c:	50 0e       	stdsp	sp[0x0],lr
80007c7e:	1c 98       	mov	r8,lr
80007c80:	e0 8f 02 fe 	bral	8000827c <_vfprintf_r+0x154c>
80007c84:	50 a7       	stdsp	sp[0x28],r7
80007c86:	50 80       	stdsp	sp[0x20],r0
80007c88:	0c 97       	mov	r7,r6
80007c8a:	04 94       	mov	r4,r2
80007c8c:	06 96       	mov	r6,r3
80007c8e:	02 92       	mov	r2,r1
80007c90:	40 93       	lddsp	r3,sp[0x24]
80007c92:	40 41       	lddsp	r1,sp[0x10]
80007c94:	0e 99       	mov	r9,r7
80007c96:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007c9a:	40 3c       	lddsp	r12,sp[0xc]
80007c9c:	58 0c       	cp.w	r12,0
80007c9e:	c1 d0       	breq	80007cd8 <_vfprintf_r+0xfa8>
80007ca0:	10 36       	cp.w	r6,r8
80007ca2:	c0 64       	brge	80007cae <_vfprintf_r+0xf7e>
80007ca4:	fa cb f9 44 	sub	r11,sp,-1724
80007ca8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007cac:	c1 d8       	rjmp	80007ce6 <_vfprintf_r+0xfb6>
80007cae:	fa c8 f9 50 	sub	r8,sp,-1712
80007cb2:	1a d8       	st.w	--sp,r8
80007cb4:	fa c8 fa b8 	sub	r8,sp,-1352
80007cb8:	1a d8       	st.w	--sp,r8
80007cba:	fa c8 fb b4 	sub	r8,sp,-1100
80007cbe:	1a d8       	st.w	--sp,r8
80007cc0:	fa c9 ff b4 	sub	r9,sp,-76
80007cc4:	fa c8 f9 40 	sub	r8,sp,-1728
80007cc8:	04 9a       	mov	r10,r2
80007cca:	0c 9b       	mov	r11,r6
80007ccc:	08 9c       	mov	r12,r4
80007cce:	fe b0 f6 93 	rcall	800069f4 <get_arg>
80007cd2:	2f dd       	sub	sp,-12
80007cd4:	78 09       	ld.w	r9,r12[0x0]
80007cd6:	c2 18       	rjmp	80007d18 <_vfprintf_r+0xfe8>
80007cd8:	2f f7       	sub	r7,-1
80007cda:	10 39       	cp.w	r9,r8
80007cdc:	c0 84       	brge	80007cec <_vfprintf_r+0xfbc>
80007cde:	fa ca f9 44 	sub	r10,sp,-1724
80007ce2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007ce6:	ec f9 fd 88 	ld.w	r9,r6[-632]
80007cea:	c1 78       	rjmp	80007d18 <_vfprintf_r+0xfe8>
80007cec:	41 09       	lddsp	r9,sp[0x40]
80007cee:	59 f8       	cp.w	r8,31
80007cf0:	e0 89 00 10 	brgt	80007d10 <_vfprintf_r+0xfe0>
80007cf4:	f2 ca ff fc 	sub	r10,r9,-4
80007cf8:	51 0a       	stdsp	sp[0x40],r10
80007cfa:	fa c6 f9 44 	sub	r6,sp,-1724
80007cfe:	72 09       	ld.w	r9,r9[0x0]
80007d00:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80007d04:	f5 49 fd 88 	st.w	r10[-632],r9
80007d08:	2f f8       	sub	r8,-1
80007d0a:	fb 48 06 b4 	st.w	sp[1716],r8
80007d0e:	c0 58       	rjmp	80007d18 <_vfprintf_r+0xfe8>
80007d10:	f2 c8 ff fc 	sub	r8,r9,-4
80007d14:	51 08       	stdsp	sp[0x40],r8
80007d16:	72 09       	ld.w	r9,r9[0x0]
80007d18:	33 08       	mov	r8,48
80007d1a:	fb 68 06 b8 	st.b	sp[1720],r8
80007d1e:	37 88       	mov	r8,120
80007d20:	30 0e       	mov	lr,0
80007d22:	fb 68 06 b9 	st.b	sp[1721],r8
80007d26:	4c ac       	lddpc	r12,80007e4c <_vfprintf_r+0x111c>
80007d28:	50 19       	stdsp	sp[0x4],r9
80007d2a:	a1 b5       	sbr	r5,0x1
80007d2c:	50 0e       	stdsp	sp[0x0],lr
80007d2e:	50 dc       	stdsp	sp[0x34],r12
80007d30:	30 28       	mov	r8,2
80007d32:	37 80       	mov	r0,120
80007d34:	e0 8f 02 a4 	bral	8000827c <_vfprintf_r+0x154c>
80007d38:	50 a7       	stdsp	sp[0x28],r7
80007d3a:	50 80       	stdsp	sp[0x20],r0
80007d3c:	10 90       	mov	r0,r8
80007d3e:	30 08       	mov	r8,0
80007d40:	fb 68 06 bb 	st.b	sp[1723],r8
80007d44:	0c 97       	mov	r7,r6
80007d46:	04 94       	mov	r4,r2
80007d48:	06 96       	mov	r6,r3
80007d4a:	02 92       	mov	r2,r1
80007d4c:	40 93       	lddsp	r3,sp[0x24]
80007d4e:	40 41       	lddsp	r1,sp[0x10]
80007d50:	0e 99       	mov	r9,r7
80007d52:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007d56:	40 3b       	lddsp	r11,sp[0xc]
80007d58:	58 0b       	cp.w	r11,0
80007d5a:	c1 d0       	breq	80007d94 <_vfprintf_r+0x1064>
80007d5c:	10 36       	cp.w	r6,r8
80007d5e:	c0 64       	brge	80007d6a <_vfprintf_r+0x103a>
80007d60:	fa ca f9 44 	sub	r10,sp,-1724
80007d64:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007d68:	c1 d8       	rjmp	80007da2 <_vfprintf_r+0x1072>
80007d6a:	fa c8 f9 50 	sub	r8,sp,-1712
80007d6e:	1a d8       	st.w	--sp,r8
80007d70:	fa c8 fa b8 	sub	r8,sp,-1352
80007d74:	1a d8       	st.w	--sp,r8
80007d76:	fa c8 fb b4 	sub	r8,sp,-1100
80007d7a:	0c 9b       	mov	r11,r6
80007d7c:	1a d8       	st.w	--sp,r8
80007d7e:	04 9a       	mov	r10,r2
80007d80:	fa c8 f9 40 	sub	r8,sp,-1728
80007d84:	fa c9 ff b4 	sub	r9,sp,-76
80007d88:	08 9c       	mov	r12,r4
80007d8a:	fe b0 f6 35 	rcall	800069f4 <get_arg>
80007d8e:	2f dd       	sub	sp,-12
80007d90:	78 06       	ld.w	r6,r12[0x0]
80007d92:	c2 08       	rjmp	80007dd2 <_vfprintf_r+0x10a2>
80007d94:	2f f7       	sub	r7,-1
80007d96:	10 39       	cp.w	r9,r8
80007d98:	c0 84       	brge	80007da8 <_vfprintf_r+0x1078>
80007d9a:	fa c9 f9 44 	sub	r9,sp,-1724
80007d9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007da2:	ec f6 fd 88 	ld.w	r6,r6[-632]
80007da6:	c1 68       	rjmp	80007dd2 <_vfprintf_r+0x10a2>
80007da8:	41 09       	lddsp	r9,sp[0x40]
80007daa:	59 f8       	cp.w	r8,31
80007dac:	e0 89 00 10 	brgt	80007dcc <_vfprintf_r+0x109c>
80007db0:	f2 ca ff fc 	sub	r10,r9,-4
80007db4:	51 0a       	stdsp	sp[0x40],r10
80007db6:	72 06       	ld.w	r6,r9[0x0]
80007db8:	fa ce f9 44 	sub	lr,sp,-1724
80007dbc:	fc 08 00 39 	add	r9,lr,r8<<0x3
80007dc0:	f3 46 fd 88 	st.w	r9[-632],r6
80007dc4:	2f f8       	sub	r8,-1
80007dc6:	fb 48 06 b4 	st.w	sp[1716],r8
80007dca:	c0 48       	rjmp	80007dd2 <_vfprintf_r+0x10a2>
80007dcc:	72 06       	ld.w	r6,r9[0x0]
80007dce:	2f c9       	sub	r9,-4
80007dd0:	51 09       	stdsp	sp[0x40],r9
80007dd2:	40 2c       	lddsp	r12,sp[0x8]
80007dd4:	58 0c       	cp.w	r12,0
80007dd6:	c1 05       	brlt	80007df6 <_vfprintf_r+0x10c6>
80007dd8:	18 9a       	mov	r10,r12
80007dda:	30 0b       	mov	r11,0
80007ddc:	0c 9c       	mov	r12,r6
80007dde:	e0 a0 14 63 	rcall	8000a6a4 <memchr>
80007de2:	e0 80 02 e0 	breq	800083a2 <_vfprintf_r+0x1672>
80007de6:	f8 06 01 02 	sub	r2,r12,r6
80007dea:	40 2b       	lddsp	r11,sp[0x8]
80007dec:	16 32       	cp.w	r2,r11
80007dee:	e0 89 02 da 	brgt	800083a2 <_vfprintf_r+0x1672>
80007df2:	e0 8f 02 d5 	bral	8000839c <_vfprintf_r+0x166c>
80007df6:	30 0a       	mov	r10,0
80007df8:	0c 9c       	mov	r12,r6
80007dfa:	50 2a       	stdsp	sp[0x8],r10
80007dfc:	e0 a0 19 e6 	rcall	8000b1c8 <strlen>
80007e00:	18 92       	mov	r2,r12
80007e02:	e0 8f 02 d3 	bral	800083a8 <_vfprintf_r+0x1678>
80007e06:	50 a7       	stdsp	sp[0x28],r7
80007e08:	50 80       	stdsp	sp[0x20],r0
80007e0a:	0c 97       	mov	r7,r6
80007e0c:	04 94       	mov	r4,r2
80007e0e:	06 96       	mov	r6,r3
80007e10:	02 92       	mov	r2,r1
80007e12:	40 93       	lddsp	r3,sp[0x24]
80007e14:	10 90       	mov	r0,r8
80007e16:	40 41       	lddsp	r1,sp[0x10]
80007e18:	a5 a5       	sbr	r5,0x4
80007e1a:	c0 a8       	rjmp	80007e2e <_vfprintf_r+0x10fe>
80007e1c:	50 a7       	stdsp	sp[0x28],r7
80007e1e:	50 80       	stdsp	sp[0x20],r0
80007e20:	0c 97       	mov	r7,r6
80007e22:	04 94       	mov	r4,r2
80007e24:	06 96       	mov	r6,r3
80007e26:	02 92       	mov	r2,r1
80007e28:	40 93       	lddsp	r3,sp[0x24]
80007e2a:	10 90       	mov	r0,r8
80007e2c:	40 41       	lddsp	r1,sp[0x10]
80007e2e:	ed b5 00 05 	bld	r5,0x5
80007e32:	c5 71       	brne	80007ee0 <_vfprintf_r+0x11b0>
80007e34:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007e38:	40 39       	lddsp	r9,sp[0xc]
80007e3a:	58 09       	cp.w	r9,0
80007e3c:	c2 20       	breq	80007e80 <_vfprintf_r+0x1150>
80007e3e:	10 36       	cp.w	r6,r8
80007e40:	c0 84       	brge	80007e50 <_vfprintf_r+0x1120>
80007e42:	fa c8 f9 44 	sub	r8,sp,-1724
80007e46:	f0 06 00 36 	add	r6,r8,r6<<0x3
80007e4a:	c2 48       	rjmp	80007e92 <_vfprintf_r+0x1162>
80007e4c:	80 00       	ld.sh	r0,r0[0x0]
80007e4e:	d2 84       	*unknown*
80007e50:	fa c8 f9 50 	sub	r8,sp,-1712
80007e54:	1a d8       	st.w	--sp,r8
80007e56:	fa c8 fa b8 	sub	r8,sp,-1352
80007e5a:	1a d8       	st.w	--sp,r8
80007e5c:	fa c8 fb b4 	sub	r8,sp,-1100
80007e60:	1a d8       	st.w	--sp,r8
80007e62:	fa c8 f9 40 	sub	r8,sp,-1728
80007e66:	fa c9 ff b4 	sub	r9,sp,-76
80007e6a:	04 9a       	mov	r10,r2
80007e6c:	0c 9b       	mov	r11,r6
80007e6e:	08 9c       	mov	r12,r4
80007e70:	fe b0 f5 c2 	rcall	800069f4 <get_arg>
80007e74:	2f dd       	sub	sp,-12
80007e76:	f8 e8 00 00 	ld.d	r8,r12[0]
80007e7a:	fa e9 00 00 	st.d	sp[0],r8
80007e7e:	c2 e8       	rjmp	80007eda <_vfprintf_r+0x11aa>
80007e80:	ee ca ff ff 	sub	r10,r7,-1
80007e84:	10 37       	cp.w	r7,r8
80007e86:	c0 b4       	brge	80007e9c <_vfprintf_r+0x116c>
80007e88:	fa c8 f9 44 	sub	r8,sp,-1724
80007e8c:	14 97       	mov	r7,r10
80007e8e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80007e92:	ec ea fd 88 	ld.d	r10,r6[-632]
80007e96:	fa eb 00 00 	st.d	sp[0],r10
80007e9a:	c2 08       	rjmp	80007eda <_vfprintf_r+0x11aa>
80007e9c:	41 09       	lddsp	r9,sp[0x40]
80007e9e:	59 f8       	cp.w	r8,31
80007ea0:	e0 89 00 16 	brgt	80007ecc <_vfprintf_r+0x119c>
80007ea4:	f2 e6 00 00 	ld.d	r6,r9[0]
80007ea8:	f2 cb ff f8 	sub	r11,r9,-8
80007eac:	fa e7 00 00 	st.d	sp[0],r6
80007eb0:	51 0b       	stdsp	sp[0x40],r11
80007eb2:	fa c6 f9 44 	sub	r6,sp,-1724
80007eb6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007eba:	fa e6 00 00 	ld.d	r6,sp[0]
80007ebe:	f2 e7 fd 88 	st.d	r9[-632],r6
80007ec2:	2f f8       	sub	r8,-1
80007ec4:	14 97       	mov	r7,r10
80007ec6:	fb 48 06 b4 	st.w	sp[1716],r8
80007eca:	c0 88       	rjmp	80007eda <_vfprintf_r+0x11aa>
80007ecc:	f2 e6 00 00 	ld.d	r6,r9[0]
80007ed0:	2f 89       	sub	r9,-8
80007ed2:	fa e7 00 00 	st.d	sp[0],r6
80007ed6:	51 09       	stdsp	sp[0x40],r9
80007ed8:	14 97       	mov	r7,r10
80007eda:	30 18       	mov	r8,1
80007edc:	e0 8f 01 d0 	bral	8000827c <_vfprintf_r+0x154c>
80007ee0:	ed b5 00 04 	bld	r5,0x4
80007ee4:	c1 61       	brne	80007f10 <_vfprintf_r+0x11e0>
80007ee6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007eea:	40 3e       	lddsp	lr,sp[0xc]
80007eec:	58 0e       	cp.w	lr,0
80007eee:	c0 80       	breq	80007efe <_vfprintf_r+0x11ce>
80007ef0:	10 36       	cp.w	r6,r8
80007ef2:	c6 74       	brge	80007fc0 <_vfprintf_r+0x1290>
80007ef4:	fa cc f9 44 	sub	r12,sp,-1724
80007ef8:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007efc:	c8 08       	rjmp	80007ffc <_vfprintf_r+0x12cc>
80007efe:	ee ca ff ff 	sub	r10,r7,-1
80007f02:	10 37       	cp.w	r7,r8
80007f04:	c7 f4       	brge	80008002 <_vfprintf_r+0x12d2>
80007f06:	fa cb f9 44 	sub	r11,sp,-1724
80007f0a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007f0e:	c7 68       	rjmp	80007ffa <_vfprintf_r+0x12ca>
80007f10:	ed b5 00 06 	bld	r5,0x6
80007f14:	c4 a1       	brne	80007fa8 <_vfprintf_r+0x1278>
80007f16:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007f1a:	40 3c       	lddsp	r12,sp[0xc]
80007f1c:	58 0c       	cp.w	r12,0
80007f1e:	c1 d0       	breq	80007f58 <_vfprintf_r+0x1228>
80007f20:	10 36       	cp.w	r6,r8
80007f22:	c0 64       	brge	80007f2e <_vfprintf_r+0x11fe>
80007f24:	fa cb f9 44 	sub	r11,sp,-1724
80007f28:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007f2c:	c1 f8       	rjmp	80007f6a <_vfprintf_r+0x123a>
80007f2e:	fa c8 f9 50 	sub	r8,sp,-1712
80007f32:	1a d8       	st.w	--sp,r8
80007f34:	fa c8 fa b8 	sub	r8,sp,-1352
80007f38:	1a d8       	st.w	--sp,r8
80007f3a:	fa c8 fb b4 	sub	r8,sp,-1100
80007f3e:	1a d8       	st.w	--sp,r8
80007f40:	fa c8 f9 40 	sub	r8,sp,-1728
80007f44:	fa c9 ff b4 	sub	r9,sp,-76
80007f48:	04 9a       	mov	r10,r2
80007f4a:	0c 9b       	mov	r11,r6
80007f4c:	08 9c       	mov	r12,r4
80007f4e:	fe b0 f5 53 	rcall	800069f4 <get_arg>
80007f52:	2f dd       	sub	sp,-12
80007f54:	98 18       	ld.sh	r8,r12[0x2]
80007f56:	c2 68       	rjmp	80007fa2 <_vfprintf_r+0x1272>
80007f58:	ee ca ff ff 	sub	r10,r7,-1
80007f5c:	10 37       	cp.w	r7,r8
80007f5e:	c0 94       	brge	80007f70 <_vfprintf_r+0x1240>
80007f60:	fa c9 f9 44 	sub	r9,sp,-1724
80007f64:	14 97       	mov	r7,r10
80007f66:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007f6a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007f6e:	c1 a8       	rjmp	80007fa2 <_vfprintf_r+0x1272>
80007f70:	41 09       	lddsp	r9,sp[0x40]
80007f72:	59 f8       	cp.w	r8,31
80007f74:	e0 89 00 13 	brgt	80007f9a <_vfprintf_r+0x126a>
80007f78:	f2 cb ff fc 	sub	r11,r9,-4
80007f7c:	51 0b       	stdsp	sp[0x40],r11
80007f7e:	72 09       	ld.w	r9,r9[0x0]
80007f80:	fa c6 f9 44 	sub	r6,sp,-1724
80007f84:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007f88:	2f f8       	sub	r8,-1
80007f8a:	f7 49 fd 88 	st.w	r11[-632],r9
80007f8e:	fb 48 06 b4 	st.w	sp[1716],r8
80007f92:	14 97       	mov	r7,r10
80007f94:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007f98:	c0 58       	rjmp	80007fa2 <_vfprintf_r+0x1272>
80007f9a:	92 18       	ld.sh	r8,r9[0x2]
80007f9c:	14 97       	mov	r7,r10
80007f9e:	2f c9       	sub	r9,-4
80007fa0:	51 09       	stdsp	sp[0x40],r9
80007fa2:	5c 78       	castu.h	r8
80007fa4:	50 18       	stdsp	sp[0x4],r8
80007fa6:	c4 68       	rjmp	80008032 <_vfprintf_r+0x1302>
80007fa8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007fac:	40 3c       	lddsp	r12,sp[0xc]
80007fae:	58 0c       	cp.w	r12,0
80007fb0:	c1 d0       	breq	80007fea <_vfprintf_r+0x12ba>
80007fb2:	10 36       	cp.w	r6,r8
80007fb4:	c0 64       	brge	80007fc0 <_vfprintf_r+0x1290>
80007fb6:	fa cb f9 44 	sub	r11,sp,-1724
80007fba:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007fbe:	c1 f8       	rjmp	80007ffc <_vfprintf_r+0x12cc>
80007fc0:	fa c8 f9 50 	sub	r8,sp,-1712
80007fc4:	1a d8       	st.w	--sp,r8
80007fc6:	fa c8 fa b8 	sub	r8,sp,-1352
80007fca:	0c 9b       	mov	r11,r6
80007fcc:	1a d8       	st.w	--sp,r8
80007fce:	fa c8 fb b4 	sub	r8,sp,-1100
80007fd2:	04 9a       	mov	r10,r2
80007fd4:	1a d8       	st.w	--sp,r8
80007fd6:	08 9c       	mov	r12,r4
80007fd8:	fa c8 f9 40 	sub	r8,sp,-1728
80007fdc:	fa c9 ff b4 	sub	r9,sp,-76
80007fe0:	fe b0 f5 0a 	rcall	800069f4 <get_arg>
80007fe4:	2f dd       	sub	sp,-12
80007fe6:	78 0b       	ld.w	r11,r12[0x0]
80007fe8:	c2 48       	rjmp	80008030 <_vfprintf_r+0x1300>
80007fea:	ee ca ff ff 	sub	r10,r7,-1
80007fee:	10 37       	cp.w	r7,r8
80007ff0:	c0 94       	brge	80008002 <_vfprintf_r+0x12d2>
80007ff2:	fa c9 f9 44 	sub	r9,sp,-1724
80007ff6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007ffa:	14 97       	mov	r7,r10
80007ffc:	ec fb fd 88 	ld.w	r11,r6[-632]
80008000:	c1 88       	rjmp	80008030 <_vfprintf_r+0x1300>
80008002:	41 09       	lddsp	r9,sp[0x40]
80008004:	59 f8       	cp.w	r8,31
80008006:	e0 89 00 11 	brgt	80008028 <_vfprintf_r+0x12f8>
8000800a:	f2 cb ff fc 	sub	r11,r9,-4
8000800e:	51 0b       	stdsp	sp[0x40],r11
80008010:	fa c6 f9 44 	sub	r6,sp,-1724
80008014:	72 0b       	ld.w	r11,r9[0x0]
80008016:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000801a:	f3 4b fd 88 	st.w	r9[-632],r11
8000801e:	2f f8       	sub	r8,-1
80008020:	14 97       	mov	r7,r10
80008022:	fb 48 06 b4 	st.w	sp[1716],r8
80008026:	c0 58       	rjmp	80008030 <_vfprintf_r+0x1300>
80008028:	72 0b       	ld.w	r11,r9[0x0]
8000802a:	14 97       	mov	r7,r10
8000802c:	2f c9       	sub	r9,-4
8000802e:	51 09       	stdsp	sp[0x40],r9
80008030:	50 1b       	stdsp	sp[0x4],r11
80008032:	30 0e       	mov	lr,0
80008034:	30 18       	mov	r8,1
80008036:	50 0e       	stdsp	sp[0x0],lr
80008038:	c2 29       	rjmp	8000827c <_vfprintf_r+0x154c>
8000803a:	50 a7       	stdsp	sp[0x28],r7
8000803c:	50 80       	stdsp	sp[0x20],r0
8000803e:	0c 97       	mov	r7,r6
80008040:	04 94       	mov	r4,r2
80008042:	06 96       	mov	r6,r3
80008044:	02 92       	mov	r2,r1
80008046:	4d 3c       	lddpc	r12,80008190 <_vfprintf_r+0x1460>
80008048:	40 93       	lddsp	r3,sp[0x24]
8000804a:	10 90       	mov	r0,r8
8000804c:	40 41       	lddsp	r1,sp[0x10]
8000804e:	50 dc       	stdsp	sp[0x34],r12
80008050:	ed b5 00 05 	bld	r5,0x5
80008054:	c5 51       	brne	800080fe <_vfprintf_r+0x13ce>
80008056:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000805a:	40 3b       	lddsp	r11,sp[0xc]
8000805c:	58 0b       	cp.w	r11,0
8000805e:	c2 20       	breq	800080a2 <_vfprintf_r+0x1372>
80008060:	10 36       	cp.w	r6,r8
80008062:	c0 a4       	brge	80008076 <_vfprintf_r+0x1346>
80008064:	fa ca f9 44 	sub	r10,sp,-1724
80008068:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000806c:	ec e8 fd 88 	ld.d	r8,r6[-632]
80008070:	fa e9 00 00 	st.d	sp[0],r8
80008074:	cf 38       	rjmp	8000825a <_vfprintf_r+0x152a>
80008076:	fa c8 f9 50 	sub	r8,sp,-1712
8000807a:	1a d8       	st.w	--sp,r8
8000807c:	fa c8 fa b8 	sub	r8,sp,-1352
80008080:	04 9a       	mov	r10,r2
80008082:	1a d8       	st.w	--sp,r8
80008084:	0c 9b       	mov	r11,r6
80008086:	fa c8 fb b4 	sub	r8,sp,-1100
8000808a:	08 9c       	mov	r12,r4
8000808c:	1a d8       	st.w	--sp,r8
8000808e:	fa c8 f9 40 	sub	r8,sp,-1728
80008092:	fa c9 ff b4 	sub	r9,sp,-76
80008096:	fe b0 f4 af 	rcall	800069f4 <get_arg>
8000809a:	2f dd       	sub	sp,-12
8000809c:	f8 ea 00 00 	ld.d	r10,r12[0]
800080a0:	c0 c8       	rjmp	800080b8 <_vfprintf_r+0x1388>
800080a2:	ee ca ff ff 	sub	r10,r7,-1
800080a6:	10 37       	cp.w	r7,r8
800080a8:	c0 b4       	brge	800080be <_vfprintf_r+0x138e>
800080aa:	fa c9 f9 44 	sub	r9,sp,-1724
800080ae:	14 97       	mov	r7,r10
800080b0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800080b4:	ec ea fd 88 	ld.d	r10,r6[-632]
800080b8:	fa eb 00 00 	st.d	sp[0],r10
800080bc:	cc f8       	rjmp	8000825a <_vfprintf_r+0x152a>
800080be:	41 09       	lddsp	r9,sp[0x40]
800080c0:	59 f8       	cp.w	r8,31
800080c2:	e0 89 00 16 	brgt	800080ee <_vfprintf_r+0x13be>
800080c6:	f2 e6 00 00 	ld.d	r6,r9[0]
800080ca:	f2 cb ff f8 	sub	r11,r9,-8
800080ce:	fa e7 00 00 	st.d	sp[0],r6
800080d2:	51 0b       	stdsp	sp[0x40],r11
800080d4:	fa c6 f9 44 	sub	r6,sp,-1724
800080d8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800080dc:	fa e6 00 00 	ld.d	r6,sp[0]
800080e0:	f2 e7 fd 88 	st.d	r9[-632],r6
800080e4:	2f f8       	sub	r8,-1
800080e6:	14 97       	mov	r7,r10
800080e8:	fb 48 06 b4 	st.w	sp[1716],r8
800080ec:	cb 78       	rjmp	8000825a <_vfprintf_r+0x152a>
800080ee:	f2 e6 00 00 	ld.d	r6,r9[0]
800080f2:	2f 89       	sub	r9,-8
800080f4:	fa e7 00 00 	st.d	sp[0],r6
800080f8:	51 09       	stdsp	sp[0x40],r9
800080fa:	14 97       	mov	r7,r10
800080fc:	ca f8       	rjmp	8000825a <_vfprintf_r+0x152a>
800080fe:	ed b5 00 04 	bld	r5,0x4
80008102:	c1 71       	brne	80008130 <_vfprintf_r+0x1400>
80008104:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008108:	40 3e       	lddsp	lr,sp[0xc]
8000810a:	58 0e       	cp.w	lr,0
8000810c:	c0 80       	breq	8000811c <_vfprintf_r+0x13ec>
8000810e:	10 36       	cp.w	r6,r8
80008110:	c6 a4       	brge	800081e4 <_vfprintf_r+0x14b4>
80008112:	fa cc f9 44 	sub	r12,sp,-1724
80008116:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000811a:	c8 38       	rjmp	80008220 <_vfprintf_r+0x14f0>
8000811c:	ee ca ff ff 	sub	r10,r7,-1
80008120:	10 37       	cp.w	r7,r8
80008122:	e0 84 00 82 	brge	80008226 <_vfprintf_r+0x14f6>
80008126:	fa cb f9 44 	sub	r11,sp,-1724
8000812a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000812e:	c7 88       	rjmp	8000821e <_vfprintf_r+0x14ee>
80008130:	ed b5 00 06 	bld	r5,0x6
80008134:	c4 c1       	brne	800081cc <_vfprintf_r+0x149c>
80008136:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000813a:	40 3c       	lddsp	r12,sp[0xc]
8000813c:	58 0c       	cp.w	r12,0
8000813e:	c1 d0       	breq	80008178 <_vfprintf_r+0x1448>
80008140:	10 36       	cp.w	r6,r8
80008142:	c0 64       	brge	8000814e <_vfprintf_r+0x141e>
80008144:	fa cb f9 44 	sub	r11,sp,-1724
80008148:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000814c:	c1 f8       	rjmp	8000818a <_vfprintf_r+0x145a>
8000814e:	fa c8 f9 50 	sub	r8,sp,-1712
80008152:	1a d8       	st.w	--sp,r8
80008154:	fa c8 fa b8 	sub	r8,sp,-1352
80008158:	1a d8       	st.w	--sp,r8
8000815a:	fa c8 fb b4 	sub	r8,sp,-1100
8000815e:	1a d8       	st.w	--sp,r8
80008160:	fa c8 f9 40 	sub	r8,sp,-1728
80008164:	fa c9 ff b4 	sub	r9,sp,-76
80008168:	04 9a       	mov	r10,r2
8000816a:	0c 9b       	mov	r11,r6
8000816c:	08 9c       	mov	r12,r4
8000816e:	fe b0 f4 43 	rcall	800069f4 <get_arg>
80008172:	2f dd       	sub	sp,-12
80008174:	98 18       	ld.sh	r8,r12[0x2]
80008176:	c2 88       	rjmp	800081c6 <_vfprintf_r+0x1496>
80008178:	ee ca ff ff 	sub	r10,r7,-1
8000817c:	10 37       	cp.w	r7,r8
8000817e:	c0 b4       	brge	80008194 <_vfprintf_r+0x1464>
80008180:	fa c9 f9 44 	sub	r9,sp,-1724
80008184:	14 97       	mov	r7,r10
80008186:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000818a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000818e:	c1 c8       	rjmp	800081c6 <_vfprintf_r+0x1496>
80008190:	80 00       	ld.sh	r0,r0[0x0]
80008192:	d2 84       	*unknown*
80008194:	41 09       	lddsp	r9,sp[0x40]
80008196:	59 f8       	cp.w	r8,31
80008198:	e0 89 00 13 	brgt	800081be <_vfprintf_r+0x148e>
8000819c:	f2 cb ff fc 	sub	r11,r9,-4
800081a0:	51 0b       	stdsp	sp[0x40],r11
800081a2:	72 09       	ld.w	r9,r9[0x0]
800081a4:	fa c6 f9 44 	sub	r6,sp,-1724
800081a8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800081ac:	2f f8       	sub	r8,-1
800081ae:	f7 49 fd 88 	st.w	r11[-632],r9
800081b2:	fb 48 06 b4 	st.w	sp[1716],r8
800081b6:	14 97       	mov	r7,r10
800081b8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800081bc:	c0 58       	rjmp	800081c6 <_vfprintf_r+0x1496>
800081be:	92 18       	ld.sh	r8,r9[0x2]
800081c0:	14 97       	mov	r7,r10
800081c2:	2f c9       	sub	r9,-4
800081c4:	51 09       	stdsp	sp[0x40],r9
800081c6:	5c 78       	castu.h	r8
800081c8:	50 18       	stdsp	sp[0x4],r8
800081ca:	c4 68       	rjmp	80008256 <_vfprintf_r+0x1526>
800081cc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800081d0:	40 3c       	lddsp	r12,sp[0xc]
800081d2:	58 0c       	cp.w	r12,0
800081d4:	c1 d0       	breq	8000820e <_vfprintf_r+0x14de>
800081d6:	10 36       	cp.w	r6,r8
800081d8:	c0 64       	brge	800081e4 <_vfprintf_r+0x14b4>
800081da:	fa cb f9 44 	sub	r11,sp,-1724
800081de:	f6 06 00 36 	add	r6,r11,r6<<0x3
800081e2:	c1 f8       	rjmp	80008220 <_vfprintf_r+0x14f0>
800081e4:	fa c8 f9 50 	sub	r8,sp,-1712
800081e8:	1a d8       	st.w	--sp,r8
800081ea:	fa c8 fa b8 	sub	r8,sp,-1352
800081ee:	0c 9b       	mov	r11,r6
800081f0:	1a d8       	st.w	--sp,r8
800081f2:	fa c8 fb b4 	sub	r8,sp,-1100
800081f6:	04 9a       	mov	r10,r2
800081f8:	1a d8       	st.w	--sp,r8
800081fa:	08 9c       	mov	r12,r4
800081fc:	fa c8 f9 40 	sub	r8,sp,-1728
80008200:	fa c9 ff b4 	sub	r9,sp,-76
80008204:	fe b0 f3 f8 	rcall	800069f4 <get_arg>
80008208:	2f dd       	sub	sp,-12
8000820a:	78 0b       	ld.w	r11,r12[0x0]
8000820c:	c2 48       	rjmp	80008254 <_vfprintf_r+0x1524>
8000820e:	ee ca ff ff 	sub	r10,r7,-1
80008212:	10 37       	cp.w	r7,r8
80008214:	c0 94       	brge	80008226 <_vfprintf_r+0x14f6>
80008216:	fa c9 f9 44 	sub	r9,sp,-1724
8000821a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000821e:	14 97       	mov	r7,r10
80008220:	ec fb fd 88 	ld.w	r11,r6[-632]
80008224:	c1 88       	rjmp	80008254 <_vfprintf_r+0x1524>
80008226:	41 09       	lddsp	r9,sp[0x40]
80008228:	59 f8       	cp.w	r8,31
8000822a:	e0 89 00 11 	brgt	8000824c <_vfprintf_r+0x151c>
8000822e:	f2 cb ff fc 	sub	r11,r9,-4
80008232:	51 0b       	stdsp	sp[0x40],r11
80008234:	fa c6 f9 44 	sub	r6,sp,-1724
80008238:	72 0b       	ld.w	r11,r9[0x0]
8000823a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000823e:	f3 4b fd 88 	st.w	r9[-632],r11
80008242:	2f f8       	sub	r8,-1
80008244:	14 97       	mov	r7,r10
80008246:	fb 48 06 b4 	st.w	sp[1716],r8
8000824a:	c0 58       	rjmp	80008254 <_vfprintf_r+0x1524>
8000824c:	72 0b       	ld.w	r11,r9[0x0]
8000824e:	14 97       	mov	r7,r10
80008250:	2f c9       	sub	r9,-4
80008252:	51 09       	stdsp	sp[0x40],r9
80008254:	50 1b       	stdsp	sp[0x4],r11
80008256:	30 0e       	mov	lr,0
80008258:	50 0e       	stdsp	sp[0x0],lr
8000825a:	40 08       	lddsp	r8,sp[0x0]
8000825c:	40 1c       	lddsp	r12,sp[0x4]
8000825e:	18 48       	or	r8,r12
80008260:	5f 19       	srne	r9
80008262:	0a 98       	mov	r8,r5
80008264:	eb e9 00 09 	and	r9,r5,r9
80008268:	a1 b8       	sbr	r8,0x1
8000826a:	58 09       	cp.w	r9,0
8000826c:	c0 70       	breq	8000827a <_vfprintf_r+0x154a>
8000826e:	10 95       	mov	r5,r8
80008270:	fb 60 06 b9 	st.b	sp[1721],r0
80008274:	33 08       	mov	r8,48
80008276:	fb 68 06 b8 	st.b	sp[1720],r8
8000827a:	30 28       	mov	r8,2
8000827c:	30 09       	mov	r9,0
8000827e:	fb 69 06 bb 	st.b	sp[1723],r9
80008282:	0a 99       	mov	r9,r5
80008284:	a7 d9       	cbr	r9,0x7
80008286:	40 2b       	lddsp	r11,sp[0x8]
80008288:	40 16       	lddsp	r6,sp[0x4]
8000828a:	58 0b       	cp.w	r11,0
8000828c:	5f 1a       	srne	r10
8000828e:	f2 05 17 40 	movge	r5,r9
80008292:	fa c2 f9 78 	sub	r2,sp,-1672
80008296:	40 09       	lddsp	r9,sp[0x0]
80008298:	0c 49       	or	r9,r6
8000829a:	5f 19       	srne	r9
8000829c:	f5 e9 10 09 	or	r9,r10,r9
800082a0:	c5 c0       	breq	80008358 <_vfprintf_r+0x1628>
800082a2:	30 19       	mov	r9,1
800082a4:	f2 08 18 00 	cp.b	r8,r9
800082a8:	c0 60       	breq	800082b4 <_vfprintf_r+0x1584>
800082aa:	30 29       	mov	r9,2
800082ac:	f2 08 18 00 	cp.b	r8,r9
800082b0:	c0 41       	brne	800082b8 <_vfprintf_r+0x1588>
800082b2:	c3 c8       	rjmp	8000832a <_vfprintf_r+0x15fa>
800082b4:	04 96       	mov	r6,r2
800082b6:	c3 08       	rjmp	80008316 <_vfprintf_r+0x15e6>
800082b8:	04 96       	mov	r6,r2
800082ba:	fa e8 00 00 	ld.d	r8,sp[0]
800082be:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800082c2:	2d 0a       	sub	r10,-48
800082c4:	0c fa       	st.b	--r6,r10
800082c6:	f0 0b 16 03 	lsr	r11,r8,0x3
800082ca:	f2 0c 16 03 	lsr	r12,r9,0x3
800082ce:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800082d2:	18 99       	mov	r9,r12
800082d4:	16 98       	mov	r8,r11
800082d6:	58 08       	cp.w	r8,0
800082d8:	5c 29       	cpc	r9
800082da:	cf 21       	brne	800082be <_vfprintf_r+0x158e>
800082dc:	fa e9 00 00 	st.d	sp[0],r8
800082e0:	ed b5 00 00 	bld	r5,0x0
800082e4:	c4 51       	brne	8000836e <_vfprintf_r+0x163e>
800082e6:	33 09       	mov	r9,48
800082e8:	f2 0a 18 00 	cp.b	r10,r9
800082ec:	c4 10       	breq	8000836e <_vfprintf_r+0x163e>
800082ee:	0c f9       	st.b	--r6,r9
800082f0:	c3 f8       	rjmp	8000836e <_vfprintf_r+0x163e>
800082f2:	fa ea 00 00 	ld.d	r10,sp[0]
800082f6:	30 a8       	mov	r8,10
800082f8:	30 09       	mov	r9,0
800082fa:	e0 a0 1d c7 	rcall	8000be88 <__avr32_umod64>
800082fe:	30 a8       	mov	r8,10
80008300:	2d 0a       	sub	r10,-48
80008302:	30 09       	mov	r9,0
80008304:	ac 8a       	st.b	r6[0x0],r10
80008306:	fa ea 00 00 	ld.d	r10,sp[0]
8000830a:	fe b0 f2 24 	rcall	80006752 <__avr32_udiv64>
8000830e:	16 99       	mov	r9,r11
80008310:	14 98       	mov	r8,r10
80008312:	fa e9 00 00 	st.d	sp[0],r8
80008316:	20 16       	sub	r6,1
80008318:	fa ea 00 00 	ld.d	r10,sp[0]
8000831c:	58 9a       	cp.w	r10,9
8000831e:	5c 2b       	cpc	r11
80008320:	fe 9b ff e9 	brhi	800082f2 <_vfprintf_r+0x15c2>
80008324:	1b f8       	ld.ub	r8,sp[0x7]
80008326:	2d 08       	sub	r8,-48
80008328:	c2 08       	rjmp	80008368 <_vfprintf_r+0x1638>
8000832a:	04 96       	mov	r6,r2
8000832c:	fa e8 00 00 	ld.d	r8,sp[0]
80008330:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80008334:	40 de       	lddsp	lr,sp[0x34]
80008336:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000833a:	0c fa       	st.b	--r6,r10
8000833c:	f2 0b 16 04 	lsr	r11,r9,0x4
80008340:	f0 0a 16 04 	lsr	r10,r8,0x4
80008344:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80008348:	16 99       	mov	r9,r11
8000834a:	14 98       	mov	r8,r10
8000834c:	58 08       	cp.w	r8,0
8000834e:	5c 29       	cpc	r9
80008350:	cf 01       	brne	80008330 <_vfprintf_r+0x1600>
80008352:	fa e9 00 00 	st.d	sp[0],r8
80008356:	c0 c8       	rjmp	8000836e <_vfprintf_r+0x163e>
80008358:	58 08       	cp.w	r8,0
8000835a:	c0 91       	brne	8000836c <_vfprintf_r+0x163c>
8000835c:	ed b5 00 00 	bld	r5,0x0
80008360:	c0 61       	brne	8000836c <_vfprintf_r+0x163c>
80008362:	fa c6 f9 79 	sub	r6,sp,-1671
80008366:	33 08       	mov	r8,48
80008368:	ac 88       	st.b	r6[0x0],r8
8000836a:	c0 28       	rjmp	8000836e <_vfprintf_r+0x163e>
8000836c:	04 96       	mov	r6,r2
8000836e:	0c 12       	sub	r2,r6
80008370:	c1 c8       	rjmp	800083a8 <_vfprintf_r+0x1678>
80008372:	50 a7       	stdsp	sp[0x28],r7
80008374:	50 80       	stdsp	sp[0x20],r0
80008376:	40 93       	lddsp	r3,sp[0x24]
80008378:	0c 97       	mov	r7,r6
8000837a:	10 90       	mov	r0,r8
8000837c:	04 94       	mov	r4,r2
8000837e:	40 41       	lddsp	r1,sp[0x10]
80008380:	58 08       	cp.w	r8,0
80008382:	e0 80 04 51 	breq	80008c24 <_vfprintf_r+0x1ef4>
80008386:	fb 68 06 60 	st.b	sp[1632],r8
8000838a:	30 0c       	mov	r12,0
8000838c:	30 08       	mov	r8,0
8000838e:	30 12       	mov	r2,1
80008390:	fb 68 06 bb 	st.b	sp[1723],r8
80008394:	50 2c       	stdsp	sp[0x8],r12
80008396:	fa c6 f9 a0 	sub	r6,sp,-1632
8000839a:	c0 78       	rjmp	800083a8 <_vfprintf_r+0x1678>
8000839c:	30 0b       	mov	r11,0
8000839e:	50 2b       	stdsp	sp[0x8],r11
800083a0:	c0 48       	rjmp	800083a8 <_vfprintf_r+0x1678>
800083a2:	40 22       	lddsp	r2,sp[0x8]
800083a4:	30 0a       	mov	r10,0
800083a6:	50 2a       	stdsp	sp[0x8],r10
800083a8:	40 29       	lddsp	r9,sp[0x8]
800083aa:	e4 09 0c 49 	max	r9,r2,r9
800083ae:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800083b2:	50 39       	stdsp	sp[0xc],r9
800083b4:	0a 9e       	mov	lr,r5
800083b6:	30 09       	mov	r9,0
800083b8:	e2 1e 00 02 	andl	lr,0x2,COH
800083bc:	f2 08 18 00 	cp.b	r8,r9
800083c0:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800083c4:	f7 b8 01 ff 	subne	r8,-1
800083c8:	fb f8 1a 03 	st.wne	sp[0xc],r8
800083cc:	0a 9b       	mov	r11,r5
800083ce:	58 0e       	cp.w	lr,0
800083d0:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800083d4:	f7 bc 01 fe 	subne	r12,-2
800083d8:	fb fc 1a 03 	st.wne	sp[0xc],r12
800083dc:	e2 1b 00 84 	andl	r11,0x84,COH
800083e0:	50 fe       	stdsp	sp[0x3c],lr
800083e2:	50 9b       	stdsp	sp[0x24],r11
800083e4:	c4 51       	brne	8000846e <_vfprintf_r+0x173e>
800083e6:	40 8a       	lddsp	r10,sp[0x20]
800083e8:	40 39       	lddsp	r9,sp[0xc]
800083ea:	12 1a       	sub	r10,r9
800083ec:	50 4a       	stdsp	sp[0x10],r10
800083ee:	58 0a       	cp.w	r10,0
800083f0:	e0 89 00 1f 	brgt	8000842e <_vfprintf_r+0x16fe>
800083f4:	c3 d8       	rjmp	8000846e <_vfprintf_r+0x173e>
800083f6:	2f 09       	sub	r9,-16
800083f8:	2f f8       	sub	r8,-1
800083fa:	4c ee       	lddpc	lr,80008530 <_vfprintf_r+0x1800>
800083fc:	31 0c       	mov	r12,16
800083fe:	fb 49 06 90 	st.w	sp[1680],r9
80008402:	87 0e       	st.w	r3[0x0],lr
80008404:	87 1c       	st.w	r3[0x4],r12
80008406:	fb 48 06 8c 	st.w	sp[1676],r8
8000840a:	58 78       	cp.w	r8,7
8000840c:	e0 89 00 04 	brgt	80008414 <_vfprintf_r+0x16e4>
80008410:	2f 83       	sub	r3,-8
80008412:	c0 b8       	rjmp	80008428 <_vfprintf_r+0x16f8>
80008414:	fa ca f9 78 	sub	r10,sp,-1672
80008418:	02 9b       	mov	r11,r1
8000841a:	08 9c       	mov	r12,r4
8000841c:	fe b0 f4 7c 	rcall	80006d14 <__sprint_r>
80008420:	e0 81 04 13 	brne	80008c46 <_vfprintf_r+0x1f16>
80008424:	fa c3 f9 e0 	sub	r3,sp,-1568
80008428:	40 4b       	lddsp	r11,sp[0x10]
8000842a:	21 0b       	sub	r11,16
8000842c:	50 4b       	stdsp	sp[0x10],r11
8000842e:	fa f9 06 90 	ld.w	r9,sp[1680]
80008432:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008436:	4b fa       	lddpc	r10,80008530 <_vfprintf_r+0x1800>
80008438:	40 4e       	lddsp	lr,sp[0x10]
8000843a:	59 0e       	cp.w	lr,16
8000843c:	fe 99 ff dd 	brgt	800083f6 <_vfprintf_r+0x16c6>
80008440:	1c 09       	add	r9,lr
80008442:	2f f8       	sub	r8,-1
80008444:	87 0a       	st.w	r3[0x0],r10
80008446:	fb 49 06 90 	st.w	sp[1680],r9
8000844a:	87 1e       	st.w	r3[0x4],lr
8000844c:	fb 48 06 8c 	st.w	sp[1676],r8
80008450:	58 78       	cp.w	r8,7
80008452:	e0 89 00 04 	brgt	8000845a <_vfprintf_r+0x172a>
80008456:	2f 83       	sub	r3,-8
80008458:	c0 b8       	rjmp	8000846e <_vfprintf_r+0x173e>
8000845a:	fa ca f9 78 	sub	r10,sp,-1672
8000845e:	02 9b       	mov	r11,r1
80008460:	08 9c       	mov	r12,r4
80008462:	fe b0 f4 59 	rcall	80006d14 <__sprint_r>
80008466:	e0 81 03 f0 	brne	80008c46 <_vfprintf_r+0x1f16>
8000846a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000846e:	30 09       	mov	r9,0
80008470:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80008474:	f2 08 18 00 	cp.b	r8,r9
80008478:	c1 f0       	breq	800084b6 <_vfprintf_r+0x1786>
8000847a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000847e:	fa c9 f9 45 	sub	r9,sp,-1723
80008482:	2f f8       	sub	r8,-1
80008484:	87 09       	st.w	r3[0x0],r9
80008486:	fb 48 06 90 	st.w	sp[1680],r8
8000848a:	30 19       	mov	r9,1
8000848c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008490:	87 19       	st.w	r3[0x4],r9
80008492:	2f f8       	sub	r8,-1
80008494:	fb 48 06 8c 	st.w	sp[1676],r8
80008498:	58 78       	cp.w	r8,7
8000849a:	e0 89 00 04 	brgt	800084a2 <_vfprintf_r+0x1772>
8000849e:	2f 83       	sub	r3,-8
800084a0:	c0 b8       	rjmp	800084b6 <_vfprintf_r+0x1786>
800084a2:	fa ca f9 78 	sub	r10,sp,-1672
800084a6:	02 9b       	mov	r11,r1
800084a8:	08 9c       	mov	r12,r4
800084aa:	fe b0 f4 35 	rcall	80006d14 <__sprint_r>
800084ae:	e0 81 03 cc 	brne	80008c46 <_vfprintf_r+0x1f16>
800084b2:	fa c3 f9 e0 	sub	r3,sp,-1568
800084b6:	40 fc       	lddsp	r12,sp[0x3c]
800084b8:	58 0c       	cp.w	r12,0
800084ba:	c1 f0       	breq	800084f8 <_vfprintf_r+0x17c8>
800084bc:	fa f8 06 90 	ld.w	r8,sp[1680]
800084c0:	fa c9 f9 48 	sub	r9,sp,-1720
800084c4:	2f e8       	sub	r8,-2
800084c6:	87 09       	st.w	r3[0x0],r9
800084c8:	fb 48 06 90 	st.w	sp[1680],r8
800084cc:	30 29       	mov	r9,2
800084ce:	fa f8 06 8c 	ld.w	r8,sp[1676]
800084d2:	87 19       	st.w	r3[0x4],r9
800084d4:	2f f8       	sub	r8,-1
800084d6:	fb 48 06 8c 	st.w	sp[1676],r8
800084da:	58 78       	cp.w	r8,7
800084dc:	e0 89 00 04 	brgt	800084e4 <_vfprintf_r+0x17b4>
800084e0:	2f 83       	sub	r3,-8
800084e2:	c0 b8       	rjmp	800084f8 <_vfprintf_r+0x17c8>
800084e4:	fa ca f9 78 	sub	r10,sp,-1672
800084e8:	02 9b       	mov	r11,r1
800084ea:	08 9c       	mov	r12,r4
800084ec:	fe b0 f4 14 	rcall	80006d14 <__sprint_r>
800084f0:	e0 81 03 ab 	brne	80008c46 <_vfprintf_r+0x1f16>
800084f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800084f8:	40 9b       	lddsp	r11,sp[0x24]
800084fa:	e0 4b 00 80 	cp.w	r11,128
800084fe:	c4 a1       	brne	80008592 <_vfprintf_r+0x1862>
80008500:	40 8a       	lddsp	r10,sp[0x20]
80008502:	40 39       	lddsp	r9,sp[0xc]
80008504:	12 1a       	sub	r10,r9
80008506:	50 4a       	stdsp	sp[0x10],r10
80008508:	58 0a       	cp.w	r10,0
8000850a:	e0 89 00 24 	brgt	80008552 <_vfprintf_r+0x1822>
8000850e:	c4 28       	rjmp	80008592 <_vfprintf_r+0x1862>
80008510:	2f 09       	sub	r9,-16
80008512:	2f f8       	sub	r8,-1
80008514:	48 8e       	lddpc	lr,80008534 <_vfprintf_r+0x1804>
80008516:	31 0c       	mov	r12,16
80008518:	fb 49 06 90 	st.w	sp[1680],r9
8000851c:	87 0e       	st.w	r3[0x0],lr
8000851e:	87 1c       	st.w	r3[0x4],r12
80008520:	fb 48 06 8c 	st.w	sp[1676],r8
80008524:	58 78       	cp.w	r8,7
80008526:	e0 89 00 09 	brgt	80008538 <_vfprintf_r+0x1808>
8000852a:	2f 83       	sub	r3,-8
8000852c:	c1 08       	rjmp	8000854c <_vfprintf_r+0x181c>
8000852e:	d7 03       	nop
80008530:	80 00       	ld.sh	r0,r0[0x0]
80008532:	d2 9c       	*unknown*
80008534:	80 00       	ld.sh	r0,r0[0x0]
80008536:	d2 ac       	*unknown*
80008538:	fa ca f9 78 	sub	r10,sp,-1672
8000853c:	02 9b       	mov	r11,r1
8000853e:	08 9c       	mov	r12,r4
80008540:	fe b0 f3 ea 	rcall	80006d14 <__sprint_r>
80008544:	e0 81 03 81 	brne	80008c46 <_vfprintf_r+0x1f16>
80008548:	fa c3 f9 e0 	sub	r3,sp,-1568
8000854c:	40 4b       	lddsp	r11,sp[0x10]
8000854e:	21 0b       	sub	r11,16
80008550:	50 4b       	stdsp	sp[0x10],r11
80008552:	fa f9 06 90 	ld.w	r9,sp[1680]
80008556:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000855a:	4c 6a       	lddpc	r10,80008670 <_vfprintf_r+0x1940>
8000855c:	40 4e       	lddsp	lr,sp[0x10]
8000855e:	59 0e       	cp.w	lr,16
80008560:	fe 99 ff d8 	brgt	80008510 <_vfprintf_r+0x17e0>
80008564:	1c 09       	add	r9,lr
80008566:	2f f8       	sub	r8,-1
80008568:	87 0a       	st.w	r3[0x0],r10
8000856a:	fb 49 06 90 	st.w	sp[1680],r9
8000856e:	87 1e       	st.w	r3[0x4],lr
80008570:	fb 48 06 8c 	st.w	sp[1676],r8
80008574:	58 78       	cp.w	r8,7
80008576:	e0 89 00 04 	brgt	8000857e <_vfprintf_r+0x184e>
8000857a:	2f 83       	sub	r3,-8
8000857c:	c0 b8       	rjmp	80008592 <_vfprintf_r+0x1862>
8000857e:	fa ca f9 78 	sub	r10,sp,-1672
80008582:	02 9b       	mov	r11,r1
80008584:	08 9c       	mov	r12,r4
80008586:	fe b0 f3 c7 	rcall	80006d14 <__sprint_r>
8000858a:	e0 81 03 5e 	brne	80008c46 <_vfprintf_r+0x1f16>
8000858e:	fa c3 f9 e0 	sub	r3,sp,-1568
80008592:	40 2c       	lddsp	r12,sp[0x8]
80008594:	04 1c       	sub	r12,r2
80008596:	50 2c       	stdsp	sp[0x8],r12
80008598:	58 0c       	cp.w	r12,0
8000859a:	e0 89 00 1f 	brgt	800085d8 <_vfprintf_r+0x18a8>
8000859e:	c3 d8       	rjmp	80008618 <_vfprintf_r+0x18e8>
800085a0:	2f 09       	sub	r9,-16
800085a2:	2f f8       	sub	r8,-1
800085a4:	4b 3b       	lddpc	r11,80008670 <_vfprintf_r+0x1940>
800085a6:	31 0a       	mov	r10,16
800085a8:	fb 49 06 90 	st.w	sp[1680],r9
800085ac:	87 0b       	st.w	r3[0x0],r11
800085ae:	87 1a       	st.w	r3[0x4],r10
800085b0:	fb 48 06 8c 	st.w	sp[1676],r8
800085b4:	58 78       	cp.w	r8,7
800085b6:	e0 89 00 04 	brgt	800085be <_vfprintf_r+0x188e>
800085ba:	2f 83       	sub	r3,-8
800085bc:	c0 b8       	rjmp	800085d2 <_vfprintf_r+0x18a2>
800085be:	fa ca f9 78 	sub	r10,sp,-1672
800085c2:	02 9b       	mov	r11,r1
800085c4:	08 9c       	mov	r12,r4
800085c6:	fe b0 f3 a7 	rcall	80006d14 <__sprint_r>
800085ca:	e0 81 03 3e 	brne	80008c46 <_vfprintf_r+0x1f16>
800085ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800085d2:	40 29       	lddsp	r9,sp[0x8]
800085d4:	21 09       	sub	r9,16
800085d6:	50 29       	stdsp	sp[0x8],r9
800085d8:	fa f9 06 90 	ld.w	r9,sp[1680]
800085dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800085e0:	4a 4a       	lddpc	r10,80008670 <_vfprintf_r+0x1940>
800085e2:	40 2e       	lddsp	lr,sp[0x8]
800085e4:	59 0e       	cp.w	lr,16
800085e6:	fe 99 ff dd 	brgt	800085a0 <_vfprintf_r+0x1870>
800085ea:	1c 09       	add	r9,lr
800085ec:	2f f8       	sub	r8,-1
800085ee:	87 0a       	st.w	r3[0x0],r10
800085f0:	fb 49 06 90 	st.w	sp[1680],r9
800085f4:	87 1e       	st.w	r3[0x4],lr
800085f6:	fb 48 06 8c 	st.w	sp[1676],r8
800085fa:	58 78       	cp.w	r8,7
800085fc:	e0 89 00 04 	brgt	80008604 <_vfprintf_r+0x18d4>
80008600:	2f 83       	sub	r3,-8
80008602:	c0 b8       	rjmp	80008618 <_vfprintf_r+0x18e8>
80008604:	fa ca f9 78 	sub	r10,sp,-1672
80008608:	02 9b       	mov	r11,r1
8000860a:	08 9c       	mov	r12,r4
8000860c:	fe b0 f3 84 	rcall	80006d14 <__sprint_r>
80008610:	e0 81 03 1b 	brne	80008c46 <_vfprintf_r+0x1f16>
80008614:	fa c3 f9 e0 	sub	r3,sp,-1568
80008618:	ed b5 00 08 	bld	r5,0x8
8000861c:	c0 b0       	breq	80008632 <_vfprintf_r+0x1902>
8000861e:	fa f8 06 90 	ld.w	r8,sp[1680]
80008622:	87 12       	st.w	r3[0x4],r2
80008624:	87 06       	st.w	r3[0x0],r6
80008626:	f0 02 00 02 	add	r2,r8,r2
8000862a:	fb 42 06 90 	st.w	sp[1680],r2
8000862e:	e0 8f 01 d5 	bral	800089d8 <_vfprintf_r+0x1ca8>
80008632:	e0 40 00 65 	cp.w	r0,101
80008636:	e0 8a 01 d7 	brle	800089e4 <_vfprintf_r+0x1cb4>
8000863a:	30 08       	mov	r8,0
8000863c:	30 09       	mov	r9,0
8000863e:	40 5b       	lddsp	r11,sp[0x14]
80008640:	40 7a       	lddsp	r10,sp[0x1c]
80008642:	e0 a0 1a 1c 	rcall	8000ba7a <__avr32_f64_cmp_eq>
80008646:	c7 a0       	breq	8000873a <_vfprintf_r+0x1a0a>
80008648:	fa f8 06 90 	ld.w	r8,sp[1680]
8000864c:	48 a9       	lddpc	r9,80008674 <_vfprintf_r+0x1944>
8000864e:	2f f8       	sub	r8,-1
80008650:	87 09       	st.w	r3[0x0],r9
80008652:	fb 48 06 90 	st.w	sp[1680],r8
80008656:	30 19       	mov	r9,1
80008658:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000865c:	87 19       	st.w	r3[0x4],r9
8000865e:	2f f8       	sub	r8,-1
80008660:	fb 48 06 8c 	st.w	sp[1676],r8
80008664:	58 78       	cp.w	r8,7
80008666:	e0 89 00 09 	brgt	80008678 <_vfprintf_r+0x1948>
8000866a:	2f 83       	sub	r3,-8
8000866c:	c1 08       	rjmp	8000868c <_vfprintf_r+0x195c>
8000866e:	d7 03       	nop
80008670:	80 00       	ld.sh	r0,r0[0x0]
80008672:	d2 ac       	*unknown*
80008674:	80 00       	ld.sh	r0,r0[0x0]
80008676:	d2 98       	*unknown*
80008678:	fa ca f9 78 	sub	r10,sp,-1672
8000867c:	02 9b       	mov	r11,r1
8000867e:	08 9c       	mov	r12,r4
80008680:	fe b0 f3 4a 	rcall	80006d14 <__sprint_r>
80008684:	e0 81 02 e1 	brne	80008c46 <_vfprintf_r+0x1f16>
80008688:	fa c3 f9 e0 	sub	r3,sp,-1568
8000868c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80008690:	40 6c       	lddsp	r12,sp[0x18]
80008692:	18 38       	cp.w	r8,r12
80008694:	c0 55       	brlt	8000869e <_vfprintf_r+0x196e>
80008696:	ed b5 00 00 	bld	r5,0x0
8000869a:	e0 81 02 69 	brne	80008b6c <_vfprintf_r+0x1e3c>
8000869e:	fa f8 06 90 	ld.w	r8,sp[1680]
800086a2:	2f f8       	sub	r8,-1
800086a4:	40 cb       	lddsp	r11,sp[0x30]
800086a6:	fb 48 06 90 	st.w	sp[1680],r8
800086aa:	30 19       	mov	r9,1
800086ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800086b0:	87 0b       	st.w	r3[0x0],r11
800086b2:	2f f8       	sub	r8,-1
800086b4:	87 19       	st.w	r3[0x4],r9
800086b6:	fb 48 06 8c 	st.w	sp[1676],r8
800086ba:	58 78       	cp.w	r8,7
800086bc:	e0 89 00 04 	brgt	800086c4 <_vfprintf_r+0x1994>
800086c0:	2f 83       	sub	r3,-8
800086c2:	c0 b8       	rjmp	800086d8 <_vfprintf_r+0x19a8>
800086c4:	fa ca f9 78 	sub	r10,sp,-1672
800086c8:	02 9b       	mov	r11,r1
800086ca:	08 9c       	mov	r12,r4
800086cc:	fe b0 f3 24 	rcall	80006d14 <__sprint_r>
800086d0:	e0 81 02 bb 	brne	80008c46 <_vfprintf_r+0x1f16>
800086d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800086d8:	40 66       	lddsp	r6,sp[0x18]
800086da:	20 16       	sub	r6,1
800086dc:	58 06       	cp.w	r6,0
800086de:	e0 89 00 1d 	brgt	80008718 <_vfprintf_r+0x19e8>
800086e2:	e0 8f 02 45 	bral	80008b6c <_vfprintf_r+0x1e3c>
800086e6:	2f 09       	sub	r9,-16
800086e8:	2f f8       	sub	r8,-1
800086ea:	fb 49 06 90 	st.w	sp[1680],r9
800086ee:	87 02       	st.w	r3[0x0],r2
800086f0:	87 10       	st.w	r3[0x4],r0
800086f2:	fb 48 06 8c 	st.w	sp[1676],r8
800086f6:	58 78       	cp.w	r8,7
800086f8:	e0 89 00 04 	brgt	80008700 <_vfprintf_r+0x19d0>
800086fc:	2f 83       	sub	r3,-8
800086fe:	c0 b8       	rjmp	80008714 <_vfprintf_r+0x19e4>
80008700:	fa ca f9 78 	sub	r10,sp,-1672
80008704:	02 9b       	mov	r11,r1
80008706:	08 9c       	mov	r12,r4
80008708:	fe b0 f3 06 	rcall	80006d14 <__sprint_r>
8000870c:	e0 81 02 9d 	brne	80008c46 <_vfprintf_r+0x1f16>
80008710:	fa c3 f9 e0 	sub	r3,sp,-1568
80008714:	21 06       	sub	r6,16
80008716:	c0 38       	rjmp	8000871c <_vfprintf_r+0x19ec>
80008718:	4d 22       	lddpc	r2,80008860 <_vfprintf_r+0x1b30>
8000871a:	31 00       	mov	r0,16
8000871c:	fa f9 06 90 	ld.w	r9,sp[1680]
80008720:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008724:	4c fa       	lddpc	r10,80008860 <_vfprintf_r+0x1b30>
80008726:	59 06       	cp.w	r6,16
80008728:	fe 99 ff df 	brgt	800086e6 <_vfprintf_r+0x19b6>
8000872c:	0c 09       	add	r9,r6
8000872e:	87 0a       	st.w	r3[0x0],r10
80008730:	fb 49 06 90 	st.w	sp[1680],r9
80008734:	2f f8       	sub	r8,-1
80008736:	87 16       	st.w	r3[0x4],r6
80008738:	c5 39       	rjmp	800089de <_vfprintf_r+0x1cae>
8000873a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000873e:	58 0a       	cp.w	r10,0
80008740:	e0 89 00 94 	brgt	80008868 <_vfprintf_r+0x1b38>
80008744:	fa f8 06 90 	ld.w	r8,sp[1680]
80008748:	4c 79       	lddpc	r9,80008864 <_vfprintf_r+0x1b34>
8000874a:	2f f8       	sub	r8,-1
8000874c:	87 09       	st.w	r3[0x0],r9
8000874e:	fb 48 06 90 	st.w	sp[1680],r8
80008752:	30 19       	mov	r9,1
80008754:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008758:	87 19       	st.w	r3[0x4],r9
8000875a:	2f f8       	sub	r8,-1
8000875c:	fb 48 06 8c 	st.w	sp[1676],r8
80008760:	58 78       	cp.w	r8,7
80008762:	e0 89 00 04 	brgt	8000876a <_vfprintf_r+0x1a3a>
80008766:	2f 83       	sub	r3,-8
80008768:	c0 b8       	rjmp	8000877e <_vfprintf_r+0x1a4e>
8000876a:	fa ca f9 78 	sub	r10,sp,-1672
8000876e:	02 9b       	mov	r11,r1
80008770:	08 9c       	mov	r12,r4
80008772:	fe b0 f2 d1 	rcall	80006d14 <__sprint_r>
80008776:	e0 81 02 68 	brne	80008c46 <_vfprintf_r+0x1f16>
8000877a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000877e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80008782:	58 08       	cp.w	r8,0
80008784:	c0 81       	brne	80008794 <_vfprintf_r+0x1a64>
80008786:	40 6a       	lddsp	r10,sp[0x18]
80008788:	58 0a       	cp.w	r10,0
8000878a:	c0 51       	brne	80008794 <_vfprintf_r+0x1a64>
8000878c:	ed b5 00 00 	bld	r5,0x0
80008790:	e0 81 01 ee 	brne	80008b6c <_vfprintf_r+0x1e3c>
80008794:	40 c9       	lddsp	r9,sp[0x30]
80008796:	fa f8 06 90 	ld.w	r8,sp[1680]
8000879a:	2f f8       	sub	r8,-1
8000879c:	87 09       	st.w	r3[0x0],r9
8000879e:	fb 48 06 90 	st.w	sp[1680],r8
800087a2:	30 19       	mov	r9,1
800087a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800087a8:	87 19       	st.w	r3[0x4],r9
800087aa:	2f f8       	sub	r8,-1
800087ac:	fb 48 06 8c 	st.w	sp[1676],r8
800087b0:	58 78       	cp.w	r8,7
800087b2:	e0 89 00 04 	brgt	800087ba <_vfprintf_r+0x1a8a>
800087b6:	2f 83       	sub	r3,-8
800087b8:	c0 b8       	rjmp	800087ce <_vfprintf_r+0x1a9e>
800087ba:	fa ca f9 78 	sub	r10,sp,-1672
800087be:	02 9b       	mov	r11,r1
800087c0:	08 9c       	mov	r12,r4
800087c2:	fe b0 f2 a9 	rcall	80006d14 <__sprint_r>
800087c6:	e0 81 02 40 	brne	80008c46 <_vfprintf_r+0x1f16>
800087ca:	fa c3 f9 e0 	sub	r3,sp,-1568
800087ce:	fa f2 06 ac 	ld.w	r2,sp[1708]
800087d2:	5c 32       	neg	r2
800087d4:	58 02       	cp.w	r2,0
800087d6:	e0 89 00 1d 	brgt	80008810 <_vfprintf_r+0x1ae0>
800087da:	c3 b8       	rjmp	80008850 <_vfprintf_r+0x1b20>
800087dc:	2f 09       	sub	r9,-16
800087de:	2f f8       	sub	r8,-1
800087e0:	31 0e       	mov	lr,16
800087e2:	fb 49 06 90 	st.w	sp[1680],r9
800087e6:	87 00       	st.w	r3[0x0],r0
800087e8:	87 1e       	st.w	r3[0x4],lr
800087ea:	fb 48 06 8c 	st.w	sp[1676],r8
800087ee:	58 78       	cp.w	r8,7
800087f0:	e0 89 00 04 	brgt	800087f8 <_vfprintf_r+0x1ac8>
800087f4:	2f 83       	sub	r3,-8
800087f6:	c0 b8       	rjmp	8000880c <_vfprintf_r+0x1adc>
800087f8:	fa ca f9 78 	sub	r10,sp,-1672
800087fc:	02 9b       	mov	r11,r1
800087fe:	08 9c       	mov	r12,r4
80008800:	fe b0 f2 8a 	rcall	80006d14 <__sprint_r>
80008804:	e0 81 02 21 	brne	80008c46 <_vfprintf_r+0x1f16>
80008808:	fa c3 f9 e0 	sub	r3,sp,-1568
8000880c:	21 02       	sub	r2,16
8000880e:	c0 28       	rjmp	80008812 <_vfprintf_r+0x1ae2>
80008810:	49 40       	lddpc	r0,80008860 <_vfprintf_r+0x1b30>
80008812:	fa f9 06 90 	ld.w	r9,sp[1680]
80008816:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000881a:	49 2a       	lddpc	r10,80008860 <_vfprintf_r+0x1b30>
8000881c:	59 02       	cp.w	r2,16
8000881e:	fe 99 ff df 	brgt	800087dc <_vfprintf_r+0x1aac>
80008822:	04 09       	add	r9,r2
80008824:	2f f8       	sub	r8,-1
80008826:	87 0a       	st.w	r3[0x0],r10
80008828:	fb 49 06 90 	st.w	sp[1680],r9
8000882c:	87 12       	st.w	r3[0x4],r2
8000882e:	fb 48 06 8c 	st.w	sp[1676],r8
80008832:	58 78       	cp.w	r8,7
80008834:	e0 89 00 04 	brgt	8000883c <_vfprintf_r+0x1b0c>
80008838:	2f 83       	sub	r3,-8
8000883a:	c0 b8       	rjmp	80008850 <_vfprintf_r+0x1b20>
8000883c:	fa ca f9 78 	sub	r10,sp,-1672
80008840:	02 9b       	mov	r11,r1
80008842:	08 9c       	mov	r12,r4
80008844:	fe b0 f2 68 	rcall	80006d14 <__sprint_r>
80008848:	e0 81 01 ff 	brne	80008c46 <_vfprintf_r+0x1f16>
8000884c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008850:	40 6c       	lddsp	r12,sp[0x18]
80008852:	fa f8 06 90 	ld.w	r8,sp[1680]
80008856:	87 06       	st.w	r3[0x0],r6
80008858:	87 1c       	st.w	r3[0x4],r12
8000885a:	18 08       	add	r8,r12
8000885c:	cb c8       	rjmp	800089d4 <_vfprintf_r+0x1ca4>
8000885e:	d7 03       	nop
80008860:	80 00       	ld.sh	r0,r0[0x0]
80008862:	d2 ac       	*unknown*
80008864:	80 00       	ld.sh	r0,r0[0x0]
80008866:	d2 98       	*unknown*
80008868:	fa f9 06 90 	ld.w	r9,sp[1680]
8000886c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008870:	40 6b       	lddsp	r11,sp[0x18]
80008872:	16 3a       	cp.w	r10,r11
80008874:	c6 d5       	brlt	8000894e <_vfprintf_r+0x1c1e>
80008876:	16 09       	add	r9,r11
80008878:	2f f8       	sub	r8,-1
8000887a:	87 06       	st.w	r3[0x0],r6
8000887c:	fb 49 06 90 	st.w	sp[1680],r9
80008880:	87 1b       	st.w	r3[0x4],r11
80008882:	fb 48 06 8c 	st.w	sp[1676],r8
80008886:	58 78       	cp.w	r8,7
80008888:	e0 89 00 04 	brgt	80008890 <_vfprintf_r+0x1b60>
8000888c:	2f 83       	sub	r3,-8
8000888e:	c0 b8       	rjmp	800088a4 <_vfprintf_r+0x1b74>
80008890:	fa ca f9 78 	sub	r10,sp,-1672
80008894:	02 9b       	mov	r11,r1
80008896:	08 9c       	mov	r12,r4
80008898:	fe b0 f2 3e 	rcall	80006d14 <__sprint_r>
8000889c:	e0 81 01 d5 	brne	80008c46 <_vfprintf_r+0x1f16>
800088a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800088a4:	fa f6 06 ac 	ld.w	r6,sp[1708]
800088a8:	40 6a       	lddsp	r10,sp[0x18]
800088aa:	14 16       	sub	r6,r10
800088ac:	58 06       	cp.w	r6,0
800088ae:	e0 89 00 1c 	brgt	800088e6 <_vfprintf_r+0x1bb6>
800088b2:	c3 b8       	rjmp	80008928 <_vfprintf_r+0x1bf8>
800088b4:	2f 09       	sub	r9,-16
800088b6:	2f f8       	sub	r8,-1
800088b8:	fb 49 06 90 	st.w	sp[1680],r9
800088bc:	87 02       	st.w	r3[0x0],r2
800088be:	87 10       	st.w	r3[0x4],r0
800088c0:	fb 48 06 8c 	st.w	sp[1676],r8
800088c4:	58 78       	cp.w	r8,7
800088c6:	e0 89 00 04 	brgt	800088ce <_vfprintf_r+0x1b9e>
800088ca:	2f 83       	sub	r3,-8
800088cc:	c0 b8       	rjmp	800088e2 <_vfprintf_r+0x1bb2>
800088ce:	fa ca f9 78 	sub	r10,sp,-1672
800088d2:	02 9b       	mov	r11,r1
800088d4:	08 9c       	mov	r12,r4
800088d6:	fe b0 f2 1f 	rcall	80006d14 <__sprint_r>
800088da:	e0 81 01 b6 	brne	80008c46 <_vfprintf_r+0x1f16>
800088de:	fa c3 f9 e0 	sub	r3,sp,-1568
800088e2:	21 06       	sub	r6,16
800088e4:	c0 38       	rjmp	800088ea <_vfprintf_r+0x1bba>
800088e6:	4d c2       	lddpc	r2,80008a54 <_vfprintf_r+0x1d24>
800088e8:	31 00       	mov	r0,16
800088ea:	fa f9 06 90 	ld.w	r9,sp[1680]
800088ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800088f2:	4d 9a       	lddpc	r10,80008a54 <_vfprintf_r+0x1d24>
800088f4:	59 06       	cp.w	r6,16
800088f6:	fe 99 ff df 	brgt	800088b4 <_vfprintf_r+0x1b84>
800088fa:	0c 09       	add	r9,r6
800088fc:	2f f8       	sub	r8,-1
800088fe:	87 0a       	st.w	r3[0x0],r10
80008900:	fb 49 06 90 	st.w	sp[1680],r9
80008904:	87 16       	st.w	r3[0x4],r6
80008906:	fb 48 06 8c 	st.w	sp[1676],r8
8000890a:	58 78       	cp.w	r8,7
8000890c:	e0 89 00 04 	brgt	80008914 <_vfprintf_r+0x1be4>
80008910:	2f 83       	sub	r3,-8
80008912:	c0 b8       	rjmp	80008928 <_vfprintf_r+0x1bf8>
80008914:	fa ca f9 78 	sub	r10,sp,-1672
80008918:	02 9b       	mov	r11,r1
8000891a:	08 9c       	mov	r12,r4
8000891c:	fe b0 f1 fc 	rcall	80006d14 <__sprint_r>
80008920:	e0 81 01 93 	brne	80008c46 <_vfprintf_r+0x1f16>
80008924:	fa c3 f9 e0 	sub	r3,sp,-1568
80008928:	ed b5 00 00 	bld	r5,0x0
8000892c:	e0 81 01 20 	brne	80008b6c <_vfprintf_r+0x1e3c>
80008930:	40 c9       	lddsp	r9,sp[0x30]
80008932:	fa f8 06 90 	ld.w	r8,sp[1680]
80008936:	2f f8       	sub	r8,-1
80008938:	87 09       	st.w	r3[0x0],r9
8000893a:	fb 48 06 90 	st.w	sp[1680],r8
8000893e:	30 19       	mov	r9,1
80008940:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008944:	87 19       	st.w	r3[0x4],r9
80008946:	2f f8       	sub	r8,-1
80008948:	fb 48 06 8c 	st.w	sp[1676],r8
8000894c:	c0 29       	rjmp	80008b50 <_vfprintf_r+0x1e20>
8000894e:	14 09       	add	r9,r10
80008950:	2f f8       	sub	r8,-1
80008952:	fb 49 06 90 	st.w	sp[1680],r9
80008956:	87 06       	st.w	r3[0x0],r6
80008958:	87 1a       	st.w	r3[0x4],r10
8000895a:	fb 48 06 8c 	st.w	sp[1676],r8
8000895e:	58 78       	cp.w	r8,7
80008960:	e0 89 00 04 	brgt	80008968 <_vfprintf_r+0x1c38>
80008964:	2f 83       	sub	r3,-8
80008966:	c0 b8       	rjmp	8000897c <_vfprintf_r+0x1c4c>
80008968:	fa ca f9 78 	sub	r10,sp,-1672
8000896c:	02 9b       	mov	r11,r1
8000896e:	08 9c       	mov	r12,r4
80008970:	fe b0 f1 d2 	rcall	80006d14 <__sprint_r>
80008974:	e0 81 01 69 	brne	80008c46 <_vfprintf_r+0x1f16>
80008978:	fa c3 f9 e0 	sub	r3,sp,-1568
8000897c:	40 c8       	lddsp	r8,sp[0x30]
8000897e:	87 08       	st.w	r3[0x0],r8
80008980:	fa f8 06 90 	ld.w	r8,sp[1680]
80008984:	2f f8       	sub	r8,-1
80008986:	30 19       	mov	r9,1
80008988:	fb 48 06 90 	st.w	sp[1680],r8
8000898c:	87 19       	st.w	r3[0x4],r9
8000898e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008992:	2f f8       	sub	r8,-1
80008994:	fb 48 06 8c 	st.w	sp[1676],r8
80008998:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000899c:	58 78       	cp.w	r8,7
8000899e:	e0 89 00 04 	brgt	800089a6 <_vfprintf_r+0x1c76>
800089a2:	2f 83       	sub	r3,-8
800089a4:	c0 b8       	rjmp	800089ba <_vfprintf_r+0x1c8a>
800089a6:	fa ca f9 78 	sub	r10,sp,-1672
800089aa:	02 9b       	mov	r11,r1
800089ac:	08 9c       	mov	r12,r4
800089ae:	fe b0 f1 b3 	rcall	80006d14 <__sprint_r>
800089b2:	e0 81 01 4a 	brne	80008c46 <_vfprintf_r+0x1f16>
800089b6:	fa c3 f9 e0 	sub	r3,sp,-1568
800089ba:	04 06       	add	r6,r2
800089bc:	fa f8 06 ac 	ld.w	r8,sp[1708]
800089c0:	87 06       	st.w	r3[0x0],r6
800089c2:	fa f9 06 90 	ld.w	r9,sp[1680]
800089c6:	40 66       	lddsp	r6,sp[0x18]
800089c8:	40 6e       	lddsp	lr,sp[0x18]
800089ca:	10 16       	sub	r6,r8
800089cc:	f2 08 01 08 	sub	r8,r9,r8
800089d0:	87 16       	st.w	r3[0x4],r6
800089d2:	1c 08       	add	r8,lr
800089d4:	fb 48 06 90 	st.w	sp[1680],r8
800089d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800089dc:	2f f8       	sub	r8,-1
800089de:	fb 48 06 8c 	st.w	sp[1676],r8
800089e2:	cb 78       	rjmp	80008b50 <_vfprintf_r+0x1e20>
800089e4:	40 6c       	lddsp	r12,sp[0x18]
800089e6:	58 1c       	cp.w	r12,1
800089e8:	e0 89 00 06 	brgt	800089f4 <_vfprintf_r+0x1cc4>
800089ec:	ed b5 00 00 	bld	r5,0x0
800089f0:	e0 81 00 85 	brne	80008afa <_vfprintf_r+0x1dca>
800089f4:	fa f8 06 90 	ld.w	r8,sp[1680]
800089f8:	2f f8       	sub	r8,-1
800089fa:	30 19       	mov	r9,1
800089fc:	fb 48 06 90 	st.w	sp[1680],r8
80008a00:	87 06       	st.w	r3[0x0],r6
80008a02:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008a06:	87 19       	st.w	r3[0x4],r9
80008a08:	2f f8       	sub	r8,-1
80008a0a:	fb 48 06 8c 	st.w	sp[1676],r8
80008a0e:	58 78       	cp.w	r8,7
80008a10:	e0 89 00 04 	brgt	80008a18 <_vfprintf_r+0x1ce8>
80008a14:	2f 83       	sub	r3,-8
80008a16:	c0 b8       	rjmp	80008a2c <_vfprintf_r+0x1cfc>
80008a18:	fa ca f9 78 	sub	r10,sp,-1672
80008a1c:	02 9b       	mov	r11,r1
80008a1e:	08 9c       	mov	r12,r4
80008a20:	fe b0 f1 7a 	rcall	80006d14 <__sprint_r>
80008a24:	e0 81 01 11 	brne	80008c46 <_vfprintf_r+0x1f16>
80008a28:	fa c3 f9 e0 	sub	r3,sp,-1568
80008a2c:	fa f8 06 90 	ld.w	r8,sp[1680]
80008a30:	2f f8       	sub	r8,-1
80008a32:	40 cb       	lddsp	r11,sp[0x30]
80008a34:	fb 48 06 90 	st.w	sp[1680],r8
80008a38:	30 19       	mov	r9,1
80008a3a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008a3e:	87 0b       	st.w	r3[0x0],r11
80008a40:	2f f8       	sub	r8,-1
80008a42:	87 19       	st.w	r3[0x4],r9
80008a44:	fb 48 06 8c 	st.w	sp[1676],r8
80008a48:	58 78       	cp.w	r8,7
80008a4a:	e0 89 00 07 	brgt	80008a58 <_vfprintf_r+0x1d28>
80008a4e:	2f 83       	sub	r3,-8
80008a50:	c0 e8       	rjmp	80008a6c <_vfprintf_r+0x1d3c>
80008a52:	d7 03       	nop
80008a54:	80 00       	ld.sh	r0,r0[0x0]
80008a56:	d2 ac       	*unknown*
80008a58:	fa ca f9 78 	sub	r10,sp,-1672
80008a5c:	02 9b       	mov	r11,r1
80008a5e:	08 9c       	mov	r12,r4
80008a60:	fe b0 f1 5a 	rcall	80006d14 <__sprint_r>
80008a64:	e0 81 00 f1 	brne	80008c46 <_vfprintf_r+0x1f16>
80008a68:	fa c3 f9 e0 	sub	r3,sp,-1568
80008a6c:	30 08       	mov	r8,0
80008a6e:	30 09       	mov	r9,0
80008a70:	40 5b       	lddsp	r11,sp[0x14]
80008a72:	40 7a       	lddsp	r10,sp[0x1c]
80008a74:	e0 a0 18 03 	rcall	8000ba7a <__avr32_f64_cmp_eq>
80008a78:	40 68       	lddsp	r8,sp[0x18]
80008a7a:	20 18       	sub	r8,1
80008a7c:	58 0c       	cp.w	r12,0
80008a7e:	c0 d1       	brne	80008a98 <_vfprintf_r+0x1d68>
80008a80:	2f f6       	sub	r6,-1
80008a82:	87 18       	st.w	r3[0x4],r8
80008a84:	87 06       	st.w	r3[0x0],r6
80008a86:	fa f6 06 90 	ld.w	r6,sp[1680]
80008a8a:	10 06       	add	r6,r8
80008a8c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008a90:	fb 46 06 90 	st.w	sp[1680],r6
80008a94:	2f f8       	sub	r8,-1
80008a96:	c2 f8       	rjmp	80008af4 <_vfprintf_r+0x1dc4>
80008a98:	10 96       	mov	r6,r8
80008a9a:	58 08       	cp.w	r8,0
80008a9c:	e0 89 00 1c 	brgt	80008ad4 <_vfprintf_r+0x1da4>
80008aa0:	c4 98       	rjmp	80008b32 <_vfprintf_r+0x1e02>
80008aa2:	2f 09       	sub	r9,-16
80008aa4:	2f f8       	sub	r8,-1
80008aa6:	fb 49 06 90 	st.w	sp[1680],r9
80008aaa:	87 02       	st.w	r3[0x0],r2
80008aac:	87 10       	st.w	r3[0x4],r0
80008aae:	fb 48 06 8c 	st.w	sp[1676],r8
80008ab2:	58 78       	cp.w	r8,7
80008ab4:	e0 89 00 04 	brgt	80008abc <_vfprintf_r+0x1d8c>
80008ab8:	2f 83       	sub	r3,-8
80008aba:	c0 b8       	rjmp	80008ad0 <_vfprintf_r+0x1da0>
80008abc:	fa ca f9 78 	sub	r10,sp,-1672
80008ac0:	02 9b       	mov	r11,r1
80008ac2:	08 9c       	mov	r12,r4
80008ac4:	fe b0 f1 28 	rcall	80006d14 <__sprint_r>
80008ac8:	e0 81 00 bf 	brne	80008c46 <_vfprintf_r+0x1f16>
80008acc:	fa c3 f9 e0 	sub	r3,sp,-1568
80008ad0:	21 06       	sub	r6,16
80008ad2:	c0 38       	rjmp	80008ad8 <_vfprintf_r+0x1da8>
80008ad4:	4d 22       	lddpc	r2,80008c1c <_vfprintf_r+0x1eec>
80008ad6:	31 00       	mov	r0,16
80008ad8:	fa f9 06 90 	ld.w	r9,sp[1680]
80008adc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008ae0:	4c fa       	lddpc	r10,80008c1c <_vfprintf_r+0x1eec>
80008ae2:	59 06       	cp.w	r6,16
80008ae4:	fe 99 ff df 	brgt	80008aa2 <_vfprintf_r+0x1d72>
80008ae8:	0c 09       	add	r9,r6
80008aea:	87 0a       	st.w	r3[0x0],r10
80008aec:	fb 49 06 90 	st.w	sp[1680],r9
80008af0:	2f f8       	sub	r8,-1
80008af2:	87 16       	st.w	r3[0x4],r6
80008af4:	fb 48 06 8c 	st.w	sp[1676],r8
80008af8:	c0 e8       	rjmp	80008b14 <_vfprintf_r+0x1de4>
80008afa:	fa f8 06 90 	ld.w	r8,sp[1680]
80008afe:	2f f8       	sub	r8,-1
80008b00:	30 19       	mov	r9,1
80008b02:	fb 48 06 90 	st.w	sp[1680],r8
80008b06:	87 06       	st.w	r3[0x0],r6
80008b08:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008b0c:	87 19       	st.w	r3[0x4],r9
80008b0e:	2f f8       	sub	r8,-1
80008b10:	fb 48 06 8c 	st.w	sp[1676],r8
80008b14:	58 78       	cp.w	r8,7
80008b16:	e0 89 00 04 	brgt	80008b1e <_vfprintf_r+0x1dee>
80008b1a:	2f 83       	sub	r3,-8
80008b1c:	c0 b8       	rjmp	80008b32 <_vfprintf_r+0x1e02>
80008b1e:	fa ca f9 78 	sub	r10,sp,-1672
80008b22:	02 9b       	mov	r11,r1
80008b24:	08 9c       	mov	r12,r4
80008b26:	fe b0 f0 f7 	rcall	80006d14 <__sprint_r>
80008b2a:	e0 81 00 8e 	brne	80008c46 <_vfprintf_r+0x1f16>
80008b2e:	fa c3 f9 e0 	sub	r3,sp,-1568
80008b32:	40 ea       	lddsp	r10,sp[0x38]
80008b34:	fa f8 06 90 	ld.w	r8,sp[1680]
80008b38:	14 08       	add	r8,r10
80008b3a:	fa c9 f9 64 	sub	r9,sp,-1692
80008b3e:	fb 48 06 90 	st.w	sp[1680],r8
80008b42:	87 1a       	st.w	r3[0x4],r10
80008b44:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008b48:	87 09       	st.w	r3[0x0],r9
80008b4a:	2f f8       	sub	r8,-1
80008b4c:	fb 48 06 8c 	st.w	sp[1676],r8
80008b50:	58 78       	cp.w	r8,7
80008b52:	e0 89 00 04 	brgt	80008b5a <_vfprintf_r+0x1e2a>
80008b56:	2f 83       	sub	r3,-8
80008b58:	c0 a8       	rjmp	80008b6c <_vfprintf_r+0x1e3c>
80008b5a:	fa ca f9 78 	sub	r10,sp,-1672
80008b5e:	02 9b       	mov	r11,r1
80008b60:	08 9c       	mov	r12,r4
80008b62:	fe b0 f0 d9 	rcall	80006d14 <__sprint_r>
80008b66:	c7 01       	brne	80008c46 <_vfprintf_r+0x1f16>
80008b68:	fa c3 f9 e0 	sub	r3,sp,-1568
80008b6c:	e2 15 00 04 	andl	r5,0x4,COH
80008b70:	c3 d0       	breq	80008bea <_vfprintf_r+0x1eba>
80008b72:	40 86       	lddsp	r6,sp[0x20]
80008b74:	40 39       	lddsp	r9,sp[0xc]
80008b76:	12 16       	sub	r6,r9
80008b78:	58 06       	cp.w	r6,0
80008b7a:	e0 89 00 1a 	brgt	80008bae <_vfprintf_r+0x1e7e>
80008b7e:	c3 68       	rjmp	80008bea <_vfprintf_r+0x1eba>
80008b80:	2f 09       	sub	r9,-16
80008b82:	2f f8       	sub	r8,-1
80008b84:	fb 49 06 90 	st.w	sp[1680],r9
80008b88:	87 05       	st.w	r3[0x0],r5
80008b8a:	87 12       	st.w	r3[0x4],r2
80008b8c:	fb 48 06 8c 	st.w	sp[1676],r8
80008b90:	58 78       	cp.w	r8,7
80008b92:	e0 89 00 04 	brgt	80008b9a <_vfprintf_r+0x1e6a>
80008b96:	2f 83       	sub	r3,-8
80008b98:	c0 98       	rjmp	80008baa <_vfprintf_r+0x1e7a>
80008b9a:	00 9a       	mov	r10,r0
80008b9c:	02 9b       	mov	r11,r1
80008b9e:	08 9c       	mov	r12,r4
80008ba0:	fe b0 f0 ba 	rcall	80006d14 <__sprint_r>
80008ba4:	c5 11       	brne	80008c46 <_vfprintf_r+0x1f16>
80008ba6:	fa c3 f9 e0 	sub	r3,sp,-1568
80008baa:	21 06       	sub	r6,16
80008bac:	c0 58       	rjmp	80008bb6 <_vfprintf_r+0x1e86>
80008bae:	49 d5       	lddpc	r5,80008c20 <_vfprintf_r+0x1ef0>
80008bb0:	31 02       	mov	r2,16
80008bb2:	fa c0 f9 78 	sub	r0,sp,-1672
80008bb6:	fa f9 06 90 	ld.w	r9,sp[1680]
80008bba:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008bbe:	49 9a       	lddpc	r10,80008c20 <_vfprintf_r+0x1ef0>
80008bc0:	59 06       	cp.w	r6,16
80008bc2:	fe 99 ff df 	brgt	80008b80 <_vfprintf_r+0x1e50>
80008bc6:	0c 09       	add	r9,r6
80008bc8:	2f f8       	sub	r8,-1
80008bca:	87 0a       	st.w	r3[0x0],r10
80008bcc:	87 16       	st.w	r3[0x4],r6
80008bce:	fb 49 06 90 	st.w	sp[1680],r9
80008bd2:	fb 48 06 8c 	st.w	sp[1676],r8
80008bd6:	58 78       	cp.w	r8,7
80008bd8:	e0 8a 00 09 	brle	80008bea <_vfprintf_r+0x1eba>
80008bdc:	fa ca f9 78 	sub	r10,sp,-1672
80008be0:	02 9b       	mov	r11,r1
80008be2:	08 9c       	mov	r12,r4
80008be4:	fe b0 f0 98 	rcall	80006d14 <__sprint_r>
80008be8:	c2 f1       	brne	80008c46 <_vfprintf_r+0x1f16>
80008bea:	40 bc       	lddsp	r12,sp[0x2c]
80008bec:	40 36       	lddsp	r6,sp[0xc]
80008bee:	40 8e       	lddsp	lr,sp[0x20]
80008bf0:	ec 0e 0c 48 	max	r8,r6,lr
80008bf4:	10 0c       	add	r12,r8
80008bf6:	50 bc       	stdsp	sp[0x2c],r12
80008bf8:	fa f8 06 90 	ld.w	r8,sp[1680]
80008bfc:	58 08       	cp.w	r8,0
80008bfe:	c0 80       	breq	80008c0e <_vfprintf_r+0x1ede>
80008c00:	fa ca f9 78 	sub	r10,sp,-1672
80008c04:	02 9b       	mov	r11,r1
80008c06:	08 9c       	mov	r12,r4
80008c08:	fe b0 f0 86 	rcall	80006d14 <__sprint_r>
80008c0c:	c1 d1       	brne	80008c46 <_vfprintf_r+0x1f16>
80008c0e:	30 0b       	mov	r11,0
80008c10:	fa c3 f9 e0 	sub	r3,sp,-1568
80008c14:	fb 4b 06 8c 	st.w	sp[1676],r11
80008c18:	fe 9f f1 17 	bral	80006e46 <_vfprintf_r+0x116>
80008c1c:	80 00       	ld.sh	r0,r0[0x0]
80008c1e:	d2 ac       	*unknown*
80008c20:	80 00       	ld.sh	r0,r0[0x0]
80008c22:	d2 9c       	*unknown*
80008c24:	08 95       	mov	r5,r4
80008c26:	fa f8 06 90 	ld.w	r8,sp[1680]
80008c2a:	58 08       	cp.w	r8,0
80008c2c:	c0 80       	breq	80008c3c <_vfprintf_r+0x1f0c>
80008c2e:	08 9c       	mov	r12,r4
80008c30:	fa ca f9 78 	sub	r10,sp,-1672
80008c34:	02 9b       	mov	r11,r1
80008c36:	fe b0 f0 6f 	rcall	80006d14 <__sprint_r>
80008c3a:	c0 61       	brne	80008c46 <_vfprintf_r+0x1f16>
80008c3c:	30 08       	mov	r8,0
80008c3e:	fb 48 06 8c 	st.w	sp[1676],r8
80008c42:	c0 28       	rjmp	80008c46 <_vfprintf_r+0x1f16>
80008c44:	40 41       	lddsp	r1,sp[0x10]
80008c46:	82 68       	ld.sh	r8,r1[0xc]
80008c48:	ed b8 00 06 	bld	r8,0x6
80008c4c:	c0 31       	brne	80008c52 <_vfprintf_r+0x1f22>
80008c4e:	3f fa       	mov	r10,-1
80008c50:	50 ba       	stdsp	sp[0x2c],r10
80008c52:	40 bc       	lddsp	r12,sp[0x2c]
80008c54:	fe 3d f9 44 	sub	sp,-1724
80008c58:	d8 32       	popm	r0-r7,pc
80008c5a:	d7 03       	nop

80008c5c <__swsetup_r>:
80008c5c:	d4 21       	pushm	r4-r7,lr
80008c5e:	4b 38       	lddpc	r8,80008d28 <__swsetup_r+0xcc>
80008c60:	18 96       	mov	r6,r12
80008c62:	16 97       	mov	r7,r11
80008c64:	70 0c       	ld.w	r12,r8[0x0]
80008c66:	58 0c       	cp.w	r12,0
80008c68:	c0 60       	breq	80008c74 <__swsetup_r+0x18>
80008c6a:	78 68       	ld.w	r8,r12[0x18]
80008c6c:	58 08       	cp.w	r8,0
80008c6e:	c0 31       	brne	80008c74 <__swsetup_r+0x18>
80008c70:	e0 a0 07 c0 	rcall	80009bf0 <__sinit>
80008c74:	4a e8       	lddpc	r8,80008d2c <__swsetup_r+0xd0>
80008c76:	10 37       	cp.w	r7,r8
80008c78:	c0 51       	brne	80008c82 <__swsetup_r+0x26>
80008c7a:	4a c8       	lddpc	r8,80008d28 <__swsetup_r+0xcc>
80008c7c:	70 08       	ld.w	r8,r8[0x0]
80008c7e:	70 07       	ld.w	r7,r8[0x0]
80008c80:	c0 e8       	rjmp	80008c9c <__swsetup_r+0x40>
80008c82:	4a c8       	lddpc	r8,80008d30 <__swsetup_r+0xd4>
80008c84:	10 37       	cp.w	r7,r8
80008c86:	c0 51       	brne	80008c90 <__swsetup_r+0x34>
80008c88:	4a 88       	lddpc	r8,80008d28 <__swsetup_r+0xcc>
80008c8a:	70 08       	ld.w	r8,r8[0x0]
80008c8c:	70 17       	ld.w	r7,r8[0x4]
80008c8e:	c0 78       	rjmp	80008c9c <__swsetup_r+0x40>
80008c90:	4a 98       	lddpc	r8,80008d34 <__swsetup_r+0xd8>
80008c92:	10 37       	cp.w	r7,r8
80008c94:	c0 41       	brne	80008c9c <__swsetup_r+0x40>
80008c96:	4a 58       	lddpc	r8,80008d28 <__swsetup_r+0xcc>
80008c98:	70 08       	ld.w	r8,r8[0x0]
80008c9a:	70 27       	ld.w	r7,r8[0x8]
80008c9c:	8e 68       	ld.sh	r8,r7[0xc]
80008c9e:	ed b8 00 03 	bld	r8,0x3
80008ca2:	c1 e0       	breq	80008cde <__swsetup_r+0x82>
80008ca4:	ed b8 00 04 	bld	r8,0x4
80008ca8:	c3 e1       	brne	80008d24 <__swsetup_r+0xc8>
80008caa:	ed b8 00 02 	bld	r8,0x2
80008cae:	c1 51       	brne	80008cd8 <__swsetup_r+0x7c>
80008cb0:	6e db       	ld.w	r11,r7[0x34]
80008cb2:	58 0b       	cp.w	r11,0
80008cb4:	c0 a0       	breq	80008cc8 <__swsetup_r+0x6c>
80008cb6:	ee c8 ff bc 	sub	r8,r7,-68
80008cba:	10 3b       	cp.w	r11,r8
80008cbc:	c0 40       	breq	80008cc4 <__swsetup_r+0x68>
80008cbe:	0c 9c       	mov	r12,r6
80008cc0:	e0 a0 08 34 	rcall	80009d28 <_free_r>
80008cc4:	30 08       	mov	r8,0
80008cc6:	8f d8       	st.w	r7[0x34],r8
80008cc8:	8e 68       	ld.sh	r8,r7[0xc]
80008cca:	e0 18 ff db 	andl	r8,0xffdb
80008cce:	ae 68       	st.h	r7[0xc],r8
80008cd0:	30 08       	mov	r8,0
80008cd2:	8f 18       	st.w	r7[0x4],r8
80008cd4:	6e 48       	ld.w	r8,r7[0x10]
80008cd6:	8f 08       	st.w	r7[0x0],r8
80008cd8:	8e 68       	ld.sh	r8,r7[0xc]
80008cda:	a3 b8       	sbr	r8,0x3
80008cdc:	ae 68       	st.h	r7[0xc],r8
80008cde:	6e 48       	ld.w	r8,r7[0x10]
80008ce0:	58 08       	cp.w	r8,0
80008ce2:	c0 b1       	brne	80008cf8 <__swsetup_r+0x9c>
80008ce4:	8e 68       	ld.sh	r8,r7[0xc]
80008ce6:	e2 18 02 80 	andl	r8,0x280,COH
80008cea:	e0 48 02 00 	cp.w	r8,512
80008cee:	c0 50       	breq	80008cf8 <__swsetup_r+0x9c>
80008cf0:	0c 9c       	mov	r12,r6
80008cf2:	0e 9b       	mov	r11,r7
80008cf4:	e0 a0 0a 5c 	rcall	8000a1ac <__smakebuf_r>
80008cf8:	8e 69       	ld.sh	r9,r7[0xc]
80008cfa:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80008cfe:	c0 70       	breq	80008d0c <__swsetup_r+0xb0>
80008d00:	30 08       	mov	r8,0
80008d02:	8f 28       	st.w	r7[0x8],r8
80008d04:	6e 58       	ld.w	r8,r7[0x14]
80008d06:	5c 38       	neg	r8
80008d08:	8f 68       	st.w	r7[0x18],r8
80008d0a:	c0 68       	rjmp	80008d16 <__swsetup_r+0xba>
80008d0c:	ed b9 00 01 	bld	r9,0x1
80008d10:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80008d14:	8f 28       	st.w	r7[0x8],r8
80008d16:	6e 48       	ld.w	r8,r7[0x10]
80008d18:	58 08       	cp.w	r8,0
80008d1a:	c0 61       	brne	80008d26 <__swsetup_r+0xca>
80008d1c:	8e 68       	ld.sh	r8,r7[0xc]
80008d1e:	ed b8 00 07 	bld	r8,0x7
80008d22:	c0 21       	brne	80008d26 <__swsetup_r+0xca>
80008d24:	dc 2a       	popm	r4-r7,pc,r12=-1
80008d26:	d8 2a       	popm	r4-r7,pc,r12=0
80008d28:	00 00       	add	r0,r0
80008d2a:	00 fc       	st.b	--r0,r12
80008d2c:	80 00       	ld.sh	r0,r0[0x0]
80008d2e:	d3 cc       	*unknown*
80008d30:	80 00       	ld.sh	r0,r0[0x0]
80008d32:	d3 ec       	*unknown*
80008d34:	80 00       	ld.sh	r0,r0[0x0]
80008d36:	d4 0c       	*unknown*

80008d38 <quorem>:
80008d38:	d4 31       	pushm	r0-r7,lr
80008d3a:	20 2d       	sub	sp,8
80008d3c:	18 97       	mov	r7,r12
80008d3e:	78 48       	ld.w	r8,r12[0x10]
80008d40:	76 46       	ld.w	r6,r11[0x10]
80008d42:	0c 38       	cp.w	r8,r6
80008d44:	c0 34       	brge	80008d4a <quorem+0x12>
80008d46:	30 0c       	mov	r12,0
80008d48:	c8 58       	rjmp	80008e52 <quorem+0x11a>
80008d4a:	ec c2 ff fc 	sub	r2,r6,-4
80008d4e:	f6 c3 ff ec 	sub	r3,r11,-20
80008d52:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80008d56:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80008d5a:	2f f9       	sub	r9,-1
80008d5c:	20 16       	sub	r6,1
80008d5e:	f8 09 0d 08 	divu	r8,r12,r9
80008d62:	f6 02 00 22 	add	r2,r11,r2<<0x2
80008d66:	ee c4 ff ec 	sub	r4,r7,-20
80008d6a:	10 95       	mov	r5,r8
80008d6c:	58 08       	cp.w	r8,0
80008d6e:	c4 10       	breq	80008df0 <quorem+0xb8>
80008d70:	30 09       	mov	r9,0
80008d72:	06 9a       	mov	r10,r3
80008d74:	08 98       	mov	r8,r4
80008d76:	12 91       	mov	r1,r9
80008d78:	50 0b       	stdsp	sp[0x0],r11
80008d7a:	70 0e       	ld.w	lr,r8[0x0]
80008d7c:	b1 8e       	lsr	lr,0x10
80008d7e:	50 1e       	stdsp	sp[0x4],lr
80008d80:	15 0e       	ld.w	lr,r10++
80008d82:	fc 00 16 10 	lsr	r0,lr,0x10
80008d86:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008d8a:	ea 0e 03 41 	mac	r1,r5,lr
80008d8e:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80008d92:	b1 81       	lsr	r1,0x10
80008d94:	40 1b       	lddsp	r11,sp[0x4]
80008d96:	ea 00 02 40 	mul	r0,r5,r0
80008d9a:	e2 00 00 00 	add	r0,r1,r0
80008d9e:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80008da2:	02 1b       	sub	r11,r1
80008da4:	50 1b       	stdsp	sp[0x4],r11
80008da6:	70 0b       	ld.w	r11,r8[0x0]
80008da8:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80008dac:	02 09       	add	r9,r1
80008dae:	f2 0e 01 0e 	sub	lr,r9,lr
80008db2:	b0 1e       	st.h	r8[0x2],lr
80008db4:	fc 09 14 10 	asr	r9,lr,0x10
80008db8:	40 1e       	lddsp	lr,sp[0x4]
80008dba:	fc 09 00 09 	add	r9,lr,r9
80008dbe:	b0 09       	st.h	r8[0x0],r9
80008dc0:	e0 01 16 10 	lsr	r1,r0,0x10
80008dc4:	2f c8       	sub	r8,-4
80008dc6:	b1 49       	asr	r9,0x10
80008dc8:	04 3a       	cp.w	r10,r2
80008dca:	fe 98 ff d8 	brls	80008d7a <quorem+0x42>
80008dce:	40 0b       	lddsp	r11,sp[0x0]
80008dd0:	58 0c       	cp.w	r12,0
80008dd2:	c0 f1       	brne	80008df0 <quorem+0xb8>
80008dd4:	ec c8 ff fb 	sub	r8,r6,-5
80008dd8:	ee 08 00 28 	add	r8,r7,r8<<0x2
80008ddc:	c0 28       	rjmp	80008de0 <quorem+0xa8>
80008dde:	20 16       	sub	r6,1
80008de0:	20 48       	sub	r8,4
80008de2:	08 38       	cp.w	r8,r4
80008de4:	e0 88 00 05 	brls	80008dee <quorem+0xb6>
80008de8:	70 09       	ld.w	r9,r8[0x0]
80008dea:	58 09       	cp.w	r9,0
80008dec:	cf 90       	breq	80008dde <quorem+0xa6>
80008dee:	8f 46       	st.w	r7[0x10],r6
80008df0:	0e 9c       	mov	r12,r7
80008df2:	e0 a0 0d a7 	rcall	8000a940 <__mcmp>
80008df6:	c2 d5       	brlt	80008e50 <quorem+0x118>
80008df8:	2f f5       	sub	r5,-1
80008dfa:	08 98       	mov	r8,r4
80008dfc:	30 09       	mov	r9,0
80008dfe:	07 0b       	ld.w	r11,r3++
80008e00:	f6 0a 16 10 	lsr	r10,r11,0x10
80008e04:	70 0c       	ld.w	r12,r8[0x0]
80008e06:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008e0a:	f8 0e 16 10 	lsr	lr,r12,0x10
80008e0e:	14 1e       	sub	lr,r10
80008e10:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008e14:	16 1a       	sub	r10,r11
80008e16:	12 0a       	add	r10,r9
80008e18:	b0 1a       	st.h	r8[0x2],r10
80008e1a:	b1 4a       	asr	r10,0x10
80008e1c:	fc 0a 00 09 	add	r9,lr,r10
80008e20:	b0 09       	st.h	r8[0x0],r9
80008e22:	2f c8       	sub	r8,-4
80008e24:	b1 49       	asr	r9,0x10
80008e26:	04 33       	cp.w	r3,r2
80008e28:	fe 98 ff eb 	brls	80008dfe <quorem+0xc6>
80008e2c:	ec c8 ff fb 	sub	r8,r6,-5
80008e30:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80008e34:	58 09       	cp.w	r9,0
80008e36:	c0 d1       	brne	80008e50 <quorem+0x118>
80008e38:	ee 08 00 28 	add	r8,r7,r8<<0x2
80008e3c:	c0 28       	rjmp	80008e40 <quorem+0x108>
80008e3e:	20 16       	sub	r6,1
80008e40:	20 48       	sub	r8,4
80008e42:	08 38       	cp.w	r8,r4
80008e44:	e0 88 00 05 	brls	80008e4e <quorem+0x116>
80008e48:	70 09       	ld.w	r9,r8[0x0]
80008e4a:	58 09       	cp.w	r9,0
80008e4c:	cf 90       	breq	80008e3e <quorem+0x106>
80008e4e:	8f 46       	st.w	r7[0x10],r6
80008e50:	0a 9c       	mov	r12,r5
80008e52:	2f ed       	sub	sp,-8
80008e54:	d8 32       	popm	r0-r7,pc
80008e56:	d7 03       	nop

80008e58 <_dtoa_r>:
80008e58:	d4 31       	pushm	r0-r7,lr
80008e5a:	21 ad       	sub	sp,104
80008e5c:	fa c4 ff 74 	sub	r4,sp,-140
80008e60:	18 97       	mov	r7,r12
80008e62:	16 95       	mov	r5,r11
80008e64:	68 2c       	ld.w	r12,r4[0x8]
80008e66:	50 c9       	stdsp	sp[0x30],r9
80008e68:	68 16       	ld.w	r6,r4[0x4]
80008e6a:	68 09       	ld.w	r9,r4[0x0]
80008e6c:	50 e8       	stdsp	sp[0x38],r8
80008e6e:	14 94       	mov	r4,r10
80008e70:	51 2c       	stdsp	sp[0x48],r12
80008e72:	fa e5 00 08 	st.d	sp[8],r4
80008e76:	51 59       	stdsp	sp[0x54],r9
80008e78:	6e 95       	ld.w	r5,r7[0x24]
80008e7a:	58 05       	cp.w	r5,0
80008e7c:	c0 91       	brne	80008e8e <_dtoa_r+0x36>
80008e7e:	31 0c       	mov	r12,16
80008e80:	e0 a0 09 f4 	rcall	8000a268 <malloc>
80008e84:	99 35       	st.w	r12[0xc],r5
80008e86:	8f 9c       	st.w	r7[0x24],r12
80008e88:	99 15       	st.w	r12[0x4],r5
80008e8a:	99 25       	st.w	r12[0x8],r5
80008e8c:	99 05       	st.w	r12[0x0],r5
80008e8e:	6e 99       	ld.w	r9,r7[0x24]
80008e90:	72 08       	ld.w	r8,r9[0x0]
80008e92:	58 08       	cp.w	r8,0
80008e94:	c0 f0       	breq	80008eb2 <_dtoa_r+0x5a>
80008e96:	72 1a       	ld.w	r10,r9[0x4]
80008e98:	91 1a       	st.w	r8[0x4],r10
80008e9a:	30 1a       	mov	r10,1
80008e9c:	72 19       	ld.w	r9,r9[0x4]
80008e9e:	f4 09 09 49 	lsl	r9,r10,r9
80008ea2:	10 9b       	mov	r11,r8
80008ea4:	91 29       	st.w	r8[0x8],r9
80008ea6:	0e 9c       	mov	r12,r7
80008ea8:	e0 a0 0d 66 	rcall	8000a974 <_Bfree>
80008eac:	6e 98       	ld.w	r8,r7[0x24]
80008eae:	30 09       	mov	r9,0
80008eb0:	91 09       	st.w	r8[0x0],r9
80008eb2:	40 28       	lddsp	r8,sp[0x8]
80008eb4:	10 94       	mov	r4,r8
80008eb6:	58 08       	cp.w	r8,0
80008eb8:	c0 64       	brge	80008ec4 <_dtoa_r+0x6c>
80008eba:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80008ebe:	50 28       	stdsp	sp[0x8],r8
80008ec0:	30 18       	mov	r8,1
80008ec2:	c0 28       	rjmp	80008ec6 <_dtoa_r+0x6e>
80008ec4:	30 08       	mov	r8,0
80008ec6:	8d 08       	st.w	r6[0x0],r8
80008ec8:	fc 1c 7f f0 	movh	r12,0x7ff0
80008ecc:	40 26       	lddsp	r6,sp[0x8]
80008ece:	0c 98       	mov	r8,r6
80008ed0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008ed4:	18 38       	cp.w	r8,r12
80008ed6:	c1 e1       	brne	80008f12 <_dtoa_r+0xba>
80008ed8:	e0 68 27 0f 	mov	r8,9999
80008edc:	41 5b       	lddsp	r11,sp[0x54]
80008ede:	97 08       	st.w	r11[0x0],r8
80008ee0:	40 3a       	lddsp	r10,sp[0xc]
80008ee2:	58 0a       	cp.w	r10,0
80008ee4:	c0 61       	brne	80008ef0 <_dtoa_r+0x98>
80008ee6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80008eea:	c0 31       	brne	80008ef0 <_dtoa_r+0x98>
80008eec:	4a cc       	lddpc	r12,80008f9c <_dtoa_r+0x144>
80008eee:	c0 28       	rjmp	80008ef2 <_dtoa_r+0x9a>
80008ef0:	4a cc       	lddpc	r12,80008fa0 <_dtoa_r+0x148>
80008ef2:	41 29       	lddsp	r9,sp[0x48]
80008ef4:	58 09       	cp.w	r9,0
80008ef6:	e0 80 05 9e 	breq	80009a32 <_dtoa_r+0xbda>
80008efa:	f8 c8 ff fd 	sub	r8,r12,-3
80008efe:	f8 c9 ff f8 	sub	r9,r12,-8
80008f02:	11 8b       	ld.ub	r11,r8[0x0]
80008f04:	30 0a       	mov	r10,0
80008f06:	41 25       	lddsp	r5,sp[0x48]
80008f08:	f4 0b 18 00 	cp.b	r11,r10
80008f0c:	f2 08 17 10 	movne	r8,r9
80008f10:	c1 58       	rjmp	80008f3a <_dtoa_r+0xe2>
80008f12:	fa ea 00 08 	ld.d	r10,sp[8]
80008f16:	30 08       	mov	r8,0
80008f18:	fa eb 00 3c 	st.d	sp[60],r10
80008f1c:	30 09       	mov	r9,0
80008f1e:	e0 a0 15 ae 	rcall	8000ba7a <__avr32_f64_cmp_eq>
80008f22:	c0 f0       	breq	80008f40 <_dtoa_r+0xe8>
80008f24:	30 18       	mov	r8,1
80008f26:	41 5a       	lddsp	r10,sp[0x54]
80008f28:	95 08       	st.w	r10[0x0],r8
80008f2a:	49 fc       	lddpc	r12,80008fa4 <_dtoa_r+0x14c>
80008f2c:	41 29       	lddsp	r9,sp[0x48]
80008f2e:	f8 08 00 08 	add	r8,r12,r8
80008f32:	58 09       	cp.w	r9,0
80008f34:	e0 80 05 7f 	breq	80009a32 <_dtoa_r+0xbda>
80008f38:	12 95       	mov	r5,r9
80008f3a:	8b 08       	st.w	r5[0x0],r8
80008f3c:	e0 8f 05 7b 	bral	80009a32 <_dtoa_r+0xbda>
80008f40:	fa c8 ff 9c 	sub	r8,sp,-100
80008f44:	fa c9 ff a0 	sub	r9,sp,-96
80008f48:	fa ea 00 3c 	ld.d	r10,sp[60]
80008f4c:	0e 9c       	mov	r12,r7
80008f4e:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80008f52:	e0 a0 0d 63 	rcall	8000aa18 <__d2b>
80008f56:	18 93       	mov	r3,r12
80008f58:	58 05       	cp.w	r5,0
80008f5a:	c0 d0       	breq	80008f74 <_dtoa_r+0x11c>
80008f5c:	fa ea 00 3c 	ld.d	r10,sp[60]
80008f60:	30 04       	mov	r4,0
80008f62:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80008f66:	ea c5 03 ff 	sub	r5,r5,1023
80008f6a:	10 9b       	mov	r11,r8
80008f6c:	51 74       	stdsp	sp[0x5c],r4
80008f6e:	ea 1b 3f f0 	orh	r11,0x3ff0
80008f72:	c2 a8       	rjmp	80008fc6 <_dtoa_r+0x16e>
80008f74:	41 88       	lddsp	r8,sp[0x60]
80008f76:	41 9c       	lddsp	r12,sp[0x64]
80008f78:	10 0c       	add	r12,r8
80008f7a:	f8 c5 fb ce 	sub	r5,r12,-1074
80008f7e:	e0 45 00 20 	cp.w	r5,32
80008f82:	e0 8a 00 13 	brle	80008fa8 <_dtoa_r+0x150>
80008f86:	f8 cc fb ee 	sub	r12,r12,-1042
80008f8a:	40 3b       	lddsp	r11,sp[0xc]
80008f8c:	ea 08 11 40 	rsub	r8,r5,64
80008f90:	f6 0c 0a 4c 	lsr	r12,r11,r12
80008f94:	ec 08 09 46 	lsl	r6,r6,r8
80008f98:	0c 4c       	or	r12,r6
80008f9a:	c0 c8       	rjmp	80008fb2 <_dtoa_r+0x15a>
80008f9c:	80 00       	ld.sh	r0,r0[0x0]
80008f9e:	d3 bc       	*unknown*
80008fa0:	80 00       	ld.sh	r0,r0[0x0]
80008fa2:	d3 c8       	*unknown*
80008fa4:	80 00       	ld.sh	r0,r0[0x0]
80008fa6:	d2 98       	*unknown*
80008fa8:	ea 0c 11 20 	rsub	r12,r5,32
80008fac:	40 3a       	lddsp	r10,sp[0xc]
80008fae:	f4 0c 09 4c 	lsl	r12,r10,r12
80008fb2:	e0 a0 14 f0 	rcall	8000b992 <__avr32_u32_to_f64>
80008fb6:	fc 18 fe 10 	movh	r8,0xfe10
80008fba:	30 19       	mov	r9,1
80008fbc:	ea c5 04 33 	sub	r5,r5,1075
80008fc0:	f0 0b 00 0b 	add	r11,r8,r11
80008fc4:	51 79       	stdsp	sp[0x5c],r9
80008fc6:	30 08       	mov	r8,0
80008fc8:	fc 19 3f f8 	movh	r9,0x3ff8
80008fcc:	e0 a0 13 78 	rcall	8000b6bc <__avr32_f64_sub>
80008fd0:	e0 68 43 61 	mov	r8,17249
80008fd4:	ea 18 63 6f 	orh	r8,0x636f
80008fd8:	e0 69 87 a7 	mov	r9,34727
80008fdc:	ea 19 3f d2 	orh	r9,0x3fd2
80008fe0:	e0 a0 12 82 	rcall	8000b4e4 <__avr32_f64_mul>
80008fe4:	e0 68 c8 b3 	mov	r8,51379
80008fe8:	ea 18 8b 60 	orh	r8,0x8b60
80008fec:	e0 69 8a 28 	mov	r9,35368
80008ff0:	ea 19 3f c6 	orh	r9,0x3fc6
80008ff4:	e0 a0 14 32 	rcall	8000b858 <__avr32_f64_add>
80008ff8:	0a 9c       	mov	r12,r5
80008ffa:	14 90       	mov	r0,r10
80008ffc:	16 91       	mov	r1,r11
80008ffe:	e0 a0 14 ce 	rcall	8000b99a <__avr32_s32_to_f64>
80009002:	e0 68 79 fb 	mov	r8,31227
80009006:	ea 18 50 9f 	orh	r8,0x509f
8000900a:	e0 69 44 13 	mov	r9,17427
8000900e:	ea 19 3f d3 	orh	r9,0x3fd3
80009012:	e0 a0 12 69 	rcall	8000b4e4 <__avr32_f64_mul>
80009016:	14 98       	mov	r8,r10
80009018:	16 99       	mov	r9,r11
8000901a:	00 9a       	mov	r10,r0
8000901c:	02 9b       	mov	r11,r1
8000901e:	e0 a0 14 1d 	rcall	8000b858 <__avr32_f64_add>
80009022:	14 90       	mov	r0,r10
80009024:	16 91       	mov	r1,r11
80009026:	e0 a0 14 a3 	rcall	8000b96c <__avr32_f64_to_s32>
8000902a:	30 08       	mov	r8,0
8000902c:	18 96       	mov	r6,r12
8000902e:	30 09       	mov	r9,0
80009030:	00 9a       	mov	r10,r0
80009032:	02 9b       	mov	r11,r1
80009034:	e0 a0 15 6a 	rcall	8000bb08 <__avr32_f64_cmp_lt>
80009038:	c0 c0       	breq	80009050 <_dtoa_r+0x1f8>
8000903a:	0c 9c       	mov	r12,r6
8000903c:	e0 a0 14 af 	rcall	8000b99a <__avr32_s32_to_f64>
80009040:	14 98       	mov	r8,r10
80009042:	16 99       	mov	r9,r11
80009044:	00 9a       	mov	r10,r0
80009046:	02 9b       	mov	r11,r1
80009048:	e0 a0 15 19 	rcall	8000ba7a <__avr32_f64_cmp_eq>
8000904c:	f7 b6 00 01 	subeq	r6,1
80009050:	59 66       	cp.w	r6,22
80009052:	e0 88 00 05 	brls	8000905c <_dtoa_r+0x204>
80009056:	30 18       	mov	r8,1
80009058:	51 48       	stdsp	sp[0x50],r8
8000905a:	c1 28       	rjmp	8000907e <_dtoa_r+0x226>
8000905c:	4c 08       	lddpc	r8,8000915c <_dtoa_r+0x304>
8000905e:	fa ea 00 3c 	ld.d	r10,sp[60]
80009062:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80009066:	e0 a0 15 51 	rcall	8000bb08 <__avr32_f64_cmp_lt>
8000906a:	f9 b4 00 00 	moveq	r4,0
8000906e:	fb f4 0a 14 	st.weq	sp[0x50],r4
80009072:	f7 b6 01 01 	subne	r6,1
80009076:	f9 bc 01 00 	movne	r12,0
8000907a:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000907e:	41 90       	lddsp	r0,sp[0x64]
80009080:	20 10       	sub	r0,1
80009082:	0a 10       	sub	r0,r5
80009084:	c0 46       	brmi	8000908c <_dtoa_r+0x234>
80009086:	50 40       	stdsp	sp[0x10],r0
80009088:	30 00       	mov	r0,0
8000908a:	c0 48       	rjmp	80009092 <_dtoa_r+0x23a>
8000908c:	30 0b       	mov	r11,0
8000908e:	5c 30       	neg	r0
80009090:	50 4b       	stdsp	sp[0x10],r11
80009092:	ec 02 11 00 	rsub	r2,r6,0
80009096:	58 06       	cp.w	r6,0
80009098:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000909c:	f5 d6 e4 0a 	addge	r10,r10,r6
800090a0:	fb fa 4a 04 	st.wge	sp[0x10],r10
800090a4:	fb f6 4a 11 	st.wge	sp[0x44],r6
800090a8:	f9 b2 04 00 	movge	r2,0
800090ac:	e1 d6 e5 10 	sublt	r0,r0,r6
800090b0:	f9 b9 05 00 	movlt	r9,0
800090b4:	fb f9 5a 11 	st.wlt	sp[0x44],r9
800090b8:	40 c8       	lddsp	r8,sp[0x30]
800090ba:	58 98       	cp.w	r8,9
800090bc:	e0 8b 00 20 	brhi	800090fc <_dtoa_r+0x2a4>
800090c0:	58 58       	cp.w	r8,5
800090c2:	f9 b4 0a 01 	movle	r4,1
800090c6:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800090ca:	f7 b5 09 04 	subgt	r5,4
800090ce:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800090d2:	f9 b4 09 00 	movgt	r4,0
800090d6:	40 cc       	lddsp	r12,sp[0x30]
800090d8:	58 3c       	cp.w	r12,3
800090da:	c2 d0       	breq	80009134 <_dtoa_r+0x2dc>
800090dc:	e0 89 00 05 	brgt	800090e6 <_dtoa_r+0x28e>
800090e0:	58 2c       	cp.w	r12,2
800090e2:	c1 01       	brne	80009102 <_dtoa_r+0x2aa>
800090e4:	c1 88       	rjmp	80009114 <_dtoa_r+0x2bc>
800090e6:	40 cb       	lddsp	r11,sp[0x30]
800090e8:	58 4b       	cp.w	r11,4
800090ea:	c0 60       	breq	800090f6 <_dtoa_r+0x29e>
800090ec:	58 5b       	cp.w	r11,5
800090ee:	c0 a1       	brne	80009102 <_dtoa_r+0x2aa>
800090f0:	30 1a       	mov	r10,1
800090f2:	50 da       	stdsp	sp[0x34],r10
800090f4:	c2 28       	rjmp	80009138 <_dtoa_r+0x2e0>
800090f6:	30 19       	mov	r9,1
800090f8:	50 d9       	stdsp	sp[0x34],r9
800090fa:	c0 f8       	rjmp	80009118 <_dtoa_r+0x2c0>
800090fc:	30 08       	mov	r8,0
800090fe:	30 14       	mov	r4,1
80009100:	50 c8       	stdsp	sp[0x30],r8
80009102:	3f f5       	mov	r5,-1
80009104:	30 1c       	mov	r12,1
80009106:	30 0b       	mov	r11,0
80009108:	50 95       	stdsp	sp[0x24],r5
8000910a:	50 dc       	stdsp	sp[0x34],r12
8000910c:	0a 91       	mov	r1,r5
8000910e:	31 28       	mov	r8,18
80009110:	50 eb       	stdsp	sp[0x38],r11
80009112:	c2 08       	rjmp	80009152 <_dtoa_r+0x2fa>
80009114:	30 0a       	mov	r10,0
80009116:	50 da       	stdsp	sp[0x34],r10
80009118:	40 e9       	lddsp	r9,sp[0x38]
8000911a:	58 09       	cp.w	r9,0
8000911c:	e0 89 00 07 	brgt	8000912a <_dtoa_r+0x2d2>
80009120:	30 18       	mov	r8,1
80009122:	50 98       	stdsp	sp[0x24],r8
80009124:	10 91       	mov	r1,r8
80009126:	50 e8       	stdsp	sp[0x38],r8
80009128:	c1 58       	rjmp	80009152 <_dtoa_r+0x2fa>
8000912a:	40 e5       	lddsp	r5,sp[0x38]
8000912c:	50 95       	stdsp	sp[0x24],r5
8000912e:	0a 91       	mov	r1,r5
80009130:	0a 98       	mov	r8,r5
80009132:	c1 08       	rjmp	80009152 <_dtoa_r+0x2fa>
80009134:	30 0c       	mov	r12,0
80009136:	50 dc       	stdsp	sp[0x34],r12
80009138:	40 eb       	lddsp	r11,sp[0x38]
8000913a:	ec 0b 00 0b 	add	r11,r6,r11
8000913e:	50 9b       	stdsp	sp[0x24],r11
80009140:	16 98       	mov	r8,r11
80009142:	2f f8       	sub	r8,-1
80009144:	58 08       	cp.w	r8,0
80009146:	e0 89 00 05 	brgt	80009150 <_dtoa_r+0x2f8>
8000914a:	10 91       	mov	r1,r8
8000914c:	30 18       	mov	r8,1
8000914e:	c0 28       	rjmp	80009152 <_dtoa_r+0x2fa>
80009150:	10 91       	mov	r1,r8
80009152:	30 09       	mov	r9,0
80009154:	6e 9a       	ld.w	r10,r7[0x24]
80009156:	95 19       	st.w	r10[0x4],r9
80009158:	30 49       	mov	r9,4
8000915a:	c0 78       	rjmp	80009168 <_dtoa_r+0x310>
8000915c:	80 00       	ld.sh	r0,r0[0x0]
8000915e:	d4 80       	acall	0x48
80009160:	6a 1a       	ld.w	r10,r5[0x4]
80009162:	a1 79       	lsl	r9,0x1
80009164:	2f fa       	sub	r10,-1
80009166:	8b 1a       	st.w	r5[0x4],r10
80009168:	6e 95       	ld.w	r5,r7[0x24]
8000916a:	f2 ca ff ec 	sub	r10,r9,-20
8000916e:	10 3a       	cp.w	r10,r8
80009170:	fe 98 ff f8 	brls	80009160 <_dtoa_r+0x308>
80009174:	6a 1b       	ld.w	r11,r5[0x4]
80009176:	0e 9c       	mov	r12,r7
80009178:	e0 a0 0c 18 	rcall	8000a9a8 <_Balloc>
8000917c:	58 e1       	cp.w	r1,14
8000917e:	5f 88       	srls	r8
80009180:	8b 0c       	st.w	r5[0x0],r12
80009182:	f1 e4 00 04 	and	r4,r8,r4
80009186:	6e 98       	ld.w	r8,r7[0x24]
80009188:	70 08       	ld.w	r8,r8[0x0]
8000918a:	50 88       	stdsp	sp[0x20],r8
8000918c:	e0 80 01 82 	breq	80009490 <_dtoa_r+0x638>
80009190:	58 06       	cp.w	r6,0
80009192:	e0 8a 00 40 	brle	80009212 <_dtoa_r+0x3ba>
80009196:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000919a:	4c b8       	lddpc	r8,800092c4 <_dtoa_r+0x46c>
8000919c:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
800091a0:	fa e5 00 18 	st.d	sp[24],r4
800091a4:	ec 04 14 04 	asr	r4,r6,0x4
800091a8:	ed b4 00 04 	bld	r4,0x4
800091ac:	c0 30       	breq	800091b2 <_dtoa_r+0x35a>
800091ae:	30 25       	mov	r5,2
800091b0:	c0 f8       	rjmp	800091ce <_dtoa_r+0x376>
800091b2:	4c 68       	lddpc	r8,800092c8 <_dtoa_r+0x470>
800091b4:	f0 e8 00 20 	ld.d	r8,r8[32]
800091b8:	fa ea 00 3c 	ld.d	r10,sp[60]
800091bc:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800091c0:	e0 a0 14 d8 	rcall	8000bb70 <__avr32_f64_div>
800091c4:	30 35       	mov	r5,3
800091c6:	14 98       	mov	r8,r10
800091c8:	16 99       	mov	r9,r11
800091ca:	fa e9 00 08 	st.d	sp[8],r8
800091ce:	4b fc       	lddpc	r12,800092c8 <_dtoa_r+0x470>
800091d0:	50 a3       	stdsp	sp[0x28],r3
800091d2:	0c 93       	mov	r3,r6
800091d4:	18 96       	mov	r6,r12
800091d6:	c0 f8       	rjmp	800091f4 <_dtoa_r+0x39c>
800091d8:	fa ea 00 18 	ld.d	r10,sp[24]
800091dc:	ed b4 00 00 	bld	r4,0x0
800091e0:	c0 81       	brne	800091f0 <_dtoa_r+0x398>
800091e2:	ec e8 00 00 	ld.d	r8,r6[0]
800091e6:	2f f5       	sub	r5,-1
800091e8:	e0 a0 11 7e 	rcall	8000b4e4 <__avr32_f64_mul>
800091ec:	fa eb 00 18 	st.d	sp[24],r10
800091f0:	a1 54       	asr	r4,0x1
800091f2:	2f 86       	sub	r6,-8
800091f4:	58 04       	cp.w	r4,0
800091f6:	cf 11       	brne	800091d8 <_dtoa_r+0x380>
800091f8:	fa e8 00 18 	ld.d	r8,sp[24]
800091fc:	fa ea 00 08 	ld.d	r10,sp[8]
80009200:	06 96       	mov	r6,r3
80009202:	e0 a0 14 b7 	rcall	8000bb70 <__avr32_f64_div>
80009206:	40 a3       	lddsp	r3,sp[0x28]
80009208:	14 98       	mov	r8,r10
8000920a:	16 99       	mov	r9,r11
8000920c:	fa e9 00 08 	st.d	sp[8],r8
80009210:	c2 d8       	rjmp	8000926a <_dtoa_r+0x412>
80009212:	ec 08 11 00 	rsub	r8,r6,0
80009216:	c0 31       	brne	8000921c <_dtoa_r+0x3c4>
80009218:	30 25       	mov	r5,2
8000921a:	c2 88       	rjmp	8000926a <_dtoa_r+0x412>
8000921c:	4a bc       	lddpc	r12,800092c8 <_dtoa_r+0x470>
8000921e:	f0 04 14 04 	asr	r4,r8,0x4
80009222:	50 1c       	stdsp	sp[0x4],r12
80009224:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009228:	4a 79       	lddpc	r9,800092c4 <_dtoa_r+0x46c>
8000922a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000922e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80009232:	e0 a0 11 59 	rcall	8000b4e4 <__avr32_f64_mul>
80009236:	40 1c       	lddsp	r12,sp[0x4]
80009238:	50 63       	stdsp	sp[0x18],r3
8000923a:	30 25       	mov	r5,2
8000923c:	0c 93       	mov	r3,r6
8000923e:	fa eb 00 08 	st.d	sp[8],r10
80009242:	18 96       	mov	r6,r12
80009244:	c0 f8       	rjmp	80009262 <_dtoa_r+0x40a>
80009246:	fa ea 00 08 	ld.d	r10,sp[8]
8000924a:	ed b4 00 00 	bld	r4,0x0
8000924e:	c0 81       	brne	8000925e <_dtoa_r+0x406>
80009250:	ec e8 00 00 	ld.d	r8,r6[0]
80009254:	2f f5       	sub	r5,-1
80009256:	e0 a0 11 47 	rcall	8000b4e4 <__avr32_f64_mul>
8000925a:	fa eb 00 08 	st.d	sp[8],r10
8000925e:	a1 54       	asr	r4,0x1
80009260:	2f 86       	sub	r6,-8
80009262:	58 04       	cp.w	r4,0
80009264:	cf 11       	brne	80009246 <_dtoa_r+0x3ee>
80009266:	06 96       	mov	r6,r3
80009268:	40 63       	lddsp	r3,sp[0x18]
8000926a:	41 4a       	lddsp	r10,sp[0x50]
8000926c:	58 0a       	cp.w	r10,0
8000926e:	c2 f0       	breq	800092cc <_dtoa_r+0x474>
80009270:	fa e8 00 08 	ld.d	r8,sp[8]
80009274:	58 01       	cp.w	r1,0
80009276:	5f 94       	srgt	r4
80009278:	fa e9 00 18 	st.d	sp[24],r8
8000927c:	30 08       	mov	r8,0
8000927e:	fc 19 3f f0 	movh	r9,0x3ff0
80009282:	fa ea 00 18 	ld.d	r10,sp[24]
80009286:	e0 a0 14 41 	rcall	8000bb08 <__avr32_f64_cmp_lt>
8000928a:	f9 bc 00 00 	moveq	r12,0
8000928e:	f9 bc 01 01 	movne	r12,1
80009292:	e9 ec 00 0c 	and	r12,r4,r12
80009296:	c1 b0       	breq	800092cc <_dtoa_r+0x474>
80009298:	40 98       	lddsp	r8,sp[0x24]
8000929a:	58 08       	cp.w	r8,0
8000929c:	e0 8a 00 f6 	brle	80009488 <_dtoa_r+0x630>
800092a0:	30 08       	mov	r8,0
800092a2:	fc 19 40 24 	movh	r9,0x4024
800092a6:	ec c4 00 01 	sub	r4,r6,1
800092aa:	fa ea 00 18 	ld.d	r10,sp[24]
800092ae:	2f f5       	sub	r5,-1
800092b0:	50 64       	stdsp	sp[0x18],r4
800092b2:	e0 a0 11 19 	rcall	8000b4e4 <__avr32_f64_mul>
800092b6:	40 94       	lddsp	r4,sp[0x24]
800092b8:	14 98       	mov	r8,r10
800092ba:	16 99       	mov	r9,r11
800092bc:	fa e9 00 08 	st.d	sp[8],r8
800092c0:	c0 88       	rjmp	800092d0 <_dtoa_r+0x478>
800092c2:	d7 03       	nop
800092c4:	80 00       	ld.sh	r0,r0[0x0]
800092c6:	d4 80       	acall	0x48
800092c8:	80 00       	ld.sh	r0,r0[0x0]
800092ca:	d5 48       	*unknown*
800092cc:	50 66       	stdsp	sp[0x18],r6
800092ce:	02 94       	mov	r4,r1
800092d0:	0a 9c       	mov	r12,r5
800092d2:	e0 a0 13 64 	rcall	8000b99a <__avr32_s32_to_f64>
800092d6:	fa e8 00 08 	ld.d	r8,sp[8]
800092da:	e0 a0 11 05 	rcall	8000b4e4 <__avr32_f64_mul>
800092de:	30 08       	mov	r8,0
800092e0:	fc 19 40 1c 	movh	r9,0x401c
800092e4:	e0 a0 12 ba 	rcall	8000b858 <__avr32_f64_add>
800092e8:	14 98       	mov	r8,r10
800092ea:	16 99       	mov	r9,r11
800092ec:	fa e9 00 28 	st.d	sp[40],r8
800092f0:	fc 18 fc c0 	movh	r8,0xfcc0
800092f4:	40 a5       	lddsp	r5,sp[0x28]
800092f6:	10 05       	add	r5,r8
800092f8:	50 a5       	stdsp	sp[0x28],r5
800092fa:	58 04       	cp.w	r4,0
800092fc:	c2 11       	brne	8000933e <_dtoa_r+0x4e6>
800092fe:	fa ea 00 08 	ld.d	r10,sp[8]
80009302:	30 08       	mov	r8,0
80009304:	fc 19 40 14 	movh	r9,0x4014
80009308:	e0 a0 11 da 	rcall	8000b6bc <__avr32_f64_sub>
8000930c:	40 bc       	lddsp	r12,sp[0x2c]
8000930e:	fa eb 00 08 	st.d	sp[8],r10
80009312:	14 98       	mov	r8,r10
80009314:	16 99       	mov	r9,r11
80009316:	18 9a       	mov	r10,r12
80009318:	0a 9b       	mov	r11,r5
8000931a:	e0 a0 13 f7 	rcall	8000bb08 <__avr32_f64_cmp_lt>
8000931e:	e0 81 02 54 	brne	800097c6 <_dtoa_r+0x96e>
80009322:	0a 98       	mov	r8,r5
80009324:	40 b9       	lddsp	r9,sp[0x2c]
80009326:	ee 18 80 00 	eorh	r8,0x8000
8000932a:	fa ea 00 08 	ld.d	r10,sp[8]
8000932e:	10 95       	mov	r5,r8
80009330:	12 98       	mov	r8,r9
80009332:	0a 99       	mov	r9,r5
80009334:	e0 a0 13 ea 	rcall	8000bb08 <__avr32_f64_cmp_lt>
80009338:	e0 81 02 3e 	brne	800097b4 <_dtoa_r+0x95c>
8000933c:	ca 68       	rjmp	80009488 <_dtoa_r+0x630>
8000933e:	4c e9       	lddpc	r9,80009474 <_dtoa_r+0x61c>
80009340:	e8 c8 00 01 	sub	r8,r4,1
80009344:	40 d5       	lddsp	r5,sp[0x34]
80009346:	58 05       	cp.w	r5,0
80009348:	c4 f0       	breq	800093e6 <_dtoa_r+0x58e>
8000934a:	30 0c       	mov	r12,0
8000934c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80009350:	51 3c       	stdsp	sp[0x4c],r12
80009352:	30 0a       	mov	r10,0
80009354:	fc 1b 3f e0 	movh	r11,0x3fe0
80009358:	e0 a0 14 0c 	rcall	8000bb70 <__avr32_f64_div>
8000935c:	fa e8 00 28 	ld.d	r8,sp[40]
80009360:	40 85       	lddsp	r5,sp[0x20]
80009362:	e0 a0 11 ad 	rcall	8000b6bc <__avr32_f64_sub>
80009366:	fa eb 00 28 	st.d	sp[40],r10
8000936a:	fa ea 00 08 	ld.d	r10,sp[8]
8000936e:	e0 a0 12 ff 	rcall	8000b96c <__avr32_f64_to_s32>
80009372:	51 6c       	stdsp	sp[0x58],r12
80009374:	e0 a0 13 13 	rcall	8000b99a <__avr32_s32_to_f64>
80009378:	14 98       	mov	r8,r10
8000937a:	16 99       	mov	r9,r11
8000937c:	fa ea 00 08 	ld.d	r10,sp[8]
80009380:	e0 a0 11 9e 	rcall	8000b6bc <__avr32_f64_sub>
80009384:	fa eb 00 08 	st.d	sp[8],r10
80009388:	41 68       	lddsp	r8,sp[0x58]
8000938a:	2d 08       	sub	r8,-48
8000938c:	0a c8       	st.b	r5++,r8
8000938e:	41 39       	lddsp	r9,sp[0x4c]
80009390:	2f f9       	sub	r9,-1
80009392:	51 39       	stdsp	sp[0x4c],r9
80009394:	fa e8 00 28 	ld.d	r8,sp[40]
80009398:	e0 a0 13 b8 	rcall	8000bb08 <__avr32_f64_cmp_lt>
8000939c:	e0 81 03 3a 	brne	80009a10 <_dtoa_r+0xbb8>
800093a0:	fa e8 00 08 	ld.d	r8,sp[8]
800093a4:	30 0a       	mov	r10,0
800093a6:	fc 1b 3f f0 	movh	r11,0x3ff0
800093aa:	e0 a0 11 89 	rcall	8000b6bc <__avr32_f64_sub>
800093ae:	fa e8 00 28 	ld.d	r8,sp[40]
800093b2:	e0 a0 13 ab 	rcall	8000bb08 <__avr32_f64_cmp_lt>
800093b6:	fa ea 00 28 	ld.d	r10,sp[40]
800093ba:	30 08       	mov	r8,0
800093bc:	fc 19 40 24 	movh	r9,0x4024
800093c0:	e0 81 00 da 	brne	80009574 <_dtoa_r+0x71c>
800093c4:	41 3c       	lddsp	r12,sp[0x4c]
800093c6:	08 3c       	cp.w	r12,r4
800093c8:	c6 04       	brge	80009488 <_dtoa_r+0x630>
800093ca:	e0 a0 10 8d 	rcall	8000b4e4 <__avr32_f64_mul>
800093ce:	30 08       	mov	r8,0
800093d0:	fa eb 00 28 	st.d	sp[40],r10
800093d4:	fc 19 40 24 	movh	r9,0x4024
800093d8:	fa ea 00 08 	ld.d	r10,sp[8]
800093dc:	e0 a0 10 84 	rcall	8000b4e4 <__avr32_f64_mul>
800093e0:	fa eb 00 08 	st.d	sp[8],r10
800093e4:	cc 3b       	rjmp	8000936a <_dtoa_r+0x512>
800093e6:	40 85       	lddsp	r5,sp[0x20]
800093e8:	08 05       	add	r5,r4
800093ea:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800093ee:	51 35       	stdsp	sp[0x4c],r5
800093f0:	fa e8 00 28 	ld.d	r8,sp[40]
800093f4:	40 85       	lddsp	r5,sp[0x20]
800093f6:	e0 a0 10 77 	rcall	8000b4e4 <__avr32_f64_mul>
800093fa:	fa eb 00 28 	st.d	sp[40],r10
800093fe:	fa ea 00 08 	ld.d	r10,sp[8]
80009402:	e0 a0 12 b5 	rcall	8000b96c <__avr32_f64_to_s32>
80009406:	51 6c       	stdsp	sp[0x58],r12
80009408:	e0 a0 12 c9 	rcall	8000b99a <__avr32_s32_to_f64>
8000940c:	14 98       	mov	r8,r10
8000940e:	16 99       	mov	r9,r11
80009410:	fa ea 00 08 	ld.d	r10,sp[8]
80009414:	e0 a0 11 54 	rcall	8000b6bc <__avr32_f64_sub>
80009418:	fa eb 00 08 	st.d	sp[8],r10
8000941c:	41 68       	lddsp	r8,sp[0x58]
8000941e:	2d 08       	sub	r8,-48
80009420:	0a c8       	st.b	r5++,r8
80009422:	41 3c       	lddsp	r12,sp[0x4c]
80009424:	18 35       	cp.w	r5,r12
80009426:	c2 91       	brne	80009478 <_dtoa_r+0x620>
80009428:	30 08       	mov	r8,0
8000942a:	fc 19 3f e0 	movh	r9,0x3fe0
8000942e:	fa ea 00 28 	ld.d	r10,sp[40]
80009432:	e0 a0 12 13 	rcall	8000b858 <__avr32_f64_add>
80009436:	40 85       	lddsp	r5,sp[0x20]
80009438:	fa e8 00 08 	ld.d	r8,sp[8]
8000943c:	08 05       	add	r5,r4
8000943e:	e0 a0 13 65 	rcall	8000bb08 <__avr32_f64_cmp_lt>
80009442:	e0 81 00 99 	brne	80009574 <_dtoa_r+0x71c>
80009446:	fa e8 00 28 	ld.d	r8,sp[40]
8000944a:	30 0a       	mov	r10,0
8000944c:	fc 1b 3f e0 	movh	r11,0x3fe0
80009450:	e0 a0 11 36 	rcall	8000b6bc <__avr32_f64_sub>
80009454:	14 98       	mov	r8,r10
80009456:	16 99       	mov	r9,r11
80009458:	fa ea 00 08 	ld.d	r10,sp[8]
8000945c:	e0 a0 13 56 	rcall	8000bb08 <__avr32_f64_cmp_lt>
80009460:	c1 40       	breq	80009488 <_dtoa_r+0x630>
80009462:	33 09       	mov	r9,48
80009464:	0a 98       	mov	r8,r5
80009466:	11 7a       	ld.ub	r10,--r8
80009468:	f2 0a 18 00 	cp.b	r10,r9
8000946c:	e0 81 02 d2 	brne	80009a10 <_dtoa_r+0xbb8>
80009470:	10 95       	mov	r5,r8
80009472:	cf 9b       	rjmp	80009464 <_dtoa_r+0x60c>
80009474:	80 00       	ld.sh	r0,r0[0x0]
80009476:	d4 80       	acall	0x48
80009478:	30 08       	mov	r8,0
8000947a:	fc 19 40 24 	movh	r9,0x4024
8000947e:	e0 a0 10 33 	rcall	8000b4e4 <__avr32_f64_mul>
80009482:	fa eb 00 08 	st.d	sp[8],r10
80009486:	cb cb       	rjmp	800093fe <_dtoa_r+0x5a6>
80009488:	fa ea 00 3c 	ld.d	r10,sp[60]
8000948c:	fa eb 00 08 	st.d	sp[8],r10
80009490:	58 e6       	cp.w	r6,14
80009492:	5f ab       	srle	r11
80009494:	41 8a       	lddsp	r10,sp[0x60]
80009496:	30 08       	mov	r8,0
80009498:	f4 09 11 ff 	rsub	r9,r10,-1
8000949c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
800094a0:	f0 09 18 00 	cp.b	r9,r8
800094a4:	e0 80 00 81 	breq	800095a6 <_dtoa_r+0x74e>
800094a8:	40 ea       	lddsp	r10,sp[0x38]
800094aa:	58 01       	cp.w	r1,0
800094ac:	5f a9       	srle	r9
800094ae:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
800094b2:	4c 9a       	lddpc	r10,800095d4 <_dtoa_r+0x77c>
800094b4:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800094b8:	fa e5 00 10 	st.d	sp[16],r4
800094bc:	f0 09 18 00 	cp.b	r9,r8
800094c0:	c1 40       	breq	800094e8 <_dtoa_r+0x690>
800094c2:	58 01       	cp.w	r1,0
800094c4:	e0 81 01 78 	brne	800097b4 <_dtoa_r+0x95c>
800094c8:	30 08       	mov	r8,0
800094ca:	fc 19 40 14 	movh	r9,0x4014
800094ce:	08 9a       	mov	r10,r4
800094d0:	0a 9b       	mov	r11,r5
800094d2:	e0 a0 10 09 	rcall	8000b4e4 <__avr32_f64_mul>
800094d6:	fa e8 00 08 	ld.d	r8,sp[8]
800094da:	e0 a0 12 e3 	rcall	8000baa0 <__avr32_f64_cmp_ge>
800094de:	e0 81 01 6b 	brne	800097b4 <_dtoa_r+0x95c>
800094e2:	02 92       	mov	r2,r1
800094e4:	e0 8f 01 73 	bral	800097ca <_dtoa_r+0x972>
800094e8:	40 85       	lddsp	r5,sp[0x20]
800094ea:	30 14       	mov	r4,1
800094ec:	fa e8 00 10 	ld.d	r8,sp[16]
800094f0:	fa ea 00 08 	ld.d	r10,sp[8]
800094f4:	e0 a0 13 3e 	rcall	8000bb70 <__avr32_f64_div>
800094f8:	e0 a0 12 3a 	rcall	8000b96c <__avr32_f64_to_s32>
800094fc:	18 92       	mov	r2,r12
800094fe:	e0 a0 12 4e 	rcall	8000b99a <__avr32_s32_to_f64>
80009502:	fa e8 00 10 	ld.d	r8,sp[16]
80009506:	e0 a0 0f ef 	rcall	8000b4e4 <__avr32_f64_mul>
8000950a:	14 98       	mov	r8,r10
8000950c:	16 99       	mov	r9,r11
8000950e:	fa ea 00 08 	ld.d	r10,sp[8]
80009512:	e0 a0 10 d5 	rcall	8000b6bc <__avr32_f64_sub>
80009516:	fa eb 00 08 	st.d	sp[8],r10
8000951a:	e4 c8 ff d0 	sub	r8,r2,-48
8000951e:	0a c8       	st.b	r5++,r8
80009520:	fc 19 40 24 	movh	r9,0x4024
80009524:	30 08       	mov	r8,0
80009526:	02 34       	cp.w	r4,r1
80009528:	c3 31       	brne	8000958e <_dtoa_r+0x736>
8000952a:	fa e8 00 08 	ld.d	r8,sp[8]
8000952e:	e0 a0 11 95 	rcall	8000b858 <__avr32_f64_add>
80009532:	16 91       	mov	r1,r11
80009534:	14 90       	mov	r0,r10
80009536:	14 98       	mov	r8,r10
80009538:	02 99       	mov	r9,r1
8000953a:	fa ea 00 10 	ld.d	r10,sp[16]
8000953e:	e0 a0 12 e5 	rcall	8000bb08 <__avr32_f64_cmp_lt>
80009542:	c1 a1       	brne	80009576 <_dtoa_r+0x71e>
80009544:	fa e8 00 10 	ld.d	r8,sp[16]
80009548:	00 9a       	mov	r10,r0
8000954a:	02 9b       	mov	r11,r1
8000954c:	e0 a0 12 97 	rcall	8000ba7a <__avr32_f64_cmp_eq>
80009550:	e0 80 02 5f 	breq	80009a0e <_dtoa_r+0xbb6>
80009554:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80009558:	c0 f1       	brne	80009576 <_dtoa_r+0x71e>
8000955a:	e0 8f 02 5a 	bral	80009a0e <_dtoa_r+0xbb6>
8000955e:	40 8a       	lddsp	r10,sp[0x20]
80009560:	14 38       	cp.w	r8,r10
80009562:	c0 30       	breq	80009568 <_dtoa_r+0x710>
80009564:	10 95       	mov	r5,r8
80009566:	c0 98       	rjmp	80009578 <_dtoa_r+0x720>
80009568:	33 08       	mov	r8,48
8000956a:	40 89       	lddsp	r9,sp[0x20]
8000956c:	2f f6       	sub	r6,-1
8000956e:	b2 88       	st.b	r9[0x0],r8
80009570:	40 88       	lddsp	r8,sp[0x20]
80009572:	c0 88       	rjmp	80009582 <_dtoa_r+0x72a>
80009574:	40 66       	lddsp	r6,sp[0x18]
80009576:	33 99       	mov	r9,57
80009578:	0a 98       	mov	r8,r5
8000957a:	11 7a       	ld.ub	r10,--r8
8000957c:	f2 0a 18 00 	cp.b	r10,r9
80009580:	ce f0       	breq	8000955e <_dtoa_r+0x706>
80009582:	50 66       	stdsp	sp[0x18],r6
80009584:	11 89       	ld.ub	r9,r8[0x0]
80009586:	2f f9       	sub	r9,-1
80009588:	b0 89       	st.b	r8[0x0],r9
8000958a:	e0 8f 02 43 	bral	80009a10 <_dtoa_r+0xbb8>
8000958e:	e0 a0 0f ab 	rcall	8000b4e4 <__avr32_f64_mul>
80009592:	2f f4       	sub	r4,-1
80009594:	fa eb 00 08 	st.d	sp[8],r10
80009598:	30 08       	mov	r8,0
8000959a:	30 09       	mov	r9,0
8000959c:	e0 a0 12 6f 	rcall	8000ba7a <__avr32_f64_cmp_eq>
800095a0:	ca 60       	breq	800094ec <_dtoa_r+0x694>
800095a2:	e0 8f 02 36 	bral	80009a0e <_dtoa_r+0xbb6>
800095a6:	40 d8       	lddsp	r8,sp[0x34]
800095a8:	58 08       	cp.w	r8,0
800095aa:	c0 51       	brne	800095b4 <_dtoa_r+0x75c>
800095ac:	04 98       	mov	r8,r2
800095ae:	00 95       	mov	r5,r0
800095b0:	40 d4       	lddsp	r4,sp[0x34]
800095b2:	c3 88       	rjmp	80009622 <_dtoa_r+0x7ca>
800095b4:	40 c5       	lddsp	r5,sp[0x30]
800095b6:	58 15       	cp.w	r5,1
800095b8:	e0 89 00 10 	brgt	800095d8 <_dtoa_r+0x780>
800095bc:	41 74       	lddsp	r4,sp[0x5c]
800095be:	58 04       	cp.w	r4,0
800095c0:	c0 40       	breq	800095c8 <_dtoa_r+0x770>
800095c2:	f4 c9 fb cd 	sub	r9,r10,-1075
800095c6:	c0 48       	rjmp	800095ce <_dtoa_r+0x776>
800095c8:	41 99       	lddsp	r9,sp[0x64]
800095ca:	f2 09 11 36 	rsub	r9,r9,54
800095ce:	04 98       	mov	r8,r2
800095d0:	00 95       	mov	r5,r0
800095d2:	c1 d8       	rjmp	8000960c <_dtoa_r+0x7b4>
800095d4:	80 00       	ld.sh	r0,r0[0x0]
800095d6:	d4 80       	acall	0x48
800095d8:	e2 c8 00 01 	sub	r8,r1,1
800095dc:	58 01       	cp.w	r1,0
800095de:	e0 05 17 40 	movge	r5,r0
800095e2:	e2 09 17 40 	movge	r9,r1
800095e6:	e1 d1 e5 15 	sublt	r5,r0,r1
800095ea:	f9 b9 05 00 	movlt	r9,0
800095ee:	10 32       	cp.w	r2,r8
800095f0:	e5 d8 e4 18 	subge	r8,r2,r8
800095f4:	f1 d2 e5 18 	sublt	r8,r8,r2
800095f8:	e5 d8 e5 02 	addlt	r2,r2,r8
800095fc:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80009600:	f9 d8 e5 0c 	addlt	r12,r12,r8
80009604:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80009608:	f9 b8 05 00 	movlt	r8,0
8000960c:	40 4b       	lddsp	r11,sp[0x10]
8000960e:	12 0b       	add	r11,r9
80009610:	50 08       	stdsp	sp[0x0],r8
80009612:	50 4b       	stdsp	sp[0x10],r11
80009614:	12 00       	add	r0,r9
80009616:	30 1b       	mov	r11,1
80009618:	0e 9c       	mov	r12,r7
8000961a:	e0 a0 0b 7b 	rcall	8000ad10 <__i2b>
8000961e:	40 08       	lddsp	r8,sp[0x0]
80009620:	18 94       	mov	r4,r12
80009622:	40 4a       	lddsp	r10,sp[0x10]
80009624:	58 05       	cp.w	r5,0
80009626:	5f 99       	srgt	r9
80009628:	58 0a       	cp.w	r10,0
8000962a:	5f 9a       	srgt	r10
8000962c:	f5 e9 00 09 	and	r9,r10,r9
80009630:	c0 80       	breq	80009640 <_dtoa_r+0x7e8>
80009632:	40 4c       	lddsp	r12,sp[0x10]
80009634:	f8 05 0d 49 	min	r9,r12,r5
80009638:	12 1c       	sub	r12,r9
8000963a:	12 10       	sub	r0,r9
8000963c:	50 4c       	stdsp	sp[0x10],r12
8000963e:	12 15       	sub	r5,r9
80009640:	58 02       	cp.w	r2,0
80009642:	e0 8a 00 27 	brle	80009690 <_dtoa_r+0x838>
80009646:	40 db       	lddsp	r11,sp[0x34]
80009648:	58 0b       	cp.w	r11,0
8000964a:	c1 d0       	breq	80009684 <_dtoa_r+0x82c>
8000964c:	58 08       	cp.w	r8,0
8000964e:	e0 8a 00 17 	brle	8000967c <_dtoa_r+0x824>
80009652:	10 9a       	mov	r10,r8
80009654:	50 08       	stdsp	sp[0x0],r8
80009656:	08 9b       	mov	r11,r4
80009658:	0e 9c       	mov	r12,r7
8000965a:	e0 a0 0b a1 	rcall	8000ad9c <__pow5mult>
8000965e:	06 9a       	mov	r10,r3
80009660:	18 9b       	mov	r11,r12
80009662:	18 94       	mov	r4,r12
80009664:	0e 9c       	mov	r12,r7
80009666:	e0 a0 0a d5 	rcall	8000ac10 <__multiply>
8000966a:	18 99       	mov	r9,r12
8000966c:	06 9b       	mov	r11,r3
8000966e:	50 19       	stdsp	sp[0x4],r9
80009670:	0e 9c       	mov	r12,r7
80009672:	e0 a0 09 81 	rcall	8000a974 <_Bfree>
80009676:	40 19       	lddsp	r9,sp[0x4]
80009678:	40 08       	lddsp	r8,sp[0x0]
8000967a:	12 93       	mov	r3,r9
8000967c:	e4 08 01 0a 	sub	r10,r2,r8
80009680:	c0 80       	breq	80009690 <_dtoa_r+0x838>
80009682:	c0 28       	rjmp	80009686 <_dtoa_r+0x82e>
80009684:	04 9a       	mov	r10,r2
80009686:	06 9b       	mov	r11,r3
80009688:	0e 9c       	mov	r12,r7
8000968a:	e0 a0 0b 89 	rcall	8000ad9c <__pow5mult>
8000968e:	18 93       	mov	r3,r12
80009690:	30 1b       	mov	r11,1
80009692:	0e 9c       	mov	r12,r7
80009694:	e0 a0 0b 3e 	rcall	8000ad10 <__i2b>
80009698:	41 1a       	lddsp	r10,sp[0x44]
8000969a:	18 92       	mov	r2,r12
8000969c:	58 0a       	cp.w	r10,0
8000969e:	e0 8a 00 07 	brle	800096ac <_dtoa_r+0x854>
800096a2:	18 9b       	mov	r11,r12
800096a4:	0e 9c       	mov	r12,r7
800096a6:	e0 a0 0b 7b 	rcall	8000ad9c <__pow5mult>
800096aa:	18 92       	mov	r2,r12
800096ac:	40 c9       	lddsp	r9,sp[0x30]
800096ae:	58 19       	cp.w	r9,1
800096b0:	e0 89 00 14 	brgt	800096d8 <_dtoa_r+0x880>
800096b4:	40 38       	lddsp	r8,sp[0xc]
800096b6:	58 08       	cp.w	r8,0
800096b8:	c1 01       	brne	800096d8 <_dtoa_r+0x880>
800096ba:	40 29       	lddsp	r9,sp[0x8]
800096bc:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800096c0:	c0 c1       	brne	800096d8 <_dtoa_r+0x880>
800096c2:	12 98       	mov	r8,r9
800096c4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800096c8:	c0 80       	breq	800096d8 <_dtoa_r+0x880>
800096ca:	40 4c       	lddsp	r12,sp[0x10]
800096cc:	30 1b       	mov	r11,1
800096ce:	2f fc       	sub	r12,-1
800096d0:	2f f0       	sub	r0,-1
800096d2:	50 4c       	stdsp	sp[0x10],r12
800096d4:	50 6b       	stdsp	sp[0x18],r11
800096d6:	c0 38       	rjmp	800096dc <_dtoa_r+0x884>
800096d8:	30 0a       	mov	r10,0
800096da:	50 6a       	stdsp	sp[0x18],r10
800096dc:	41 19       	lddsp	r9,sp[0x44]
800096de:	58 09       	cp.w	r9,0
800096e0:	c0 31       	brne	800096e6 <_dtoa_r+0x88e>
800096e2:	30 1c       	mov	r12,1
800096e4:	c0 98       	rjmp	800096f6 <_dtoa_r+0x89e>
800096e6:	64 48       	ld.w	r8,r2[0x10]
800096e8:	2f c8       	sub	r8,-4
800096ea:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800096ee:	e0 a0 08 b2 	rcall	8000a852 <__hi0bits>
800096f2:	f8 0c 11 20 	rsub	r12,r12,32
800096f6:	40 4b       	lddsp	r11,sp[0x10]
800096f8:	f8 0b 00 08 	add	r8,r12,r11
800096fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80009700:	c0 c0       	breq	80009718 <_dtoa_r+0x8c0>
80009702:	f0 08 11 20 	rsub	r8,r8,32
80009706:	58 48       	cp.w	r8,4
80009708:	e0 8a 00 06 	brle	80009714 <_dtoa_r+0x8bc>
8000970c:	20 48       	sub	r8,4
8000970e:	10 0b       	add	r11,r8
80009710:	50 4b       	stdsp	sp[0x10],r11
80009712:	c0 78       	rjmp	80009720 <_dtoa_r+0x8c8>
80009714:	58 48       	cp.w	r8,4
80009716:	c0 70       	breq	80009724 <_dtoa_r+0x8cc>
80009718:	40 4a       	lddsp	r10,sp[0x10]
8000971a:	2e 48       	sub	r8,-28
8000971c:	10 0a       	add	r10,r8
8000971e:	50 4a       	stdsp	sp[0x10],r10
80009720:	10 00       	add	r0,r8
80009722:	10 05       	add	r5,r8
80009724:	58 00       	cp.w	r0,0
80009726:	e0 8a 00 08 	brle	80009736 <_dtoa_r+0x8de>
8000972a:	06 9b       	mov	r11,r3
8000972c:	00 9a       	mov	r10,r0
8000972e:	0e 9c       	mov	r12,r7
80009730:	e0 a0 0a 2c 	rcall	8000ab88 <__lshift>
80009734:	18 93       	mov	r3,r12
80009736:	40 49       	lddsp	r9,sp[0x10]
80009738:	58 09       	cp.w	r9,0
8000973a:	e0 8a 00 08 	brle	8000974a <_dtoa_r+0x8f2>
8000973e:	04 9b       	mov	r11,r2
80009740:	12 9a       	mov	r10,r9
80009742:	0e 9c       	mov	r12,r7
80009744:	e0 a0 0a 22 	rcall	8000ab88 <__lshift>
80009748:	18 92       	mov	r2,r12
8000974a:	41 48       	lddsp	r8,sp[0x50]
8000974c:	58 08       	cp.w	r8,0
8000974e:	c1 b0       	breq	80009784 <_dtoa_r+0x92c>
80009750:	04 9b       	mov	r11,r2
80009752:	06 9c       	mov	r12,r3
80009754:	e0 a0 08 f6 	rcall	8000a940 <__mcmp>
80009758:	c1 64       	brge	80009784 <_dtoa_r+0x92c>
8000975a:	06 9b       	mov	r11,r3
8000975c:	30 09       	mov	r9,0
8000975e:	30 aa       	mov	r10,10
80009760:	0e 9c       	mov	r12,r7
80009762:	e0 a0 0a df 	rcall	8000ad20 <__multadd>
80009766:	20 16       	sub	r6,1
80009768:	18 93       	mov	r3,r12
8000976a:	40 dc       	lddsp	r12,sp[0x34]
8000976c:	58 0c       	cp.w	r12,0
8000976e:	c0 31       	brne	80009774 <_dtoa_r+0x91c>
80009770:	40 91       	lddsp	r1,sp[0x24]
80009772:	c0 98       	rjmp	80009784 <_dtoa_r+0x92c>
80009774:	08 9b       	mov	r11,r4
80009776:	40 91       	lddsp	r1,sp[0x24]
80009778:	30 09       	mov	r9,0
8000977a:	30 aa       	mov	r10,10
8000977c:	0e 9c       	mov	r12,r7
8000977e:	e0 a0 0a d1 	rcall	8000ad20 <__multadd>
80009782:	18 94       	mov	r4,r12
80009784:	58 01       	cp.w	r1,0
80009786:	5f a9       	srle	r9
80009788:	40 cb       	lddsp	r11,sp[0x30]
8000978a:	58 2b       	cp.w	r11,2
8000978c:	5f 98       	srgt	r8
8000978e:	f3 e8 00 08 	and	r8,r9,r8
80009792:	c2 50       	breq	800097dc <_dtoa_r+0x984>
80009794:	58 01       	cp.w	r1,0
80009796:	c1 11       	brne	800097b8 <_dtoa_r+0x960>
80009798:	04 9b       	mov	r11,r2
8000979a:	02 99       	mov	r9,r1
8000979c:	30 5a       	mov	r10,5
8000979e:	0e 9c       	mov	r12,r7
800097a0:	e0 a0 0a c0 	rcall	8000ad20 <__multadd>
800097a4:	18 92       	mov	r2,r12
800097a6:	18 9b       	mov	r11,r12
800097a8:	06 9c       	mov	r12,r3
800097aa:	e0 a0 08 cb 	rcall	8000a940 <__mcmp>
800097ae:	e0 89 00 0f 	brgt	800097cc <_dtoa_r+0x974>
800097b2:	c0 38       	rjmp	800097b8 <_dtoa_r+0x960>
800097b4:	30 02       	mov	r2,0
800097b6:	04 94       	mov	r4,r2
800097b8:	40 ea       	lddsp	r10,sp[0x38]
800097ba:	30 09       	mov	r9,0
800097bc:	5c da       	com	r10
800097be:	40 85       	lddsp	r5,sp[0x20]
800097c0:	50 6a       	stdsp	sp[0x18],r10
800097c2:	50 49       	stdsp	sp[0x10],r9
800097c4:	c0 f9       	rjmp	800099e2 <_dtoa_r+0xb8a>
800097c6:	08 92       	mov	r2,r4
800097c8:	40 66       	lddsp	r6,sp[0x18]
800097ca:	04 94       	mov	r4,r2
800097cc:	2f f6       	sub	r6,-1
800097ce:	50 66       	stdsp	sp[0x18],r6
800097d0:	33 18       	mov	r8,49
800097d2:	40 85       	lddsp	r5,sp[0x20]
800097d4:	0a c8       	st.b	r5++,r8
800097d6:	30 08       	mov	r8,0
800097d8:	50 48       	stdsp	sp[0x10],r8
800097da:	c0 49       	rjmp	800099e2 <_dtoa_r+0xb8a>
800097dc:	40 dc       	lddsp	r12,sp[0x34]
800097de:	58 0c       	cp.w	r12,0
800097e0:	e0 80 00 b5 	breq	8000994a <_dtoa_r+0xaf2>
800097e4:	58 05       	cp.w	r5,0
800097e6:	e0 8a 00 08 	brle	800097f6 <_dtoa_r+0x99e>
800097ea:	08 9b       	mov	r11,r4
800097ec:	0a 9a       	mov	r10,r5
800097ee:	0e 9c       	mov	r12,r7
800097f0:	e0 a0 09 cc 	rcall	8000ab88 <__lshift>
800097f4:	18 94       	mov	r4,r12
800097f6:	40 6b       	lddsp	r11,sp[0x18]
800097f8:	58 0b       	cp.w	r11,0
800097fa:	c0 31       	brne	80009800 <_dtoa_r+0x9a8>
800097fc:	08 9c       	mov	r12,r4
800097fe:	c1 38       	rjmp	80009824 <_dtoa_r+0x9cc>
80009800:	68 1b       	ld.w	r11,r4[0x4]
80009802:	0e 9c       	mov	r12,r7
80009804:	e0 a0 08 d2 	rcall	8000a9a8 <_Balloc>
80009808:	68 4a       	ld.w	r10,r4[0x10]
8000980a:	18 95       	mov	r5,r12
8000980c:	e8 cb ff f4 	sub	r11,r4,-12
80009810:	2f ea       	sub	r10,-2
80009812:	2f 4c       	sub	r12,-12
80009814:	a3 6a       	lsl	r10,0x2
80009816:	e0 a0 07 52 	rcall	8000a6ba <memcpy>
8000981a:	0a 9b       	mov	r11,r5
8000981c:	30 1a       	mov	r10,1
8000981e:	0e 9c       	mov	r12,r7
80009820:	e0 a0 09 b4 	rcall	8000ab88 <__lshift>
80009824:	50 44       	stdsp	sp[0x10],r4
80009826:	40 3a       	lddsp	r10,sp[0xc]
80009828:	30 19       	mov	r9,1
8000982a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000982e:	18 94       	mov	r4,r12
80009830:	50 da       	stdsp	sp[0x34],r10
80009832:	40 85       	lddsp	r5,sp[0x20]
80009834:	50 99       	stdsp	sp[0x24],r9
80009836:	50 26       	stdsp	sp[0x8],r6
80009838:	50 e1       	stdsp	sp[0x38],r1
8000983a:	04 9b       	mov	r11,r2
8000983c:	06 9c       	mov	r12,r3
8000983e:	fe b0 fa 7d 	rcall	80008d38 <quorem>
80009842:	40 4b       	lddsp	r11,sp[0x10]
80009844:	f8 c0 ff d0 	sub	r0,r12,-48
80009848:	06 9c       	mov	r12,r3
8000984a:	e0 a0 08 7b 	rcall	8000a940 <__mcmp>
8000984e:	08 9a       	mov	r10,r4
80009850:	50 6c       	stdsp	sp[0x18],r12
80009852:	04 9b       	mov	r11,r2
80009854:	0e 9c       	mov	r12,r7
80009856:	e0 a0 09 31 	rcall	8000aab8 <__mdiff>
8000985a:	18 91       	mov	r1,r12
8000985c:	78 38       	ld.w	r8,r12[0xc]
8000985e:	58 08       	cp.w	r8,0
80009860:	c0 30       	breq	80009866 <_dtoa_r+0xa0e>
80009862:	30 16       	mov	r6,1
80009864:	c0 68       	rjmp	80009870 <_dtoa_r+0xa18>
80009866:	18 9b       	mov	r11,r12
80009868:	06 9c       	mov	r12,r3
8000986a:	e0 a0 08 6b 	rcall	8000a940 <__mcmp>
8000986e:	18 96       	mov	r6,r12
80009870:	0e 9c       	mov	r12,r7
80009872:	02 9b       	mov	r11,r1
80009874:	e0 a0 08 80 	rcall	8000a974 <_Bfree>
80009878:	40 cc       	lddsp	r12,sp[0x30]
8000987a:	ed ec 10 08 	or	r8,r6,r12
8000987e:	c0 d1       	brne	80009898 <_dtoa_r+0xa40>
80009880:	40 db       	lddsp	r11,sp[0x34]
80009882:	58 0b       	cp.w	r11,0
80009884:	c0 a1       	brne	80009898 <_dtoa_r+0xa40>
80009886:	40 26       	lddsp	r6,sp[0x8]
80009888:	e0 40 00 39 	cp.w	r0,57
8000988c:	c3 00       	breq	800098ec <_dtoa_r+0xa94>
8000988e:	40 6a       	lddsp	r10,sp[0x18]
80009890:	58 0a       	cp.w	r10,0
80009892:	e0 89 00 24 	brgt	800098da <_dtoa_r+0xa82>
80009896:	c2 f8       	rjmp	800098f4 <_dtoa_r+0xa9c>
80009898:	40 69       	lddsp	r9,sp[0x18]
8000989a:	58 09       	cp.w	r9,0
8000989c:	c0 85       	brlt	800098ac <_dtoa_r+0xa54>
8000989e:	12 98       	mov	r8,r9
800098a0:	40 cc       	lddsp	r12,sp[0x30]
800098a2:	18 48       	or	r8,r12
800098a4:	c1 d1       	brne	800098de <_dtoa_r+0xa86>
800098a6:	40 db       	lddsp	r11,sp[0x34]
800098a8:	58 0b       	cp.w	r11,0
800098aa:	c1 a1       	brne	800098de <_dtoa_r+0xa86>
800098ac:	0c 99       	mov	r9,r6
800098ae:	40 26       	lddsp	r6,sp[0x8]
800098b0:	58 09       	cp.w	r9,0
800098b2:	e0 8a 00 21 	brle	800098f4 <_dtoa_r+0xa9c>
800098b6:	06 9b       	mov	r11,r3
800098b8:	30 1a       	mov	r10,1
800098ba:	0e 9c       	mov	r12,r7
800098bc:	e0 a0 09 66 	rcall	8000ab88 <__lshift>
800098c0:	04 9b       	mov	r11,r2
800098c2:	18 93       	mov	r3,r12
800098c4:	e0 a0 08 3e 	rcall	8000a940 <__mcmp>
800098c8:	e0 89 00 06 	brgt	800098d4 <_dtoa_r+0xa7c>
800098cc:	c1 41       	brne	800098f4 <_dtoa_r+0xa9c>
800098ce:	ed b0 00 00 	bld	r0,0x0
800098d2:	c1 11       	brne	800098f4 <_dtoa_r+0xa9c>
800098d4:	e0 40 00 39 	cp.w	r0,57
800098d8:	c0 a0       	breq	800098ec <_dtoa_r+0xa94>
800098da:	2f f0       	sub	r0,-1
800098dc:	c0 c8       	rjmp	800098f4 <_dtoa_r+0xa9c>
800098de:	58 06       	cp.w	r6,0
800098e0:	e0 8a 00 0c 	brle	800098f8 <_dtoa_r+0xaa0>
800098e4:	40 26       	lddsp	r6,sp[0x8]
800098e6:	e0 40 00 39 	cp.w	r0,57
800098ea:	c0 41       	brne	800098f2 <_dtoa_r+0xa9a>
800098ec:	33 98       	mov	r8,57
800098ee:	0a c8       	st.b	r5++,r8
800098f0:	c6 78       	rjmp	800099be <_dtoa_r+0xb66>
800098f2:	2f f0       	sub	r0,-1
800098f4:	0a c0       	st.b	r5++,r0
800098f6:	c7 58       	rjmp	800099e0 <_dtoa_r+0xb88>
800098f8:	0a c0       	st.b	r5++,r0
800098fa:	40 9a       	lddsp	r10,sp[0x24]
800098fc:	40 e9       	lddsp	r9,sp[0x38]
800098fe:	12 3a       	cp.w	r10,r9
80009900:	c4 30       	breq	80009986 <_dtoa_r+0xb2e>
80009902:	06 9b       	mov	r11,r3
80009904:	30 09       	mov	r9,0
80009906:	30 aa       	mov	r10,10
80009908:	0e 9c       	mov	r12,r7
8000990a:	e0 a0 0a 0b 	rcall	8000ad20 <__multadd>
8000990e:	40 48       	lddsp	r8,sp[0x10]
80009910:	18 93       	mov	r3,r12
80009912:	08 38       	cp.w	r8,r4
80009914:	c0 91       	brne	80009926 <_dtoa_r+0xace>
80009916:	10 9b       	mov	r11,r8
80009918:	30 09       	mov	r9,0
8000991a:	30 aa       	mov	r10,10
8000991c:	0e 9c       	mov	r12,r7
8000991e:	e0 a0 0a 01 	rcall	8000ad20 <__multadd>
80009922:	50 4c       	stdsp	sp[0x10],r12
80009924:	c0 e8       	rjmp	80009940 <_dtoa_r+0xae8>
80009926:	40 4b       	lddsp	r11,sp[0x10]
80009928:	30 09       	mov	r9,0
8000992a:	30 aa       	mov	r10,10
8000992c:	0e 9c       	mov	r12,r7
8000992e:	e0 a0 09 f9 	rcall	8000ad20 <__multadd>
80009932:	08 9b       	mov	r11,r4
80009934:	50 4c       	stdsp	sp[0x10],r12
80009936:	30 09       	mov	r9,0
80009938:	30 aa       	mov	r10,10
8000993a:	0e 9c       	mov	r12,r7
8000993c:	e0 a0 09 f2 	rcall	8000ad20 <__multadd>
80009940:	18 94       	mov	r4,r12
80009942:	40 9c       	lddsp	r12,sp[0x24]
80009944:	2f fc       	sub	r12,-1
80009946:	50 9c       	stdsp	sp[0x24],r12
80009948:	c7 9b       	rjmp	8000983a <_dtoa_r+0x9e2>
8000994a:	30 18       	mov	r8,1
8000994c:	06 90       	mov	r0,r3
8000994e:	40 85       	lddsp	r5,sp[0x20]
80009950:	08 93       	mov	r3,r4
80009952:	0c 94       	mov	r4,r6
80009954:	10 96       	mov	r6,r8
80009956:	04 9b       	mov	r11,r2
80009958:	00 9c       	mov	r12,r0
8000995a:	fe b0 f9 ef 	rcall	80008d38 <quorem>
8000995e:	2d 0c       	sub	r12,-48
80009960:	0a cc       	st.b	r5++,r12
80009962:	02 36       	cp.w	r6,r1
80009964:	c0 a4       	brge	80009978 <_dtoa_r+0xb20>
80009966:	00 9b       	mov	r11,r0
80009968:	30 09       	mov	r9,0
8000996a:	30 aa       	mov	r10,10
8000996c:	0e 9c       	mov	r12,r7
8000996e:	2f f6       	sub	r6,-1
80009970:	e0 a0 09 d8 	rcall	8000ad20 <__multadd>
80009974:	18 90       	mov	r0,r12
80009976:	cf 0b       	rjmp	80009956 <_dtoa_r+0xafe>
80009978:	08 96       	mov	r6,r4
8000997a:	30 0b       	mov	r11,0
8000997c:	06 94       	mov	r4,r3
8000997e:	50 4b       	stdsp	sp[0x10],r11
80009980:	00 93       	mov	r3,r0
80009982:	18 90       	mov	r0,r12
80009984:	c0 28       	rjmp	80009988 <_dtoa_r+0xb30>
80009986:	40 26       	lddsp	r6,sp[0x8]
80009988:	06 9b       	mov	r11,r3
8000998a:	30 1a       	mov	r10,1
8000998c:	0e 9c       	mov	r12,r7
8000998e:	e0 a0 08 fd 	rcall	8000ab88 <__lshift>
80009992:	04 9b       	mov	r11,r2
80009994:	18 93       	mov	r3,r12
80009996:	e0 a0 07 d5 	rcall	8000a940 <__mcmp>
8000999a:	e0 89 00 12 	brgt	800099be <_dtoa_r+0xb66>
8000999e:	c1 b1       	brne	800099d4 <_dtoa_r+0xb7c>
800099a0:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800099a4:	c0 d1       	brne	800099be <_dtoa_r+0xb66>
800099a6:	c1 78       	rjmp	800099d4 <_dtoa_r+0xb7c>
800099a8:	40 89       	lddsp	r9,sp[0x20]
800099aa:	12 38       	cp.w	r8,r9
800099ac:	c0 30       	breq	800099b2 <_dtoa_r+0xb5a>
800099ae:	10 95       	mov	r5,r8
800099b0:	c0 88       	rjmp	800099c0 <_dtoa_r+0xb68>
800099b2:	2f f6       	sub	r6,-1
800099b4:	50 66       	stdsp	sp[0x18],r6
800099b6:	33 18       	mov	r8,49
800099b8:	40 8c       	lddsp	r12,sp[0x20]
800099ba:	b8 88       	st.b	r12[0x0],r8
800099bc:	c1 38       	rjmp	800099e2 <_dtoa_r+0xb8a>
800099be:	33 9a       	mov	r10,57
800099c0:	0a 98       	mov	r8,r5
800099c2:	11 79       	ld.ub	r9,--r8
800099c4:	f4 09 18 00 	cp.b	r9,r10
800099c8:	cf 00       	breq	800099a8 <_dtoa_r+0xb50>
800099ca:	2f f9       	sub	r9,-1
800099cc:	b0 89       	st.b	r8[0x0],r9
800099ce:	c0 98       	rjmp	800099e0 <_dtoa_r+0xb88>
800099d0:	10 95       	mov	r5,r8
800099d2:	c0 28       	rjmp	800099d6 <_dtoa_r+0xb7e>
800099d4:	33 09       	mov	r9,48
800099d6:	0a 98       	mov	r8,r5
800099d8:	11 7a       	ld.ub	r10,--r8
800099da:	f2 0a 18 00 	cp.b	r10,r9
800099de:	cf 90       	breq	800099d0 <_dtoa_r+0xb78>
800099e0:	50 66       	stdsp	sp[0x18],r6
800099e2:	04 9b       	mov	r11,r2
800099e4:	0e 9c       	mov	r12,r7
800099e6:	e0 a0 07 c7 	rcall	8000a974 <_Bfree>
800099ea:	58 04       	cp.w	r4,0
800099ec:	c1 20       	breq	80009a10 <_dtoa_r+0xbb8>
800099ee:	40 4b       	lddsp	r11,sp[0x10]
800099f0:	08 3b       	cp.w	r11,r4
800099f2:	5f 19       	srne	r9
800099f4:	58 0b       	cp.w	r11,0
800099f6:	5f 18       	srne	r8
800099f8:	f3 e8 00 08 	and	r8,r9,r8
800099fc:	c0 40       	breq	80009a04 <_dtoa_r+0xbac>
800099fe:	0e 9c       	mov	r12,r7
80009a00:	e0 a0 07 ba 	rcall	8000a974 <_Bfree>
80009a04:	08 9b       	mov	r11,r4
80009a06:	0e 9c       	mov	r12,r7
80009a08:	e0 a0 07 b6 	rcall	8000a974 <_Bfree>
80009a0c:	c0 28       	rjmp	80009a10 <_dtoa_r+0xbb8>
80009a0e:	50 66       	stdsp	sp[0x18],r6
80009a10:	0e 9c       	mov	r12,r7
80009a12:	06 9b       	mov	r11,r3
80009a14:	e0 a0 07 b0 	rcall	8000a974 <_Bfree>
80009a18:	30 08       	mov	r8,0
80009a1a:	aa 88       	st.b	r5[0x0],r8
80009a1c:	40 68       	lddsp	r8,sp[0x18]
80009a1e:	41 5a       	lddsp	r10,sp[0x54]
80009a20:	2f f8       	sub	r8,-1
80009a22:	41 29       	lddsp	r9,sp[0x48]
80009a24:	95 08       	st.w	r10[0x0],r8
80009a26:	40 8c       	lddsp	r12,sp[0x20]
80009a28:	58 09       	cp.w	r9,0
80009a2a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80009a2e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80009a32:	2e 6d       	sub	sp,-104
80009a34:	d8 32       	popm	r0-r7,pc
80009a36:	d7 03       	nop

80009a38 <_fflush_r>:
80009a38:	d4 21       	pushm	r4-r7,lr
80009a3a:	16 97       	mov	r7,r11
80009a3c:	18 96       	mov	r6,r12
80009a3e:	76 48       	ld.w	r8,r11[0x10]
80009a40:	58 08       	cp.w	r8,0
80009a42:	c7 c0       	breq	80009b3a <_fflush_r+0x102>
80009a44:	58 0c       	cp.w	r12,0
80009a46:	c0 50       	breq	80009a50 <_fflush_r+0x18>
80009a48:	78 68       	ld.w	r8,r12[0x18]
80009a4a:	58 08       	cp.w	r8,0
80009a4c:	c0 21       	brne	80009a50 <_fflush_r+0x18>
80009a4e:	cd 1c       	rcall	80009bf0 <__sinit>
80009a50:	4b b8       	lddpc	r8,80009b3c <_fflush_r+0x104>
80009a52:	10 37       	cp.w	r7,r8
80009a54:	c0 31       	brne	80009a5a <_fflush_r+0x22>
80009a56:	6c 07       	ld.w	r7,r6[0x0]
80009a58:	c0 a8       	rjmp	80009a6c <_fflush_r+0x34>
80009a5a:	4b a8       	lddpc	r8,80009b40 <_fflush_r+0x108>
80009a5c:	10 37       	cp.w	r7,r8
80009a5e:	c0 31       	brne	80009a64 <_fflush_r+0x2c>
80009a60:	6c 17       	ld.w	r7,r6[0x4]
80009a62:	c0 58       	rjmp	80009a6c <_fflush_r+0x34>
80009a64:	4b 88       	lddpc	r8,80009b44 <_fflush_r+0x10c>
80009a66:	10 37       	cp.w	r7,r8
80009a68:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80009a6c:	8e 6a       	ld.sh	r10,r7[0xc]
80009a6e:	14 98       	mov	r8,r10
80009a70:	ed ba 00 03 	bld	r10,0x3
80009a74:	c4 20       	breq	80009af8 <_fflush_r+0xc0>
80009a76:	ab ba       	sbr	r10,0xb
80009a78:	ae 6a       	st.h	r7[0xc],r10
80009a7a:	6e 18       	ld.w	r8,r7[0x4]
80009a7c:	58 08       	cp.w	r8,0
80009a7e:	e0 89 00 06 	brgt	80009a8a <_fflush_r+0x52>
80009a82:	6f 08       	ld.w	r8,r7[0x40]
80009a84:	58 08       	cp.w	r8,0
80009a86:	e0 8a 00 5a 	brle	80009b3a <_fflush_r+0x102>
80009a8a:	6e b8       	ld.w	r8,r7[0x2c]
80009a8c:	58 08       	cp.w	r8,0
80009a8e:	c5 60       	breq	80009b3a <_fflush_r+0x102>
80009a90:	e2 1a 10 00 	andl	r10,0x1000,COH
80009a94:	c0 30       	breq	80009a9a <_fflush_r+0x62>
80009a96:	6f 55       	ld.w	r5,r7[0x54]
80009a98:	c0 f8       	rjmp	80009ab6 <_fflush_r+0x7e>
80009a9a:	30 19       	mov	r9,1
80009a9c:	6e 8b       	ld.w	r11,r7[0x20]
80009a9e:	0c 9c       	mov	r12,r6
80009aa0:	5d 18       	icall	r8
80009aa2:	18 95       	mov	r5,r12
80009aa4:	5b fc       	cp.w	r12,-1
80009aa6:	c0 81       	brne	80009ab6 <_fflush_r+0x7e>
80009aa8:	6c 38       	ld.w	r8,r6[0xc]
80009aaa:	59 d8       	cp.w	r8,29
80009aac:	c4 70       	breq	80009b3a <_fflush_r+0x102>
80009aae:	8e 68       	ld.sh	r8,r7[0xc]
80009ab0:	a7 a8       	sbr	r8,0x6
80009ab2:	ae 68       	st.h	r7[0xc],r8
80009ab4:	d8 22       	popm	r4-r7,pc
80009ab6:	8e 68       	ld.sh	r8,r7[0xc]
80009ab8:	ed b8 00 02 	bld	r8,0x2
80009abc:	c0 91       	brne	80009ace <_fflush_r+0x96>
80009abe:	6e 18       	ld.w	r8,r7[0x4]
80009ac0:	10 15       	sub	r5,r8
80009ac2:	6e d8       	ld.w	r8,r7[0x34]
80009ac4:	58 08       	cp.w	r8,0
80009ac6:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80009aca:	eb d8 e1 15 	subne	r5,r5,r8
80009ace:	6e b8       	ld.w	r8,r7[0x2c]
80009ad0:	0c 9c       	mov	r12,r6
80009ad2:	30 09       	mov	r9,0
80009ad4:	0a 9a       	mov	r10,r5
80009ad6:	6e 8b       	ld.w	r11,r7[0x20]
80009ad8:	5d 18       	icall	r8
80009ada:	8e 68       	ld.sh	r8,r7[0xc]
80009adc:	0a 3c       	cp.w	r12,r5
80009ade:	c2 61       	brne	80009b2a <_fflush_r+0xf2>
80009ae0:	ab d8       	cbr	r8,0xb
80009ae2:	30 0c       	mov	r12,0
80009ae4:	6e 49       	ld.w	r9,r7[0x10]
80009ae6:	ae 68       	st.h	r7[0xc],r8
80009ae8:	8f 1c       	st.w	r7[0x4],r12
80009aea:	8f 09       	st.w	r7[0x0],r9
80009aec:	ed b8 00 0c 	bld	r8,0xc
80009af0:	c2 51       	brne	80009b3a <_fflush_r+0x102>
80009af2:	ef 45 00 54 	st.w	r7[84],r5
80009af6:	d8 22       	popm	r4-r7,pc
80009af8:	6e 45       	ld.w	r5,r7[0x10]
80009afa:	58 05       	cp.w	r5,0
80009afc:	c1 f0       	breq	80009b3a <_fflush_r+0x102>
80009afe:	6e 04       	ld.w	r4,r7[0x0]
80009b00:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80009b04:	8f 05       	st.w	r7[0x0],r5
80009b06:	f9 b8 01 00 	movne	r8,0
80009b0a:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80009b0e:	0a 14       	sub	r4,r5
80009b10:	8f 28       	st.w	r7[0x8],r8
80009b12:	c1 18       	rjmp	80009b34 <_fflush_r+0xfc>
80009b14:	08 99       	mov	r9,r4
80009b16:	0a 9a       	mov	r10,r5
80009b18:	6e a8       	ld.w	r8,r7[0x28]
80009b1a:	6e 8b       	ld.w	r11,r7[0x20]
80009b1c:	0c 9c       	mov	r12,r6
80009b1e:	5d 18       	icall	r8
80009b20:	18 14       	sub	r4,r12
80009b22:	58 0c       	cp.w	r12,0
80009b24:	e0 89 00 07 	brgt	80009b32 <_fflush_r+0xfa>
80009b28:	8e 68       	ld.sh	r8,r7[0xc]
80009b2a:	a7 a8       	sbr	r8,0x6
80009b2c:	3f fc       	mov	r12,-1
80009b2e:	ae 68       	st.h	r7[0xc],r8
80009b30:	d8 22       	popm	r4-r7,pc
80009b32:	18 05       	add	r5,r12
80009b34:	58 04       	cp.w	r4,0
80009b36:	fe 99 ff ef 	brgt	80009b14 <_fflush_r+0xdc>
80009b3a:	d8 2a       	popm	r4-r7,pc,r12=0
80009b3c:	80 00       	ld.sh	r0,r0[0x0]
80009b3e:	d3 cc       	*unknown*
80009b40:	80 00       	ld.sh	r0,r0[0x0]
80009b42:	d3 ec       	*unknown*
80009b44:	80 00       	ld.sh	r0,r0[0x0]
80009b46:	d4 0c       	*unknown*

80009b48 <__sfp_lock_acquire>:
80009b48:	5e fc       	retal	r12

80009b4a <__sfp_lock_release>:
80009b4a:	5e fc       	retal	r12

80009b4c <_cleanup_r>:
80009b4c:	d4 01       	pushm	lr
80009b4e:	fe cb e6 ee 	sub	r11,pc,-6418
80009b52:	e0 a0 03 03 	rcall	8000a158 <_fwalk>
80009b56:	d8 02       	popm	pc

80009b58 <__sfmoreglue>:
80009b58:	d4 21       	pushm	r4-r7,lr
80009b5a:	16 95       	mov	r5,r11
80009b5c:	f6 06 10 5c 	mul	r6,r11,92
80009b60:	ec cb ff f4 	sub	r11,r6,-12
80009b64:	e0 a0 03 8a 	rcall	8000a278 <_malloc_r>
80009b68:	18 97       	mov	r7,r12
80009b6a:	c0 90       	breq	80009b7c <__sfmoreglue+0x24>
80009b6c:	99 15       	st.w	r12[0x4],r5
80009b6e:	30 0b       	mov	r11,0
80009b70:	2f 4c       	sub	r12,-12
80009b72:	0c 9a       	mov	r10,r6
80009b74:	8f 2c       	st.w	r7[0x8],r12
80009b76:	8f 0b       	st.w	r7[0x0],r11
80009b78:	e0 a0 06 64 	rcall	8000a840 <memset>
80009b7c:	0e 9c       	mov	r12,r7
80009b7e:	d8 22       	popm	r4-r7,pc

80009b80 <__sfp>:
80009b80:	d4 21       	pushm	r4-r7,lr
80009b82:	49 b8       	lddpc	r8,80009bec <__sfp+0x6c>
80009b84:	18 96       	mov	r6,r12
80009b86:	70 07       	ld.w	r7,r8[0x0]
80009b88:	6e 68       	ld.w	r8,r7[0x18]
80009b8a:	58 08       	cp.w	r8,0
80009b8c:	c0 31       	brne	80009b92 <__sfp+0x12>
80009b8e:	0e 9c       	mov	r12,r7
80009b90:	c3 0c       	rcall	80009bf0 <__sinit>
80009b92:	ee c7 ff 28 	sub	r7,r7,-216
80009b96:	30 05       	mov	r5,0
80009b98:	6e 2c       	ld.w	r12,r7[0x8]
80009b9a:	6e 18       	ld.w	r8,r7[0x4]
80009b9c:	c0 68       	rjmp	80009ba8 <__sfp+0x28>
80009b9e:	98 69       	ld.sh	r9,r12[0xc]
80009ba0:	ea 09 19 00 	cp.h	r9,r5
80009ba4:	c1 10       	breq	80009bc6 <__sfp+0x46>
80009ba6:	2a 4c       	sub	r12,-92
80009ba8:	20 18       	sub	r8,1
80009baa:	cf a7       	brpl	80009b9e <__sfp+0x1e>
80009bac:	6e 08       	ld.w	r8,r7[0x0]
80009bae:	58 08       	cp.w	r8,0
80009bb0:	c0 61       	brne	80009bbc <__sfp+0x3c>
80009bb2:	30 4b       	mov	r11,4
80009bb4:	0c 9c       	mov	r12,r6
80009bb6:	cd 1f       	rcall	80009b58 <__sfmoreglue>
80009bb8:	8f 0c       	st.w	r7[0x0],r12
80009bba:	c0 30       	breq	80009bc0 <__sfp+0x40>
80009bbc:	6e 07       	ld.w	r7,r7[0x0]
80009bbe:	ce db       	rjmp	80009b98 <__sfp+0x18>
80009bc0:	30 c8       	mov	r8,12
80009bc2:	8d 38       	st.w	r6[0xc],r8
80009bc4:	d8 22       	popm	r4-r7,pc
80009bc6:	30 08       	mov	r8,0
80009bc8:	f9 48 00 4c 	st.w	r12[76],r8
80009bcc:	99 08       	st.w	r12[0x0],r8
80009bce:	99 28       	st.w	r12[0x8],r8
80009bd0:	99 18       	st.w	r12[0x4],r8
80009bd2:	99 48       	st.w	r12[0x10],r8
80009bd4:	99 58       	st.w	r12[0x14],r8
80009bd6:	99 68       	st.w	r12[0x18],r8
80009bd8:	99 d8       	st.w	r12[0x34],r8
80009bda:	99 e8       	st.w	r12[0x38],r8
80009bdc:	f9 48 00 48 	st.w	r12[72],r8
80009be0:	3f f8       	mov	r8,-1
80009be2:	b8 78       	st.h	r12[0xe],r8
80009be4:	30 18       	mov	r8,1
80009be6:	b8 68       	st.h	r12[0xc],r8
80009be8:	d8 22       	popm	r4-r7,pc
80009bea:	d7 03       	nop
80009bec:	80 00       	ld.sh	r0,r0[0x0]
80009bee:	d4 30       	acall	0x43

80009bf0 <__sinit>:
80009bf0:	d4 21       	pushm	r4-r7,lr
80009bf2:	18 96       	mov	r6,r12
80009bf4:	78 67       	ld.w	r7,r12[0x18]
80009bf6:	58 07       	cp.w	r7,0
80009bf8:	c4 91       	brne	80009c8a <__sinit+0x9a>
80009bfa:	fe c8 00 ae 	sub	r8,pc,174
80009bfe:	30 15       	mov	r5,1
80009c00:	99 a8       	st.w	r12[0x28],r8
80009c02:	f9 47 00 d8 	st.w	r12[216],r7
80009c06:	f9 47 00 dc 	st.w	r12[220],r7
80009c0a:	f9 47 00 e0 	st.w	r12[224],r7
80009c0e:	99 65       	st.w	r12[0x18],r5
80009c10:	cb 8f       	rcall	80009b80 <__sfp>
80009c12:	8d 0c       	st.w	r6[0x0],r12
80009c14:	0c 9c       	mov	r12,r6
80009c16:	cb 5f       	rcall	80009b80 <__sfp>
80009c18:	8d 1c       	st.w	r6[0x4],r12
80009c1a:	0c 9c       	mov	r12,r6
80009c1c:	cb 2f       	rcall	80009b80 <__sfp>
80009c1e:	6c 09       	ld.w	r9,r6[0x0]
80009c20:	30 48       	mov	r8,4
80009c22:	93 07       	st.w	r9[0x0],r7
80009c24:	b2 68       	st.h	r9[0xc],r8
80009c26:	93 17       	st.w	r9[0x4],r7
80009c28:	93 27       	st.w	r9[0x8],r7
80009c2a:	6c 18       	ld.w	r8,r6[0x4]
80009c2c:	b2 77       	st.h	r9[0xe],r7
80009c2e:	93 47       	st.w	r9[0x10],r7
80009c30:	93 57       	st.w	r9[0x14],r7
80009c32:	93 67       	st.w	r9[0x18],r7
80009c34:	93 89       	st.w	r9[0x20],r9
80009c36:	91 07       	st.w	r8[0x0],r7
80009c38:	91 17       	st.w	r8[0x4],r7
80009c3a:	91 27       	st.w	r8[0x8],r7
80009c3c:	fe ce ea 90 	sub	lr,pc,-5488
80009c40:	fe cb ea c0 	sub	r11,pc,-5440
80009c44:	93 9e       	st.w	r9[0x24],lr
80009c46:	93 ab       	st.w	r9[0x28],r11
80009c48:	fe ca ea e8 	sub	r10,pc,-5400
80009c4c:	fe c4 ea f4 	sub	r4,pc,-5388
80009c50:	93 ba       	st.w	r9[0x2c],r10
80009c52:	93 c4       	st.w	r9[0x30],r4
80009c54:	30 99       	mov	r9,9
80009c56:	b0 69       	st.h	r8[0xc],r9
80009c58:	b0 75       	st.h	r8[0xe],r5
80009c5a:	91 c4       	st.w	r8[0x30],r4
80009c5c:	91 47       	st.w	r8[0x10],r7
80009c5e:	91 57       	st.w	r8[0x14],r7
80009c60:	91 67       	st.w	r8[0x18],r7
80009c62:	91 88       	st.w	r8[0x20],r8
80009c64:	91 9e       	st.w	r8[0x24],lr
80009c66:	91 ab       	st.w	r8[0x28],r11
80009c68:	91 ba       	st.w	r8[0x2c],r10
80009c6a:	8d 2c       	st.w	r6[0x8],r12
80009c6c:	31 28       	mov	r8,18
80009c6e:	99 07       	st.w	r12[0x0],r7
80009c70:	b8 68       	st.h	r12[0xc],r8
80009c72:	99 17       	st.w	r12[0x4],r7
80009c74:	99 27       	st.w	r12[0x8],r7
80009c76:	30 28       	mov	r8,2
80009c78:	b8 78       	st.h	r12[0xe],r8
80009c7a:	99 c4       	st.w	r12[0x30],r4
80009c7c:	99 67       	st.w	r12[0x18],r7
80009c7e:	99 9e       	st.w	r12[0x24],lr
80009c80:	99 ab       	st.w	r12[0x28],r11
80009c82:	99 ba       	st.w	r12[0x2c],r10
80009c84:	99 47       	st.w	r12[0x10],r7
80009c86:	99 57       	st.w	r12[0x14],r7
80009c88:	99 8c       	st.w	r12[0x20],r12
80009c8a:	d8 22       	popm	r4-r7,pc

80009c8c <_malloc_trim_r>:
80009c8c:	d4 21       	pushm	r4-r7,lr
80009c8e:	16 95       	mov	r5,r11
80009c90:	18 97       	mov	r7,r12
80009c92:	e0 a0 05 de 	rcall	8000a84e <__malloc_lock>
80009c96:	4a 24       	lddpc	r4,80009d1c <_malloc_trim_r+0x90>
80009c98:	68 28       	ld.w	r8,r4[0x8]
80009c9a:	70 16       	ld.w	r6,r8[0x4]
80009c9c:	e0 16 ff fc 	andl	r6,0xfffc
80009ca0:	ec c8 ff 91 	sub	r8,r6,-111
80009ca4:	f0 05 01 05 	sub	r5,r8,r5
80009ca8:	e0 15 ff 80 	andl	r5,0xff80
80009cac:	ea c5 00 80 	sub	r5,r5,128
80009cb0:	e0 45 00 7f 	cp.w	r5,127
80009cb4:	e0 8a 00 23 	brle	80009cfa <_malloc_trim_r+0x6e>
80009cb8:	30 0b       	mov	r11,0
80009cba:	0e 9c       	mov	r12,r7
80009cbc:	e0 a0 0a 3e 	rcall	8000b138 <_sbrk_r>
80009cc0:	68 28       	ld.w	r8,r4[0x8]
80009cc2:	0c 08       	add	r8,r6
80009cc4:	10 3c       	cp.w	r12,r8
80009cc6:	c1 a1       	brne	80009cfa <_malloc_trim_r+0x6e>
80009cc8:	ea 0b 11 00 	rsub	r11,r5,0
80009ccc:	0e 9c       	mov	r12,r7
80009cce:	e0 a0 0a 35 	rcall	8000b138 <_sbrk_r>
80009cd2:	5b fc       	cp.w	r12,-1
80009cd4:	c1 71       	brne	80009d02 <_malloc_trim_r+0x76>
80009cd6:	30 0b       	mov	r11,0
80009cd8:	0e 9c       	mov	r12,r7
80009cda:	e0 a0 0a 2f 	rcall	8000b138 <_sbrk_r>
80009cde:	68 28       	ld.w	r8,r4[0x8]
80009ce0:	f8 08 01 09 	sub	r9,r12,r8
80009ce4:	58 f9       	cp.w	r9,15
80009ce6:	e0 8a 00 0a 	brle	80009cfa <_malloc_trim_r+0x6e>
80009cea:	a1 a9       	sbr	r9,0x0
80009cec:	91 19       	st.w	r8[0x4],r9
80009cee:	48 d8       	lddpc	r8,80009d20 <_malloc_trim_r+0x94>
80009cf0:	70 09       	ld.w	r9,r8[0x0]
80009cf2:	48 d8       	lddpc	r8,80009d24 <_malloc_trim_r+0x98>
80009cf4:	f8 09 01 09 	sub	r9,r12,r9
80009cf8:	91 09       	st.w	r8[0x0],r9
80009cfa:	0e 9c       	mov	r12,r7
80009cfc:	e0 a0 05 aa 	rcall	8000a850 <__malloc_unlock>
80009d00:	d8 2a       	popm	r4-r7,pc,r12=0
80009d02:	68 28       	ld.w	r8,r4[0x8]
80009d04:	0a 16       	sub	r6,r5
80009d06:	a1 a6       	sbr	r6,0x0
80009d08:	91 16       	st.w	r8[0x4],r6
80009d0a:	48 78       	lddpc	r8,80009d24 <_malloc_trim_r+0x98>
80009d0c:	70 09       	ld.w	r9,r8[0x0]
80009d0e:	0a 19       	sub	r9,r5
80009d10:	0e 9c       	mov	r12,r7
80009d12:	91 09       	st.w	r8[0x0],r9
80009d14:	e0 a0 05 9e 	rcall	8000a850 <__malloc_unlock>
80009d18:	da 2a       	popm	r4-r7,pc,r12=1
80009d1a:	d7 03       	nop
80009d1c:	00 00       	add	r0,r0
80009d1e:	01 00       	ld.w	r0,r0++
80009d20:	00 00       	add	r0,r0
80009d22:	05 0c       	ld.w	r12,r2++
80009d24:	00 00       	add	r0,r0
80009d26:	06 24       	rsub	r4,r3

80009d28 <_free_r>:
80009d28:	d4 21       	pushm	r4-r7,lr
80009d2a:	16 96       	mov	r6,r11
80009d2c:	18 97       	mov	r7,r12
80009d2e:	58 0b       	cp.w	r11,0
80009d30:	e0 80 00 c2 	breq	80009eb4 <_free_r+0x18c>
80009d34:	e0 a0 05 8d 	rcall	8000a84e <__malloc_lock>
80009d38:	20 86       	sub	r6,8
80009d3a:	4c ba       	lddpc	r10,80009e64 <_free_r+0x13c>
80009d3c:	6c 18       	ld.w	r8,r6[0x4]
80009d3e:	74 2e       	ld.w	lr,r10[0x8]
80009d40:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80009d44:	a1 c8       	cbr	r8,0x0
80009d46:	ec 08 00 09 	add	r9,r6,r8
80009d4a:	72 1b       	ld.w	r11,r9[0x4]
80009d4c:	e0 1b ff fc 	andl	r11,0xfffc
80009d50:	1c 39       	cp.w	r9,lr
80009d52:	c1 c1       	brne	80009d8a <_free_r+0x62>
80009d54:	f6 08 00 08 	add	r8,r11,r8
80009d58:	58 0c       	cp.w	r12,0
80009d5a:	c0 81       	brne	80009d6a <_free_r+0x42>
80009d5c:	6c 09       	ld.w	r9,r6[0x0]
80009d5e:	12 16       	sub	r6,r9
80009d60:	12 08       	add	r8,r9
80009d62:	6c 3b       	ld.w	r11,r6[0xc]
80009d64:	6c 29       	ld.w	r9,r6[0x8]
80009d66:	97 29       	st.w	r11[0x8],r9
80009d68:	93 3b       	st.w	r9[0xc],r11
80009d6a:	10 99       	mov	r9,r8
80009d6c:	95 26       	st.w	r10[0x8],r6
80009d6e:	a1 a9       	sbr	r9,0x0
80009d70:	8d 19       	st.w	r6[0x4],r9
80009d72:	4b e9       	lddpc	r9,80009e68 <_free_r+0x140>
80009d74:	72 09       	ld.w	r9,r9[0x0]
80009d76:	12 38       	cp.w	r8,r9
80009d78:	c0 53       	brcs	80009d82 <_free_r+0x5a>
80009d7a:	4b d8       	lddpc	r8,80009e6c <_free_r+0x144>
80009d7c:	0e 9c       	mov	r12,r7
80009d7e:	70 0b       	ld.w	r11,r8[0x0]
80009d80:	c8 6f       	rcall	80009c8c <_malloc_trim_r>
80009d82:	0e 9c       	mov	r12,r7
80009d84:	e0 a0 05 66 	rcall	8000a850 <__malloc_unlock>
80009d88:	d8 22       	popm	r4-r7,pc
80009d8a:	93 1b       	st.w	r9[0x4],r11
80009d8c:	58 0c       	cp.w	r12,0
80009d8e:	c0 30       	breq	80009d94 <_free_r+0x6c>
80009d90:	30 0c       	mov	r12,0
80009d92:	c1 08       	rjmp	80009db2 <_free_r+0x8a>
80009d94:	6c 0e       	ld.w	lr,r6[0x0]
80009d96:	f4 c5 ff f8 	sub	r5,r10,-8
80009d9a:	1c 16       	sub	r6,lr
80009d9c:	1c 08       	add	r8,lr
80009d9e:	6c 2e       	ld.w	lr,r6[0x8]
80009da0:	0a 3e       	cp.w	lr,r5
80009da2:	f9 bc 00 01 	moveq	r12,1
80009da6:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80009daa:	eb fe 1a 02 	st.wne	r5[0x8],lr
80009dae:	fd f5 1a 03 	st.wne	lr[0xc],r5
80009db2:	f2 0b 00 0e 	add	lr,r9,r11
80009db6:	7c 1e       	ld.w	lr,lr[0x4]
80009db8:	ed be 00 00 	bld	lr,0x0
80009dbc:	c1 30       	breq	80009de2 <_free_r+0xba>
80009dbe:	16 08       	add	r8,r11
80009dc0:	58 0c       	cp.w	r12,0
80009dc2:	c0 c1       	brne	80009dda <_free_r+0xb2>
80009dc4:	4a 8e       	lddpc	lr,80009e64 <_free_r+0x13c>
80009dc6:	72 2b       	ld.w	r11,r9[0x8]
80009dc8:	2f 8e       	sub	lr,-8
80009dca:	1c 3b       	cp.w	r11,lr
80009dcc:	c0 71       	brne	80009dda <_free_r+0xb2>
80009dce:	97 36       	st.w	r11[0xc],r6
80009dd0:	97 26       	st.w	r11[0x8],r6
80009dd2:	8d 2b       	st.w	r6[0x8],r11
80009dd4:	8d 3b       	st.w	r6[0xc],r11
80009dd6:	30 1c       	mov	r12,1
80009dd8:	c0 58       	rjmp	80009de2 <_free_r+0xba>
80009dda:	72 2b       	ld.w	r11,r9[0x8]
80009ddc:	72 39       	ld.w	r9,r9[0xc]
80009dde:	93 2b       	st.w	r9[0x8],r11
80009de0:	97 39       	st.w	r11[0xc],r9
80009de2:	10 99       	mov	r9,r8
80009de4:	ec 08 09 08 	st.w	r6[r8],r8
80009de8:	a1 a9       	sbr	r9,0x0
80009dea:	8d 19       	st.w	r6[0x4],r9
80009dec:	58 0c       	cp.w	r12,0
80009dee:	c6 01       	brne	80009eae <_free_r+0x186>
80009df0:	e0 48 01 ff 	cp.w	r8,511
80009df4:	e0 8b 00 13 	brhi	80009e1a <_free_r+0xf2>
80009df8:	a3 98       	lsr	r8,0x3
80009dfa:	f4 08 00 39 	add	r9,r10,r8<<0x3
80009dfe:	72 2b       	ld.w	r11,r9[0x8]
80009e00:	8d 39       	st.w	r6[0xc],r9
80009e02:	8d 2b       	st.w	r6[0x8],r11
80009e04:	97 36       	st.w	r11[0xc],r6
80009e06:	93 26       	st.w	r9[0x8],r6
80009e08:	a3 48       	asr	r8,0x2
80009e0a:	74 19       	ld.w	r9,r10[0x4]
80009e0c:	30 1b       	mov	r11,1
80009e0e:	f6 08 09 48 	lsl	r8,r11,r8
80009e12:	f3 e8 10 08 	or	r8,r9,r8
80009e16:	95 18       	st.w	r10[0x4],r8
80009e18:	c4 b8       	rjmp	80009eae <_free_r+0x186>
80009e1a:	f0 0b 16 09 	lsr	r11,r8,0x9
80009e1e:	58 4b       	cp.w	r11,4
80009e20:	e0 8b 00 06 	brhi	80009e2c <_free_r+0x104>
80009e24:	f0 0b 16 06 	lsr	r11,r8,0x6
80009e28:	2c 8b       	sub	r11,-56
80009e2a:	c2 68       	rjmp	80009e76 <_free_r+0x14e>
80009e2c:	59 4b       	cp.w	r11,20
80009e2e:	e0 8b 00 04 	brhi	80009e36 <_free_r+0x10e>
80009e32:	2a 5b       	sub	r11,-91
80009e34:	c2 18       	rjmp	80009e76 <_free_r+0x14e>
80009e36:	e0 4b 00 54 	cp.w	r11,84
80009e3a:	e0 8b 00 06 	brhi	80009e46 <_free_r+0x11e>
80009e3e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80009e42:	29 2b       	sub	r11,-110
80009e44:	c1 98       	rjmp	80009e76 <_free_r+0x14e>
80009e46:	e0 4b 01 54 	cp.w	r11,340
80009e4a:	e0 8b 00 06 	brhi	80009e56 <_free_r+0x12e>
80009e4e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80009e52:	28 9b       	sub	r11,-119
80009e54:	c1 18       	rjmp	80009e76 <_free_r+0x14e>
80009e56:	e0 4b 05 54 	cp.w	r11,1364
80009e5a:	e0 88 00 0b 	brls	80009e70 <_free_r+0x148>
80009e5e:	37 eb       	mov	r11,126
80009e60:	c0 b8       	rjmp	80009e76 <_free_r+0x14e>
80009e62:	d7 03       	nop
80009e64:	00 00       	add	r0,r0
80009e66:	01 00       	ld.w	r0,r0++
80009e68:	00 00       	add	r0,r0
80009e6a:	05 08       	ld.w	r8,r2++
80009e6c:	00 00       	add	r0,r0
80009e6e:	06 20       	rsub	r0,r3
80009e70:	f0 0b 16 12 	lsr	r11,r8,0x12
80009e74:	28 4b       	sub	r11,-124
80009e76:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009e7a:	78 29       	ld.w	r9,r12[0x8]
80009e7c:	18 39       	cp.w	r9,r12
80009e7e:	c0 e1       	brne	80009e9a <_free_r+0x172>
80009e80:	74 18       	ld.w	r8,r10[0x4]
80009e82:	a3 4b       	asr	r11,0x2
80009e84:	30 1c       	mov	r12,1
80009e86:	f8 0b 09 4b 	lsl	r11,r12,r11
80009e8a:	f1 eb 10 0b 	or	r11,r8,r11
80009e8e:	12 98       	mov	r8,r9
80009e90:	95 1b       	st.w	r10[0x4],r11
80009e92:	c0 a8       	rjmp	80009ea6 <_free_r+0x17e>
80009e94:	72 29       	ld.w	r9,r9[0x8]
80009e96:	18 39       	cp.w	r9,r12
80009e98:	c0 60       	breq	80009ea4 <_free_r+0x17c>
80009e9a:	72 1a       	ld.w	r10,r9[0x4]
80009e9c:	e0 1a ff fc 	andl	r10,0xfffc
80009ea0:	14 38       	cp.w	r8,r10
80009ea2:	cf 93       	brcs	80009e94 <_free_r+0x16c>
80009ea4:	72 38       	ld.w	r8,r9[0xc]
80009ea6:	8d 38       	st.w	r6[0xc],r8
80009ea8:	8d 29       	st.w	r6[0x8],r9
80009eaa:	93 36       	st.w	r9[0xc],r6
80009eac:	91 26       	st.w	r8[0x8],r6
80009eae:	0e 9c       	mov	r12,r7
80009eb0:	e0 a0 04 d0 	rcall	8000a850 <__malloc_unlock>
80009eb4:	d8 22       	popm	r4-r7,pc
80009eb6:	d7 03       	nop

80009eb8 <__sfvwrite_r>:
80009eb8:	d4 31       	pushm	r0-r7,lr
80009eba:	20 3d       	sub	sp,12
80009ebc:	14 94       	mov	r4,r10
80009ebe:	18 95       	mov	r5,r12
80009ec0:	16 97       	mov	r7,r11
80009ec2:	74 28       	ld.w	r8,r10[0x8]
80009ec4:	58 08       	cp.w	r8,0
80009ec6:	e0 80 01 45 	breq	8000a150 <__sfvwrite_r+0x298>
80009eca:	96 68       	ld.sh	r8,r11[0xc]
80009ecc:	ed b8 00 03 	bld	r8,0x3
80009ed0:	c0 41       	brne	80009ed8 <__sfvwrite_r+0x20>
80009ed2:	76 48       	ld.w	r8,r11[0x10]
80009ed4:	58 08       	cp.w	r8,0
80009ed6:	c0 c1       	brne	80009eee <__sfvwrite_r+0x36>
80009ed8:	0e 9b       	mov	r11,r7
80009eda:	0a 9c       	mov	r12,r5
80009edc:	fe b0 f6 c0 	rcall	80008c5c <__swsetup_r>
80009ee0:	c0 70       	breq	80009eee <__sfvwrite_r+0x36>
80009ee2:	8e 68       	ld.sh	r8,r7[0xc]
80009ee4:	a7 a8       	sbr	r8,0x6
80009ee6:	ae 68       	st.h	r7[0xc],r8
80009ee8:	30 98       	mov	r8,9
80009eea:	8b 38       	st.w	r5[0xc],r8
80009eec:	c3 09       	rjmp	8000a14c <__sfvwrite_r+0x294>
80009eee:	8e 63       	ld.sh	r3,r7[0xc]
80009ef0:	68 00       	ld.w	r0,r4[0x0]
80009ef2:	06 96       	mov	r6,r3
80009ef4:	e2 16 00 02 	andl	r6,0x2,COH
80009ef8:	c2 10       	breq	80009f3a <__sfvwrite_r+0x82>
80009efa:	30 03       	mov	r3,0
80009efc:	e0 62 04 00 	mov	r2,1024
80009f00:	06 96       	mov	r6,r3
80009f02:	c0 48       	rjmp	80009f0a <__sfvwrite_r+0x52>
80009f04:	60 03       	ld.w	r3,r0[0x0]
80009f06:	60 16       	ld.w	r6,r0[0x4]
80009f08:	2f 80       	sub	r0,-8
80009f0a:	58 06       	cp.w	r6,0
80009f0c:	cf c0       	breq	80009f04 <__sfvwrite_r+0x4c>
80009f0e:	e0 46 04 00 	cp.w	r6,1024
80009f12:	ec 09 17 80 	movls	r9,r6
80009f16:	e4 09 17 b0 	movhi	r9,r2
80009f1a:	06 9a       	mov	r10,r3
80009f1c:	6e a8       	ld.w	r8,r7[0x28]
80009f1e:	6e 8b       	ld.w	r11,r7[0x20]
80009f20:	0a 9c       	mov	r12,r5
80009f22:	5d 18       	icall	r8
80009f24:	18 16       	sub	r6,r12
80009f26:	58 0c       	cp.w	r12,0
80009f28:	e0 8a 01 0f 	brle	8000a146 <__sfvwrite_r+0x28e>
80009f2c:	68 28       	ld.w	r8,r4[0x8]
80009f2e:	18 18       	sub	r8,r12
80009f30:	89 28       	st.w	r4[0x8],r8
80009f32:	e0 80 01 0f 	breq	8000a150 <__sfvwrite_r+0x298>
80009f36:	18 03       	add	r3,r12
80009f38:	ce 9b       	rjmp	80009f0a <__sfvwrite_r+0x52>
80009f3a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80009f3e:	c0 70       	breq	80009f4c <__sfvwrite_r+0x94>
80009f40:	50 06       	stdsp	sp[0x0],r6
80009f42:	0c 93       	mov	r3,r6
80009f44:	0c 91       	mov	r1,r6
80009f46:	50 15       	stdsp	sp[0x4],r5
80009f48:	08 92       	mov	r2,r4
80009f4a:	c9 e8       	rjmp	8000a086 <__sfvwrite_r+0x1ce>
80009f4c:	06 96       	mov	r6,r3
80009f4e:	08 91       	mov	r1,r4
80009f50:	c0 48       	rjmp	80009f58 <__sfvwrite_r+0xa0>
80009f52:	60 03       	ld.w	r3,r0[0x0]
80009f54:	60 16       	ld.w	r6,r0[0x4]
80009f56:	2f 80       	sub	r0,-8
80009f58:	58 06       	cp.w	r6,0
80009f5a:	cf c0       	breq	80009f52 <__sfvwrite_r+0x9a>
80009f5c:	8e 68       	ld.sh	r8,r7[0xc]
80009f5e:	6e 24       	ld.w	r4,r7[0x8]
80009f60:	10 99       	mov	r9,r8
80009f62:	e2 19 02 00 	andl	r9,0x200,COH
80009f66:	c5 50       	breq	8000a010 <__sfvwrite_r+0x158>
80009f68:	08 36       	cp.w	r6,r4
80009f6a:	c4 33       	brcs	80009ff0 <__sfvwrite_r+0x138>
80009f6c:	10 99       	mov	r9,r8
80009f6e:	e2 19 04 80 	andl	r9,0x480,COH
80009f72:	c3 f0       	breq	80009ff0 <__sfvwrite_r+0x138>
80009f74:	6e 4b       	ld.w	r11,r7[0x10]
80009f76:	6e 09       	ld.w	r9,r7[0x0]
80009f78:	16 19       	sub	r9,r11
80009f7a:	50 09       	stdsp	sp[0x0],r9
80009f7c:	6e 59       	ld.w	r9,r7[0x14]
80009f7e:	10 9c       	mov	r12,r8
80009f80:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80009f84:	30 28       	mov	r8,2
80009f86:	f4 08 0c 08 	divs	r8,r10,r8
80009f8a:	fa e9 00 04 	st.d	sp[4],r8
80009f8e:	10 94       	mov	r4,r8
80009f90:	40 09       	lddsp	r9,sp[0x0]
80009f92:	e2 1c 04 00 	andl	r12,0x400,COH
80009f96:	2f f9       	sub	r9,-1
80009f98:	0c 09       	add	r9,r6
80009f9a:	12 38       	cp.w	r8,r9
80009f9c:	f2 04 17 30 	movlo	r4,r9
80009fa0:	58 0c       	cp.w	r12,0
80009fa2:	c1 00       	breq	80009fc2 <__sfvwrite_r+0x10a>
80009fa4:	08 9b       	mov	r11,r4
80009fa6:	0a 9c       	mov	r12,r5
80009fa8:	c6 8d       	rcall	8000a278 <_malloc_r>
80009faa:	18 92       	mov	r2,r12
80009fac:	c1 40       	breq	80009fd4 <__sfvwrite_r+0x11c>
80009fae:	40 0a       	lddsp	r10,sp[0x0]
80009fb0:	6e 4b       	ld.w	r11,r7[0x10]
80009fb2:	e0 a0 03 84 	rcall	8000a6ba <memcpy>
80009fb6:	8e 68       	ld.sh	r8,r7[0xc]
80009fb8:	e0 18 fb 7f 	andl	r8,0xfb7f
80009fbc:	a7 b8       	sbr	r8,0x7
80009fbe:	ae 68       	st.h	r7[0xc],r8
80009fc0:	c0 d8       	rjmp	80009fda <__sfvwrite_r+0x122>
80009fc2:	08 9a       	mov	r10,r4
80009fc4:	0a 9c       	mov	r12,r5
80009fc6:	e0 a0 07 33 	rcall	8000ae2c <_realloc_r>
80009fca:	18 92       	mov	r2,r12
80009fcc:	c0 71       	brne	80009fda <__sfvwrite_r+0x122>
80009fce:	6e 4b       	ld.w	r11,r7[0x10]
80009fd0:	0a 9c       	mov	r12,r5
80009fd2:	ca be       	rcall	80009d28 <_free_r>
80009fd4:	30 c8       	mov	r8,12
80009fd6:	8b 38       	st.w	r5[0xc],r8
80009fd8:	cb 78       	rjmp	8000a146 <__sfvwrite_r+0x28e>
80009fda:	40 0a       	lddsp	r10,sp[0x0]
80009fdc:	40 09       	lddsp	r9,sp[0x0]
80009fde:	e8 0a 01 0a 	sub	r10,r4,r10
80009fe2:	e4 09 00 08 	add	r8,r2,r9
80009fe6:	8f 54       	st.w	r7[0x14],r4
80009fe8:	8f 2a       	st.w	r7[0x8],r10
80009fea:	8f 08       	st.w	r7[0x0],r8
80009fec:	8f 42       	st.w	r7[0x10],r2
80009fee:	0c 94       	mov	r4,r6
80009ff0:	08 36       	cp.w	r6,r4
80009ff2:	ec 04 17 30 	movlo	r4,r6
80009ff6:	06 9b       	mov	r11,r3
80009ff8:	08 9a       	mov	r10,r4
80009ffa:	6e 0c       	ld.w	r12,r7[0x0]
80009ffc:	e0 a0 04 03 	rcall	8000a802 <memmove>
8000a000:	6e 08       	ld.w	r8,r7[0x0]
8000a002:	08 08       	add	r8,r4
8000a004:	8f 08       	st.w	r7[0x0],r8
8000a006:	6e 28       	ld.w	r8,r7[0x8]
8000a008:	08 18       	sub	r8,r4
8000a00a:	0c 94       	mov	r4,r6
8000a00c:	8f 28       	st.w	r7[0x8],r8
8000a00e:	c3 08       	rjmp	8000a06e <__sfvwrite_r+0x1b6>
8000a010:	08 36       	cp.w	r6,r4
8000a012:	5f ba       	srhi	r10
8000a014:	6e 0c       	ld.w	r12,r7[0x0]
8000a016:	6e 48       	ld.w	r8,r7[0x10]
8000a018:	10 3c       	cp.w	r12,r8
8000a01a:	5f b8       	srhi	r8
8000a01c:	f5 e8 00 08 	and	r8,r10,r8
8000a020:	f2 08 18 00 	cp.b	r8,r9
8000a024:	c0 e0       	breq	8000a040 <__sfvwrite_r+0x188>
8000a026:	06 9b       	mov	r11,r3
8000a028:	08 9a       	mov	r10,r4
8000a02a:	e0 a0 03 ec 	rcall	8000a802 <memmove>
8000a02e:	6e 08       	ld.w	r8,r7[0x0]
8000a030:	08 08       	add	r8,r4
8000a032:	0e 9b       	mov	r11,r7
8000a034:	8f 08       	st.w	r7[0x0],r8
8000a036:	0a 9c       	mov	r12,r5
8000a038:	fe b0 fd 00 	rcall	80009a38 <_fflush_r>
8000a03c:	c1 90       	breq	8000a06e <__sfvwrite_r+0x1b6>
8000a03e:	c8 48       	rjmp	8000a146 <__sfvwrite_r+0x28e>
8000a040:	6e 59       	ld.w	r9,r7[0x14]
8000a042:	12 36       	cp.w	r6,r9
8000a044:	c0 a3       	brcs	8000a058 <__sfvwrite_r+0x1a0>
8000a046:	6e a8       	ld.w	r8,r7[0x28]
8000a048:	06 9a       	mov	r10,r3
8000a04a:	6e 8b       	ld.w	r11,r7[0x20]
8000a04c:	0a 9c       	mov	r12,r5
8000a04e:	5d 18       	icall	r8
8000a050:	18 94       	mov	r4,r12
8000a052:	e0 89 00 0e 	brgt	8000a06e <__sfvwrite_r+0x1b6>
8000a056:	c7 88       	rjmp	8000a146 <__sfvwrite_r+0x28e>
8000a058:	0c 9a       	mov	r10,r6
8000a05a:	06 9b       	mov	r11,r3
8000a05c:	e0 a0 03 d3 	rcall	8000a802 <memmove>
8000a060:	6e 08       	ld.w	r8,r7[0x0]
8000a062:	0c 08       	add	r8,r6
8000a064:	0c 94       	mov	r4,r6
8000a066:	8f 08       	st.w	r7[0x0],r8
8000a068:	6e 28       	ld.w	r8,r7[0x8]
8000a06a:	0c 18       	sub	r8,r6
8000a06c:	8f 28       	st.w	r7[0x8],r8
8000a06e:	62 28       	ld.w	r8,r1[0x8]
8000a070:	08 18       	sub	r8,r4
8000a072:	83 28       	st.w	r1[0x8],r8
8000a074:	c6 e0       	breq	8000a150 <__sfvwrite_r+0x298>
8000a076:	08 16       	sub	r6,r4
8000a078:	08 03       	add	r3,r4
8000a07a:	c6 fb       	rjmp	80009f58 <__sfvwrite_r+0xa0>
8000a07c:	60 03       	ld.w	r3,r0[0x0]
8000a07e:	60 11       	ld.w	r1,r0[0x4]
8000a080:	30 08       	mov	r8,0
8000a082:	2f 80       	sub	r0,-8
8000a084:	50 08       	stdsp	sp[0x0],r8
8000a086:	58 01       	cp.w	r1,0
8000a088:	cf a0       	breq	8000a07c <__sfvwrite_r+0x1c4>
8000a08a:	40 0a       	lddsp	r10,sp[0x0]
8000a08c:	58 0a       	cp.w	r10,0
8000a08e:	c1 51       	brne	8000a0b8 <__sfvwrite_r+0x200>
8000a090:	e2 c6 ff ff 	sub	r6,r1,-1
8000a094:	02 9a       	mov	r10,r1
8000a096:	30 ab       	mov	r11,10
8000a098:	06 9c       	mov	r12,r3
8000a09a:	e0 a0 03 05 	rcall	8000a6a4 <memchr>
8000a09e:	f8 c8 ff ff 	sub	r8,r12,-1
8000a0a2:	58 0c       	cp.w	r12,0
8000a0a4:	f1 d3 e1 16 	subne	r6,r8,r3
8000a0a8:	f9 b9 01 01 	movne	r9,1
8000a0ac:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000a0b0:	f9 b8 00 01 	moveq	r8,1
8000a0b4:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000a0b8:	02 36       	cp.w	r6,r1
8000a0ba:	ec 04 17 80 	movls	r4,r6
8000a0be:	e2 04 17 b0 	movhi	r4,r1
8000a0c2:	6e 59       	ld.w	r9,r7[0x14]
8000a0c4:	6e 25       	ld.w	r5,r7[0x8]
8000a0c6:	f2 05 00 05 	add	r5,r9,r5
8000a0ca:	0a 34       	cp.w	r4,r5
8000a0cc:	5f 9a       	srgt	r10
8000a0ce:	6e 0c       	ld.w	r12,r7[0x0]
8000a0d0:	6e 48       	ld.w	r8,r7[0x10]
8000a0d2:	10 3c       	cp.w	r12,r8
8000a0d4:	5f b8       	srhi	r8
8000a0d6:	f5 e8 00 08 	and	r8,r10,r8
8000a0da:	30 0a       	mov	r10,0
8000a0dc:	f4 08 18 00 	cp.b	r8,r10
8000a0e0:	c0 e0       	breq	8000a0fc <__sfvwrite_r+0x244>
8000a0e2:	06 9b       	mov	r11,r3
8000a0e4:	0a 9a       	mov	r10,r5
8000a0e6:	e0 a0 03 8e 	rcall	8000a802 <memmove>
8000a0ea:	6e 08       	ld.w	r8,r7[0x0]
8000a0ec:	0a 08       	add	r8,r5
8000a0ee:	0e 9b       	mov	r11,r7
8000a0f0:	8f 08       	st.w	r7[0x0],r8
8000a0f2:	40 1c       	lddsp	r12,sp[0x4]
8000a0f4:	fe b0 fc a2 	rcall	80009a38 <_fflush_r>
8000a0f8:	c1 80       	breq	8000a128 <__sfvwrite_r+0x270>
8000a0fa:	c2 68       	rjmp	8000a146 <__sfvwrite_r+0x28e>
8000a0fc:	12 34       	cp.w	r4,r9
8000a0fe:	c0 a5       	brlt	8000a112 <__sfvwrite_r+0x25a>
8000a100:	6e a8       	ld.w	r8,r7[0x28]
8000a102:	06 9a       	mov	r10,r3
8000a104:	6e 8b       	ld.w	r11,r7[0x20]
8000a106:	40 1c       	lddsp	r12,sp[0x4]
8000a108:	5d 18       	icall	r8
8000a10a:	18 95       	mov	r5,r12
8000a10c:	e0 89 00 0e 	brgt	8000a128 <__sfvwrite_r+0x270>
8000a110:	c1 b8       	rjmp	8000a146 <__sfvwrite_r+0x28e>
8000a112:	08 9a       	mov	r10,r4
8000a114:	06 9b       	mov	r11,r3
8000a116:	e0 a0 03 76 	rcall	8000a802 <memmove>
8000a11a:	6e 08       	ld.w	r8,r7[0x0]
8000a11c:	08 08       	add	r8,r4
8000a11e:	08 95       	mov	r5,r4
8000a120:	8f 08       	st.w	r7[0x0],r8
8000a122:	6e 28       	ld.w	r8,r7[0x8]
8000a124:	08 18       	sub	r8,r4
8000a126:	8f 28       	st.w	r7[0x8],r8
8000a128:	0a 16       	sub	r6,r5
8000a12a:	c0 71       	brne	8000a138 <__sfvwrite_r+0x280>
8000a12c:	0e 9b       	mov	r11,r7
8000a12e:	40 1c       	lddsp	r12,sp[0x4]
8000a130:	fe b0 fc 84 	rcall	80009a38 <_fflush_r>
8000a134:	c0 91       	brne	8000a146 <__sfvwrite_r+0x28e>
8000a136:	50 06       	stdsp	sp[0x0],r6
8000a138:	64 28       	ld.w	r8,r2[0x8]
8000a13a:	0a 18       	sub	r8,r5
8000a13c:	85 28       	st.w	r2[0x8],r8
8000a13e:	c0 90       	breq	8000a150 <__sfvwrite_r+0x298>
8000a140:	0a 11       	sub	r1,r5
8000a142:	0a 03       	add	r3,r5
8000a144:	ca 1b       	rjmp	8000a086 <__sfvwrite_r+0x1ce>
8000a146:	8e 68       	ld.sh	r8,r7[0xc]
8000a148:	a7 a8       	sbr	r8,0x6
8000a14a:	ae 68       	st.h	r7[0xc],r8
8000a14c:	3f fc       	mov	r12,-1
8000a14e:	c0 28       	rjmp	8000a152 <__sfvwrite_r+0x29a>
8000a150:	30 0c       	mov	r12,0
8000a152:	2f dd       	sub	sp,-12
8000a154:	d8 32       	popm	r0-r7,pc
8000a156:	d7 03       	nop

8000a158 <_fwalk>:
8000a158:	d4 31       	pushm	r0-r7,lr
8000a15a:	30 05       	mov	r5,0
8000a15c:	16 91       	mov	r1,r11
8000a15e:	f8 c7 ff 28 	sub	r7,r12,-216
8000a162:	0a 92       	mov	r2,r5
8000a164:	fe b0 fc f2 	rcall	80009b48 <__sfp_lock_acquire>
8000a168:	3f f3       	mov	r3,-1
8000a16a:	c1 68       	rjmp	8000a196 <_fwalk+0x3e>
8000a16c:	6e 26       	ld.w	r6,r7[0x8]
8000a16e:	6e 14       	ld.w	r4,r7[0x4]
8000a170:	2f 46       	sub	r6,-12
8000a172:	c0 c8       	rjmp	8000a18a <_fwalk+0x32>
8000a174:	8c 08       	ld.sh	r8,r6[0x0]
8000a176:	e4 08 19 00 	cp.h	r8,r2
8000a17a:	c0 70       	breq	8000a188 <_fwalk+0x30>
8000a17c:	8c 18       	ld.sh	r8,r6[0x2]
8000a17e:	e6 08 19 00 	cp.h	r8,r3
8000a182:	c0 30       	breq	8000a188 <_fwalk+0x30>
8000a184:	5d 11       	icall	r1
8000a186:	18 45       	or	r5,r12
8000a188:	2a 46       	sub	r6,-92
8000a18a:	20 14       	sub	r4,1
8000a18c:	ec cc 00 0c 	sub	r12,r6,12
8000a190:	58 04       	cp.w	r4,0
8000a192:	cf 14       	brge	8000a174 <_fwalk+0x1c>
8000a194:	6e 07       	ld.w	r7,r7[0x0]
8000a196:	58 07       	cp.w	r7,0
8000a198:	ce a1       	brne	8000a16c <_fwalk+0x14>
8000a19a:	fe b0 fc d8 	rcall	80009b4a <__sfp_lock_release>
8000a19e:	0a 9c       	mov	r12,r5
8000a1a0:	d8 32       	popm	r0-r7,pc
8000a1a2:	d7 03       	nop

8000a1a4 <_localeconv_r>:
8000a1a4:	48 1c       	lddpc	r12,8000a1a8 <_localeconv_r+0x4>
8000a1a6:	5e fc       	retal	r12
8000a1a8:	80 00       	ld.sh	r0,r0[0x0]
8000a1aa:	d4 34       	*unknown*

8000a1ac <__smakebuf_r>:
8000a1ac:	d4 21       	pushm	r4-r7,lr
8000a1ae:	20 fd       	sub	sp,60
8000a1b0:	96 68       	ld.sh	r8,r11[0xc]
8000a1b2:	16 97       	mov	r7,r11
8000a1b4:	18 96       	mov	r6,r12
8000a1b6:	e2 18 00 02 	andl	r8,0x2,COH
8000a1ba:	c3 c1       	brne	8000a232 <__smakebuf_r+0x86>
8000a1bc:	96 7b       	ld.sh	r11,r11[0xe]
8000a1be:	f0 0b 19 00 	cp.h	r11,r8
8000a1c2:	c0 55       	brlt	8000a1cc <__smakebuf_r+0x20>
8000a1c4:	1a 9a       	mov	r10,sp
8000a1c6:	e0 a0 09 55 	rcall	8000b470 <_fstat_r>
8000a1ca:	c0 f4       	brge	8000a1e8 <__smakebuf_r+0x3c>
8000a1cc:	8e 65       	ld.sh	r5,r7[0xc]
8000a1ce:	0a 98       	mov	r8,r5
8000a1d0:	ab b8       	sbr	r8,0xb
8000a1d2:	e2 15 00 80 	andl	r5,0x80,COH
8000a1d6:	ae 68       	st.h	r7[0xc],r8
8000a1d8:	30 04       	mov	r4,0
8000a1da:	e0 68 04 00 	mov	r8,1024
8000a1de:	f9 b5 01 40 	movne	r5,64
8000a1e2:	f0 05 17 00 	moveq	r5,r8
8000a1e6:	c1 c8       	rjmp	8000a21e <__smakebuf_r+0x72>
8000a1e8:	40 18       	lddsp	r8,sp[0x4]
8000a1ea:	e2 18 f0 00 	andl	r8,0xf000,COH
8000a1ee:	e0 48 20 00 	cp.w	r8,8192
8000a1f2:	5f 04       	sreq	r4
8000a1f4:	e0 48 80 00 	cp.w	r8,32768
8000a1f8:	c0 e1       	brne	8000a214 <__smakebuf_r+0x68>
8000a1fa:	6e b9       	ld.w	r9,r7[0x2c]
8000a1fc:	fe c8 f0 9c 	sub	r8,pc,-3940
8000a200:	10 39       	cp.w	r9,r8
8000a202:	c0 91       	brne	8000a214 <__smakebuf_r+0x68>
8000a204:	8e 68       	ld.sh	r8,r7[0xc]
8000a206:	e0 65 04 00 	mov	r5,1024
8000a20a:	ab a8       	sbr	r8,0xa
8000a20c:	ef 45 00 50 	st.w	r7[80],r5
8000a210:	ae 68       	st.h	r7[0xc],r8
8000a212:	c0 68       	rjmp	8000a21e <__smakebuf_r+0x72>
8000a214:	8e 68       	ld.sh	r8,r7[0xc]
8000a216:	e0 65 04 00 	mov	r5,1024
8000a21a:	ab b8       	sbr	r8,0xb
8000a21c:	ae 68       	st.h	r7[0xc],r8
8000a21e:	0a 9b       	mov	r11,r5
8000a220:	0c 9c       	mov	r12,r6
8000a222:	c2 bc       	rcall	8000a278 <_malloc_r>
8000a224:	8e 68       	ld.sh	r8,r7[0xc]
8000a226:	c0 d1       	brne	8000a240 <__smakebuf_r+0x94>
8000a228:	ed b8 00 09 	bld	r8,0x9
8000a22c:	c1 b0       	breq	8000a262 <__smakebuf_r+0xb6>
8000a22e:	a1 b8       	sbr	r8,0x1
8000a230:	ae 68       	st.h	r7[0xc],r8
8000a232:	ee c8 ff b9 	sub	r8,r7,-71
8000a236:	8f 48       	st.w	r7[0x10],r8
8000a238:	8f 08       	st.w	r7[0x0],r8
8000a23a:	30 18       	mov	r8,1
8000a23c:	8f 58       	st.w	r7[0x14],r8
8000a23e:	c1 28       	rjmp	8000a262 <__smakebuf_r+0xb6>
8000a240:	a7 b8       	sbr	r8,0x7
8000a242:	8f 4c       	st.w	r7[0x10],r12
8000a244:	ae 68       	st.h	r7[0xc],r8
8000a246:	8f 55       	st.w	r7[0x14],r5
8000a248:	fe c8 06 fc 	sub	r8,pc,1788
8000a24c:	8f 0c       	st.w	r7[0x0],r12
8000a24e:	8d a8       	st.w	r6[0x28],r8
8000a250:	58 04       	cp.w	r4,0
8000a252:	c0 80       	breq	8000a262 <__smakebuf_r+0xb6>
8000a254:	8e 7c       	ld.sh	r12,r7[0xe]
8000a256:	e0 a0 07 f5 	rcall	8000b240 <isatty>
8000a25a:	c0 40       	breq	8000a262 <__smakebuf_r+0xb6>
8000a25c:	8e 68       	ld.sh	r8,r7[0xc]
8000a25e:	a1 a8       	sbr	r8,0x0
8000a260:	ae 68       	st.h	r7[0xc],r8
8000a262:	2f 1d       	sub	sp,-60
8000a264:	d8 22       	popm	r4-r7,pc
8000a266:	d7 03       	nop

8000a268 <malloc>:
8000a268:	d4 01       	pushm	lr
8000a26a:	48 38       	lddpc	r8,8000a274 <malloc+0xc>
8000a26c:	18 9b       	mov	r11,r12
8000a26e:	70 0c       	ld.w	r12,r8[0x0]
8000a270:	c0 4c       	rcall	8000a278 <_malloc_r>
8000a272:	d8 02       	popm	pc
8000a274:	00 00       	add	r0,r0
8000a276:	00 fc       	st.b	--r0,r12

8000a278 <_malloc_r>:
8000a278:	d4 31       	pushm	r0-r7,lr
8000a27a:	f6 c8 ff f5 	sub	r8,r11,-11
8000a27e:	18 95       	mov	r5,r12
8000a280:	10 97       	mov	r7,r8
8000a282:	e0 17 ff f8 	andl	r7,0xfff8
8000a286:	59 68       	cp.w	r8,22
8000a288:	f9 b7 08 10 	movls	r7,16
8000a28c:	16 37       	cp.w	r7,r11
8000a28e:	5f 38       	srlo	r8
8000a290:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000a294:	c0 50       	breq	8000a29e <_malloc_r+0x26>
8000a296:	30 c8       	mov	r8,12
8000a298:	99 38       	st.w	r12[0xc],r8
8000a29a:	e0 8f 01 ec 	bral	8000a672 <_malloc_r+0x3fa>
8000a29e:	e0 a0 02 d8 	rcall	8000a84e <__malloc_lock>
8000a2a2:	e0 47 01 f7 	cp.w	r7,503
8000a2a6:	e0 8b 00 1c 	brhi	8000a2de <_malloc_r+0x66>
8000a2aa:	ee 03 16 03 	lsr	r3,r7,0x3
8000a2ae:	4c c8       	lddpc	r8,8000a3dc <_malloc_r+0x164>
8000a2b0:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000a2b4:	70 36       	ld.w	r6,r8[0xc]
8000a2b6:	10 36       	cp.w	r6,r8
8000a2b8:	c0 61       	brne	8000a2c4 <_malloc_r+0x4c>
8000a2ba:	ec c8 ff f8 	sub	r8,r6,-8
8000a2be:	70 36       	ld.w	r6,r8[0xc]
8000a2c0:	10 36       	cp.w	r6,r8
8000a2c2:	c0 c0       	breq	8000a2da <_malloc_r+0x62>
8000a2c4:	6c 18       	ld.w	r8,r6[0x4]
8000a2c6:	e0 18 ff fc 	andl	r8,0xfffc
8000a2ca:	6c 3a       	ld.w	r10,r6[0xc]
8000a2cc:	ec 08 00 09 	add	r9,r6,r8
8000a2d0:	0a 9c       	mov	r12,r5
8000a2d2:	6c 28       	ld.w	r8,r6[0x8]
8000a2d4:	95 28       	st.w	r10[0x8],r8
8000a2d6:	91 3a       	st.w	r8[0xc],r10
8000a2d8:	c4 68       	rjmp	8000a364 <_malloc_r+0xec>
8000a2da:	2f e3       	sub	r3,-2
8000a2dc:	c4 c8       	rjmp	8000a374 <_malloc_r+0xfc>
8000a2de:	ee 03 16 09 	lsr	r3,r7,0x9
8000a2e2:	c0 41       	brne	8000a2ea <_malloc_r+0x72>
8000a2e4:	ee 03 16 03 	lsr	r3,r7,0x3
8000a2e8:	c2 68       	rjmp	8000a334 <_malloc_r+0xbc>
8000a2ea:	58 43       	cp.w	r3,4
8000a2ec:	e0 8b 00 06 	brhi	8000a2f8 <_malloc_r+0x80>
8000a2f0:	ee 03 16 06 	lsr	r3,r7,0x6
8000a2f4:	2c 83       	sub	r3,-56
8000a2f6:	c1 f8       	rjmp	8000a334 <_malloc_r+0xbc>
8000a2f8:	59 43       	cp.w	r3,20
8000a2fa:	e0 8b 00 04 	brhi	8000a302 <_malloc_r+0x8a>
8000a2fe:	2a 53       	sub	r3,-91
8000a300:	c1 a8       	rjmp	8000a334 <_malloc_r+0xbc>
8000a302:	e0 43 00 54 	cp.w	r3,84
8000a306:	e0 8b 00 06 	brhi	8000a312 <_malloc_r+0x9a>
8000a30a:	ee 03 16 0c 	lsr	r3,r7,0xc
8000a30e:	29 23       	sub	r3,-110
8000a310:	c1 28       	rjmp	8000a334 <_malloc_r+0xbc>
8000a312:	e0 43 01 54 	cp.w	r3,340
8000a316:	e0 8b 00 06 	brhi	8000a322 <_malloc_r+0xaa>
8000a31a:	ee 03 16 0f 	lsr	r3,r7,0xf
8000a31e:	28 93       	sub	r3,-119
8000a320:	c0 a8       	rjmp	8000a334 <_malloc_r+0xbc>
8000a322:	e0 43 05 54 	cp.w	r3,1364
8000a326:	e0 88 00 04 	brls	8000a32e <_malloc_r+0xb6>
8000a32a:	37 e3       	mov	r3,126
8000a32c:	c0 48       	rjmp	8000a334 <_malloc_r+0xbc>
8000a32e:	ee 03 16 12 	lsr	r3,r7,0x12
8000a332:	28 43       	sub	r3,-124
8000a334:	4a aa       	lddpc	r10,8000a3dc <_malloc_r+0x164>
8000a336:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000a33a:	74 36       	ld.w	r6,r10[0xc]
8000a33c:	c1 98       	rjmp	8000a36e <_malloc_r+0xf6>
8000a33e:	6c 19       	ld.w	r9,r6[0x4]
8000a340:	e0 19 ff fc 	andl	r9,0xfffc
8000a344:	f2 07 01 0b 	sub	r11,r9,r7
8000a348:	58 fb       	cp.w	r11,15
8000a34a:	e0 8a 00 04 	brle	8000a352 <_malloc_r+0xda>
8000a34e:	20 13       	sub	r3,1
8000a350:	c1 18       	rjmp	8000a372 <_malloc_r+0xfa>
8000a352:	6c 38       	ld.w	r8,r6[0xc]
8000a354:	58 0b       	cp.w	r11,0
8000a356:	c0 b5       	brlt	8000a36c <_malloc_r+0xf4>
8000a358:	6c 2a       	ld.w	r10,r6[0x8]
8000a35a:	ec 09 00 09 	add	r9,r6,r9
8000a35e:	0a 9c       	mov	r12,r5
8000a360:	91 2a       	st.w	r8[0x8],r10
8000a362:	95 38       	st.w	r10[0xc],r8
8000a364:	72 18       	ld.w	r8,r9[0x4]
8000a366:	a1 a8       	sbr	r8,0x0
8000a368:	93 18       	st.w	r9[0x4],r8
8000a36a:	cb a8       	rjmp	8000a4de <_malloc_r+0x266>
8000a36c:	10 96       	mov	r6,r8
8000a36e:	14 36       	cp.w	r6,r10
8000a370:	ce 71       	brne	8000a33e <_malloc_r+0xc6>
8000a372:	2f f3       	sub	r3,-1
8000a374:	49 aa       	lddpc	r10,8000a3dc <_malloc_r+0x164>
8000a376:	f4 cc ff f8 	sub	r12,r10,-8
8000a37a:	78 26       	ld.w	r6,r12[0x8]
8000a37c:	18 36       	cp.w	r6,r12
8000a37e:	c6 c0       	breq	8000a456 <_malloc_r+0x1de>
8000a380:	6c 19       	ld.w	r9,r6[0x4]
8000a382:	e0 19 ff fc 	andl	r9,0xfffc
8000a386:	f2 07 01 08 	sub	r8,r9,r7
8000a38a:	58 f8       	cp.w	r8,15
8000a38c:	e0 89 00 8e 	brgt	8000a4a8 <_malloc_r+0x230>
8000a390:	99 3c       	st.w	r12[0xc],r12
8000a392:	99 2c       	st.w	r12[0x8],r12
8000a394:	58 08       	cp.w	r8,0
8000a396:	c0 55       	brlt	8000a3a0 <_malloc_r+0x128>
8000a398:	ec 09 00 09 	add	r9,r6,r9
8000a39c:	0a 9c       	mov	r12,r5
8000a39e:	ce 3b       	rjmp	8000a364 <_malloc_r+0xec>
8000a3a0:	e0 49 01 ff 	cp.w	r9,511
8000a3a4:	e0 8b 00 13 	brhi	8000a3ca <_malloc_r+0x152>
8000a3a8:	a3 99       	lsr	r9,0x3
8000a3aa:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000a3ae:	70 2b       	ld.w	r11,r8[0x8]
8000a3b0:	8d 38       	st.w	r6[0xc],r8
8000a3b2:	8d 2b       	st.w	r6[0x8],r11
8000a3b4:	97 36       	st.w	r11[0xc],r6
8000a3b6:	91 26       	st.w	r8[0x8],r6
8000a3b8:	a3 49       	asr	r9,0x2
8000a3ba:	74 18       	ld.w	r8,r10[0x4]
8000a3bc:	30 1b       	mov	r11,1
8000a3be:	f6 09 09 49 	lsl	r9,r11,r9
8000a3c2:	f1 e9 10 09 	or	r9,r8,r9
8000a3c6:	95 19       	st.w	r10[0x4],r9
8000a3c8:	c4 78       	rjmp	8000a456 <_malloc_r+0x1de>
8000a3ca:	f2 0a 16 09 	lsr	r10,r9,0x9
8000a3ce:	58 4a       	cp.w	r10,4
8000a3d0:	e0 8b 00 08 	brhi	8000a3e0 <_malloc_r+0x168>
8000a3d4:	f2 0a 16 06 	lsr	r10,r9,0x6
8000a3d8:	2c 8a       	sub	r10,-56
8000a3da:	c2 18       	rjmp	8000a41c <_malloc_r+0x1a4>
8000a3dc:	00 00       	add	r0,r0
8000a3de:	01 00       	ld.w	r0,r0++
8000a3e0:	59 4a       	cp.w	r10,20
8000a3e2:	e0 8b 00 04 	brhi	8000a3ea <_malloc_r+0x172>
8000a3e6:	2a 5a       	sub	r10,-91
8000a3e8:	c1 a8       	rjmp	8000a41c <_malloc_r+0x1a4>
8000a3ea:	e0 4a 00 54 	cp.w	r10,84
8000a3ee:	e0 8b 00 06 	brhi	8000a3fa <_malloc_r+0x182>
8000a3f2:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000a3f6:	29 2a       	sub	r10,-110
8000a3f8:	c1 28       	rjmp	8000a41c <_malloc_r+0x1a4>
8000a3fa:	e0 4a 01 54 	cp.w	r10,340
8000a3fe:	e0 8b 00 06 	brhi	8000a40a <_malloc_r+0x192>
8000a402:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000a406:	28 9a       	sub	r10,-119
8000a408:	c0 a8       	rjmp	8000a41c <_malloc_r+0x1a4>
8000a40a:	e0 4a 05 54 	cp.w	r10,1364
8000a40e:	e0 88 00 04 	brls	8000a416 <_malloc_r+0x19e>
8000a412:	37 ea       	mov	r10,126
8000a414:	c0 48       	rjmp	8000a41c <_malloc_r+0x1a4>
8000a416:	f2 0a 16 12 	lsr	r10,r9,0x12
8000a41a:	28 4a       	sub	r10,-124
8000a41c:	4c 7b       	lddpc	r11,8000a538 <_malloc_r+0x2c0>
8000a41e:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000a422:	68 28       	ld.w	r8,r4[0x8]
8000a424:	08 38       	cp.w	r8,r4
8000a426:	c0 e1       	brne	8000a442 <_malloc_r+0x1ca>
8000a428:	76 19       	ld.w	r9,r11[0x4]
8000a42a:	a3 4a       	asr	r10,0x2
8000a42c:	30 1e       	mov	lr,1
8000a42e:	fc 0a 09 4a 	lsl	r10,lr,r10
8000a432:	f3 ea 10 0a 	or	r10,r9,r10
8000a436:	10 99       	mov	r9,r8
8000a438:	97 1a       	st.w	r11[0x4],r10
8000a43a:	c0 a8       	rjmp	8000a44e <_malloc_r+0x1d6>
8000a43c:	70 28       	ld.w	r8,r8[0x8]
8000a43e:	08 38       	cp.w	r8,r4
8000a440:	c0 60       	breq	8000a44c <_malloc_r+0x1d4>
8000a442:	70 1a       	ld.w	r10,r8[0x4]
8000a444:	e0 1a ff fc 	andl	r10,0xfffc
8000a448:	14 39       	cp.w	r9,r10
8000a44a:	cf 93       	brcs	8000a43c <_malloc_r+0x1c4>
8000a44c:	70 39       	ld.w	r9,r8[0xc]
8000a44e:	8d 39       	st.w	r6[0xc],r9
8000a450:	8d 28       	st.w	r6[0x8],r8
8000a452:	91 36       	st.w	r8[0xc],r6
8000a454:	93 26       	st.w	r9[0x8],r6
8000a456:	e6 08 14 02 	asr	r8,r3,0x2
8000a45a:	30 1b       	mov	r11,1
8000a45c:	4b 74       	lddpc	r4,8000a538 <_malloc_r+0x2c0>
8000a45e:	f6 08 09 4b 	lsl	r11,r11,r8
8000a462:	68 18       	ld.w	r8,r4[0x4]
8000a464:	10 3b       	cp.w	r11,r8
8000a466:	e0 8b 00 6b 	brhi	8000a53c <_malloc_r+0x2c4>
8000a46a:	f7 e8 00 09 	and	r9,r11,r8
8000a46e:	c0 b1       	brne	8000a484 <_malloc_r+0x20c>
8000a470:	e0 13 ff fc 	andl	r3,0xfffc
8000a474:	a1 7b       	lsl	r11,0x1
8000a476:	2f c3       	sub	r3,-4
8000a478:	c0 38       	rjmp	8000a47e <_malloc_r+0x206>
8000a47a:	2f c3       	sub	r3,-4
8000a47c:	a1 7b       	lsl	r11,0x1
8000a47e:	f7 e8 00 09 	and	r9,r11,r8
8000a482:	cf c0       	breq	8000a47a <_malloc_r+0x202>
8000a484:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000a488:	06 92       	mov	r2,r3
8000a48a:	1c 91       	mov	r1,lr
8000a48c:	62 36       	ld.w	r6,r1[0xc]
8000a48e:	c2 d8       	rjmp	8000a4e8 <_malloc_r+0x270>
8000a490:	6c 1a       	ld.w	r10,r6[0x4]
8000a492:	e0 1a ff fc 	andl	r10,0xfffc
8000a496:	f4 07 01 08 	sub	r8,r10,r7
8000a49a:	58 f8       	cp.w	r8,15
8000a49c:	e0 8a 00 15 	brle	8000a4c6 <_malloc_r+0x24e>
8000a4a0:	6c 3a       	ld.w	r10,r6[0xc]
8000a4a2:	6c 29       	ld.w	r9,r6[0x8]
8000a4a4:	95 29       	st.w	r10[0x8],r9
8000a4a6:	93 3a       	st.w	r9[0xc],r10
8000a4a8:	0e 99       	mov	r9,r7
8000a4aa:	ec 07 00 07 	add	r7,r6,r7
8000a4ae:	a1 a9       	sbr	r9,0x0
8000a4b0:	99 37       	st.w	r12[0xc],r7
8000a4b2:	99 27       	st.w	r12[0x8],r7
8000a4b4:	8d 19       	st.w	r6[0x4],r9
8000a4b6:	ee 08 09 08 	st.w	r7[r8],r8
8000a4ba:	8f 2c       	st.w	r7[0x8],r12
8000a4bc:	8f 3c       	st.w	r7[0xc],r12
8000a4be:	a1 a8       	sbr	r8,0x0
8000a4c0:	0a 9c       	mov	r12,r5
8000a4c2:	8f 18       	st.w	r7[0x4],r8
8000a4c4:	c0 d8       	rjmp	8000a4de <_malloc_r+0x266>
8000a4c6:	6c 39       	ld.w	r9,r6[0xc]
8000a4c8:	58 08       	cp.w	r8,0
8000a4ca:	c0 e5       	brlt	8000a4e6 <_malloc_r+0x26e>
8000a4cc:	ec 0a 00 0a 	add	r10,r6,r10
8000a4d0:	74 18       	ld.w	r8,r10[0x4]
8000a4d2:	a1 a8       	sbr	r8,0x0
8000a4d4:	0a 9c       	mov	r12,r5
8000a4d6:	95 18       	st.w	r10[0x4],r8
8000a4d8:	6c 28       	ld.w	r8,r6[0x8]
8000a4da:	93 28       	st.w	r9[0x8],r8
8000a4dc:	91 39       	st.w	r8[0xc],r9
8000a4de:	cb 9d       	rcall	8000a850 <__malloc_unlock>
8000a4e0:	ec cc ff f8 	sub	r12,r6,-8
8000a4e4:	d8 32       	popm	r0-r7,pc
8000a4e6:	12 96       	mov	r6,r9
8000a4e8:	02 36       	cp.w	r6,r1
8000a4ea:	cd 31       	brne	8000a490 <_malloc_r+0x218>
8000a4ec:	2f f2       	sub	r2,-1
8000a4ee:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000a4f2:	c0 30       	breq	8000a4f8 <_malloc_r+0x280>
8000a4f4:	2f 81       	sub	r1,-8
8000a4f6:	cc bb       	rjmp	8000a48c <_malloc_r+0x214>
8000a4f8:	1c 98       	mov	r8,lr
8000a4fa:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000a4fe:	c0 81       	brne	8000a50e <_malloc_r+0x296>
8000a500:	68 19       	ld.w	r9,r4[0x4]
8000a502:	f6 08 11 ff 	rsub	r8,r11,-1
8000a506:	f3 e8 00 08 	and	r8,r9,r8
8000a50a:	89 18       	st.w	r4[0x4],r8
8000a50c:	c0 78       	rjmp	8000a51a <_malloc_r+0x2a2>
8000a50e:	f0 c9 00 08 	sub	r9,r8,8
8000a512:	20 13       	sub	r3,1
8000a514:	70 08       	ld.w	r8,r8[0x0]
8000a516:	12 38       	cp.w	r8,r9
8000a518:	cf 10       	breq	8000a4fa <_malloc_r+0x282>
8000a51a:	a1 7b       	lsl	r11,0x1
8000a51c:	68 18       	ld.w	r8,r4[0x4]
8000a51e:	10 3b       	cp.w	r11,r8
8000a520:	e0 8b 00 0e 	brhi	8000a53c <_malloc_r+0x2c4>
8000a524:	58 0b       	cp.w	r11,0
8000a526:	c0 b0       	breq	8000a53c <_malloc_r+0x2c4>
8000a528:	04 93       	mov	r3,r2
8000a52a:	c0 38       	rjmp	8000a530 <_malloc_r+0x2b8>
8000a52c:	2f c3       	sub	r3,-4
8000a52e:	a1 7b       	lsl	r11,0x1
8000a530:	f7 e8 00 09 	and	r9,r11,r8
8000a534:	ca 81       	brne	8000a484 <_malloc_r+0x20c>
8000a536:	cf bb       	rjmp	8000a52c <_malloc_r+0x2b4>
8000a538:	00 00       	add	r0,r0
8000a53a:	01 00       	ld.w	r0,r0++
8000a53c:	68 23       	ld.w	r3,r4[0x8]
8000a53e:	66 12       	ld.w	r2,r3[0x4]
8000a540:	e0 12 ff fc 	andl	r2,0xfffc
8000a544:	0e 32       	cp.w	r2,r7
8000a546:	5f 39       	srlo	r9
8000a548:	e4 07 01 08 	sub	r8,r2,r7
8000a54c:	58 f8       	cp.w	r8,15
8000a54e:	5f aa       	srle	r10
8000a550:	f5 e9 10 09 	or	r9,r10,r9
8000a554:	e0 80 00 9a 	breq	8000a688 <_malloc_r+0x410>
8000a558:	4c 78       	lddpc	r8,8000a674 <_malloc_r+0x3fc>
8000a55a:	70 01       	ld.w	r1,r8[0x0]
8000a55c:	4c 78       	lddpc	r8,8000a678 <_malloc_r+0x400>
8000a55e:	2f 01       	sub	r1,-16
8000a560:	70 08       	ld.w	r8,r8[0x0]
8000a562:	0e 01       	add	r1,r7
8000a564:	5b f8       	cp.w	r8,-1
8000a566:	c0 40       	breq	8000a56e <_malloc_r+0x2f6>
8000a568:	28 11       	sub	r1,-127
8000a56a:	e0 11 ff 80 	andl	r1,0xff80
8000a56e:	02 9b       	mov	r11,r1
8000a570:	0a 9c       	mov	r12,r5
8000a572:	e0 a0 05 e3 	rcall	8000b138 <_sbrk_r>
8000a576:	18 96       	mov	r6,r12
8000a578:	5b fc       	cp.w	r12,-1
8000a57a:	c6 e0       	breq	8000a656 <_malloc_r+0x3de>
8000a57c:	e6 02 00 08 	add	r8,r3,r2
8000a580:	10 3c       	cp.w	r12,r8
8000a582:	c0 32       	brcc	8000a588 <_malloc_r+0x310>
8000a584:	08 33       	cp.w	r3,r4
8000a586:	c6 81       	brne	8000a656 <_malloc_r+0x3de>
8000a588:	4b da       	lddpc	r10,8000a67c <_malloc_r+0x404>
8000a58a:	74 09       	ld.w	r9,r10[0x0]
8000a58c:	e2 09 00 09 	add	r9,r1,r9
8000a590:	95 09       	st.w	r10[0x0],r9
8000a592:	10 36       	cp.w	r6,r8
8000a594:	c0 a1       	brne	8000a5a8 <_malloc_r+0x330>
8000a596:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000a59a:	c0 71       	brne	8000a5a8 <_malloc_r+0x330>
8000a59c:	e2 02 00 02 	add	r2,r1,r2
8000a5a0:	68 28       	ld.w	r8,r4[0x8]
8000a5a2:	a1 a2       	sbr	r2,0x0
8000a5a4:	91 12       	st.w	r8[0x4],r2
8000a5a6:	c4 c8       	rjmp	8000a63e <_malloc_r+0x3c6>
8000a5a8:	4b 4a       	lddpc	r10,8000a678 <_malloc_r+0x400>
8000a5aa:	74 0b       	ld.w	r11,r10[0x0]
8000a5ac:	5b fb       	cp.w	r11,-1
8000a5ae:	c0 31       	brne	8000a5b4 <_malloc_r+0x33c>
8000a5b0:	95 06       	st.w	r10[0x0],r6
8000a5b2:	c0 68       	rjmp	8000a5be <_malloc_r+0x346>
8000a5b4:	ec 09 00 09 	add	r9,r6,r9
8000a5b8:	4b 1a       	lddpc	r10,8000a67c <_malloc_r+0x404>
8000a5ba:	10 19       	sub	r9,r8
8000a5bc:	95 09       	st.w	r10[0x0],r9
8000a5be:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000a5c2:	f0 09 11 08 	rsub	r9,r8,8
8000a5c6:	58 08       	cp.w	r8,0
8000a5c8:	f2 08 17 10 	movne	r8,r9
8000a5cc:	ed d8 e1 06 	addne	r6,r6,r8
8000a5d0:	28 08       	sub	r8,-128
8000a5d2:	ec 01 00 01 	add	r1,r6,r1
8000a5d6:	0a 9c       	mov	r12,r5
8000a5d8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000a5dc:	f0 01 01 01 	sub	r1,r8,r1
8000a5e0:	02 9b       	mov	r11,r1
8000a5e2:	e0 a0 05 ab 	rcall	8000b138 <_sbrk_r>
8000a5e6:	4a 68       	lddpc	r8,8000a67c <_malloc_r+0x404>
8000a5e8:	5b fc       	cp.w	r12,-1
8000a5ea:	ec 0c 17 00 	moveq	r12,r6
8000a5ee:	f9 b1 00 00 	moveq	r1,0
8000a5f2:	70 09       	ld.w	r9,r8[0x0]
8000a5f4:	0c 1c       	sub	r12,r6
8000a5f6:	89 26       	st.w	r4[0x8],r6
8000a5f8:	02 0c       	add	r12,r1
8000a5fa:	12 01       	add	r1,r9
8000a5fc:	a1 ac       	sbr	r12,0x0
8000a5fe:	91 01       	st.w	r8[0x0],r1
8000a600:	8d 1c       	st.w	r6[0x4],r12
8000a602:	08 33       	cp.w	r3,r4
8000a604:	c1 d0       	breq	8000a63e <_malloc_r+0x3c6>
8000a606:	58 f2       	cp.w	r2,15
8000a608:	e0 8b 00 05 	brhi	8000a612 <_malloc_r+0x39a>
8000a60c:	30 18       	mov	r8,1
8000a60e:	8d 18       	st.w	r6[0x4],r8
8000a610:	c2 38       	rjmp	8000a656 <_malloc_r+0x3de>
8000a612:	30 59       	mov	r9,5
8000a614:	20 c2       	sub	r2,12
8000a616:	e0 12 ff f8 	andl	r2,0xfff8
8000a61a:	e6 02 00 08 	add	r8,r3,r2
8000a61e:	91 29       	st.w	r8[0x8],r9
8000a620:	91 19       	st.w	r8[0x4],r9
8000a622:	66 18       	ld.w	r8,r3[0x4]
8000a624:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a628:	e5 e8 10 08 	or	r8,r2,r8
8000a62c:	87 18       	st.w	r3[0x4],r8
8000a62e:	58 f2       	cp.w	r2,15
8000a630:	e0 88 00 07 	brls	8000a63e <_malloc_r+0x3c6>
8000a634:	e6 cb ff f8 	sub	r11,r3,-8
8000a638:	0a 9c       	mov	r12,r5
8000a63a:	fe b0 fb 77 	rcall	80009d28 <_free_r>
8000a63e:	49 19       	lddpc	r9,8000a680 <_malloc_r+0x408>
8000a640:	72 0a       	ld.w	r10,r9[0x0]
8000a642:	48 f8       	lddpc	r8,8000a67c <_malloc_r+0x404>
8000a644:	70 08       	ld.w	r8,r8[0x0]
8000a646:	14 38       	cp.w	r8,r10
8000a648:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000a64c:	48 e9       	lddpc	r9,8000a684 <_malloc_r+0x40c>
8000a64e:	72 0a       	ld.w	r10,r9[0x0]
8000a650:	14 38       	cp.w	r8,r10
8000a652:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000a656:	68 28       	ld.w	r8,r4[0x8]
8000a658:	70 18       	ld.w	r8,r8[0x4]
8000a65a:	e0 18 ff fc 	andl	r8,0xfffc
8000a65e:	0e 38       	cp.w	r8,r7
8000a660:	5f 39       	srlo	r9
8000a662:	0e 18       	sub	r8,r7
8000a664:	58 f8       	cp.w	r8,15
8000a666:	5f aa       	srle	r10
8000a668:	f5 e9 10 09 	or	r9,r10,r9
8000a66c:	c0 e0       	breq	8000a688 <_malloc_r+0x410>
8000a66e:	0a 9c       	mov	r12,r5
8000a670:	cf 0c       	rcall	8000a850 <__malloc_unlock>
8000a672:	d8 3a       	popm	r0-r7,pc,r12=0
8000a674:	00 00       	add	r0,r0
8000a676:	06 20       	rsub	r0,r3
8000a678:	00 00       	add	r0,r0
8000a67a:	05 0c       	ld.w	r12,r2++
8000a67c:	00 00       	add	r0,r0
8000a67e:	06 24       	rsub	r4,r3
8000a680:	00 00       	add	r0,r0
8000a682:	06 1c       	sub	r12,r3
8000a684:	00 00       	add	r0,r0
8000a686:	06 18       	sub	r8,r3
8000a688:	68 26       	ld.w	r6,r4[0x8]
8000a68a:	a1 a8       	sbr	r8,0x0
8000a68c:	0e 99       	mov	r9,r7
8000a68e:	a1 a9       	sbr	r9,0x0
8000a690:	8d 19       	st.w	r6[0x4],r9
8000a692:	ec 07 00 07 	add	r7,r6,r7
8000a696:	0a 9c       	mov	r12,r5
8000a698:	89 27       	st.w	r4[0x8],r7
8000a69a:	8f 18       	st.w	r7[0x4],r8
8000a69c:	cd ac       	rcall	8000a850 <__malloc_unlock>
8000a69e:	ec cc ff f8 	sub	r12,r6,-8
8000a6a2:	d8 32       	popm	r0-r7,pc

8000a6a4 <memchr>:
8000a6a4:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000a6a8:	c0 68       	rjmp	8000a6b4 <memchr+0x10>
8000a6aa:	20 1a       	sub	r10,1
8000a6ac:	19 88       	ld.ub	r8,r12[0x0]
8000a6ae:	16 38       	cp.w	r8,r11
8000a6b0:	5e 0c       	reteq	r12
8000a6b2:	2f fc       	sub	r12,-1
8000a6b4:	58 0a       	cp.w	r10,0
8000a6b6:	cf a1       	brne	8000a6aa <memchr+0x6>
8000a6b8:	5e fa       	retal	r10

8000a6ba <memcpy>:
8000a6ba:	58 8a       	cp.w	r10,8
8000a6bc:	c2 f5       	brlt	8000a71a <memcpy+0x60>
8000a6be:	f9 eb 10 09 	or	r9,r12,r11
8000a6c2:	e2 19 00 03 	andl	r9,0x3,COH
8000a6c6:	e0 81 00 97 	brne	8000a7f4 <memcpy+0x13a>
8000a6ca:	e0 4a 00 20 	cp.w	r10,32
8000a6ce:	c3 b4       	brge	8000a744 <memcpy+0x8a>
8000a6d0:	f4 08 14 02 	asr	r8,r10,0x2
8000a6d4:	f0 09 11 08 	rsub	r9,r8,8
8000a6d8:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000a6dc:	76 69       	ld.w	r9,r11[0x18]
8000a6de:	99 69       	st.w	r12[0x18],r9
8000a6e0:	76 59       	ld.w	r9,r11[0x14]
8000a6e2:	99 59       	st.w	r12[0x14],r9
8000a6e4:	76 49       	ld.w	r9,r11[0x10]
8000a6e6:	99 49       	st.w	r12[0x10],r9
8000a6e8:	76 39       	ld.w	r9,r11[0xc]
8000a6ea:	99 39       	st.w	r12[0xc],r9
8000a6ec:	76 29       	ld.w	r9,r11[0x8]
8000a6ee:	99 29       	st.w	r12[0x8],r9
8000a6f0:	76 19       	ld.w	r9,r11[0x4]
8000a6f2:	99 19       	st.w	r12[0x4],r9
8000a6f4:	76 09       	ld.w	r9,r11[0x0]
8000a6f6:	99 09       	st.w	r12[0x0],r9
8000a6f8:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000a6fc:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000a700:	e0 1a 00 03 	andl	r10,0x3
8000a704:	f4 0a 11 04 	rsub	r10,r10,4
8000a708:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000a70c:	17 a9       	ld.ub	r9,r11[0x2]
8000a70e:	b0 a9       	st.b	r8[0x2],r9
8000a710:	17 99       	ld.ub	r9,r11[0x1]
8000a712:	b0 99       	st.b	r8[0x1],r9
8000a714:	17 89       	ld.ub	r9,r11[0x0]
8000a716:	b0 89       	st.b	r8[0x0],r9
8000a718:	5e fc       	retal	r12
8000a71a:	f4 0a 11 09 	rsub	r10,r10,9
8000a71e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000a722:	17 f9       	ld.ub	r9,r11[0x7]
8000a724:	b8 f9       	st.b	r12[0x7],r9
8000a726:	17 e9       	ld.ub	r9,r11[0x6]
8000a728:	b8 e9       	st.b	r12[0x6],r9
8000a72a:	17 d9       	ld.ub	r9,r11[0x5]
8000a72c:	b8 d9       	st.b	r12[0x5],r9
8000a72e:	17 c9       	ld.ub	r9,r11[0x4]
8000a730:	b8 c9       	st.b	r12[0x4],r9
8000a732:	17 b9       	ld.ub	r9,r11[0x3]
8000a734:	b8 b9       	st.b	r12[0x3],r9
8000a736:	17 a9       	ld.ub	r9,r11[0x2]
8000a738:	b8 a9       	st.b	r12[0x2],r9
8000a73a:	17 99       	ld.ub	r9,r11[0x1]
8000a73c:	b8 99       	st.b	r12[0x1],r9
8000a73e:	17 89       	ld.ub	r9,r11[0x0]
8000a740:	b8 89       	st.b	r12[0x0],r9
8000a742:	5e fc       	retal	r12
8000a744:	eb cd 40 c0 	pushm	r6-r7,lr
8000a748:	18 99       	mov	r9,r12
8000a74a:	22 0a       	sub	r10,32
8000a74c:	b7 07       	ld.d	r6,r11++
8000a74e:	b3 26       	st.d	r9++,r6
8000a750:	b7 07       	ld.d	r6,r11++
8000a752:	b3 26       	st.d	r9++,r6
8000a754:	b7 07       	ld.d	r6,r11++
8000a756:	b3 26       	st.d	r9++,r6
8000a758:	b7 07       	ld.d	r6,r11++
8000a75a:	b3 26       	st.d	r9++,r6
8000a75c:	22 0a       	sub	r10,32
8000a75e:	cf 74       	brge	8000a74c <memcpy+0x92>
8000a760:	2f 0a       	sub	r10,-16
8000a762:	c0 65       	brlt	8000a76e <memcpy+0xb4>
8000a764:	b7 07       	ld.d	r6,r11++
8000a766:	b3 26       	st.d	r9++,r6
8000a768:	b7 07       	ld.d	r6,r11++
8000a76a:	b3 26       	st.d	r9++,r6
8000a76c:	21 0a       	sub	r10,16
8000a76e:	5c 3a       	neg	r10
8000a770:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000a774:	d7 03       	nop
8000a776:	d7 03       	nop
8000a778:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000a77c:	f3 66 00 0e 	st.b	r9[14],r6
8000a780:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000a784:	f3 66 00 0d 	st.b	r9[13],r6
8000a788:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000a78c:	f3 66 00 0c 	st.b	r9[12],r6
8000a790:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000a794:	f3 66 00 0b 	st.b	r9[11],r6
8000a798:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000a79c:	f3 66 00 0a 	st.b	r9[10],r6
8000a7a0:	f7 36 00 09 	ld.ub	r6,r11[9]
8000a7a4:	f3 66 00 09 	st.b	r9[9],r6
8000a7a8:	f7 36 00 08 	ld.ub	r6,r11[8]
8000a7ac:	f3 66 00 08 	st.b	r9[8],r6
8000a7b0:	f7 36 00 07 	ld.ub	r6,r11[7]
8000a7b4:	f3 66 00 07 	st.b	r9[7],r6
8000a7b8:	f7 36 00 06 	ld.ub	r6,r11[6]
8000a7bc:	f3 66 00 06 	st.b	r9[6],r6
8000a7c0:	f7 36 00 05 	ld.ub	r6,r11[5]
8000a7c4:	f3 66 00 05 	st.b	r9[5],r6
8000a7c8:	f7 36 00 04 	ld.ub	r6,r11[4]
8000a7cc:	f3 66 00 04 	st.b	r9[4],r6
8000a7d0:	f7 36 00 03 	ld.ub	r6,r11[3]
8000a7d4:	f3 66 00 03 	st.b	r9[3],r6
8000a7d8:	f7 36 00 02 	ld.ub	r6,r11[2]
8000a7dc:	f3 66 00 02 	st.b	r9[2],r6
8000a7e0:	f7 36 00 01 	ld.ub	r6,r11[1]
8000a7e4:	f3 66 00 01 	st.b	r9[1],r6
8000a7e8:	f7 36 00 00 	ld.ub	r6,r11[0]
8000a7ec:	f3 66 00 00 	st.b	r9[0],r6
8000a7f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a7f4:	20 1a       	sub	r10,1
8000a7f6:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000a7fa:	f8 0a 0b 09 	st.b	r12[r10],r9
8000a7fe:	cf b1       	brne	8000a7f4 <memcpy+0x13a>
8000a800:	5e fc       	retal	r12

8000a802 <memmove>:
8000a802:	d4 01       	pushm	lr
8000a804:	18 3b       	cp.w	r11,r12
8000a806:	c1 92       	brcc	8000a838 <memmove+0x36>
8000a808:	f6 0a 00 09 	add	r9,r11,r10
8000a80c:	12 3c       	cp.w	r12,r9
8000a80e:	c1 52       	brcc	8000a838 <memmove+0x36>
8000a810:	f8 0a 00 0b 	add	r11,r12,r10
8000a814:	30 08       	mov	r8,0
8000a816:	c0 68       	rjmp	8000a822 <memmove+0x20>
8000a818:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000a81c:	20 1a       	sub	r10,1
8000a81e:	f6 08 0b 0e 	st.b	r11[r8],lr
8000a822:	20 18       	sub	r8,1
8000a824:	58 0a       	cp.w	r10,0
8000a826:	cf 91       	brne	8000a818 <memmove+0x16>
8000a828:	d8 02       	popm	pc
8000a82a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000a82e:	20 1a       	sub	r10,1
8000a830:	f8 08 0b 09 	st.b	r12[r8],r9
8000a834:	2f f8       	sub	r8,-1
8000a836:	c0 28       	rjmp	8000a83a <memmove+0x38>
8000a838:	30 08       	mov	r8,0
8000a83a:	58 0a       	cp.w	r10,0
8000a83c:	cf 71       	brne	8000a82a <memmove+0x28>
8000a83e:	d8 02       	popm	pc

8000a840 <memset>:
8000a840:	18 98       	mov	r8,r12
8000a842:	c0 38       	rjmp	8000a848 <memset+0x8>
8000a844:	10 cb       	st.b	r8++,r11
8000a846:	20 1a       	sub	r10,1
8000a848:	58 0a       	cp.w	r10,0
8000a84a:	cf d1       	brne	8000a844 <memset+0x4>
8000a84c:	5e fc       	retal	r12

8000a84e <__malloc_lock>:
8000a84e:	5e fc       	retal	r12

8000a850 <__malloc_unlock>:
8000a850:	5e fc       	retal	r12

8000a852 <__hi0bits>:
8000a852:	18 98       	mov	r8,r12
8000a854:	e0 1c 00 00 	andl	r12,0x0
8000a858:	f0 09 15 10 	lsl	r9,r8,0x10
8000a85c:	58 0c       	cp.w	r12,0
8000a85e:	f2 08 17 00 	moveq	r8,r9
8000a862:	f9 bc 00 10 	moveq	r12,16
8000a866:	f9 bc 01 00 	movne	r12,0
8000a86a:	10 9a       	mov	r10,r8
8000a86c:	f0 09 15 08 	lsl	r9,r8,0x8
8000a870:	e6 1a ff 00 	andh	r10,0xff00,COH
8000a874:	f7 bc 00 f8 	subeq	r12,-8
8000a878:	f2 08 17 00 	moveq	r8,r9
8000a87c:	10 9a       	mov	r10,r8
8000a87e:	f0 09 15 04 	lsl	r9,r8,0x4
8000a882:	e6 1a f0 00 	andh	r10,0xf000,COH
8000a886:	f7 bc 00 fc 	subeq	r12,-4
8000a88a:	f2 08 17 00 	moveq	r8,r9
8000a88e:	10 9a       	mov	r10,r8
8000a890:	f0 09 15 02 	lsl	r9,r8,0x2
8000a894:	e6 1a c0 00 	andh	r10,0xc000,COH
8000a898:	f7 bc 00 fe 	subeq	r12,-2
8000a89c:	f2 08 17 00 	moveq	r8,r9
8000a8a0:	58 08       	cp.w	r8,0
8000a8a2:	5e 5c       	retlt	r12
8000a8a4:	ed b8 00 1e 	bld	r8,0x1e
8000a8a8:	f9 bc 01 20 	movne	r12,32
8000a8ac:	f7 bc 00 ff 	subeq	r12,-1
8000a8b0:	5e fc       	retal	r12

8000a8b2 <__lo0bits>:
8000a8b2:	18 99       	mov	r9,r12
8000a8b4:	78 08       	ld.w	r8,r12[0x0]
8000a8b6:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000a8ba:	c1 50       	breq	8000a8e4 <__lo0bits+0x32>
8000a8bc:	ed b8 00 00 	bld	r8,0x0
8000a8c0:	c0 21       	brne	8000a8c4 <__lo0bits+0x12>
8000a8c2:	5e fd       	retal	0
8000a8c4:	10 9b       	mov	r11,r8
8000a8c6:	f0 0a 16 01 	lsr	r10,r8,0x1
8000a8ca:	e2 1b 00 02 	andl	r11,0x2,COH
8000a8ce:	a3 88       	lsr	r8,0x2
8000a8d0:	58 0b       	cp.w	r11,0
8000a8d2:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000a8d6:	f9 bc 01 01 	movne	r12,1
8000a8da:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000a8de:	f9 bc 00 02 	moveq	r12,2
8000a8e2:	5e fc       	retal	r12
8000a8e4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000a8e8:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a8ec:	58 0a       	cp.w	r10,0
8000a8ee:	f6 08 17 00 	moveq	r8,r11
8000a8f2:	f9 bc 00 10 	moveq	r12,16
8000a8f6:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000a8fa:	f0 0a 16 08 	lsr	r10,r8,0x8
8000a8fe:	58 0b       	cp.w	r11,0
8000a900:	f7 bc 00 f8 	subeq	r12,-8
8000a904:	f4 08 17 00 	moveq	r8,r10
8000a908:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000a90c:	f0 0a 16 04 	lsr	r10,r8,0x4
8000a910:	58 0b       	cp.w	r11,0
8000a912:	f7 bc 00 fc 	subeq	r12,-4
8000a916:	f4 08 17 00 	moveq	r8,r10
8000a91a:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000a91e:	f0 0a 16 02 	lsr	r10,r8,0x2
8000a922:	58 0b       	cp.w	r11,0
8000a924:	f7 bc 00 fe 	subeq	r12,-2
8000a928:	f4 08 17 00 	moveq	r8,r10
8000a92c:	ed b8 00 00 	bld	r8,0x0
8000a930:	c0 60       	breq	8000a93c <__lo0bits+0x8a>
8000a932:	a1 98       	lsr	r8,0x1
8000a934:	c0 31       	brne	8000a93a <__lo0bits+0x88>
8000a936:	32 0c       	mov	r12,32
8000a938:	5e fc       	retal	r12
8000a93a:	2f fc       	sub	r12,-1
8000a93c:	93 08       	st.w	r9[0x0],r8
8000a93e:	5e fc       	retal	r12

8000a940 <__mcmp>:
8000a940:	d4 01       	pushm	lr
8000a942:	18 98       	mov	r8,r12
8000a944:	76 49       	ld.w	r9,r11[0x10]
8000a946:	78 4c       	ld.w	r12,r12[0x10]
8000a948:	12 1c       	sub	r12,r9
8000a94a:	c1 31       	brne	8000a970 <__mcmp+0x30>
8000a94c:	2f b9       	sub	r9,-5
8000a94e:	a3 69       	lsl	r9,0x2
8000a950:	12 0b       	add	r11,r9
8000a952:	f0 09 00 09 	add	r9,r8,r9
8000a956:	2e c8       	sub	r8,-20
8000a958:	13 4e       	ld.w	lr,--r9
8000a95a:	17 4a       	ld.w	r10,--r11
8000a95c:	14 3e       	cp.w	lr,r10
8000a95e:	c0 60       	breq	8000a96a <__mcmp+0x2a>
8000a960:	f9 bc 03 ff 	movlo	r12,-1
8000a964:	f9 bc 02 01 	movhs	r12,1
8000a968:	d8 02       	popm	pc
8000a96a:	10 39       	cp.w	r9,r8
8000a96c:	fe 9b ff f6 	brhi	8000a958 <__mcmp+0x18>
8000a970:	d8 02       	popm	pc
8000a972:	d7 03       	nop

8000a974 <_Bfree>:
8000a974:	d4 21       	pushm	r4-r7,lr
8000a976:	18 97       	mov	r7,r12
8000a978:	16 95       	mov	r5,r11
8000a97a:	78 96       	ld.w	r6,r12[0x24]
8000a97c:	58 06       	cp.w	r6,0
8000a97e:	c0 91       	brne	8000a990 <_Bfree+0x1c>
8000a980:	31 0c       	mov	r12,16
8000a982:	fe b0 fc 73 	rcall	8000a268 <malloc>
8000a986:	99 36       	st.w	r12[0xc],r6
8000a988:	8f 9c       	st.w	r7[0x24],r12
8000a98a:	99 16       	st.w	r12[0x4],r6
8000a98c:	99 26       	st.w	r12[0x8],r6
8000a98e:	99 06       	st.w	r12[0x0],r6
8000a990:	58 05       	cp.w	r5,0
8000a992:	c0 90       	breq	8000a9a4 <_Bfree+0x30>
8000a994:	6a 19       	ld.w	r9,r5[0x4]
8000a996:	6e 98       	ld.w	r8,r7[0x24]
8000a998:	70 38       	ld.w	r8,r8[0xc]
8000a99a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000a99e:	8b 0a       	st.w	r5[0x0],r10
8000a9a0:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000a9a4:	d8 22       	popm	r4-r7,pc
8000a9a6:	d7 03       	nop

8000a9a8 <_Balloc>:
8000a9a8:	d4 21       	pushm	r4-r7,lr
8000a9aa:	18 97       	mov	r7,r12
8000a9ac:	16 96       	mov	r6,r11
8000a9ae:	78 95       	ld.w	r5,r12[0x24]
8000a9b0:	58 05       	cp.w	r5,0
8000a9b2:	c0 91       	brne	8000a9c4 <_Balloc+0x1c>
8000a9b4:	31 0c       	mov	r12,16
8000a9b6:	fe b0 fc 59 	rcall	8000a268 <malloc>
8000a9ba:	99 35       	st.w	r12[0xc],r5
8000a9bc:	8f 9c       	st.w	r7[0x24],r12
8000a9be:	99 15       	st.w	r12[0x4],r5
8000a9c0:	99 25       	st.w	r12[0x8],r5
8000a9c2:	99 05       	st.w	r12[0x0],r5
8000a9c4:	6e 95       	ld.w	r5,r7[0x24]
8000a9c6:	6a 38       	ld.w	r8,r5[0xc]
8000a9c8:	58 08       	cp.w	r8,0
8000a9ca:	c0 b1       	brne	8000a9e0 <_Balloc+0x38>
8000a9cc:	31 0a       	mov	r10,16
8000a9ce:	30 4b       	mov	r11,4
8000a9d0:	0e 9c       	mov	r12,r7
8000a9d2:	e0 a0 04 a7 	rcall	8000b320 <_calloc_r>
8000a9d6:	8b 3c       	st.w	r5[0xc],r12
8000a9d8:	6e 98       	ld.w	r8,r7[0x24]
8000a9da:	70 3c       	ld.w	r12,r8[0xc]
8000a9dc:	58 0c       	cp.w	r12,0
8000a9de:	c1 b0       	breq	8000aa14 <_Balloc+0x6c>
8000a9e0:	6e 98       	ld.w	r8,r7[0x24]
8000a9e2:	70 38       	ld.w	r8,r8[0xc]
8000a9e4:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000a9e8:	70 0c       	ld.w	r12,r8[0x0]
8000a9ea:	58 0c       	cp.w	r12,0
8000a9ec:	c0 40       	breq	8000a9f4 <_Balloc+0x4c>
8000a9ee:	78 09       	ld.w	r9,r12[0x0]
8000a9f0:	91 09       	st.w	r8[0x0],r9
8000a9f2:	c0 e8       	rjmp	8000aa0e <_Balloc+0x66>
8000a9f4:	0e 9c       	mov	r12,r7
8000a9f6:	30 17       	mov	r7,1
8000a9f8:	0e 9b       	mov	r11,r7
8000a9fa:	ee 06 09 47 	lsl	r7,r7,r6
8000a9fe:	ee ca ff fb 	sub	r10,r7,-5
8000aa02:	a3 6a       	lsl	r10,0x2
8000aa04:	e0 a0 04 8e 	rcall	8000b320 <_calloc_r>
8000aa08:	c0 60       	breq	8000aa14 <_Balloc+0x6c>
8000aa0a:	99 16       	st.w	r12[0x4],r6
8000aa0c:	99 27       	st.w	r12[0x8],r7
8000aa0e:	30 08       	mov	r8,0
8000aa10:	99 38       	st.w	r12[0xc],r8
8000aa12:	99 48       	st.w	r12[0x10],r8
8000aa14:	d8 22       	popm	r4-r7,pc
8000aa16:	d7 03       	nop

8000aa18 <__d2b>:
8000aa18:	d4 31       	pushm	r0-r7,lr
8000aa1a:	20 2d       	sub	sp,8
8000aa1c:	16 93       	mov	r3,r11
8000aa1e:	12 96       	mov	r6,r9
8000aa20:	10 95       	mov	r5,r8
8000aa22:	14 92       	mov	r2,r10
8000aa24:	30 1b       	mov	r11,1
8000aa26:	cc 1f       	rcall	8000a9a8 <_Balloc>
8000aa28:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000aa2c:	50 09       	stdsp	sp[0x0],r9
8000aa2e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000aa32:	b5 a9       	sbr	r9,0x14
8000aa34:	f0 01 16 14 	lsr	r1,r8,0x14
8000aa38:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000aa3c:	18 94       	mov	r4,r12
8000aa3e:	58 02       	cp.w	r2,0
8000aa40:	c1 d0       	breq	8000aa7a <__d2b+0x62>
8000aa42:	fa cc ff f8 	sub	r12,sp,-8
8000aa46:	18 d2       	st.w	--r12,r2
8000aa48:	c3 5f       	rcall	8000a8b2 <__lo0bits>
8000aa4a:	40 18       	lddsp	r8,sp[0x4]
8000aa4c:	c0 d0       	breq	8000aa66 <__d2b+0x4e>
8000aa4e:	40 09       	lddsp	r9,sp[0x0]
8000aa50:	f8 0a 11 20 	rsub	r10,r12,32
8000aa54:	f2 0a 09 4a 	lsl	r10,r9,r10
8000aa58:	f5 e8 10 08 	or	r8,r10,r8
8000aa5c:	89 58       	st.w	r4[0x14],r8
8000aa5e:	f2 0c 0a 49 	lsr	r9,r9,r12
8000aa62:	50 09       	stdsp	sp[0x0],r9
8000aa64:	c0 28       	rjmp	8000aa68 <__d2b+0x50>
8000aa66:	89 58       	st.w	r4[0x14],r8
8000aa68:	40 08       	lddsp	r8,sp[0x0]
8000aa6a:	58 08       	cp.w	r8,0
8000aa6c:	f9 b3 01 02 	movne	r3,2
8000aa70:	f9 b3 00 01 	moveq	r3,1
8000aa74:	89 68       	st.w	r4[0x18],r8
8000aa76:	89 43       	st.w	r4[0x10],r3
8000aa78:	c0 88       	rjmp	8000aa88 <__d2b+0x70>
8000aa7a:	1a 9c       	mov	r12,sp
8000aa7c:	c1 bf       	rcall	8000a8b2 <__lo0bits>
8000aa7e:	30 13       	mov	r3,1
8000aa80:	40 08       	lddsp	r8,sp[0x0]
8000aa82:	2e 0c       	sub	r12,-32
8000aa84:	89 43       	st.w	r4[0x10],r3
8000aa86:	89 58       	st.w	r4[0x14],r8
8000aa88:	58 01       	cp.w	r1,0
8000aa8a:	c0 90       	breq	8000aa9c <__d2b+0x84>
8000aa8c:	e2 c1 04 33 	sub	r1,r1,1075
8000aa90:	18 01       	add	r1,r12
8000aa92:	8d 01       	st.w	r6[0x0],r1
8000aa94:	f8 0c 11 35 	rsub	r12,r12,53
8000aa98:	8b 0c       	st.w	r5[0x0],r12
8000aa9a:	c0 c8       	rjmp	8000aab2 <__d2b+0x9a>
8000aa9c:	e6 c8 ff fc 	sub	r8,r3,-4
8000aaa0:	f8 cc 04 32 	sub	r12,r12,1074
8000aaa4:	a5 73       	lsl	r3,0x5
8000aaa6:	8d 0c       	st.w	r6[0x0],r12
8000aaa8:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000aaac:	cd 3e       	rcall	8000a852 <__hi0bits>
8000aaae:	18 13       	sub	r3,r12
8000aab0:	8b 03       	st.w	r5[0x0],r3
8000aab2:	08 9c       	mov	r12,r4
8000aab4:	2f ed       	sub	sp,-8
8000aab6:	d8 32       	popm	r0-r7,pc

8000aab8 <__mdiff>:
8000aab8:	d4 31       	pushm	r0-r7,lr
8000aaba:	74 48       	ld.w	r8,r10[0x10]
8000aabc:	76 45       	ld.w	r5,r11[0x10]
8000aabe:	16 97       	mov	r7,r11
8000aac0:	14 96       	mov	r6,r10
8000aac2:	10 15       	sub	r5,r8
8000aac4:	c1 31       	brne	8000aaea <__mdiff+0x32>
8000aac6:	2f b8       	sub	r8,-5
8000aac8:	ee ce ff ec 	sub	lr,r7,-20
8000aacc:	a3 68       	lsl	r8,0x2
8000aace:	f4 08 00 0b 	add	r11,r10,r8
8000aad2:	ee 08 00 08 	add	r8,r7,r8
8000aad6:	11 4a       	ld.w	r10,--r8
8000aad8:	17 49       	ld.w	r9,--r11
8000aada:	12 3a       	cp.w	r10,r9
8000aadc:	c0 30       	breq	8000aae2 <__mdiff+0x2a>
8000aade:	c0 e2       	brcc	8000aafa <__mdiff+0x42>
8000aae0:	c0 78       	rjmp	8000aaee <__mdiff+0x36>
8000aae2:	1c 38       	cp.w	r8,lr
8000aae4:	fe 9b ff f9 	brhi	8000aad6 <__mdiff+0x1e>
8000aae8:	c4 98       	rjmp	8000ab7a <__mdiff+0xc2>
8000aaea:	58 05       	cp.w	r5,0
8000aaec:	c0 64       	brge	8000aaf8 <__mdiff+0x40>
8000aaee:	0e 98       	mov	r8,r7
8000aaf0:	30 15       	mov	r5,1
8000aaf2:	0c 97       	mov	r7,r6
8000aaf4:	10 96       	mov	r6,r8
8000aaf6:	c0 28       	rjmp	8000aafa <__mdiff+0x42>
8000aaf8:	30 05       	mov	r5,0
8000aafa:	6e 1b       	ld.w	r11,r7[0x4]
8000aafc:	c5 6f       	rcall	8000a9a8 <_Balloc>
8000aafe:	6e 49       	ld.w	r9,r7[0x10]
8000ab00:	6c 44       	ld.w	r4,r6[0x10]
8000ab02:	99 35       	st.w	r12[0xc],r5
8000ab04:	2f b4       	sub	r4,-5
8000ab06:	f2 c5 ff fb 	sub	r5,r9,-5
8000ab0a:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000ab0e:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000ab12:	2e c6       	sub	r6,-20
8000ab14:	2e c7       	sub	r7,-20
8000ab16:	f8 c8 ff ec 	sub	r8,r12,-20
8000ab1a:	30 0a       	mov	r10,0
8000ab1c:	0f 0e       	ld.w	lr,r7++
8000ab1e:	0d 0b       	ld.w	r11,r6++
8000ab20:	fc 02 16 10 	lsr	r2,lr,0x10
8000ab24:	f6 03 16 10 	lsr	r3,r11,0x10
8000ab28:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000ab2c:	e4 03 01 03 	sub	r3,r2,r3
8000ab30:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000ab34:	fc 0b 01 0b 	sub	r11,lr,r11
8000ab38:	f6 0a 00 0a 	add	r10,r11,r10
8000ab3c:	b0 1a       	st.h	r8[0x2],r10
8000ab3e:	b1 4a       	asr	r10,0x10
8000ab40:	e6 0a 00 0a 	add	r10,r3,r10
8000ab44:	b0 0a       	st.h	r8[0x0],r10
8000ab46:	2f c8       	sub	r8,-4
8000ab48:	b1 4a       	asr	r10,0x10
8000ab4a:	08 36       	cp.w	r6,r4
8000ab4c:	ce 83       	brcs	8000ab1c <__mdiff+0x64>
8000ab4e:	c0 d8       	rjmp	8000ab68 <__mdiff+0xb0>
8000ab50:	0f 0b       	ld.w	r11,r7++
8000ab52:	f6 0e 16 10 	lsr	lr,r11,0x10
8000ab56:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000ab5a:	16 0a       	add	r10,r11
8000ab5c:	b0 1a       	st.h	r8[0x2],r10
8000ab5e:	b1 4a       	asr	r10,0x10
8000ab60:	1c 0a       	add	r10,lr
8000ab62:	b0 0a       	st.h	r8[0x0],r10
8000ab64:	2f c8       	sub	r8,-4
8000ab66:	b1 4a       	asr	r10,0x10
8000ab68:	0a 37       	cp.w	r7,r5
8000ab6a:	cf 33       	brcs	8000ab50 <__mdiff+0x98>
8000ab6c:	c0 28       	rjmp	8000ab70 <__mdiff+0xb8>
8000ab6e:	20 19       	sub	r9,1
8000ab70:	11 4a       	ld.w	r10,--r8
8000ab72:	58 0a       	cp.w	r10,0
8000ab74:	cf d0       	breq	8000ab6e <__mdiff+0xb6>
8000ab76:	99 49       	st.w	r12[0x10],r9
8000ab78:	d8 32       	popm	r0-r7,pc
8000ab7a:	30 0b       	mov	r11,0
8000ab7c:	c1 6f       	rcall	8000a9a8 <_Balloc>
8000ab7e:	30 18       	mov	r8,1
8000ab80:	99 48       	st.w	r12[0x10],r8
8000ab82:	30 08       	mov	r8,0
8000ab84:	99 58       	st.w	r12[0x14],r8
8000ab86:	d8 32       	popm	r0-r7,pc

8000ab88 <__lshift>:
8000ab88:	d4 31       	pushm	r0-r7,lr
8000ab8a:	16 97       	mov	r7,r11
8000ab8c:	76 46       	ld.w	r6,r11[0x10]
8000ab8e:	f4 02 14 05 	asr	r2,r10,0x5
8000ab92:	2f f6       	sub	r6,-1
8000ab94:	14 93       	mov	r3,r10
8000ab96:	18 94       	mov	r4,r12
8000ab98:	04 06       	add	r6,r2
8000ab9a:	76 1b       	ld.w	r11,r11[0x4]
8000ab9c:	6e 28       	ld.w	r8,r7[0x8]
8000ab9e:	c0 38       	rjmp	8000aba4 <__lshift+0x1c>
8000aba0:	2f fb       	sub	r11,-1
8000aba2:	a1 78       	lsl	r8,0x1
8000aba4:	10 36       	cp.w	r6,r8
8000aba6:	fe 99 ff fd 	brgt	8000aba0 <__lshift+0x18>
8000abaa:	08 9c       	mov	r12,r4
8000abac:	cf ee       	rcall	8000a9a8 <_Balloc>
8000abae:	30 09       	mov	r9,0
8000abb0:	18 95       	mov	r5,r12
8000abb2:	f8 c8 ff ec 	sub	r8,r12,-20
8000abb6:	12 9a       	mov	r10,r9
8000abb8:	c0 38       	rjmp	8000abbe <__lshift+0x36>
8000abba:	10 aa       	st.w	r8++,r10
8000abbc:	2f f9       	sub	r9,-1
8000abbe:	04 39       	cp.w	r9,r2
8000abc0:	cf d5       	brlt	8000abba <__lshift+0x32>
8000abc2:	6e 4b       	ld.w	r11,r7[0x10]
8000abc4:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000abc8:	2f bb       	sub	r11,-5
8000abca:	ee c9 ff ec 	sub	r9,r7,-20
8000abce:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000abd2:	58 03       	cp.w	r3,0
8000abd4:	c1 30       	breq	8000abfa <__lshift+0x72>
8000abd6:	e6 0c 11 20 	rsub	r12,r3,32
8000abda:	30 0a       	mov	r10,0
8000abdc:	72 02       	ld.w	r2,r9[0x0]
8000abde:	e4 03 09 42 	lsl	r2,r2,r3
8000abe2:	04 4a       	or	r10,r2
8000abe4:	10 aa       	st.w	r8++,r10
8000abe6:	13 0a       	ld.w	r10,r9++
8000abe8:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000abec:	16 39       	cp.w	r9,r11
8000abee:	cf 73       	brcs	8000abdc <__lshift+0x54>
8000abf0:	91 0a       	st.w	r8[0x0],r10
8000abf2:	58 0a       	cp.w	r10,0
8000abf4:	c0 70       	breq	8000ac02 <__lshift+0x7a>
8000abf6:	2f f6       	sub	r6,-1
8000abf8:	c0 58       	rjmp	8000ac02 <__lshift+0x7a>
8000abfa:	13 0a       	ld.w	r10,r9++
8000abfc:	10 aa       	st.w	r8++,r10
8000abfe:	16 39       	cp.w	r9,r11
8000ac00:	cf d3       	brcs	8000abfa <__lshift+0x72>
8000ac02:	08 9c       	mov	r12,r4
8000ac04:	20 16       	sub	r6,1
8000ac06:	0e 9b       	mov	r11,r7
8000ac08:	8b 46       	st.w	r5[0x10],r6
8000ac0a:	cb 5e       	rcall	8000a974 <_Bfree>
8000ac0c:	0a 9c       	mov	r12,r5
8000ac0e:	d8 32       	popm	r0-r7,pc

8000ac10 <__multiply>:
8000ac10:	d4 31       	pushm	r0-r7,lr
8000ac12:	20 2d       	sub	sp,8
8000ac14:	76 49       	ld.w	r9,r11[0x10]
8000ac16:	74 48       	ld.w	r8,r10[0x10]
8000ac18:	16 96       	mov	r6,r11
8000ac1a:	14 95       	mov	r5,r10
8000ac1c:	10 39       	cp.w	r9,r8
8000ac1e:	ec 08 17 50 	movlt	r8,r6
8000ac22:	ea 06 17 50 	movlt	r6,r5
8000ac26:	f0 05 17 50 	movlt	r5,r8
8000ac2a:	6c 28       	ld.w	r8,r6[0x8]
8000ac2c:	76 43       	ld.w	r3,r11[0x10]
8000ac2e:	74 42       	ld.w	r2,r10[0x10]
8000ac30:	76 1b       	ld.w	r11,r11[0x4]
8000ac32:	e4 03 00 07 	add	r7,r2,r3
8000ac36:	10 37       	cp.w	r7,r8
8000ac38:	f7 bb 09 ff 	subgt	r11,-1
8000ac3c:	cb 6e       	rcall	8000a9a8 <_Balloc>
8000ac3e:	ee c4 ff fb 	sub	r4,r7,-5
8000ac42:	f8 c9 ff ec 	sub	r9,r12,-20
8000ac46:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000ac4a:	30 0a       	mov	r10,0
8000ac4c:	12 98       	mov	r8,r9
8000ac4e:	c0 28       	rjmp	8000ac52 <__multiply+0x42>
8000ac50:	10 aa       	st.w	r8++,r10
8000ac52:	08 38       	cp.w	r8,r4
8000ac54:	cf e3       	brcs	8000ac50 <__multiply+0x40>
8000ac56:	2f b3       	sub	r3,-5
8000ac58:	2f b2       	sub	r2,-5
8000ac5a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000ac5e:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000ac62:	ec cb ff ec 	sub	r11,r6,-20
8000ac66:	50 12       	stdsp	sp[0x4],r2
8000ac68:	ea ca ff ec 	sub	r10,r5,-20
8000ac6c:	c4 48       	rjmp	8000acf4 <__multiply+0xe4>
8000ac6e:	94 95       	ld.uh	r5,r10[0x2]
8000ac70:	58 05       	cp.w	r5,0
8000ac72:	c2 00       	breq	8000acb2 <__multiply+0xa2>
8000ac74:	12 98       	mov	r8,r9
8000ac76:	16 96       	mov	r6,r11
8000ac78:	30 0e       	mov	lr,0
8000ac7a:	50 09       	stdsp	sp[0x0],r9
8000ac7c:	0d 02       	ld.w	r2,r6++
8000ac7e:	e4 00 16 10 	lsr	r0,r2,0x10
8000ac82:	70 01       	ld.w	r1,r8[0x0]
8000ac84:	70 09       	ld.w	r9,r8[0x0]
8000ac86:	b1 81       	lsr	r1,0x10
8000ac88:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000ac8c:	e0 05 03 41 	mac	r1,r0,r5
8000ac90:	ab 32       	mul	r2,r5
8000ac92:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000ac96:	00 02       	add	r2,r0
8000ac98:	e4 0e 00 0e 	add	lr,r2,lr
8000ac9c:	b0 1e       	st.h	r8[0x2],lr
8000ac9e:	b1 8e       	lsr	lr,0x10
8000aca0:	1c 01       	add	r1,lr
8000aca2:	b0 01       	st.h	r8[0x0],r1
8000aca4:	e2 0e 16 10 	lsr	lr,r1,0x10
8000aca8:	2f c8       	sub	r8,-4
8000acaa:	06 36       	cp.w	r6,r3
8000acac:	ce 83       	brcs	8000ac7c <__multiply+0x6c>
8000acae:	40 09       	lddsp	r9,sp[0x0]
8000acb0:	91 0e       	st.w	r8[0x0],lr
8000acb2:	94 86       	ld.uh	r6,r10[0x0]
8000acb4:	58 06       	cp.w	r6,0
8000acb6:	c1 d0       	breq	8000acf0 <__multiply+0xe0>
8000acb8:	72 02       	ld.w	r2,r9[0x0]
8000acba:	12 98       	mov	r8,r9
8000acbc:	16 9e       	mov	lr,r11
8000acbe:	30 05       	mov	r5,0
8000acc0:	b0 12       	st.h	r8[0x2],r2
8000acc2:	1d 01       	ld.w	r1,lr++
8000acc4:	90 82       	ld.uh	r2,r8[0x0]
8000acc6:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000acca:	ad 30       	mul	r0,r6
8000accc:	e0 02 00 02 	add	r2,r0,r2
8000acd0:	e4 05 00 05 	add	r5,r2,r5
8000acd4:	b0 05       	st.h	r8[0x0],r5
8000acd6:	b1 85       	lsr	r5,0x10
8000acd8:	b1 81       	lsr	r1,0x10
8000acda:	2f c8       	sub	r8,-4
8000acdc:	ad 31       	mul	r1,r6
8000acde:	90 92       	ld.uh	r2,r8[0x2]
8000ace0:	e2 02 00 02 	add	r2,r1,r2
8000ace4:	0a 02       	add	r2,r5
8000ace6:	e4 05 16 10 	lsr	r5,r2,0x10
8000acea:	06 3e       	cp.w	lr,r3
8000acec:	ce a3       	brcs	8000acc0 <__multiply+0xb0>
8000acee:	91 02       	st.w	r8[0x0],r2
8000acf0:	2f ca       	sub	r10,-4
8000acf2:	2f c9       	sub	r9,-4
8000acf4:	40 18       	lddsp	r8,sp[0x4]
8000acf6:	10 3a       	cp.w	r10,r8
8000acf8:	cb b3       	brcs	8000ac6e <__multiply+0x5e>
8000acfa:	c0 28       	rjmp	8000acfe <__multiply+0xee>
8000acfc:	20 17       	sub	r7,1
8000acfe:	58 07       	cp.w	r7,0
8000ad00:	e0 8a 00 05 	brle	8000ad0a <__multiply+0xfa>
8000ad04:	09 48       	ld.w	r8,--r4
8000ad06:	58 08       	cp.w	r8,0
8000ad08:	cf a0       	breq	8000acfc <__multiply+0xec>
8000ad0a:	99 47       	st.w	r12[0x10],r7
8000ad0c:	2f ed       	sub	sp,-8
8000ad0e:	d8 32       	popm	r0-r7,pc

8000ad10 <__i2b>:
8000ad10:	d4 21       	pushm	r4-r7,lr
8000ad12:	16 97       	mov	r7,r11
8000ad14:	30 1b       	mov	r11,1
8000ad16:	c4 9e       	rcall	8000a9a8 <_Balloc>
8000ad18:	30 19       	mov	r9,1
8000ad1a:	99 57       	st.w	r12[0x14],r7
8000ad1c:	99 49       	st.w	r12[0x10],r9
8000ad1e:	d8 22       	popm	r4-r7,pc

8000ad20 <__multadd>:
8000ad20:	d4 31       	pushm	r0-r7,lr
8000ad22:	30 08       	mov	r8,0
8000ad24:	12 95       	mov	r5,r9
8000ad26:	16 97       	mov	r7,r11
8000ad28:	18 96       	mov	r6,r12
8000ad2a:	76 44       	ld.w	r4,r11[0x10]
8000ad2c:	f6 c9 ff ec 	sub	r9,r11,-20
8000ad30:	72 0b       	ld.w	r11,r9[0x0]
8000ad32:	f6 0c 16 10 	lsr	r12,r11,0x10
8000ad36:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000ad3a:	f4 0c 02 4c 	mul	r12,r10,r12
8000ad3e:	f4 0b 03 45 	mac	r5,r10,r11
8000ad42:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000ad46:	b1 85       	lsr	r5,0x10
8000ad48:	18 05       	add	r5,r12
8000ad4a:	ea 0c 15 10 	lsl	r12,r5,0x10
8000ad4e:	f8 0b 00 0b 	add	r11,r12,r11
8000ad52:	12 ab       	st.w	r9++,r11
8000ad54:	2f f8       	sub	r8,-1
8000ad56:	b1 85       	lsr	r5,0x10
8000ad58:	08 38       	cp.w	r8,r4
8000ad5a:	ce b5       	brlt	8000ad30 <__multadd+0x10>
8000ad5c:	58 05       	cp.w	r5,0
8000ad5e:	c1 c0       	breq	8000ad96 <__multadd+0x76>
8000ad60:	6e 28       	ld.w	r8,r7[0x8]
8000ad62:	10 34       	cp.w	r4,r8
8000ad64:	c1 35       	brlt	8000ad8a <__multadd+0x6a>
8000ad66:	6e 1b       	ld.w	r11,r7[0x4]
8000ad68:	0c 9c       	mov	r12,r6
8000ad6a:	2f fb       	sub	r11,-1
8000ad6c:	c1 ee       	rcall	8000a9a8 <_Balloc>
8000ad6e:	6e 4a       	ld.w	r10,r7[0x10]
8000ad70:	ee cb ff f4 	sub	r11,r7,-12
8000ad74:	18 93       	mov	r3,r12
8000ad76:	2f ea       	sub	r10,-2
8000ad78:	2f 4c       	sub	r12,-12
8000ad7a:	a3 6a       	lsl	r10,0x2
8000ad7c:	fe b0 fc 9f 	rcall	8000a6ba <memcpy>
8000ad80:	0e 9b       	mov	r11,r7
8000ad82:	0c 9c       	mov	r12,r6
8000ad84:	fe b0 fd f8 	rcall	8000a974 <_Bfree>
8000ad88:	06 97       	mov	r7,r3
8000ad8a:	e8 c8 ff ff 	sub	r8,r4,-1
8000ad8e:	2f b4       	sub	r4,-5
8000ad90:	8f 48       	st.w	r7[0x10],r8
8000ad92:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000ad96:	0e 9c       	mov	r12,r7
8000ad98:	d8 32       	popm	r0-r7,pc
8000ad9a:	d7 03       	nop

8000ad9c <__pow5mult>:
8000ad9c:	d4 31       	pushm	r0-r7,lr
8000ad9e:	14 96       	mov	r6,r10
8000ada0:	18 97       	mov	r7,r12
8000ada2:	16 94       	mov	r4,r11
8000ada4:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000ada8:	c0 80       	breq	8000adb8 <__pow5mult+0x1c>
8000adaa:	20 18       	sub	r8,1
8000adac:	49 f9       	lddpc	r9,8000ae28 <__pow5mult+0x8c>
8000adae:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000adb2:	30 09       	mov	r9,0
8000adb4:	cb 6f       	rcall	8000ad20 <__multadd>
8000adb6:	18 94       	mov	r4,r12
8000adb8:	a3 46       	asr	r6,0x2
8000adba:	c3 40       	breq	8000ae22 <__pow5mult+0x86>
8000adbc:	6e 95       	ld.w	r5,r7[0x24]
8000adbe:	58 05       	cp.w	r5,0
8000adc0:	c0 91       	brne	8000add2 <__pow5mult+0x36>
8000adc2:	31 0c       	mov	r12,16
8000adc4:	fe b0 fa 52 	rcall	8000a268 <malloc>
8000adc8:	99 35       	st.w	r12[0xc],r5
8000adca:	8f 9c       	st.w	r7[0x24],r12
8000adcc:	99 15       	st.w	r12[0x4],r5
8000adce:	99 25       	st.w	r12[0x8],r5
8000add0:	99 05       	st.w	r12[0x0],r5
8000add2:	6e 93       	ld.w	r3,r7[0x24]
8000add4:	66 25       	ld.w	r5,r3[0x8]
8000add6:	58 05       	cp.w	r5,0
8000add8:	c0 c1       	brne	8000adf0 <__pow5mult+0x54>
8000adda:	e0 6b 02 71 	mov	r11,625
8000adde:	0e 9c       	mov	r12,r7
8000ade0:	c9 8f       	rcall	8000ad10 <__i2b>
8000ade2:	87 2c       	st.w	r3[0x8],r12
8000ade4:	30 08       	mov	r8,0
8000ade6:	18 95       	mov	r5,r12
8000ade8:	99 08       	st.w	r12[0x0],r8
8000adea:	c0 38       	rjmp	8000adf0 <__pow5mult+0x54>
8000adec:	06 9c       	mov	r12,r3
8000adee:	18 95       	mov	r5,r12
8000adf0:	ed b6 00 00 	bld	r6,0x0
8000adf4:	c0 b1       	brne	8000ae0a <__pow5mult+0x6e>
8000adf6:	08 9b       	mov	r11,r4
8000adf8:	0a 9a       	mov	r10,r5
8000adfa:	0e 9c       	mov	r12,r7
8000adfc:	c0 af       	rcall	8000ac10 <__multiply>
8000adfe:	08 9b       	mov	r11,r4
8000ae00:	18 93       	mov	r3,r12
8000ae02:	0e 9c       	mov	r12,r7
8000ae04:	06 94       	mov	r4,r3
8000ae06:	fe b0 fd b7 	rcall	8000a974 <_Bfree>
8000ae0a:	a1 56       	asr	r6,0x1
8000ae0c:	c0 b0       	breq	8000ae22 <__pow5mult+0x86>
8000ae0e:	6a 03       	ld.w	r3,r5[0x0]
8000ae10:	58 03       	cp.w	r3,0
8000ae12:	ce d1       	brne	8000adec <__pow5mult+0x50>
8000ae14:	0a 9a       	mov	r10,r5
8000ae16:	0a 9b       	mov	r11,r5
8000ae18:	0e 9c       	mov	r12,r7
8000ae1a:	cf be       	rcall	8000ac10 <__multiply>
8000ae1c:	8b 0c       	st.w	r5[0x0],r12
8000ae1e:	99 03       	st.w	r12[0x0],r3
8000ae20:	ce 7b       	rjmp	8000adee <__pow5mult+0x52>
8000ae22:	08 9c       	mov	r12,r4
8000ae24:	d8 32       	popm	r0-r7,pc
8000ae26:	d7 03       	nop
8000ae28:	80 00       	ld.sh	r0,r0[0x0]
8000ae2a:	d4 74       	*unknown*

8000ae2c <_realloc_r>:
8000ae2c:	d4 31       	pushm	r0-r7,lr
8000ae2e:	20 1d       	sub	sp,4
8000ae30:	16 94       	mov	r4,r11
8000ae32:	18 92       	mov	r2,r12
8000ae34:	14 9b       	mov	r11,r10
8000ae36:	58 04       	cp.w	r4,0
8000ae38:	c0 51       	brne	8000ae42 <_realloc_r+0x16>
8000ae3a:	fe b0 fa 1f 	rcall	8000a278 <_malloc_r>
8000ae3e:	18 95       	mov	r5,r12
8000ae40:	c5 59       	rjmp	8000b0ea <_realloc_r+0x2be>
8000ae42:	50 0a       	stdsp	sp[0x0],r10
8000ae44:	fe b0 fd 05 	rcall	8000a84e <__malloc_lock>
8000ae48:	40 0b       	lddsp	r11,sp[0x0]
8000ae4a:	f6 c8 ff f5 	sub	r8,r11,-11
8000ae4e:	e8 c1 00 08 	sub	r1,r4,8
8000ae52:	10 96       	mov	r6,r8
8000ae54:	62 1c       	ld.w	r12,r1[0x4]
8000ae56:	e0 16 ff f8 	andl	r6,0xfff8
8000ae5a:	59 68       	cp.w	r8,22
8000ae5c:	f9 b6 08 10 	movls	r6,16
8000ae60:	16 36       	cp.w	r6,r11
8000ae62:	5f 38       	srlo	r8
8000ae64:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000ae68:	c0 50       	breq	8000ae72 <_realloc_r+0x46>
8000ae6a:	30 c8       	mov	r8,12
8000ae6c:	30 05       	mov	r5,0
8000ae6e:	85 38       	st.w	r2[0xc],r8
8000ae70:	c3 d9       	rjmp	8000b0ea <_realloc_r+0x2be>
8000ae72:	18 90       	mov	r0,r12
8000ae74:	e0 10 ff fc 	andl	r0,0xfffc
8000ae78:	0c 30       	cp.w	r0,r6
8000ae7a:	e0 84 01 0d 	brge	8000b094 <_realloc_r+0x268>
8000ae7e:	4c a8       	lddpc	r8,8000afa4 <_realloc_r+0x178>
8000ae80:	e2 00 00 09 	add	r9,r1,r0
8000ae84:	70 25       	ld.w	r5,r8[0x8]
8000ae86:	0a 39       	cp.w	r9,r5
8000ae88:	c0 90       	breq	8000ae9a <_realloc_r+0x6e>
8000ae8a:	72 1a       	ld.w	r10,r9[0x4]
8000ae8c:	a1 ca       	cbr	r10,0x0
8000ae8e:	f2 0a 00 0a 	add	r10,r9,r10
8000ae92:	74 1a       	ld.w	r10,r10[0x4]
8000ae94:	ed ba 00 00 	bld	r10,0x0
8000ae98:	c2 20       	breq	8000aedc <_realloc_r+0xb0>
8000ae9a:	72 1a       	ld.w	r10,r9[0x4]
8000ae9c:	e0 1a ff fc 	andl	r10,0xfffc
8000aea0:	f4 00 00 03 	add	r3,r10,r0
8000aea4:	0a 39       	cp.w	r9,r5
8000aea6:	c1 31       	brne	8000aecc <_realloc_r+0xa0>
8000aea8:	ec c7 ff f0 	sub	r7,r6,-16
8000aeac:	0e 33       	cp.w	r3,r7
8000aeae:	c1 95       	brlt	8000aee0 <_realloc_r+0xb4>
8000aeb0:	e2 06 00 09 	add	r9,r1,r6
8000aeb4:	0c 13       	sub	r3,r6
8000aeb6:	a1 a3       	sbr	r3,0x0
8000aeb8:	93 13       	st.w	r9[0x4],r3
8000aeba:	91 29       	st.w	r8[0x8],r9
8000aebc:	04 9c       	mov	r12,r2
8000aebe:	62 18       	ld.w	r8,r1[0x4]
8000aec0:	08 95       	mov	r5,r4
8000aec2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000aec6:	10 46       	or	r6,r8
8000aec8:	83 16       	st.w	r1[0x4],r6
8000aeca:	c0 e9       	rjmp	8000b0e6 <_realloc_r+0x2ba>
8000aecc:	0c 33       	cp.w	r3,r6
8000aece:	c0 95       	brlt	8000aee0 <_realloc_r+0xb4>
8000aed0:	72 28       	ld.w	r8,r9[0x8]
8000aed2:	02 97       	mov	r7,r1
8000aed4:	72 39       	ld.w	r9,r9[0xc]
8000aed6:	93 28       	st.w	r9[0x8],r8
8000aed8:	91 39       	st.w	r8[0xc],r9
8000aeda:	cd f8       	rjmp	8000b098 <_realloc_r+0x26c>
8000aedc:	30 0a       	mov	r10,0
8000aede:	14 99       	mov	r9,r10
8000aee0:	ed bc 00 00 	bld	r12,0x0
8000aee4:	e0 80 00 98 	breq	8000b014 <_realloc_r+0x1e8>
8000aee8:	62 07       	ld.w	r7,r1[0x0]
8000aeea:	e2 07 01 07 	sub	r7,r1,r7
8000aeee:	6e 1c       	ld.w	r12,r7[0x4]
8000aef0:	e0 1c ff fc 	andl	r12,0xfffc
8000aef4:	58 09       	cp.w	r9,0
8000aef6:	c5 90       	breq	8000afa8 <_realloc_r+0x17c>
8000aef8:	f8 00 00 03 	add	r3,r12,r0
8000aefc:	0a 39       	cp.w	r9,r5
8000aefe:	c4 81       	brne	8000af8e <_realloc_r+0x162>
8000af00:	14 03       	add	r3,r10
8000af02:	ec c9 ff f0 	sub	r9,r6,-16
8000af06:	12 33       	cp.w	r3,r9
8000af08:	c5 05       	brlt	8000afa8 <_realloc_r+0x17c>
8000af0a:	6e 3a       	ld.w	r10,r7[0xc]
8000af0c:	6e 29       	ld.w	r9,r7[0x8]
8000af0e:	95 29       	st.w	r10[0x8],r9
8000af10:	93 3a       	st.w	r9[0xc],r10
8000af12:	ee c5 ff f8 	sub	r5,r7,-8
8000af16:	e0 ca 00 04 	sub	r10,r0,4
8000af1a:	e0 4a 00 24 	cp.w	r10,36
8000af1e:	e0 8b 00 25 	brhi	8000af68 <_realloc_r+0x13c>
8000af22:	0a 99       	mov	r9,r5
8000af24:	59 3a       	cp.w	r10,19
8000af26:	e0 88 00 1a 	brls	8000af5a <_realloc_r+0x12e>
8000af2a:	09 09       	ld.w	r9,r4++
8000af2c:	8b 09       	st.w	r5[0x0],r9
8000af2e:	09 09       	ld.w	r9,r4++
8000af30:	8f 39       	st.w	r7[0xc],r9
8000af32:	ee c9 ff f0 	sub	r9,r7,-16
8000af36:	59 ba       	cp.w	r10,27
8000af38:	e0 88 00 11 	brls	8000af5a <_realloc_r+0x12e>
8000af3c:	09 0b       	ld.w	r11,r4++
8000af3e:	93 0b       	st.w	r9[0x0],r11
8000af40:	09 09       	ld.w	r9,r4++
8000af42:	8f 59       	st.w	r7[0x14],r9
8000af44:	ee c9 ff e8 	sub	r9,r7,-24
8000af48:	e0 4a 00 24 	cp.w	r10,36
8000af4c:	c0 71       	brne	8000af5a <_realloc_r+0x12e>
8000af4e:	09 0a       	ld.w	r10,r4++
8000af50:	93 0a       	st.w	r9[0x0],r10
8000af52:	ee c9 ff e0 	sub	r9,r7,-32
8000af56:	09 0a       	ld.w	r10,r4++
8000af58:	8f 7a       	st.w	r7[0x1c],r10
8000af5a:	09 0a       	ld.w	r10,r4++
8000af5c:	12 aa       	st.w	r9++,r10
8000af5e:	68 0a       	ld.w	r10,r4[0x0]
8000af60:	93 0a       	st.w	r9[0x0],r10
8000af62:	68 1a       	ld.w	r10,r4[0x4]
8000af64:	93 1a       	st.w	r9[0x4],r10
8000af66:	c0 78       	rjmp	8000af74 <_realloc_r+0x148>
8000af68:	50 08       	stdsp	sp[0x0],r8
8000af6a:	08 9b       	mov	r11,r4
8000af6c:	0a 9c       	mov	r12,r5
8000af6e:	fe b0 fc 4a 	rcall	8000a802 <memmove>
8000af72:	40 08       	lddsp	r8,sp[0x0]
8000af74:	ee 06 00 09 	add	r9,r7,r6
8000af78:	0c 13       	sub	r3,r6
8000af7a:	a1 a3       	sbr	r3,0x0
8000af7c:	93 13       	st.w	r9[0x4],r3
8000af7e:	91 29       	st.w	r8[0x8],r9
8000af80:	04 9c       	mov	r12,r2
8000af82:	6e 18       	ld.w	r8,r7[0x4]
8000af84:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000af88:	10 46       	or	r6,r8
8000af8a:	8f 16       	st.w	r7[0x4],r6
8000af8c:	ca d8       	rjmp	8000b0e6 <_realloc_r+0x2ba>
8000af8e:	14 03       	add	r3,r10
8000af90:	0c 33       	cp.w	r3,r6
8000af92:	c0 b5       	brlt	8000afa8 <_realloc_r+0x17c>
8000af94:	72 28       	ld.w	r8,r9[0x8]
8000af96:	72 39       	ld.w	r9,r9[0xc]
8000af98:	93 28       	st.w	r9[0x8],r8
8000af9a:	91 39       	st.w	r8[0xc],r9
8000af9c:	6e 28       	ld.w	r8,r7[0x8]
8000af9e:	6e 39       	ld.w	r9,r7[0xc]
8000afa0:	c0 a8       	rjmp	8000afb4 <_realloc_r+0x188>
8000afa2:	d7 03       	nop
8000afa4:	00 00       	add	r0,r0
8000afa6:	01 00       	ld.w	r0,r0++
8000afa8:	f8 00 00 03 	add	r3,r12,r0
8000afac:	0c 33       	cp.w	r3,r6
8000afae:	c3 35       	brlt	8000b014 <_realloc_r+0x1e8>
8000afb0:	6e 39       	ld.w	r9,r7[0xc]
8000afb2:	6e 28       	ld.w	r8,r7[0x8]
8000afb4:	93 28       	st.w	r9[0x8],r8
8000afb6:	91 39       	st.w	r8[0xc],r9
8000afb8:	e0 ca 00 04 	sub	r10,r0,4
8000afbc:	ee cc ff f8 	sub	r12,r7,-8
8000afc0:	e0 4a 00 24 	cp.w	r10,36
8000afc4:	e0 8b 00 24 	brhi	8000b00c <_realloc_r+0x1e0>
8000afc8:	59 3a       	cp.w	r10,19
8000afca:	e0 88 00 1a 	brls	8000affe <_realloc_r+0x1d2>
8000afce:	09 08       	ld.w	r8,r4++
8000afd0:	99 08       	st.w	r12[0x0],r8
8000afd2:	09 08       	ld.w	r8,r4++
8000afd4:	8f 38       	st.w	r7[0xc],r8
8000afd6:	ee cc ff f0 	sub	r12,r7,-16
8000afda:	59 ba       	cp.w	r10,27
8000afdc:	e0 88 00 11 	brls	8000affe <_realloc_r+0x1d2>
8000afe0:	09 08       	ld.w	r8,r4++
8000afe2:	99 08       	st.w	r12[0x0],r8
8000afe4:	09 08       	ld.w	r8,r4++
8000afe6:	8f 58       	st.w	r7[0x14],r8
8000afe8:	ee cc ff e8 	sub	r12,r7,-24
8000afec:	e0 4a 00 24 	cp.w	r10,36
8000aff0:	c0 71       	brne	8000affe <_realloc_r+0x1d2>
8000aff2:	09 08       	ld.w	r8,r4++
8000aff4:	99 08       	st.w	r12[0x0],r8
8000aff6:	ee cc ff e0 	sub	r12,r7,-32
8000affa:	09 08       	ld.w	r8,r4++
8000affc:	8f 78       	st.w	r7[0x1c],r8
8000affe:	09 08       	ld.w	r8,r4++
8000b000:	18 a8       	st.w	r12++,r8
8000b002:	68 08       	ld.w	r8,r4[0x0]
8000b004:	99 08       	st.w	r12[0x0],r8
8000b006:	68 18       	ld.w	r8,r4[0x4]
8000b008:	99 18       	st.w	r12[0x4],r8
8000b00a:	c4 78       	rjmp	8000b098 <_realloc_r+0x26c>
8000b00c:	08 9b       	mov	r11,r4
8000b00e:	fe b0 fb fa 	rcall	8000a802 <memmove>
8000b012:	c4 38       	rjmp	8000b098 <_realloc_r+0x26c>
8000b014:	04 9c       	mov	r12,r2
8000b016:	fe b0 f9 31 	rcall	8000a278 <_malloc_r>
8000b01a:	18 95       	mov	r5,r12
8000b01c:	c3 a0       	breq	8000b090 <_realloc_r+0x264>
8000b01e:	62 18       	ld.w	r8,r1[0x4]
8000b020:	f8 c9 00 08 	sub	r9,r12,8
8000b024:	a1 c8       	cbr	r8,0x0
8000b026:	e2 08 00 08 	add	r8,r1,r8
8000b02a:	10 39       	cp.w	r9,r8
8000b02c:	c0 71       	brne	8000b03a <_realloc_r+0x20e>
8000b02e:	72 13       	ld.w	r3,r9[0x4]
8000b030:	02 97       	mov	r7,r1
8000b032:	e0 13 ff fc 	andl	r3,0xfffc
8000b036:	00 03       	add	r3,r0
8000b038:	c3 08       	rjmp	8000b098 <_realloc_r+0x26c>
8000b03a:	e0 ca 00 04 	sub	r10,r0,4
8000b03e:	e0 4a 00 24 	cp.w	r10,36
8000b042:	e0 8b 00 20 	brhi	8000b082 <_realloc_r+0x256>
8000b046:	08 99       	mov	r9,r4
8000b048:	18 98       	mov	r8,r12
8000b04a:	59 3a       	cp.w	r10,19
8000b04c:	e0 88 00 14 	brls	8000b074 <_realloc_r+0x248>
8000b050:	13 0b       	ld.w	r11,r9++
8000b052:	10 ab       	st.w	r8++,r11
8000b054:	13 0b       	ld.w	r11,r9++
8000b056:	10 ab       	st.w	r8++,r11
8000b058:	59 ba       	cp.w	r10,27
8000b05a:	e0 88 00 0d 	brls	8000b074 <_realloc_r+0x248>
8000b05e:	13 0b       	ld.w	r11,r9++
8000b060:	10 ab       	st.w	r8++,r11
8000b062:	13 0b       	ld.w	r11,r9++
8000b064:	10 ab       	st.w	r8++,r11
8000b066:	e0 4a 00 24 	cp.w	r10,36
8000b06a:	c0 51       	brne	8000b074 <_realloc_r+0x248>
8000b06c:	13 0a       	ld.w	r10,r9++
8000b06e:	10 aa       	st.w	r8++,r10
8000b070:	13 0a       	ld.w	r10,r9++
8000b072:	10 aa       	st.w	r8++,r10
8000b074:	13 0a       	ld.w	r10,r9++
8000b076:	10 aa       	st.w	r8++,r10
8000b078:	72 0a       	ld.w	r10,r9[0x0]
8000b07a:	91 0a       	st.w	r8[0x0],r10
8000b07c:	72 19       	ld.w	r9,r9[0x4]
8000b07e:	91 19       	st.w	r8[0x4],r9
8000b080:	c0 48       	rjmp	8000b088 <_realloc_r+0x25c>
8000b082:	08 9b       	mov	r11,r4
8000b084:	fe b0 fb bf 	rcall	8000a802 <memmove>
8000b088:	08 9b       	mov	r11,r4
8000b08a:	04 9c       	mov	r12,r2
8000b08c:	fe b0 f6 4e 	rcall	80009d28 <_free_r>
8000b090:	04 9c       	mov	r12,r2
8000b092:	c2 a8       	rjmp	8000b0e6 <_realloc_r+0x2ba>
8000b094:	00 93       	mov	r3,r0
8000b096:	02 97       	mov	r7,r1
8000b098:	e6 06 01 09 	sub	r9,r3,r6
8000b09c:	6e 18       	ld.w	r8,r7[0x4]
8000b09e:	58 f9       	cp.w	r9,15
8000b0a0:	e0 88 00 16 	brls	8000b0cc <_realloc_r+0x2a0>
8000b0a4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b0a8:	ed e8 10 08 	or	r8,r6,r8
8000b0ac:	8f 18       	st.w	r7[0x4],r8
8000b0ae:	12 98       	mov	r8,r9
8000b0b0:	a1 a8       	sbr	r8,0x0
8000b0b2:	ee 06 00 0b 	add	r11,r7,r6
8000b0b6:	f6 09 00 09 	add	r9,r11,r9
8000b0ba:	97 18       	st.w	r11[0x4],r8
8000b0bc:	72 18       	ld.w	r8,r9[0x4]
8000b0be:	a1 a8       	sbr	r8,0x0
8000b0c0:	2f 8b       	sub	r11,-8
8000b0c2:	93 18       	st.w	r9[0x4],r8
8000b0c4:	04 9c       	mov	r12,r2
8000b0c6:	fe b0 f6 31 	rcall	80009d28 <_free_r>
8000b0ca:	c0 b8       	rjmp	8000b0e0 <_realloc_r+0x2b4>
8000b0cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000b0d0:	e7 e8 10 08 	or	r8,r3,r8
8000b0d4:	8f 18       	st.w	r7[0x4],r8
8000b0d6:	ee 03 00 03 	add	r3,r7,r3
8000b0da:	66 18       	ld.w	r8,r3[0x4]
8000b0dc:	a1 a8       	sbr	r8,0x0
8000b0de:	87 18       	st.w	r3[0x4],r8
8000b0e0:	04 9c       	mov	r12,r2
8000b0e2:	ee c5 ff f8 	sub	r5,r7,-8
8000b0e6:	fe b0 fb b5 	rcall	8000a850 <__malloc_unlock>
8000b0ea:	0a 9c       	mov	r12,r5
8000b0ec:	2f fd       	sub	sp,-4
8000b0ee:	d8 32       	popm	r0-r7,pc

8000b0f0 <__isinfd>:
8000b0f0:	14 98       	mov	r8,r10
8000b0f2:	fc 19 7f f0 	movh	r9,0x7ff0
8000b0f6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000b0fa:	f0 0b 11 00 	rsub	r11,r8,0
8000b0fe:	f7 e8 10 08 	or	r8,r11,r8
8000b102:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000b106:	f2 08 01 08 	sub	r8,r9,r8
8000b10a:	f0 0c 11 00 	rsub	r12,r8,0
8000b10e:	f9 e8 10 08 	or	r8,r12,r8
8000b112:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000b116:	2f fc       	sub	r12,-1
8000b118:	5e fc       	retal	r12

8000b11a <__isnand>:
8000b11a:	14 98       	mov	r8,r10
8000b11c:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000b120:	f0 0c 11 00 	rsub	r12,r8,0
8000b124:	10 4c       	or	r12,r8
8000b126:	fc 18 7f f0 	movh	r8,0x7ff0
8000b12a:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000b12e:	f0 0c 01 0c 	sub	r12,r8,r12
8000b132:	bf 9c       	lsr	r12,0x1f
8000b134:	5e fc       	retal	r12
8000b136:	d7 03       	nop

8000b138 <_sbrk_r>:
8000b138:	d4 21       	pushm	r4-r7,lr
8000b13a:	30 08       	mov	r8,0
8000b13c:	18 97       	mov	r7,r12
8000b13e:	48 66       	lddpc	r6,8000b154 <_sbrk_r+0x1c>
8000b140:	16 9c       	mov	r12,r11
8000b142:	8d 08       	st.w	r6[0x0],r8
8000b144:	cb cc       	rcall	8000b2bc <_sbrk>
8000b146:	5b fc       	cp.w	r12,-1
8000b148:	c0 51       	brne	8000b152 <_sbrk_r+0x1a>
8000b14a:	6c 08       	ld.w	r8,r6[0x0]
8000b14c:	58 08       	cp.w	r8,0
8000b14e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b152:	d8 22       	popm	r4-r7,pc
8000b154:	00 00       	add	r0,r0
8000b156:	09 24       	ld.uh	r4,r4++

8000b158 <__sclose>:
8000b158:	d4 01       	pushm	lr
8000b15a:	96 7b       	ld.sh	r11,r11[0xe]
8000b15c:	c0 ed       	rcall	8000b378 <_close_r>
8000b15e:	d8 02       	popm	pc

8000b160 <__sseek>:
8000b160:	d4 21       	pushm	r4-r7,lr
8000b162:	16 97       	mov	r7,r11
8000b164:	96 7b       	ld.sh	r11,r11[0xe]
8000b166:	c9 7d       	rcall	8000b494 <_lseek_r>
8000b168:	8e 68       	ld.sh	r8,r7[0xc]
8000b16a:	10 99       	mov	r9,r8
8000b16c:	ad c8       	cbr	r8,0xc
8000b16e:	ad a9       	sbr	r9,0xc
8000b170:	5b fc       	cp.w	r12,-1
8000b172:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000b176:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000b17a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000b17e:	d8 22       	popm	r4-r7,pc

8000b180 <__swrite>:
8000b180:	d4 21       	pushm	r4-r7,lr
8000b182:	96 68       	ld.sh	r8,r11[0xc]
8000b184:	16 97       	mov	r7,r11
8000b186:	14 95       	mov	r5,r10
8000b188:	12 94       	mov	r4,r9
8000b18a:	e2 18 01 00 	andl	r8,0x100,COH
8000b18e:	18 96       	mov	r6,r12
8000b190:	c0 50       	breq	8000b19a <__swrite+0x1a>
8000b192:	30 29       	mov	r9,2
8000b194:	30 0a       	mov	r10,0
8000b196:	96 7b       	ld.sh	r11,r11[0xe]
8000b198:	c7 ed       	rcall	8000b494 <_lseek_r>
8000b19a:	8e 68       	ld.sh	r8,r7[0xc]
8000b19c:	ad c8       	cbr	r8,0xc
8000b19e:	08 99       	mov	r9,r4
8000b1a0:	0a 9a       	mov	r10,r5
8000b1a2:	8e 7b       	ld.sh	r11,r7[0xe]
8000b1a4:	0c 9c       	mov	r12,r6
8000b1a6:	ae 68       	st.h	r7[0xc],r8
8000b1a8:	ca 8c       	rcall	8000b2f8 <_write_r>
8000b1aa:	d8 22       	popm	r4-r7,pc

8000b1ac <__sread>:
8000b1ac:	d4 21       	pushm	r4-r7,lr
8000b1ae:	16 97       	mov	r7,r11
8000b1b0:	96 7b       	ld.sh	r11,r11[0xe]
8000b1b2:	c8 5d       	rcall	8000b4bc <_read_r>
8000b1b4:	c0 65       	brlt	8000b1c0 <__sread+0x14>
8000b1b6:	6f 58       	ld.w	r8,r7[0x54]
8000b1b8:	18 08       	add	r8,r12
8000b1ba:	ef 48 00 54 	st.w	r7[84],r8
8000b1be:	d8 22       	popm	r4-r7,pc
8000b1c0:	8e 68       	ld.sh	r8,r7[0xc]
8000b1c2:	ad c8       	cbr	r8,0xc
8000b1c4:	ae 68       	st.h	r7[0xc],r8
8000b1c6:	d8 22       	popm	r4-r7,pc

8000b1c8 <strlen>:
8000b1c8:	30 09       	mov	r9,0
8000b1ca:	18 98       	mov	r8,r12
8000b1cc:	c0 28       	rjmp	8000b1d0 <strlen+0x8>
8000b1ce:	2f f8       	sub	r8,-1
8000b1d0:	11 8a       	ld.ub	r10,r8[0x0]
8000b1d2:	f2 0a 18 00 	cp.b	r10,r9
8000b1d6:	cf c1       	brne	8000b1ce <strlen+0x6>
8000b1d8:	f0 0c 01 0c 	sub	r12,r8,r12
8000b1dc:	5e fc       	retal	r12
8000b1de:	d7 03       	nop

8000b1e0 <_close>:
8000b1e0:	30 28       	mov	r8,2
8000b1e2:	d6 73       	breakpoint
8000b1e4:	3f fc       	mov	r12,-1
8000b1e6:	35 8b       	mov	r11,88
8000b1e8:	58 0c       	cp.w	r12,0
8000b1ea:	5e 4c       	retge	r12
8000b1ec:	48 2a       	lddpc	r10,8000b1f4 <_close+0x14>
8000b1ee:	95 0b       	st.w	r10[0x0],r11
8000b1f0:	5e fc       	retal	r12
8000b1f2:	d7 03       	nop
8000b1f4:	00 00       	add	r0,r0
8000b1f6:	09 24       	ld.uh	r4,r4++

8000b1f8 <_lseek>:
8000b1f8:	30 58       	mov	r8,5
8000b1fa:	d6 73       	breakpoint
8000b1fc:	3f fc       	mov	r12,-1
8000b1fe:	35 8b       	mov	r11,88
8000b200:	58 0c       	cp.w	r12,0
8000b202:	5e 4c       	retge	r12
8000b204:	48 2a       	lddpc	r10,8000b20c <_lseek+0x14>
8000b206:	95 0b       	st.w	r10[0x0],r11
8000b208:	5e fc       	retal	r12
8000b20a:	d7 03       	nop
8000b20c:	00 00       	add	r0,r0
8000b20e:	09 24       	ld.uh	r4,r4++

8000b210 <_read>:
8000b210:	30 38       	mov	r8,3
8000b212:	d6 73       	breakpoint
8000b214:	3f fc       	mov	r12,-1
8000b216:	35 8b       	mov	r11,88
8000b218:	58 0c       	cp.w	r12,0
8000b21a:	5e 4c       	retge	r12
8000b21c:	48 2a       	lddpc	r10,8000b224 <_read+0x14>
8000b21e:	95 0b       	st.w	r10[0x0],r11
8000b220:	5e fc       	retal	r12
8000b222:	d7 03       	nop
8000b224:	00 00       	add	r0,r0
8000b226:	09 24       	ld.uh	r4,r4++

8000b228 <_write>:
8000b228:	30 48       	mov	r8,4
8000b22a:	d6 73       	breakpoint
8000b22c:	3f fc       	mov	r12,-1
8000b22e:	35 8b       	mov	r11,88
8000b230:	58 0c       	cp.w	r12,0
8000b232:	5e 4c       	retge	r12
8000b234:	48 2a       	lddpc	r10,8000b23c <_write+0x14>
8000b236:	95 0b       	st.w	r10[0x0],r11
8000b238:	5e fc       	retal	r12
8000b23a:	d7 03       	nop
8000b23c:	00 00       	add	r0,r0
8000b23e:	09 24       	ld.uh	r4,r4++

8000b240 <isatty>:
8000b240:	30 b8       	mov	r8,11
8000b242:	d6 73       	breakpoint
8000b244:	3f fc       	mov	r12,-1
8000b246:	35 8b       	mov	r11,88
8000b248:	58 0c       	cp.w	r12,0
8000b24a:	5e 4c       	retge	r12
8000b24c:	48 2a       	lddpc	r10,8000b254 <isatty+0x14>
8000b24e:	95 0b       	st.w	r10[0x0],r11
8000b250:	5e fc       	retal	r12
8000b252:	d7 03       	nop
8000b254:	00 00       	add	r0,r0
8000b256:	09 24       	ld.uh	r4,r4++

8000b258 <_fstat_host>:
8000b258:	30 98       	mov	r8,9
8000b25a:	d6 73       	breakpoint
8000b25c:	3f fc       	mov	r12,-1
8000b25e:	35 8b       	mov	r11,88
8000b260:	58 0c       	cp.w	r12,0
8000b262:	5e 4c       	retge	r12
8000b264:	48 2a       	lddpc	r10,8000b26c <_fstat_host+0x14>
8000b266:	95 0b       	st.w	r10[0x0],r11
8000b268:	5e fc       	retal	r12
8000b26a:	d7 03       	nop
8000b26c:	00 00       	add	r0,r0
8000b26e:	09 24       	ld.uh	r4,r4++

8000b270 <_fstat>:
8000b270:	d4 21       	pushm	r4-r7,lr
8000b272:	21 0d       	sub	sp,64
8000b274:	16 97       	mov	r7,r11
8000b276:	1a 9b       	mov	r11,sp
8000b278:	cf 0f       	rcall	8000b258 <_fstat_host>
8000b27a:	c0 34       	brge	8000b280 <_fstat+0x10>
8000b27c:	3f fc       	mov	r12,-1
8000b27e:	c1 c8       	rjmp	8000b2b6 <_fstat+0x46>
8000b280:	40 08       	lddsp	r8,sp[0x0]
8000b282:	ae 08       	st.h	r7[0x0],r8
8000b284:	40 18       	lddsp	r8,sp[0x4]
8000b286:	ae 18       	st.h	r7[0x2],r8
8000b288:	40 28       	lddsp	r8,sp[0x8]
8000b28a:	8f 18       	st.w	r7[0x4],r8
8000b28c:	40 38       	lddsp	r8,sp[0xc]
8000b28e:	ae 48       	st.h	r7[0x8],r8
8000b290:	40 48       	lddsp	r8,sp[0x10]
8000b292:	ae 58       	st.h	r7[0xa],r8
8000b294:	40 58       	lddsp	r8,sp[0x14]
8000b296:	ae 68       	st.h	r7[0xc],r8
8000b298:	40 68       	lddsp	r8,sp[0x18]
8000b29a:	ae 78       	st.h	r7[0xe],r8
8000b29c:	40 88       	lddsp	r8,sp[0x20]
8000b29e:	8f 48       	st.w	r7[0x10],r8
8000b2a0:	40 a8       	lddsp	r8,sp[0x28]
8000b2a2:	8f b8       	st.w	r7[0x2c],r8
8000b2a4:	40 c8       	lddsp	r8,sp[0x30]
8000b2a6:	8f c8       	st.w	r7[0x30],r8
8000b2a8:	40 d8       	lddsp	r8,sp[0x34]
8000b2aa:	8f 58       	st.w	r7[0x14],r8
8000b2ac:	40 e8       	lddsp	r8,sp[0x38]
8000b2ae:	30 0c       	mov	r12,0
8000b2b0:	8f 78       	st.w	r7[0x1c],r8
8000b2b2:	40 f8       	lddsp	r8,sp[0x3c]
8000b2b4:	8f 98       	st.w	r7[0x24],r8
8000b2b6:	2f 0d       	sub	sp,-64
8000b2b8:	d8 22       	popm	r4-r7,pc
8000b2ba:	d7 03       	nop

8000b2bc <_sbrk>:
8000b2bc:	d4 01       	pushm	lr
8000b2be:	48 c8       	lddpc	r8,8000b2ec <_sbrk+0x30>
8000b2c0:	70 09       	ld.w	r9,r8[0x0]
8000b2c2:	58 09       	cp.w	r9,0
8000b2c4:	c0 31       	brne	8000b2ca <_sbrk+0xe>
8000b2c6:	48 b9       	lddpc	r9,8000b2f0 <_sbrk+0x34>
8000b2c8:	91 09       	st.w	r8[0x0],r9
8000b2ca:	48 99       	lddpc	r9,8000b2ec <_sbrk+0x30>
8000b2cc:	48 aa       	lddpc	r10,8000b2f4 <_sbrk+0x38>
8000b2ce:	72 08       	ld.w	r8,r9[0x0]
8000b2d0:	f0 0c 00 0c 	add	r12,r8,r12
8000b2d4:	14 3c       	cp.w	r12,r10
8000b2d6:	e0 8b 00 04 	brhi	8000b2de <_sbrk+0x22>
8000b2da:	93 0c       	st.w	r9[0x0],r12
8000b2dc:	c0 58       	rjmp	8000b2e6 <_sbrk+0x2a>
8000b2de:	c5 dc       	rcall	8000b398 <__errno>
8000b2e0:	30 c8       	mov	r8,12
8000b2e2:	99 08       	st.w	r12[0x0],r8
8000b2e4:	3f f8       	mov	r8,-1
8000b2e6:	10 9c       	mov	r12,r8
8000b2e8:	d8 02       	popm	pc
8000b2ea:	d7 03       	nop
8000b2ec:	00 00       	add	r0,r0
8000b2ee:	06 4c       	or	r12,r3
8000b2f0:	00 00       	add	r0,r0
8000b2f2:	09 28       	ld.uh	r8,r4++
8000b2f4:	00 00       	add	r0,r0
8000b2f6:	70 00       	ld.w	r0,r8[0x0]

8000b2f8 <_write_r>:
8000b2f8:	d4 21       	pushm	r4-r7,lr
8000b2fa:	16 98       	mov	r8,r11
8000b2fc:	18 97       	mov	r7,r12
8000b2fe:	10 9c       	mov	r12,r8
8000b300:	30 08       	mov	r8,0
8000b302:	14 9b       	mov	r11,r10
8000b304:	48 66       	lddpc	r6,8000b31c <_write_r+0x24>
8000b306:	12 9a       	mov	r10,r9
8000b308:	8d 08       	st.w	r6[0x0],r8
8000b30a:	c8 ff       	rcall	8000b228 <_write>
8000b30c:	5b fc       	cp.w	r12,-1
8000b30e:	c0 51       	brne	8000b318 <_write_r+0x20>
8000b310:	6c 08       	ld.w	r8,r6[0x0]
8000b312:	58 08       	cp.w	r8,0
8000b314:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b318:	d8 22       	popm	r4-r7,pc
8000b31a:	d7 03       	nop
8000b31c:	00 00       	add	r0,r0
8000b31e:	09 24       	ld.uh	r4,r4++

8000b320 <_calloc_r>:
8000b320:	d4 21       	pushm	r4-r7,lr
8000b322:	f4 0b 02 4b 	mul	r11,r10,r11
8000b326:	fe b0 f7 a9 	rcall	8000a278 <_malloc_r>
8000b32a:	18 97       	mov	r7,r12
8000b32c:	c2 30       	breq	8000b372 <_calloc_r+0x52>
8000b32e:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000b332:	e0 1a ff fc 	andl	r10,0xfffc
8000b336:	20 4a       	sub	r10,4
8000b338:	e0 4a 00 24 	cp.w	r10,36
8000b33c:	e0 8b 00 18 	brhi	8000b36c <_calloc_r+0x4c>
8000b340:	18 98       	mov	r8,r12
8000b342:	59 3a       	cp.w	r10,19
8000b344:	e0 88 00 0f 	brls	8000b362 <_calloc_r+0x42>
8000b348:	30 09       	mov	r9,0
8000b34a:	10 a9       	st.w	r8++,r9
8000b34c:	10 a9       	st.w	r8++,r9
8000b34e:	59 ba       	cp.w	r10,27
8000b350:	e0 88 00 09 	brls	8000b362 <_calloc_r+0x42>
8000b354:	10 a9       	st.w	r8++,r9
8000b356:	10 a9       	st.w	r8++,r9
8000b358:	e0 4a 00 24 	cp.w	r10,36
8000b35c:	c0 31       	brne	8000b362 <_calloc_r+0x42>
8000b35e:	10 a9       	st.w	r8++,r9
8000b360:	10 a9       	st.w	r8++,r9
8000b362:	30 09       	mov	r9,0
8000b364:	10 a9       	st.w	r8++,r9
8000b366:	91 19       	st.w	r8[0x4],r9
8000b368:	91 09       	st.w	r8[0x0],r9
8000b36a:	c0 48       	rjmp	8000b372 <_calloc_r+0x52>
8000b36c:	30 0b       	mov	r11,0
8000b36e:	fe b0 fa 69 	rcall	8000a840 <memset>
8000b372:	0e 9c       	mov	r12,r7
8000b374:	d8 22       	popm	r4-r7,pc
8000b376:	d7 03       	nop

8000b378 <_close_r>:
8000b378:	d4 21       	pushm	r4-r7,lr
8000b37a:	30 08       	mov	r8,0
8000b37c:	18 97       	mov	r7,r12
8000b37e:	48 66       	lddpc	r6,8000b394 <_close_r+0x1c>
8000b380:	16 9c       	mov	r12,r11
8000b382:	8d 08       	st.w	r6[0x0],r8
8000b384:	c2 ef       	rcall	8000b1e0 <_close>
8000b386:	5b fc       	cp.w	r12,-1
8000b388:	c0 51       	brne	8000b392 <_close_r+0x1a>
8000b38a:	6c 08       	ld.w	r8,r6[0x0]
8000b38c:	58 08       	cp.w	r8,0
8000b38e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b392:	d8 22       	popm	r4-r7,pc
8000b394:	00 00       	add	r0,r0
8000b396:	09 24       	ld.uh	r4,r4++

8000b398 <__errno>:
8000b398:	48 28       	lddpc	r8,8000b3a0 <__errno+0x8>
8000b39a:	70 0c       	ld.w	r12,r8[0x0]
8000b39c:	2f 4c       	sub	r12,-12
8000b39e:	5e fc       	retal	r12
8000b3a0:	00 00       	add	r0,r0
8000b3a2:	00 fc       	st.b	--r0,r12

8000b3a4 <_fclose_r>:
8000b3a4:	d4 21       	pushm	r4-r7,lr
8000b3a6:	18 96       	mov	r6,r12
8000b3a8:	16 97       	mov	r7,r11
8000b3aa:	58 0b       	cp.w	r11,0
8000b3ac:	c0 31       	brne	8000b3b2 <_fclose_r+0xe>
8000b3ae:	16 95       	mov	r5,r11
8000b3b0:	c5 08       	rjmp	8000b450 <_fclose_r+0xac>
8000b3b2:	fe b0 f3 cb 	rcall	80009b48 <__sfp_lock_acquire>
8000b3b6:	58 06       	cp.w	r6,0
8000b3b8:	c0 70       	breq	8000b3c6 <_fclose_r+0x22>
8000b3ba:	6c 68       	ld.w	r8,r6[0x18]
8000b3bc:	58 08       	cp.w	r8,0
8000b3be:	c0 41       	brne	8000b3c6 <_fclose_r+0x22>
8000b3c0:	0c 9c       	mov	r12,r6
8000b3c2:	fe b0 f4 17 	rcall	80009bf0 <__sinit>
8000b3c6:	4a 48       	lddpc	r8,8000b454 <_fclose_r+0xb0>
8000b3c8:	10 37       	cp.w	r7,r8
8000b3ca:	c0 31       	brne	8000b3d0 <_fclose_r+0x2c>
8000b3cc:	6c 07       	ld.w	r7,r6[0x0]
8000b3ce:	c0 a8       	rjmp	8000b3e2 <_fclose_r+0x3e>
8000b3d0:	4a 28       	lddpc	r8,8000b458 <_fclose_r+0xb4>
8000b3d2:	10 37       	cp.w	r7,r8
8000b3d4:	c0 31       	brne	8000b3da <_fclose_r+0x36>
8000b3d6:	6c 17       	ld.w	r7,r6[0x4]
8000b3d8:	c0 58       	rjmp	8000b3e2 <_fclose_r+0x3e>
8000b3da:	4a 18       	lddpc	r8,8000b45c <_fclose_r+0xb8>
8000b3dc:	10 37       	cp.w	r7,r8
8000b3de:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000b3e2:	8e 69       	ld.sh	r9,r7[0xc]
8000b3e4:	30 08       	mov	r8,0
8000b3e6:	f0 09 19 00 	cp.h	r9,r8
8000b3ea:	c0 51       	brne	8000b3f4 <_fclose_r+0x50>
8000b3ec:	fe b0 f3 af 	rcall	80009b4a <__sfp_lock_release>
8000b3f0:	30 05       	mov	r5,0
8000b3f2:	c2 f8       	rjmp	8000b450 <_fclose_r+0xac>
8000b3f4:	0e 9b       	mov	r11,r7
8000b3f6:	0c 9c       	mov	r12,r6
8000b3f8:	fe b0 f3 20 	rcall	80009a38 <_fflush_r>
8000b3fc:	6e c8       	ld.w	r8,r7[0x30]
8000b3fe:	18 95       	mov	r5,r12
8000b400:	58 08       	cp.w	r8,0
8000b402:	c0 60       	breq	8000b40e <_fclose_r+0x6a>
8000b404:	6e 8b       	ld.w	r11,r7[0x20]
8000b406:	0c 9c       	mov	r12,r6
8000b408:	5d 18       	icall	r8
8000b40a:	f9 b5 05 ff 	movlt	r5,-1
8000b40e:	8e 68       	ld.sh	r8,r7[0xc]
8000b410:	ed b8 00 07 	bld	r8,0x7
8000b414:	c0 51       	brne	8000b41e <_fclose_r+0x7a>
8000b416:	6e 4b       	ld.w	r11,r7[0x10]
8000b418:	0c 9c       	mov	r12,r6
8000b41a:	fe b0 f4 87 	rcall	80009d28 <_free_r>
8000b41e:	6e db       	ld.w	r11,r7[0x34]
8000b420:	58 0b       	cp.w	r11,0
8000b422:	c0 a0       	breq	8000b436 <_fclose_r+0x92>
8000b424:	ee c8 ff bc 	sub	r8,r7,-68
8000b428:	10 3b       	cp.w	r11,r8
8000b42a:	c0 40       	breq	8000b432 <_fclose_r+0x8e>
8000b42c:	0c 9c       	mov	r12,r6
8000b42e:	fe b0 f4 7d 	rcall	80009d28 <_free_r>
8000b432:	30 08       	mov	r8,0
8000b434:	8f d8       	st.w	r7[0x34],r8
8000b436:	6f 2b       	ld.w	r11,r7[0x48]
8000b438:	58 0b       	cp.w	r11,0
8000b43a:	c0 70       	breq	8000b448 <_fclose_r+0xa4>
8000b43c:	0c 9c       	mov	r12,r6
8000b43e:	fe b0 f4 75 	rcall	80009d28 <_free_r>
8000b442:	30 08       	mov	r8,0
8000b444:	ef 48 00 48 	st.w	r7[72],r8
8000b448:	30 08       	mov	r8,0
8000b44a:	ae 68       	st.h	r7[0xc],r8
8000b44c:	fe b0 f3 7f 	rcall	80009b4a <__sfp_lock_release>
8000b450:	0a 9c       	mov	r12,r5
8000b452:	d8 22       	popm	r4-r7,pc
8000b454:	80 00       	ld.sh	r0,r0[0x0]
8000b456:	d3 cc       	*unknown*
8000b458:	80 00       	ld.sh	r0,r0[0x0]
8000b45a:	d3 ec       	*unknown*
8000b45c:	80 00       	ld.sh	r0,r0[0x0]
8000b45e:	d4 0c       	*unknown*

8000b460 <fclose>:
8000b460:	d4 01       	pushm	lr
8000b462:	48 38       	lddpc	r8,8000b46c <fclose+0xc>
8000b464:	18 9b       	mov	r11,r12
8000b466:	70 0c       	ld.w	r12,r8[0x0]
8000b468:	c9 ef       	rcall	8000b3a4 <_fclose_r>
8000b46a:	d8 02       	popm	pc
8000b46c:	00 00       	add	r0,r0
8000b46e:	00 fc       	st.b	--r0,r12

8000b470 <_fstat_r>:
8000b470:	d4 21       	pushm	r4-r7,lr
8000b472:	16 98       	mov	r8,r11
8000b474:	18 97       	mov	r7,r12
8000b476:	10 9c       	mov	r12,r8
8000b478:	30 08       	mov	r8,0
8000b47a:	48 66       	lddpc	r6,8000b490 <_fstat_r+0x20>
8000b47c:	14 9b       	mov	r11,r10
8000b47e:	8d 08       	st.w	r6[0x0],r8
8000b480:	cf 8e       	rcall	8000b270 <_fstat>
8000b482:	5b fc       	cp.w	r12,-1
8000b484:	c0 51       	brne	8000b48e <_fstat_r+0x1e>
8000b486:	6c 08       	ld.w	r8,r6[0x0]
8000b488:	58 08       	cp.w	r8,0
8000b48a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b48e:	d8 22       	popm	r4-r7,pc
8000b490:	00 00       	add	r0,r0
8000b492:	09 24       	ld.uh	r4,r4++

8000b494 <_lseek_r>:
8000b494:	d4 21       	pushm	r4-r7,lr
8000b496:	16 98       	mov	r8,r11
8000b498:	18 97       	mov	r7,r12
8000b49a:	10 9c       	mov	r12,r8
8000b49c:	30 08       	mov	r8,0
8000b49e:	14 9b       	mov	r11,r10
8000b4a0:	48 66       	lddpc	r6,8000b4b8 <_lseek_r+0x24>
8000b4a2:	12 9a       	mov	r10,r9
8000b4a4:	8d 08       	st.w	r6[0x0],r8
8000b4a6:	ca 9e       	rcall	8000b1f8 <_lseek>
8000b4a8:	5b fc       	cp.w	r12,-1
8000b4aa:	c0 51       	brne	8000b4b4 <_lseek_r+0x20>
8000b4ac:	6c 08       	ld.w	r8,r6[0x0]
8000b4ae:	58 08       	cp.w	r8,0
8000b4b0:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b4b4:	d8 22       	popm	r4-r7,pc
8000b4b6:	d7 03       	nop
8000b4b8:	00 00       	add	r0,r0
8000b4ba:	09 24       	ld.uh	r4,r4++

8000b4bc <_read_r>:
8000b4bc:	d4 21       	pushm	r4-r7,lr
8000b4be:	16 98       	mov	r8,r11
8000b4c0:	18 97       	mov	r7,r12
8000b4c2:	10 9c       	mov	r12,r8
8000b4c4:	30 08       	mov	r8,0
8000b4c6:	14 9b       	mov	r11,r10
8000b4c8:	48 66       	lddpc	r6,8000b4e0 <_read_r+0x24>
8000b4ca:	12 9a       	mov	r10,r9
8000b4cc:	8d 08       	st.w	r6[0x0],r8
8000b4ce:	ca 1e       	rcall	8000b210 <_read>
8000b4d0:	5b fc       	cp.w	r12,-1
8000b4d2:	c0 51       	brne	8000b4dc <_read_r+0x20>
8000b4d4:	6c 08       	ld.w	r8,r6[0x0]
8000b4d6:	58 08       	cp.w	r8,0
8000b4d8:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b4dc:	d8 22       	popm	r4-r7,pc
8000b4de:	d7 03       	nop
8000b4e0:	00 00       	add	r0,r0
8000b4e2:	09 24       	ld.uh	r4,r4++

8000b4e4 <__avr32_f64_mul>:
8000b4e4:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000b4e8:	e0 80 00 dc 	breq	8000b6a0 <__avr32_f64_mul_op1_zero>
8000b4ec:	d4 21       	pushm	r4-r7,lr
8000b4ee:	f7 e9 20 0e 	eor	lr,r11,r9
8000b4f2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000b4f6:	30 15       	mov	r5,1
8000b4f8:	c4 30       	breq	8000b57e <__avr32_f64_mul_op1_subnormal>
8000b4fa:	ab 6b       	lsl	r11,0xa
8000b4fc:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000b500:	ab 6a       	lsl	r10,0xa
8000b502:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000b506:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000b50a:	c5 c0       	breq	8000b5c2 <__avr32_f64_mul_op2_subnormal>
8000b50c:	a1 78       	lsl	r8,0x1
8000b50e:	5c f9       	rol	r9
8000b510:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000b514:	e0 47 07 ff 	cp.w	r7,2047
8000b518:	c7 70       	breq	8000b606 <__avr32_f64_mul_op_nan_or_inf>
8000b51a:	e0 46 07 ff 	cp.w	r6,2047
8000b51e:	c7 40       	breq	8000b606 <__avr32_f64_mul_op_nan_or_inf>
8000b520:	ee 06 00 0c 	add	r12,r7,r6
8000b524:	e0 2c 03 fe 	sub	r12,1022
8000b528:	f6 08 06 44 	mulu.d	r4,r11,r8
8000b52c:	f4 09 07 44 	macu.d	r4,r10,r9
8000b530:	f4 08 06 46 	mulu.d	r6,r10,r8
8000b534:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000b538:	08 07       	add	r7,r4
8000b53a:	f4 05 00 4a 	adc	r10,r10,r5
8000b53e:	5c 0b       	acr	r11
8000b540:	ed bb 00 14 	bld	r11,0x14
8000b544:	c0 50       	breq	8000b54e <__avr32_f64_mul+0x6a>
8000b546:	a1 77       	lsl	r7,0x1
8000b548:	5c fa       	rol	r10
8000b54a:	5c fb       	rol	r11
8000b54c:	20 1c       	sub	r12,1
8000b54e:	58 0c       	cp.w	r12,0
8000b550:	e0 8a 00 6f 	brle	8000b62e <__avr32_f64_mul_res_subnormal>
8000b554:	e0 4c 07 ff 	cp.w	r12,2047
8000b558:	e0 84 00 9c 	brge	8000b690 <__avr32_f64_mul_res_inf>
8000b55c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000b560:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000b564:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000b568:	ee 17 80 00 	eorh	r7,0x8000
8000b56c:	f1 b7 04 20 	satu	r7,0x1
8000b570:	0e 0a       	add	r10,r7
8000b572:	5c 0b       	acr	r11
8000b574:	ed be 00 1f 	bld	lr,0x1f
8000b578:	ef bb 00 1f 	bst	r11,0x1f
8000b57c:	d8 22       	popm	r4-r7,pc

8000b57e <__avr32_f64_mul_op1_subnormal>:
8000b57e:	e4 1b 00 0f 	andh	r11,0xf
8000b582:	f4 0c 12 00 	clz	r12,r10
8000b586:	f6 06 12 00 	clz	r6,r11
8000b58a:	f7 bc 03 e1 	sublo	r12,-31
8000b58e:	f8 06 17 30 	movlo	r6,r12
8000b592:	f7 b6 02 01 	subhs	r6,1
8000b596:	e0 46 00 20 	cp.w	r6,32
8000b59a:	c0 d4       	brge	8000b5b4 <__avr32_f64_mul_op1_subnormal+0x36>
8000b59c:	ec 0c 11 20 	rsub	r12,r6,32
8000b5a0:	f6 06 09 4b 	lsl	r11,r11,r6
8000b5a4:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000b5a8:	18 4b       	or	r11,r12
8000b5aa:	f4 06 09 4a 	lsl	r10,r10,r6
8000b5ae:	20 b6       	sub	r6,11
8000b5b0:	0c 17       	sub	r7,r6
8000b5b2:	ca ab       	rjmp	8000b506 <__avr32_f64_mul+0x22>
8000b5b4:	f4 06 09 4b 	lsl	r11,r10,r6
8000b5b8:	c6 40       	breq	8000b680 <__avr32_f64_mul_res_zero>
8000b5ba:	30 0a       	mov	r10,0
8000b5bc:	20 b6       	sub	r6,11
8000b5be:	0c 17       	sub	r7,r6
8000b5c0:	ca 3b       	rjmp	8000b506 <__avr32_f64_mul+0x22>

8000b5c2 <__avr32_f64_mul_op2_subnormal>:
8000b5c2:	e4 19 00 0f 	andh	r9,0xf
8000b5c6:	f0 0c 12 00 	clz	r12,r8
8000b5ca:	f2 05 12 00 	clz	r5,r9
8000b5ce:	f7 bc 03 ea 	sublo	r12,-22
8000b5d2:	f8 05 17 30 	movlo	r5,r12
8000b5d6:	f7 b5 02 0a 	subhs	r5,10
8000b5da:	e0 45 00 20 	cp.w	r5,32
8000b5de:	c0 d4       	brge	8000b5f8 <__avr32_f64_mul_op2_subnormal+0x36>
8000b5e0:	ea 0c 11 20 	rsub	r12,r5,32
8000b5e4:	f2 05 09 49 	lsl	r9,r9,r5
8000b5e8:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000b5ec:	18 49       	or	r9,r12
8000b5ee:	f0 05 09 48 	lsl	r8,r8,r5
8000b5f2:	20 25       	sub	r5,2
8000b5f4:	0a 16       	sub	r6,r5
8000b5f6:	c8 fb       	rjmp	8000b514 <__avr32_f64_mul+0x30>
8000b5f8:	f0 05 09 49 	lsl	r9,r8,r5
8000b5fc:	c4 20       	breq	8000b680 <__avr32_f64_mul_res_zero>
8000b5fe:	30 08       	mov	r8,0
8000b600:	20 25       	sub	r5,2
8000b602:	0a 16       	sub	r6,r5
8000b604:	c8 8b       	rjmp	8000b514 <__avr32_f64_mul+0x30>

8000b606 <__avr32_f64_mul_op_nan_or_inf>:
8000b606:	e4 19 00 0f 	andh	r9,0xf
8000b60a:	e4 1b 00 0f 	andh	r11,0xf
8000b60e:	14 4b       	or	r11,r10
8000b610:	10 49       	or	r9,r8
8000b612:	e0 47 07 ff 	cp.w	r7,2047
8000b616:	c0 91       	brne	8000b628 <__avr32_f64_mul_op1_not_naninf>
8000b618:	58 0b       	cp.w	r11,0
8000b61a:	c3 81       	brne	8000b68a <__avr32_f64_mul_res_nan>
8000b61c:	e0 46 07 ff 	cp.w	r6,2047
8000b620:	c3 81       	brne	8000b690 <__avr32_f64_mul_res_inf>
8000b622:	58 09       	cp.w	r9,0
8000b624:	c3 60       	breq	8000b690 <__avr32_f64_mul_res_inf>
8000b626:	c3 28       	rjmp	8000b68a <__avr32_f64_mul_res_nan>

8000b628 <__avr32_f64_mul_op1_not_naninf>:
8000b628:	58 09       	cp.w	r9,0
8000b62a:	c3 30       	breq	8000b690 <__avr32_f64_mul_res_inf>
8000b62c:	c2 f8       	rjmp	8000b68a <__avr32_f64_mul_res_nan>

8000b62e <__avr32_f64_mul_res_subnormal>:
8000b62e:	5c 3c       	neg	r12
8000b630:	2f fc       	sub	r12,-1
8000b632:	f1 bc 04 c0 	satu	r12,0x6
8000b636:	e0 4c 00 20 	cp.w	r12,32
8000b63a:	c1 14       	brge	8000b65c <__avr32_f64_mul_res_subnormal+0x2e>
8000b63c:	f8 08 11 20 	rsub	r8,r12,32
8000b640:	0e 46       	or	r6,r7
8000b642:	ee 0c 0a 47 	lsr	r7,r7,r12
8000b646:	f4 08 09 49 	lsl	r9,r10,r8
8000b64a:	12 47       	or	r7,r9
8000b64c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b650:	f6 08 09 49 	lsl	r9,r11,r8
8000b654:	12 4a       	or	r10,r9
8000b656:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000b65a:	c8 3b       	rjmp	8000b560 <__avr32_f64_mul+0x7c>
8000b65c:	f8 08 11 20 	rsub	r8,r12,32
8000b660:	f9 b9 00 00 	moveq	r9,0
8000b664:	c0 30       	breq	8000b66a <__avr32_f64_mul_res_subnormal+0x3c>
8000b666:	f6 08 09 49 	lsl	r9,r11,r8
8000b66a:	0e 46       	or	r6,r7
8000b66c:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000b670:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b674:	f3 ea 10 07 	or	r7,r9,r10
8000b678:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000b67c:	30 0b       	mov	r11,0
8000b67e:	c7 1b       	rjmp	8000b560 <__avr32_f64_mul+0x7c>

8000b680 <__avr32_f64_mul_res_zero>:
8000b680:	1c 9b       	mov	r11,lr
8000b682:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b686:	30 0a       	mov	r10,0
8000b688:	d8 22       	popm	r4-r7,pc

8000b68a <__avr32_f64_mul_res_nan>:
8000b68a:	3f fb       	mov	r11,-1
8000b68c:	3f fa       	mov	r10,-1
8000b68e:	d8 22       	popm	r4-r7,pc

8000b690 <__avr32_f64_mul_res_inf>:
8000b690:	f0 6b 00 00 	mov	r11,-1048576
8000b694:	ed be 00 1f 	bld	lr,0x1f
8000b698:	ef bb 00 1f 	bst	r11,0x1f
8000b69c:	30 0a       	mov	r10,0
8000b69e:	d8 22       	popm	r4-r7,pc

8000b6a0 <__avr32_f64_mul_op1_zero>:
8000b6a0:	f7 e9 20 0b 	eor	r11,r11,r9
8000b6a4:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b6a8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000b6ac:	e0 4c 07 ff 	cp.w	r12,2047
8000b6b0:	5e 1c       	retne	r12
8000b6b2:	3f fa       	mov	r10,-1
8000b6b4:	3f fb       	mov	r11,-1
8000b6b6:	5e fc       	retal	r12

8000b6b8 <__avr32_f64_sub_from_add>:
8000b6b8:	ee 19 80 00 	eorh	r9,0x8000

8000b6bc <__avr32_f64_sub>:
8000b6bc:	f7 e9 20 0c 	eor	r12,r11,r9
8000b6c0:	e0 86 00 ca 	brmi	8000b854 <__avr32_f64_add_from_sub>
8000b6c4:	eb cd 40 e0 	pushm	r5-r7,lr
8000b6c8:	16 9c       	mov	r12,r11
8000b6ca:	e6 1c 80 00 	andh	r12,0x8000,COH
8000b6ce:	bf db       	cbr	r11,0x1f
8000b6d0:	bf d9       	cbr	r9,0x1f
8000b6d2:	10 3a       	cp.w	r10,r8
8000b6d4:	f2 0b 13 00 	cpc	r11,r9
8000b6d8:	c0 92       	brcc	8000b6ea <__avr32_f64_sub+0x2e>
8000b6da:	16 97       	mov	r7,r11
8000b6dc:	12 9b       	mov	r11,r9
8000b6de:	0e 99       	mov	r9,r7
8000b6e0:	14 97       	mov	r7,r10
8000b6e2:	10 9a       	mov	r10,r8
8000b6e4:	0e 98       	mov	r8,r7
8000b6e6:	ee 1c 80 00 	eorh	r12,0x8000
8000b6ea:	f6 07 16 14 	lsr	r7,r11,0x14
8000b6ee:	ab 7b       	lsl	r11,0xb
8000b6f0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000b6f4:	ab 7a       	lsl	r10,0xb
8000b6f6:	bf bb       	sbr	r11,0x1f
8000b6f8:	f2 06 16 14 	lsr	r6,r9,0x14
8000b6fc:	c4 40       	breq	8000b784 <__avr32_f64_sub_opL_subnormal>
8000b6fe:	ab 79       	lsl	r9,0xb
8000b700:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000b704:	ab 78       	lsl	r8,0xb
8000b706:	bf b9       	sbr	r9,0x1f

8000b708 <__avr32_f64_sub_opL_subnormal_done>:
8000b708:	e0 47 07 ff 	cp.w	r7,2047
8000b70c:	c4 f0       	breq	8000b7aa <__avr32_f64_sub_opH_nan_or_inf>
8000b70e:	0e 26       	rsub	r6,r7
8000b710:	c1 20       	breq	8000b734 <__avr32_f64_sub_shift_done>
8000b712:	ec 05 11 20 	rsub	r5,r6,32
8000b716:	e0 46 00 20 	cp.w	r6,32
8000b71a:	c7 c2       	brcc	8000b812 <__avr32_f64_sub_longshift>
8000b71c:	f0 05 09 4e 	lsl	lr,r8,r5
8000b720:	f2 05 09 45 	lsl	r5,r9,r5
8000b724:	f0 06 0a 48 	lsr	r8,r8,r6
8000b728:	f2 06 0a 49 	lsr	r9,r9,r6
8000b72c:	0a 48       	or	r8,r5
8000b72e:	58 0e       	cp.w	lr,0
8000b730:	5f 1e       	srne	lr
8000b732:	1c 48       	or	r8,lr

8000b734 <__avr32_f64_sub_shift_done>:
8000b734:	10 1a       	sub	r10,r8
8000b736:	f6 09 01 4b 	sbc	r11,r11,r9
8000b73a:	f6 06 12 00 	clz	r6,r11
8000b73e:	c0 e0       	breq	8000b75a <__avr32_f64_sub_longnormalize_done>
8000b740:	c7 83       	brcs	8000b830 <__avr32_f64_sub_longnormalize>
8000b742:	ec 0e 11 20 	rsub	lr,r6,32
8000b746:	f6 06 09 4b 	lsl	r11,r11,r6
8000b74a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000b74e:	1c 4b       	or	r11,lr
8000b750:	f4 06 09 4a 	lsl	r10,r10,r6
8000b754:	0c 17       	sub	r7,r6
8000b756:	e0 8a 00 39 	brle	8000b7c8 <__avr32_f64_sub_subnormal_result>

8000b75a <__avr32_f64_sub_longnormalize_done>:
8000b75a:	f4 09 15 15 	lsl	r9,r10,0x15
8000b75e:	ab 9a       	lsr	r10,0xb
8000b760:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000b764:	ab 9b       	lsr	r11,0xb
8000b766:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b76a:	18 4b       	or	r11,r12

8000b76c <__avr32_f64_sub_round>:
8000b76c:	fc 17 80 00 	movh	r7,0x8000
8000b770:	ed ba 00 00 	bld	r10,0x0
8000b774:	f7 b7 01 ff 	subne	r7,-1
8000b778:	0e 39       	cp.w	r9,r7
8000b77a:	5f 29       	srhs	r9
8000b77c:	12 0a       	add	r10,r9
8000b77e:	5c 0b       	acr	r11
8000b780:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b784 <__avr32_f64_sub_opL_subnormal>:
8000b784:	ab 79       	lsl	r9,0xb
8000b786:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000b78a:	ab 78       	lsl	r8,0xb
8000b78c:	f3 e8 10 0e 	or	lr,r9,r8
8000b790:	f9 b6 01 01 	movne	r6,1
8000b794:	ee 0e 11 00 	rsub	lr,r7,0
8000b798:	f9 b7 00 01 	moveq	r7,1
8000b79c:	ef bb 00 1f 	bst	r11,0x1f
8000b7a0:	f7 ea 10 0e 	or	lr,r11,r10
8000b7a4:	f9 b7 00 00 	moveq	r7,0
8000b7a8:	cb 0b       	rjmp	8000b708 <__avr32_f64_sub_opL_subnormal_done>

8000b7aa <__avr32_f64_sub_opH_nan_or_inf>:
8000b7aa:	bf db       	cbr	r11,0x1f
8000b7ac:	f7 ea 10 0e 	or	lr,r11,r10
8000b7b0:	c0 81       	brne	8000b7c0 <__avr32_f64_sub_return_nan>
8000b7b2:	e0 46 07 ff 	cp.w	r6,2047
8000b7b6:	c0 50       	breq	8000b7c0 <__avr32_f64_sub_return_nan>
8000b7b8:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000b7bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b7c0 <__avr32_f64_sub_return_nan>:
8000b7c0:	3f fa       	mov	r10,-1
8000b7c2:	3f fb       	mov	r11,-1
8000b7c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b7c8 <__avr32_f64_sub_subnormal_result>:
8000b7c8:	5c 37       	neg	r7
8000b7ca:	2f f7       	sub	r7,-1
8000b7cc:	f1 b7 04 c0 	satu	r7,0x6
8000b7d0:	e0 47 00 20 	cp.w	r7,32
8000b7d4:	c1 14       	brge	8000b7f6 <__avr32_f64_sub_subnormal_result+0x2e>
8000b7d6:	ee 08 11 20 	rsub	r8,r7,32
8000b7da:	f4 08 09 49 	lsl	r9,r10,r8
8000b7de:	5f 16       	srne	r6
8000b7e0:	f4 07 0a 4a 	lsr	r10,r10,r7
8000b7e4:	0c 4a       	or	r10,r6
8000b7e6:	f6 08 09 49 	lsl	r9,r11,r8
8000b7ea:	f5 e9 10 0a 	or	r10,r10,r9
8000b7ee:	f4 07 0a 4b 	lsr	r11,r10,r7
8000b7f2:	30 07       	mov	r7,0
8000b7f4:	cb 3b       	rjmp	8000b75a <__avr32_f64_sub_longnormalize_done>
8000b7f6:	ee 08 11 40 	rsub	r8,r7,64
8000b7fa:	f6 08 09 49 	lsl	r9,r11,r8
8000b7fe:	14 49       	or	r9,r10
8000b800:	5f 16       	srne	r6
8000b802:	f6 07 0a 4a 	lsr	r10,r11,r7
8000b806:	0c 4a       	or	r10,r6
8000b808:	30 0b       	mov	r11,0
8000b80a:	30 07       	mov	r7,0
8000b80c:	ca 7b       	rjmp	8000b75a <__avr32_f64_sub_longnormalize_done>
8000b80e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b812 <__avr32_f64_sub_longshift>:
8000b812:	f1 b6 04 c0 	satu	r6,0x6
8000b816:	f0 0e 17 00 	moveq	lr,r8
8000b81a:	c0 40       	breq	8000b822 <__avr32_f64_sub_longshift+0x10>
8000b81c:	f2 05 09 4e 	lsl	lr,r9,r5
8000b820:	10 4e       	or	lr,r8
8000b822:	f2 06 0a 48 	lsr	r8,r9,r6
8000b826:	30 09       	mov	r9,0
8000b828:	58 0e       	cp.w	lr,0
8000b82a:	5f 1e       	srne	lr
8000b82c:	1c 48       	or	r8,lr
8000b82e:	c8 3b       	rjmp	8000b734 <__avr32_f64_sub_shift_done>

8000b830 <__avr32_f64_sub_longnormalize>:
8000b830:	f4 06 12 00 	clz	r6,r10
8000b834:	f9 b7 03 00 	movlo	r7,0
8000b838:	f9 b6 03 00 	movlo	r6,0
8000b83c:	f9 bc 03 00 	movlo	r12,0
8000b840:	f7 b6 02 e0 	subhs	r6,-32
8000b844:	f4 06 09 4b 	lsl	r11,r10,r6
8000b848:	30 0a       	mov	r10,0
8000b84a:	0c 17       	sub	r7,r6
8000b84c:	fe 9a ff be 	brle	8000b7c8 <__avr32_f64_sub_subnormal_result>
8000b850:	c8 5b       	rjmp	8000b75a <__avr32_f64_sub_longnormalize_done>
8000b852:	d7 03       	nop

8000b854 <__avr32_f64_add_from_sub>:
8000b854:	ee 19 80 00 	eorh	r9,0x8000

8000b858 <__avr32_f64_add>:
8000b858:	f7 e9 20 0c 	eor	r12,r11,r9
8000b85c:	fe 96 ff 2e 	brmi	8000b6b8 <__avr32_f64_sub_from_add>
8000b860:	eb cd 40 e0 	pushm	r5-r7,lr
8000b864:	16 9c       	mov	r12,r11
8000b866:	e6 1c 80 00 	andh	r12,0x8000,COH
8000b86a:	bf db       	cbr	r11,0x1f
8000b86c:	bf d9       	cbr	r9,0x1f
8000b86e:	12 3b       	cp.w	r11,r9
8000b870:	c0 72       	brcc	8000b87e <__avr32_f64_add+0x26>
8000b872:	16 97       	mov	r7,r11
8000b874:	12 9b       	mov	r11,r9
8000b876:	0e 99       	mov	r9,r7
8000b878:	14 97       	mov	r7,r10
8000b87a:	10 9a       	mov	r10,r8
8000b87c:	0e 98       	mov	r8,r7
8000b87e:	30 0e       	mov	lr,0
8000b880:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000b884:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000b888:	b5 ab       	sbr	r11,0x14
8000b88a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000b88e:	c6 20       	breq	8000b952 <__avr32_f64_add_op2_subnormal>
8000b890:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000b894:	b5 a9       	sbr	r9,0x14
8000b896:	e0 47 07 ff 	cp.w	r7,2047
8000b89a:	c2 80       	breq	8000b8ea <__avr32_f64_add_opH_nan_or_inf>
8000b89c:	0e 26       	rsub	r6,r7
8000b89e:	c1 20       	breq	8000b8c2 <__avr32_f64_add_shift_done>
8000b8a0:	e0 46 00 36 	cp.w	r6,54
8000b8a4:	c1 52       	brcc	8000b8ce <__avr32_f64_add_res_of_done>
8000b8a6:	ec 05 11 20 	rsub	r5,r6,32
8000b8aa:	e0 46 00 20 	cp.w	r6,32
8000b8ae:	c3 52       	brcc	8000b918 <__avr32_f64_add_longshift>
8000b8b0:	f0 05 09 4e 	lsl	lr,r8,r5
8000b8b4:	f2 05 09 45 	lsl	r5,r9,r5
8000b8b8:	f0 06 0a 48 	lsr	r8,r8,r6
8000b8bc:	f2 06 0a 49 	lsr	r9,r9,r6
8000b8c0:	0a 48       	or	r8,r5

8000b8c2 <__avr32_f64_add_shift_done>:
8000b8c2:	10 0a       	add	r10,r8
8000b8c4:	f6 09 00 4b 	adc	r11,r11,r9
8000b8c8:	ed bb 00 15 	bld	r11,0x15
8000b8cc:	c3 40       	breq	8000b934 <__avr32_f64_add_res_of>

8000b8ce <__avr32_f64_add_res_of_done>:
8000b8ce:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b8d2:	18 4b       	or	r11,r12

8000b8d4 <__avr32_f64_add_round>:
8000b8d4:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000b8d8:	18 4e       	or	lr,r12
8000b8da:	ee 1e 80 00 	eorh	lr,0x8000
8000b8de:	f1 be 04 20 	satu	lr,0x1
8000b8e2:	1c 0a       	add	r10,lr
8000b8e4:	5c 0b       	acr	r11
8000b8e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b8ea <__avr32_f64_add_opH_nan_or_inf>:
8000b8ea:	b5 cb       	cbr	r11,0x14
8000b8ec:	f7 ea 10 0e 	or	lr,r11,r10
8000b8f0:	c1 01       	brne	8000b910 <__avr32_f64_add_return_nan>
8000b8f2:	e0 46 07 ff 	cp.w	r6,2047
8000b8f6:	c0 30       	breq	8000b8fc <__avr32_f64_add_opL_nan_or_inf>
8000b8f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b8fc <__avr32_f64_add_opL_nan_or_inf>:
8000b8fc:	b5 c9       	cbr	r9,0x14
8000b8fe:	f3 e8 10 0e 	or	lr,r9,r8
8000b902:	c0 71       	brne	8000b910 <__avr32_f64_add_return_nan>
8000b904:	30 0a       	mov	r10,0
8000b906:	fc 1b 7f f0 	movh	r11,0x7ff0
8000b90a:	18 4b       	or	r11,r12
8000b90c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b910 <__avr32_f64_add_return_nan>:
8000b910:	3f fa       	mov	r10,-1
8000b912:	3f fb       	mov	r11,-1
8000b914:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b918 <__avr32_f64_add_longshift>:
8000b918:	f1 b6 04 c0 	satu	r6,0x6
8000b91c:	f0 0e 17 00 	moveq	lr,r8
8000b920:	c0 60       	breq	8000b92c <__avr32_f64_add_longshift+0x14>
8000b922:	f2 05 09 4e 	lsl	lr,r9,r5
8000b926:	58 08       	cp.w	r8,0
8000b928:	5f 18       	srne	r8
8000b92a:	10 4e       	or	lr,r8
8000b92c:	f2 06 0a 48 	lsr	r8,r9,r6
8000b930:	30 09       	mov	r9,0
8000b932:	cc 8b       	rjmp	8000b8c2 <__avr32_f64_add_shift_done>

8000b934 <__avr32_f64_add_res_of>:
8000b934:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000b938:	a1 9b       	lsr	r11,0x1
8000b93a:	5d 0a       	ror	r10
8000b93c:	5d 0e       	ror	lr
8000b93e:	2f f7       	sub	r7,-1
8000b940:	e0 47 07 ff 	cp.w	r7,2047
8000b944:	f9 ba 00 00 	moveq	r10,0
8000b948:	f9 bb 00 00 	moveq	r11,0
8000b94c:	f9 be 00 00 	moveq	lr,0
8000b950:	cb fb       	rjmp	8000b8ce <__avr32_f64_add_res_of_done>

8000b952 <__avr32_f64_add_op2_subnormal>:
8000b952:	30 16       	mov	r6,1
8000b954:	58 07       	cp.w	r7,0
8000b956:	ca 01       	brne	8000b896 <__avr32_f64_add+0x3e>
8000b958:	b5 cb       	cbr	r11,0x14
8000b95a:	10 0a       	add	r10,r8
8000b95c:	f6 09 00 4b 	adc	r11,r11,r9
8000b960:	18 4b       	or	r11,r12
8000b962:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000b966:	d7 03       	nop

8000b968 <__avr32_f64_to_u32>:
8000b968:	58 0b       	cp.w	r11,0
8000b96a:	5e 6d       	retmi	0

8000b96c <__avr32_f64_to_s32>:
8000b96c:	f6 0c 15 01 	lsl	r12,r11,0x1
8000b970:	b5 9c       	lsr	r12,0x15
8000b972:	e0 2c 03 ff 	sub	r12,1023
8000b976:	5e 3d       	retlo	0
8000b978:	f8 0c 11 1f 	rsub	r12,r12,31
8000b97c:	16 99       	mov	r9,r11
8000b97e:	ab 7b       	lsl	r11,0xb
8000b980:	bf bb       	sbr	r11,0x1f
8000b982:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000b986:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000b98a:	a1 79       	lsl	r9,0x1
8000b98c:	5e 2b       	reths	r11
8000b98e:	5c 3b       	neg	r11
8000b990:	5e fb       	retal	r11

8000b992 <__avr32_u32_to_f64>:
8000b992:	f8 cb 00 00 	sub	r11,r12,0
8000b996:	30 0c       	mov	r12,0
8000b998:	c0 38       	rjmp	8000b99e <__avr32_s32_to_f64+0x4>

8000b99a <__avr32_s32_to_f64>:
8000b99a:	18 9b       	mov	r11,r12
8000b99c:	5c 4b       	abs	r11
8000b99e:	30 0a       	mov	r10,0
8000b9a0:	5e 0b       	reteq	r11
8000b9a2:	d4 01       	pushm	lr
8000b9a4:	e0 69 04 1e 	mov	r9,1054
8000b9a8:	f6 08 12 00 	clz	r8,r11
8000b9ac:	c1 70       	breq	8000b9da <__avr32_s32_to_f64+0x40>
8000b9ae:	c0 c3       	brcs	8000b9c6 <__avr32_s32_to_f64+0x2c>
8000b9b0:	f0 0e 11 20 	rsub	lr,r8,32
8000b9b4:	f6 08 09 4b 	lsl	r11,r11,r8
8000b9b8:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000b9bc:	1c 4b       	or	r11,lr
8000b9be:	f4 08 09 4a 	lsl	r10,r10,r8
8000b9c2:	10 19       	sub	r9,r8
8000b9c4:	c0 b8       	rjmp	8000b9da <__avr32_s32_to_f64+0x40>
8000b9c6:	f4 08 12 00 	clz	r8,r10
8000b9ca:	f9 b8 03 00 	movlo	r8,0
8000b9ce:	f7 b8 02 e0 	subhs	r8,-32
8000b9d2:	f4 08 09 4b 	lsl	r11,r10,r8
8000b9d6:	30 0a       	mov	r10,0
8000b9d8:	10 19       	sub	r9,r8
8000b9da:	58 09       	cp.w	r9,0
8000b9dc:	e0 89 00 30 	brgt	8000ba3c <__avr32_s32_to_f64+0xa2>
8000b9e0:	5c 39       	neg	r9
8000b9e2:	2f f9       	sub	r9,-1
8000b9e4:	e0 49 00 36 	cp.w	r9,54
8000b9e8:	c0 43       	brcs	8000b9f0 <__avr32_s32_to_f64+0x56>
8000b9ea:	30 0b       	mov	r11,0
8000b9ec:	30 0a       	mov	r10,0
8000b9ee:	c2 68       	rjmp	8000ba3a <__avr32_s32_to_f64+0xa0>
8000b9f0:	2f 69       	sub	r9,-10
8000b9f2:	f2 08 11 20 	rsub	r8,r9,32
8000b9f6:	e0 49 00 20 	cp.w	r9,32
8000b9fa:	c0 b2       	brcc	8000ba10 <__avr32_s32_to_f64+0x76>
8000b9fc:	f4 08 09 4e 	lsl	lr,r10,r8
8000ba00:	f6 08 09 48 	lsl	r8,r11,r8
8000ba04:	f4 09 0a 4a 	lsr	r10,r10,r9
8000ba08:	f6 09 0a 4b 	lsr	r11,r11,r9
8000ba0c:	10 4b       	or	r11,r8
8000ba0e:	c0 88       	rjmp	8000ba1e <__avr32_s32_to_f64+0x84>
8000ba10:	f6 08 09 4e 	lsl	lr,r11,r8
8000ba14:	14 4e       	or	lr,r10
8000ba16:	16 9a       	mov	r10,r11
8000ba18:	30 0b       	mov	r11,0
8000ba1a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000ba1e:	ed ba 00 00 	bld	r10,0x0
8000ba22:	c0 92       	brcc	8000ba34 <__avr32_s32_to_f64+0x9a>
8000ba24:	1c 7e       	tst	lr,lr
8000ba26:	c0 41       	brne	8000ba2e <__avr32_s32_to_f64+0x94>
8000ba28:	ed ba 00 01 	bld	r10,0x1
8000ba2c:	c0 42       	brcc	8000ba34 <__avr32_s32_to_f64+0x9a>
8000ba2e:	2f fa       	sub	r10,-1
8000ba30:	f7 bb 02 ff 	subhs	r11,-1
8000ba34:	5c fc       	rol	r12
8000ba36:	5d 0b       	ror	r11
8000ba38:	5d 0a       	ror	r10
8000ba3a:	d8 02       	popm	pc
8000ba3c:	e0 68 03 ff 	mov	r8,1023
8000ba40:	ed ba 00 0b 	bld	r10,0xb
8000ba44:	f7 b8 00 ff 	subeq	r8,-1
8000ba48:	10 0a       	add	r10,r8
8000ba4a:	5c 0b       	acr	r11
8000ba4c:	f7 b9 03 fe 	sublo	r9,-2
8000ba50:	e0 49 07 ff 	cp.w	r9,2047
8000ba54:	c0 55       	brlt	8000ba5e <__avr32_s32_to_f64+0xc4>
8000ba56:	30 0a       	mov	r10,0
8000ba58:	fc 1b ff e0 	movh	r11,0xffe0
8000ba5c:	c0 c8       	rjmp	8000ba74 <__floatsidf_return_op1>
8000ba5e:	ed bb 00 1f 	bld	r11,0x1f
8000ba62:	f7 b9 01 01 	subne	r9,1
8000ba66:	ab 9a       	lsr	r10,0xb
8000ba68:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000ba6c:	a1 7b       	lsl	r11,0x1
8000ba6e:	ab 9b       	lsr	r11,0xb
8000ba70:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000ba74 <__floatsidf_return_op1>:
8000ba74:	a1 7c       	lsl	r12,0x1
8000ba76:	5d 0b       	ror	r11
8000ba78:	d8 02       	popm	pc

8000ba7a <__avr32_f64_cmp_eq>:
8000ba7a:	10 3a       	cp.w	r10,r8
8000ba7c:	f2 0b 13 00 	cpc	r11,r9
8000ba80:	c0 80       	breq	8000ba90 <__avr32_f64_cmp_eq+0x16>
8000ba82:	a1 7b       	lsl	r11,0x1
8000ba84:	a1 79       	lsl	r9,0x1
8000ba86:	14 4b       	or	r11,r10
8000ba88:	12 4b       	or	r11,r9
8000ba8a:	10 4b       	or	r11,r8
8000ba8c:	5e 0f       	reteq	1
8000ba8e:	5e fd       	retal	0
8000ba90:	a1 7b       	lsl	r11,0x1
8000ba92:	fc 1c ff e0 	movh	r12,0xffe0
8000ba96:	58 0a       	cp.w	r10,0
8000ba98:	f8 0b 13 00 	cpc	r11,r12
8000ba9c:	5e 8f       	retls	1
8000ba9e:	5e fd       	retal	0

8000baa0 <__avr32_f64_cmp_ge>:
8000baa0:	1a de       	st.w	--sp,lr
8000baa2:	1a d7       	st.w	--sp,r7
8000baa4:	a1 7b       	lsl	r11,0x1
8000baa6:	5f 3c       	srlo	r12
8000baa8:	a1 79       	lsl	r9,0x1
8000baaa:	5f 37       	srlo	r7
8000baac:	5c fc       	rol	r12
8000baae:	fc 1e ff e0 	movh	lr,0xffe0
8000bab2:	58 0a       	cp.w	r10,0
8000bab4:	fc 0b 13 00 	cpc	r11,lr
8000bab8:	e0 8b 00 1d 	brhi	8000baf2 <__avr32_f64_cmp_ge+0x52>
8000babc:	58 08       	cp.w	r8,0
8000babe:	fc 09 13 00 	cpc	r9,lr
8000bac2:	e0 8b 00 18 	brhi	8000baf2 <__avr32_f64_cmp_ge+0x52>
8000bac6:	58 0b       	cp.w	r11,0
8000bac8:	f5 ba 00 00 	subfeq	r10,0
8000bacc:	c1 50       	breq	8000baf6 <__avr32_f64_cmp_ge+0x56>
8000bace:	1b 07       	ld.w	r7,sp++
8000bad0:	1b 0e       	ld.w	lr,sp++
8000bad2:	58 3c       	cp.w	r12,3
8000bad4:	c0 a0       	breq	8000bae8 <__avr32_f64_cmp_ge+0x48>
8000bad6:	58 1c       	cp.w	r12,1
8000bad8:	c0 33       	brcs	8000bade <__avr32_f64_cmp_ge+0x3e>
8000bada:	5e 0f       	reteq	1
8000badc:	5e 1d       	retne	0
8000bade:	10 3a       	cp.w	r10,r8
8000bae0:	f2 0b 13 00 	cpc	r11,r9
8000bae4:	5e 2f       	reths	1
8000bae6:	5e 3d       	retlo	0
8000bae8:	14 38       	cp.w	r8,r10
8000baea:	f6 09 13 00 	cpc	r9,r11
8000baee:	5e 2f       	reths	1
8000baf0:	5e 3d       	retlo	0
8000baf2:	1b 07       	ld.w	r7,sp++
8000baf4:	d8 0a       	popm	pc,r12=0
8000baf6:	58 17       	cp.w	r7,1
8000baf8:	5f 0c       	sreq	r12
8000bafa:	58 09       	cp.w	r9,0
8000bafc:	f5 b8 00 00 	subfeq	r8,0
8000bb00:	1b 07       	ld.w	r7,sp++
8000bb02:	1b 0e       	ld.w	lr,sp++
8000bb04:	5e 0f       	reteq	1
8000bb06:	5e fc       	retal	r12

8000bb08 <__avr32_f64_cmp_lt>:
8000bb08:	1a de       	st.w	--sp,lr
8000bb0a:	1a d7       	st.w	--sp,r7
8000bb0c:	a1 7b       	lsl	r11,0x1
8000bb0e:	5f 3c       	srlo	r12
8000bb10:	a1 79       	lsl	r9,0x1
8000bb12:	5f 37       	srlo	r7
8000bb14:	5c fc       	rol	r12
8000bb16:	fc 1e ff e0 	movh	lr,0xffe0
8000bb1a:	58 0a       	cp.w	r10,0
8000bb1c:	fc 0b 13 00 	cpc	r11,lr
8000bb20:	e0 8b 00 1d 	brhi	8000bb5a <__avr32_f64_cmp_lt+0x52>
8000bb24:	58 08       	cp.w	r8,0
8000bb26:	fc 09 13 00 	cpc	r9,lr
8000bb2a:	e0 8b 00 18 	brhi	8000bb5a <__avr32_f64_cmp_lt+0x52>
8000bb2e:	58 0b       	cp.w	r11,0
8000bb30:	f5 ba 00 00 	subfeq	r10,0
8000bb34:	c1 50       	breq	8000bb5e <__avr32_f64_cmp_lt+0x56>
8000bb36:	1b 07       	ld.w	r7,sp++
8000bb38:	1b 0e       	ld.w	lr,sp++
8000bb3a:	58 3c       	cp.w	r12,3
8000bb3c:	c0 a0       	breq	8000bb50 <__avr32_f64_cmp_lt+0x48>
8000bb3e:	58 1c       	cp.w	r12,1
8000bb40:	c0 33       	brcs	8000bb46 <__avr32_f64_cmp_lt+0x3e>
8000bb42:	5e 0d       	reteq	0
8000bb44:	5e 1f       	retne	1
8000bb46:	10 3a       	cp.w	r10,r8
8000bb48:	f2 0b 13 00 	cpc	r11,r9
8000bb4c:	5e 2d       	reths	0
8000bb4e:	5e 3f       	retlo	1
8000bb50:	14 38       	cp.w	r8,r10
8000bb52:	f6 09 13 00 	cpc	r9,r11
8000bb56:	5e 2d       	reths	0
8000bb58:	5e 3f       	retlo	1
8000bb5a:	1b 07       	ld.w	r7,sp++
8000bb5c:	d8 0a       	popm	pc,r12=0
8000bb5e:	58 17       	cp.w	r7,1
8000bb60:	5f 1c       	srne	r12
8000bb62:	58 09       	cp.w	r9,0
8000bb64:	f5 b8 00 00 	subfeq	r8,0
8000bb68:	1b 07       	ld.w	r7,sp++
8000bb6a:	1b 0e       	ld.w	lr,sp++
8000bb6c:	5e 0d       	reteq	0
8000bb6e:	5e fc       	retal	r12

8000bb70 <__avr32_f64_div>:
8000bb70:	eb cd 40 ff 	pushm	r0-r7,lr
8000bb74:	f7 e9 20 0e 	eor	lr,r11,r9
8000bb78:	f6 07 16 14 	lsr	r7,r11,0x14
8000bb7c:	a9 7b       	lsl	r11,0x9
8000bb7e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000bb82:	a9 7a       	lsl	r10,0x9
8000bb84:	bd bb       	sbr	r11,0x1d
8000bb86:	e4 1b 3f ff 	andh	r11,0x3fff
8000bb8a:	ab d7       	cbr	r7,0xb
8000bb8c:	e0 80 00 cc 	breq	8000bd24 <__avr32_f64_div_round_subnormal+0x54>
8000bb90:	e0 47 07 ff 	cp.w	r7,2047
8000bb94:	e0 84 00 b5 	brge	8000bcfe <__avr32_f64_div_round_subnormal+0x2e>
8000bb98:	f2 06 16 14 	lsr	r6,r9,0x14
8000bb9c:	a9 79       	lsl	r9,0x9
8000bb9e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000bba2:	a9 78       	lsl	r8,0x9
8000bba4:	bd b9       	sbr	r9,0x1d
8000bba6:	e4 19 3f ff 	andh	r9,0x3fff
8000bbaa:	ab d6       	cbr	r6,0xb
8000bbac:	e0 80 00 e2 	breq	8000bd70 <__avr32_f64_div_round_subnormal+0xa0>
8000bbb0:	e0 46 07 ff 	cp.w	r6,2047
8000bbb4:	e0 84 00 b2 	brge	8000bd18 <__avr32_f64_div_round_subnormal+0x48>
8000bbb8:	0c 17       	sub	r7,r6
8000bbba:	fe 37 fc 01 	sub	r7,-1023
8000bbbe:	fc 1c 80 00 	movh	r12,0x8000
8000bbc2:	f8 03 16 01 	lsr	r3,r12,0x1
8000bbc6:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000bbca:	5c d4       	com	r4
8000bbcc:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000bbd0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000bbd4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000bbd8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000bbdc:	ea 03 15 02 	lsl	r3,r5,0x2
8000bbe0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000bbe4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000bbe8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000bbec:	ea 03 15 02 	lsl	r3,r5,0x2
8000bbf0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000bbf4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000bbf8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000bbfc:	ea 03 15 02 	lsl	r3,r5,0x2
8000bc00:	e6 08 06 40 	mulu.d	r0,r3,r8
8000bc04:	e4 09 07 40 	macu.d	r0,r2,r9
8000bc08:	e6 09 06 44 	mulu.d	r4,r3,r9
8000bc0c:	02 04       	add	r4,r1
8000bc0e:	5c 05       	acr	r5
8000bc10:	a3 65       	lsl	r5,0x2
8000bc12:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000bc16:	a3 64       	lsl	r4,0x2
8000bc18:	5c 34       	neg	r4
8000bc1a:	f8 05 01 45 	sbc	r5,r12,r5
8000bc1e:	e6 04 06 40 	mulu.d	r0,r3,r4
8000bc22:	e4 05 07 40 	macu.d	r0,r2,r5
8000bc26:	e6 05 06 44 	mulu.d	r4,r3,r5
8000bc2a:	02 04       	add	r4,r1
8000bc2c:	5c 05       	acr	r5
8000bc2e:	ea 03 15 02 	lsl	r3,r5,0x2
8000bc32:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000bc36:	e8 02 15 02 	lsl	r2,r4,0x2
8000bc3a:	e6 08 06 40 	mulu.d	r0,r3,r8
8000bc3e:	e4 09 07 40 	macu.d	r0,r2,r9
8000bc42:	e6 09 06 44 	mulu.d	r4,r3,r9
8000bc46:	02 04       	add	r4,r1
8000bc48:	5c 05       	acr	r5
8000bc4a:	a3 65       	lsl	r5,0x2
8000bc4c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000bc50:	a3 64       	lsl	r4,0x2
8000bc52:	5c 34       	neg	r4
8000bc54:	f8 05 01 45 	sbc	r5,r12,r5
8000bc58:	e6 04 06 40 	mulu.d	r0,r3,r4
8000bc5c:	e4 05 07 40 	macu.d	r0,r2,r5
8000bc60:	e6 05 06 44 	mulu.d	r4,r3,r5
8000bc64:	02 04       	add	r4,r1
8000bc66:	5c 05       	acr	r5
8000bc68:	ea 03 15 02 	lsl	r3,r5,0x2
8000bc6c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000bc70:	e8 02 15 02 	lsl	r2,r4,0x2
8000bc74:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000bc78:	e4 0b 07 40 	macu.d	r0,r2,r11
8000bc7c:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000bc80:	02 02       	add	r2,r1
8000bc82:	5c 03       	acr	r3
8000bc84:	ed b3 00 1c 	bld	r3,0x1c
8000bc88:	c0 90       	breq	8000bc9a <__avr32_f64_div+0x12a>
8000bc8a:	a1 72       	lsl	r2,0x1
8000bc8c:	5c f3       	rol	r3
8000bc8e:	20 17       	sub	r7,1
8000bc90:	a3 9a       	lsr	r10,0x3
8000bc92:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000bc96:	a3 9b       	lsr	r11,0x3
8000bc98:	c0 58       	rjmp	8000bca2 <__avr32_f64_div+0x132>
8000bc9a:	a5 8a       	lsr	r10,0x4
8000bc9c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000bca0:	a5 8b       	lsr	r11,0x4
8000bca2:	58 07       	cp.w	r7,0
8000bca4:	e0 8a 00 8b 	brle	8000bdba <__avr32_f64_div_res_subnormal>
8000bca8:	e0 12 ff 00 	andl	r2,0xff00
8000bcac:	e8 12 00 80 	orl	r2,0x80
8000bcb0:	e6 08 06 40 	mulu.d	r0,r3,r8
8000bcb4:	e4 09 07 40 	macu.d	r0,r2,r9
8000bcb8:	e4 08 06 44 	mulu.d	r4,r2,r8
8000bcbc:	e6 09 06 48 	mulu.d	r8,r3,r9
8000bcc0:	00 05       	add	r5,r0
8000bcc2:	f0 01 00 48 	adc	r8,r8,r1
8000bcc6:	5c 09       	acr	r9
8000bcc8:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000bccc:	58 04       	cp.w	r4,0
8000bcce:	5c 25       	cpc	r5

8000bcd0 <__avr32_f64_div_round_subnormal>:
8000bcd0:	f4 08 13 00 	cpc	r8,r10
8000bcd4:	f6 09 13 00 	cpc	r9,r11
8000bcd8:	5f 36       	srlo	r6
8000bcda:	f8 06 17 00 	moveq	r6,r12
8000bcde:	e4 0a 16 08 	lsr	r10,r2,0x8
8000bce2:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000bce6:	e6 0b 16 08 	lsr	r11,r3,0x8
8000bcea:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000bcee:	ed be 00 1f 	bld	lr,0x1f
8000bcf2:	ef bb 00 1f 	bst	r11,0x1f
8000bcf6:	0c 0a       	add	r10,r6
8000bcf8:	5c 0b       	acr	r11
8000bcfa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000bcfe:	e4 1b 00 0f 	andh	r11,0xf
8000bd02:	14 4b       	or	r11,r10
8000bd04:	e0 81 00 a7 	brne	8000be52 <__avr32_f64_div_res_subnormal+0x98>
8000bd08:	f2 06 16 14 	lsr	r6,r9,0x14
8000bd0c:	ab d6       	cbr	r6,0xb
8000bd0e:	e0 46 07 ff 	cp.w	r6,2047
8000bd12:	e0 81 00 a4 	brne	8000be5a <__avr32_f64_div_res_subnormal+0xa0>
8000bd16:	c9 e8       	rjmp	8000be52 <__avr32_f64_div_res_subnormal+0x98>
8000bd18:	e4 19 00 0f 	andh	r9,0xf
8000bd1c:	10 49       	or	r9,r8
8000bd1e:	e0 81 00 9a 	brne	8000be52 <__avr32_f64_div_res_subnormal+0x98>
8000bd22:	c9 28       	rjmp	8000be46 <__avr32_f64_div_res_subnormal+0x8c>
8000bd24:	a3 7b       	lsl	r11,0x3
8000bd26:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000bd2a:	a3 7a       	lsl	r10,0x3
8000bd2c:	f5 eb 10 04 	or	r4,r10,r11
8000bd30:	e0 80 00 a0 	breq	8000be70 <__avr32_f64_div_op1_zero>
8000bd34:	f6 04 12 00 	clz	r4,r11
8000bd38:	c1 70       	breq	8000bd66 <__avr32_f64_div_round_subnormal+0x96>
8000bd3a:	c0 c3       	brcs	8000bd52 <__avr32_f64_div_round_subnormal+0x82>
8000bd3c:	e8 05 11 20 	rsub	r5,r4,32
8000bd40:	f6 04 09 4b 	lsl	r11,r11,r4
8000bd44:	f4 05 0a 45 	lsr	r5,r10,r5
8000bd48:	0a 4b       	or	r11,r5
8000bd4a:	f4 04 09 4a 	lsl	r10,r10,r4
8000bd4e:	08 17       	sub	r7,r4
8000bd50:	c0 b8       	rjmp	8000bd66 <__avr32_f64_div_round_subnormal+0x96>
8000bd52:	f4 04 12 00 	clz	r4,r10
8000bd56:	f9 b4 03 00 	movlo	r4,0
8000bd5a:	f7 b4 02 e0 	subhs	r4,-32
8000bd5e:	f4 04 09 4b 	lsl	r11,r10,r4
8000bd62:	30 0a       	mov	r10,0
8000bd64:	08 17       	sub	r7,r4
8000bd66:	a3 8a       	lsr	r10,0x2
8000bd68:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000bd6c:	a3 8b       	lsr	r11,0x2
8000bd6e:	c1 1b       	rjmp	8000bb90 <__avr32_f64_div+0x20>
8000bd70:	a3 79       	lsl	r9,0x3
8000bd72:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000bd76:	a3 78       	lsl	r8,0x3
8000bd78:	f3 e8 10 04 	or	r4,r9,r8
8000bd7c:	c6 f0       	breq	8000be5a <__avr32_f64_div_res_subnormal+0xa0>
8000bd7e:	f2 04 12 00 	clz	r4,r9
8000bd82:	c1 70       	breq	8000bdb0 <__avr32_f64_div_round_subnormal+0xe0>
8000bd84:	c0 c3       	brcs	8000bd9c <__avr32_f64_div_round_subnormal+0xcc>
8000bd86:	e8 05 11 20 	rsub	r5,r4,32
8000bd8a:	f2 04 09 49 	lsl	r9,r9,r4
8000bd8e:	f0 05 0a 45 	lsr	r5,r8,r5
8000bd92:	0a 49       	or	r9,r5
8000bd94:	f0 04 09 48 	lsl	r8,r8,r4
8000bd98:	08 16       	sub	r6,r4
8000bd9a:	c0 b8       	rjmp	8000bdb0 <__avr32_f64_div_round_subnormal+0xe0>
8000bd9c:	f0 04 12 00 	clz	r4,r8
8000bda0:	f9 b4 03 00 	movlo	r4,0
8000bda4:	f7 b4 02 e0 	subhs	r4,-32
8000bda8:	f0 04 09 49 	lsl	r9,r8,r4
8000bdac:	30 08       	mov	r8,0
8000bdae:	08 16       	sub	r6,r4
8000bdb0:	a3 88       	lsr	r8,0x2
8000bdb2:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000bdb6:	a3 89       	lsr	r9,0x2
8000bdb8:	cf ca       	rjmp	8000bbb0 <__avr32_f64_div+0x40>

8000bdba <__avr32_f64_div_res_subnormal>:
8000bdba:	5c 37       	neg	r7
8000bdbc:	2f f7       	sub	r7,-1
8000bdbe:	f1 b7 04 c0 	satu	r7,0x6
8000bdc2:	e0 47 00 20 	cp.w	r7,32
8000bdc6:	c1 54       	brge	8000bdf0 <__avr32_f64_div_res_subnormal+0x36>
8000bdc8:	ee 06 11 20 	rsub	r6,r7,32
8000bdcc:	e4 07 0a 42 	lsr	r2,r2,r7
8000bdd0:	e6 06 09 4c 	lsl	r12,r3,r6
8000bdd4:	18 42       	or	r2,r12
8000bdd6:	e6 07 0a 43 	lsr	r3,r3,r7
8000bdda:	f4 06 09 41 	lsl	r1,r10,r6
8000bdde:	f4 07 0a 4a 	lsr	r10,r10,r7
8000bde2:	f6 06 09 4c 	lsl	r12,r11,r6
8000bde6:	18 4a       	or	r10,r12
8000bde8:	f6 07 0a 4b 	lsr	r11,r11,r7
8000bdec:	30 00       	mov	r0,0
8000bdee:	c1 58       	rjmp	8000be18 <__avr32_f64_div_res_subnormal+0x5e>
8000bdf0:	ee 06 11 20 	rsub	r6,r7,32
8000bdf4:	f9 b0 00 00 	moveq	r0,0
8000bdf8:	f9 bc 00 00 	moveq	r12,0
8000bdfc:	c0 50       	breq	8000be06 <__avr32_f64_div_res_subnormal+0x4c>
8000bdfe:	f4 06 09 40 	lsl	r0,r10,r6
8000be02:	f6 06 09 4c 	lsl	r12,r11,r6
8000be06:	e6 07 0a 42 	lsr	r2,r3,r7
8000be0a:	30 03       	mov	r3,0
8000be0c:	f4 07 0a 41 	lsr	r1,r10,r7
8000be10:	18 41       	or	r1,r12
8000be12:	f6 07 0a 4a 	lsr	r10,r11,r7
8000be16:	30 0b       	mov	r11,0
8000be18:	e0 12 ff 00 	andl	r2,0xff00
8000be1c:	e8 12 00 80 	orl	r2,0x80
8000be20:	e6 08 06 46 	mulu.d	r6,r3,r8
8000be24:	e4 09 07 46 	macu.d	r6,r2,r9
8000be28:	e4 08 06 44 	mulu.d	r4,r2,r8
8000be2c:	e6 09 06 48 	mulu.d	r8,r3,r9
8000be30:	0c 05       	add	r5,r6
8000be32:	f0 07 00 48 	adc	r8,r8,r7
8000be36:	5c 09       	acr	r9
8000be38:	30 07       	mov	r7,0
8000be3a:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000be3e:	00 34       	cp.w	r4,r0
8000be40:	e2 05 13 00 	cpc	r5,r1
8000be44:	c4 6b       	rjmp	8000bcd0 <__avr32_f64_div_round_subnormal>
8000be46:	1c 9b       	mov	r11,lr
8000be48:	e6 1b 80 00 	andh	r11,0x8000,COH
8000be4c:	30 0a       	mov	r10,0
8000be4e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000be52:	3f fb       	mov	r11,-1
8000be54:	30 0a       	mov	r10,0
8000be56:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000be5a:	f5 eb 10 04 	or	r4,r10,r11
8000be5e:	c0 90       	breq	8000be70 <__avr32_f64_div_op1_zero>
8000be60:	1c 9b       	mov	r11,lr
8000be62:	e6 1b 80 00 	andh	r11,0x8000,COH
8000be66:	ea 1b 7f f0 	orh	r11,0x7ff0
8000be6a:	30 0a       	mov	r10,0
8000be6c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000be70 <__avr32_f64_div_op1_zero>:
8000be70:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000be74:	ce f0       	breq	8000be52 <__avr32_f64_div_res_subnormal+0x98>
8000be76:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000be7a:	e0 44 07 ff 	cp.w	r4,2047
8000be7e:	ce 41       	brne	8000be46 <__avr32_f64_div_res_subnormal+0x8c>
8000be80:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000be84:	ce 10       	breq	8000be46 <__avr32_f64_div_res_subnormal+0x8c>
8000be86:	ce 6b       	rjmp	8000be52 <__avr32_f64_div_res_subnormal+0x98>

8000be88 <__avr32_umod64>:
8000be88:	d4 31       	pushm	r0-r7,lr
8000be8a:	1a 97       	mov	r7,sp
8000be8c:	20 3d       	sub	sp,12
8000be8e:	10 9c       	mov	r12,r8
8000be90:	12 95       	mov	r5,r9
8000be92:	14 9e       	mov	lr,r10
8000be94:	16 91       	mov	r1,r11
8000be96:	16 96       	mov	r6,r11
8000be98:	58 09       	cp.w	r9,0
8000be9a:	e0 81 00 81 	brne	8000bf9c <__avr32_umod64+0x114>
8000be9e:	16 38       	cp.w	r8,r11
8000bea0:	e0 88 00 12 	brls	8000bec4 <__avr32_umod64+0x3c>
8000bea4:	f0 08 12 00 	clz	r8,r8
8000bea8:	c4 e0       	breq	8000bf44 <__avr32_umod64+0xbc>
8000beaa:	f6 08 09 46 	lsl	r6,r11,r8
8000beae:	f8 08 09 4c 	lsl	r12,r12,r8
8000beb2:	f0 0b 11 20 	rsub	r11,r8,32
8000beb6:	f4 08 09 4e 	lsl	lr,r10,r8
8000beba:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000bebe:	f7 e6 10 06 	or	r6,r11,r6
8000bec2:	c4 18       	rjmp	8000bf44 <__avr32_umod64+0xbc>
8000bec4:	58 08       	cp.w	r8,0
8000bec6:	c0 51       	brne	8000bed0 <__avr32_umod64+0x48>
8000bec8:	30 19       	mov	r9,1
8000beca:	f2 08 0d 08 	divu	r8,r9,r8
8000bece:	10 9c       	mov	r12,r8
8000bed0:	f8 08 12 00 	clz	r8,r12
8000bed4:	c0 31       	brne	8000beda <__avr32_umod64+0x52>
8000bed6:	18 16       	sub	r6,r12
8000bed8:	c3 68       	rjmp	8000bf44 <__avr32_umod64+0xbc>
8000beda:	f0 03 11 20 	rsub	r3,r8,32
8000bede:	f4 03 0a 4b 	lsr	r11,r10,r3
8000bee2:	f8 08 09 4c 	lsl	r12,r12,r8
8000bee6:	ec 08 09 49 	lsl	r9,r6,r8
8000beea:	ec 03 0a 43 	lsr	r3,r6,r3
8000beee:	f7 e9 10 09 	or	r9,r11,r9
8000bef2:	f8 05 16 10 	lsr	r5,r12,0x10
8000bef6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000befa:	e6 05 0d 02 	divu	r2,r3,r5
8000befe:	f2 0e 16 10 	lsr	lr,r9,0x10
8000bf02:	ec 02 02 4b 	mul	r11,r6,r2
8000bf06:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000bf0a:	16 3e       	cp.w	lr,r11
8000bf0c:	c0 72       	brcc	8000bf1a <__avr32_umod64+0x92>
8000bf0e:	18 0e       	add	lr,r12
8000bf10:	18 3e       	cp.w	lr,r12
8000bf12:	c0 43       	brcs	8000bf1a <__avr32_umod64+0x92>
8000bf14:	16 3e       	cp.w	lr,r11
8000bf16:	fd dc e3 0e 	addcs	lr,lr,r12
8000bf1a:	fc 0b 01 03 	sub	r3,lr,r11
8000bf1e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000bf22:	e6 05 0d 02 	divu	r2,r3,r5
8000bf26:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000bf2a:	a5 36       	mul	r6,r2
8000bf2c:	0c 39       	cp.w	r9,r6
8000bf2e:	c0 72       	brcc	8000bf3c <__avr32_umod64+0xb4>
8000bf30:	18 09       	add	r9,r12
8000bf32:	18 39       	cp.w	r9,r12
8000bf34:	c0 43       	brcs	8000bf3c <__avr32_umod64+0xb4>
8000bf36:	0c 39       	cp.w	r9,r6
8000bf38:	f3 dc e3 09 	addcs	r9,r9,r12
8000bf3c:	f2 06 01 06 	sub	r6,r9,r6
8000bf40:	f4 08 09 4e 	lsl	lr,r10,r8
8000bf44:	f8 0a 16 10 	lsr	r10,r12,0x10
8000bf48:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000bf4c:	ec 0a 0d 02 	divu	r2,r6,r10
8000bf50:	fc 09 16 10 	lsr	r9,lr,0x10
8000bf54:	ea 02 02 4b 	mul	r11,r5,r2
8000bf58:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000bf5c:	16 39       	cp.w	r9,r11
8000bf5e:	c0 72       	brcc	8000bf6c <__avr32_umod64+0xe4>
8000bf60:	18 09       	add	r9,r12
8000bf62:	18 39       	cp.w	r9,r12
8000bf64:	c0 43       	brcs	8000bf6c <__avr32_umod64+0xe4>
8000bf66:	16 39       	cp.w	r9,r11
8000bf68:	f3 dc e3 09 	addcs	r9,r9,r12
8000bf6c:	f2 0b 01 0b 	sub	r11,r9,r11
8000bf70:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000bf74:	f6 0a 0d 0a 	divu	r10,r11,r10
8000bf78:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000bf7c:	ea 0a 02 4a 	mul	r10,r5,r10
8000bf80:	14 3e       	cp.w	lr,r10
8000bf82:	c0 72       	brcc	8000bf90 <__avr32_umod64+0x108>
8000bf84:	18 0e       	add	lr,r12
8000bf86:	18 3e       	cp.w	lr,r12
8000bf88:	c0 43       	brcs	8000bf90 <__avr32_umod64+0x108>
8000bf8a:	14 3e       	cp.w	lr,r10
8000bf8c:	fd dc e3 0e 	addcs	lr,lr,r12
8000bf90:	fc 0a 01 0a 	sub	r10,lr,r10
8000bf94:	30 0b       	mov	r11,0
8000bf96:	f4 08 0a 4a 	lsr	r10,r10,r8
8000bf9a:	c7 b8       	rjmp	8000c090 <__avr32_umod64+0x208>
8000bf9c:	16 39       	cp.w	r9,r11
8000bf9e:	e0 8b 00 79 	brhi	8000c090 <__avr32_umod64+0x208>
8000bfa2:	f2 09 12 00 	clz	r9,r9
8000bfa6:	c1 21       	brne	8000bfca <__avr32_umod64+0x142>
8000bfa8:	10 3a       	cp.w	r10,r8
8000bfaa:	5f 2b       	srhs	r11
8000bfac:	0a 31       	cp.w	r1,r5
8000bfae:	5f ba       	srhi	r10
8000bfb0:	f7 ea 10 0a 	or	r10,r11,r10
8000bfb4:	f2 0a 18 00 	cp.b	r10,r9
8000bfb8:	c0 60       	breq	8000bfc4 <__avr32_umod64+0x13c>
8000bfba:	fc 08 01 0c 	sub	r12,lr,r8
8000bfbe:	e2 05 01 46 	sbc	r6,r1,r5
8000bfc2:	18 9e       	mov	lr,r12
8000bfc4:	0c 9b       	mov	r11,r6
8000bfc6:	1c 9a       	mov	r10,lr
8000bfc8:	c6 48       	rjmp	8000c090 <__avr32_umod64+0x208>
8000bfca:	ea 09 09 4c 	lsl	r12,r5,r9
8000bfce:	f2 06 11 20 	rsub	r6,r9,32
8000bfd2:	f6 09 09 4b 	lsl	r11,r11,r9
8000bfd6:	f0 09 09 42 	lsl	r2,r8,r9
8000bfda:	ef 46 ff f4 	st.w	r7[-12],r6
8000bfde:	f0 06 0a 48 	lsr	r8,r8,r6
8000bfe2:	18 48       	or	r8,r12
8000bfe4:	e2 06 0a 4c 	lsr	r12,r1,r6
8000bfe8:	f4 09 09 43 	lsl	r3,r10,r9
8000bfec:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000bff0:	f4 06 0a 4a 	lsr	r10,r10,r6
8000bff4:	16 4a       	or	r10,r11
8000bff6:	f0 0b 16 10 	lsr	r11,r8,0x10
8000bffa:	f8 0b 0d 04 	divu	r4,r12,r11
8000bffe:	f4 0c 16 10 	lsr	r12,r10,0x10
8000c002:	08 91       	mov	r1,r4
8000c004:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000c008:	e8 0e 02 46 	mul	r6,r4,lr
8000c00c:	0c 3c       	cp.w	r12,r6
8000c00e:	c0 a2       	brcc	8000c022 <__avr32_umod64+0x19a>
8000c010:	20 11       	sub	r1,1
8000c012:	10 0c       	add	r12,r8
8000c014:	10 3c       	cp.w	r12,r8
8000c016:	c0 63       	brcs	8000c022 <__avr32_umod64+0x19a>
8000c018:	0c 3c       	cp.w	r12,r6
8000c01a:	f7 b1 03 01 	sublo	r1,1
8000c01e:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000c022:	0c 1c       	sub	r12,r6
8000c024:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000c028:	f8 0b 0d 04 	divu	r4,r12,r11
8000c02c:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000c030:	08 96       	mov	r6,r4
8000c032:	e8 0e 02 4e 	mul	lr,r4,lr
8000c036:	1c 3b       	cp.w	r11,lr
8000c038:	c0 a2       	brcc	8000c04c <__avr32_umod64+0x1c4>
8000c03a:	20 16       	sub	r6,1
8000c03c:	10 0b       	add	r11,r8
8000c03e:	10 3b       	cp.w	r11,r8
8000c040:	c0 63       	brcs	8000c04c <__avr32_umod64+0x1c4>
8000c042:	1c 3b       	cp.w	r11,lr
8000c044:	f7 b6 03 01 	sublo	r6,1
8000c048:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000c04c:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000c050:	1c 1b       	sub	r11,lr
8000c052:	e2 02 06 40 	mulu.d	r0,r1,r2
8000c056:	00 9e       	mov	lr,r0
8000c058:	02 9c       	mov	r12,r1
8000c05a:	16 3c       	cp.w	r12,r11
8000c05c:	e0 8b 00 08 	brhi	8000c06c <__avr32_umod64+0x1e4>
8000c060:	5f 06       	sreq	r6
8000c062:	06 30       	cp.w	r0,r3
8000c064:	5f ba       	srhi	r10
8000c066:	ed ea 00 0a 	and	r10,r6,r10
8000c06a:	c0 60       	breq	8000c076 <__avr32_umod64+0x1ee>
8000c06c:	fc 02 01 04 	sub	r4,lr,r2
8000c070:	f8 08 01 4c 	sbc	r12,r12,r8
8000c074:	08 9e       	mov	lr,r4
8000c076:	e6 0e 01 0a 	sub	r10,r3,lr
8000c07a:	f6 0c 01 4c 	sbc	r12,r11,r12
8000c07e:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000c082:	f8 09 0a 4b 	lsr	r11,r12,r9
8000c086:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c08a:	f8 01 09 4c 	lsl	r12,r12,r1
8000c08e:	18 4a       	or	r10,r12
8000c090:	2f dd       	sub	sp,-12
8000c092:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000c200 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000c200:	c0 08       	rjmp	8000c200 <_evba>
	...

8000c204 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000c204:	c0 08       	rjmp	8000c204 <_handle_TLB_Multiple_Hit>
	...

8000c208 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000c208:	c0 08       	rjmp	8000c208 <_handle_Bus_Error_Data_Fetch>
	...

8000c20c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000c20c:	c0 08       	rjmp	8000c20c <_handle_Bus_Error_Instruction_Fetch>
	...

8000c210 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000c210:	c0 08       	rjmp	8000c210 <_handle_NMI>
	...

8000c214 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000c214:	c0 08       	rjmp	8000c214 <_handle_Instruction_Address>
	...

8000c218 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000c218:	c0 08       	rjmp	8000c218 <_handle_ITLB_Protection>
	...

8000c21c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000c21c:	c0 08       	rjmp	8000c21c <_handle_Breakpoint>
	...

8000c220 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000c220:	c0 08       	rjmp	8000c220 <_handle_Illegal_Opcode>
	...

8000c224 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000c224:	c0 08       	rjmp	8000c224 <_handle_Unimplemented_Instruction>
	...

8000c228 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000c228:	c0 08       	rjmp	8000c228 <_handle_Privilege_Violation>
	...

8000c22c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000c22c:	c0 08       	rjmp	8000c22c <_handle_Floating_Point>
	...

8000c230 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000c230:	c0 08       	rjmp	8000c230 <_handle_Coprocessor_Absent>
	...

8000c234 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000c234:	c0 08       	rjmp	8000c234 <_handle_Data_Address_Read>
	...

8000c238 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000c238:	c0 08       	rjmp	8000c238 <_handle_Data_Address_Write>
	...

8000c23c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000c23c:	c0 08       	rjmp	8000c23c <_handle_DTLB_Protection_Read>
	...

8000c240 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000c240:	c0 08       	rjmp	8000c240 <_handle_DTLB_Protection_Write>
	...

8000c244 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000c244:	c0 08       	rjmp	8000c244 <_handle_DTLB_Modified>
	...

8000c250 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000c250:	c0 08       	rjmp	8000c250 <_handle_ITLB_Miss>
	...

8000c260 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000c260:	c0 08       	rjmp	8000c260 <_handle_DTLB_Miss_Read>
	...

8000c270 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000c270:	c0 08       	rjmp	8000c270 <_handle_DTLB_Miss_Write>
	...

8000c300 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000c300:	c0 08       	rjmp	8000c300 <_handle_Supervisor_Call>
8000c302:	d7 03       	nop

8000c304 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000c304:	30 0c       	mov	r12,0
8000c306:	fe b0 b0 e5 	rcall	800024d0 <_get_interrupt_handler>
8000c30a:	58 0c       	cp.w	r12,0
8000c30c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000c310:	d6 03       	rete

8000c312 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000c312:	30 1c       	mov	r12,1
8000c314:	fe b0 b0 de 	rcall	800024d0 <_get_interrupt_handler>
8000c318:	58 0c       	cp.w	r12,0
8000c31a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000c31e:	d6 03       	rete

8000c320 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000c320:	30 2c       	mov	r12,2
8000c322:	fe b0 b0 d7 	rcall	800024d0 <_get_interrupt_handler>
8000c326:	58 0c       	cp.w	r12,0
8000c328:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000c32c:	d6 03       	rete

8000c32e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000c32e:	30 3c       	mov	r12,3
8000c330:	fe b0 b0 d0 	rcall	800024d0 <_get_interrupt_handler>
8000c334:	58 0c       	cp.w	r12,0
8000c336:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000c33a:	d6 03       	rete
8000c33c:	d7 03       	nop
8000c33e:	d7 03       	nop
8000c340:	d7 03       	nop
8000c342:	d7 03       	nop
8000c344:	d7 03       	nop
8000c346:	d7 03       	nop
8000c348:	d7 03       	nop
8000c34a:	d7 03       	nop
8000c34c:	d7 03       	nop
8000c34e:	d7 03       	nop
8000c350:	d7 03       	nop
8000c352:	d7 03       	nop
8000c354:	d7 03       	nop
8000c356:	d7 03       	nop
8000c358:	d7 03       	nop
8000c35a:	d7 03       	nop
8000c35c:	d7 03       	nop
8000c35e:	d7 03       	nop
8000c360:	d7 03       	nop
8000c362:	d7 03       	nop
8000c364:	d7 03       	nop
8000c366:	d7 03       	nop
8000c368:	d7 03       	nop
8000c36a:	d7 03       	nop
8000c36c:	d7 03       	nop
8000c36e:	d7 03       	nop
8000c370:	d7 03       	nop
8000c372:	d7 03       	nop
8000c374:	d7 03       	nop
8000c376:	d7 03       	nop
8000c378:	d7 03       	nop
8000c37a:	d7 03       	nop
8000c37c:	d7 03       	nop
8000c37e:	d7 03       	nop
8000c380:	d7 03       	nop
8000c382:	d7 03       	nop
8000c384:	d7 03       	nop
8000c386:	d7 03       	nop
8000c388:	d7 03       	nop
8000c38a:	d7 03       	nop
8000c38c:	d7 03       	nop
8000c38e:	d7 03       	nop
8000c390:	d7 03       	nop
8000c392:	d7 03       	nop
8000c394:	d7 03       	nop
8000c396:	d7 03       	nop
8000c398:	d7 03       	nop
8000c39a:	d7 03       	nop
8000c39c:	d7 03       	nop
8000c39e:	d7 03       	nop
8000c3a0:	d7 03       	nop
8000c3a2:	d7 03       	nop
8000c3a4:	d7 03       	nop
8000c3a6:	d7 03       	nop
8000c3a8:	d7 03       	nop
8000c3aa:	d7 03       	nop
8000c3ac:	d7 03       	nop
8000c3ae:	d7 03       	nop
8000c3b0:	d7 03       	nop
8000c3b2:	d7 03       	nop
8000c3b4:	d7 03       	nop
8000c3b6:	d7 03       	nop
8000c3b8:	d7 03       	nop
8000c3ba:	d7 03       	nop
8000c3bc:	d7 03       	nop
8000c3be:	d7 03       	nop
8000c3c0:	d7 03       	nop
8000c3c2:	d7 03       	nop
8000c3c4:	d7 03       	nop
8000c3c6:	d7 03       	nop
8000c3c8:	d7 03       	nop
8000c3ca:	d7 03       	nop
8000c3cc:	d7 03       	nop
8000c3ce:	d7 03       	nop
8000c3d0:	d7 03       	nop
8000c3d2:	d7 03       	nop
8000c3d4:	d7 03       	nop
8000c3d6:	d7 03       	nop
8000c3d8:	d7 03       	nop
8000c3da:	d7 03       	nop
8000c3dc:	d7 03       	nop
8000c3de:	d7 03       	nop
8000c3e0:	d7 03       	nop
8000c3e2:	d7 03       	nop
8000c3e4:	d7 03       	nop
8000c3e6:	d7 03       	nop
8000c3e8:	d7 03       	nop
8000c3ea:	d7 03       	nop
8000c3ec:	d7 03       	nop
8000c3ee:	d7 03       	nop
8000c3f0:	d7 03       	nop
8000c3f2:	d7 03       	nop
8000c3f4:	d7 03       	nop
8000c3f6:	d7 03       	nop
8000c3f8:	d7 03       	nop
8000c3fa:	d7 03       	nop
8000c3fc:	d7 03       	nop
8000c3fe:	d7 03       	nop
