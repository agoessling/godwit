
godwit-v01.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008d08  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ae00  8000ae00  0000b200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000010d0  8000b000  8000b000  0000b400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000508  00000004  8000c0d0  0000c804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .balign       00000004  0000050c  8000c5d8  0000cd0c  2**0
                  ALLOC
  7 .bss          000003d8  00000510  8000c5d8  0000cd10  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  0000cd0c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f88  00000000  00000000  0000cd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 0000219c  00000000  00000000  0000dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00023e9d  00000000  00000000  0000fe64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000515a  00000000  00000000  00033d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f1cf  00000000  00000000  00038e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002aac  00000000  00000000  0004802c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000630a  00000000  00000000  0004aad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000a2a3  00000000  00000000  00050de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00bcb7cc  00000000  00000000  0005b085  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  00007000  00007000  00000400  2**0
                  ALLOC
 19 .debug_ranges 00001010  00000000  00000000  00c26858  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf e8 a8 	sub	pc,pc,-5976

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	eb cd 40 80 	pushm	r7,lr
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80002008:	1a 97       	mov	r7,sp
8000200a:	20 2d       	sub	sp,8
8000200c:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002010:	fe 68 00 00 	mov	r8,-131072
80002014:	70 08       	ld.w	r8,r8[0x0]
80002016:	30 09       	mov	r9,0
80002018:	ef 49 ff fc 	st.w	r7[-4],r9
8000201c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002020:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002024:	5c 58       	castu.b	r8
80002026:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000202a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000202e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002032:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80002036:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000203a:	fe 68 00 00 	mov	r8,-131072
8000203e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002042:	91 09       	st.w	r8[0x0],r9
}
80002044:	2f ed       	sub	sp,-8
80002046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000204a:	d7 03       	nop

8000204c <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
8000204c:	eb cd 40 80 	pushm	r7,lr
80002050:	1a 97       	mov	r7,sp
80002052:	20 1d       	sub	sp,4
80002054:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80002058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205c:	e0 69 e1 c0 	mov	r9,57792
80002060:	ea 19 00 e4 	orh	r9,0xe4
80002064:	12 38       	cp.w	r8,r9
80002066:	e0 88 00 1b 	brls	8000209c <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
8000206a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000206e:	e0 69 c3 80 	mov	r9,50048
80002072:	ea 19 01 c9 	orh	r9,0x1c9
80002076:	12 38       	cp.w	r8,r9
80002078:	e0 8b 00 0a 	brhi	8000208c <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000207c:	30 1c       	mov	r12,1
8000207e:	f0 1f 00 0d 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002082:	3f fb       	mov	r11,-1
80002084:	31 1c       	mov	r12,17
80002086:	f0 1f 00 0c 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000208a:	c1 08       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000208c:	30 1c       	mov	r12,1
8000208e:	f0 1f 00 09 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80002092:	3f fb       	mov	r11,-1
80002094:	31 0c       	mov	r12,16
80002096:	f0 1f 00 08 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000209a:	c0 88       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
8000209c:	30 0c       	mov	r12,0
8000209e:	f0 1f 00 05 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800020a2:	3f fb       	mov	r11,-1
800020a4:	31 1c       	mov	r12,17
800020a6:	f0 1f 00 04 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800020aa:	2f fd       	sub	sp,-4
800020ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800020b0:	80 00       	ld.sh	r0,r0[0x0]
800020b2:	20 04       	sub	r4,0
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	21 04       	sub	r4,16

800020b8 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800020b8:	eb cd 40 80 	pushm	r7,lr
800020bc:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800020be:	fe 68 00 00 	mov	r8,-131072
800020c2:	70 28       	ld.w	r8,r8[0x8]
800020c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020c8:	5c 58       	castu.b	r8
}
800020ca:	10 9c       	mov	r12,r8
800020cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800020d0 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800020d0:	eb cd 40 80 	pushm	r7,lr
800020d4:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800020d6:	f0 1f 00 05 	mcall	800020e8 <flashcdw_default_wait_until_ready+0x18>
800020da:	18 98       	mov	r8,r12
800020dc:	ec 18 00 01 	eorl	r8,0x1
800020e0:	5c 58       	castu.b	r8
800020e2:	cf a1       	brne	800020d6 <flashcdw_default_wait_until_ready+0x6>
}
800020e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 b8       	sub	r8,11

800020ec <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
800020ec:	eb cd 40 80 	pushm	r7,lr
800020f0:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800020f2:	fe 68 00 00 	mov	r8,-131072
800020f6:	70 28       	ld.w	r8,r8[0x8]
800020f8:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
800020fc:	10 9c       	mov	r12,r8
800020fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002102:	d7 03       	nop

80002104 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002104:	eb cd 40 80 	pushm	r7,lr
80002108:	1a 97       	mov	r7,sp
8000210a:	20 3d       	sub	sp,12
8000210c:	ef 4c ff f8 	st.w	r7[-8],r12
80002110:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002114:	49 b8       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002116:	70 08       	ld.w	r8,r8[0x0]
80002118:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000211a:	fe 68 00 00 	mov	r8,-131072
8000211e:	70 18       	ld.w	r8,r8[0x4]
80002120:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002128:	5c 58       	castu.b	r8
8000212a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000212e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002136:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000213a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
8000213e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002142:	58 08       	cp.w	r8,0
80002144:	c0 b5       	brlt	8000215a <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
80002146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000214a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000214e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002152:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80002156:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
8000215a:	3a 58       	mov	r8,-91
8000215c:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002160:	fe 68 00 00 	mov	r8,-131072
80002164:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002168:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
8000216a:	f0 1f 00 07 	mcall	80002184 <flashcdw_issue_command+0x80>
8000216e:	18 99       	mov	r9,r12
80002170:	48 68       	lddpc	r8,80002188 <flashcdw_issue_command+0x84>
80002172:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80002174:	48 38       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002176:	70 08       	ld.w	r8,r8[0x0]
80002178:	5d 18       	icall	r8
}
8000217a:	2f dd       	sub	sp,-12
8000217c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002180:	00 00       	add	r0,r0
80002182:	00 04       	add	r4,r0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 ec       	sub	r12,14
80002188:	00 00       	add	r0,r0
8000218a:	05 10       	ld.sh	r0,r2++

8000218c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000218c:	eb cd 40 80 	pushm	r7,lr
80002190:	1a 97       	mov	r7,sp
80002192:	20 4d       	sub	sp,16
80002194:	ef 4c ff f4 	st.w	r7[-12],r12
80002198:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000219c:	30 08       	mov	r8,0
8000219e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800021a2:	30 08       	mov	r8,0
800021a4:	ef 48 ff fc 	st.w	r7[-4],r8
800021a8:	c1 c8       	rjmp	800021e0 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800021aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021ae:	70 19       	ld.w	r9,r8[0x4]
800021b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021b4:	70 08       	ld.w	r8,r8[0x0]
800021b6:	12 9b       	mov	r11,r9
800021b8:	10 9c       	mov	r12,r8
800021ba:	f0 1f 00 10 	mcall	800021f8 <gpio_enable_module+0x6c>
800021be:	18 98       	mov	r8,r12
800021c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021c4:	f3 e8 10 08 	or	r8,r9,r8
800021c8:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
800021cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021d0:	2f 88       	sub	r8,-8
800021d2:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800021d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021da:	2f f8       	sub	r8,-1
800021dc:	ef 48 ff fc 	st.w	r7[-4],r8
800021e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800021e8:	10 39       	cp.w	r9,r8
800021ea:	ce 03       	brcs	800021aa <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
800021ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800021f0:	10 9c       	mov	r12,r8
800021f2:	2f cd       	sub	sp,-16
800021f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 fc       	sub	r12,31

800021fc <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800021fc:	eb cd 40 80 	pushm	r7,lr
80002200:	1a 97       	mov	r7,sp
80002202:	20 3d       	sub	sp,12
80002204:	ef 4c ff f8 	st.w	r7[-8],r12
80002208:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000220c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002210:	a5 98       	lsr	r8,0x5
80002212:	a9 78       	lsl	r8,0x9
80002214:	e0 28 d4 00 	sub	r8,54272
80002218:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000221c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002220:	58 78       	cp.w	r8,7
80002222:	e0 8b 01 16 	brhi	8000244e <gpio_enable_module_pin+0x252>
80002226:	fe f9 02 4e 	ld.w	r9,pc[590]
8000222a:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000222e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002232:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002236:	30 19       	mov	r9,1
80002238:	f2 08 09 48 	lsl	r8,r9,r8
8000223c:	10 99       	mov	r9,r8
8000223e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002242:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002248:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000224c:	30 19       	mov	r9,1
8000224e:	f2 08 09 48 	lsl	r8,r9,r8
80002252:	10 99       	mov	r9,r8
80002254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002258:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000225a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000225e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002262:	30 19       	mov	r9,1
80002264:	f2 08 09 48 	lsl	r8,r9,r8
80002268:	10 99       	mov	r9,r8
8000226a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000226e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002270:	cf 18       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002276:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000227a:	30 19       	mov	r9,1
8000227c:	f2 08 09 48 	lsl	r8,r9,r8
80002280:	10 99       	mov	r9,r8
80002282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002286:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000228c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002290:	30 19       	mov	r9,1
80002292:	f2 08 09 48 	lsl	r8,r9,r8
80002296:	10 99       	mov	r9,r8
80002298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000229c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000229e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022a6:	30 19       	mov	r9,1
800022a8:	f2 08 09 48 	lsl	r8,r9,r8
800022ac:	10 99       	mov	r9,r8
800022ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022b2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022b4:	cc f8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800022b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022be:	30 19       	mov	r9,1
800022c0:	f2 08 09 48 	lsl	r8,r9,r8
800022c4:	10 99       	mov	r9,r8
800022c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ca:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800022cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022d4:	30 19       	mov	r9,1
800022d6:	f2 08 09 48 	lsl	r8,r9,r8
800022da:	10 99       	mov	r9,r8
800022dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800022e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022ea:	30 19       	mov	r9,1
800022ec:	f2 08 09 48 	lsl	r8,r9,r8
800022f0:	10 99       	mov	r9,r8
800022f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022f6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022f8:	ca d8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800022fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002302:	30 19       	mov	r9,1
80002304:	f2 08 09 48 	lsl	r8,r9,r8
80002308:	10 99       	mov	r9,r8
8000230a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000230e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002314:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002318:	30 19       	mov	r9,1
8000231a:	f2 08 09 48 	lsl	r8,r9,r8
8000231e:	10 99       	mov	r9,r8
80002320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002324:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000232a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000232e:	30 19       	mov	r9,1
80002330:	f2 08 09 48 	lsl	r8,r9,r8
80002334:	10 99       	mov	r9,r8
80002336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000233a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000233c:	c8 b8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000233e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002342:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002346:	30 19       	mov	r9,1
80002348:	f2 08 09 48 	lsl	r8,r9,r8
8000234c:	10 99       	mov	r9,r8
8000234e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002352:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002358:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000235c:	30 19       	mov	r9,1
8000235e:	f2 08 09 48 	lsl	r8,r9,r8
80002362:	10 99       	mov	r9,r8
80002364:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002368:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000236a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002372:	30 19       	mov	r9,1
80002374:	f2 08 09 48 	lsl	r8,r9,r8
80002378:	10 99       	mov	r9,r8
8000237a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000237e:	91 d9       	st.w	r8[0x34],r9
		break;
80002380:	c6 98       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002386:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000238a:	30 19       	mov	r9,1
8000238c:	f2 08 09 48 	lsl	r8,r9,r8
80002390:	10 99       	mov	r9,r8
80002392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002396:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023a0:	30 19       	mov	r9,1
800023a2:	f2 08 09 48 	lsl	r8,r9,r8
800023a6:	10 99       	mov	r9,r8
800023a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023ac:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023b6:	30 19       	mov	r9,1
800023b8:	f2 08 09 48 	lsl	r8,r9,r8
800023bc:	10 99       	mov	r9,r8
800023be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023c2:	91 d9       	st.w	r8[0x34],r9
		break;
800023c4:	c4 78       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800023c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023ce:	30 19       	mov	r9,1
800023d0:	f2 08 09 48 	lsl	r8,r9,r8
800023d4:	10 99       	mov	r9,r8
800023d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023da:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800023dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023e4:	30 19       	mov	r9,1
800023e6:	f2 08 09 48 	lsl	r8,r9,r8
800023ea:	10 99       	mov	r9,r8
800023ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023f0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023fa:	30 19       	mov	r9,1
800023fc:	f2 08 09 48 	lsl	r8,r9,r8
80002400:	10 99       	mov	r9,r8
80002402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002406:	91 d9       	st.w	r8[0x34],r9
		break;
80002408:	c2 58       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000240a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000240e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002412:	30 19       	mov	r9,1
80002414:	f2 08 09 48 	lsl	r8,r9,r8
80002418:	10 99       	mov	r9,r8
8000241a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002424:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002428:	30 19       	mov	r9,1
8000242a:	f2 08 09 48 	lsl	r8,r9,r8
8000242e:	10 99       	mov	r9,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000243a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000243e:	30 19       	mov	r9,1
80002440:	f2 08 09 48 	lsl	r8,r9,r8
80002444:	10 99       	mov	r9,r8
80002446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244a:	91 d9       	st.w	r8[0x34],r9
		break;
8000244c:	c0 38       	rjmp	80002452 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000244e:	30 18       	mov	r8,1
80002450:	c0 d8       	rjmp	8000246a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002456:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000245a:	30 19       	mov	r9,1
8000245c:	f2 08 09 48 	lsl	r8,r9,r8
80002460:	10 99       	mov	r9,r8
80002462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002466:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80002468:	30 08       	mov	r8,0
}
8000246a:	10 9c       	mov	r12,r8
8000246c:	2f dd       	sub	sp,-12
8000246e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002472:	00 00       	add	r0,r0
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	b0 00       	st.h	r8[0x0],r0

80002478 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002478:	eb cd 40 80 	pushm	r7,lr
8000247c:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
8000247e:	c0 08       	rjmp	8000247e <_unhandled_interrupt+0x6>

80002480 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80002480:	eb cd 40 80 	pushm	r7,lr
80002484:	1a 97       	mov	r7,sp
80002486:	20 3d       	sub	sp,12
80002488:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000248c:	fe 78 10 00 	mov	r8,-61440
80002490:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002494:	f2 09 11 03 	rsub	r9,r9,3
80002498:	28 09       	sub	r9,-128
8000249a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000249e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800024a2:	fe 78 10 00 	mov	r8,-61440
800024a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024aa:	2c 09       	sub	r9,-64
800024ac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800024b0:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800024b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024b8:	58 08       	cp.w	r8,0
800024ba:	c1 30       	breq	800024e0 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
800024bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024c0:	48 b8       	lddpc	r8,800024ec <_get_interrupt_handler+0x6c>
800024c2:	a1 79       	lsl	r9,0x1
800024c4:	2f f9       	sub	r9,-1
800024c6:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800024ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024ce:	f0 08 12 00 	clz	r8,r8
800024d2:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800024d6:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800024d8:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800024dc:	70 08       	ld.w	r8,r8[0x0]
800024de:	c0 28       	rjmp	800024e2 <_get_interrupt_handler+0x62>
800024e0:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800024e2:	10 9c       	mov	r12,r8
800024e4:	2f dd       	sub	sp,-12
800024e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800024ea:	00 00       	add	r0,r0
800024ec:	80 00       	ld.sh	r0,r0[0x0]
800024ee:	b0 20       	st.h	r8[0x4],r0

800024f0 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
800024f0:	eb cd 40 80 	pushm	r7,lr
800024f4:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800024f6:	48 38       	lddpc	r8,80002500 <INTC_init_evba+0x10>
800024f8:	e3 b8 00 01 	mtsr	0x4,r8
}
800024fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002500:	80 00       	ld.sh	r0,r0[0x0]
80002502:	ae 00       	st.h	r7[0x0],r0

80002504 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002504:	eb cd 40 80 	pushm	r7,lr
80002508:	1a 97       	mov	r7,sp
8000250a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000250c:	f0 1f 00 20 	mcall	8000258c <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002510:	30 08       	mov	r8,0
80002512:	ef 48 ff f8 	st.w	r7[-8],r8
80002516:	c3 18       	rjmp	80002578 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002518:	30 08       	mov	r8,0
8000251a:	ef 48 ff fc 	st.w	r7[-4],r8
8000251e:	c1 48       	rjmp	80002546 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002520:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002524:	49 b8       	lddpc	r8,80002590 <INTC_init_interrupts+0x8c>
80002526:	a1 79       	lsl	r9,0x1
80002528:	2f f9       	sub	r9,-1
8000252a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000252e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002532:	a3 68       	lsl	r8,0x2
80002534:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002538:	49 79       	lddpc	r9,80002594 <INTC_init_interrupts+0x90>
8000253a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000253c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002540:	2f f8       	sub	r8,-1
80002542:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80002546:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000254a:	49 28       	lddpc	r8,80002590 <INTC_init_interrupts+0x8c>
8000254c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002550:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002554:	10 39       	cp.w	r9,r8
80002556:	fe 9b ff e5 	brhi	80002520 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000255a:	fe 78 10 00 	mov	r8,-61440
8000255e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002562:	48 eb       	lddpc	r11,80002598 <INTC_init_interrupts+0x94>
80002564:	48 ea       	lddpc	r10,8000259c <INTC_init_interrupts+0x98>
80002566:	f6 0a 01 0a 	sub	r10,r11,r10
8000256a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000256e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002572:	2f f8       	sub	r8,-1
80002574:	ef 48 ff f8 	st.w	r7[-8],r8
80002578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000257c:	e0 48 00 21 	cp.w	r8,33
80002580:	fe 98 ff cc 	brls	80002518 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80002584:	2f ed       	sub	sp,-8
80002586:	e3 cd 80 80 	ldm	sp++,r7,pc
8000258a:	00 00       	add	r0,r0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	24 f0       	sub	r0,79
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	b0 20       	st.h	r8[0x4],r0
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	24 78       	sub	r8,71
80002598:	80 00       	ld.sh	r0,r0[0x0]
8000259a:	af 04       	ld.d	r4,r7
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	ae 00       	st.h	r7[0x0],r0

800025a0 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800025a0:	eb cd 40 80 	pushm	r7,lr
800025a4:	1a 97       	mov	r7,sp
800025a6:	20 4d       	sub	sp,16
800025a8:	ef 4c ff f8 	st.w	r7[-8],r12
800025ac:	ef 4b ff f4 	st.w	r7[-12],r11
800025b0:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800025b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025b8:	a5 98       	lsr	r8,0x5
800025ba:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800025be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025c2:	4a 78       	lddpc	r8,8000265c <INTC_register_interrupt+0xbc>
800025c4:	a1 79       	lsl	r9,0x1
800025c6:	2f f9       	sub	r9,-1
800025c8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800025cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800025d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800025d4:	a3 68       	lsl	r8,0x2
800025d6:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800025da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025de:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800025e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025e4:	58 08       	cp.w	r8,0
800025e6:	c0 c1       	brne	800025fe <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025e8:	fe 78 10 00 	mov	r8,-61440
800025ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800025f0:	49 cb       	lddpc	r11,80002660 <INTC_register_interrupt+0xc0>
800025f2:	49 da       	lddpc	r10,80002664 <INTC_register_interrupt+0xc4>
800025f4:	f6 0a 01 0a 	sub	r10,r11,r10
800025f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800025fc:	c2 d8       	rjmp	80002656 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
800025fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002602:	58 18       	cp.w	r8,1
80002604:	c0 d1       	brne	8000261e <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002606:	fe 78 10 00 	mov	r8,-61440
8000260a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000260e:	49 7b       	lddpc	r11,80002668 <INTC_register_interrupt+0xc8>
80002610:	49 5a       	lddpc	r10,80002664 <INTC_register_interrupt+0xc4>
80002612:	f6 0a 01 0a 	sub	r10,r11,r10
80002616:	bf aa       	sbr	r10,0x1e
80002618:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000261c:	c1 d8       	rjmp	80002656 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000261e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002622:	58 28       	cp.w	r8,2
80002624:	c0 d1       	brne	8000263e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002626:	fe 78 10 00 	mov	r8,-61440
8000262a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000262e:	49 0b       	lddpc	r11,8000266c <INTC_register_interrupt+0xcc>
80002630:	48 da       	lddpc	r10,80002664 <INTC_register_interrupt+0xc4>
80002632:	f6 0a 01 0a 	sub	r10,r11,r10
80002636:	bf ba       	sbr	r10,0x1f
80002638:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000263c:	c0 d8       	rjmp	80002656 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000263e:	fe 78 10 00 	mov	r8,-61440
80002642:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002646:	48 bb       	lddpc	r11,80002670 <INTC_register_interrupt+0xd0>
80002648:	48 7a       	lddpc	r10,80002664 <INTC_register_interrupt+0xc4>
8000264a:	f6 0a 01 0a 	sub	r10,r11,r10
8000264e:	ea 1a c0 00 	orh	r10,0xc000
80002652:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80002656:	2f cd       	sub	sp,-16
80002658:	e3 cd 80 80 	ldm	sp++,r7,pc
8000265c:	80 00       	ld.sh	r0,r0[0x0]
8000265e:	b0 20       	st.h	r8[0x4],r0
80002660:	80 00       	ld.sh	r0,r0[0x0]
80002662:	af 04       	ld.d	r4,r7
80002664:	80 00       	ld.sh	r0,r0[0x0]
80002666:	ae 00       	st.h	r7[0x0],r0
80002668:	80 00       	ld.sh	r0,r0[0x0]
8000266a:	af 12       	ld.d	r2,--r7
8000266c:	80 00       	ld.sh	r0,r0[0x0]
8000266e:	af 20       	st.d	r7++,r0
80002670:	80 00       	ld.sh	r0,r0[0x0]
80002672:	af 2e       	st.d	r7++,lr

80002674 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80002674:	eb cd 40 80 	pushm	r7,lr
80002678:	1a 97       	mov	r7,sp
8000267a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000267c:	e1 b8 00 00 	mfsr	r8,0x0
80002680:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80002684:	d3 03       	ssrf	0x10

	return flags;
80002686:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000268a:	10 9c       	mov	r12,r8
8000268c:	2f fd       	sub	sp,-4
8000268e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002692 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002692:	eb cd 40 80 	pushm	r7,lr
80002696:	1a 97       	mov	r7,sp
80002698:	20 1d       	sub	sp,4
8000269a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000269e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026a2:	e6 18 00 01 	andh	r8,0x1,COH
800026a6:	5f 08       	sreq	r8
800026a8:	5c 58       	castu.b	r8
}
800026aa:	10 9c       	mov	r12,r8
800026ac:	2f fd       	sub	sp,-4
800026ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800026b2:	d7 03       	nop

800026b4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
800026b4:	eb cd 40 80 	pushm	r7,lr
800026b8:	1a 97       	mov	r7,sp
800026ba:	20 1d       	sub	sp,4
800026bc:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800026c0:	ee fc ff fc 	ld.w	r12,r7[-4]
800026c4:	f0 1f 00 05 	mcall	800026d8 <cpu_irq_restore+0x24>
800026c8:	18 98       	mov	r8,r12
800026ca:	58 08       	cp.w	r8,0
800026cc:	c0 20       	breq	800026d0 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800026ce:	d5 03       	csrf	0x10
   }

	barrier();
}
800026d0:	2f fd       	sub	sp,-4
800026d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800026d6:	00 00       	add	r0,r0
800026d8:	80 00       	ld.sh	r0,r0[0x0]
800026da:	26 92       	sub	r2,105

800026dc <pdca_get_handler>:

#include "compiler.h"
#include "pdca.h"

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
800026dc:	eb cd 40 80 	pushm	r7,lr
800026e0:	1a 97       	mov	r7,sp
800026e2:	20 2d       	sub	sp,8
800026e4:	18 98       	mov	r8,r12
800026e6:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800026ea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800026ee:	a7 68       	lsl	r8,0x6
800026f0:	e0 38 00 00 	sub	r8,65536
800026f4:	ef 48 ff fc 	st.w	r7[-4],r8

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800026f8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800026fc:	30 f8       	mov	r8,15
800026fe:	f0 09 18 00 	cp.b	r9,r8
80002702:	e0 88 00 04 	brls	8000270a <pdca_get_handler+0x2e>
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80002706:	3f f8       	mov	r8,-1
80002708:	c0 38       	rjmp	8000270e <pdca_get_handler+0x32>
	}

	return pdca_channel;
8000270a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000270e:	10 9c       	mov	r12,r8
80002710:	2f ed       	sub	sp,-8
80002712:	e3 cd 80 80 	ldm	sp++,r7,pc
80002716:	d7 03       	nop

80002718 <pdca_init_channel>:

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80002718:	eb cd 40 80 	pushm	r7,lr
8000271c:	1a 97       	mov	r7,sp
8000271e:	20 4d       	sub	sp,16
80002720:	18 98       	mov	r8,r12
80002722:	ef 4b ff f0 	st.w	r7[-16],r11
80002726:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000272a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000272e:	10 9c       	mov	r12,r8
80002730:	f0 1f 00 29 	mcall	800027d4 <pdca_init_channel+0xbc>
80002734:	18 98       	mov	r8,r12
			pdca_ch_number);
80002736:	ef 48 ff f8 	st.w	r7[-8],r8

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
8000273a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000273e:	10 9c       	mov	r12,r8
80002740:	f0 1f 00 26 	mcall	800027d8 <pdca_init_channel+0xc0>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
80002744:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002748:	10 9c       	mov	r12,r8
8000274a:	f0 1f 00 25 	mcall	800027dc <pdca_init_channel+0xc4>
	
	irqflags_t flags = cpu_irq_save();
8000274e:	f0 1f 00 25 	mcall	800027e0 <pdca_init_channel+0xc8>
80002752:	18 98       	mov	r8,r12
80002754:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)opt->addr;
80002758:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000275c:	70 08       	ld.w	r8,r8[0x0]
8000275e:	10 99       	mov	r9,r8
80002760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002764:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = opt->size;
80002766:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000276a:	70 19       	ld.w	r9,r8[0x4]
8000276c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002770:	91 29       	st.w	r8[0x8],r9
	pdca_channel->psr = opt->pid;
80002772:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002776:	70 49       	ld.w	r9,r8[0x10]
80002778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000277c:	91 19       	st.w	r8[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
8000277e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002782:	70 28       	ld.w	r8,r8[0x8]
80002784:	10 99       	mov	r9,r8
80002786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000278a:	91 39       	st.w	r8[0xc],r9
	pdca_channel->tcrr = opt->r_size;
8000278c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002790:	70 39       	ld.w	r9,r8[0xc]
80002792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002796:	91 49       	st.w	r8[0x10],r9
	pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80002798:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000279c:	f1 38 00 18 	ld.ub	r8,r8[24]
800027a0:	a3 68       	lsl	r8,0x2
800027a2:	10 99       	mov	r9,r8
800027a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027a8:	70 58       	ld.w	r8,r8[0x14]
800027aa:	10 49       	or	r9,r8
	pdca_channel->mar = (uint32_t)opt->addr;
	pdca_channel->tcr = opt->size;
	pdca_channel->psr = opt->pid;
	pdca_channel->marr = (uint32_t)opt->r_addr;
	pdca_channel->tcrr = opt->r_size;
	pdca_channel->mr =
800027ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b0:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800027b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b6:	e0 69 01 00 	mov	r9,256
800027ba:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
800027bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027c0:	70 b8       	ld.w	r8,r8[0x2c]
	
	cpu_irq_restore(flags);
800027c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800027c6:	f0 1f 00 08 	mcall	800027e4 <pdca_init_channel+0xcc>

	return PDCA_SUCCESS;
800027ca:	30 08       	mov	r8,0
}
800027cc:	10 9c       	mov	r12,r8
800027ce:	2f cd       	sub	sp,-16
800027d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800027d4:	80 00       	ld.sh	r0,r0[0x0]
800027d6:	26 dc       	sub	r12,109
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	28 88       	sub	r8,-120
800027dc:	80 00       	ld.sh	r0,r0[0x0]
800027de:	28 d8       	sub	r8,-115
800027e0:	80 00       	ld.sh	r0,r0[0x0]
800027e2:	26 74       	sub	r4,103
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	26 b4       	sub	r4,107

800027e8 <pdca_enable>:
	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
}

void pdca_enable(uint8_t pdca_ch_number)
{
800027e8:	eb cd 40 80 	pushm	r7,lr
800027ec:	1a 97       	mov	r7,sp
800027ee:	20 2d       	sub	sp,8
800027f0:	18 98       	mov	r8,r12
800027f2:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800027f6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800027fa:	10 9c       	mov	r12,r8
800027fc:	f0 1f 00 06 	mcall	80002814 <pdca_enable+0x2c>
80002800:	18 98       	mov	r8,r12
			pdca_ch_number);
80002802:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80002806:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000280a:	30 19       	mov	r9,1
8000280c:	91 59       	st.w	r8[0x14],r9
}
8000280e:	2f ed       	sub	sp,-8
80002810:	e3 cd 80 80 	ldm	sp++,r7,pc
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	26 dc       	sub	r12,109

80002818 <pdca_load_channel>:
	return pdca_channel->tcr;
}

void pdca_load_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
80002818:	eb cd 40 80 	pushm	r7,lr
8000281c:	1a 97       	mov	r7,sp
8000281e:	20 5d       	sub	sp,20
80002820:	18 98       	mov	r8,r12
80002822:	ef 4b ff f0 	st.w	r7[-16],r11
80002826:	ef 4a ff ec 	st.w	r7[-20],r10
8000282a:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000282e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002832:	10 9c       	mov	r12,r8
80002834:	f0 1f 00 12 	mcall	8000287c <pdca_load_channel+0x64>
80002838:	18 98       	mov	r8,r12
			pdca_ch_number);
8000283a:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
8000283e:	f0 1f 00 11 	mcall	80002880 <pdca_load_channel+0x68>
80002842:	18 98       	mov	r8,r12
80002844:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)addr;
80002848:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000284c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002850:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = size;
80002852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002856:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000285a:	91 29       	st.w	r8[0x8],r9
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
8000285c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002860:	e0 69 01 00 	mov	r9,256
80002864:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
80002866:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000286a:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
8000286c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002870:	f0 1f 00 05 	mcall	80002884 <pdca_load_channel+0x6c>
}
80002874:	2f bd       	sub	sp,-20
80002876:	e3 cd 80 80 	ldm	sp++,r7,pc
8000287a:	00 00       	add	r0,r0
8000287c:	80 00       	ld.sh	r0,r0[0x0]
8000287e:	26 dc       	sub	r12,109
80002880:	80 00       	ld.sh	r0,r0[0x0]
80002882:	26 74       	sub	r4,103
80002884:	80 00       	ld.sh	r0,r0[0x0]
80002886:	26 b4       	sub	r4,107

80002888 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002888:	eb cd 40 80 	pushm	r7,lr
8000288c:	1a 97       	mov	r7,sp
8000288e:	20 3d       	sub	sp,12
80002890:	18 98       	mov	r8,r12
80002892:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002896:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000289a:	10 9c       	mov	r12,r8
8000289c:	f0 1f 00 0c 	mcall	800028cc <pdca_disable_interrupt_transfer_complete+0x44>
800028a0:	18 98       	mov	r8,r12
			pdca_ch_number);
800028a2:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800028a6:	f0 1f 00 0b 	mcall	800028d0 <pdca_disable_interrupt_transfer_complete+0x48>
800028aa:	18 98       	mov	r8,r12
800028ac:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800028b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b4:	30 29       	mov	r9,2
800028b6:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
800028b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028bc:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
800028be:	ee fc ff fc 	ld.w	r12,r7[-4]
800028c2:	f0 1f 00 05 	mcall	800028d4 <pdca_disable_interrupt_transfer_complete+0x4c>
}
800028c6:	2f dd       	sub	sp,-12
800028c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800028cc:	80 00       	ld.sh	r0,r0[0x0]
800028ce:	26 dc       	sub	r12,109
800028d0:	80 00       	ld.sh	r0,r0[0x0]
800028d2:	26 74       	sub	r4,103
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	26 b4       	sub	r4,107

800028d8 <pdca_disable_interrupt_reload_counter_zero>:

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
}

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
800028d8:	eb cd 40 80 	pushm	r7,lr
800028dc:	1a 97       	mov	r7,sp
800028de:	20 3d       	sub	sp,12
800028e0:	18 98       	mov	r8,r12
800028e2:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800028e6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800028ea:	10 9c       	mov	r12,r8
800028ec:	f0 1f 00 0c 	mcall	8000291c <pdca_disable_interrupt_reload_counter_zero+0x44>
800028f0:	18 98       	mov	r8,r12
			pdca_ch_number);
800028f2:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800028f6:	f0 1f 00 0b 	mcall	80002920 <pdca_disable_interrupt_reload_counter_zero+0x48>
800028fa:	18 98       	mov	r8,r12
800028fc:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80002900:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002904:	30 19       	mov	r9,1
80002906:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
80002908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000290c:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
8000290e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002912:	f0 1f 00 05 	mcall	80002924 <pdca_disable_interrupt_reload_counter_zero+0x4c>
}
80002916:	2f dd       	sub	sp,-12
80002918:	e3 cd 80 80 	ldm	sp++,r7,pc
8000291c:	80 00       	ld.sh	r0,r0[0x0]
8000291e:	26 dc       	sub	r12,109
80002920:	80 00       	ld.sh	r0,r0[0x0]
80002922:	26 74       	sub	r4,103
80002924:	80 00       	ld.sh	r0,r0[0x0]
80002926:	26 b4       	sub	r4,107

80002928 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002928:	eb cd 40 80 	pushm	r7,lr
8000292c:	1a 97       	mov	r7,sp
8000292e:	20 1d       	sub	sp,4
80002930:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80002934:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002938:	e6 18 00 01 	andh	r8,0x1,COH
8000293c:	5f 08       	sreq	r8
8000293e:	5c 58       	castu.b	r8
}
80002940:	10 9c       	mov	r12,r8
80002942:	2f fd       	sub	sp,-4
80002944:	e3 cd 80 80 	ldm	sp++,r7,pc

80002948 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
80002948:	eb cd 40 80 	pushm	r7,lr
8000294c:	1a 97       	mov	r7,sp
8000294e:	20 2d       	sub	sp,8
80002950:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
80002954:	e1 b8 00 00 	mfsr	r8,0x0
80002958:	10 9c       	mov	r12,r8
8000295a:	f0 1f 00 0f 	mcall	80002994 <pm_set_mclk_source+0x4c>
8000295e:	18 98       	mov	r8,r12
80002960:	ef 68 ff ff 	st.b	r7[-1],r8
80002964:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
80002966:	fe 78 14 00 	mov	r8,-60416
8000296a:	fc 19 aa 00 	movh	r9,0xaa00
8000296e:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80002972:	fe 78 14 00 	mov	r8,-60416
80002976:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000297a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000297c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002980:	30 08       	mov	r8,0
80002982:	f0 09 18 00 	cp.b	r9,r8
80002986:	c0 20       	breq	8000298a <pm_set_mclk_source+0x42>
80002988:	d5 03       	csrf	0x10

  return PASS;
8000298a:	30 08       	mov	r8,0
}
8000298c:	10 9c       	mov	r12,r8
8000298e:	2f ed       	sub	sp,-8
80002990:	e3 cd 80 80 	ldm	sp++,r7,pc
80002994:	80 00       	ld.sh	r0,r0[0x0]
80002996:	29 28       	sub	r8,-110

80002998 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
80002998:	eb cd 40 80 	pushm	r7,lr
8000299c:	1a 97       	mov	r7,sp
8000299e:	20 4d       	sub	sp,16
800029a0:	ef 4c ff f4 	st.w	r7[-12],r12
800029a4:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
800029a8:	fe 78 14 00 	mov	r8,-60416
800029ac:	70 18       	ld.w	r8,r8[0x4]
800029ae:	30 09       	mov	r9,0
800029b0:	ef 49 ff f8 	st.w	r7[-8],r9
800029b4:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
800029b8:	fe 78 14 00 	mov	r8,-60416
800029bc:	f0 f8 00 d4 	ld.w	r8,r8[212]
800029c0:	e2 18 00 20 	andl	r8,0x20,COH
800029c4:	cf a0       	breq	800029b8 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
800029c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029ca:	30 19       	mov	r9,1
800029cc:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800029d0:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
800029d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029d8:	5c 58       	castu.b	r8
800029da:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800029de:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029e6:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800029ea:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
800029ee:	e1 b8 00 00 	mfsr	r8,0x0
800029f2:	10 9c       	mov	r12,r8
800029f4:	f0 1f 00 12 	mcall	80002a3c <pm_set_clk_domain_div+0xa4>
800029f8:	18 98       	mov	r8,r12
800029fa:	ef 68 ff ff 	st.b	r7[-1],r8
800029fe:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002a00:	fe 78 14 00 	mov	r8,-60416
80002a04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002a08:	2f f9       	sub	r9,-1
80002a0a:	a3 69       	lsl	r9,0x2
80002a0c:	ea 19 aa 00 	orh	r9,0xaa00
80002a10:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002a14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a18:	a3 68       	lsl	r8,0x2
80002a1a:	e0 28 eb fc 	sub	r8,60412
80002a1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a22:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002a24:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a28:	30 08       	mov	r8,0
80002a2a:	f0 09 18 00 	cp.b	r9,r8
80002a2e:	c0 20       	breq	80002a32 <pm_set_clk_domain_div+0x9a>
80002a30:	d5 03       	csrf	0x10

  return PASS;
80002a32:	30 08       	mov	r8,0
}
80002a34:	10 9c       	mov	r12,r8
80002a36:	2f cd       	sub	sp,-16
80002a38:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a3c:	80 00       	ld.sh	r0,r0[0x0]
80002a3e:	29 28       	sub	r8,-110

80002a40 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80002a40:	eb cd 40 80 	pushm	r7,lr
80002a44:	1a 97       	mov	r7,sp
80002a46:	20 3d       	sub	sp,12
80002a48:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002a4c:	fe 78 14 00 	mov	r8,-60416
80002a50:	70 18       	ld.w	r8,r8[0x4]
80002a52:	30 09       	mov	r9,0
80002a54:	ef 49 ff f8 	st.w	r7[-8],r9
80002a58:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002a5c:	fe 78 14 00 	mov	r8,-60416
80002a60:	f0 f8 00 d4 	ld.w	r8,r8[212]
80002a64:	e2 18 00 20 	andl	r8,0x20,COH
80002a68:	cf a0       	breq	80002a5c <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80002a6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a6e:	30 09       	mov	r9,0
80002a70:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002a74:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002a78:	e1 b8 00 00 	mfsr	r8,0x0
80002a7c:	10 9c       	mov	r12,r8
80002a7e:	f0 1f 00 13 	mcall	80002ac8 <pm_disable_clk_domain_div+0x88>
80002a82:	18 98       	mov	r8,r12
80002a84:	ef 68 ff ff 	st.b	r7[-1],r8
80002a88:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002a8a:	fe 78 14 00 	mov	r8,-60416
80002a8e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002a92:	2f f9       	sub	r9,-1
80002a94:	a3 69       	lsl	r9,0x2
80002a96:	ea 19 aa 00 	orh	r9,0xaa00
80002a9a:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002a9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002aa2:	a3 68       	lsl	r8,0x2
80002aa4:	e0 28 eb fc 	sub	r8,60412
80002aa8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002aac:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002aae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002ab2:	30 08       	mov	r8,0
80002ab4:	f0 09 18 00 	cp.b	r9,r8
80002ab8:	c0 20       	breq	80002abc <pm_disable_clk_domain_div+0x7c>
80002aba:	d5 03       	csrf	0x10

  return PASS;
80002abc:	30 08       	mov	r8,0
}
80002abe:	10 9c       	mov	r12,r8
80002ac0:	2f dd       	sub	sp,-12
80002ac2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ac6:	00 00       	add	r0,r0
80002ac8:	80 00       	ld.sh	r0,r0[0x0]
80002aca:	29 28       	sub	r8,-110

80002acc <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
80002acc:	eb cd 40 80 	pushm	r7,lr
80002ad0:	1a 97       	mov	r7,sp
80002ad2:	20 5d       	sub	sp,20
80002ad4:	ef 4c ff f8 	st.w	r7[-8],r12
80002ad8:	ef 4b ff f4 	st.w	r7[-12],r11
80002adc:	ef 4a ff f0 	st.w	r7[-16],r10
80002ae0:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
80002ae4:	ee fb ff f4 	ld.w	r11,r7[-12]
80002ae8:	ee fc ff f8 	ld.w	r12,r7[-8]
80002aec:	f0 1f 00 21 	mcall	80002b70 <pm_set_all_cksel+0xa4>
80002af0:	18 98       	mov	r8,r12
80002af2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002af6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002afa:	58 88       	cp.w	r8,8
80002afc:	c0 51       	brne	80002b06 <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
80002afe:	30 0c       	mov	r12,0
80002b00:	f0 1f 00 1d 	mcall	80002b74 <pm_set_all_cksel+0xa8>
80002b04:	c0 68       	rjmp	80002b10 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
80002b06:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b0a:	30 0c       	mov	r12,0
80002b0c:	f0 1f 00 1b 	mcall	80002b78 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
80002b10:	ee fb ff f0 	ld.w	r11,r7[-16]
80002b14:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b18:	f0 1f 00 16 	mcall	80002b70 <pm_set_all_cksel+0xa4>
80002b1c:	18 98       	mov	r8,r12
80002b1e:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b26:	58 88       	cp.w	r8,8
80002b28:	c0 51       	brne	80002b32 <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
80002b2a:	30 2c       	mov	r12,2
80002b2c:	f0 1f 00 12 	mcall	80002b74 <pm_set_all_cksel+0xa8>
80002b30:	c0 68       	rjmp	80002b3c <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
80002b32:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b36:	30 2c       	mov	r12,2
80002b38:	f0 1f 00 10 	mcall	80002b78 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
80002b3c:	ee fb ff ec 	ld.w	r11,r7[-20]
80002b40:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b44:	f0 1f 00 0b 	mcall	80002b70 <pm_set_all_cksel+0xa4>
80002b48:	18 98       	mov	r8,r12
80002b4a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b52:	58 88       	cp.w	r8,8
80002b54:	c0 51       	brne	80002b5e <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80002b56:	30 3c       	mov	r12,3
80002b58:	f0 1f 00 07 	mcall	80002b74 <pm_set_all_cksel+0xa8>
80002b5c:	c0 68       	rjmp	80002b68 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80002b5e:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b62:	30 3c       	mov	r12,3
80002b64:	f0 1f 00 05 	mcall	80002b78 <pm_set_all_cksel+0xac>
}
80002b68:	2f bd       	sub	sp,-20
80002b6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b6e:	00 00       	add	r0,r0
80002b70:	80 00       	ld.sh	r0,r0[0x0]
80002b72:	2b 7c       	sub	r12,-73
80002b74:	80 00       	ld.sh	r0,r0[0x0]
80002b76:	2a 40       	sub	r0,-92
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	29 98       	sub	r8,-103

80002b7c <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80002b7c:	eb cd 40 80 	pushm	r7,lr
80002b80:	1a 97       	mov	r7,sp
80002b82:	20 3d       	sub	sp,12
80002b84:	ef 4c ff f8 	st.w	r7[-8],r12
80002b88:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80002b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b90:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b94:	f0 09 0d 08 	divu	r8,r8,r9
80002b98:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80002b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba0:	58 18       	cp.w	r8,1
80002ba2:	c0 31       	brne	80002ba8 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80002ba4:	30 88       	mov	r8,8
80002ba6:	c0 78       	rjmp	80002bb4 <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80002ba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bac:	5c 98       	brev	r8
80002bae:	f0 08 12 00 	clz	r8,r8
80002bb2:	20 18       	sub	r8,1
  }
}
80002bb4:	10 9c       	mov	r12,r8
80002bb6:	2f dd       	sub	sp,-12
80002bb8:	e3 cd 80 80 	ldm	sp++,r7,pc

80002bbc <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80002bbc:	eb cd 40 80 	pushm	r7,lr
80002bc0:	1a 97       	mov	r7,sp
80002bc2:	20 1d       	sub	sp,4
80002bc4:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80002bc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002bcc:	f0 1f 00 04 	mcall	80002bdc <pcl_configure_clocks+0x20>
80002bd0:	18 98       	mov	r8,r12
  #endif
#endif
}
80002bd2:	10 9c       	mov	r12,r8
80002bd4:	2f fd       	sub	sp,-4
80002bd6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bda:	00 00       	add	r0,r0
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	2c e0       	sub	r0,-50

80002be0 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80002be0:	eb cd 40 80 	pushm	r7,lr
80002be4:	1a 97       	mov	r7,sp
80002be6:	20 1d       	sub	sp,4
80002be8:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80002bec:	ee fa ff fc 	ld.w	r10,r7[-4]
80002bf0:	e0 7b c2 00 	mov	r11,115200
80002bf4:	30 0c       	mov	r12,0
80002bf6:	f0 1f 00 04 	mcall	80002c04 <pcl_configure_clocks_rcsys+0x24>
80002bfa:	18 98       	mov	r8,r12
}
80002bfc:	10 9c       	mov	r12,r8
80002bfe:	2f fd       	sub	sp,-4
80002c00:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c04:	80 00       	ld.sh	r0,r0[0x0]
80002c06:	2d 50       	sub	r0,-43

80002c08 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80002c08:	eb cd 40 80 	pushm	r7,lr
80002c0c:	1a 97       	mov	r7,sp
80002c0e:	20 1d       	sub	sp,4
80002c10:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80002c14:	f0 1f 00 08 	mcall	80002c34 <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80002c18:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c1c:	e0 6b 0e 00 	mov	r11,3584
80002c20:	ea 1b 07 27 	orh	r11,0x727
80002c24:	30 3c       	mov	r12,3
80002c26:	f0 1f 00 05 	mcall	80002c38 <pcl_configure_clocks_rc120m+0x30>
80002c2a:	18 98       	mov	r8,r12
}
80002c2c:	10 9c       	mov	r12,r8
80002c2e:	2f fd       	sub	sp,-4
80002c30:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c34:	80 00       	ld.sh	r0,r0[0x0]
80002c36:	33 2c       	mov	r12,50
80002c38:	80 00       	ld.sh	r0,r0[0x0]
80002c3a:	2d 50       	sub	r0,-43

80002c3c <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80002c3c:	eb cd 40 80 	pushm	r7,lr
80002c40:	1a 97       	mov	r7,sp
80002c42:	20 2d       	sub	sp,8
80002c44:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80002c48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c4c:	70 58       	ld.w	r8,r8[0x14]
80002c4e:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80002c52:	ee fb ff fc 	ld.w	r11,r7[-4]
80002c56:	30 0c       	mov	r12,0
80002c58:	f0 1f 00 0b 	mcall	80002c84 <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80002c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c60:	70 68       	ld.w	r8,r8[0x18]
80002c62:	30 1a       	mov	r10,1
80002c64:	10 9b       	mov	r11,r8
80002c66:	30 0c       	mov	r12,0
80002c68:	f0 1f 00 08 	mcall	80002c88 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80002c6c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002c70:	ee fb ff fc 	ld.w	r11,r7[-4]
80002c74:	30 1c       	mov	r12,1
80002c76:	f0 1f 00 06 	mcall	80002c8c <pcl_configure_clocks_osc0+0x50>
80002c7a:	18 98       	mov	r8,r12
}
80002c7c:	10 9c       	mov	r12,r8
80002c7e:	2f ed       	sub	sp,-8
80002c80:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	2d cc       	sub	r12,-36
80002c88:	80 00       	ld.sh	r0,r0[0x0]
80002c8a:	2e 7c       	sub	r12,-25
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	2d 50       	sub	r0,-43

80002c90 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	1a 97       	mov	r7,sp
80002c96:	20 3d       	sub	sp,12
80002c98:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80002c9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ca0:	70 78       	ld.w	r8,r8[0x1c]
80002ca2:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80002ca6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002caa:	70 88       	ld.w	r8,r8[0x20]
80002cac:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80002cb0:	ee fa ff f8 	ld.w	r10,r7[-8]
80002cb4:	30 0b       	mov	r11,0
80002cb6:	30 19       	mov	r9,1
80002cb8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002cbc:	f0 1f 00 07 	mcall	80002cd8 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80002cc0:	ee fa ff f4 	ld.w	r10,r7[-12]
80002cc4:	ee fb ff f8 	ld.w	r11,r7[-8]
80002cc8:	30 2c       	mov	r12,2
80002cca:	f0 1f 00 05 	mcall	80002cdc <pcl_configure_clocks_dfll0+0x4c>
80002cce:	18 98       	mov	r8,r12
}
80002cd0:	10 9c       	mov	r12,r8
80002cd2:	2f dd       	sub	sp,-12
80002cd4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cd8:	80 00       	ld.sh	r0,r0[0x0]
80002cda:	30 f8       	mov	r8,15
80002cdc:	80 00       	ld.sh	r0,r0[0x0]
80002cde:	2d 50       	sub	r0,-43

80002ce0 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80002ce0:	eb cd 40 80 	pushm	r7,lr
80002ce4:	1a 97       	mov	r7,sp
80002ce6:	20 1d       	sub	sp,4
80002ce8:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80002cec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cf0:	70 08       	ld.w	r8,r8[0x0]
80002cf2:	58 08       	cp.w	r8,0
80002cf4:	c0 71       	brne	80002d02 <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80002cf6:	ee fc ff fc 	ld.w	r12,r7[-4]
80002cfa:	f0 1f 00 12 	mcall	80002d40 <pcl_configure_clocks_uc3l+0x60>
80002cfe:	18 98       	mov	r8,r12
80002d00:	c1 c8       	rjmp	80002d38 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80002d02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d06:	70 08       	ld.w	r8,r8[0x0]
80002d08:	58 98       	cp.w	r8,9
80002d0a:	c0 71       	brne	80002d18 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80002d0c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d10:	f0 1f 00 0d 	mcall	80002d44 <pcl_configure_clocks_uc3l+0x64>
80002d14:	18 98       	mov	r8,r12
80002d16:	c1 18       	rjmp	80002d38 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80002d18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d1c:	70 08       	ld.w	r8,r8[0x0]
80002d1e:	58 18       	cp.w	r8,1
80002d20:	c0 71       	brne	80002d2e <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80002d22:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d26:	f0 1f 00 09 	mcall	80002d48 <pcl_configure_clocks_uc3l+0x68>
80002d2a:	18 98       	mov	r8,r12
80002d2c:	c0 68       	rjmp	80002d38 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80002d2e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d32:	f0 1f 00 07 	mcall	80002d4c <pcl_configure_clocks_uc3l+0x6c>
80002d36:	18 98       	mov	r8,r12
  }
}
80002d38:	10 9c       	mov	r12,r8
80002d3a:	2f fd       	sub	sp,-4
80002d3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	2b e0       	sub	r0,-66
80002d44:	80 00       	ld.sh	r0,r0[0x0]
80002d46:	2c 08       	sub	r8,-64
80002d48:	80 00       	ld.sh	r0,r0[0x0]
80002d4a:	2c 3c       	sub	r12,-61
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	2c 90       	sub	r0,-55

80002d50 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80002d50:	eb cd 40 80 	pushm	r7,lr
80002d54:	1a 97       	mov	r7,sp
80002d56:	20 3d       	sub	sp,12
80002d58:	ef 4c ff fc 	st.w	r7[-4],r12
80002d5c:	ef 4b ff f8 	st.w	r7[-8],r11
80002d60:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80002d64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d68:	70 39       	ld.w	r9,r8[0xc]
80002d6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d6e:	70 2a       	ld.w	r10,r8[0x8]
80002d70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d74:	70 18       	ld.w	r8,r8[0x4]
80002d76:	10 9b       	mov	r11,r8
80002d78:	ee fc ff f8 	ld.w	r12,r7[-8]
80002d7c:	f0 1f 00 09 	mcall	80002da0 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80002d80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d84:	70 18       	ld.w	r8,r8[0x4]
80002d86:	10 9c       	mov	r12,r8
80002d88:	f0 1f 00 07 	mcall	80002da4 <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80002d8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d90:	f0 1f 00 06 	mcall	80002da8 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80002d94:	30 08       	mov	r8,0
}
80002d96:	10 9c       	mov	r12,r8
80002d98:	2f dd       	sub	sp,-12
80002d9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d9e:	00 00       	add	r0,r0
80002da0:	80 00       	ld.sh	r0,r0[0x0]
80002da2:	2a cc       	sub	r12,-84
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	20 4c       	sub	r12,4
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	29 48       	sub	r8,-108

80002dac <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002dac:	eb cd 40 80 	pushm	r7,lr
80002db0:	1a 97       	mov	r7,sp
80002db2:	20 1d       	sub	sp,4
80002db4:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80002db8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002dbc:	e6 18 00 01 	andh	r8,0x1,COH
80002dc0:	5f 08       	sreq	r8
80002dc2:	5c 58       	castu.b	r8
}
80002dc4:	10 9c       	mov	r12,r8
80002dc6:	2f fd       	sub	sp,-4
80002dc8:	e3 cd 80 80 	ldm	sp++,r7,pc

80002dcc <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80002dcc:	eb cd 40 80 	pushm	r7,lr
80002dd0:	1a 97       	mov	r7,sp
80002dd2:	20 4d       	sub	sp,16
80002dd4:	ef 4c ff f4 	st.w	r7[-12],r12
80002dd8:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80002ddc:	fe 78 18 00 	mov	r8,-59392
80002de0:	70 78       	ld.w	r8,r8[0x1c]
80002de2:	30 09       	mov	r9,0
80002de4:	ef 49 ff f8 	st.w	r7[-8],r9
80002de8:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // crystal frequency. Gain G3 (for power optimization) is unused and if 
  // required will need to be set manually.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80002dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002df0:	30 19       	mov	r9,1
80002df2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002df6:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal < 12000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002dfa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002dfe:	e0 69 1a ff 	mov	r9,6911
80002e02:	ea 19 00 b7 	orh	r9,0xb7
80002e06:	12 38       	cp.w	r8,r9
80002e08:	e0 88 00 10 	brls	80002e28 <scif_configure_osc_crystalmode+0x5c>
80002e0c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002e10:	e0 69 23 ff 	mov	r9,9215
80002e14:	ea 19 00 f4 	orh	r9,0xf4
80002e18:	12 38       	cp.w	r8,r9
80002e1a:	e0 8b 00 04 	brhi	80002e22 <scif_configure_osc_crystalmode+0x56>
80002e1e:	30 18       	mov	r8,1
80002e20:	c0 28       	rjmp	80002e24 <scif_configure_osc_crystalmode+0x58>
80002e22:	30 28       	mov	r8,2
80002e24:	10 99       	mov	r9,r8
80002e26:	c0 28       	rjmp	80002e2a <scif_configure_osc_crystalmode+0x5e>
80002e28:	30 09       	mov	r9,0
80002e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e2e:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80002e32:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        AVR32_SCIF_OSCCTRL0_GAIN_G2;
  AVR32_ENTER_CRITICAL_REGION( );
80002e36:	e1 b8 00 00 	mfsr	r8,0x0
80002e3a:	10 9c       	mov	r12,r8
80002e3c:	f0 1f 00 0f 	mcall	80002e78 <scif_configure_osc_crystalmode+0xac>
80002e40:	18 98       	mov	r8,r12
80002e42:	ef 68 ff ff 	st.b	r7[-1],r8
80002e46:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80002e48:	fe 78 18 00 	mov	r8,-59392
80002e4c:	31 c9       	mov	r9,28
80002e4e:	ea 19 aa 00 	orh	r9,0xaa00
80002e52:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80002e54:	fe 78 18 00 	mov	r8,-59392
80002e58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e5c:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002e5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002e62:	30 08       	mov	r8,0
80002e64:	f0 09 18 00 	cp.b	r9,r8
80002e68:	c0 20       	breq	80002e6c <scif_configure_osc_crystalmode+0xa0>
80002e6a:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
80002e6c:	30 08       	mov	r8,0
}
80002e6e:	10 9c       	mov	r12,r8
80002e70:	2f cd       	sub	sp,-16
80002e72:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e76:	00 00       	add	r0,r0
80002e78:	80 00       	ld.sh	r0,r0[0x0]
80002e7a:	2d ac       	sub	r12,-38

80002e7c <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80002e7c:	eb cd 40 80 	pushm	r7,lr
80002e80:	1a 97       	mov	r7,sp
80002e82:	20 5d       	sub	sp,20
80002e84:	ef 4c ff f4 	st.w	r7[-12],r12
80002e88:	ef 4b ff f0 	st.w	r7[-16],r11
80002e8c:	14 98       	mov	r8,r10
80002e8e:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80002e92:	fe 78 18 00 	mov	r8,-59392
80002e96:	70 78       	ld.w	r8,r8[0x1c]
80002e98:	30 09       	mov	r9,0
80002e9a:	ef 49 ff f8 	st.w	r7[-8],r9
80002e9e:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
80002ea2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ea6:	5c 58       	castu.b	r8
80002ea8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002eac:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002eb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eb4:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80002eb8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
80002ebc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ec0:	30 19       	mov	r9,1
80002ec2:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80002ec6:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002eca:	e1 b8 00 00 	mfsr	r8,0x0
80002ece:	10 9c       	mov	r12,r8
80002ed0:	f0 1f 00 16 	mcall	80002f28 <scif_enable_osc+0xac>
80002ed4:	18 98       	mov	r8,r12
80002ed6:	ef 68 ff ff 	st.b	r7[-1],r8
80002eda:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80002edc:	fe 78 18 00 	mov	r8,-59392
80002ee0:	31 c9       	mov	r9,28
80002ee2:	ea 19 aa 00 	orh	r9,0xaa00
80002ee6:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80002ee8:	fe 78 18 00 	mov	r8,-59392
80002eec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ef0:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002ef2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002ef6:	30 08       	mov	r8,0
80002ef8:	f0 09 18 00 	cp.b	r9,r8
80002efc:	c0 20       	breq	80002f00 <scif_enable_osc+0x84>
80002efe:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80002f00:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80002f04:	30 08       	mov	r8,0
80002f06:	f0 09 18 00 	cp.b	r9,r8
80002f0a:	c0 90       	breq	80002f1c <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80002f0c:	30 2c       	mov	r12,2
80002f0e:	f0 1f 00 08 	mcall	80002f2c <scif_enable_osc+0xb0>
80002f12:	18 98       	mov	r8,r12
80002f14:	58 08       	cp.w	r8,0
80002f16:	c0 30       	breq	80002f1c <scif_enable_osc+0xa0>
      return -1;
80002f18:	3f f8       	mov	r8,-1
80002f1a:	c0 28       	rjmp	80002f1e <scif_enable_osc+0xa2>
  }

  return PASS;
80002f1c:	30 08       	mov	r8,0
}
80002f1e:	10 9c       	mov	r12,r8
80002f20:	2f bd       	sub	sp,-20
80002f22:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f26:	00 00       	add	r0,r0
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2d ac       	sub	r12,-38
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	34 3c       	mov	r12,67

80002f30 <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
80002f30:	eb cd 40 80 	pushm	r7,lr
80002f34:	1a 97       	mov	r7,sp
80002f36:	20 4d       	sub	sp,16
80002f38:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80002f3c:	fe 78 18 00 	mov	r8,-59392
80002f40:	70 98       	ld.w	r8,r8[0x24]
80002f42:	30 09       	mov	r9,0
80002f44:	ef 49 ff f8 	st.w	r7[-8],r9
80002f48:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80002f4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f50:	30 19       	mov	r9,1
80002f52:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002f56:	ef 48 ff f8 	st.w	r7[-8],r8
#if (UC3L0128 || UC3L0256 || UC3L3_L4)
  u_avr32_scif_dfll0conf.DFLL0CONF.ccen = ENABLE;
80002f5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f5e:	30 19       	mov	r9,1
80002f60:	f1 d9 d0 a1 	bfins	r8,r9,0x5,0x1
80002f64:	ef 48 ff f8 	st.w	r7[-8],r8
#endif
  AVR32_ENTER_CRITICAL_REGION( );
80002f68:	e1 b8 00 00 	mfsr	r8,0x0
80002f6c:	10 9c       	mov	r12,r8
80002f6e:	f0 1f 00 61 	mcall	800030f0 <scif_dfll0_closedloop_start+0x1c0>
80002f72:	18 98       	mov	r8,r12
80002f74:	ef 68 ff fc 	st.b	r7[-4],r8
80002f78:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
80002f7a:	fe 78 18 00 	mov	r8,-59392
80002f7e:	32 49       	mov	r9,36
80002f80:	ea 19 aa 00 	orh	r9,0xaa00
80002f84:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80002f86:	fe 78 18 00 	mov	r8,-59392
80002f8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002f8e:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002f90:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80002f94:	30 08       	mov	r8,0
80002f96:	f0 09 18 00 	cp.b	r9,r8
80002f9a:	c0 20       	breq	80002f9e <scif_dfll0_closedloop_start+0x6e>
80002f9c:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80002f9e:	e0 6c 40 00 	mov	r12,16384
80002fa2:	f0 1f 00 55 	mcall	800030f4 <scif_dfll0_closedloop_start+0x1c4>
80002fa6:	18 98       	mov	r8,r12
80002fa8:	58 08       	cp.w	r8,0
80002faa:	c0 30       	breq	80002fb0 <scif_dfll0_closedloop_start+0x80>
    return -1;
80002fac:	3f f8       	mov	r8,-1
80002fae:	c9 c8       	rjmp	800030e6 <scif_dfll0_closedloop_start+0x1b6>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80002fb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002fb4:	70 48       	ld.w	r8,r8[0x10]
80002fb6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
80002fba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002fbe:	70 38       	ld.w	r8,r8[0xc]
80002fc0:	b1 68       	lsl	r8,0x10
80002fc2:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80002fc6:	f3 e8 10 08 	or	r8,r9,r8
80002fca:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
80002fce:	e1 b8 00 00 	mfsr	r8,0x0
80002fd2:	10 9c       	mov	r12,r8
80002fd4:	f0 1f 00 47 	mcall	800030f0 <scif_dfll0_closedloop_start+0x1c0>
80002fd8:	18 98       	mov	r8,r12
80002fda:	ef 68 ff fd 	st.b	r7[-3],r8
80002fde:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
80002fe0:	fe 78 18 00 	mov	r8,-59392
80002fe4:	32 c9       	mov	r9,44
80002fe6:	ea 19 aa 00 	orh	r9,0xaa00
80002fea:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
80002fec:	fe 78 18 00 	mov	r8,-59392
80002ff0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002ff4:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002ff6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002ffa:	30 08       	mov	r8,0
80002ffc:	f0 09 18 00 	cp.b	r9,r8
80003000:	c0 20       	breq	80003004 <scif_dfll0_closedloop_start+0xd4>
80003002:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80003004:	e0 6c 40 00 	mov	r12,16384
80003008:	f0 1f 00 3b 	mcall	800030f4 <scif_dfll0_closedloop_start+0x1c4>
8000300c:	18 98       	mov	r8,r12
8000300e:	58 08       	cp.w	r8,0
80003010:	c0 30       	breq	80003016 <scif_dfll0_closedloop_start+0xe6>
    return -1;
80003012:	3f f8       	mov	r8,-1
80003014:	c6 98       	rjmp	800030e6 <scif_dfll0_closedloop_start+0x1b6>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
80003016:	e1 b8 00 00 	mfsr	r8,0x0
8000301a:	10 9c       	mov	r12,r8
8000301c:	f0 1f 00 35 	mcall	800030f0 <scif_dfll0_closedloop_start+0x1c0>
80003020:	18 98       	mov	r8,r12
80003022:	ef 68 ff fe 	st.b	r7[-2],r8
80003026:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
80003028:	fe 78 18 00 	mov	r8,-59392
8000302c:	32 89       	mov	r9,40
8000302e:	ea 19 aa 00 	orh	r9,0xaa00
80003032:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
80003034:	fe 78 18 00 	mov	r8,-59392
80003038:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000303c:	72 19       	ld.w	r9,r9[0x4]
8000303e:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
80003042:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003046:	72 29       	ld.w	r9,r9[0x8]
80003048:	b1 69       	lsl	r9,0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
8000304a:	f5 e9 10 09 	or	r9,r10,r9
8000304e:	91 a9       	st.w	r8[0x28],r9
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80003050:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003054:	30 08       	mov	r8,0
80003056:	f0 09 18 00 	cp.b	r9,r8
8000305a:	c0 20       	breq	8000305e <scif_dfll0_closedloop_start+0x12e>
8000305c:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000305e:	e0 6c 40 00 	mov	r12,16384
80003062:	f0 1f 00 25 	mcall	800030f4 <scif_dfll0_closedloop_start+0x1c4>
80003066:	18 98       	mov	r8,r12
80003068:	58 08       	cp.w	r8,0
8000306a:	c0 30       	breq	80003070 <scif_dfll0_closedloop_start+0x140>
    return -1;
8000306c:	3f f8       	mov	r8,-1
8000306e:	c3 c8       	rjmp	800030e6 <scif_dfll0_closedloop_start+0x1b6>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
80003070:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003074:	30 19       	mov	r9,1
80003076:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000307a:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
8000307e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003082:	70 08       	ld.w	r8,r8[0x0]
80003084:	5c 58       	castu.b	r8
80003086:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8000308a:	e1 b8 00 00 	mfsr	r8,0x0
8000308e:	10 9c       	mov	r12,r8
80003090:	f0 1f 00 18 	mcall	800030f0 <scif_dfll0_closedloop_start+0x1c0>
80003094:	18 98       	mov	r8,r12
80003096:	ef 68 ff ff 	st.b	r7[-1],r8
8000309a:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
8000309c:	fe 78 18 00 	mov	r8,-59392
800030a0:	32 49       	mov	r9,36
800030a2:	ea 19 aa 00 	orh	r9,0xaa00
800030a6:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
800030a8:	fe 78 18 00 	mov	r8,-59392
800030ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800030b0:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800030b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800030b6:	30 08       	mov	r8,0
800030b8:	f0 09 18 00 	cp.b	r9,r8
800030bc:	c0 20       	breq	800030c0 <scif_dfll0_closedloop_start+0x190>
800030be:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
800030c0:	e0 6c 40 00 	mov	r12,16384
800030c4:	f0 1f 00 0c 	mcall	800030f4 <scif_dfll0_closedloop_start+0x1c4>
800030c8:	18 98       	mov	r8,r12
800030ca:	58 08       	cp.w	r8,0
800030cc:	c0 30       	breq	800030d2 <scif_dfll0_closedloop_start+0x1a2>
    return -1;
800030ce:	3f f8       	mov	r8,-1
800030d0:	c0 b8       	rjmp	800030e6 <scif_dfll0_closedloop_start+0x1b6>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
800030d2:	e0 6c 02 00 	mov	r12,512
800030d6:	f0 1f 00 08 	mcall	800030f4 <scif_dfll0_closedloop_start+0x1c4>
800030da:	18 98       	mov	r8,r12
800030dc:	58 08       	cp.w	r8,0
800030de:	c0 30       	breq	800030e4 <scif_dfll0_closedloop_start+0x1b4>
    return -1;
800030e0:	3f f8       	mov	r8,-1
800030e2:	c0 28       	rjmp	800030e6 <scif_dfll0_closedloop_start+0x1b6>

  return PASS;
800030e4:	30 08       	mov	r8,0
}
800030e6:	10 9c       	mov	r12,r8
800030e8:	2f cd       	sub	sp,-16
800030ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800030ee:	00 00       	add	r0,r0
800030f0:	80 00       	ld.sh	r0,r0[0x0]
800030f2:	2d ac       	sub	r12,-38
800030f4:	80 00       	ld.sh	r0,r0[0x0]
800030f6:	34 3c       	mov	r12,67

800030f8 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
800030f8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800030fc:	1a 97       	mov	r7,sp
800030fe:	21 6d       	sub	sp,88
80003100:	ef 4c ff e4 	st.w	r7[-28],r12
80003104:	ee eb ff dc 	st.d	r7[-36],r10
80003108:	12 98       	mov	r8,r9
8000310a:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
8000310e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003112:	70 08       	ld.w	r8,r8[0x0]
80003114:	58 08       	cp.w	r8,0
80003116:	c0 61       	brne	80003122 <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
80003118:	e0 78 c2 00 	mov	r8,115200
8000311c:	ef 48 ff fc 	st.w	r7[-4],r8
80003120:	c3 38       	rjmp	80003186 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
80003122:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003126:	70 08       	ld.w	r8,r8[0x0]
80003128:	58 18       	cp.w	r8,1
8000312a:	c0 60       	breq	80003136 <scif_dfll0_closedloop_configure_and_start+0x3e>
8000312c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003130:	70 08       	ld.w	r8,r8[0x0]
80003132:	58 98       	cp.w	r8,9
80003134:	c0 61       	brne	80003140 <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
80003136:	e0 68 80 00 	mov	r8,32768
8000313a:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
8000313e:	c2 48       	rjmp	80003186 <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
80003140:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003144:	70 08       	ld.w	r8,r8[0x0]
80003146:	58 38       	cp.w	r8,3
80003148:	c0 71       	brne	80003156 <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
8000314a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000314e:	70 38       	ld.w	r8,r8[0xc]
80003150:	ef 48 ff fc 	st.w	r7[-4],r8
80003154:	c1 98       	rjmp	80003186 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
80003156:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000315a:	70 08       	ld.w	r8,r8[0x0]
8000315c:	58 48       	cp.w	r8,4
8000315e:	c0 81       	brne	8000316e <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
80003160:	e0 68 0e 00 	mov	r8,3584
80003164:	ea 18 07 27 	orh	r8,0x727
80003168:	ef 48 ff fc 	st.w	r7[-4],r8
8000316c:	c0 d8       	rjmp	80003186 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
8000316e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003172:	70 08       	ld.w	r8,r8[0x0]
80003174:	58 b8       	cp.w	r8,11
80003176:	c0 61       	brne	80003182 <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
80003178:	e0 68 03 e8 	mov	r8,1000
8000317c:	ef 48 ff fc 	st.w	r7[-4],r8
80003180:	c0 38       	rjmp	80003186 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
80003182:	3f f8       	mov	r8,-1
80003184:	cc 98       	rjmp	80003316 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
80003186:	ee fb ff e4 	ld.w	r11,r7[-28]
8000318a:	30 0c       	mov	r12,0
8000318c:	f0 1f 00 65 	mcall	80003320 <scif_dfll0_closedloop_configure_and_start+0x228>
80003190:	18 98       	mov	r8,r12
80003192:	58 08       	cp.w	r8,0
80003194:	c0 30       	breq	8000319a <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
80003196:	3f f8       	mov	r8,-1
80003198:	cb f8       	rjmp	80003316 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
8000319a:	ee ea ff dc 	ld.d	r10,r7[-36]
8000319e:	14 98       	mov	r8,r10
800031a0:	16 99       	mov	r9,r11
800031a2:	f0 0c 16 18 	lsr	r12,r8,0x18
800031a6:	f2 03 15 08 	lsl	r3,r9,0x8
800031aa:	f9 e3 10 03 	or	r3,r12,r3
800031ae:	f0 02 15 08 	lsl	r2,r8,0x8
800031b2:	e4 0a 01 0a 	sub	r10,r2,r10
800031b6:	e6 0b 01 4b 	sbc	r11,r3,r11
800031ba:	e0 68 5a 00 	mov	r8,23040
800031be:	ea 18 a0 08 	orh	r8,0xa008
800031c2:	3f d9       	mov	r9,-3
800031c4:	10 0a       	add	r10,r8
800031c6:	f6 09 00 4b 	adc	r11,r11,r9
800031ca:	e0 68 77 80 	mov	r8,30592
800031ce:	ea 18 06 8e 	orh	r8,0x68e
800031d2:	30 09       	mov	r9,0
800031d4:	f0 1f 00 54 	mcall	80003324 <scif_dfll0_closedloop_configure_and_start+0x22c>
800031d8:	14 98       	mov	r8,r10
800031da:	16 99       	mov	r9,r11
800031dc:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
800031e0:	ee fa ff fc 	ld.w	r10,r7[-4]
800031e4:	ef 4a ff ac 	st.w	r7[-84],r10
800031e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031ec:	bf 58       	asr	r8,0x1f
800031ee:	ef 48 ff a8 	st.w	r7[-88],r8
800031f2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800031f6:	ee ea ff dc 	ld.d	r10,r7[-36]
800031fa:	f0 1f 00 4b 	mcall	80003324 <scif_dfll0_closedloop_configure_and_start+0x22c>
800031fe:	14 98       	mov	r8,r10
80003200:	16 99       	mov	r9,r11
80003202:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
80003206:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000320a:	70 28       	ld.w	r8,r8[0x8]
8000320c:	58 08       	cp.w	r8,0
8000320e:	c2 e1       	brne	8000326a <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
80003210:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003214:	b1 88       	lsr	r8,0x10
80003216:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000321a:	b1 69       	lsl	r9,0x10
8000321c:	ef 49 ff b0 	st.w	r7[-80],r9
80003220:	ee f9 ff b0 	ld.w	r9,r7[-80]
80003224:	f1 e9 10 09 	or	r9,r8,r9
80003228:	ef 49 ff b0 	st.w	r7[-80],r9
8000322c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003230:	b1 68       	lsl	r8,0x10
80003232:	ef 48 ff b4 	st.w	r7[-76],r8
80003236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000323a:	ef 48 ff bc 	st.w	r7[-68],r8
8000323e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003242:	bf 58       	asr	r8,0x1f
80003244:	ef 48 ff b8 	st.w	r7[-72],r8
80003248:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000324c:	ee ea ff b0 	ld.d	r10,r7[-80]
80003250:	f0 1f 00 35 	mcall	80003324 <scif_dfll0_closedloop_configure_and_start+0x22c>
80003254:	14 98       	mov	r8,r10
80003256:	16 99       	mov	r9,r11
80003258:	10 99       	mov	r9,r8
8000325a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000325e:	b1 68       	lsl	r8,0x10
80003260:	f2 08 01 08 	sub	r8,r9,r8
80003264:	ef 48 ff ec 	st.w	r7[-20],r8
80003268:	c4 68       	rjmp	800032f4 <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
8000326a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000326e:	b1 88       	lsr	r8,0x10
80003270:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003274:	b1 69       	lsl	r9,0x10
80003276:	ef 49 ff c0 	st.w	r7[-64],r9
8000327a:	ee fa ff c0 	ld.w	r10,r7[-64]
8000327e:	f1 ea 10 0a 	or	r10,r8,r10
80003282:	ef 4a ff c0 	st.w	r7[-64],r10
80003286:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000328a:	b1 68       	lsl	r8,0x10
8000328c:	ef 48 ff c4 	st.w	r7[-60],r8
80003290:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003294:	ef 49 ff cc 	st.w	r7[-52],r9
80003298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000329c:	bf 58       	asr	r8,0x1f
8000329e:	ef 48 ff c8 	st.w	r7[-56],r8
800032a2:	ee e8 ff c8 	ld.d	r8,r7[-56]
800032a6:	ee ea ff c0 	ld.d	r10,r7[-64]
800032aa:	f0 1f 00 1f 	mcall	80003324 <scif_dfll0_closedloop_configure_and_start+0x22c>
800032ae:	14 98       	mov	r8,r10
800032b0:	16 99       	mov	r9,r11
800032b2:	ee fa ff f0 	ld.w	r10,r7[-16]
800032b6:	ef 4a ff d4 	st.w	r7[-44],r10
800032ba:	30 0a       	mov	r10,0
800032bc:	ef 4a ff d0 	st.w	r7[-48],r10
800032c0:	ee fa ff d4 	ld.w	r10,r7[-44]
800032c4:	b1 8a       	lsr	r10,0x10
800032c6:	ee f1 ff d0 	ld.w	r1,r7[-48]
800032ca:	b1 61       	lsl	r1,0x10
800032cc:	f5 e1 10 01 	or	r1,r10,r1
800032d0:	ee f0 ff d4 	ld.w	r0,r7[-44]
800032d4:	b1 60       	lsl	r0,0x10
800032d6:	00 18       	sub	r8,r0
800032d8:	f2 01 01 49 	sbc	r9,r9,r1
800032dc:	10 08       	add	r8,r8
800032de:	f2 09 00 49 	adc	r9,r9,r9
800032e2:	10 99       	mov	r9,r8
800032e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800032e8:	70 18       	ld.w	r8,r8[0x4]
800032ea:	2f f8       	sub	r8,-1
800032ec:	f2 08 02 48 	mul	r8,r9,r8
800032f0:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
800032f4:	30 48       	mov	r8,4
800032f6:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
800032fa:	30 48       	mov	r8,4
800032fc:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
80003300:	ee c8 00 18 	sub	r8,r7,24
80003304:	10 9c       	mov	r12,r8
80003306:	f0 1f 00 09 	mcall	80003328 <scif_dfll0_closedloop_configure_and_start+0x230>
8000330a:	18 98       	mov	r8,r12
8000330c:	58 08       	cp.w	r8,0
8000330e:	c0 30       	breq	80003314 <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
80003310:	3f f8       	mov	r8,-1
80003312:	c0 28       	rjmp	80003316 <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
80003314:	30 08       	mov	r8,0
}
80003316:	10 9c       	mov	r12,r8
80003318:	2e ad       	sub	sp,-88
8000331a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000331e:	00 00       	add	r0,r0
80003320:	80 00       	ld.sh	r0,r0[0x0]
80003322:	33 d0       	mov	r0,61
80003324:	80 00       	ld.sh	r0,r0[0x0]
80003326:	53 ca       	stdsp	sp[0xf0],r10
80003328:	80 00       	ld.sh	r0,r0[0x0]
8000332a:	2f 30       	sub	r0,-13

8000332c <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
8000332c:	eb cd 40 80 	pushm	r7,lr
80003330:	1a 97       	mov	r7,sp
80003332:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
80003334:	e1 b8 00 00 	mfsr	r8,0x0
80003338:	10 9c       	mov	r12,r8
8000333a:	f0 1f 00 0e 	mcall	80003370 <scif_start_rc120M+0x44>
8000333e:	18 98       	mov	r8,r12
80003340:	ef 68 ff ff 	st.b	r7[-1],r8
80003344:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80003346:	fe 78 18 00 	mov	r8,-59392
8000334a:	35 89       	mov	r9,88
8000334c:	ea 19 aa 00 	orh	r9,0xaa00
80003350:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
80003352:	fe 78 18 00 	mov	r8,-59392
80003356:	30 19       	mov	r9,1
80003358:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000335c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003360:	30 08       	mov	r8,0
80003362:	f0 09 18 00 	cp.b	r9,r8
80003366:	c0 20       	breq	8000336a <scif_start_rc120M+0x3e>
80003368:	d5 03       	csrf	0x10
}
8000336a:	2f fd       	sub	sp,-4
8000336c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003370:	80 00       	ld.sh	r0,r0[0x0]
80003372:	2d ac       	sub	r12,-38

80003374 <scif_disable_rc32out>:
  AVR32_SCIF.rc32kcr = temp;
  AVR32_LEAVE_CRITICAL_REGION( );
}

void scif_disable_rc32out(void)
{
80003374:	eb cd 40 80 	pushm	r7,lr
80003378:	1a 97       	mov	r7,sp
8000337a:	20 2d       	sub	sp,8
  unsigned long temp;
  AVR32_ENTER_CRITICAL_REGION( );
8000337c:	e1 b8 00 00 	mfsr	r8,0x0
80003380:	10 9c       	mov	r12,r8
80003382:	f0 1f 00 13 	mcall	800033cc <scif_disable_rc32out+0x58>
80003386:	18 98       	mov	r8,r12
80003388:	ef 68 ff ff 	st.b	r7[-1],r8
8000338c:	d3 03       	ssrf	0x10
  temp = AVR32_PM.ppcr & (~AVR32_PM_PPCR_FRC32_MASK);
8000338e:	fe 78 14 00 	mov	r8,-60416
80003392:	f0 f8 01 60 	ld.w	r8,r8[352]
80003396:	a1 d8       	cbr	r8,0x1
80003398:	ef 48 ff f8 	st.w	r7[-8],r8
  // Un-force the RC32 signal from being output on the dedicated pin (PA20).
  AVR32_PM.unlock = 0xAA000000 | AVR32_PM_PPCR;
8000339c:	fe 78 14 00 	mov	r8,-60416
800033a0:	e0 69 01 60 	mov	r9,352
800033a4:	ea 19 aa 00 	orh	r9,0xaa00
800033a8:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.ppcr = temp;
800033ac:	fe 78 14 00 	mov	r8,-60416
800033b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800033b4:	f1 49 01 60 	st.w	r8[352],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800033b8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800033bc:	30 08       	mov	r8,0
800033be:	f0 09 18 00 	cp.b	r9,r8
800033c2:	c0 20       	breq	800033c6 <scif_disable_rc32out+0x52>
800033c4:	d5 03       	csrf	0x10
}
800033c6:	2f ed       	sub	sp,-8
800033c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800033cc:	80 00       	ld.sh	r0,r0[0x0]
800033ce:	2d ac       	sub	r12,-38

800033d0 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
800033d0:	eb cd 40 80 	pushm	r7,lr
800033d4:	1a 97       	mov	r7,sp
800033d6:	20 2d       	sub	sp,8
800033d8:	ef 4c ff fc 	st.w	r7[-4],r12
800033dc:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800033e0:	fe 78 18 00 	mov	r8,-59392
800033e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800033e8:	2e 49       	sub	r9,-28
800033ea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800033ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033f2:	5c 58       	castu.b	r8
800033f4:	c0 30       	breq	800033fa <scif_start_gclk+0x2a>
    return -1;
800033f6:	3f f8       	mov	r8,-1
800033f8:	c1 e8       	rjmp	80003434 <scif_start_gclk+0x64>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800033fa:	fe 78 18 00 	mov	r8,-59392
800033fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003402:	ee fa ff f8 	ld.w	r10,r7[-8]
80003406:	74 1a       	ld.w	r10,r10[0x4]
80003408:	f4 0b 15 10 	lsl	r11,r10,0x10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8000340c:	ee fa ff f8 	ld.w	r10,r7[-8]
80003410:	74 2a       	ld.w	r10,r10[0x8]
80003412:	a1 7a       	lsl	r10,0x1
80003414:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80003418:	14 4b       	or	r11,r10
8000341a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000341e:	74 0a       	ld.w	r10,r10[0x0]
80003420:	a9 6a       	lsl	r10,0x8
80003422:	e2 1a 1f 00 	andl	r10,0x1f00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
80003426:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8000342a:	a1 aa       	sbr	r10,0x0
8000342c:	2e 49       	sub	r9,-28
8000342e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80003432:	30 08       	mov	r8,0
}
80003434:	10 9c       	mov	r12,r8
80003436:	2f ed       	sub	sp,-8
80003438:	e3 cd 80 80 	ldm	sp++,r7,pc

8000343c <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
8000343c:	eb cd 40 80 	pushm	r7,lr
80003440:	1a 97       	mov	r7,sp
80003442:	20 2d       	sub	sp,8
80003444:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
80003448:	e0 78 86 a0 	mov	r8,100000
8000344c:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
80003450:	c0 c8       	rjmp	80003468 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
80003452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003456:	20 18       	sub	r8,1
80003458:	ef 48 ff fc 	st.w	r7[-4],r8
8000345c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003460:	58 08       	cp.w	r8,0
80003462:	c0 31       	brne	80003468 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80003464:	3f f8       	mov	r8,-1
80003466:	c0 a8       	rjmp	8000347a <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80003468:	fe 78 18 00 	mov	r8,-59392
8000346c:	70 59       	ld.w	r9,r8[0x14]
8000346e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003472:	f3 e8 00 08 	and	r8,r9,r8
80003476:	ce e0       	breq	80003452 <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80003478:	30 08       	mov	r8,0
}
8000347a:	10 9c       	mov	r12,r8
8000347c:	2f ed       	sub	sp,-8
8000347e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003482 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003482:	eb cd 40 80 	pushm	r7,lr
80003486:	1a 97       	mov	r7,sp
80003488:	20 1d       	sub	sp,4
8000348a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000348e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003492:	e6 18 00 01 	andh	r8,0x1,COH
80003496:	5f 08       	sreq	r8
80003498:	5c 58       	castu.b	r8
}
8000349a:	10 9c       	mov	r12,r8
8000349c:	2f fd       	sub	sp,-4
8000349e:	e3 cd 80 80 	ldm	sp++,r7,pc

800034a2 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800034a2:	eb cd 40 80 	pushm	r7,lr
800034a6:	1a 97       	mov	r7,sp
800034a8:	20 7d       	sub	sp,28
800034aa:	ef 4c ff ec 	st.w	r7[-20],r12
800034ae:	ef 4b ff e8 	st.w	r7[-24],r11
800034b2:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800034b6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800034ba:	f0 09 15 04 	lsl	r9,r8,0x4
800034be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800034c2:	10 39       	cp.w	r9,r8
800034c4:	e0 8b 00 04 	brhi	800034cc <usart_set_async_baudrate+0x2a>
800034c8:	31 08       	mov	r8,16
800034ca:	c0 28       	rjmp	800034ce <usart_set_async_baudrate+0x2c>
800034cc:	30 88       	mov	r8,8
800034ce:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800034d2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800034d6:	f0 09 15 03 	lsl	r9,r8,0x3
800034da:	ee fa ff f0 	ld.w	r10,r7[-16]
800034de:	ee f8 ff e8 	ld.w	r8,r7[-24]
800034e2:	f4 08 02 48 	mul	r8,r10,r8
800034e6:	a1 98       	lsr	r8,0x1
800034e8:	f2 08 00 08 	add	r8,r9,r8
800034ec:	ee fa ff f0 	ld.w	r10,r7[-16]
800034f0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800034f4:	f4 09 02 49 	mul	r9,r10,r9
800034f8:	f0 09 0d 08 	divu	r8,r8,r9
800034fc:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003500:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003504:	a3 98       	lsr	r8,0x3
80003506:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8000350a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000350e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003512:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003516:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000351a:	58 08       	cp.w	r8,0
8000351c:	c0 70       	breq	8000352a <usart_set_async_baudrate+0x88>
8000351e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003522:	e0 48 ff ff 	cp.w	r8,65535
80003526:	e0 88 00 04 	brls	8000352e <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8000352a:	30 18       	mov	r8,1
8000352c:	c2 08       	rjmp	8000356c <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8000352e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003532:	70 18       	ld.w	r8,r8[0x4]
80003534:	10 99       	mov	r9,r8
80003536:	e4 19 ff f7 	andh	r9,0xfff7
8000353a:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8000353e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003542:	59 08       	cp.w	r8,16
80003544:	c0 40       	breq	8000354c <usart_set_async_baudrate+0xaa>
80003546:	e8 68 00 00 	mov	r8,524288
8000354a:	c0 28       	rjmp	8000354e <usart_set_async_baudrate+0xac>
8000354c:	30 08       	mov	r8,0
8000354e:	10 49       	or	r9,r8
80003550:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003554:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80003556:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000355a:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8000355e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003562:	10 49       	or	r9,r8
80003564:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003568:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8000356a:	30 08       	mov	r8,0
}
8000356c:	10 9c       	mov	r12,r8
8000356e:	2f 9d       	sub	sp,-28
80003570:	e3 cd 80 80 	ldm	sp++,r7,pc

80003574 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80003574:	eb cd 40 80 	pushm	r7,lr
80003578:	1a 97       	mov	r7,sp
8000357a:	20 2d       	sub	sp,8
8000357c:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003580:	e1 b8 00 00 	mfsr	r8,0x0
80003584:	10 9c       	mov	r12,r8
80003586:	f0 1f 00 18 	mcall	800035e4 <usart_reset+0x70>
8000358a:	18 98       	mov	r8,r12
8000358c:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003590:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003594:	30 08       	mov	r8,0
80003596:	f0 09 18 00 	cp.b	r9,r8
8000359a:	c0 20       	breq	8000359e <usart_reset+0x2a>
8000359c:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000359e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035a2:	3f f9       	mov	r9,-1
800035a4:	91 39       	st.w	r8[0xc],r9
  usart->csr;
800035a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035aa:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800035ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800035b0:	30 08       	mov	r8,0
800035b2:	f0 09 18 00 	cp.b	r9,r8
800035b6:	c0 20       	breq	800035ba <usart_reset+0x46>
800035b8:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800035ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035be:	30 09       	mov	r9,0
800035c0:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
800035c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035c6:	30 09       	mov	r9,0
800035c8:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
800035ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ce:	30 09       	mov	r9,0
800035d0:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800035d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035d6:	e8 69 61 0c 	mov	r9,549132
800035da:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800035dc:	2f ed       	sub	sp,-8
800035de:	e3 cd 80 80 	ldm	sp++,r7,pc
800035e2:	00 00       	add	r0,r0
800035e4:	80 00       	ld.sh	r0,r0[0x0]
800035e6:	34 82       	mov	r2,72

800035e8 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800035e8:	eb cd 40 80 	pushm	r7,lr
800035ec:	1a 97       	mov	r7,sp
800035ee:	20 3d       	sub	sp,12
800035f0:	ef 4c ff fc 	st.w	r7[-4],r12
800035f4:	ef 4b ff f8 	st.w	r7[-8],r11
800035f8:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800035fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80003600:	f0 1f 00 54 	mcall	80003750 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80003604:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003608:	58 08       	cp.w	r8,0
8000360a:	c3 90       	breq	8000367c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
8000360c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003610:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003612:	30 48       	mov	r8,4
80003614:	f0 09 18 00 	cp.b	r9,r8
80003618:	e0 88 00 32 	brls	8000367c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
8000361c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003620:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003622:	30 98       	mov	r8,9
80003624:	f0 09 18 00 	cp.b	r9,r8
80003628:	e0 8b 00 2a 	brhi	8000367c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8000362c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003630:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003632:	30 78       	mov	r8,7
80003634:	f0 09 18 00 	cp.b	r9,r8
80003638:	e0 8b 00 22 	brhi	8000367c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
8000363c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003640:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003642:	e0 68 01 01 	mov	r8,257
80003646:	f0 09 19 00 	cp.h	r9,r8
8000364a:	e0 8b 00 19 	brhi	8000367c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8000364e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003652:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003656:	30 38       	mov	r8,3
80003658:	f0 09 18 00 	cp.b	r9,r8
8000365c:	e0 8b 00 10 	brhi	8000367c <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003660:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003668:	70 08       	ld.w	r8,r8[0x0]
8000366a:	12 9a       	mov	r10,r9
8000366c:	10 9b       	mov	r11,r8
8000366e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003672:	f0 1f 00 39 	mcall	80003754 <usart_init_rs232+0x16c>
80003676:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003678:	58 18       	cp.w	r8,1
8000367a:	c0 31       	brne	80003680 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8000367c:	30 18       	mov	r8,1
8000367e:	c6 48       	rjmp	80003746 <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80003680:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003684:	11 c9       	ld.ub	r9,r8[0x4]
80003686:	30 98       	mov	r8,9
80003688:	f0 09 18 00 	cp.b	r9,r8
8000368c:	c0 a1       	brne	800036a0 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000368e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003692:	70 18       	ld.w	r8,r8[0x4]
80003694:	10 99       	mov	r9,r8
80003696:	b1 b9       	sbr	r9,0x11
80003698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000369c:	91 19       	st.w	r8[0x4],r9
8000369e:	c0 d8       	rjmp	800036b8 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800036a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036a4:	70 19       	ld.w	r9,r8[0x4]
800036a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036aa:	11 c8       	ld.ub	r8,r8[0x4]
800036ac:	20 58       	sub	r8,5
800036ae:	a7 68       	lsl	r8,0x6
800036b0:	10 49       	or	r9,r8
800036b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036b6:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800036b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036bc:	70 19       	ld.w	r9,r8[0x4]
800036be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036c2:	11 d8       	ld.ub	r8,r8[0x5]
800036c4:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
800036c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036cc:	f1 38 00 08 	ld.ub	r8,r8[8]
800036d0:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800036d2:	f5 e8 10 08 	or	r8,r10,r8
800036d6:	10 49       	or	r9,r8
800036d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036dc:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800036de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036e2:	90 39       	ld.sh	r9,r8[0x6]
800036e4:	30 28       	mov	r8,2
800036e6:	f0 09 19 00 	cp.h	r9,r8
800036ea:	e0 88 00 14 	brls	80003712 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800036ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036f2:	70 18       	ld.w	r8,r8[0x4]
800036f4:	10 99       	mov	r9,r8
800036f6:	ad b9       	sbr	r9,0xd
800036f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036fc:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800036fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003702:	90 38       	ld.sh	r8,r8[0x6]
80003704:	5c 78       	castu.h	r8
80003706:	20 28       	sub	r8,2
80003708:	10 99       	mov	r9,r8
8000370a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000370e:	91 a9       	st.w	r8[0x28],r9
80003710:	c0 d8       	rjmp	8000372a <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003712:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003716:	70 19       	ld.w	r9,r8[0x4]
80003718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000371c:	90 38       	ld.sh	r8,r8[0x6]
8000371e:	5c 78       	castu.h	r8
80003720:	ad 68       	lsl	r8,0xc
80003722:	10 49       	or	r9,r8
80003724:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003728:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8000372a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000372e:	70 18       	ld.w	r8,r8[0x4]
80003730:	10 99       	mov	r9,r8
80003732:	e0 19 ff f0 	andl	r9,0xfff0
80003736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000373a:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8000373c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003740:	35 09       	mov	r9,80
80003742:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003744:	30 08       	mov	r8,0
}
80003746:	10 9c       	mov	r12,r8
80003748:	2f dd       	sub	sp,-12
8000374a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000374e:	00 00       	add	r0,r0
80003750:	80 00       	ld.sh	r0,r0[0x0]
80003752:	35 74       	mov	r4,87
80003754:	80 00       	ld.sh	r0,r0[0x0]
80003756:	34 a2       	mov	r2,74

80003758 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003758:	48 dd       	lddpc	sp,8000378c <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8000375a:	fe c0 89 5a 	sub	r0,pc,-30374
  mtsr    AVR32_EVBA, r0
8000375e:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80003762:	d5 53       	csrf	0x15
  lda.w   r1, _edata
80003764:	48 b0       	lddpc	r0,80003790 <udata_clear_loop_end+0x8>
  cp      r0, r1
80003766:	48 c1       	lddpc	r1,80003794 <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
80003768:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
8000376a:	c0 62       	brcc	80003776 <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
8000376c:	48 b2       	lddpc	r2,80003798 <udata_clear_loop_end+0x10>

8000376e <idata_load_loop>:
  st.d    r0++, r4
8000376e:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
80003770:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
80003772:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003774:	cf d3       	brcs	8000376e <idata_load_loop>

80003776 <idata_load_loop_end>:
  lda.w   r1, _end
80003776:	48 a0       	lddpc	r0,8000379c <udata_clear_loop_end+0x14>
  cp      r0, r1
80003778:	48 a1       	lddpc	r1,800037a0 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
8000377a:	02 30       	cp.w	r0,r1
  mov     r2, 0
8000377c:	c0 62       	brcc	80003788 <udata_clear_loop_end>
  mov     r3, 0
8000377e:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
80003780:	30 03       	mov	r3,0

80003782 <udata_clear_loop>:
  cp      r0, r1
80003782:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
80003784:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003786:	cf e3       	brcs	80003782 <udata_clear_loop>

80003788 <udata_clear_loop_end>:
80003788:	fe cf ea 74 	sub	pc,pc,-5516
8000378c:	00 00       	add	r0,r0
8000378e:	80 00       	ld.sh	r0,r0[0x0]
80003790:	00 00       	add	r0,r0
80003792:	00 04       	add	r4,r0
80003794:	00 00       	add	r0,r0
80003796:	05 10       	ld.sh	r0,r2++
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	c0 d0       	breq	800037b4 <str2int+0x10>
8000379c:	00 00       	add	r0,r0
8000379e:	05 10       	ld.sh	r0,r2++
800037a0:	00 00       	add	r0,r0
800037a2:	08 e8       	st.h	--r4,r8

800037a4 <str2int>:
#include <math.h>

static void find_data(const char *c, int data_i[50]);

static int str2int(char* pStr, unsigned int len)
{
800037a4:	eb cd 40 80 	pushm	r7,lr
800037a8:	1a 97       	mov	r7,sp
800037aa:	20 4d       	sub	sp,16
800037ac:	ef 4c ff f4 	st.w	r7[-12],r12
800037b0:	ef 4b ff f0 	st.w	r7[-16],r11
	int iRetVal = 0;
800037b4:	30 08       	mov	r8,0
800037b6:	ef 48 ff f8 	st.w	r7[-8],r8
	int cnt = 0;
800037ba:	30 08       	mov	r8,0
800037bc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(pStr){
800037c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800037c4:	58 08       	cp.w	r8,0
800037c6:	c3 10       	breq	80003828 <str2int+0x84>
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
800037c8:	c1 a8       	rjmp	800037fc <str2int+0x58>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
800037ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800037ce:	12 98       	mov	r8,r9
800037d0:	a3 68       	lsl	r8,0x2
800037d2:	12 08       	add	r8,r9
800037d4:	a1 78       	lsl	r8,0x1
800037d6:	10 99       	mov	r9,r8
800037d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800037dc:	11 88       	ld.ub	r8,r8[0x0]
800037de:	23 08       	sub	r8,48
800037e0:	f2 08 00 08 	add	r8,r9,r8
800037e4:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
800037e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800037ec:	2f f8       	sub	r8,-1
800037ee:	ef 48 ff f4 	st.w	r7[-12],r8
			cnt++;
800037f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037f6:	2f f8       	sub	r8,-1
800037f8:	ef 48 ff fc 	st.w	r7[-4],r8
{
	int iRetVal = 0;
	int cnt = 0;
	
	if(pStr){
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
800037fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003800:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003804:	10 39       	cp.w	r9,r8
80003806:	c1 12       	brcc	80003828 <str2int+0x84>
80003808:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000380c:	11 89       	ld.ub	r9,r8[0x0]
8000380e:	33 98       	mov	r8,57
80003810:	f0 09 18 00 	cp.b	r9,r8
80003814:	e0 8b 00 0a 	brhi	80003828 <str2int+0x84>
80003818:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000381c:	11 89       	ld.ub	r9,r8[0x0]
8000381e:	32 f8       	mov	r8,47
80003820:	f0 09 18 00 	cp.b	r9,r8
80003824:	fe 9b ff d3 	brhi	800037ca <str2int+0x26>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
			cnt++;
		}
	}
	return iRetVal;
80003828:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000382c:	10 9c       	mov	r12,r8
8000382e:	2f cd       	sub	sp,-16
80003830:	e3 cd 80 80 	ldm	sp++,r7,pc

80003834 <str2float>:

static float str2float(char* pStr){
80003834:	eb cd 40 c0 	pushm	r6-r7,lr
80003838:	1a 97       	mov	r7,sp
8000383a:	20 3d       	sub	sp,12
8000383c:	ef 4c ff f4 	st.w	r7[-12],r12
	float iRetVal = 0;
80003840:	30 08       	mov	r8,0
80003842:	ef 48 ff f8 	st.w	r7[-8],r8
	char *decP;
	
	if(pStr){
80003846:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000384a:	58 08       	cp.w	r8,0
8000384c:	e0 80 00 8c 	breq	80003964 <str2float+0x130>
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80003850:	c1 d8       	rjmp	8000388a <str2float+0x56>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
80003852:	fc 1b 41 20 	movh	r11,0x4120
80003856:	ee fc ff f8 	ld.w	r12,r7[-8]
8000385a:	f0 1f 00 46 	mcall	80003970 <str2float+0x13c>
8000385e:	18 98       	mov	r8,r12
80003860:	10 96       	mov	r6,r8
80003862:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003866:	11 88       	ld.ub	r8,r8[0x0]
80003868:	23 08       	sub	r8,48
8000386a:	10 9c       	mov	r12,r8
8000386c:	f0 1f 00 42 	mcall	80003974 <str2float+0x140>
80003870:	18 98       	mov	r8,r12
80003872:	10 9b       	mov	r11,r8
80003874:	0c 9c       	mov	r12,r6
80003876:	f0 1f 00 41 	mcall	80003978 <str2float+0x144>
8000387a:	18 98       	mov	r8,r12
8000387c:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
80003880:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003884:	2f f8       	sub	r8,-1
80003886:	ef 48 ff f4 	st.w	r7[-12],r8
static float str2float(char* pStr){
	float iRetVal = 0;
	char *decP;
	
	if(pStr){
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
8000388a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000388e:	11 88       	ld.ub	r8,r8[0x0]
80003890:	58 08       	cp.w	r8,0
80003892:	c1 10       	breq	800038b4 <str2float+0x80>
80003894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003898:	11 89       	ld.ub	r9,r8[0x0]
8000389a:	33 98       	mov	r8,57
8000389c:	f0 09 18 00 	cp.b	r9,r8
800038a0:	e0 8b 00 0a 	brhi	800038b4 <str2float+0x80>
800038a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038a8:	11 89       	ld.ub	r9,r8[0x0]
800038aa:	32 f8       	mov	r8,47
800038ac:	f0 09 18 00 	cp.b	r9,r8
800038b0:	fe 9b ff d1 	brhi	80003852 <str2float+0x1e>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
		}
	
		if(*pStr == '.'){
800038b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038b8:	11 89       	ld.ub	r9,r8[0x0]
800038ba:	32 e8       	mov	r8,46
800038bc:	f0 09 18 00 	cp.b	r9,r8
800038c0:	c5 21       	brne	80003964 <str2float+0x130>
			decP = pStr++;
800038c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038c6:	ef 48 ff fc 	st.w	r7[-4],r8
800038ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038ce:	2f f8       	sub	r8,-1
800038d0:	ef 48 ff f4 	st.w	r7[-12],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
800038d4:	c1 d8       	rjmp	8000390e <str2float+0xda>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
800038d6:	fc 1b 41 20 	movh	r11,0x4120
800038da:	ee fc ff f8 	ld.w	r12,r7[-8]
800038de:	f0 1f 00 25 	mcall	80003970 <str2float+0x13c>
800038e2:	18 98       	mov	r8,r12
800038e4:	10 96       	mov	r6,r8
800038e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800038ea:	11 88       	ld.ub	r8,r8[0x0]
800038ec:	23 08       	sub	r8,48
800038ee:	10 9c       	mov	r12,r8
800038f0:	f0 1f 00 21 	mcall	80003974 <str2float+0x140>
800038f4:	18 98       	mov	r8,r12
800038f6:	10 9b       	mov	r11,r8
800038f8:	0c 9c       	mov	r12,r6
800038fa:	f0 1f 00 20 	mcall	80003978 <str2float+0x144>
800038fe:	18 98       	mov	r8,r12
80003900:	ef 48 ff f8 	st.w	r7[-8],r8
				pStr++;
80003904:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003908:	2f f8       	sub	r8,-1
8000390a:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	
		if(*pStr == '.'){
			decP = pStr++;
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
8000390e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003912:	11 88       	ld.ub	r8,r8[0x0]
80003914:	58 08       	cp.w	r8,0
80003916:	c1 b0       	breq	8000394c <str2float+0x118>
80003918:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000391c:	11 89       	ld.ub	r9,r8[0x0]
8000391e:	33 98       	mov	r8,57
80003920:	f0 09 18 00 	cp.b	r9,r8
80003924:	e0 8b 00 14 	brhi	8000394c <str2float+0x118>
80003928:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000392c:	11 89       	ld.ub	r9,r8[0x0]
8000392e:	32 f8       	mov	r8,47
80003930:	f0 09 18 00 	cp.b	r9,r8
80003934:	fe 9b ff d1 	brhi	800038d6 <str2float+0xa2>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
80003938:	c0 a8       	rjmp	8000394c <str2float+0x118>
				iRetVal = iRetVal/10;
8000393a:	fc 1b 41 20 	movh	r11,0x4120
8000393e:	ee fc ff f8 	ld.w	r12,r7[-8]
80003942:	f0 1f 00 0f 	mcall	8000397c <str2float+0x148>
80003946:	18 98       	mov	r8,r12
80003948:	ef 48 ff f8 	st.w	r7[-8],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
8000394c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003950:	20 18       	sub	r8,1
80003952:	ef 48 ff f4 	st.w	r7[-12],r8
80003956:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000395a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000395e:	10 39       	cp.w	r9,r8
80003960:	fe 9b ff ed 	brhi	8000393a <str2float+0x106>
				iRetVal = iRetVal/10;
			}
		}
	}
	
	return iRetVal;
80003964:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003968:	10 9c       	mov	r12,r8
8000396a:	2f dd       	sub	sp,-12
8000396c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003970:	80 00       	ld.sh	r0,r0[0x0]
80003972:	52 14       	stdsp	sp[0x84],r4
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	52 f6       	stdsp	sp[0xbc],r6
80003978:	80 00       	ld.sh	r0,r0[0x0]
8000397a:	51 68       	stdsp	sp[0x58],r8
8000397c:	80 00       	ld.sh	r0,r0[0x0]
8000397e:	4f 34       	lddpc	r4,80003b48 <uc530_parse_default+0x1c8>

80003980 <uc530_parse_default>:

int uc530_parse_default(char *str, unsigned int len, uc530_data_t *gps_data){
80003980:	eb cd 40 80 	pushm	r7,lr
80003984:	1a 97       	mov	r7,sp
80003986:	fa cd 00 dc 	sub	sp,sp,220
8000398a:	ef 4c ff 2c 	st.w	r7[-212],r12
8000398e:	ef 4b ff 28 	st.w	r7[-216],r11
80003992:	ef 4a ff 24 	st.w	r7[-220],r10
	char *nmea = str;
80003996:	ee f8 ff 2c 	ld.w	r8,r7[-212]
8000399a:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
8000399e:	30 08       	mov	r8,0
800039a0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
800039a4:	e0 8f 02 36 	bral	80003e10 <uc530_parse_default+0x490>
		if(found_start){
800039a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039ac:	58 08       	cp.w	r8,0
800039ae:	e0 80 02 22 	breq	80003df2 <uc530_parse_default+0x472>
			// Ignore standard 'GP'
			nmea += 2;
800039b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039b6:	2f e8       	sub	r8,-2
800039b8:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// Find Data Indices
			find_data(nmea, data_i);
800039bc:	ee c8 00 d0 	sub	r8,r7,208
800039c0:	10 9b       	mov	r11,r8
800039c2:	ee fc ff f8 	ld.w	r12,r7[-8]
800039c6:	f0 1f 01 1c 	mcall	80003e34 <uc530_parse_default+0x4b4>
			gps_data->valid = 1;
800039ca:	ee f8 ff 24 	ld.w	r8,r7[-220]
800039ce:	30 19       	mov	r9,1
800039d0:	f1 49 00 40 	st.w	r8[64],r9
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
800039d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039d8:	11 89       	ld.ub	r9,r8[0x0]
800039da:	34 78       	mov	r8,71
800039dc:	f0 09 18 00 	cp.b	r9,r8
800039e0:	c5 f1       	brne	80003a9e <uc530_parse_default+0x11e>
800039e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039e6:	2f f8       	sub	r8,-1
800039e8:	11 89       	ld.ub	r9,r8[0x0]
800039ea:	34 78       	mov	r8,71
800039ec:	f0 09 18 00 	cp.b	r9,r8
800039f0:	c5 71       	brne	80003a9e <uc530_parse_default+0x11e>
800039f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039f6:	2f e8       	sub	r8,-2
800039f8:	11 89       	ld.ub	r9,r8[0x0]
800039fa:	34 18       	mov	r8,65
800039fc:	f0 09 18 00 	cp.b	r9,r8
80003a00:	c4 f1       	brne	80003a9e <uc530_parse_default+0x11e>
				// Fix Indicator
				if(data_i[5] != -1){
80003a02:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003a06:	5b f8       	cp.w	r8,-1
80003a08:	c1 20       	breq	80003a2c <uc530_parse_default+0xac>
					gps_data->fix_status = str2int(nmea+data_i[5],10);
80003a0a:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003a0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003a12:	f2 08 00 08 	add	r8,r9,r8
80003a16:	30 ab       	mov	r11,10
80003a18:	10 9c       	mov	r12,r8
80003a1a:	f0 1f 01 08 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003a1e:	18 98       	mov	r8,r12
80003a20:	5c 58       	castu.b	r8
80003a22:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003a26:	f3 68 00 30 	st.b	r9[48],r8
80003a2a:	c0 68       	rjmp	80003a36 <uc530_parse_default+0xb6>
				}
				else
					gps_data->valid = 0;
80003a2c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003a30:	30 09       	mov	r9,0
80003a32:	f1 49 00 40 	st.w	r8[64],r9
				
				// Number of Satellites
				if(data_i[6] != -1){
80003a36:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003a3a:	5b f8       	cp.w	r8,-1
80003a3c:	c1 20       	breq	80003a60 <uc530_parse_default+0xe0>
					gps_data->num_sats = str2int(nmea+data_i[6],10);
80003a3e:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003a42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003a46:	f2 08 00 08 	add	r8,r9,r8
80003a4a:	30 ab       	mov	r11,10
80003a4c:	10 9c       	mov	r12,r8
80003a4e:	f0 1f 00 fb 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003a52:	18 98       	mov	r8,r12
80003a54:	5c 58       	castu.b	r8
80003a56:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003a5a:	f3 68 00 31 	st.b	r9[49],r8
80003a5e:	c0 68       	rjmp	80003a6a <uc530_parse_default+0xea>
				}
				else
					gps_data->valid = 0;
80003a60:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003a64:	30 09       	mov	r9,0
80003a66:	f1 49 00 40 	st.w	r8[64],r9
					
				// Altitude
				if(data_i[8] != -1){
80003a6a:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003a6e:	5b f8       	cp.w	r8,-1
80003a70:	c1 00       	breq	80003a90 <uc530_parse_default+0x110>
					gps_data->alt = str2float(nmea+data_i[8]);
80003a72:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003a76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003a7a:	f2 08 00 08 	add	r8,r9,r8
80003a7e:	10 9c       	mov	r12,r8
80003a80:	f0 1f 00 ef 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003a84:	18 99       	mov	r9,r12
80003a86:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003a8a:	91 99       	st.w	r8[0x24],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80003a8c:	e0 8f 01 af 	bral	80003dea <uc530_parse_default+0x46a>
				// Altitude
				if(data_i[8] != -1){
					gps_data->alt = str2float(nmea+data_i[8]);
				}
				else
					gps_data->valid = 0;
80003a90:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003a94:	30 09       	mov	r9,0
80003a96:	f1 49 00 40 	st.w	r8[64],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80003a9a:	e0 8f 01 a8 	bral	80003dea <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
80003a9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003aa2:	11 89       	ld.ub	r9,r8[0x0]
80003aa4:	35 28       	mov	r8,82
80003aa6:	f0 09 18 00 	cp.b	r9,r8
80003aaa:	e0 81 01 2d 	brne	80003d04 <uc530_parse_default+0x384>
80003aae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ab2:	2f f8       	sub	r8,-1
80003ab4:	11 89       	ld.ub	r9,r8[0x0]
80003ab6:	34 d8       	mov	r8,77
80003ab8:	f0 09 18 00 	cp.b	r9,r8
80003abc:	e0 81 01 24 	brne	80003d04 <uc530_parse_default+0x384>
80003ac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ac4:	2f e8       	sub	r8,-2
80003ac6:	11 89       	ld.ub	r9,r8[0x0]
80003ac8:	34 38       	mov	r8,67
80003aca:	f0 09 18 00 	cp.b	r9,r8
80003ace:	e0 81 01 1b 	brne	80003d04 <uc530_parse_default+0x384>
				// Time
				if(data_i[0] != -1){
80003ad2:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003ad6:	5b f8       	cp.w	r8,-1
80003ad8:	c2 f0       	breq	80003b36 <uc530_parse_default+0x1b6>
					// Hours
					gps_data->hour = str2int(nmea+data_i[0], 2);
80003ada:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003ade:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ae2:	f2 08 00 08 	add	r8,r9,r8
80003ae6:	30 2b       	mov	r11,2
80003ae8:	10 9c       	mov	r12,r8
80003aea:	f0 1f 00 d4 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003aee:	18 98       	mov	r8,r12
80003af0:	5c 58       	castu.b	r8
80003af2:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003af6:	b2 b8       	st.b	r9[0x3],r8
					
					// Minutes
					gps_data->minute = str2int(nmea+data_i[0]+2, 2);
80003af8:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003afc:	2f e8       	sub	r8,-2
80003afe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b02:	f2 08 00 08 	add	r8,r9,r8
80003b06:	30 2b       	mov	r11,2
80003b08:	10 9c       	mov	r12,r8
80003b0a:	f0 1f 00 cc 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003b0e:	18 98       	mov	r8,r12
80003b10:	5c 58       	castu.b	r8
80003b12:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003b16:	b2 c8       	st.b	r9[0x4],r8
					
					// Seconds
					gps_data->second = str2float(nmea+data_i[0]+4);
80003b18:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003b1c:	2f c8       	sub	r8,-4
80003b1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b22:	f2 08 00 08 	add	r8,r9,r8
80003b26:	10 9c       	mov	r12,r8
80003b28:	f0 1f 00 c5 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003b2c:	18 99       	mov	r9,r12
80003b2e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003b32:	91 29       	st.w	r8[0x8],r9
80003b34:	c0 68       	rjmp	80003b40 <uc530_parse_default+0x1c0>
				}
				else
					gps_data->valid = 0;
80003b36:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003b3a:	30 09       	mov	r9,0
80003b3c:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude
				if(data_i[2] != -1){
80003b40:	ee f8 ff 38 	ld.w	r8,r7[-200]
80003b44:	5b f8       	cp.w	r8,-1
80003b46:	c2 00       	breq	80003b86 <uc530_parse_default+0x206>
					// Degrees
					gps_data->lat.deg = str2int(nmea+data_i[2], 2);
80003b48:	ee f8 ff 38 	ld.w	r8,r7[-200]
80003b4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b50:	f2 08 00 08 	add	r8,r9,r8
80003b54:	30 2b       	mov	r11,2
80003b56:	10 9c       	mov	r12,r8
80003b58:	f0 1f 00 b8 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003b5c:	18 98       	mov	r8,r12
80003b5e:	5c 58       	castu.b	r8
80003b60:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003b64:	f3 68 00 0c 	st.b	r9[12],r8
					
					// Minutes
					gps_data->lat.min = str2float(nmea+data_i[2]+2);
80003b68:	ee f8 ff 38 	ld.w	r8,r7[-200]
80003b6c:	2f e8       	sub	r8,-2
80003b6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b72:	f2 08 00 08 	add	r8,r9,r8
80003b76:	10 9c       	mov	r12,r8
80003b78:	f0 1f 00 b1 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003b7c:	18 99       	mov	r9,r12
80003b7e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003b82:	91 49       	st.w	r8[0x10],r9
80003b84:	c0 68       	rjmp	80003b90 <uc530_parse_default+0x210>
				}
				else
					gps_data->valid = 0;
80003b86:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003b8a:	30 09       	mov	r9,0
80003b8c:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude Hemi
				if(data_i[3] != -1){
80003b90:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80003b94:	5b f8       	cp.w	r8,-1
80003b96:	c0 d0       	breq	80003bb0 <uc530_parse_default+0x230>
					gps_data->lat.hemi = *(nmea+data_i[3]);
80003b98:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80003b9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ba0:	f2 08 00 08 	add	r8,r9,r8
80003ba4:	11 88       	ld.ub	r8,r8[0x0]
80003ba6:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003baa:	f3 68 00 14 	st.b	r9[20],r8
80003bae:	c0 68       	rjmp	80003bba <uc530_parse_default+0x23a>
				}
				else
					gps_data->valid = 0;
80003bb0:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003bb4:	30 09       	mov	r9,0
80003bb6:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude
				if(data_i[4] != -1){
80003bba:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003bbe:	5b f8       	cp.w	r8,-1
80003bc0:	c2 00       	breq	80003c00 <uc530_parse_default+0x280>
					// Degrees
					gps_data->longi.deg = str2int(nmea+data_i[4], 3);
80003bc2:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003bc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003bca:	f2 08 00 08 	add	r8,r9,r8
80003bce:	30 3b       	mov	r11,3
80003bd0:	10 9c       	mov	r12,r8
80003bd2:	f0 1f 00 9a 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003bd6:	18 98       	mov	r8,r12
80003bd8:	5c 58       	castu.b	r8
80003bda:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003bde:	f3 68 00 18 	st.b	r9[24],r8
					
					// Minutes
					gps_data->longi.min = str2float(nmea+data_i[4]+3);
80003be2:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003be6:	2f d8       	sub	r8,-3
80003be8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003bec:	f2 08 00 08 	add	r8,r9,r8
80003bf0:	10 9c       	mov	r12,r8
80003bf2:	f0 1f 00 93 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003bf6:	18 99       	mov	r9,r12
80003bf8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003bfc:	91 79       	st.w	r8[0x1c],r9
80003bfe:	c0 68       	rjmp	80003c0a <uc530_parse_default+0x28a>
				}
				else
					gps_data->valid = 0;
80003c00:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c04:	30 09       	mov	r9,0
80003c06:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude Hemi
				if(data_i[5] != -1){
80003c0a:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003c0e:	5b f8       	cp.w	r8,-1
80003c10:	c0 d0       	breq	80003c2a <uc530_parse_default+0x2aa>
					gps_data->longi.hemi = *(nmea+data_i[5]);
80003c12:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003c16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c1a:	f2 08 00 08 	add	r8,r9,r8
80003c1e:	11 88       	ld.ub	r8,r8[0x0]
80003c20:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003c24:	f3 68 00 20 	st.b	r9[32],r8
80003c28:	c0 68       	rjmp	80003c34 <uc530_parse_default+0x2b4>
				}
				else
					gps_data->valid = 0;
80003c2a:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c2e:	30 09       	mov	r9,0
80003c30:	f1 49 00 40 	st.w	r8[64],r9
					
				// Speed
				if(data_i[6] != -1){
80003c34:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003c38:	5b f8       	cp.w	r8,-1
80003c3a:	c0 f0       	breq	80003c58 <uc530_parse_default+0x2d8>
					gps_data->spd = str2float(nmea+data_i[6]);
80003c3c:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003c40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c44:	f2 08 00 08 	add	r8,r9,r8
80003c48:	10 9c       	mov	r12,r8
80003c4a:	f0 1f 00 7d 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003c4e:	18 99       	mov	r9,r12
80003c50:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c54:	91 a9       	st.w	r8[0x28],r9
80003c56:	c0 68       	rjmp	80003c62 <uc530_parse_default+0x2e2>
				}
				else
					gps_data->valid = 0;
80003c58:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c5c:	30 09       	mov	r9,0
80003c5e:	f1 49 00 40 	st.w	r8[64],r9
					
				// Heading
				if(data_i[7] != -1){
80003c62:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80003c66:	5b f8       	cp.w	r8,-1
80003c68:	c0 f0       	breq	80003c86 <uc530_parse_default+0x306>
					gps_data->hdg = str2float(nmea+data_i[7]);
80003c6a:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80003c6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c72:	f2 08 00 08 	add	r8,r9,r8
80003c76:	10 9c       	mov	r12,r8
80003c78:	f0 1f 00 71 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003c7c:	18 99       	mov	r9,r12
80003c7e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c82:	91 b9       	st.w	r8[0x2c],r9
80003c84:	c0 68       	rjmp	80003c90 <uc530_parse_default+0x310>
				}
				else
					gps_data->valid = 0;
80003c86:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c8a:	30 09       	mov	r9,0
80003c8c:	f1 49 00 40 	st.w	r8[64],r9
					
				// Date
				if(data_i[8] != -1){
80003c90:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003c94:	5b f8       	cp.w	r8,-1
80003c96:	c3 10       	breq	80003cf8 <uc530_parse_default+0x378>
					// Day
					gps_data->day = str2int(nmea+data_i[8], 2);
80003c98:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003c9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ca0:	f2 08 00 08 	add	r8,r9,r8
80003ca4:	30 2b       	mov	r11,2
80003ca6:	10 9c       	mov	r12,r8
80003ca8:	f0 1f 00 64 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003cac:	18 98       	mov	r8,r12
80003cae:	5c 58       	castu.b	r8
80003cb0:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003cb4:	b2 a8       	st.b	r9[0x2],r8
					
					// Month
					gps_data->month = str2int(nmea+data_i[8]+2, 2);
80003cb6:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003cba:	2f e8       	sub	r8,-2
80003cbc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003cc0:	f2 08 00 08 	add	r8,r9,r8
80003cc4:	30 2b       	mov	r11,2
80003cc6:	10 9c       	mov	r12,r8
80003cc8:	f0 1f 00 5c 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003ccc:	18 98       	mov	r8,r12
80003cce:	5c 58       	castu.b	r8
80003cd0:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003cd4:	b2 98       	st.b	r9[0x1],r8
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
80003cd6:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003cda:	2f c8       	sub	r8,-4
80003cdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ce0:	f2 08 00 08 	add	r8,r9,r8
80003ce4:	30 ab       	mov	r11,10
80003ce6:	10 9c       	mov	r12,r8
80003ce8:	f0 1f 00 54 	mcall	80003e38 <uc530_parse_default+0x4b8>
80003cec:	18 98       	mov	r8,r12
80003cee:	5c 58       	castu.b	r8
80003cf0:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003cf4:	b2 88       	st.b	r9[0x0],r8
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
80003cf6:	c7 a8       	rjmp	80003dea <uc530_parse_default+0x46a>
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
				}
				else
					gps_data->valid = 0;
80003cf8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003cfc:	30 09       	mov	r9,0
80003cfe:	f1 49 00 40 	st.w	r8[64],r9
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
80003d02:	c7 48       	rjmp	80003dea <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//GSV
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='V')){
80003d04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d08:	11 89       	ld.ub	r9,r8[0x0]
80003d0a:	34 78       	mov	r8,71
80003d0c:	f0 09 18 00 	cp.b	r9,r8
80003d10:	c1 11       	brne	80003d32 <uc530_parse_default+0x3b2>
80003d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d16:	2f f8       	sub	r8,-1
80003d18:	11 89       	ld.ub	r9,r8[0x0]
80003d1a:	35 38       	mov	r8,83
80003d1c:	f0 09 18 00 	cp.b	r9,r8
80003d20:	c0 91       	brne	80003d32 <uc530_parse_default+0x3b2>
80003d22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d26:	2f e8       	sub	r8,-2
80003d28:	11 89       	ld.ub	r9,r8[0x0]
80003d2a:	35 68       	mov	r8,86
80003d2c:	f0 09 18 00 	cp.b	r9,r8
80003d30:	c5 d0       	breq	80003dea <uc530_parse_default+0x46a>
				
			}
			//GSA
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='A')){
80003d32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d36:	11 89       	ld.ub	r9,r8[0x0]
80003d38:	34 78       	mov	r8,71
80003d3a:	f0 09 18 00 	cp.b	r9,r8
80003d3e:	c5 61       	brne	80003dea <uc530_parse_default+0x46a>
80003d40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d44:	2f f8       	sub	r8,-1
80003d46:	11 89       	ld.ub	r9,r8[0x0]
80003d48:	35 38       	mov	r8,83
80003d4a:	f0 09 18 00 	cp.b	r9,r8
80003d4e:	c4 e1       	brne	80003dea <uc530_parse_default+0x46a>
80003d50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d54:	2f e8       	sub	r8,-2
80003d56:	11 89       	ld.ub	r9,r8[0x0]
80003d58:	34 18       	mov	r8,65
80003d5a:	f0 09 18 00 	cp.b	r9,r8
80003d5e:	c4 61       	brne	80003dea <uc530_parse_default+0x46a>
				// PDOP
				if(data_i[14] != -1){
80003d60:	ee f8 ff 68 	ld.w	r8,r7[-152]
80003d64:	5b f8       	cp.w	r8,-1
80003d66:	c0 f0       	breq	80003d84 <uc530_parse_default+0x404>
					gps_data->pdop = str2float(nmea+data_i[14]);
80003d68:	ee f8 ff 68 	ld.w	r8,r7[-152]
80003d6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d70:	f2 08 00 08 	add	r8,r9,r8
80003d74:	10 9c       	mov	r12,r8
80003d76:	f0 1f 00 32 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003d7a:	18 99       	mov	r9,r12
80003d7c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003d80:	91 d9       	st.w	r8[0x34],r9
80003d82:	c0 68       	rjmp	80003d8e <uc530_parse_default+0x40e>
				}
				else
					gps_data->valid = 0;
80003d84:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003d88:	30 09       	mov	r9,0
80003d8a:	f1 49 00 40 	st.w	r8[64],r9
					
				// HDOP
				if(data_i[15] != -1){
80003d8e:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80003d92:	5b f8       	cp.w	r8,-1
80003d94:	c0 f0       	breq	80003db2 <uc530_parse_default+0x432>
					gps_data->hdop = str2float(nmea+data_i[15]);
80003d96:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80003d9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d9e:	f2 08 00 08 	add	r8,r9,r8
80003da2:	10 9c       	mov	r12,r8
80003da4:	f0 1f 00 26 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003da8:	18 99       	mov	r9,r12
80003daa:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003dae:	91 e9       	st.w	r8[0x38],r9
80003db0:	c0 68       	rjmp	80003dbc <uc530_parse_default+0x43c>
				}
				else
					gps_data->valid = 0;
80003db2:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003db6:	30 09       	mov	r9,0
80003db8:	f1 49 00 40 	st.w	r8[64],r9
					
				// VDOP
				if(data_i[16] != -1){
80003dbc:	ee f8 ff 70 	ld.w	r8,r7[-144]
80003dc0:	5b f8       	cp.w	r8,-1
80003dc2:	c0 f0       	breq	80003de0 <uc530_parse_default+0x460>
					gps_data->vdop = str2float(nmea+data_i[16]);
80003dc4:	ee f8 ff 70 	ld.w	r8,r7[-144]
80003dc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003dcc:	f2 08 00 08 	add	r8,r9,r8
80003dd0:	10 9c       	mov	r12,r8
80003dd2:	f0 1f 00 1b 	mcall	80003e3c <uc530_parse_default+0x4bc>
80003dd6:	18 99       	mov	r9,r12
80003dd8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003ddc:	91 f9       	st.w	r8[0x3c],r9
80003dde:	c0 68       	rjmp	80003dea <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
80003de0:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003de4:	30 09       	mov	r9,0
80003de6:	f1 49 00 40 	st.w	r8[64],r9
			}
			
			found_start = 0;
80003dea:	30 08       	mov	r8,0
80003dec:	ef 48 ff fc 	st.w	r7[-4],r8
80003df0:	c0 b8       	rjmp	80003e06 <uc530_parse_default+0x486>
		}
		else if(*nmea == '$')
80003df2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003df6:	11 89       	ld.ub	r9,r8[0x0]
80003df8:	32 48       	mov	r8,36
80003dfa:	f0 09 18 00 	cp.b	r9,r8
80003dfe:	c0 41       	brne	80003e06 <uc530_parse_default+0x486>
			found_start = 1;
80003e00:	30 18       	mov	r8,1
80003e02:	ef 48 ff fc 	st.w	r7[-4],r8
		
		// Increment to next character
		nmea++;
80003e06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e0a:	2f f8       	sub	r8,-1
80003e0c:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
80003e10:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e14:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80003e18:	f2 08 01 08 	sub	r8,r9,r8
80003e1c:	10 99       	mov	r9,r8
80003e1e:	ee f8 ff 28 	ld.w	r8,r7[-216]
80003e22:	10 39       	cp.w	r9,r8
80003e24:	fe 93 fd c2 	brlo	800039a8 <uc530_parse_default+0x28>
		
		// Increment to next character
		nmea++;
	}
	
	return UC530_SUCCESS;
80003e28:	30 18       	mov	r8,1
}
80003e2a:	10 9c       	mov	r12,r8
80003e2c:	2c 9d       	sub	sp,-220
80003e2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e32:	00 00       	add	r0,r0
80003e34:	80 00       	ld.sh	r0,r0[0x0]
80003e36:	3e 40       	mov	r0,-28
80003e38:	80 00       	ld.sh	r0,r0[0x0]
80003e3a:	37 a4       	mov	r4,122
80003e3c:	80 00       	ld.sh	r0,r0[0x0]
80003e3e:	38 34       	mov	r4,-125

80003e40 <find_data>:

// Finds indices of data fields between commas
// will list up to 50 indices or scan 200 characters
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
80003e40:	eb cd 40 80 	pushm	r7,lr
80003e44:	1a 97       	mov	r7,sp
80003e46:	20 4d       	sub	sp,16
80003e48:	ef 4c ff f4 	st.w	r7[-12],r12
80003e4c:	ef 4b ff f0 	st.w	r7[-16],r11
	unsigned int str_cnt = 0;
80003e50:	30 08       	mov	r8,0
80003e52:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int data_cnt = 0;
80003e56:	30 08       	mov	r8,0
80003e58:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while((str_cnt < 200) && (data_cnt < 50)){
80003e5c:	c4 68       	rjmp	80003ee8 <find_data+0xa8>
		if(str[str_cnt] == ','){
80003e5e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e66:	f2 08 00 08 	add	r8,r9,r8
80003e6a:	11 89       	ld.ub	r9,r8[0x0]
80003e6c:	32 c8       	mov	r8,44
80003e6e:	f0 09 18 00 	cp.b	r9,r8
80003e72:	c2 b1       	brne	80003ec8 <find_data+0x88>
			str_cnt++;
80003e74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e78:	2f f8       	sub	r8,-1
80003e7a:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// No Data
			if(str[str_cnt] == ',')
80003e7e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e86:	f2 08 00 08 	add	r8,r9,r8
80003e8a:	11 89       	ld.ub	r9,r8[0x0]
80003e8c:	32 c8       	mov	r8,44
80003e8e:	f0 09 18 00 	cp.b	r9,r8
80003e92:	c0 b1       	brne	80003ea8 <find_data+0x68>
				data_i[data_cnt] = -1;
80003e94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e98:	a3 68       	lsl	r8,0x2
80003e9a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003e9e:	f2 08 00 08 	add	r8,r9,r8
80003ea2:	3f f9       	mov	r9,-1
80003ea4:	91 09       	st.w	r8[0x0],r9
80003ea6:	c0 b8       	rjmp	80003ebc <find_data+0x7c>
			// Mark index
			else
				data_i[data_cnt] = str_cnt;
80003ea8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003eac:	a3 68       	lsl	r8,0x2
80003eae:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003eb2:	f2 08 00 08 	add	r8,r9,r8
80003eb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003eba:	91 09       	st.w	r8[0x0],r9
				
			data_cnt++;
80003ebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ec0:	2f f8       	sub	r8,-1
80003ec2:	ef 48 ff fc 	st.w	r7[-4],r8
80003ec6:	c1 18       	rjmp	80003ee8 <find_data+0xa8>
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
80003ec8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003ecc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ed0:	f2 08 00 08 	add	r8,r9,r8
80003ed4:	11 89       	ld.ub	r9,r8[0x0]
80003ed6:	30 d8       	mov	r8,13
80003ed8:	f0 09 18 00 	cp.b	r9,r8
80003edc:	c1 30       	breq	80003f02 <find_data+0xc2>
			return;
		
		else
			str_cnt++;
80003ede:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ee2:	2f f8       	sub	r8,-1
80003ee4:	ef 48 ff f8 	st.w	r7[-8],r8
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
	unsigned int str_cnt = 0;
	unsigned int data_cnt = 0;
	
	while((str_cnt < 200) && (data_cnt < 50)){
80003ee8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003eec:	e0 48 00 c7 	cp.w	r8,199
80003ef0:	e0 8b 00 0a 	brhi	80003f04 <find_data+0xc4>
80003ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ef8:	e0 48 00 31 	cp.w	r8,49
80003efc:	fe 98 ff b1 	brls	80003e5e <find_data+0x1e>
80003f00:	c0 28       	rjmp	80003f04 <find_data+0xc4>
			data_cnt++;
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
			return;
80003f02:	d7 03       	nop
		
		else
			str_cnt++;
	}
80003f04:	2f cd       	sub	sp,-16
80003f06:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f0a:	d7 03       	nop

80003f0c <st7529_D07_WRITE>:

// LCD OFFSETS
#define ST7529_XOFFSET	16
#define ST7529_YOFFSET	0

inline static void st7529_D07_WRITE(uint8_t data){
80003f0c:	eb cd 40 80 	pushm	r7,lr
80003f10:	1a 97       	mov	r7,sp
80003f12:	20 1d       	sub	sp,4
80003f14:	18 98       	mov	r8,r12
80003f16:	ef 68 ff fc 	st.b	r7[-4],r8
    // Clear Old Values
    AVR32_GPIO_LOCAL.port[0].ovrc = ST7529_D07_PORTA_PINS;
80003f1a:	fc 18 40 00 	movh	r8,0x4000
80003f1e:	e0 69 17 09 	mov	r9,5897
80003f22:	ea 19 00 40 	orh	r9,0x40
80003f26:	f1 49 00 58 	st.w	r8[88],r9
    AVR32_GPIO_LOCAL.port[1].ovrc = ST7529_D07_PORTB_PINS;
80003f2a:	fc 18 40 00 	movh	r8,0x4000
80003f2e:	e0 69 10 00 	mov	r9,4096
80003f32:	f1 49 01 58 	st.w	r8[344],r9

    // Set Value
    AVR32_GPIO_LOCAL.port[0].ovrs = st7529_pin_map_lut[data].porta;
80003f36:	fc 18 40 00 	movh	r8,0x4000
80003f3a:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80003f3e:	48 a9       	lddpc	r9,80003f64 <st7529_D07_WRITE+0x58>
80003f40:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
80003f44:	f1 49 00 54 	st.w	r8[84],r9
    AVR32_GPIO_LOCAL.port[1].ovrs = st7529_pin_map_lut[data].portb;
80003f48:	fc 18 40 00 	movh	r8,0x4000
80003f4c:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80003f50:	48 59       	lddpc	r9,80003f64 <st7529_D07_WRITE+0x58>
80003f52:	a1 7a       	lsl	r10,0x1
80003f54:	2f fa       	sub	r10,-1
80003f56:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80003f5a:	f1 49 01 54 	st.w	r8[340],r9
}
80003f5e:	2f fd       	sub	sp,-4
80003f60:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	b1 30       	mul	r0,r8

80003f68 <st7529_delay_write>:

/********* HELPER FUNCTIONS ***********/
#define st7529_delay_us(delay)      cpu_delay_us(delay, ST7529_FCPU)
#define st7529_delay_ms(delay)      cpu_delay_ms(delay, ST7529_FCPU)

inline static void st7529_delay_write(void){
80003f68:	eb cd 40 80 	pushm	r7,lr
80003f6c:	1a 97       	mov	r7,sp
	asm volatile("nop");
80003f6e:	d7 03       	nop
	asm volatile("nop");
80003f70:	d7 03       	nop
	asm volatile("nop");
80003f72:	d7 03       	nop
	asm volatile("nop");
80003f74:	d7 03       	nop
}
80003f76:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f7a:	d7 03       	nop

80003f7c <st7529_init>:
static inline void st7529_write_cmd(uint8_t);
static inline void st7529_write_data(uint8_t);
static inline uint8_t st7529_read_data(void);

// Initializes ST7529
void st7529_init(void){
80003f7c:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003f80:	1a 97       	mov	r7,sp
80003f82:	fa cd 00 dc 	sub	sp,sp,220
80003f86:	30 28       	mov	r8,2
80003f88:	ef 48 ff 6c 	st.w	r7[-148],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80003f8c:	fc 1b 40 00 	movh	r11,0x4000
80003f90:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80003f94:	f0 0a 16 05 	lsr	r10,r8,0x5
80003f98:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80003f9c:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003fa0:	30 18       	mov	r8,1
80003fa2:	f0 09 09 48 	lsl	r8,r8,r9
80003fa6:	10 99       	mov	r9,r8
80003fa8:	f4 08 15 08 	lsl	r8,r10,0x8
80003fac:	f6 08 00 08 	add	r8,r11,r8
80003fb0:	2b c8       	sub	r8,-68
80003fb2:	91 09       	st.w	r8[0x0],r9
80003fb4:	30 28       	mov	r8,2
80003fb6:	ef 48 ff 70 	st.w	r7[-144],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80003fba:	fc 1b 40 00 	movh	r11,0x4000
80003fbe:	ee f8 ff 70 	ld.w	r8,r7[-144]
80003fc2:	f0 0a 16 05 	lsr	r10,r8,0x5
80003fc6:	ee f8 ff 70 	ld.w	r8,r7[-144]
80003fca:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003fce:	30 18       	mov	r8,1
80003fd0:	f0 09 09 48 	lsl	r8,r8,r9
80003fd4:	10 99       	mov	r9,r8
80003fd6:	f4 08 15 08 	lsl	r8,r10,0x8
80003fda:	f6 08 00 08 	add	r8,r11,r8
80003fde:	2a 88       	sub	r8,-88
80003fe0:	91 09       	st.w	r8[0x0],r9
80003fe2:	30 18       	mov	r8,1
80003fe4:	ef 48 ff 74 	st.w	r7[-140],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80003fe8:	fc 1b 40 00 	movh	r11,0x4000
80003fec:	ee f8 ff 74 	ld.w	r8,r7[-140]
80003ff0:	f0 0a 16 05 	lsr	r10,r8,0x5
80003ff4:	ee f8 ff 74 	ld.w	r8,r7[-140]
80003ff8:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003ffc:	30 18       	mov	r8,1
80003ffe:	f0 09 09 48 	lsl	r8,r8,r9
80004002:	10 99       	mov	r9,r8
80004004:	f4 08 15 08 	lsl	r8,r10,0x8
80004008:	f6 08 00 08 	add	r8,r11,r8
8000400c:	2b c8       	sub	r8,-68
8000400e:	91 09       	st.w	r8[0x0],r9
80004010:	30 18       	mov	r8,1
80004012:	ef 48 ff 78 	st.w	r7[-136],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004016:	fc 1b 40 00 	movh	r11,0x4000
8000401a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000401e:	f0 0a 16 05 	lsr	r10,r8,0x5
80004022:	ee f8 ff 78 	ld.w	r8,r7[-136]
80004026:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000402a:	30 18       	mov	r8,1
8000402c:	f0 09 09 48 	lsl	r8,r8,r9
80004030:	10 99       	mov	r9,r8
80004032:	f4 08 15 08 	lsl	r8,r10,0x8
80004036:	f6 08 00 08 	add	r8,r11,r8
8000403a:	2a c8       	sub	r8,-84
8000403c:	91 09       	st.w	r8[0x0],r9
8000403e:	31 28       	mov	r8,18
80004040:	ef 48 ff 7c 	st.w	r7[-132],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004044:	fc 1b 40 00 	movh	r11,0x4000
80004048:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000404c:	f0 0a 16 05 	lsr	r10,r8,0x5
80004050:	ee f8 ff 7c 	ld.w	r8,r7[-132]
80004054:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004058:	30 18       	mov	r8,1
8000405a:	f0 09 09 48 	lsl	r8,r8,r9
8000405e:	10 99       	mov	r9,r8
80004060:	f4 08 15 08 	lsl	r8,r10,0x8
80004064:	f6 08 00 08 	add	r8,r11,r8
80004068:	2b c8       	sub	r8,-68
8000406a:	91 09       	st.w	r8[0x0],r9
8000406c:	31 28       	mov	r8,18
8000406e:	ef 48 ff 80 	st.w	r7[-128],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004072:	fc 1b 40 00 	movh	r11,0x4000
80004076:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000407a:	f0 0a 16 05 	lsr	r10,r8,0x5
8000407e:	ee f8 ff 80 	ld.w	r8,r7[-128]
80004082:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004086:	30 18       	mov	r8,1
80004088:	f0 09 09 48 	lsl	r8,r8,r9
8000408c:	10 99       	mov	r9,r8
8000408e:	f4 08 15 08 	lsl	r8,r10,0x8
80004092:	f6 08 00 08 	add	r8,r11,r8
80004096:	2a c8       	sub	r8,-84
80004098:	91 09       	st.w	r8[0x0],r9
8000409a:	30 58       	mov	r8,5
8000409c:	ef 48 ff 84 	st.w	r7[-124],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800040a0:	fc 1b 40 00 	movh	r11,0x4000
800040a4:	ee f8 ff 84 	ld.w	r8,r7[-124]
800040a8:	f0 0a 16 05 	lsr	r10,r8,0x5
800040ac:	ee f8 ff 84 	ld.w	r8,r7[-124]
800040b0:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800040b4:	30 18       	mov	r8,1
800040b6:	f0 09 09 48 	lsl	r8,r8,r9
800040ba:	10 99       	mov	r9,r8
800040bc:	f4 08 15 08 	lsl	r8,r10,0x8
800040c0:	f6 08 00 08 	add	r8,r11,r8
800040c4:	2b c8       	sub	r8,-68
800040c6:	91 09       	st.w	r8[0x0],r9
800040c8:	30 58       	mov	r8,5
800040ca:	ef 48 ff 88 	st.w	r7[-120],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800040ce:	fc 1b 40 00 	movh	r11,0x4000
800040d2:	ee f8 ff 88 	ld.w	r8,r7[-120]
800040d6:	f0 0a 16 05 	lsr	r10,r8,0x5
800040da:	ee f8 ff 88 	ld.w	r8,r7[-120]
800040de:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800040e2:	30 18       	mov	r8,1
800040e4:	f0 09 09 48 	lsl	r8,r8,r9
800040e8:	10 99       	mov	r9,r8
800040ea:	f4 08 15 08 	lsl	r8,r10,0x8
800040ee:	f6 08 00 08 	add	r8,r11,r8
800040f2:	2a c8       	sub	r8,-84
800040f4:	91 09       	st.w	r8[0x0],r9
800040f6:	32 b8       	mov	r8,43
800040f8:	ef 48 ff 8c 	st.w	r7[-116],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800040fc:	fc 1b 40 00 	movh	r11,0x4000
80004100:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004104:	f0 0a 16 05 	lsr	r10,r8,0x5
80004108:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000410c:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004110:	30 18       	mov	r8,1
80004112:	f0 09 09 48 	lsl	r8,r8,r9
80004116:	10 99       	mov	r9,r8
80004118:	f4 08 15 08 	lsl	r8,r10,0x8
8000411c:	f6 08 00 08 	add	r8,r11,r8
80004120:	2b c8       	sub	r8,-68
80004122:	91 09       	st.w	r8[0x0],r9
80004124:	32 b8       	mov	r8,43
80004126:	ef 48 ff 90 	st.w	r7[-112],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000412a:	fc 1b 40 00 	movh	r11,0x4000
8000412e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80004132:	f0 0a 16 05 	lsr	r10,r8,0x5
80004136:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000413a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000413e:	30 18       	mov	r8,1
80004140:	f0 09 09 48 	lsl	r8,r8,r9
80004144:	10 99       	mov	r9,r8
80004146:	f4 08 15 08 	lsl	r8,r10,0x8
8000414a:	f6 08 00 08 	add	r8,r11,r8
8000414e:	2a c8       	sub	r8,-84
80004150:	91 09       	st.w	r8[0x0],r9
    st7529_RD_DIR_OUT();
    st7529_RD_SET();
    st7529_WR_DIR_OUT();
    st7529_WR_SET();

    st7529_D07_DIR_OUT();   // Idles as output
80004152:	fc 18 40 00 	movh	r8,0x4000
80004156:	e0 69 17 09 	mov	r9,5897
8000415a:	ea 19 00 40 	orh	r9,0x40
8000415e:	f1 49 00 44 	st.w	r8[68],r9
80004162:	fc 18 40 00 	movh	r8,0x4000
80004166:	e0 69 10 00 	mov	r9,4096
8000416a:	f1 49 01 44 	st.w	r8[324],r9
8000416e:	30 18       	mov	r8,1
80004170:	ef 48 ff 94 	st.w	r7[-108],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004174:	fc 1b 40 00 	movh	r11,0x4000
80004178:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000417c:	f0 0a 16 05 	lsr	r10,r8,0x5
80004180:	ee f8 ff 94 	ld.w	r8,r7[-108]
80004184:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004188:	30 18       	mov	r8,1
8000418a:	f0 09 09 48 	lsl	r8,r8,r9
8000418e:	10 99       	mov	r9,r8
80004190:	f4 08 15 08 	lsl	r8,r10,0x8
80004194:	f6 08 00 08 	add	r8,r11,r8
80004198:	2a 88       	sub	r8,-88
8000419a:	91 09       	st.w	r8[0x0],r9
8000419c:	30 18       	mov	r8,1
8000419e:	ef 48 ff 9c 	st.w	r7[-100],r8
800041a2:	e0 68 78 40 	mov	r8,30784
800041a6:	ea 18 01 7d 	orh	r8,0x17d
800041aa:	ef 48 ff 98 	st.w	r7[-104],r8
800041ae:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800041b2:	ef 48 ff a4 	st.w	r7[-92],r8
800041b6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800041ba:	ef 48 ff a0 	st.w	r7[-96],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800041be:	ee fc ff a4 	ld.w	r12,r7[-92]
800041c2:	ef 4c ff 30 	st.w	r7[-208],r12
800041c6:	30 0b       	mov	r11,0
800041c8:	ef 4b ff 2c 	st.w	r7[-212],r11
800041cc:	ee f9 ff a0 	ld.w	r9,r7[-96]
800041d0:	ef 49 ff 28 	st.w	r7[-216],r9
800041d4:	30 08       	mov	r8,0
800041d6:	ef 48 ff 24 	st.w	r7[-220],r8
800041da:	ee fa ff 2c 	ld.w	r10,r7[-212]
800041de:	ee fc ff 28 	ld.w	r12,r7[-216]
800041e2:	b9 3a       	mul	r10,r12
800041e4:	ee f8 ff 24 	ld.w	r8,r7[-220]
800041e8:	ee fb ff 30 	ld.w	r11,r7[-208]
800041ec:	b7 38       	mul	r8,r11
800041ee:	10 0a       	add	r10,r8
800041f0:	ee fc ff 30 	ld.w	r12,r7[-208]
800041f4:	ee fb ff 28 	ld.w	r11,r7[-216]
800041f8:	f8 0b 06 48 	mulu.d	r8,r12,r11
800041fc:	12 0a       	add	r10,r9
800041fe:	14 99       	mov	r9,r10
80004200:	e0 6a 03 e7 	mov	r10,999
80004204:	30 0b       	mov	r11,0
80004206:	f0 0a 00 0a 	add	r10,r8,r10
8000420a:	f2 0b 00 4b 	adc	r11,r9,r11
8000420e:	e0 68 03 e8 	mov	r8,1000
80004212:	30 09       	mov	r9,0
80004214:	f0 1f 01 3a 	mcall	800046fc <st7529_init+0x780>
80004218:	14 98       	mov	r8,r10
8000421a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000421c:	ef 48 ff ac 	st.w	r7[-84],r8
80004220:	ee c8 00 bc 	sub	r8,r7,188
80004224:	ef 48 ff a8 	st.w	r7[-88],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004228:	e1 b8 00 42 	mfsr	r8,0x108
8000422c:	10 99       	mov	r9,r8
8000422e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004232:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004234:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004238:	70 09       	ld.w	r9,r8[0x0]
8000423a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000423e:	10 09       	add	r9,r8
80004240:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004244:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004246:	ee f9 ff a8 	ld.w	r9,r7[-88]
8000424a:	30 08       	mov	r8,0
8000424c:	f3 68 00 08 	st.b	r9[8],r8
80004250:	ee c8 00 bc 	sub	r8,r7,188
80004254:	ef 48 ff b0 	st.w	r7[-80],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004258:	e1 b8 00 42 	mfsr	r8,0x108
8000425c:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004260:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004264:	f1 39 00 08 	ld.ub	r9,r8[8]
80004268:	30 28       	mov	r8,2
8000426a:	f0 09 18 00 	cp.b	r9,r8
8000426e:	c0 31       	brne	80004274 <st7529_init+0x2f8>
    return false;
80004270:	30 08       	mov	r8,0
80004272:	c4 38       	rjmp	800042f8 <st7529_init+0x37c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004274:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004278:	f1 39 00 08 	ld.ub	r9,r8[8]
8000427c:	30 18       	mov	r8,1
8000427e:	f0 09 18 00 	cp.b	r9,r8
80004282:	c0 31       	brne	80004288 <st7529_init+0x30c>
    return true;
80004284:	30 18       	mov	r8,1
80004286:	c3 98       	rjmp	800042f8 <st7529_init+0x37c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004288:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000428c:	70 09       	ld.w	r9,r8[0x0]
8000428e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004292:	70 18       	ld.w	r8,r8[0x4]
80004294:	10 39       	cp.w	r9,r8
80004296:	e0 88 00 1a 	brls	800042ca <st7529_init+0x34e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000429a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000429e:	70 08       	ld.w	r8,r8[0x0]
800042a0:	ee f9 ff b4 	ld.w	r9,r7[-76]
800042a4:	10 39       	cp.w	r9,r8
800042a6:	c1 02       	brcc	800042c6 <st7529_init+0x34a>
800042a8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800042ac:	70 18       	ld.w	r8,r8[0x4]
800042ae:	ee f9 ff b4 	ld.w	r9,r7[-76]
800042b2:	10 39       	cp.w	r9,r8
800042b4:	e0 88 00 09 	brls	800042c6 <st7529_init+0x34a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800042b8:	ee f9 ff b0 	ld.w	r9,r7[-80]
800042bc:	30 18       	mov	r8,1
800042be:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800042c2:	30 18       	mov	r8,1
800042c4:	c1 a8       	rjmp	800042f8 <st7529_init+0x37c>
    }
    return false;
800042c6:	30 08       	mov	r8,0
800042c8:	c1 88       	rjmp	800042f8 <st7529_init+0x37c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800042ca:	ee f8 ff b0 	ld.w	r8,r7[-80]
800042ce:	70 08       	ld.w	r8,r8[0x0]
800042d0:	ee f9 ff b4 	ld.w	r9,r7[-76]
800042d4:	10 39       	cp.w	r9,r8
800042d6:	c0 93       	brcs	800042e8 <st7529_init+0x36c>
800042d8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800042dc:	70 18       	ld.w	r8,r8[0x4]
800042de:	ee f9 ff b4 	ld.w	r9,r7[-76]
800042e2:	10 39       	cp.w	r9,r8
800042e4:	e0 88 00 09 	brls	800042f6 <st7529_init+0x37a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800042e8:	ee f9 ff b0 	ld.w	r9,r7[-80]
800042ec:	30 18       	mov	r8,1
800042ee:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800042f2:	30 18       	mov	r8,1
800042f4:	c0 28       	rjmp	800042f8 <st7529_init+0x37c>
    }
    return false;
800042f6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800042f8:	58 08       	cp.w	r8,0
800042fa:	ca b0       	breq	80004250 <st7529_init+0x2d4>
800042fc:	30 28       	mov	r8,2
800042fe:	ef 48 ff b8 	st.w	r7[-72],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004302:	fc 1a 40 00 	movh	r10,0x4000
80004306:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000430a:	a5 98       	lsr	r8,0x5
8000430c:	ee f9 ff b8 	ld.w	r9,r7[-72]
80004310:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004314:	30 1b       	mov	r11,1
80004316:	f6 09 09 49 	lsl	r9,r11,r9
8000431a:	a9 68       	lsl	r8,0x8
8000431c:	f4 08 00 08 	add	r8,r10,r8
80004320:	2a c8       	sub	r8,-84
80004322:	91 09       	st.w	r8[0x0],r9
80004324:	30 a8       	mov	r8,10
80004326:	ef 48 ff c0 	st.w	r7[-64],r8
8000432a:	e0 68 78 40 	mov	r8,30784
8000432e:	ea 18 01 7d 	orh	r8,0x17d
80004332:	ef 48 ff bc 	st.w	r7[-68],r8
80004336:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000433a:	ef 48 ff c8 	st.w	r7[-56],r8
8000433e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80004342:	ef 48 ff c4 	st.w	r7[-60],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004346:	ee f9 ff c8 	ld.w	r9,r7[-56]
8000434a:	ef 49 ff 40 	st.w	r7[-192],r9
8000434e:	30 08       	mov	r8,0
80004350:	ef 48 ff 3c 	st.w	r7[-196],r8
80004354:	ee fc ff c4 	ld.w	r12,r7[-60]
80004358:	ef 4c ff 38 	st.w	r7[-200],r12
8000435c:	30 0b       	mov	r11,0
8000435e:	ef 4b ff 34 	st.w	r7[-204],r11
80004362:	ee fa ff 3c 	ld.w	r10,r7[-196]
80004366:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000436a:	b3 3a       	mul	r10,r9
8000436c:	ee f8 ff 34 	ld.w	r8,r7[-204]
80004370:	ee fc ff 40 	ld.w	r12,r7[-192]
80004374:	b9 38       	mul	r8,r12
80004376:	10 0a       	add	r10,r8
80004378:	ee fb ff 40 	ld.w	r11,r7[-192]
8000437c:	ee fc ff 38 	ld.w	r12,r7[-200]
80004380:	f6 0c 06 48 	mulu.d	r8,r11,r12
80004384:	12 0a       	add	r10,r9
80004386:	14 99       	mov	r9,r10
80004388:	e0 6a 03 e7 	mov	r10,999
8000438c:	30 0b       	mov	r11,0
8000438e:	f0 0a 00 0a 	add	r10,r8,r10
80004392:	f2 0b 00 4b 	adc	r11,r9,r11
80004396:	e0 68 03 e8 	mov	r8,1000
8000439a:	30 09       	mov	r9,0
8000439c:	f0 1f 00 d8 	mcall	800046fc <st7529_init+0x780>
800043a0:	14 98       	mov	r8,r10
800043a2:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800043a4:	ef 48 ff d0 	st.w	r7[-48],r8
800043a8:	ee c8 00 b0 	sub	r8,r7,176
800043ac:	ef 48 ff cc 	st.w	r7[-52],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800043b0:	e1 b8 00 42 	mfsr	r8,0x108
800043b4:	10 99       	mov	r9,r8
800043b6:	ee f8 ff cc 	ld.w	r8,r7[-52]
800043ba:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800043bc:	ee f8 ff cc 	ld.w	r8,r7[-52]
800043c0:	70 09       	ld.w	r9,r8[0x0]
800043c2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800043c6:	10 09       	add	r9,r8
800043c8:	ee f8 ff cc 	ld.w	r8,r7[-52]
800043cc:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800043ce:	ee f9 ff cc 	ld.w	r9,r7[-52]
800043d2:	30 08       	mov	r8,0
800043d4:	f3 68 00 08 	st.b	r9[8],r8
800043d8:	ee c8 00 b0 	sub	r8,r7,176
800043dc:	ef 48 ff d4 	st.w	r7[-44],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800043e0:	e1 b8 00 42 	mfsr	r8,0x108
800043e4:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800043e8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800043ec:	f1 39 00 08 	ld.ub	r9,r8[8]
800043f0:	30 28       	mov	r8,2
800043f2:	f0 09 18 00 	cp.b	r9,r8
800043f6:	c0 31       	brne	800043fc <st7529_init+0x480>
    return false;
800043f8:	30 08       	mov	r8,0
800043fa:	c4 38       	rjmp	80004480 <st7529_init+0x504>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800043fc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004400:	f1 39 00 08 	ld.ub	r9,r8[8]
80004404:	30 18       	mov	r8,1
80004406:	f0 09 18 00 	cp.b	r9,r8
8000440a:	c0 31       	brne	80004410 <st7529_init+0x494>
    return true;
8000440c:	30 18       	mov	r8,1
8000440e:	c3 98       	rjmp	80004480 <st7529_init+0x504>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004410:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004414:	70 09       	ld.w	r9,r8[0x0]
80004416:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000441a:	70 18       	ld.w	r8,r8[0x4]
8000441c:	10 39       	cp.w	r9,r8
8000441e:	e0 88 00 1a 	brls	80004452 <st7529_init+0x4d6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004422:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004426:	70 08       	ld.w	r8,r8[0x0]
80004428:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000442c:	10 39       	cp.w	r9,r8
8000442e:	c1 02       	brcc	8000444e <st7529_init+0x4d2>
80004430:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004434:	70 18       	ld.w	r8,r8[0x4]
80004436:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000443a:	10 39       	cp.w	r9,r8
8000443c:	e0 88 00 09 	brls	8000444e <st7529_init+0x4d2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004440:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004444:	30 18       	mov	r8,1
80004446:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000444a:	30 18       	mov	r8,1
8000444c:	c1 a8       	rjmp	80004480 <st7529_init+0x504>
    }
    return false;
8000444e:	30 08       	mov	r8,0
80004450:	c1 88       	rjmp	80004480 <st7529_init+0x504>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004452:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004456:	70 08       	ld.w	r8,r8[0x0]
80004458:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000445c:	10 39       	cp.w	r9,r8
8000445e:	c0 93       	brcs	80004470 <st7529_init+0x4f4>
80004460:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004464:	70 18       	ld.w	r8,r8[0x4]
80004466:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000446a:	10 39       	cp.w	r9,r8
8000446c:	e0 88 00 09 	brls	8000447e <st7529_init+0x502>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004470:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004474:	30 18       	mov	r8,1
80004476:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000447a:	30 18       	mov	r8,1
8000447c:	c0 28       	rjmp	80004480 <st7529_init+0x504>
    }
    return false;
8000447e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004480:	58 08       	cp.w	r8,0
80004482:	ca b0       	breq	800043d8 <st7529_init+0x45c>
	st7529_delay_ms(1);
	
    st7529_RST_SET();       // Release reset
	st7529_delay_ms(10);
	
    st7529_write_cmd(ST7529_EXTIN);
80004484:	33 0c       	mov	r12,48
80004486:	f0 1f 00 9f 	mcall	80004700 <st7529_init+0x784>
    st7529_write_cmd(ST7529_SLPOUT);
8000448a:	e0 6c 00 94 	mov	r12,148
8000448e:	f0 1f 00 9d 	mcall	80004700 <st7529_init+0x784>
    st7529_write_cmd(ST7529_OSCON);
80004492:	e0 6c 00 d1 	mov	r12,209
80004496:	f0 1f 00 9b 	mcall	80004700 <st7529_init+0x784>
    st7529_write_cmd(ST7529_PWRCTRL);
8000449a:	32 0c       	mov	r12,32
8000449c:	f0 1f 00 99 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_BOOSTER);  // Booster First
800044a0:	30 8c       	mov	r12,8
800044a2:	f0 1f 00 99 	mcall	80004704 <st7529_init+0x788>
800044a6:	36 48       	mov	r8,100
800044a8:	ef 48 ff e0 	st.w	r7[-32],r8
800044ac:	e0 68 78 40 	mov	r8,30784
800044b0:	ea 18 01 7d 	orh	r8,0x17d
800044b4:	ef 48 ff dc 	st.w	r7[-36],r8
800044b8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800044bc:	ef 48 ff e8 	st.w	r7[-24],r8
800044c0:	ee f8 ff dc 	ld.w	r8,r7[-36]
800044c4:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800044c8:	ee f0 ff e8 	ld.w	r0,r7[-24]
800044cc:	30 01       	mov	r1,0
800044ce:	ee f2 ff e4 	ld.w	r2,r7[-28]
800044d2:	30 03       	mov	r3,0
800044d4:	e2 02 02 4a 	mul	r10,r1,r2
800044d8:	e6 00 02 48 	mul	r8,r3,r0
800044dc:	10 0a       	add	r10,r8
800044de:	e0 02 06 48 	mulu.d	r8,r0,r2
800044e2:	12 0a       	add	r10,r9
800044e4:	14 99       	mov	r9,r10
800044e6:	e0 6a 03 e7 	mov	r10,999
800044ea:	30 0b       	mov	r11,0
800044ec:	f0 0a 00 0a 	add	r10,r8,r10
800044f0:	f2 0b 00 4b 	adc	r11,r9,r11
800044f4:	e0 68 03 e8 	mov	r8,1000
800044f8:	30 09       	mov	r9,0
800044fa:	f0 1f 00 81 	mcall	800046fc <st7529_init+0x780>
800044fe:	14 98       	mov	r8,r10
80004500:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004502:	ef 48 ff f0 	st.w	r7[-16],r8
80004506:	ee c8 00 a4 	sub	r8,r7,164
8000450a:	ef 48 ff ec 	st.w	r7[-20],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000450e:	e1 b8 00 42 	mfsr	r8,0x108
80004512:	10 99       	mov	r9,r8
80004514:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004518:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000451a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000451e:	70 09       	ld.w	r9,r8[0x0]
80004520:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004524:	10 09       	add	r9,r8
80004526:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000452a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000452c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004530:	30 08       	mov	r8,0
80004532:	f3 68 00 08 	st.b	r9[8],r8
80004536:	ee c8 00 a4 	sub	r8,r7,164
8000453a:	ef 48 ff f4 	st.w	r7[-12],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000453e:	e1 b8 00 42 	mfsr	r8,0x108
80004542:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000454a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000454e:	30 28       	mov	r8,2
80004550:	f0 09 18 00 	cp.b	r9,r8
80004554:	c0 31       	brne	8000455a <st7529_init+0x5de>
    return false;
80004556:	30 08       	mov	r8,0
80004558:	c4 38       	rjmp	800045de <st7529_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000455a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000455e:	f1 39 00 08 	ld.ub	r9,r8[8]
80004562:	30 18       	mov	r8,1
80004564:	f0 09 18 00 	cp.b	r9,r8
80004568:	c0 31       	brne	8000456e <st7529_init+0x5f2>
    return true;
8000456a:	30 18       	mov	r8,1
8000456c:	c3 98       	rjmp	800045de <st7529_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000456e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004572:	70 09       	ld.w	r9,r8[0x0]
80004574:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004578:	70 18       	ld.w	r8,r8[0x4]
8000457a:	10 39       	cp.w	r9,r8
8000457c:	e0 88 00 1a 	brls	800045b0 <st7529_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004580:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004584:	70 08       	ld.w	r8,r8[0x0]
80004586:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000458a:	10 39       	cp.w	r9,r8
8000458c:	c1 02       	brcc	800045ac <st7529_init+0x630>
8000458e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004592:	70 18       	ld.w	r8,r8[0x4]
80004594:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004598:	10 39       	cp.w	r9,r8
8000459a:	e0 88 00 09 	brls	800045ac <st7529_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000459e:	ee f9 ff f4 	ld.w	r9,r7[-12]
800045a2:	30 18       	mov	r8,1
800045a4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800045a8:	30 18       	mov	r8,1
800045aa:	c1 a8       	rjmp	800045de <st7529_init+0x662>
    }
    return false;
800045ac:	30 08       	mov	r8,0
800045ae:	c1 88       	rjmp	800045de <st7529_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800045b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045b4:	70 08       	ld.w	r8,r8[0x0]
800045b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045ba:	10 39       	cp.w	r9,r8
800045bc:	c0 93       	brcs	800045ce <st7529_init+0x652>
800045be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800045c2:	70 18       	ld.w	r8,r8[0x4]
800045c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045c8:	10 39       	cp.w	r9,r8
800045ca:	e0 88 00 09 	brls	800045dc <st7529_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800045ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800045d2:	30 18       	mov	r8,1
800045d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800045d8:	30 18       	mov	r8,1
800045da:	c0 28       	rjmp	800045de <st7529_init+0x662>
    }
    return false;
800045dc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800045de:	58 08       	cp.w	r8,0
800045e0:	ca b0       	breq	80004536 <st7529_init+0x5ba>
	st7529_delay_ms(100);
    st7529_write_cmd(ST7529_PWRCTRL);
800045e2:	32 0c       	mov	r12,32
800045e4:	f0 1f 00 47 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_PARAM0);
800045e8:	30 bc       	mov	r12,11
800045ea:	f0 1f 00 47 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_VOLCTRL);
800045ee:	e0 6c 00 81 	mov	r12,129
800045f2:	f0 1f 00 44 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_VOLCTRL_PARAM0);
800045f6:	32 ac       	mov	r12,42
800045f8:	f0 1f 00 43 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_VOLCTRL_PARAM1);
800045fc:	30 4c       	mov	r12,4
800045fe:	f0 1f 00 42 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISCTRL);
80004602:	e0 6c 00 ca 	mov	r12,202
80004606:	f0 1f 00 3f 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_DISCTRL_PARAM0);
8000460a:	30 0c       	mov	r12,0
8000460c:	f0 1f 00 3e 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM1);
80004610:	32 3c       	mov	r12,35
80004612:	f0 1f 00 3d 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM2);
80004616:	30 0c       	mov	r12,0
80004618:	f0 1f 00 3b 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISINV);
8000461c:	e0 6c 00 a7 	mov	r12,167
80004620:	f0 1f 00 38 	mcall	80004700 <st7529_init+0x784>
    st7529_write_cmd(ST7529_COMSCN);
80004624:	e0 6c 00 bb 	mov	r12,187
80004628:	f0 1f 00 36 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_COMSCN_PARAM0);
8000462c:	30 2c       	mov	r12,2
8000462e:	f0 1f 00 36 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_DATSDR);
80004632:	e0 6c 00 bc 	mov	r12,188
80004636:	f0 1f 00 33 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_DATSDR_PARAM0);
8000463a:	30 4c       	mov	r12,4
8000463c:	f0 1f 00 32 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM1);
80004640:	30 0c       	mov	r12,0
80004642:	f0 1f 00 31 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM2);
80004646:	30 2c       	mov	r12,2
80004648:	f0 1f 00 2f 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_LASET);
8000464c:	37 5c       	mov	r12,117
8000464e:	f0 1f 00 2d 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_LASET_PARAM0);
80004652:	30 0c       	mov	r12,0
80004654:	f0 1f 00 2c 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_LASET_PARAM1);
80004658:	e0 6c 00 9f 	mov	r12,159
8000465c:	f0 1f 00 2a 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_CASET);
80004660:	31 5c       	mov	r12,21
80004662:	f0 1f 00 28 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_CASET_PARAM0);
80004666:	30 0c       	mov	r12,0
80004668:	f0 1f 00 27 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_CASET_PARAM1);
8000466c:	35 4c       	mov	r12,84
8000466e:	f0 1f 00 26 	mcall	80004704 <st7529_init+0x788>

    st7529_write_cmd(ST7529_EXTOUT);
80004672:	33 1c       	mov	r12,49
80004674:	f0 1f 00 23 	mcall	80004700 <st7529_init+0x784>
    st7529_write_cmd(ST7529_ANASET);
80004678:	33 2c       	mov	r12,50
8000467a:	f0 1f 00 22 	mcall	80004700 <st7529_init+0x784>
    st7529_write_data(ST7529_ANASET_PARAM0);
8000467e:	30 1c       	mov	r12,1
80004680:	f0 1f 00 21 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM1);
80004684:	30 0c       	mov	r12,0
80004686:	f0 1f 00 20 	mcall	80004704 <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM2);
8000468a:	30 2c       	mov	r12,2
8000468c:	f0 1f 00 1e 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_SWINT);
80004690:	33 4c       	mov	r12,52
80004692:	f0 1f 00 1c 	mcall	80004700 <st7529_init+0x784>

    st7529_write_cmd(ST7529_EXTIN);
80004696:	33 0c       	mov	r12,48
80004698:	f0 1f 00 1a 	mcall	80004700 <st7529_init+0x784>
	
	st7529_write_cmd(ST7529_RAMWR);
8000469c:	35 cc       	mov	r12,92
8000469e:	f0 1f 00 19 	mcall	80004700 <st7529_init+0x784>
	
	// Clear Display
	for(int i=0; i<41000; i++){
800046a2:	30 08       	mov	r8,0
800046a4:	ef 48 ff 68 	st.w	r7[-152],r8
800046a8:	c0 98       	rjmp	800046ba <st7529_init+0x73e>
		st7529_write_data(0x00);
800046aa:	30 0c       	mov	r12,0
800046ac:	f0 1f 00 16 	mcall	80004704 <st7529_init+0x788>
    st7529_write_cmd(ST7529_EXTIN);
	
	st7529_write_cmd(ST7529_RAMWR);
	
	// Clear Display
	for(int i=0; i<41000; i++){
800046b0:	ee f8 ff 68 	ld.w	r8,r7[-152]
800046b4:	2f f8       	sub	r8,-1
800046b6:	ef 48 ff 68 	st.w	r7[-152],r8
800046ba:	ee f8 ff 68 	ld.w	r8,r7[-152]
800046be:	e0 48 a0 27 	cp.w	r8,40999
800046c2:	fe 9a ff f4 	brle	800046aa <st7529_init+0x72e>
		st7529_write_data(0x00);
	}
	
	st7529_write_cmd(ST7529_DISON);
800046c6:	e0 6c 00 af 	mov	r12,175
800046ca:	f0 1f 00 0e 	mcall	80004700 <st7529_init+0x784>
800046ce:	30 18       	mov	r8,1
800046d0:	ef 48 ff fc 	st.w	r7[-4],r8
800046d4:	fc 1a 40 00 	movh	r10,0x4000
800046d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046dc:	a5 98       	lsr	r8,0x5
800046de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800046e2:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800046e6:	30 1b       	mov	r11,1
800046e8:	f6 09 09 49 	lsl	r9,r11,r9
800046ec:	a9 68       	lsl	r8,0x8
800046ee:	f4 08 00 08 	add	r8,r10,r8
800046f2:	2a c8       	sub	r8,-84
800046f4:	91 09       	st.w	r8[0x0],r9
	
    st7529_CS_SET();
}
800046f6:	2c 9d       	sub	sp,-220
800046f8:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800046fc:	80 00       	ld.sh	r0,r0[0x0]
800046fe:	53 ca       	stdsp	sp[0xf0],r10
80004700:	80 00       	ld.sh	r0,r0[0x0]
80004702:	47 08       	lddsp	r8,sp[0x1c0]
80004704:	80 00       	ld.sh	r0,r0[0x0]
80004706:	47 d8       	lddsp	r8,sp[0x1f4]

80004708 <st7529_write_cmd>:

static inline void st7529_write_cmd(uint8_t data){
80004708:	eb cd 40 80 	pushm	r7,lr
8000470c:	1a 97       	mov	r7,sp
8000470e:	20 5d       	sub	sp,20
80004710:	18 98       	mov	r8,r12
80004712:	ef 68 ff ec 	st.b	r7[-20],r8
80004716:	31 28       	mov	r8,18
80004718:	ef 48 ff f0 	st.w	r7[-16],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
8000471c:	fc 1a 40 00 	movh	r10,0x4000
80004720:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004724:	a5 98       	lsr	r8,0x5
80004726:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000472a:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000472e:	30 1b       	mov	r11,1
80004730:	f6 09 09 49 	lsl	r9,r11,r9
80004734:	a9 68       	lsl	r8,0x8
80004736:	f4 08 00 08 	add	r8,r10,r8
8000473a:	2a 88       	sub	r8,-88
8000473c:	91 09       	st.w	r8[0x0],r9
8000473e:	32 b8       	mov	r8,43
80004740:	ef 48 ff f4 	st.w	r7[-12],r8
80004744:	fc 1a 40 00 	movh	r10,0x4000
80004748:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000474c:	a5 98       	lsr	r8,0x5
8000474e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004752:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004756:	30 1b       	mov	r11,1
80004758:	f6 09 09 49 	lsl	r9,r11,r9
8000475c:	a9 68       	lsl	r8,0x8
8000475e:	f4 08 00 08 	add	r8,r10,r8
80004762:	2a 88       	sub	r8,-88
80004764:	91 09       	st.w	r8[0x0],r9
    st7529_A0_CLR();
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
80004766:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000476a:	10 9c       	mov	r12,r8
8000476c:	f0 1f 00 19 	mcall	800047d0 <st7529_write_cmd+0xc8>
	
	st7529_delay_write();
80004770:	f0 1f 00 19 	mcall	800047d4 <st7529_write_cmd+0xcc>
80004774:	32 b8       	mov	r8,43
80004776:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000477a:	fc 1a 40 00 	movh	r10,0x4000
8000477e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004782:	a5 98       	lsr	r8,0x5
80004784:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004788:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000478c:	30 1b       	mov	r11,1
8000478e:	f6 09 09 49 	lsl	r9,r11,r9
80004792:	a9 68       	lsl	r8,0x8
80004794:	f4 08 00 08 	add	r8,r10,r8
80004798:	2a c8       	sub	r8,-84
8000479a:	91 09       	st.w	r8[0x0],r9
8000479c:	31 28       	mov	r8,18
8000479e:	ef 48 ff fc 	st.w	r7[-4],r8
800047a2:	fc 1a 40 00 	movh	r10,0x4000
800047a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047aa:	a5 98       	lsr	r8,0x5
800047ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800047b0:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800047b4:	30 1b       	mov	r11,1
800047b6:	f6 09 09 49 	lsl	r9,r11,r9
800047ba:	a9 68       	lsl	r8,0x8
800047bc:	f4 08 00 08 	add	r8,r10,r8
800047c0:	2a c8       	sub	r8,-84
800047c2:	91 09       	st.w	r8[0x0],r9
	
    st7529_WR_SET();
    st7529_A0_SET();
	
	st7529_delay_write();
800047c4:	f0 1f 00 04 	mcall	800047d4 <st7529_write_cmd+0xcc>
}
800047c8:	2f bd       	sub	sp,-20
800047ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800047ce:	00 00       	add	r0,r0
800047d0:	80 00       	ld.sh	r0,r0[0x0]
800047d2:	3f 0c       	mov	r12,-16
800047d4:	80 00       	ld.sh	r0,r0[0x0]
800047d6:	3f 68       	mov	r8,-10

800047d8 <st7529_write_data>:

static inline void st7529_write_data(uint8_t data){
800047d8:	eb cd 40 80 	pushm	r7,lr
800047dc:	1a 97       	mov	r7,sp
800047de:	20 3d       	sub	sp,12
800047e0:	18 98       	mov	r8,r12
800047e2:	ef 68 ff f4 	st.b	r7[-12],r8
800047e6:	32 b8       	mov	r8,43
800047e8:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800047ec:	fc 1a 40 00 	movh	r10,0x4000
800047f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047f4:	a5 98       	lsr	r8,0x5
800047f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800047fa:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800047fe:	30 1b       	mov	r11,1
80004800:	f6 09 09 49 	lsl	r9,r11,r9
80004804:	a9 68       	lsl	r8,0x8
80004806:	f4 08 00 08 	add	r8,r10,r8
8000480a:	2a 88       	sub	r8,-88
8000480c:	91 09       	st.w	r8[0x0],r9
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
8000480e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004812:	10 9c       	mov	r12,r8
80004814:	f0 1f 00 0f 	mcall	80004850 <st7529_write_data+0x78>
	
	st7529_delay_write();
80004818:	f0 1f 00 0f 	mcall	80004854 <st7529_write_data+0x7c>
8000481c:	32 b8       	mov	r8,43
8000481e:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004822:	fc 1a 40 00 	movh	r10,0x4000
80004826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000482a:	a5 98       	lsr	r8,0x5
8000482c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004830:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004834:	30 1b       	mov	r11,1
80004836:	f6 09 09 49 	lsl	r9,r11,r9
8000483a:	a9 68       	lsl	r8,0x8
8000483c:	f4 08 00 08 	add	r8,r10,r8
80004840:	2a c8       	sub	r8,-84
80004842:	91 09       	st.w	r8[0x0],r9

    st7529_WR_SET(); 
	
	st7529_delay_write();
80004844:	f0 1f 00 04 	mcall	80004854 <st7529_write_data+0x7c>
}
80004848:	2f dd       	sub	sp,-12
8000484a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000484e:	00 00       	add	r0,r0
80004850:	80 00       	ld.sh	r0,r0[0x0]
80004852:	3f 0c       	mov	r12,-16
80004854:	80 00       	ld.sh	r0,r0[0x0]
80004856:	3f 68       	mov	r8,-10

80004858 <st7529_put_5x7_text>:
// len: length of character string (not including null termination)
// NOTES:
// To avoid reads, this function assumes two rows of cleared pixels above
// each character.

void st7529_put_5x7_text(uint8_t x, uint8_t y, char *str, uint32_t len){
80004858:	eb cd 40 80 	pushm	r7,lr
8000485c:	1a 97       	mov	r7,sp
8000485e:	20 ad       	sub	sp,40
80004860:	16 98       	mov	r8,r11
80004862:	ef 4a ff dc 	st.w	r7[-36],r10
80004866:	ef 49 ff d8 	st.w	r7[-40],r9
8000486a:	18 99       	mov	r9,r12
8000486c:	ef 69 ff e4 	st.b	r7[-28],r9
80004870:	ef 68 ff e0 	st.b	r7[-32],r8
80004874:	30 18       	mov	r8,1
80004876:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
8000487a:	fc 1a 40 00 	movh	r10,0x4000
8000487e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004882:	a5 98       	lsr	r8,0x5
80004884:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004888:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000488c:	30 1b       	mov	r11,1
8000488e:	f6 09 09 49 	lsl	r9,r11,r9
80004892:	a9 68       	lsl	r8,0x8
80004894:	f4 08 00 08 	add	r8,r10,r8
80004898:	2a 88       	sub	r8,-88
8000489a:	91 09       	st.w	r8[0x0],r9

    st7529_CS_CLR();
	
	x = x + ST7529_XOFFSET;
8000489c:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800048a0:	2f 08       	sub	r8,-16
800048a2:	ef 68 ff e4 	st.b	r7[-28],r8
	y = y + ST7529_YOFFSET;
	
    // Set Start and End Lines/Columns
    uint32_t end_line = x+6*len-1;
800048a6:	ef 3a ff e4 	ld.ub	r10,r7[-28]
800048aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800048ae:	12 98       	mov	r8,r9
800048b0:	a1 78       	lsl	r8,0x1
800048b2:	12 08       	add	r8,r9
800048b4:	a1 78       	lsl	r8,0x1
800048b6:	f4 08 00 08 	add	r8,r10,r8
800048ba:	20 18       	sub	r8,1
800048bc:	ef 48 ff e8 	st.w	r7[-24],r8
    uint32_t end_col = y/3+2;
800048c0:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800048c4:	e0 68 aa ab 	mov	r8,43691
800048c8:	ea 18 aa aa 	orh	r8,0xaaaa
800048cc:	f2 08 06 48 	mulu.d	r8,r9,r8
800048d0:	f2 08 16 01 	lsr	r8,r9,0x1
800048d4:	5c 58       	castu.b	r8
800048d6:	2f e8       	sub	r8,-2
800048d8:	ef 48 ff ec 	st.w	r7[-20],r8

    st7529_write_cmd(ST7529_LASET);
800048dc:	37 5c       	mov	r12,117
800048de:	f0 1f 00 db 	mcall	80004c48 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(x);
800048e2:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800048e6:	10 9c       	mov	r12,r8
800048e8:	f0 1f 00 d9 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_line);
800048ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800048f0:	5c 58       	castu.b	r8
800048f2:	10 9c       	mov	r12,r8
800048f4:	f0 1f 00 d6 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>

    st7529_write_cmd(ST7529_CASET);
800048f8:	31 5c       	mov	r12,21
800048fa:	f0 1f 00 d4 	mcall	80004c48 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(y/3);
800048fe:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80004902:	e0 68 aa ab 	mov	r8,43691
80004906:	ea 18 aa aa 	orh	r8,0xaaaa
8000490a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000490e:	f2 08 16 01 	lsr	r8,r9,0x1
80004912:	5c 58       	castu.b	r8
80004914:	10 9c       	mov	r12,r8
80004916:	f0 1f 00 ce 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_col);
8000491a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000491e:	5c 58       	castu.b	r8
80004920:	10 9c       	mov	r12,r8
80004922:	f0 1f 00 cb 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>

    // Write Text Data
    st7529_write_cmd(ST7529_RAMWR);
80004926:	35 cc       	mov	r12,92
80004928:	f0 1f 00 c8 	mcall	80004c48 <st7529_put_5x7_text+0x3f0>

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
8000492c:	30 08       	mov	r8,0
8000492e:	ef 48 ff f0 	st.w	r7[-16],r8
80004932:	c7 58       	rjmp	80004a1c <st7529_put_5x7_text+0x1c4>
        if((iline % 6) == 5){
80004934:	ee fa ff f0 	ld.w	r10,r7[-16]
80004938:	e0 68 aa ab 	mov	r8,43691
8000493c:	ea 18 aa aa 	orh	r8,0xaaaa
80004940:	f4 08 06 48 	mulu.d	r8,r10,r8
80004944:	a3 89       	lsr	r9,0x2
80004946:	12 98       	mov	r8,r9
80004948:	a1 78       	lsl	r8,0x1
8000494a:	12 08       	add	r8,r9
8000494c:	a1 78       	lsl	r8,0x1
8000494e:	f4 08 01 09 	sub	r9,r10,r8
80004952:	58 59       	cp.w	r9,5
80004954:	c0 b1       	brne	8000496a <st7529_put_5x7_text+0x112>
            st7529_write_data(0x00);
80004956:	30 0c       	mov	r12,0
80004958:	f0 1f 00 bd 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
8000495c:	30 0c       	mov	r12,0
8000495e:	f0 1f 00 bc 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004962:	30 0c       	mov	r12,0
80004964:	f0 1f 00 ba 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004968:	c5 58       	rjmp	80004a12 <st7529_put_5x7_text+0x1ba>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
8000496a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000496e:	e0 68 aa ab 	mov	r8,43691
80004972:	ea 18 aa aa 	orh	r8,0xaaaa
80004976:	f2 08 06 48 	mulu.d	r8,r9,r8
8000497a:	f2 08 16 02 	lsr	r8,r9,0x2
8000497e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004982:	f2 08 00 08 	add	r8,r9,r8
80004986:	11 88       	ld.ub	r8,r8[0x0]
80004988:	10 99       	mov	r9,r8
8000498a:	12 98       	mov	r8,r9
8000498c:	a3 68       	lsl	r8,0x2
8000498e:	12 08       	add	r8,r9
80004990:	10 9b       	mov	r11,r8
80004992:	ee fa ff f0 	ld.w	r10,r7[-16]
80004996:	e0 68 aa ab 	mov	r8,43691
8000499a:	ea 18 aa aa 	orh	r8,0xaaaa
8000499e:	f4 08 06 48 	mulu.d	r8,r10,r8
800049a2:	a3 89       	lsr	r9,0x2
800049a4:	12 98       	mov	r8,r9
800049a6:	a1 78       	lsl	r8,0x1
800049a8:	12 08       	add	r8,r9
800049aa:	a1 78       	lsl	r8,0x1
800049ac:	f4 08 01 09 	sub	r9,r10,r8
800049b0:	f6 09 00 08 	add	r8,r11,r9
800049b4:	f0 c8 00 a0 	sub	r8,r8,160
800049b8:	fe f9 02 98 	ld.w	r9,pc[664]
800049bc:	f2 08 07 08 	ld.ub	r8,r9[r8]
800049c0:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<6))
800049c4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800049c8:	e2 18 00 40 	andl	r8,0x40,COH
800049cc:	c0 60       	breq	800049d8 <st7529_put_5x7_text+0x180>
                st7529_write_data(0xFF);
800049ce:	e0 6c 00 ff 	mov	r12,255
800049d2:	f0 1f 00 9f 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
800049d6:	c0 48       	rjmp	800049de <st7529_put_5x7_text+0x186>
            else
                st7529_write_data(0x00);
800049d8:	30 0c       	mov	r12,0
800049da:	f0 1f 00 9d 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<5))
800049de:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800049e2:	e2 18 00 20 	andl	r8,0x20,COH
800049e6:	c0 60       	breq	800049f2 <st7529_put_5x7_text+0x19a>
                st7529_write_data(0xFF);
800049e8:	e0 6c 00 ff 	mov	r12,255
800049ec:	f0 1f 00 98 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
800049f0:	c0 48       	rjmp	800049f8 <st7529_put_5x7_text+0x1a0>
            else
                st7529_write_data(0x00);
800049f2:	30 0c       	mov	r12,0
800049f4:	f0 1f 00 96 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<4))
800049f8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800049fc:	e2 18 00 10 	andl	r8,0x10,COH
80004a00:	c0 60       	breq	80004a0c <st7529_put_5x7_text+0x1b4>
                st7529_write_data(0xFF);
80004a02:	e0 6c 00 ff 	mov	r12,255
80004a06:	f0 1f 00 92 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004a0a:	c0 48       	rjmp	80004a12 <st7529_put_5x7_text+0x1ba>
            else
                st7529_write_data(0x00);
80004a0c:	30 0c       	mov	r12,0
80004a0e:	f0 1f 00 90 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
    st7529_write_cmd(ST7529_RAMWR);

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
80004a12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a16:	2f f8       	sub	r8,-1
80004a18:	ef 48 ff f0 	st.w	r7[-16],r8
80004a1c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004a20:	12 98       	mov	r8,r9
80004a22:	a1 78       	lsl	r8,0x1
80004a24:	12 08       	add	r8,r9
80004a26:	a1 78       	lsl	r8,0x1
80004a28:	10 99       	mov	r9,r8
80004a2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a2e:	10 39       	cp.w	r9,r8
80004a30:	fe 9b ff 82 	brhi	80004934 <st7529_put_5x7_text+0xdc>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004a34:	30 08       	mov	r8,0
80004a36:	ef 48 ff f0 	st.w	r7[-16],r8
80004a3a:	c7 48       	rjmp	80004b22 <st7529_put_5x7_text+0x2ca>
        if((iline % 6) == 5){
80004a3c:	ee fa ff f0 	ld.w	r10,r7[-16]
80004a40:	e0 68 aa ab 	mov	r8,43691
80004a44:	ea 18 aa aa 	orh	r8,0xaaaa
80004a48:	f4 08 06 48 	mulu.d	r8,r10,r8
80004a4c:	a3 89       	lsr	r9,0x2
80004a4e:	12 98       	mov	r8,r9
80004a50:	a1 78       	lsl	r8,0x1
80004a52:	12 08       	add	r8,r9
80004a54:	a1 78       	lsl	r8,0x1
80004a56:	f4 08 01 09 	sub	r9,r10,r8
80004a5a:	58 59       	cp.w	r9,5
80004a5c:	c0 b1       	brne	80004a72 <st7529_put_5x7_text+0x21a>
            st7529_write_data(0x00);
80004a5e:	30 0c       	mov	r12,0
80004a60:	f0 1f 00 7b 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004a64:	30 0c       	mov	r12,0
80004a66:	f0 1f 00 7a 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004a6a:	30 0c       	mov	r12,0
80004a6c:	f0 1f 00 78 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004a70:	c5 48       	rjmp	80004b18 <st7529_put_5x7_text+0x2c0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80004a72:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a76:	e0 68 aa ab 	mov	r8,43691
80004a7a:	ea 18 aa aa 	orh	r8,0xaaaa
80004a7e:	f2 08 06 48 	mulu.d	r8,r9,r8
80004a82:	f2 08 16 02 	lsr	r8,r9,0x2
80004a86:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004a8a:	f2 08 00 08 	add	r8,r9,r8
80004a8e:	11 88       	ld.ub	r8,r8[0x0]
80004a90:	10 99       	mov	r9,r8
80004a92:	12 98       	mov	r8,r9
80004a94:	a3 68       	lsl	r8,0x2
80004a96:	12 08       	add	r8,r9
80004a98:	10 9b       	mov	r11,r8
80004a9a:	ee fa ff f0 	ld.w	r10,r7[-16]
80004a9e:	e0 68 aa ab 	mov	r8,43691
80004aa2:	ea 18 aa aa 	orh	r8,0xaaaa
80004aa6:	f4 08 06 48 	mulu.d	r8,r10,r8
80004aaa:	a3 89       	lsr	r9,0x2
80004aac:	12 98       	mov	r8,r9
80004aae:	a1 78       	lsl	r8,0x1
80004ab0:	12 08       	add	r8,r9
80004ab2:	a1 78       	lsl	r8,0x1
80004ab4:	f4 08 01 09 	sub	r9,r10,r8
80004ab8:	f6 09 00 08 	add	r8,r11,r9
80004abc:	f0 c8 00 a0 	sub	r8,r8,160
80004ac0:	4e 49       	lddpc	r9,80004c50 <st7529_put_5x7_text+0x3f8>
80004ac2:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004ac6:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<3))
80004aca:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004ace:	e2 18 00 08 	andl	r8,0x8,COH
80004ad2:	c0 60       	breq	80004ade <st7529_put_5x7_text+0x286>
                st7529_write_data(0xFF);
80004ad4:	e0 6c 00 ff 	mov	r12,255
80004ad8:	f0 1f 00 5d 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004adc:	c0 48       	rjmp	80004ae4 <st7529_put_5x7_text+0x28c>
            else
                st7529_write_data(0x00);
80004ade:	30 0c       	mov	r12,0
80004ae0:	f0 1f 00 5b 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<2))
80004ae4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004ae8:	e2 18 00 04 	andl	r8,0x4,COH
80004aec:	c0 60       	breq	80004af8 <st7529_put_5x7_text+0x2a0>
                st7529_write_data(0xFF);
80004aee:	e0 6c 00 ff 	mov	r12,255
80004af2:	f0 1f 00 57 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004af6:	c0 48       	rjmp	80004afe <st7529_put_5x7_text+0x2a6>
            else
                st7529_write_data(0x00);
80004af8:	30 0c       	mov	r12,0
80004afa:	f0 1f 00 55 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<1))
80004afe:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004b02:	e2 18 00 02 	andl	r8,0x2,COH
80004b06:	c0 60       	breq	80004b12 <st7529_put_5x7_text+0x2ba>
                st7529_write_data(0xFF);
80004b08:	e0 6c 00 ff 	mov	r12,255
80004b0c:	f0 1f 00 50 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004b10:	c0 48       	rjmp	80004b18 <st7529_put_5x7_text+0x2c0>
            else
                st7529_write_data(0x00);
80004b12:	30 0c       	mov	r12,0
80004b14:	f0 1f 00 4e 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004b18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b1c:	2f f8       	sub	r8,-1
80004b1e:	ef 48 ff f0 	st.w	r7[-16],r8
80004b22:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004b26:	12 98       	mov	r8,r9
80004b28:	a1 78       	lsl	r8,0x1
80004b2a:	12 08       	add	r8,r9
80004b2c:	a1 78       	lsl	r8,0x1
80004b2e:	10 99       	mov	r9,r8
80004b30:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b34:	10 39       	cp.w	r9,r8
80004b36:	fe 9b ff 83 	brhi	80004a3c <st7529_put_5x7_text+0x1e4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004b3a:	30 08       	mov	r8,0
80004b3c:	ef 48 ff f0 	st.w	r7[-16],r8
80004b40:	c6 18       	rjmp	80004c02 <st7529_put_5x7_text+0x3aa>
        if((iline % 6) == 5){
80004b42:	ee fa ff f0 	ld.w	r10,r7[-16]
80004b46:	e0 68 aa ab 	mov	r8,43691
80004b4a:	ea 18 aa aa 	orh	r8,0xaaaa
80004b4e:	f4 08 06 48 	mulu.d	r8,r10,r8
80004b52:	a3 89       	lsr	r9,0x2
80004b54:	12 98       	mov	r8,r9
80004b56:	a1 78       	lsl	r8,0x1
80004b58:	12 08       	add	r8,r9
80004b5a:	a1 78       	lsl	r8,0x1
80004b5c:	f4 08 01 09 	sub	r9,r10,r8
80004b60:	58 59       	cp.w	r9,5
80004b62:	c0 b1       	brne	80004b78 <st7529_put_5x7_text+0x320>
            st7529_write_data(0x00);
80004b64:	30 0c       	mov	r12,0
80004b66:	f0 1f 00 3a 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004b6a:	30 0c       	mov	r12,0
80004b6c:	f0 1f 00 38 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004b70:	30 0c       	mov	r12,0
80004b72:	f0 1f 00 37 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004b76:	c4 18       	rjmp	80004bf8 <st7529_put_5x7_text+0x3a0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80004b78:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004b7c:	e0 68 aa ab 	mov	r8,43691
80004b80:	ea 18 aa aa 	orh	r8,0xaaaa
80004b84:	f2 08 06 48 	mulu.d	r8,r9,r8
80004b88:	f2 08 16 02 	lsr	r8,r9,0x2
80004b8c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004b90:	f2 08 00 08 	add	r8,r9,r8
80004b94:	11 88       	ld.ub	r8,r8[0x0]
80004b96:	10 99       	mov	r9,r8
80004b98:	12 98       	mov	r8,r9
80004b9a:	a3 68       	lsl	r8,0x2
80004b9c:	12 08       	add	r8,r9
80004b9e:	10 9b       	mov	r11,r8
80004ba0:	ee fa ff f0 	ld.w	r10,r7[-16]
80004ba4:	e0 68 aa ab 	mov	r8,43691
80004ba8:	ea 18 aa aa 	orh	r8,0xaaaa
80004bac:	f4 08 06 48 	mulu.d	r8,r10,r8
80004bb0:	a3 89       	lsr	r9,0x2
80004bb2:	12 98       	mov	r8,r9
80004bb4:	a1 78       	lsl	r8,0x1
80004bb6:	12 08       	add	r8,r9
80004bb8:	a1 78       	lsl	r8,0x1
80004bba:	f4 08 01 09 	sub	r9,r10,r8
80004bbe:	f6 09 00 08 	add	r8,r11,r9
80004bc2:	f0 c8 00 a0 	sub	r8,r8,160
80004bc6:	4a 39       	lddpc	r9,80004c50 <st7529_put_5x7_text+0x3f8>
80004bc8:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004bcc:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<0))
80004bd0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004bd4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004bd8:	5c 58       	castu.b	r8
80004bda:	c0 60       	breq	80004be6 <st7529_put_5x7_text+0x38e>
                st7529_write_data(0xFF);
80004bdc:	e0 6c 00 ff 	mov	r12,255
80004be0:	f0 1f 00 1b 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
80004be4:	c0 48       	rjmp	80004bec <st7529_put_5x7_text+0x394>
            else
                st7529_write_data(0x00);
80004be6:	30 0c       	mov	r12,0
80004be8:	f0 1f 00 19 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>

            st7529_write_data(0x00);
80004bec:	30 0c       	mov	r12,0
80004bee:	f0 1f 00 18 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004bf2:	30 0c       	mov	r12,0
80004bf4:	f0 1f 00 16 	mcall	80004c4c <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004bf8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004bfc:	2f f8       	sub	r8,-1
80004bfe:	ef 48 ff f0 	st.w	r7[-16],r8
80004c02:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004c06:	12 98       	mov	r8,r9
80004c08:	a1 78       	lsl	r8,0x1
80004c0a:	12 08       	add	r8,r9
80004c0c:	a1 78       	lsl	r8,0x1
80004c0e:	10 99       	mov	r9,r8
80004c10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c14:	10 39       	cp.w	r9,r8
80004c16:	fe 9b ff 96 	brhi	80004b42 <st7529_put_5x7_text+0x2ea>
80004c1a:	30 18       	mov	r8,1
80004c1c:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004c20:	fc 1a 40 00 	movh	r10,0x4000
80004c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c28:	a5 98       	lsr	r8,0x5
80004c2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004c2e:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004c32:	30 1b       	mov	r11,1
80004c34:	f6 09 09 49 	lsl	r9,r11,r9
80004c38:	a9 68       	lsl	r8,0x8
80004c3a:	f4 08 00 08 	add	r8,r10,r8
80004c3e:	2a c8       	sub	r8,-84
80004c40:	91 09       	st.w	r8[0x0],r9
            st7529_write_data(0x00);
        }
    }

    st7529_CS_SET();
}
80004c42:	2f 6d       	sub	sp,-40
80004c44:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c48:	80 00       	ld.sh	r0,r0[0x0]
80004c4a:	47 08       	lddsp	r8,sp[0x1c0]
80004c4c:	80 00       	ld.sh	r0,r0[0x0]
80004c4e:	47 d8       	lddsp	r8,sp[0x1f4]
80004c50:	80 00       	ld.sh	r0,r0[0x0]
80004c52:	b9 30       	mul	r0,r12
80004c54:	54 69       	stdsp	sp[0x118],r9
80004c56:	6d 65       	ld.w	r5,r6[0x58]
80004c58:	3a 20       	mov	r0,-94
80004c5a:	25 64       	sub	r4,86
80004c5c:	3a 25       	mov	r5,-94
80004c5e:	64 3a       	ld.w	r10,r2[0xc]
80004c60:	25 66       	sub	r6,86
80004c62:	00 00       	add	r0,r0
80004c64:	4e 75       	lddpc	r5,80004e00 <main+0xec>
80004c66:	6d 20       	ld.w	r0,r6[0x48]
80004c68:	53 61       	stdsp	sp[0xd8],r1
80004c6a:	74 73       	ld.w	r3,r10[0x1c]
80004c6c:	3a 20       	mov	r0,-94
80004c6e:	25 64       	sub	r4,86
80004c70:	00 00       	add	r0,r0
	...

80004c74 <usart_timeout_handler>:

volatile unsigned int usart_timeout_flag = 0;
volatile char usart_rx_buffer[600];
volatile uc530_data_t data;

ISR(usart_timeout_handler, AVR32_USART3_IRQ, 0){
80004c74:	eb cd 40 80 	pushm	r7,lr
80004c78:	1a 97       	mov	r7,sp
80004c7a:	20 2d       	sub	sp,8
80004c7c:	30 e8       	mov	r8,14
80004c7e:	ef 48 ff f8 	st.w	r7[-8],r8
80004c82:	fc 1a 40 00 	movh	r10,0x4000
80004c86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c8a:	a5 98       	lsr	r8,0x5
80004c8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c90:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004c94:	30 1b       	mov	r11,1
80004c96:	f6 09 09 49 	lsl	r9,r11,r9
80004c9a:	a9 68       	lsl	r8,0x8
80004c9c:	f4 08 00 08 	add	r8,r10,r8
80004ca0:	2a c8       	sub	r8,-84
80004ca2:	91 09       	st.w	r8[0x0],r9
	gpio_local_set_gpio_pin(AVR32_PIN_PA14);
	
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
80004ca4:	fe 78 3c 00 	mov	r8,-50176
80004ca8:	fe 79 3c 00 	mov	r9,-50176
80004cac:	72 09       	ld.w	r9,r9[0x0]
80004cae:	ab b9       	sbr	r9,0xb
80004cb0:	91 09       	st.w	r8[0x0],r9
	
	usart_timeout_flag = 1;
80004cb2:	49 48       	lddpc	r8,80004d00 <usart_timeout_handler+0x8c>
80004cb4:	30 19       	mov	r9,1
80004cb6:	91 09       	st.w	r8[0x0],r9
	
	uc530_parse_default(usart_rx_buffer,
80004cb8:	49 3a       	lddpc	r10,80004d04 <usart_timeout_handler+0x90>
80004cba:	e0 6b 02 58 	mov	r11,600
80004cbe:	49 3c       	lddpc	r12,80004d08 <usart_timeout_handler+0x94>
80004cc0:	f0 1f 00 13 	mcall	80004d0c <usart_timeout_handler+0x98>
						sizeof(usart_rx_buffer),
						&data);
						
	pdca_load_channel(0,
80004cc4:	e0 6a 02 58 	mov	r10,600
80004cc8:	49 0b       	lddpc	r11,80004d08 <usart_timeout_handler+0x94>
80004cca:	30 0c       	mov	r12,0
80004ccc:	f0 1f 00 11 	mcall	80004d10 <usart_timeout_handler+0x9c>
80004cd0:	30 e8       	mov	r8,14
80004cd2:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004cd6:	fc 1a 40 00 	movh	r10,0x4000
80004cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cde:	a5 98       	lsr	r8,0x5
80004ce0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004ce4:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004ce8:	30 1b       	mov	r11,1
80004cea:	f6 09 09 49 	lsl	r9,r11,r9
80004cee:	a9 68       	lsl	r8,0x8
80004cf0:	f4 08 00 08 	add	r8,r10,r8
80004cf4:	2a 88       	sub	r8,-88
80004cf6:	91 09       	st.w	r8[0x0],r9
					  (void *)usart_rx_buffer,
					  sizeof(usart_rx_buffer));
					  
	gpio_local_clr_gpio_pin(AVR32_PIN_PA14);
}
80004cf8:	2f ed       	sub	sp,-8
80004cfa:	e3 cd 40 80 	ldm	sp++,r7,lr
80004cfe:	d6 03       	rete
80004d00:	00 00       	add	r0,r0
80004d02:	06 08       	add	r8,r3
80004d04:	00 00       	add	r0,r0
80004d06:	06 44       	or	r4,r3
80004d08:	00 00       	add	r0,r0
80004d0a:	06 88       	andn	r8,r3
80004d0c:	80 00       	ld.sh	r0,r0[0x0]
80004d0e:	39 80       	mov	r0,-104
80004d10:	80 00       	ld.sh	r0,r0[0x0]
80004d12:	28 18       	sub	r8,-127

80004d14 <main>:

int main (void)
{
80004d14:	eb cd 40 80 	pushm	r7,lr
80004d18:	1a 97       	mov	r7,sp
80004d1a:	20 ed       	sub	sp,56
	char text[50];
	
	board_init();
80004d1c:	f0 1f 00 37 	mcall	80004df8 <main+0xe4>
	setup_clocks();
80004d20:	f0 1f 00 37 	mcall	80004dfc <main+0xe8>
 * \note This function must have been called at least once before using other
 *       functions in this interface.
 */
__always_inline static void gpio_local_init(void)
{
	Set_system_register(AVR32_CPUCR,
80004d24:	e1 b8 00 03 	mfsr	r8,0xc
80004d28:	b1 a8       	sbr	r8,0x10
80004d2a:	e3 b8 00 03 	mtsr	0xc,r8
	
	gpio_local_init();
	st7529_init();
80004d2e:	f0 1f 00 35 	mcall	80004e00 <main+0xec>
	setup_gps_uart();
80004d32:	f0 1f 00 35 	mcall	80004e04 <main+0xf0>
	setup_uart_dma();
80004d36:	f0 1f 00 35 	mcall	80004e08 <main+0xf4>
80004d3a:	30 e8       	mov	r8,14
80004d3c:	ef 48 ff fc 	st.w	r7[-4],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004d40:	fc 1a 40 00 	movh	r10,0x4000
80004d44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d48:	a5 98       	lsr	r8,0x5
80004d4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d4e:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004d52:	30 1b       	mov	r11,1
80004d54:	f6 09 09 49 	lsl	r9,r11,r9
80004d58:	a9 68       	lsl	r8,0x8
80004d5a:	f4 08 00 08 	add	r8,r10,r8
80004d5e:	2b c8       	sub	r8,-68
80004d60:	91 09       	st.w	r8[0x0],r9
	
	gpio_local_enable_pin_output_driver(AVR32_PIN_PA14);
	
	Disable_global_interrupt();
80004d62:	d3 03       	ssrf	0x10
	
	INTC_init_interrupts();
80004d64:	f0 1f 00 2a 	mcall	80004e0c <main+0xf8>
	INTC_register_interrupt(&usart_timeout_handler, AVR32_USART3_IRQ, AVR32_INTC_INT0);
80004d68:	30 0a       	mov	r10,0
80004d6a:	e0 6b 02 40 	mov	r11,576
80004d6e:	4a 9c       	lddpc	r12,80004e10 <main+0xfc>
80004d70:	f0 1f 00 29 	mcall	80004e14 <main+0x100>
	
	Enable_global_interrupt();
80004d74:	d5 03       	csrf	0x10
80004d76:	c0 28       	rjmp	80004d7a <main+0x66>
			
			sprintf(text,"Num Sats: %d", data.num_sats);
			
			st7529_put_5x7_text(0,9,text,12);
		}
	}
80004d78:	d7 03       	nop
	INTC_register_interrupt(&usart_timeout_handler, AVR32_USART3_IRQ, AVR32_INTC_INT0);
	
	Enable_global_interrupt();
	
	while(1){
		if(usart_timeout_flag){
80004d7a:	4a 88       	lddpc	r8,80004e18 <main+0x104>
80004d7c:	70 08       	ld.w	r8,r8[0x0]
80004d7e:	58 08       	cp.w	r8,0
80004d80:	cf c0       	breq	80004d78 <main+0x64>
			usart_timeout_flag = 0;
80004d82:	4a 68       	lddpc	r8,80004e18 <main+0x104>
80004d84:	30 09       	mov	r9,0
80004d86:	91 09       	st.w	r8[0x0],r9
			
			sprintf(text,"Time: %d:%d:%f",
					data.hour,data.minute,data.second);
80004d88:	4a 58       	lddpc	r8,80004e1c <main+0x108>
80004d8a:	70 28       	ld.w	r8,r8[0x8]
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80004d8c:	10 9c       	mov	r12,r8
80004d8e:	f0 1f 00 25 	mcall	80004e20 <main+0x10c>
80004d92:	14 98       	mov	r8,r10
80004d94:	16 99       	mov	r9,r11
					data.hour,data.minute,data.second);
80004d96:	4a 2a       	lddpc	r10,80004e1c <main+0x108>
80004d98:	15 ca       	ld.ub	r10,r10[0x4]
80004d9a:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80004d9c:	14 9c       	mov	r12,r10
					data.hour,data.minute,data.second);
80004d9e:	4a 0a       	lddpc	r10,80004e1c <main+0x108>
80004da0:	15 ba       	ld.ub	r10,r10[0x3]
80004da2:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80004da4:	14 9b       	mov	r11,r10
80004da6:	ee ca 00 38 	sub	r10,r7,56
80004daa:	bb 29       	st.d	--sp,r8
80004dac:	1a dc       	st.w	--sp,r12
80004dae:	1a db       	st.w	--sp,r11
80004db0:	49 db       	lddpc	r11,80004e24 <main+0x110>
80004db2:	14 9c       	mov	r12,r10
80004db4:	f0 1f 00 1d 	mcall	80004e28 <main+0x114>
80004db8:	2f cd       	sub	sp,-16
					data.hour,data.minute,data.second);
					
			st7529_put_5x7_text(0,0,text,17);
80004dba:	ee c8 00 38 	sub	r8,r7,56
80004dbe:	31 19       	mov	r9,17
80004dc0:	10 9a       	mov	r10,r8
80004dc2:	30 0b       	mov	r11,0
80004dc4:	30 0c       	mov	r12,0
80004dc6:	f0 1f 00 1a 	mcall	80004e2c <main+0x118>
			
			sprintf(text,"Num Sats: %d", data.num_sats);
80004dca:	49 58       	lddpc	r8,80004e1c <main+0x108>
80004dcc:	f1 38 00 31 	ld.ub	r8,r8[49]
80004dd0:	5c 58       	castu.b	r8
80004dd2:	10 99       	mov	r9,r8
80004dd4:	ee c8 00 38 	sub	r8,r7,56
80004dd8:	1a d9       	st.w	--sp,r9
80004dda:	49 6b       	lddpc	r11,80004e30 <main+0x11c>
80004ddc:	10 9c       	mov	r12,r8
80004dde:	f0 1f 00 13 	mcall	80004e28 <main+0x114>
80004de2:	2f fd       	sub	sp,-4
			
			st7529_put_5x7_text(0,9,text,12);
80004de4:	ee c8 00 38 	sub	r8,r7,56
80004de8:	30 c9       	mov	r9,12
80004dea:	10 9a       	mov	r10,r8
80004dec:	30 9b       	mov	r11,9
80004dee:	30 0c       	mov	r12,0
80004df0:	f0 1f 00 0f 	mcall	80004e2c <main+0x118>
		}
	}
80004df4:	cc 3b       	rjmp	80004d7a <main+0x66>
80004df6:	00 00       	add	r0,r0
80004df8:	80 00       	ld.sh	r0,r0[0x0]
80004dfa:	4f 28       	lddpc	r8,80004fc0 <__avr32_f32_div+0x8c>
80004dfc:	80 00       	ld.sh	r0,r0[0x0]
80004dfe:	4e 34       	lddpc	r4,80004f88 <__avr32_f32_div+0x54>
80004e00:	80 00       	ld.sh	r0,r0[0x0]
80004e02:	3f 7c       	mov	r12,-9
80004e04:	80 00       	ld.sh	r0,r0[0x0]
80004e06:	4e b0       	lddpc	r0,80004fb0 <__avr32_f32_div+0x7c>
80004e08:	80 00       	ld.sh	r0,r0[0x0]
80004e0a:	4f 04       	lddpc	r4,80004fc8 <__avr32_f32_div+0x94>
80004e0c:	80 00       	ld.sh	r0,r0[0x0]
80004e0e:	25 04       	sub	r4,80
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	4c 74       	lddpc	r4,80004f2c <board_init+0x4>
80004e14:	80 00       	ld.sh	r0,r0[0x0]
80004e16:	25 a0       	sub	r0,90
80004e18:	00 00       	add	r0,r0
80004e1a:	06 08       	add	r8,r3
80004e1c:	00 00       	add	r0,r0
80004e1e:	06 44       	or	r4,r3
80004e20:	80 00       	ld.sh	r0,r0[0x0]
80004e22:	53 6a       	stdsp	sp[0xd8],r10
80004e24:	80 00       	ld.sh	r0,r0[0x0]
80004e26:	4c 54       	lddpc	r4,80004f38 <__avr32_f32_div+0x4>
80004e28:	80 00       	ld.sh	r0,r0[0x0]
80004e2a:	56 30       	stdsp	sp[0x18c],r0
80004e2c:	80 00       	ld.sh	r0,r0[0x0]
80004e2e:	48 58       	lddpc	r8,80004e40 <setup_clocks+0xc>
80004e30:	80 00       	ld.sh	r0,r0[0x0]
80004e32:	4c 64       	lddpc	r4,80004f48 <__avr32_f32_div+0x14>

80004e34 <setup_clocks>:
}

void setup_clocks(void){
80004e34:	eb cd 40 80 	pushm	r7,lr
80004e38:	1a 97       	mov	r7,sp
80004e3a:	20 dd       	sub	sp,52
	scif_disable_rc32out();
80004e3c:	f0 1f 00 1b 	mcall	80004ea8 <setup_clocks+0x74>
	
	pcl_freq_param_t pcl_params;
	scif_gclk_opt_t gclk_opts;
	
	pcl_params.main_clk_src = PCL_MC_DFLL0;
80004e40:	30 78       	mov	r8,7
80004e42:	ef 48 ff dc 	st.w	r7[-36],r8
	pcl_params.cpu_f = CPU_FREQ;
80004e46:	e0 68 78 40 	mov	r8,30784
80004e4a:	ea 18 01 7d 	orh	r8,0x17d
80004e4e:	ef 48 ff e0 	st.w	r7[-32],r8
	pcl_params.pba_f = CPU_FREQ;
80004e52:	e0 68 78 40 	mov	r8,30784
80004e56:	ea 18 01 7d 	orh	r8,0x17d
80004e5a:	ef 48 ff e4 	st.w	r7[-28],r8
	pcl_params.pbb_f = CPU_FREQ;
80004e5e:	e0 68 78 40 	mov	r8,30784
80004e62:	ea 18 01 7d 	orh	r8,0x17d
80004e66:	ef 48 ff e8 	st.w	r7[-24],r8
	pcl_params.pbc_f = CPU_FREQ;
80004e6a:	e0 68 78 40 	mov	r8,30784
80004e6e:	ea 18 01 7d 	orh	r8,0x17d
80004e72:	ef 48 ff ec 	st.w	r7[-20],r8
	pcl_params.dfll_f = DFLL_FREQ;
80004e76:	e0 68 e1 00 	mov	r8,57600
80004e7a:	ea 18 05 f5 	orh	r8,0x5f5
80004e7e:	ef 48 ff f8 	st.w	r7[-8],r8
	
	gclk_opts.clock_source = SCIF_GCCTRL_SLOWCLOCK;
80004e82:	30 08       	mov	r8,0
80004e84:	ef 48 ff cc 	st.w	r7[-52],r8
	gclk_opts.diven = false;
80004e88:	30 08       	mov	r8,0
80004e8a:	ef 48 ff d4 	st.w	r7[-44],r8
	
	pcl_params.pextra_params = &gclk_opts;
80004e8e:	ee c8 00 34 	sub	r8,r7,52
80004e92:	ef 48 ff fc 	st.w	r7[-4],r8
	
	pcl_configure_clocks(&pcl_params);
80004e96:	ee c8 00 24 	sub	r8,r7,36
80004e9a:	10 9c       	mov	r12,r8
80004e9c:	f0 1f 00 04 	mcall	80004eac <setup_clocks+0x78>
}
80004ea0:	2f 3d       	sub	sp,-52
80004ea2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ea6:	00 00       	add	r0,r0
80004ea8:	80 00       	ld.sh	r0,r0[0x0]
80004eaa:	33 74       	mov	r4,55
80004eac:	80 00       	ld.sh	r0,r0[0x0]
80004eae:	2b bc       	sub	r12,-69

80004eb0 <setup_gps_uart>:

void setup_gps_uart(void){
80004eb0:	eb cd 40 80 	pushm	r7,lr
80004eb4:	1a 97       	mov	r7,sp
		.paritytype		= USART_NO_PARITY,
		.stopbits		= USART_1_STOPBIT,
		.channelmode	= USART_NORMAL_CHMODE
	};
	
	gpio_enable_module(USART_GPIO_MAP, 2);
80004eb6:	30 2b       	mov	r11,2
80004eb8:	48 fc       	lddpc	r12,80004ef4 <setup_gps_uart+0x44>
80004eba:	f0 1f 00 10 	mcall	80004ef8 <setup_gps_uart+0x48>
	
	usart_init_rs232(&AVR32_USART3, &USART_OPTIONS, CPU_FREQ);
80004ebe:	e0 6a 78 40 	mov	r10,30784
80004ec2:	ea 1a 01 7d 	orh	r10,0x17d
80004ec6:	48 eb       	lddpc	r11,80004efc <setup_gps_uart+0x4c>
80004ec8:	fe 7c 3c 00 	mov	r12,-50176
80004ecc:	f0 1f 00 0d 	mcall	80004f00 <setup_gps_uart+0x50>
	
	(&AVR32_USART3)->ier = AVR32_USART_IER_TIMEOUT_MASK;
80004ed0:	fe 78 3c 00 	mov	r8,-50176
80004ed4:	e0 69 01 00 	mov	r9,256
80004ed8:	91 29       	st.w	r8[0x8],r9
	(&AVR32_USART3)->rtor = 100;
80004eda:	fe 78 3c 00 	mov	r8,-50176
80004ede:	36 49       	mov	r9,100
80004ee0:	91 99       	st.w	r8[0x24],r9
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
80004ee2:	fe 78 3c 00 	mov	r8,-50176
80004ee6:	fe 79 3c 00 	mov	r9,-50176
80004eea:	72 09       	ld.w	r9,r9[0x0]
80004eec:	ab b9       	sbr	r9,0xb
80004eee:	91 09       	st.w	r8[0x0],r9
}
80004ef0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ef4:	80 00       	ld.sh	r0,r0[0x0]
80004ef6:	bb 2c       	st.d	sp++,r12
80004ef8:	80 00       	ld.sh	r0,r0[0x0]
80004efa:	21 8c       	sub	r12,24
80004efc:	80 00       	ld.sh	r0,r0[0x0]
80004efe:	bb 3c       	mul	r12,sp
80004f00:	80 00       	ld.sh	r0,r0[0x0]
80004f02:	35 e8       	mov	r8,94

80004f04 <setup_uart_dma>:

void setup_uart_dma(void){
80004f04:	eb cd 40 80 	pushm	r7,lr
80004f08:	1a 97       	mov	r7,sp
		.size = sizeof(usart_rx_buffer),
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(0, &PDCA_OPTIONS);
80004f0a:	48 5b       	lddpc	r11,80004f1c <setup_uart_dma+0x18>
80004f0c:	30 0c       	mov	r12,0
80004f0e:	f0 1f 00 05 	mcall	80004f20 <setup_uart_dma+0x1c>
	pdca_enable(0);
80004f12:	30 0c       	mov	r12,0
80004f14:	f0 1f 00 04 	mcall	80004f24 <setup_uart_dma+0x20>
80004f18:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f1c:	80 00       	ld.sh	r0,r0[0x0]
80004f1e:	bb 10       	ld.d	r0,--sp
80004f20:	80 00       	ld.sh	r0,r0[0x0]
80004f22:	27 18       	sub	r8,113
80004f24:	80 00       	ld.sh	r0,r0[0x0]
80004f26:	27 e8       	sub	r8,126

80004f28 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
80004f28:	eb cd 40 80 	pushm	r7,lr
80004f2c:	1a 97       	mov	r7,sp
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
80004f2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f32:	d7 03       	nop

80004f34 <__avr32_f32_div>:
80004f34:	f7 ec 20 08 	eor	r8,r11,r12
80004f38:	a1 7c       	lsl	r12,0x1
80004f3a:	a1 7b       	lsl	r11,0x1
80004f3c:	c7 a0       	breq	80005030 <__divsf_return_op1+0x16>
80004f3e:	18 7c       	tst	r12,r12
80004f40:	f9 b9 00 00 	moveq	r9,0
80004f44:	c0 90       	breq	80004f56 <__avr32_f32_div+0x22>
80004f46:	f8 09 16 18 	lsr	r9,r12,0x18
80004f4a:	c7 e0       	breq	80005046 <__divsf_return_op1+0x2c>
80004f4c:	e0 49 00 ff 	cp.w	r9,255
80004f50:	c6 82       	brcc	80005020 <__divsf_return_op1+0x6>
80004f52:	a7 7c       	lsl	r12,0x7
80004f54:	bf bc       	sbr	r12,0x1f
80004f56:	f6 0a 16 18 	lsr	r10,r11,0x18
80004f5a:	c7 e0       	breq	80005056 <__divsf_return_op1+0x3c>
80004f5c:	e0 4a 00 ff 	cp.w	r10,255
80004f60:	c6 62       	brcc	8000502c <__divsf_return_op1+0x12>
80004f62:	a7 7b       	lsl	r11,0x7
80004f64:	bf bb       	sbr	r11,0x1f
80004f66:	58 09       	cp.w	r9,0
80004f68:	f5 bc 00 00 	subfeq	r12,0
80004f6c:	5e 0d       	reteq	0
80004f6e:	1a d5       	st.w	--sp,r5
80004f70:	bb 27       	st.d	--sp,r6
80004f72:	14 19       	sub	r9,r10
80004f74:	28 19       	sub	r9,-127
80004f76:	fc 1a 80 00 	movh	r10,0x8000
80004f7a:	a3 8c       	lsr	r12,0x2
80004f7c:	f6 05 16 02 	lsr	r5,r11,0x2
80004f80:	f4 0b 16 01 	lsr	r11,r10,0x1
80004f84:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80004f88:	5c d6       	com	r6
80004f8a:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80004f8e:	f6 05 06 46 	mulu.d	r6,r11,r5
80004f92:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80004f96:	f6 07 06 46 	mulu.d	r6,r11,r7
80004f9a:	ee 0b 15 02 	lsl	r11,r7,0x2
80004f9e:	f6 05 06 46 	mulu.d	r6,r11,r5
80004fa2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80004fa6:	f6 07 06 46 	mulu.d	r6,r11,r7
80004faa:	ee 0b 15 02 	lsl	r11,r7,0x2
80004fae:	f6 05 06 46 	mulu.d	r6,r11,r5
80004fb2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80004fb6:	f6 07 06 46 	mulu.d	r6,r11,r7
80004fba:	ee 0b 15 02 	lsl	r11,r7,0x2
80004fbe:	f6 05 06 46 	mulu.d	r6,r11,r5
80004fc2:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80004fc6:	f6 07 06 46 	mulu.d	r6,r11,r7
80004fca:	ee 0b 15 02 	lsl	r11,r7,0x2
80004fce:	f6 0c 06 46 	mulu.d	r6,r11,r12
80004fd2:	a5 8c       	lsr	r12,0x4
80004fd4:	ed b7 00 1c 	bld	r7,0x1c
80004fd8:	c0 40       	breq	80004fe0 <__avr32_f32_div+0xac>
80004fda:	a1 77       	lsl	r7,0x1
80004fdc:	20 19       	sub	r9,1
80004fde:	a1 7c       	lsl	r12,0x1
80004fe0:	58 09       	cp.w	r9,0
80004fe2:	e0 8a 00 42 	brle	80005066 <__avr32_f32_div_res_subnormal>
80004fe6:	e0 17 ff e0 	andl	r7,0xffe0
80004fea:	e8 17 00 10 	orl	r7,0x10
80004fee:	ea 07 06 4a 	mulu.d	r10,r5,r7
80004ff2:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80004ff6:	58 0a       	cp.w	r10,0

80004ff8 <__avr32_f32_div_round_subnormal>:
80004ff8:	f8 0b 13 00 	cpc	r11,r12
80004ffc:	5f 3b       	srlo	r11
80004ffe:	ea 0b 17 00 	moveq	r11,r5
80005002:	ee 0c 16 05 	lsr	r12,r7,0x5
80005006:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000500a:	bb 07       	ld.d	r6,sp++
8000500c:	1b 05       	ld.w	r5,sp++
8000500e:	ed b8 00 1f 	bld	r8,0x1f
80005012:	ef bc 00 1f 	bst	r12,0x1f
80005016:	16 0c       	add	r12,r11
80005018:	5e fc       	retal	r12

8000501a <__divsf_return_op1>:
8000501a:	a1 78       	lsl	r8,0x1
8000501c:	5d 0c       	ror	r12
8000501e:	5e fc       	retal	r12
80005020:	5e 1e       	retne	-1
80005022:	fc 19 ff 00 	movh	r9,0xff00
80005026:	12 3b       	cp.w	r11,r9
80005028:	cf 93       	brcs	8000501a <__divsf_return_op1>
8000502a:	5e fe       	retal	-1
8000502c:	5e 0d       	reteq	0
8000502e:	5e fe       	retal	-1
80005030:	18 7c       	tst	r12,r12
80005032:	5e 0e       	reteq	-1
80005034:	f8 09 16 18 	lsr	r9,r12,0x18
80005038:	c0 70       	breq	80005046 <__divsf_return_op1+0x2c>
8000503a:	e0 49 00 ff 	cp.w	r9,255
8000503e:	cf 12       	brcc	80005020 <__divsf_return_op1+0x6>
80005040:	fc 1c ff 00 	movh	r12,0xff00
80005044:	ce bb       	rjmp	8000501a <__divsf_return_op1>
80005046:	a7 7c       	lsl	r12,0x7
80005048:	f8 09 12 00 	clz	r9,r12
8000504c:	f8 09 09 4c 	lsl	r12,r12,r9
80005050:	f2 09 11 01 	rsub	r9,r9,1
80005054:	c8 1b       	rjmp	80004f56 <__avr32_f32_div+0x22>
80005056:	a7 7b       	lsl	r11,0x7
80005058:	f6 0a 12 00 	clz	r10,r11
8000505c:	f6 0a 09 4b 	lsl	r11,r11,r10
80005060:	f4 0a 11 01 	rsub	r10,r10,1
80005064:	c8 5b       	rjmp	80004f6e <__avr32_f32_div+0x3a>

80005066 <__avr32_f32_div_res_subnormal>:
80005066:	5c 39       	neg	r9
80005068:	2f f9       	sub	r9,-1
8000506a:	f1 b9 04 a0 	satu	r9,0x5
8000506e:	f2 0a 11 20 	rsub	r10,r9,32
80005072:	ee 09 0a 47 	lsr	r7,r7,r9
80005076:	f8 0a 09 46 	lsl	r6,r12,r10
8000507a:	f8 09 0a 4c 	lsr	r12,r12,r9
8000507e:	e0 17 ff e0 	andl	r7,0xffe0
80005082:	e8 17 00 10 	orl	r7,0x10
80005086:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000508a:	30 09       	mov	r9,0
8000508c:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80005090:	0c 3a       	cp.w	r10,r6
80005092:	cb 3b       	rjmp	80004ff8 <__avr32_f32_div_round_subnormal>

80005094 <__avr32_f32_sub_from_add>:
80005094:	ee 1b 80 00 	eorh	r11,0x8000

80005098 <__avr32_f32_sub>:
80005098:	f7 ec 20 08 	eor	r8,r11,r12
8000509c:	c6 46       	brmi	80005164 <__avr32_f32_add_from_sub>
8000509e:	18 98       	mov	r8,r12
800050a0:	e6 1c 80 00 	andh	r12,0x8000,COH
800050a4:	bf db       	cbr	r11,0x1f
800050a6:	bf d8       	cbr	r8,0x1f
800050a8:	f0 0b 0c 4a 	max	r10,r8,r11
800050ac:	f0 0b 0d 49 	min	r9,r8,r11
800050b0:	10 3a       	cp.w	r10,r8
800050b2:	f7 bc 01 01 	subne	r12,1
800050b6:	e6 1c 80 00 	andh	r12,0x8000,COH
800050ba:	f4 08 15 08 	lsl	r8,r10,0x8
800050be:	bf b8       	sbr	r8,0x1f
800050c0:	b7 9a       	lsr	r10,0x17
800050c2:	e0 4a 00 ff 	cp.w	r10,255
800050c6:	c3 80       	breq	80005136 <__avr32_f32_sub_op1_nan_or_inf>
800050c8:	f2 0b 15 08 	lsl	r11,r9,0x8
800050cc:	bf bb       	sbr	r11,0x1f
800050ce:	b7 99       	lsr	r9,0x17
800050d0:	1a dc       	st.w	--sp,r12
800050d2:	c2 90       	breq	80005124 <__avr32_f32_sub_op2_subnormal>
800050d4:	f4 09 01 0c 	sub	r12,r10,r9
800050d8:	c0 c0       	breq	800050f0 <__avr32_f32_sub_shift_done>
800050da:	f1 bc 04 a0 	satu	r12,0x5
800050de:	f8 09 11 20 	rsub	r9,r12,32
800050e2:	f6 09 09 49 	lsl	r9,r11,r9
800050e6:	f7 b8 01 01 	subne	r8,1
800050ea:	5f 19       	srne	r9
800050ec:	f6 0c 0a 4b 	lsr	r11,r11,r12

800050f0 <__avr32_f32_sub_shift_done>:
800050f0:	16 18       	sub	r8,r11
800050f2:	1b 0c       	ld.w	r12,sp++
800050f4:	f0 0b 12 00 	clz	r11,r8
800050f8:	5e 3d       	retlo	0
800050fa:	f0 0b 09 48 	lsl	r8,r8,r11
800050fe:	16 1a       	sub	r10,r11
80005100:	e0 8a 00 26 	brle	8000514c <__avr32_f32_sub_subnormal_result>
80005104:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80005108:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
8000510c:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80005110 <__avr32_f32_sub_round>:
80005110:	fc 1a 80 00 	movh	r10,0x8000
80005114:	ed bc 00 00 	bld	r12,0x0
80005118:	f7 ba 01 ff 	subne	r10,-1
8000511c:	14 39       	cp.w	r9,r10
8000511e:	f7 bc 02 ff 	subhs	r12,-1
80005122:	5e fc       	retal	r12

80005124 <__avr32_f32_sub_op2_subnormal>:
80005124:	bf db       	cbr	r11,0x1f
80005126:	f9 b9 01 01 	movne	r9,1
8000512a:	58 0a       	cp.w	r10,0
8000512c:	cd 41       	brne	800050d4 <__avr32_f32_sub+0x3c>
8000512e:	bf d8       	cbr	r8,0x1f
80005130:	f9 ba 01 01 	movne	r10,1
80005134:	cd 0b       	rjmp	800050d4 <__avr32_f32_sub+0x3c>

80005136 <__avr32_f32_sub_op1_nan_or_inf>:
80005136:	f0 0b 15 01 	lsl	r11,r8,0x1
8000513a:	5e 1e       	retne	-1
8000513c:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005140:	f2 0b 16 17 	lsr	r11,r9,0x17
80005144:	e0 4b 00 ff 	cp.w	r11,255
80005148:	5e 1c       	retne	r12
8000514a:	5e fe       	retal	-1

8000514c <__avr32_f32_sub_subnormal_result>:
8000514c:	f4 0a 11 09 	rsub	r10,r10,9
80005150:	f4 0b 11 20 	rsub	r11,r10,32
80005154:	5e 3d       	retlo	0
80005156:	f0 0a 0a 4a 	lsr	r10,r8,r10
8000515a:	14 4c       	or	r12,r10
8000515c:	f0 0b 09 48 	lsl	r8,r8,r11
80005160:	10 49       	or	r9,r8
80005162:	cd 7b       	rjmp	80005110 <__avr32_f32_sub_round>

80005164 <__avr32_f32_add_from_sub>:
80005164:	ee 1b 80 00 	eorh	r11,0x8000

80005168 <__avr32_f32_add>:
80005168:	f7 ec 20 08 	eor	r8,r11,r12
8000516c:	c9 46       	brmi	80005094 <__avr32_f32_sub_from_add>
8000516e:	18 98       	mov	r8,r12
80005170:	e6 1c 80 00 	andh	r12,0x8000,COH
80005174:	bf db       	cbr	r11,0x1f
80005176:	bf d8       	cbr	r8,0x1f
80005178:	f0 0b 0c 4a 	max	r10,r8,r11
8000517c:	f0 0b 0d 49 	min	r9,r8,r11
80005180:	f4 08 15 08 	lsl	r8,r10,0x8
80005184:	bf b8       	sbr	r8,0x1f
80005186:	b7 9a       	lsr	r10,0x17
80005188:	e0 4a 00 ff 	cp.w	r10,255
8000518c:	c2 d0       	breq	800051e6 <__avr32_f32_add_op1_nan_or_inf>
8000518e:	f2 0b 15 08 	lsl	r11,r9,0x8
80005192:	bf bb       	sbr	r11,0x1f
80005194:	b7 99       	lsr	r9,0x17
80005196:	c1 e0       	breq	800051d2 <__avr32_f32_add_op2_subnormal>
80005198:	1a dc       	st.w	--sp,r12
8000519a:	14 29       	rsub	r9,r10
8000519c:	f1 b9 04 a0 	satu	r9,0x5
800051a0:	f6 09 0a 4c 	lsr	r12,r11,r9
800051a4:	f2 09 11 18 	rsub	r9,r9,24
800051a8:	f6 09 09 4b 	lsl	r11,r11,r9
800051ac:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
800051b0:	18 08       	add	r8,r12
800051b2:	1b 0c       	ld.w	r12,sp++
800051b4:	c2 63       	brcs	80005200 <__avr32_f32_add_res_of>
800051b6:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
800051ba:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800051be:	fc 1a 80 00 	movh	r10,0x8000
800051c2:	ed bc 00 00 	bld	r12,0x0
800051c6:	f7 ba 01 ff 	subne	r10,-1
800051ca:	14 3b       	cp.w	r11,r10
800051cc:	f7 bc 02 ff 	subhs	r12,-1
800051d0:	5e fc       	retal	r12

800051d2 <__avr32_f32_add_op2_subnormal>:
800051d2:	bf db       	cbr	r11,0x1f
800051d4:	f9 b9 01 01 	movne	r9,1
800051d8:	58 0a       	cp.w	r10,0
800051da:	cd f1       	brne	80005198 <__avr32_f32_add+0x30>
800051dc:	bf d8       	cbr	r8,0x1f
800051de:	10 0b       	add	r11,r8
800051e0:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
800051e4:	5e fc       	retal	r12

800051e6 <__avr32_f32_add_op1_nan_or_inf>:
800051e6:	f0 0b 15 01 	lsl	r11,r8,0x1
800051ea:	5e 1e       	retne	-1
800051ec:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800051f0:	f2 0b 16 17 	lsr	r11,r9,0x17
800051f4:	e0 4b 00 ff 	cp.w	r11,255
800051f8:	5e 1c       	retne	r12
800051fa:	a9 79       	lsl	r9,0x9
800051fc:	5e 0c       	reteq	r12
800051fe:	5e fe       	retal	-1

80005200 <__avr32_f32_add_res_of>:
80005200:	a1 98       	lsr	r8,0x1
80005202:	2f fa       	sub	r10,-1
80005204:	e0 4a 00 ff 	cp.w	r10,255
80005208:	f9 b8 00 00 	moveq	r8,0
8000520c:	f9 bb 00 00 	moveq	r11,0
80005210:	cd 3b       	rjmp	800051b6 <__avr32_f32_add+0x4e>
80005212:	d7 03       	nop

80005214 <__avr32_f32_mul>:
80005214:	18 98       	mov	r8,r12
80005216:	16 5c       	eor	r12,r11
80005218:	e6 1c 80 00 	andh	r12,0x8000,COH
8000521c:	bf d8       	cbr	r8,0x1f
8000521e:	c6 60       	breq	800052ea <__avr32_f32_mul_op1_zero>
80005220:	bf db       	cbr	r11,0x1f
80005222:	f0 0b 0c 4a 	max	r10,r8,r11
80005226:	f0 0b 0d 49 	min	r9,r8,r11
8000522a:	f4 08 15 08 	lsl	r8,r10,0x8
8000522e:	bf b8       	sbr	r8,0x1f
80005230:	b7 9a       	lsr	r10,0x17
80005232:	e0 4a 00 ff 	cp.w	r10,255
80005236:	c3 d0       	breq	800052b0 <__avr32_f32_mul_op1_nan_or_inf>
80005238:	f2 0b 15 08 	lsl	r11,r9,0x8
8000523c:	bf bb       	sbr	r11,0x1f
8000523e:	b7 99       	lsr	r9,0x17
80005240:	c2 40       	breq	80005288 <__avr32_f32_mul_op2_subnormal>
80005242:	14 09       	add	r9,r10
80005244:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80005248:	f6 08 15 01 	lsl	r8,r11,0x1
8000524c:	f0 0b 17 20 	movhs	r11,r8
80005250:	f7 b9 02 01 	subhs	r9,1
80005254:	a9 8a       	lsr	r10,0x8
80005256:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000525a:	27 e9       	sub	r9,126
8000525c:	e0 8a 00 39 	brle	800052ce <__avr32_f32_mul_res_subnormal>
80005260:	e0 49 00 ff 	cp.w	r9,255
80005264:	c0 f4       	brge	80005282 <__avr32_f32_mul_round+0x14>
80005266:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000526a:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

8000526e <__avr32_f32_mul_round>:
8000526e:	fc 18 80 00 	movh	r8,0x8000
80005272:	ed bc 00 00 	bld	r12,0x0
80005276:	f7 b8 01 ff 	subne	r8,-1
8000527a:	10 3a       	cp.w	r10,r8
8000527c:	f7 bc 02 ff 	subhs	r12,-1
80005280:	5e fc       	retal	r12
80005282:	ea 1c 7f 80 	orh	r12,0x7f80
80005286:	5e fc       	retal	r12

80005288 <__avr32_f32_mul_op2_subnormal>:
80005288:	bf db       	cbr	r11,0x1f
8000528a:	f6 09 12 00 	clz	r9,r11
8000528e:	5e 3d       	retlo	0
80005290:	20 89       	sub	r9,8
80005292:	f6 09 09 4b 	lsl	r11,r11,r9
80005296:	f2 09 11 01 	rsub	r9,r9,1
8000529a:	14 7a       	tst	r10,r10
8000529c:	cd 31       	brne	80005242 <__avr32_f32_mul+0x2e>
8000529e:	bf d8       	cbr	r8,0x1f
800052a0:	f6 0a 12 00 	clz	r10,r11
800052a4:	5e 3d       	retlo	0
800052a6:	f0 0a 09 48 	lsl	r8,r8,r10
800052aa:	f4 0a 11 01 	rsub	r10,r10,1
800052ae:	cc ab       	rjmp	80005242 <__avr32_f32_mul+0x2e>

800052b0 <__avr32_f32_mul_op1_nan_or_inf>:
800052b0:	f0 0b 15 01 	lsl	r11,r8,0x1
800052b4:	5e 1e       	retne	-1
800052b6:	12 79       	tst	r9,r9
800052b8:	5e 0e       	reteq	-1
800052ba:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800052be:	f2 0b 16 17 	lsr	r11,r9,0x17
800052c2:	e0 4b 00 ff 	cp.w	r11,255
800052c6:	5e 1c       	retne	r12
800052c8:	a9 79       	lsl	r9,0x9
800052ca:	5e 0c       	reteq	r12
800052cc:	5e fe       	retal	-1

800052ce <__avr32_f32_mul_res_subnormal>:
800052ce:	f2 09 11 09 	rsub	r9,r9,9
800052d2:	f2 08 11 20 	rsub	r8,r9,32
800052d6:	5e 3d       	retlo	0
800052d8:	f6 09 0a 49 	lsr	r9,r11,r9
800052dc:	12 4c       	or	r12,r9
800052de:	f6 08 09 4b 	lsl	r11,r11,r8
800052e2:	e4 1a 00 ff 	andh	r10,0xff
800052e6:	16 4a       	or	r10,r11
800052e8:	cc 3b       	rjmp	8000526e <__avr32_f32_mul_round>

800052ea <__avr32_f32_mul_op1_zero>:
800052ea:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
800052ee:	e0 4a 00 ff 	cp.w	r10,255
800052f2:	5e 1c       	retne	r12
800052f4:	5e 0e       	reteq	-1

800052f6 <__avr32_s32_to_f32>:
800052f6:	58 0c       	cp.w	r12,0
800052f8:	5e 0c       	reteq	r12
800052fa:	18 9b       	mov	r11,r12
800052fc:	5c 4c       	abs	r12
800052fe:	e0 6a 00 9e 	mov	r10,158
80005302:	f8 09 12 00 	clz	r9,r12
80005306:	12 1a       	sub	r10,r9
80005308:	f8 09 09 4c 	lsl	r12,r12,r9
8000530c:	58 0a       	cp.w	r10,0
8000530e:	e0 8a 00 15 	brle	80005338 <__avr32_s32_to_f32_subnormal>
80005312:	37 f9       	mov	r9,127
80005314:	ed bc 00 08 	bld	r12,0x8
80005318:	f7 b9 00 ff 	subeq	r9,-1
8000531c:	12 0c       	add	r12,r9
8000531e:	f7 ba 03 fe 	sublo	r10,-2
80005322:	ed bc 00 1f 	bld	r12,0x1f
80005326:	f7 ba 01 01 	subne	r10,1
8000532a:	f8 0c 16 07 	lsr	r12,r12,0x7
8000532e:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80005332:	a1 7b       	lsl	r11,0x1
80005334:	5d 0c       	ror	r12
80005336:	5e fc       	retal	r12

80005338 <__avr32_s32_to_f32_subnormal>:
80005338:	f4 0a 11 01 	rsub	r10,r10,1
8000533c:	59 9a       	cp.w	r10,25
8000533e:	f9 bc 02 00 	movhs	r12,0
80005342:	c1 32       	brcc	80005368 <__avr32_s32_to_f32_subnormal+0x30>
80005344:	f4 09 11 20 	rsub	r9,r10,32
80005348:	f8 09 09 49 	lsl	r9,r12,r9
8000534c:	5f 19       	srne	r9
8000534e:	f8 0a 0a 4c 	lsr	r12,r12,r10
80005352:	12 4c       	or	r12,r9
80005354:	37 f9       	mov	r9,127
80005356:	ed bc 00 08 	bld	r12,0x8
8000535a:	f7 b9 00 ff 	subeq	r9,-1
8000535e:	12 0c       	add	r12,r9
80005360:	f8 0c 16 07 	lsr	r12,r12,0x7
80005364:	a1 7b       	lsl	r11,0x1
80005366:	5d 0c       	ror	r12
80005368:	5e fc       	retal	r12

8000536a <__avr32_f32_to_f64>:
8000536a:	f8 0b 15 01 	lsl	r11,r12,0x1
8000536e:	f9 ba 00 00 	moveq	r10,0
80005372:	5e 0b       	reteq	r11
80005374:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80005378:	e0 49 00 ff 	cp.w	r9,255
8000537c:	c1 e0       	breq	800053b8 <__extendsfdf_return_op1+0x6>
8000537e:	a7 7b       	lsl	r11,0x7
80005380:	30 0a       	mov	r10,0
80005382:	58 09       	cp.w	r9,0
80005384:	f7 b9 00 ff 	subeq	r9,-1
80005388:	5f 18       	srne	r8
8000538a:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
8000538e:	fe 39 fc 80 	sub	r9,-896
80005392:	f6 08 12 00 	clz	r8,r11
80005396:	10 19       	sub	r9,r8
80005398:	f6 08 09 4b 	lsl	r11,r11,r8
8000539c:	ed bb 00 1f 	bld	r11,0x1f
800053a0:	f7 b9 01 01 	subne	r9,1
800053a4:	ab 9a       	lsr	r10,0xb
800053a6:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800053aa:	a1 7b       	lsl	r11,0x1
800053ac:	ab 9b       	lsr	r11,0xb
800053ae:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800053b2 <__extendsfdf_return_op1>:
800053b2:	a1 7c       	lsl	r12,0x1
800053b4:	5d 0b       	ror	r11
800053b6:	5e fb       	retal	r11
800053b8:	fc 1a ff e0 	movh	r10,0xffe0
800053bc:	a9 6b       	lsl	r11,0x8
800053be:	f9 bb 01 ff 	movne	r11,-1
800053c2:	f4 0b 17 00 	moveq	r11,r10
800053c6:	30 0a       	mov	r10,0
800053c8:	cf 5b       	rjmp	800053b2 <__extendsfdf_return_op1>

800053ca <__avr32_udiv64>:
800053ca:	d4 31       	pushm	r0-r7,lr
800053cc:	1a 97       	mov	r7,sp
800053ce:	20 3d       	sub	sp,12
800053d0:	10 9c       	mov	r12,r8
800053d2:	12 9e       	mov	lr,r9
800053d4:	14 93       	mov	r3,r10
800053d6:	58 09       	cp.w	r9,0
800053d8:	e0 81 00 bd 	brne	80005552 <__avr32_udiv64+0x188>
800053dc:	16 38       	cp.w	r8,r11
800053de:	e0 88 00 40 	brls	8000545e <__avr32_udiv64+0x94>
800053e2:	f0 08 12 00 	clz	r8,r8
800053e6:	c0 d0       	breq	80005400 <__avr32_udiv64+0x36>
800053e8:	f6 08 09 4b 	lsl	r11,r11,r8
800053ec:	f0 09 11 20 	rsub	r9,r8,32
800053f0:	f8 08 09 4c 	lsl	r12,r12,r8
800053f4:	f4 09 0a 49 	lsr	r9,r10,r9
800053f8:	f4 08 09 43 	lsl	r3,r10,r8
800053fc:	f3 eb 10 0b 	or	r11,r9,r11
80005400:	f8 0e 16 10 	lsr	lr,r12,0x10
80005404:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005408:	f6 0e 0d 00 	divu	r0,r11,lr
8000540c:	e6 0b 16 10 	lsr	r11,r3,0x10
80005410:	00 99       	mov	r9,r0
80005412:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005416:	e0 0a 02 48 	mul	r8,r0,r10
8000541a:	10 3b       	cp.w	r11,r8
8000541c:	c0 a2       	brcc	80005430 <__avr32_udiv64+0x66>
8000541e:	20 19       	sub	r9,1
80005420:	18 0b       	add	r11,r12
80005422:	18 3b       	cp.w	r11,r12
80005424:	c0 63       	brcs	80005430 <__avr32_udiv64+0x66>
80005426:	10 3b       	cp.w	r11,r8
80005428:	f7 b9 03 01 	sublo	r9,1
8000542c:	f7 dc e3 0b 	addcs	r11,r11,r12
80005430:	f6 08 01 01 	sub	r1,r11,r8
80005434:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80005438:	e2 0e 0d 00 	divu	r0,r1,lr
8000543c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80005440:	00 98       	mov	r8,r0
80005442:	e0 0a 02 4a 	mul	r10,r0,r10
80005446:	14 33       	cp.w	r3,r10
80005448:	c0 82       	brcc	80005458 <__avr32_udiv64+0x8e>
8000544a:	20 18       	sub	r8,1
8000544c:	18 03       	add	r3,r12
8000544e:	18 33       	cp.w	r3,r12
80005450:	c0 43       	brcs	80005458 <__avr32_udiv64+0x8e>
80005452:	14 33       	cp.w	r3,r10
80005454:	f7 b8 03 01 	sublo	r8,1
80005458:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000545c:	cd f8       	rjmp	8000561a <__avr32_udiv64+0x250>
8000545e:	58 08       	cp.w	r8,0
80005460:	c0 51       	brne	8000546a <__avr32_udiv64+0xa0>
80005462:	30 19       	mov	r9,1
80005464:	f2 08 0d 08 	divu	r8,r9,r8
80005468:	10 9c       	mov	r12,r8
8000546a:	f8 06 12 00 	clz	r6,r12
8000546e:	c0 41       	brne	80005476 <__avr32_udiv64+0xac>
80005470:	18 1b       	sub	r11,r12
80005472:	30 19       	mov	r9,1
80005474:	c4 08       	rjmp	800054f4 <__avr32_udiv64+0x12a>
80005476:	ec 01 11 20 	rsub	r1,r6,32
8000547a:	f4 01 0a 49 	lsr	r9,r10,r1
8000547e:	f8 06 09 4c 	lsl	r12,r12,r6
80005482:	f6 06 09 48 	lsl	r8,r11,r6
80005486:	f6 01 0a 41 	lsr	r1,r11,r1
8000548a:	f3 e8 10 08 	or	r8,r9,r8
8000548e:	f8 03 16 10 	lsr	r3,r12,0x10
80005492:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80005496:	e2 03 0d 00 	divu	r0,r1,r3
8000549a:	f0 0b 16 10 	lsr	r11,r8,0x10
8000549e:	00 9e       	mov	lr,r0
800054a0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800054a4:	e0 05 02 49 	mul	r9,r0,r5
800054a8:	12 3b       	cp.w	r11,r9
800054aa:	c0 a2       	brcc	800054be <__avr32_udiv64+0xf4>
800054ac:	20 1e       	sub	lr,1
800054ae:	18 0b       	add	r11,r12
800054b0:	18 3b       	cp.w	r11,r12
800054b2:	c0 63       	brcs	800054be <__avr32_udiv64+0xf4>
800054b4:	12 3b       	cp.w	r11,r9
800054b6:	f7 be 03 01 	sublo	lr,1
800054ba:	f7 dc e3 0b 	addcs	r11,r11,r12
800054be:	12 1b       	sub	r11,r9
800054c0:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800054c4:	f6 03 0d 02 	divu	r2,r11,r3
800054c8:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800054cc:	04 99       	mov	r9,r2
800054ce:	e4 05 02 4b 	mul	r11,r2,r5
800054d2:	16 38       	cp.w	r8,r11
800054d4:	c0 a2       	brcc	800054e8 <__avr32_udiv64+0x11e>
800054d6:	20 19       	sub	r9,1
800054d8:	18 08       	add	r8,r12
800054da:	18 38       	cp.w	r8,r12
800054dc:	c0 63       	brcs	800054e8 <__avr32_udiv64+0x11e>
800054de:	16 38       	cp.w	r8,r11
800054e0:	f7 b9 03 01 	sublo	r9,1
800054e4:	f1 dc e3 08 	addcs	r8,r8,r12
800054e8:	f4 06 09 43 	lsl	r3,r10,r6
800054ec:	f0 0b 01 0b 	sub	r11,r8,r11
800054f0:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800054f4:	f8 06 16 10 	lsr	r6,r12,0x10
800054f8:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800054fc:	f6 06 0d 00 	divu	r0,r11,r6
80005500:	e6 0b 16 10 	lsr	r11,r3,0x10
80005504:	00 9a       	mov	r10,r0
80005506:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000550a:	e0 0e 02 48 	mul	r8,r0,lr
8000550e:	10 3b       	cp.w	r11,r8
80005510:	c0 a2       	brcc	80005524 <__avr32_udiv64+0x15a>
80005512:	20 1a       	sub	r10,1
80005514:	18 0b       	add	r11,r12
80005516:	18 3b       	cp.w	r11,r12
80005518:	c0 63       	brcs	80005524 <__avr32_udiv64+0x15a>
8000551a:	10 3b       	cp.w	r11,r8
8000551c:	f7 ba 03 01 	sublo	r10,1
80005520:	f7 dc e3 0b 	addcs	r11,r11,r12
80005524:	f6 08 01 01 	sub	r1,r11,r8
80005528:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000552c:	e2 06 0d 00 	divu	r0,r1,r6
80005530:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80005534:	00 98       	mov	r8,r0
80005536:	e0 0e 02 4b 	mul	r11,r0,lr
8000553a:	16 33       	cp.w	r3,r11
8000553c:	c0 82       	brcc	8000554c <__avr32_udiv64+0x182>
8000553e:	20 18       	sub	r8,1
80005540:	18 03       	add	r3,r12
80005542:	18 33       	cp.w	r3,r12
80005544:	c0 43       	brcs	8000554c <__avr32_udiv64+0x182>
80005546:	16 33       	cp.w	r3,r11
80005548:	f7 b8 03 01 	sublo	r8,1
8000554c:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80005550:	c6 98       	rjmp	80005622 <__avr32_udiv64+0x258>
80005552:	16 39       	cp.w	r9,r11
80005554:	e0 8b 00 65 	brhi	8000561e <__avr32_udiv64+0x254>
80005558:	f2 09 12 00 	clz	r9,r9
8000555c:	c0 b1       	brne	80005572 <__avr32_udiv64+0x1a8>
8000555e:	10 3a       	cp.w	r10,r8
80005560:	5f 2a       	srhs	r10
80005562:	1c 3b       	cp.w	r11,lr
80005564:	5f b8       	srhi	r8
80005566:	10 4a       	or	r10,r8
80005568:	f2 0a 18 00 	cp.b	r10,r9
8000556c:	c5 90       	breq	8000561e <__avr32_udiv64+0x254>
8000556e:	30 18       	mov	r8,1
80005570:	c5 98       	rjmp	80005622 <__avr32_udiv64+0x258>
80005572:	f0 09 09 46 	lsl	r6,r8,r9
80005576:	f2 03 11 20 	rsub	r3,r9,32
8000557a:	fc 09 09 4e 	lsl	lr,lr,r9
8000557e:	f0 03 0a 48 	lsr	r8,r8,r3
80005582:	f6 09 09 4c 	lsl	r12,r11,r9
80005586:	f4 03 0a 42 	lsr	r2,r10,r3
8000558a:	ef 46 ff f4 	st.w	r7[-12],r6
8000558e:	f6 03 0a 43 	lsr	r3,r11,r3
80005592:	18 42       	or	r2,r12
80005594:	f1 ee 10 0c 	or	r12,r8,lr
80005598:	f8 01 16 10 	lsr	r1,r12,0x10
8000559c:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800055a0:	e6 01 0d 04 	divu	r4,r3,r1
800055a4:	e4 03 16 10 	lsr	r3,r2,0x10
800055a8:	08 9e       	mov	lr,r4
800055aa:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800055ae:	e8 06 02 48 	mul	r8,r4,r6
800055b2:	10 33       	cp.w	r3,r8
800055b4:	c0 a2       	brcc	800055c8 <__avr32_udiv64+0x1fe>
800055b6:	20 1e       	sub	lr,1
800055b8:	18 03       	add	r3,r12
800055ba:	18 33       	cp.w	r3,r12
800055bc:	c0 63       	brcs	800055c8 <__avr32_udiv64+0x1fe>
800055be:	10 33       	cp.w	r3,r8
800055c0:	f7 be 03 01 	sublo	lr,1
800055c4:	e7 dc e3 03 	addcs	r3,r3,r12
800055c8:	10 13       	sub	r3,r8
800055ca:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800055ce:	e6 01 0d 00 	divu	r0,r3,r1
800055d2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800055d6:	00 98       	mov	r8,r0
800055d8:	e0 06 02 46 	mul	r6,r0,r6
800055dc:	0c 3b       	cp.w	r11,r6
800055de:	c0 a2       	brcc	800055f2 <__avr32_udiv64+0x228>
800055e0:	20 18       	sub	r8,1
800055e2:	18 0b       	add	r11,r12
800055e4:	18 3b       	cp.w	r11,r12
800055e6:	c0 63       	brcs	800055f2 <__avr32_udiv64+0x228>
800055e8:	0c 3b       	cp.w	r11,r6
800055ea:	f7 dc e3 0b 	addcs	r11,r11,r12
800055ee:	f7 b8 03 01 	sublo	r8,1
800055f2:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800055f6:	ee f4 ff f4 	ld.w	r4,r7[-12]
800055fa:	0c 1b       	sub	r11,r6
800055fc:	f0 04 06 42 	mulu.d	r2,r8,r4
80005600:	06 95       	mov	r5,r3
80005602:	16 35       	cp.w	r5,r11
80005604:	e0 8b 00 0a 	brhi	80005618 <__avr32_udiv64+0x24e>
80005608:	5f 0b       	sreq	r11
8000560a:	f4 09 09 49 	lsl	r9,r10,r9
8000560e:	12 32       	cp.w	r2,r9
80005610:	5f b9       	srhi	r9
80005612:	f7 e9 00 09 	and	r9,r11,r9
80005616:	c0 60       	breq	80005622 <__avr32_udiv64+0x258>
80005618:	20 18       	sub	r8,1
8000561a:	30 09       	mov	r9,0
8000561c:	c0 38       	rjmp	80005622 <__avr32_udiv64+0x258>
8000561e:	30 09       	mov	r9,0
80005620:	12 98       	mov	r8,r9
80005622:	10 9a       	mov	r10,r8
80005624:	12 93       	mov	r3,r9
80005626:	10 92       	mov	r2,r8
80005628:	12 9b       	mov	r11,r9
8000562a:	2f dd       	sub	sp,-12
8000562c:	d8 32       	popm	r0-r7,pc
8000562e:	d7 03       	nop

80005630 <sprintf>:
80005630:	d4 01       	pushm	lr
80005632:	21 7d       	sub	sp,92
80005634:	e0 68 ff ff 	mov	r8,65535
80005638:	ea 18 7f ff 	orh	r8,0x7fff
8000563c:	50 58       	stdsp	sp[0x14],r8
8000563e:	50 28       	stdsp	sp[0x8],r8
80005640:	e0 68 02 08 	mov	r8,520
80005644:	ba 68       	st.h	sp[0xc],r8
80005646:	3f f8       	mov	r8,-1
80005648:	ba 78       	st.h	sp[0xe],r8
8000564a:	48 88       	lddpc	r8,80005668 <sprintf+0x38>
8000564c:	50 4c       	stdsp	sp[0x10],r12
8000564e:	16 9a       	mov	r10,r11
80005650:	50 0c       	stdsp	sp[0x0],r12
80005652:	fa c9 ff a0 	sub	r9,sp,-96
80005656:	70 0c       	ld.w	r12,r8[0x0]
80005658:	1a 9b       	mov	r11,sp
8000565a:	ca 7d       	rcall	800059a8 <_vfprintf_r>
8000565c:	30 09       	mov	r9,0
8000565e:	40 08       	lddsp	r8,sp[0x0]
80005660:	b0 89       	st.b	r8[0x0],r9
80005662:	2e 9d       	sub	sp,-92
80005664:	d8 02       	popm	pc
80005666:	d7 03       	nop
80005668:	00 00       	add	r0,r0
8000566a:	00 f8       	st.b	--r0,r8

8000566c <get_arg>:
8000566c:	d4 31       	pushm	r0-r7,lr
8000566e:	20 8d       	sub	sp,32
80005670:	fa c4 ff bc 	sub	r4,sp,-68
80005674:	50 4b       	stdsp	sp[0x10],r11
80005676:	68 2e       	ld.w	lr,r4[0x8]
80005678:	50 58       	stdsp	sp[0x14],r8
8000567a:	12 96       	mov	r6,r9
8000567c:	7c 0b       	ld.w	r11,lr[0x0]
8000567e:	70 05       	ld.w	r5,r8[0x0]
80005680:	50 6e       	stdsp	sp[0x18],lr
80005682:	58 0b       	cp.w	r11,0
80005684:	f4 0b 17 00 	moveq	r11,r10
80005688:	68 03       	ld.w	r3,r4[0x0]
8000568a:	68 11       	ld.w	r1,r4[0x4]
8000568c:	40 49       	lddsp	r9,sp[0x10]
8000568e:	30 08       	mov	r8,0
80005690:	c2 e9       	rjmp	800058ec <get_arg+0x280>
80005692:	2f fb       	sub	r11,-1
80005694:	32 5c       	mov	r12,37
80005696:	17 8a       	ld.ub	r10,r11[0x0]
80005698:	f8 0a 18 00 	cp.b	r10,r12
8000569c:	5f 1e       	srne	lr
8000569e:	f0 0a 18 00 	cp.b	r10,r8
800056a2:	5f 1c       	srne	r12
800056a4:	fd ec 00 0c 	and	r12,lr,r12
800056a8:	f0 0c 18 00 	cp.b	r12,r8
800056ac:	cf 31       	brne	80005692 <get_arg+0x26>
800056ae:	58 0a       	cp.w	r10,0
800056b0:	e0 80 01 2b 	breq	80005906 <get_arg+0x29a>
800056b4:	30 0c       	mov	r12,0
800056b6:	3f fa       	mov	r10,-1
800056b8:	18 90       	mov	r0,r12
800056ba:	50 3a       	stdsp	sp[0xc],r10
800056bc:	18 94       	mov	r4,r12
800056be:	18 92       	mov	r2,r12
800056c0:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800056c4:	16 97       	mov	r7,r11
800056c6:	50 7c       	stdsp	sp[0x1c],r12
800056c8:	4c ec       	lddpc	r12,80005800 <get_arg+0x194>
800056ca:	0f 3a       	ld.ub	r10,r7++
800056cc:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800056d0:	40 7c       	lddsp	r12,sp[0x1c]
800056d2:	1c 0c       	add	r12,lr
800056d4:	4c ce       	lddpc	lr,80005804 <get_arg+0x198>
800056d6:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800056da:	20 1e       	sub	lr,1
800056dc:	50 0e       	stdsp	sp[0x0],lr
800056de:	4c be       	lddpc	lr,80005808 <get_arg+0x19c>
800056e0:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800056e4:	50 7c       	stdsp	sp[0x1c],r12
800056e6:	40 0c       	lddsp	r12,sp[0x0]
800056e8:	58 7c       	cp.w	r12,7
800056ea:	e0 8b 00 fa 	brhi	800058de <get_arg+0x272>
800056ee:	4c 8e       	lddpc	lr,8000580c <get_arg+0x1a0>
800056f0:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800056f4:	36 8b       	mov	r11,104
800056f6:	f6 0a 18 00 	cp.b	r10,r11
800056fa:	e0 80 00 f2 	breq	800058de <get_arg+0x272>
800056fe:	37 1b       	mov	r11,113
80005700:	f6 0a 18 00 	cp.b	r10,r11
80005704:	c0 70       	breq	80005712 <get_arg+0xa6>
80005706:	34 cb       	mov	r11,76
80005708:	f6 0a 18 00 	cp.b	r10,r11
8000570c:	c0 51       	brne	80005716 <get_arg+0xaa>
8000570e:	a3 b4       	sbr	r4,0x3
80005710:	ce 78       	rjmp	800058de <get_arg+0x272>
80005712:	a5 b4       	sbr	r4,0x5
80005714:	ce 58       	rjmp	800058de <get_arg+0x272>
80005716:	08 9a       	mov	r10,r4
80005718:	0e 9b       	mov	r11,r7
8000571a:	a5 aa       	sbr	r10,0x4
8000571c:	17 3c       	ld.ub	r12,r11++
8000571e:	a5 b4       	sbr	r4,0x5
80005720:	36 ce       	mov	lr,108
80005722:	fc 0c 18 00 	cp.b	r12,lr
80005726:	e0 80 00 dd 	breq	800058e0 <get_arg+0x274>
8000572a:	14 94       	mov	r4,r10
8000572c:	cd 98       	rjmp	800058de <get_arg+0x272>
8000572e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80005732:	36 7c       	mov	r12,103
80005734:	f8 0a 18 00 	cp.b	r10,r12
80005738:	e0 8b 00 27 	brhi	80005786 <get_arg+0x11a>
8000573c:	36 5b       	mov	r11,101
8000573e:	f6 0a 18 00 	cp.b	r10,r11
80005742:	c4 82       	brcc	800057d2 <get_arg+0x166>
80005744:	34 fb       	mov	r11,79
80005746:	f6 0a 18 00 	cp.b	r10,r11
8000574a:	c4 80       	breq	800057da <get_arg+0x16e>
8000574c:	e0 8b 00 0c 	brhi	80005764 <get_arg+0xf8>
80005750:	34 5b       	mov	r11,69
80005752:	f6 0a 18 00 	cp.b	r10,r11
80005756:	c3 e0       	breq	800057d2 <get_arg+0x166>
80005758:	34 7b       	mov	r11,71
8000575a:	f6 0a 18 00 	cp.b	r10,r11
8000575e:	c3 a0       	breq	800057d2 <get_arg+0x166>
80005760:	34 4b       	mov	r11,68
80005762:	c0 88       	rjmp	80005772 <get_arg+0x106>
80005764:	35 8b       	mov	r11,88
80005766:	f6 0a 18 00 	cp.b	r10,r11
8000576a:	c2 c0       	breq	800057c2 <get_arg+0x156>
8000576c:	e0 8b 00 07 	brhi	8000577a <get_arg+0x10e>
80005770:	35 5b       	mov	r11,85
80005772:	f6 0a 18 00 	cp.b	r10,r11
80005776:	c3 51       	brne	800057e0 <get_arg+0x174>
80005778:	c3 18       	rjmp	800057da <get_arg+0x16e>
8000577a:	36 3b       	mov	r11,99
8000577c:	f6 0a 18 00 	cp.b	r10,r11
80005780:	c2 f0       	breq	800057de <get_arg+0x172>
80005782:	36 4b       	mov	r11,100
80005784:	c0 e8       	rjmp	800057a0 <get_arg+0x134>
80005786:	37 0b       	mov	r11,112
80005788:	f6 0a 18 00 	cp.b	r10,r11
8000578c:	c2 50       	breq	800057d6 <get_arg+0x16a>
8000578e:	e0 8b 00 0d 	brhi	800057a8 <get_arg+0x13c>
80005792:	36 eb       	mov	r11,110
80005794:	f6 0a 18 00 	cp.b	r10,r11
80005798:	c1 f0       	breq	800057d6 <get_arg+0x16a>
8000579a:	e0 8b 00 14 	brhi	800057c2 <get_arg+0x156>
8000579e:	36 9b       	mov	r11,105
800057a0:	f6 0a 18 00 	cp.b	r10,r11
800057a4:	c1 e1       	brne	800057e0 <get_arg+0x174>
800057a6:	c0 e8       	rjmp	800057c2 <get_arg+0x156>
800057a8:	37 5b       	mov	r11,117
800057aa:	f6 0a 18 00 	cp.b	r10,r11
800057ae:	c0 a0       	breq	800057c2 <get_arg+0x156>
800057b0:	37 8b       	mov	r11,120
800057b2:	f6 0a 18 00 	cp.b	r10,r11
800057b6:	c0 60       	breq	800057c2 <get_arg+0x156>
800057b8:	37 3b       	mov	r11,115
800057ba:	f6 0a 18 00 	cp.b	r10,r11
800057be:	c1 11       	brne	800057e0 <get_arg+0x174>
800057c0:	c0 b8       	rjmp	800057d6 <get_arg+0x16a>
800057c2:	ed b4 00 04 	bld	r4,0x4
800057c6:	c0 a0       	breq	800057da <get_arg+0x16e>
800057c8:	ed b4 00 05 	bld	r4,0x5
800057cc:	c0 91       	brne	800057de <get_arg+0x172>
800057ce:	30 20       	mov	r0,2
800057d0:	c0 88       	rjmp	800057e0 <get_arg+0x174>
800057d2:	30 40       	mov	r0,4
800057d4:	c0 68       	rjmp	800057e0 <get_arg+0x174>
800057d6:	30 30       	mov	r0,3
800057d8:	c0 48       	rjmp	800057e0 <get_arg+0x174>
800057da:	30 10       	mov	r0,1
800057dc:	c0 28       	rjmp	800057e0 <get_arg+0x174>
800057de:	30 00       	mov	r0,0
800057e0:	40 3b       	lddsp	r11,sp[0xc]
800057e2:	5b fb       	cp.w	r11,-1
800057e4:	c0 40       	breq	800057ec <get_arg+0x180>
800057e6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800057ea:	c7 a8       	rjmp	800058de <get_arg+0x272>
800057ec:	58 60       	cp.w	r0,6
800057ee:	e0 8b 00 78 	brhi	800058de <get_arg+0x272>
800057f2:	6c 0a       	ld.w	r10,r6[0x0]
800057f4:	ea cc ff ff 	sub	r12,r5,-1
800057f8:	48 6e       	lddpc	lr,80005810 <get_arg+0x1a4>
800057fa:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800057fe:	d7 03       	nop
80005800:	80 00       	ld.sh	r0,r0[0x0]
80005802:	be 1c       	st.h	pc[0x2],r12
80005804:	80 00       	ld.sh	r0,r0[0x0]
80005806:	bd 54       	asr	r4,0x1d
80005808:	80 00       	ld.sh	r0,r0[0x0]
8000580a:	bc e8       	st.b	lr[0x6],r8
8000580c:	80 00       	ld.sh	r0,r0[0x0]
8000580e:	bb 48       	asr	r8,0x1a
80005810:	80 00       	ld.sh	r0,r0[0x0]
80005812:	bb 68       	lsl	r8,0x1a
80005814:	f4 cb ff f8 	sub	r11,r10,-8
80005818:	8d 0b       	st.w	r6[0x0],r11
8000581a:	f4 ea 00 00 	ld.d	r10,r10[0]
8000581e:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005822:	c0 f8       	rjmp	80005840 <get_arg+0x1d4>
80005824:	f4 cb ff fc 	sub	r11,r10,-4
80005828:	8d 0b       	st.w	r6[0x0],r11
8000582a:	74 0a       	ld.w	r10,r10[0x0]
8000582c:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005830:	c0 88       	rjmp	80005840 <get_arg+0x1d4>
80005832:	f4 cb ff f8 	sub	r11,r10,-8
80005836:	8d 0b       	st.w	r6[0x0],r11
80005838:	f4 ea 00 00 	ld.d	r10,r10[0]
8000583c:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005840:	0e 9b       	mov	r11,r7
80005842:	18 95       	mov	r5,r12
80005844:	c4 e8       	rjmp	800058e0 <get_arg+0x274>
80005846:	62 0a       	ld.w	r10,r1[0x0]
80005848:	5b fa       	cp.w	r10,-1
8000584a:	c0 b1       	brne	80005860 <get_arg+0x1f4>
8000584c:	50 19       	stdsp	sp[0x4],r9
8000584e:	50 28       	stdsp	sp[0x8],r8
80005850:	e0 6a 00 80 	mov	r10,128
80005854:	30 0b       	mov	r11,0
80005856:	02 9c       	mov	r12,r1
80005858:	e0 a0 1e 30 	rcall	800094b8 <memset>
8000585c:	40 28       	lddsp	r8,sp[0x8]
8000585e:	40 19       	lddsp	r9,sp[0x4]
80005860:	e4 cc 00 01 	sub	r12,r2,1
80005864:	0e 9b       	mov	r11,r7
80005866:	50 3c       	stdsp	sp[0xc],r12
80005868:	f2 0c 0c 49 	max	r9,r9,r12
8000586c:	c3 a8       	rjmp	800058e0 <get_arg+0x274>
8000586e:	62 0a       	ld.w	r10,r1[0x0]
80005870:	5b fa       	cp.w	r10,-1
80005872:	c0 b1       	brne	80005888 <get_arg+0x21c>
80005874:	50 19       	stdsp	sp[0x4],r9
80005876:	50 28       	stdsp	sp[0x8],r8
80005878:	e0 6a 00 80 	mov	r10,128
8000587c:	30 0b       	mov	r11,0
8000587e:	02 9c       	mov	r12,r1
80005880:	e0 a0 1e 1c 	rcall	800094b8 <memset>
80005884:	40 28       	lddsp	r8,sp[0x8]
80005886:	40 19       	lddsp	r9,sp[0x4]
80005888:	20 12       	sub	r2,1
8000588a:	30 0a       	mov	r10,0
8000588c:	0e 9b       	mov	r11,r7
8000588e:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80005892:	f2 02 0c 49 	max	r9,r9,r2
80005896:	c2 58       	rjmp	800058e0 <get_arg+0x274>
80005898:	16 97       	mov	r7,r11
8000589a:	6c 0a       	ld.w	r10,r6[0x0]
8000589c:	f4 cb ff fc 	sub	r11,r10,-4
800058a0:	8d 0b       	st.w	r6[0x0],r11
800058a2:	74 0a       	ld.w	r10,r10[0x0]
800058a4:	0e 9b       	mov	r11,r7
800058a6:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800058aa:	2f f5       	sub	r5,-1
800058ac:	c1 a8       	rjmp	800058e0 <get_arg+0x274>
800058ae:	f4 c2 00 30 	sub	r2,r10,48
800058b2:	c0 68       	rjmp	800058be <get_arg+0x252>
800058b4:	e4 02 00 22 	add	r2,r2,r2<<0x2
800058b8:	2f f7       	sub	r7,-1
800058ba:	f4 02 00 12 	add	r2,r10,r2<<0x1
800058be:	0f 8a       	ld.ub	r10,r7[0x0]
800058c0:	58 0a       	cp.w	r10,0
800058c2:	c0 e0       	breq	800058de <get_arg+0x272>
800058c4:	23 0a       	sub	r10,48
800058c6:	58 9a       	cp.w	r10,9
800058c8:	fe 98 ff f6 	brls	800058b4 <get_arg+0x248>
800058cc:	c0 98       	rjmp	800058de <get_arg+0x272>
800058ce:	2f f7       	sub	r7,-1
800058d0:	0f 8a       	ld.ub	r10,r7[0x0]
800058d2:	58 0a       	cp.w	r10,0
800058d4:	c0 50       	breq	800058de <get_arg+0x272>
800058d6:	23 0a       	sub	r10,48
800058d8:	58 9a       	cp.w	r10,9
800058da:	fe 98 ff fa 	brls	800058ce <get_arg+0x262>
800058de:	0e 9b       	mov	r11,r7
800058e0:	40 7c       	lddsp	r12,sp[0x1c]
800058e2:	30 ba       	mov	r10,11
800058e4:	f4 0c 18 00 	cp.b	r12,r10
800058e8:	fe 91 fe ec 	brne	800056c0 <get_arg+0x54>
800058ec:	40 42       	lddsp	r2,sp[0x10]
800058ee:	17 8c       	ld.ub	r12,r11[0x0]
800058f0:	0a 32       	cp.w	r2,r5
800058f2:	5f 4a       	srge	r10
800058f4:	f0 0c 18 00 	cp.b	r12,r8
800058f8:	5f 1c       	srne	r12
800058fa:	f9 ea 00 0a 	and	r10,r12,r10
800058fe:	f0 0a 18 00 	cp.b	r10,r8
80005902:	fe 91 fe c9 	brne	80005694 <get_arg+0x28>
80005906:	30 08       	mov	r8,0
80005908:	40 4e       	lddsp	lr,sp[0x10]
8000590a:	17 8a       	ld.ub	r10,r11[0x0]
8000590c:	e2 05 00 21 	add	r1,r1,r5<<0x2
80005910:	f0 0a 18 00 	cp.b	r10,r8
80005914:	fc 09 17 10 	movne	r9,lr
80005918:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000591c:	06 9e       	mov	lr,r3
8000591e:	c2 a8       	rjmp	80005972 <get_arg+0x306>
80005920:	62 0a       	ld.w	r10,r1[0x0]
80005922:	58 3a       	cp.w	r10,3
80005924:	c1 e0       	breq	80005960 <get_arg+0x2f4>
80005926:	e0 89 00 07 	brgt	80005934 <get_arg+0x2c8>
8000592a:	58 1a       	cp.w	r10,1
8000592c:	c1 a0       	breq	80005960 <get_arg+0x2f4>
8000592e:	58 2a       	cp.w	r10,2
80005930:	c1 81       	brne	80005960 <get_arg+0x2f4>
80005932:	c0 58       	rjmp	8000593c <get_arg+0x2d0>
80005934:	58 5a       	cp.w	r10,5
80005936:	c0 c0       	breq	8000594e <get_arg+0x2e2>
80005938:	c0 b5       	brlt	8000594e <get_arg+0x2e2>
8000593a:	c1 38       	rjmp	80005960 <get_arg+0x2f4>
8000593c:	6c 0a       	ld.w	r10,r6[0x0]
8000593e:	f4 cc ff f8 	sub	r12,r10,-8
80005942:	8d 0c       	st.w	r6[0x0],r12
80005944:	f4 e2 00 00 	ld.d	r2,r10[0]
80005948:	f0 e3 00 00 	st.d	r8[0],r2
8000594c:	c1 08       	rjmp	8000596c <get_arg+0x300>
8000594e:	6c 0a       	ld.w	r10,r6[0x0]
80005950:	f4 cc ff f8 	sub	r12,r10,-8
80005954:	8d 0c       	st.w	r6[0x0],r12
80005956:	f4 e2 00 00 	ld.d	r2,r10[0]
8000595a:	f0 e3 00 00 	st.d	r8[0],r2
8000595e:	c0 78       	rjmp	8000596c <get_arg+0x300>
80005960:	6c 0a       	ld.w	r10,r6[0x0]
80005962:	f4 cc ff fc 	sub	r12,r10,-4
80005966:	8d 0c       	st.w	r6[0x0],r12
80005968:	74 0a       	ld.w	r10,r10[0x0]
8000596a:	91 0a       	st.w	r8[0x0],r10
8000596c:	2f f5       	sub	r5,-1
8000596e:	2f 88       	sub	r8,-8
80005970:	2f c1       	sub	r1,-4
80005972:	12 35       	cp.w	r5,r9
80005974:	fe 9a ff d6 	brle	80005920 <get_arg+0x2b4>
80005978:	1c 93       	mov	r3,lr
8000597a:	40 52       	lddsp	r2,sp[0x14]
8000597c:	40 6e       	lddsp	lr,sp[0x18]
8000597e:	85 05       	st.w	r2[0x0],r5
80005980:	9d 0b       	st.w	lr[0x0],r11
80005982:	40 4b       	lddsp	r11,sp[0x10]
80005984:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80005988:	2f 8d       	sub	sp,-32
8000598a:	d8 32       	popm	r0-r7,pc

8000598c <__sprint_r>:
8000598c:	d4 21       	pushm	r4-r7,lr
8000598e:	14 97       	mov	r7,r10
80005990:	74 28       	ld.w	r8,r10[0x8]
80005992:	58 08       	cp.w	r8,0
80005994:	c0 41       	brne	8000599c <__sprint_r+0x10>
80005996:	95 18       	st.w	r10[0x4],r8
80005998:	10 9c       	mov	r12,r8
8000599a:	d8 22       	popm	r4-r7,pc
8000599c:	e0 a0 18 ca 	rcall	80008b30 <__sfvwrite_r>
800059a0:	30 08       	mov	r8,0
800059a2:	8f 18       	st.w	r7[0x4],r8
800059a4:	8f 28       	st.w	r7[0x8],r8
800059a6:	d8 22       	popm	r4-r7,pc

800059a8 <_vfprintf_r>:
800059a8:	d4 31       	pushm	r0-r7,lr
800059aa:	fa cd 06 bc 	sub	sp,sp,1724
800059ae:	51 09       	stdsp	sp[0x40],r9
800059b0:	16 91       	mov	r1,r11
800059b2:	14 97       	mov	r7,r10
800059b4:	18 95       	mov	r5,r12
800059b6:	e0 a0 1a 33 	rcall	80008e1c <_localeconv_r>
800059ba:	78 0c       	ld.w	r12,r12[0x0]
800059bc:	50 cc       	stdsp	sp[0x30],r12
800059be:	58 05       	cp.w	r5,0
800059c0:	c0 70       	breq	800059ce <_vfprintf_r+0x26>
800059c2:	6a 68       	ld.w	r8,r5[0x18]
800059c4:	58 08       	cp.w	r8,0
800059c6:	c0 41       	brne	800059ce <_vfprintf_r+0x26>
800059c8:	0a 9c       	mov	r12,r5
800059ca:	e0 a0 17 4f 	rcall	80008868 <__sinit>
800059ce:	4d 08       	lddpc	r8,80005b0c <_vfprintf_r+0x164>
800059d0:	10 31       	cp.w	r1,r8
800059d2:	c0 31       	brne	800059d8 <_vfprintf_r+0x30>
800059d4:	6a 01       	ld.w	r1,r5[0x0]
800059d6:	c0 a8       	rjmp	800059ea <_vfprintf_r+0x42>
800059d8:	4c e8       	lddpc	r8,80005b10 <_vfprintf_r+0x168>
800059da:	10 31       	cp.w	r1,r8
800059dc:	c0 31       	brne	800059e2 <_vfprintf_r+0x3a>
800059de:	6a 11       	ld.w	r1,r5[0x4]
800059e0:	c0 58       	rjmp	800059ea <_vfprintf_r+0x42>
800059e2:	4c d8       	lddpc	r8,80005b14 <_vfprintf_r+0x16c>
800059e4:	10 31       	cp.w	r1,r8
800059e6:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800059ea:	82 68       	ld.sh	r8,r1[0xc]
800059ec:	ed b8 00 03 	bld	r8,0x3
800059f0:	c0 41       	brne	800059f8 <_vfprintf_r+0x50>
800059f2:	62 48       	ld.w	r8,r1[0x10]
800059f4:	58 08       	cp.w	r8,0
800059f6:	c0 71       	brne	80005a04 <_vfprintf_r+0x5c>
800059f8:	02 9b       	mov	r11,r1
800059fa:	0a 9c       	mov	r12,r5
800059fc:	e0 a0 0f 6c 	rcall	800078d4 <__swsetup_r>
80005a00:	e0 81 0f 63 	brne	800078c6 <_vfprintf_r+0x1f1e>
80005a04:	82 68       	ld.sh	r8,r1[0xc]
80005a06:	10 99       	mov	r9,r8
80005a08:	e2 19 00 1a 	andl	r9,0x1a,COH
80005a0c:	58 a9       	cp.w	r9,10
80005a0e:	c3 c1       	brne	80005a86 <_vfprintf_r+0xde>
80005a10:	82 79       	ld.sh	r9,r1[0xe]
80005a12:	30 0a       	mov	r10,0
80005a14:	f4 09 19 00 	cp.h	r9,r10
80005a18:	c3 75       	brlt	80005a86 <_vfprintf_r+0xde>
80005a1a:	a1 d8       	cbr	r8,0x1
80005a1c:	fb 58 05 d0 	st.h	sp[1488],r8
80005a20:	62 88       	ld.w	r8,r1[0x20]
80005a22:	fb 48 05 e4 	st.w	sp[1508],r8
80005a26:	62 a8       	ld.w	r8,r1[0x28]
80005a28:	fb 48 05 ec 	st.w	sp[1516],r8
80005a2c:	fa c8 ff bc 	sub	r8,sp,-68
80005a30:	fb 48 05 d4 	st.w	sp[1492],r8
80005a34:	fb 48 05 c4 	st.w	sp[1476],r8
80005a38:	e0 68 04 00 	mov	r8,1024
80005a3c:	fb 48 05 d8 	st.w	sp[1496],r8
80005a40:	fb 48 05 cc 	st.w	sp[1484],r8
80005a44:	30 08       	mov	r8,0
80005a46:	fb 59 05 d2 	st.h	sp[1490],r9
80005a4a:	0e 9a       	mov	r10,r7
80005a4c:	41 09       	lddsp	r9,sp[0x40]
80005a4e:	fa c7 fa 3c 	sub	r7,sp,-1476
80005a52:	fb 48 05 dc 	st.w	sp[1500],r8
80005a56:	0a 9c       	mov	r12,r5
80005a58:	0e 9b       	mov	r11,r7
80005a5a:	ca 7f       	rcall	800059a8 <_vfprintf_r>
80005a5c:	50 bc       	stdsp	sp[0x2c],r12
80005a5e:	c0 95       	brlt	80005a70 <_vfprintf_r+0xc8>
80005a60:	0e 9b       	mov	r11,r7
80005a62:	0a 9c       	mov	r12,r5
80005a64:	e0 a0 16 26 	rcall	800086b0 <_fflush_r>
80005a68:	40 be       	lddsp	lr,sp[0x2c]
80005a6a:	f9 be 01 ff 	movne	lr,-1
80005a6e:	50 be       	stdsp	sp[0x2c],lr
80005a70:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80005a74:	ed b8 00 06 	bld	r8,0x6
80005a78:	e0 81 0f 29 	brne	800078ca <_vfprintf_r+0x1f22>
80005a7c:	82 68       	ld.sh	r8,r1[0xc]
80005a7e:	a7 a8       	sbr	r8,0x6
80005a80:	a2 68       	st.h	r1[0xc],r8
80005a82:	e0 8f 0f 24 	bral	800078ca <_vfprintf_r+0x1f22>
80005a86:	30 08       	mov	r8,0
80005a88:	fb 48 06 b4 	st.w	sp[1716],r8
80005a8c:	fb 48 06 90 	st.w	sp[1680],r8
80005a90:	fb 48 06 8c 	st.w	sp[1676],r8
80005a94:	fb 48 06 b0 	st.w	sp[1712],r8
80005a98:	30 08       	mov	r8,0
80005a9a:	30 09       	mov	r9,0
80005a9c:	50 a7       	stdsp	sp[0x28],r7
80005a9e:	50 78       	stdsp	sp[0x1c],r8
80005aa0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005aa4:	3f f8       	mov	r8,-1
80005aa6:	50 59       	stdsp	sp[0x14],r9
80005aa8:	fb 43 06 88 	st.w	sp[1672],r3
80005aac:	fb 48 05 44 	st.w	sp[1348],r8
80005ab0:	12 9c       	mov	r12,r9
80005ab2:	50 69       	stdsp	sp[0x18],r9
80005ab4:	50 d9       	stdsp	sp[0x34],r9
80005ab6:	50 e9       	stdsp	sp[0x38],r9
80005ab8:	50 b9       	stdsp	sp[0x2c],r9
80005aba:	12 97       	mov	r7,r9
80005abc:	0a 94       	mov	r4,r5
80005abe:	40 a2       	lddsp	r2,sp[0x28]
80005ac0:	32 5a       	mov	r10,37
80005ac2:	30 08       	mov	r8,0
80005ac4:	c0 28       	rjmp	80005ac8 <_vfprintf_r+0x120>
80005ac6:	2f f2       	sub	r2,-1
80005ac8:	05 89       	ld.ub	r9,r2[0x0]
80005aca:	f0 09 18 00 	cp.b	r9,r8
80005ace:	5f 1b       	srne	r11
80005ad0:	f4 09 18 00 	cp.b	r9,r10
80005ad4:	5f 19       	srne	r9
80005ad6:	f3 eb 00 0b 	and	r11,r9,r11
80005ada:	f0 0b 18 00 	cp.b	r11,r8
80005ade:	cf 41       	brne	80005ac6 <_vfprintf_r+0x11e>
80005ae0:	40 ab       	lddsp	r11,sp[0x28]
80005ae2:	e4 0b 01 06 	sub	r6,r2,r11
80005ae6:	c2 50       	breq	80005b30 <_vfprintf_r+0x188>
80005ae8:	fa f8 06 90 	ld.w	r8,sp[1680]
80005aec:	0c 08       	add	r8,r6
80005aee:	87 0b       	st.w	r3[0x0],r11
80005af0:	fb 48 06 90 	st.w	sp[1680],r8
80005af4:	87 16       	st.w	r3[0x4],r6
80005af6:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005afa:	2f f8       	sub	r8,-1
80005afc:	fb 48 06 8c 	st.w	sp[1676],r8
80005b00:	58 78       	cp.w	r8,7
80005b02:	e0 89 00 0b 	brgt	80005b18 <_vfprintf_r+0x170>
80005b06:	2f 83       	sub	r3,-8
80005b08:	c1 18       	rjmp	80005b2a <_vfprintf_r+0x182>
80005b0a:	d7 03       	nop
80005b0c:	80 00       	ld.sh	r0,r0[0x0]
80005b0e:	bf 2c       	st.d	pc++,r12
80005b10:	80 00       	ld.sh	r0,r0[0x0]
80005b12:	bf 4c       	asr	r12,0x1e
80005b14:	80 00       	ld.sh	r0,r0[0x0]
80005b16:	bf 6c       	lsl	r12,0x1e
80005b18:	fa ca f9 78 	sub	r10,sp,-1672
80005b1c:	02 9b       	mov	r11,r1
80005b1e:	08 9c       	mov	r12,r4
80005b20:	c3 6f       	rcall	8000598c <__sprint_r>
80005b22:	e0 81 0e ce 	brne	800078be <_vfprintf_r+0x1f16>
80005b26:	fa c3 f9 e0 	sub	r3,sp,-1568
80005b2a:	40 ba       	lddsp	r10,sp[0x2c]
80005b2c:	0c 0a       	add	r10,r6
80005b2e:	50 ba       	stdsp	sp[0x2c],r10
80005b30:	05 89       	ld.ub	r9,r2[0x0]
80005b32:	30 08       	mov	r8,0
80005b34:	f0 09 18 00 	cp.b	r9,r8
80005b38:	e0 80 0e b2 	breq	8000789c <_vfprintf_r+0x1ef4>
80005b3c:	30 09       	mov	r9,0
80005b3e:	fb 68 06 bb 	st.b	sp[1723],r8
80005b42:	0e 96       	mov	r6,r7
80005b44:	e4 c8 ff ff 	sub	r8,r2,-1
80005b48:	3f fe       	mov	lr,-1
80005b4a:	50 93       	stdsp	sp[0x24],r3
80005b4c:	50 41       	stdsp	sp[0x10],r1
80005b4e:	0e 93       	mov	r3,r7
80005b50:	04 91       	mov	r1,r2
80005b52:	50 89       	stdsp	sp[0x20],r9
80005b54:	50 a8       	stdsp	sp[0x28],r8
80005b56:	50 2e       	stdsp	sp[0x8],lr
80005b58:	50 39       	stdsp	sp[0xc],r9
80005b5a:	12 95       	mov	r5,r9
80005b5c:	12 90       	mov	r0,r9
80005b5e:	10 97       	mov	r7,r8
80005b60:	08 92       	mov	r2,r4
80005b62:	c0 78       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005b64:	3f fc       	mov	r12,-1
80005b66:	08 97       	mov	r7,r4
80005b68:	50 2c       	stdsp	sp[0x8],r12
80005b6a:	c0 38       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005b6c:	30 0b       	mov	r11,0
80005b6e:	50 3b       	stdsp	sp[0xc],r11
80005b70:	0f 38       	ld.ub	r8,r7++
80005b72:	c0 28       	rjmp	80005b76 <_vfprintf_r+0x1ce>
80005b74:	12 90       	mov	r0,r9
80005b76:	f0 c9 00 20 	sub	r9,r8,32
80005b7a:	e0 49 00 58 	cp.w	r9,88
80005b7e:	e0 8b 0a 36 	brhi	80006fea <_vfprintf_r+0x1642>
80005b82:	4d 9a       	lddpc	r10,80005ce4 <_vfprintf_r+0x33c>
80005b84:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80005b88:	50 a7       	stdsp	sp[0x28],r7
80005b8a:	50 80       	stdsp	sp[0x20],r0
80005b8c:	0c 97       	mov	r7,r6
80005b8e:	04 94       	mov	r4,r2
80005b90:	06 96       	mov	r6,r3
80005b92:	02 92       	mov	r2,r1
80005b94:	4d 59       	lddpc	r9,80005ce8 <_vfprintf_r+0x340>
80005b96:	40 93       	lddsp	r3,sp[0x24]
80005b98:	10 90       	mov	r0,r8
80005b9a:	40 41       	lddsp	r1,sp[0x10]
80005b9c:	50 d9       	stdsp	sp[0x34],r9
80005b9e:	e0 8f 08 95 	bral	80006cc8 <_vfprintf_r+0x1320>
80005ba2:	30 08       	mov	r8,0
80005ba4:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80005ba8:	f0 09 18 00 	cp.b	r9,r8
80005bac:	ce 21       	brne	80005b70 <_vfprintf_r+0x1c8>
80005bae:	32 08       	mov	r8,32
80005bb0:	c6 e8       	rjmp	80005c8c <_vfprintf_r+0x2e4>
80005bb2:	a1 a5       	sbr	r5,0x0
80005bb4:	cd eb       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005bb6:	0f 89       	ld.ub	r9,r7[0x0]
80005bb8:	f2 c8 00 30 	sub	r8,r9,48
80005bbc:	58 98       	cp.w	r8,9
80005bbe:	e0 8b 00 1d 	brhi	80005bf8 <_vfprintf_r+0x250>
80005bc2:	ee c8 ff ff 	sub	r8,r7,-1
80005bc6:	30 0b       	mov	r11,0
80005bc8:	23 09       	sub	r9,48
80005bca:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005bce:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80005bd2:	11 39       	ld.ub	r9,r8++
80005bd4:	f2 ca 00 30 	sub	r10,r9,48
80005bd8:	58 9a       	cp.w	r10,9
80005bda:	fe 98 ff f7 	brls	80005bc8 <_vfprintf_r+0x220>
80005bde:	e0 49 00 24 	cp.w	r9,36
80005be2:	cc 51       	brne	80005b6c <_vfprintf_r+0x1c4>
80005be4:	e0 4b 00 20 	cp.w	r11,32
80005be8:	e0 89 0e 6a 	brgt	800078bc <_vfprintf_r+0x1f14>
80005bec:	20 1b       	sub	r11,1
80005bee:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005bf2:	12 3b       	cp.w	r11,r9
80005bf4:	c0 95       	brlt	80005c06 <_vfprintf_r+0x25e>
80005bf6:	c1 08       	rjmp	80005c16 <_vfprintf_r+0x26e>
80005bf8:	fa f9 06 b4 	ld.w	r9,sp[1716]
80005bfc:	ec ca ff ff 	sub	r10,r6,-1
80005c00:	12 36       	cp.w	r6,r9
80005c02:	c1 f5       	brlt	80005c40 <_vfprintf_r+0x298>
80005c04:	c2 68       	rjmp	80005c50 <_vfprintf_r+0x2a8>
80005c06:	fa ce f9 44 	sub	lr,sp,-1724
80005c0a:	10 97       	mov	r7,r8
80005c0c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80005c10:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80005c14:	c3 58       	rjmp	80005c7e <_vfprintf_r+0x2d6>
80005c16:	10 97       	mov	r7,r8
80005c18:	fa c8 f9 50 	sub	r8,sp,-1712
80005c1c:	1a d8       	st.w	--sp,r8
80005c1e:	fa c8 fa b8 	sub	r8,sp,-1352
80005c22:	1a d8       	st.w	--sp,r8
80005c24:	fa c8 fb b4 	sub	r8,sp,-1100
80005c28:	02 9a       	mov	r10,r1
80005c2a:	1a d8       	st.w	--sp,r8
80005c2c:	04 9c       	mov	r12,r2
80005c2e:	fa c8 f9 40 	sub	r8,sp,-1728
80005c32:	fa c9 ff b4 	sub	r9,sp,-76
80005c36:	fe b0 fd 1b 	rcall	8000566c <get_arg>
80005c3a:	2f dd       	sub	sp,-12
80005c3c:	78 00       	ld.w	r0,r12[0x0]
80005c3e:	c2 08       	rjmp	80005c7e <_vfprintf_r+0x2d6>
80005c40:	fa cc f9 44 	sub	r12,sp,-1724
80005c44:	14 96       	mov	r6,r10
80005c46:	f8 03 00 38 	add	r8,r12,r3<<0x3
80005c4a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80005c4e:	c1 88       	rjmp	80005c7e <_vfprintf_r+0x2d6>
80005c50:	41 08       	lddsp	r8,sp[0x40]
80005c52:	59 f9       	cp.w	r9,31
80005c54:	e0 89 00 11 	brgt	80005c76 <_vfprintf_r+0x2ce>
80005c58:	f0 cb ff fc 	sub	r11,r8,-4
80005c5c:	51 0b       	stdsp	sp[0x40],r11
80005c5e:	70 00       	ld.w	r0,r8[0x0]
80005c60:	fa cb f9 44 	sub	r11,sp,-1724
80005c64:	f6 09 00 38 	add	r8,r11,r9<<0x3
80005c68:	f1 40 fd 88 	st.w	r8[-632],r0
80005c6c:	2f f9       	sub	r9,-1
80005c6e:	14 96       	mov	r6,r10
80005c70:	fb 49 06 b4 	st.w	sp[1716],r9
80005c74:	c0 58       	rjmp	80005c7e <_vfprintf_r+0x2d6>
80005c76:	70 00       	ld.w	r0,r8[0x0]
80005c78:	14 96       	mov	r6,r10
80005c7a:	2f c8       	sub	r8,-4
80005c7c:	51 08       	stdsp	sp[0x40],r8
80005c7e:	58 00       	cp.w	r0,0
80005c80:	fe 94 ff 78 	brge	80005b70 <_vfprintf_r+0x1c8>
80005c84:	5c 30       	neg	r0
80005c86:	a3 a5       	sbr	r5,0x2
80005c88:	c7 4b       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005c8a:	32 b8       	mov	r8,43
80005c8c:	fb 68 06 bb 	st.b	sp[1723],r8
80005c90:	c7 0b       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005c92:	0f 38       	ld.ub	r8,r7++
80005c94:	e0 48 00 2a 	cp.w	r8,42
80005c98:	c0 30       	breq	80005c9e <_vfprintf_r+0x2f6>
80005c9a:	30 09       	mov	r9,0
80005c9c:	c7 d8       	rjmp	80005d96 <_vfprintf_r+0x3ee>
80005c9e:	0f 88       	ld.ub	r8,r7[0x0]
80005ca0:	f0 c9 00 30 	sub	r9,r8,48
80005ca4:	58 99       	cp.w	r9,9
80005ca6:	e0 8b 00 23 	brhi	80005cec <_vfprintf_r+0x344>
80005caa:	ee c4 ff ff 	sub	r4,r7,-1
80005cae:	30 0b       	mov	r11,0
80005cb0:	23 08       	sub	r8,48
80005cb2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80005cb6:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005cba:	09 38       	ld.ub	r8,r4++
80005cbc:	f0 c9 00 30 	sub	r9,r8,48
80005cc0:	58 99       	cp.w	r9,9
80005cc2:	fe 98 ff f7 	brls	80005cb0 <_vfprintf_r+0x308>
80005cc6:	e0 48 00 24 	cp.w	r8,36
80005cca:	fe 91 ff 51 	brne	80005b6c <_vfprintf_r+0x1c4>
80005cce:	e0 4b 00 20 	cp.w	r11,32
80005cd2:	e0 89 0d f5 	brgt	800078bc <_vfprintf_r+0x1f14>
80005cd6:	20 1b       	sub	r11,1
80005cd8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005cdc:	10 3b       	cp.w	r11,r8
80005cde:	c0 e5       	brlt	80005cfa <_vfprintf_r+0x352>
80005ce0:	c1 58       	rjmp	80005d0a <_vfprintf_r+0x362>
80005ce2:	d7 03       	nop
80005ce4:	80 00       	ld.sh	r0,r0[0x0]
80005ce6:	bb 84       	lsr	r4,0x1a
80005ce8:	80 00       	ld.sh	r0,r0[0x0]
80005cea:	bd c0       	cbr	r0,0x1c
80005cec:	fa fa 06 b4 	ld.w	r10,sp[1716]
80005cf0:	ec c9 ff ff 	sub	r9,r6,-1
80005cf4:	14 36       	cp.w	r6,r10
80005cf6:	c1 f5       	brlt	80005d34 <_vfprintf_r+0x38c>
80005cf8:	c2 88       	rjmp	80005d48 <_vfprintf_r+0x3a0>
80005cfa:	fa ca f9 44 	sub	r10,sp,-1724
80005cfe:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80005d02:	f6 fb fd 88 	ld.w	r11,r11[-632]
80005d06:	50 2b       	stdsp	sp[0x8],r11
80005d08:	c3 c8       	rjmp	80005d80 <_vfprintf_r+0x3d8>
80005d0a:	fa c8 f9 50 	sub	r8,sp,-1712
80005d0e:	1a d8       	st.w	--sp,r8
80005d10:	fa c8 fa b8 	sub	r8,sp,-1352
80005d14:	1a d8       	st.w	--sp,r8
80005d16:	fa c8 fb b4 	sub	r8,sp,-1100
80005d1a:	02 9a       	mov	r10,r1
80005d1c:	1a d8       	st.w	--sp,r8
80005d1e:	04 9c       	mov	r12,r2
80005d20:	fa c8 f9 40 	sub	r8,sp,-1728
80005d24:	fa c9 ff b4 	sub	r9,sp,-76
80005d28:	fe b0 fc a2 	rcall	8000566c <get_arg>
80005d2c:	2f dd       	sub	sp,-12
80005d2e:	78 0c       	ld.w	r12,r12[0x0]
80005d30:	50 2c       	stdsp	sp[0x8],r12
80005d32:	c2 78       	rjmp	80005d80 <_vfprintf_r+0x3d8>
80005d34:	12 96       	mov	r6,r9
80005d36:	0e 94       	mov	r4,r7
80005d38:	fa c9 f9 44 	sub	r9,sp,-1724
80005d3c:	f2 03 00 38 	add	r8,r9,r3<<0x3
80005d40:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80005d44:	50 28       	stdsp	sp[0x8],r8
80005d46:	c1 d8       	rjmp	80005d80 <_vfprintf_r+0x3d8>
80005d48:	41 08       	lddsp	r8,sp[0x40]
80005d4a:	59 fa       	cp.w	r10,31
80005d4c:	e0 89 00 14 	brgt	80005d74 <_vfprintf_r+0x3cc>
80005d50:	f0 cb ff fc 	sub	r11,r8,-4
80005d54:	70 08       	ld.w	r8,r8[0x0]
80005d56:	51 0b       	stdsp	sp[0x40],r11
80005d58:	50 28       	stdsp	sp[0x8],r8
80005d5a:	fa c6 f9 44 	sub	r6,sp,-1724
80005d5e:	40 2e       	lddsp	lr,sp[0x8]
80005d60:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80005d64:	f1 4e fd 88 	st.w	r8[-632],lr
80005d68:	2f fa       	sub	r10,-1
80005d6a:	0e 94       	mov	r4,r7
80005d6c:	fb 4a 06 b4 	st.w	sp[1716],r10
80005d70:	12 96       	mov	r6,r9
80005d72:	c0 78       	rjmp	80005d80 <_vfprintf_r+0x3d8>
80005d74:	70 0c       	ld.w	r12,r8[0x0]
80005d76:	0e 94       	mov	r4,r7
80005d78:	2f c8       	sub	r8,-4
80005d7a:	50 2c       	stdsp	sp[0x8],r12
80005d7c:	12 96       	mov	r6,r9
80005d7e:	51 08       	stdsp	sp[0x40],r8
80005d80:	40 2b       	lddsp	r11,sp[0x8]
80005d82:	58 0b       	cp.w	r11,0
80005d84:	fe 95 fe f0 	brlt	80005b64 <_vfprintf_r+0x1bc>
80005d88:	08 97       	mov	r7,r4
80005d8a:	cf 3a       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005d8c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005d90:	0f 38       	ld.ub	r8,r7++
80005d92:	f4 09 00 19 	add	r9,r10,r9<<0x1
80005d96:	f0 ca 00 30 	sub	r10,r8,48
80005d9a:	58 9a       	cp.w	r10,9
80005d9c:	fe 98 ff f8 	brls	80005d8c <_vfprintf_r+0x3e4>
80005da0:	3f fa       	mov	r10,-1
80005da2:	f2 0a 0c 49 	max	r9,r9,r10
80005da6:	50 29       	stdsp	sp[0x8],r9
80005da8:	ce 7a       	rjmp	80005b76 <_vfprintf_r+0x1ce>
80005daa:	a7 b5       	sbr	r5,0x7
80005dac:	ce 2a       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005dae:	30 09       	mov	r9,0
80005db0:	23 08       	sub	r8,48
80005db2:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005db6:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005dba:	0f 38       	ld.ub	r8,r7++
80005dbc:	f0 ca 00 30 	sub	r10,r8,48
80005dc0:	58 9a       	cp.w	r10,9
80005dc2:	fe 98 ff f7 	brls	80005db0 <_vfprintf_r+0x408>
80005dc6:	e0 48 00 24 	cp.w	r8,36
80005dca:	fe 91 fe d5 	brne	80005b74 <_vfprintf_r+0x1cc>
80005dce:	e0 49 00 20 	cp.w	r9,32
80005dd2:	e0 89 0d 75 	brgt	800078bc <_vfprintf_r+0x1f14>
80005dd6:	f2 c3 00 01 	sub	r3,r9,1
80005dda:	30 19       	mov	r9,1
80005ddc:	50 39       	stdsp	sp[0xc],r9
80005dde:	cc 9a       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005de0:	a3 b5       	sbr	r5,0x3
80005de2:	cc 7a       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005de4:	a7 a5       	sbr	r5,0x6
80005de6:	cc 5a       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005de8:	0a 98       	mov	r8,r5
80005dea:	a5 b5       	sbr	r5,0x5
80005dec:	a5 a8       	sbr	r8,0x4
80005dee:	0f 89       	ld.ub	r9,r7[0x0]
80005df0:	36 ce       	mov	lr,108
80005df2:	fc 09 18 00 	cp.b	r9,lr
80005df6:	f7 b7 00 ff 	subeq	r7,-1
80005dfa:	f0 05 17 10 	movne	r5,r8
80005dfe:	cb 9a       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005e00:	a5 b5       	sbr	r5,0x5
80005e02:	cb 7a       	rjmp	80005b70 <_vfprintf_r+0x1c8>
80005e04:	50 a7       	stdsp	sp[0x28],r7
80005e06:	50 80       	stdsp	sp[0x20],r0
80005e08:	0c 97       	mov	r7,r6
80005e0a:	10 90       	mov	r0,r8
80005e0c:	06 96       	mov	r6,r3
80005e0e:	04 94       	mov	r4,r2
80005e10:	40 93       	lddsp	r3,sp[0x24]
80005e12:	02 92       	mov	r2,r1
80005e14:	0e 99       	mov	r9,r7
80005e16:	40 41       	lddsp	r1,sp[0x10]
80005e18:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e1c:	40 3c       	lddsp	r12,sp[0xc]
80005e1e:	58 0c       	cp.w	r12,0
80005e20:	c1 d0       	breq	80005e5a <_vfprintf_r+0x4b2>
80005e22:	10 36       	cp.w	r6,r8
80005e24:	c0 64       	brge	80005e30 <_vfprintf_r+0x488>
80005e26:	fa cb f9 44 	sub	r11,sp,-1724
80005e2a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005e2e:	c1 d8       	rjmp	80005e68 <_vfprintf_r+0x4c0>
80005e30:	fa c8 f9 50 	sub	r8,sp,-1712
80005e34:	1a d8       	st.w	--sp,r8
80005e36:	fa c8 fa b8 	sub	r8,sp,-1352
80005e3a:	1a d8       	st.w	--sp,r8
80005e3c:	fa c8 fb b4 	sub	r8,sp,-1100
80005e40:	1a d8       	st.w	--sp,r8
80005e42:	fa c8 f9 40 	sub	r8,sp,-1728
80005e46:	fa c9 ff b4 	sub	r9,sp,-76
80005e4a:	04 9a       	mov	r10,r2
80005e4c:	0c 9b       	mov	r11,r6
80005e4e:	08 9c       	mov	r12,r4
80005e50:	fe b0 fc 0e 	rcall	8000566c <get_arg>
80005e54:	2f dd       	sub	sp,-12
80005e56:	19 b8       	ld.ub	r8,r12[0x3]
80005e58:	c2 28       	rjmp	80005e9c <_vfprintf_r+0x4f4>
80005e5a:	2f f7       	sub	r7,-1
80005e5c:	10 39       	cp.w	r9,r8
80005e5e:	c0 84       	brge	80005e6e <_vfprintf_r+0x4c6>
80005e60:	fa ca f9 44 	sub	r10,sp,-1724
80005e64:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005e68:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80005e6c:	c1 88       	rjmp	80005e9c <_vfprintf_r+0x4f4>
80005e6e:	41 09       	lddsp	r9,sp[0x40]
80005e70:	59 f8       	cp.w	r8,31
80005e72:	e0 89 00 12 	brgt	80005e96 <_vfprintf_r+0x4ee>
80005e76:	f2 ca ff fc 	sub	r10,r9,-4
80005e7a:	51 0a       	stdsp	sp[0x40],r10
80005e7c:	72 09       	ld.w	r9,r9[0x0]
80005e7e:	fa c6 f9 44 	sub	r6,sp,-1724
80005e82:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005e86:	2f f8       	sub	r8,-1
80005e88:	f5 49 fd 88 	st.w	r10[-632],r9
80005e8c:	fb 48 06 b4 	st.w	sp[1716],r8
80005e90:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80005e94:	c0 48       	rjmp	80005e9c <_vfprintf_r+0x4f4>
80005e96:	13 b8       	ld.ub	r8,r9[0x3]
80005e98:	2f c9       	sub	r9,-4
80005e9a:	51 09       	stdsp	sp[0x40],r9
80005e9c:	fb 68 06 60 	st.b	sp[1632],r8
80005ea0:	30 0e       	mov	lr,0
80005ea2:	30 08       	mov	r8,0
80005ea4:	30 12       	mov	r2,1
80005ea6:	fb 68 06 bb 	st.b	sp[1723],r8
80005eaa:	50 2e       	stdsp	sp[0x8],lr
80005eac:	e0 8f 08 b1 	bral	8000700e <_vfprintf_r+0x1666>
80005eb0:	50 a7       	stdsp	sp[0x28],r7
80005eb2:	50 80       	stdsp	sp[0x20],r0
80005eb4:	0c 97       	mov	r7,r6
80005eb6:	04 94       	mov	r4,r2
80005eb8:	06 96       	mov	r6,r3
80005eba:	02 92       	mov	r2,r1
80005ebc:	40 93       	lddsp	r3,sp[0x24]
80005ebe:	10 90       	mov	r0,r8
80005ec0:	40 41       	lddsp	r1,sp[0x10]
80005ec2:	a5 a5       	sbr	r5,0x4
80005ec4:	c0 a8       	rjmp	80005ed8 <_vfprintf_r+0x530>
80005ec6:	50 a7       	stdsp	sp[0x28],r7
80005ec8:	50 80       	stdsp	sp[0x20],r0
80005eca:	0c 97       	mov	r7,r6
80005ecc:	04 94       	mov	r4,r2
80005ece:	06 96       	mov	r6,r3
80005ed0:	02 92       	mov	r2,r1
80005ed2:	40 93       	lddsp	r3,sp[0x24]
80005ed4:	10 90       	mov	r0,r8
80005ed6:	40 41       	lddsp	r1,sp[0x10]
80005ed8:	ed b5 00 05 	bld	r5,0x5
80005edc:	c5 11       	brne	80005f7e <_vfprintf_r+0x5d6>
80005ede:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005ee2:	40 3c       	lddsp	r12,sp[0xc]
80005ee4:	58 0c       	cp.w	r12,0
80005ee6:	c1 e0       	breq	80005f22 <_vfprintf_r+0x57a>
80005ee8:	10 36       	cp.w	r6,r8
80005eea:	c0 64       	brge	80005ef6 <_vfprintf_r+0x54e>
80005eec:	fa cb f9 44 	sub	r11,sp,-1724
80005ef0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005ef4:	c2 08       	rjmp	80005f34 <_vfprintf_r+0x58c>
80005ef6:	fa c8 f9 50 	sub	r8,sp,-1712
80005efa:	1a d8       	st.w	--sp,r8
80005efc:	fa c8 fa b8 	sub	r8,sp,-1352
80005f00:	0c 9b       	mov	r11,r6
80005f02:	1a d8       	st.w	--sp,r8
80005f04:	fa c8 fb b4 	sub	r8,sp,-1100
80005f08:	1a d8       	st.w	--sp,r8
80005f0a:	fa c9 ff b4 	sub	r9,sp,-76
80005f0e:	fa c8 f9 40 	sub	r8,sp,-1728
80005f12:	04 9a       	mov	r10,r2
80005f14:	08 9c       	mov	r12,r4
80005f16:	fe b0 fb ab 	rcall	8000566c <get_arg>
80005f1a:	2f dd       	sub	sp,-12
80005f1c:	78 1b       	ld.w	r11,r12[0x4]
80005f1e:	78 09       	ld.w	r9,r12[0x0]
80005f20:	c2 b8       	rjmp	80005f76 <_vfprintf_r+0x5ce>
80005f22:	ee ca ff ff 	sub	r10,r7,-1
80005f26:	10 37       	cp.w	r7,r8
80005f28:	c0 b4       	brge	80005f3e <_vfprintf_r+0x596>
80005f2a:	fa c9 f9 44 	sub	r9,sp,-1724
80005f2e:	14 97       	mov	r7,r10
80005f30:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005f34:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005f38:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005f3c:	c1 d8       	rjmp	80005f76 <_vfprintf_r+0x5ce>
80005f3e:	41 09       	lddsp	r9,sp[0x40]
80005f40:	59 f8       	cp.w	r8,31
80005f42:	e0 89 00 14 	brgt	80005f6a <_vfprintf_r+0x5c2>
80005f46:	f2 cb ff f8 	sub	r11,r9,-8
80005f4a:	51 0b       	stdsp	sp[0x40],r11
80005f4c:	fa c6 f9 44 	sub	r6,sp,-1724
80005f50:	72 1b       	ld.w	r11,r9[0x4]
80005f52:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80005f56:	72 09       	ld.w	r9,r9[0x0]
80005f58:	f9 4b fd 8c 	st.w	r12[-628],r11
80005f5c:	f9 49 fd 88 	st.w	r12[-632],r9
80005f60:	2f f8       	sub	r8,-1
80005f62:	14 97       	mov	r7,r10
80005f64:	fb 48 06 b4 	st.w	sp[1716],r8
80005f68:	c0 78       	rjmp	80005f76 <_vfprintf_r+0x5ce>
80005f6a:	f2 c8 ff f8 	sub	r8,r9,-8
80005f6e:	72 1b       	ld.w	r11,r9[0x4]
80005f70:	14 97       	mov	r7,r10
80005f72:	51 08       	stdsp	sp[0x40],r8
80005f74:	72 09       	ld.w	r9,r9[0x0]
80005f76:	16 98       	mov	r8,r11
80005f78:	fa e9 00 00 	st.d	sp[0],r8
80005f7c:	ca e8       	rjmp	800060d8 <_vfprintf_r+0x730>
80005f7e:	ed b5 00 04 	bld	r5,0x4
80005f82:	c1 71       	brne	80005fb0 <_vfprintf_r+0x608>
80005f84:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005f88:	40 3e       	lddsp	lr,sp[0xc]
80005f8a:	58 0e       	cp.w	lr,0
80005f8c:	c0 80       	breq	80005f9c <_vfprintf_r+0x5f4>
80005f8e:	10 36       	cp.w	r6,r8
80005f90:	c6 94       	brge	80006062 <_vfprintf_r+0x6ba>
80005f92:	fa cc f9 44 	sub	r12,sp,-1724
80005f96:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005f9a:	c8 28       	rjmp	8000609e <_vfprintf_r+0x6f6>
80005f9c:	ee ca ff ff 	sub	r10,r7,-1
80005fa0:	10 37       	cp.w	r7,r8
80005fa2:	e0 84 00 81 	brge	800060a4 <_vfprintf_r+0x6fc>
80005fa6:	fa cb f9 44 	sub	r11,sp,-1724
80005faa:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005fae:	c7 78       	rjmp	8000609c <_vfprintf_r+0x6f4>
80005fb0:	ed b5 00 06 	bld	r5,0x6
80005fb4:	c4 b1       	brne	8000604a <_vfprintf_r+0x6a2>
80005fb6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005fba:	40 3c       	lddsp	r12,sp[0xc]
80005fbc:	58 0c       	cp.w	r12,0
80005fbe:	c1 d0       	breq	80005ff8 <_vfprintf_r+0x650>
80005fc0:	10 36       	cp.w	r6,r8
80005fc2:	c0 64       	brge	80005fce <_vfprintf_r+0x626>
80005fc4:	fa cb f9 44 	sub	r11,sp,-1724
80005fc8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005fcc:	c1 f8       	rjmp	8000600a <_vfprintf_r+0x662>
80005fce:	fa c8 f9 50 	sub	r8,sp,-1712
80005fd2:	1a d8       	st.w	--sp,r8
80005fd4:	fa c8 fa b8 	sub	r8,sp,-1352
80005fd8:	1a d8       	st.w	--sp,r8
80005fda:	fa c8 fb b4 	sub	r8,sp,-1100
80005fde:	1a d8       	st.w	--sp,r8
80005fe0:	fa c8 f9 40 	sub	r8,sp,-1728
80005fe4:	fa c9 ff b4 	sub	r9,sp,-76
80005fe8:	04 9a       	mov	r10,r2
80005fea:	0c 9b       	mov	r11,r6
80005fec:	08 9c       	mov	r12,r4
80005fee:	fe b0 fb 3f 	rcall	8000566c <get_arg>
80005ff2:	2f dd       	sub	sp,-12
80005ff4:	98 18       	ld.sh	r8,r12[0x2]
80005ff6:	c2 68       	rjmp	80006042 <_vfprintf_r+0x69a>
80005ff8:	ee ca ff ff 	sub	r10,r7,-1
80005ffc:	10 37       	cp.w	r7,r8
80005ffe:	c0 94       	brge	80006010 <_vfprintf_r+0x668>
80006000:	fa c9 f9 44 	sub	r9,sp,-1724
80006004:	14 97       	mov	r7,r10
80006006:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000600a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000600e:	c1 a8       	rjmp	80006042 <_vfprintf_r+0x69a>
80006010:	41 09       	lddsp	r9,sp[0x40]
80006012:	59 f8       	cp.w	r8,31
80006014:	e0 89 00 13 	brgt	8000603a <_vfprintf_r+0x692>
80006018:	f2 cb ff fc 	sub	r11,r9,-4
8000601c:	51 0b       	stdsp	sp[0x40],r11
8000601e:	72 09       	ld.w	r9,r9[0x0]
80006020:	fa c6 f9 44 	sub	r6,sp,-1724
80006024:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006028:	2f f8       	sub	r8,-1
8000602a:	f7 49 fd 88 	st.w	r11[-632],r9
8000602e:	fb 48 06 b4 	st.w	sp[1716],r8
80006032:	14 97       	mov	r7,r10
80006034:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006038:	c0 58       	rjmp	80006042 <_vfprintf_r+0x69a>
8000603a:	92 18       	ld.sh	r8,r9[0x2]
8000603c:	14 97       	mov	r7,r10
8000603e:	2f c9       	sub	r9,-4
80006040:	51 09       	stdsp	sp[0x40],r9
80006042:	50 18       	stdsp	sp[0x4],r8
80006044:	bf 58       	asr	r8,0x1f
80006046:	50 08       	stdsp	sp[0x0],r8
80006048:	c4 88       	rjmp	800060d8 <_vfprintf_r+0x730>
8000604a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000604e:	40 3c       	lddsp	r12,sp[0xc]
80006050:	58 0c       	cp.w	r12,0
80006052:	c1 d0       	breq	8000608c <_vfprintf_r+0x6e4>
80006054:	10 36       	cp.w	r6,r8
80006056:	c0 64       	brge	80006062 <_vfprintf_r+0x6ba>
80006058:	fa cb f9 44 	sub	r11,sp,-1724
8000605c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006060:	c1 f8       	rjmp	8000609e <_vfprintf_r+0x6f6>
80006062:	fa c8 f9 50 	sub	r8,sp,-1712
80006066:	1a d8       	st.w	--sp,r8
80006068:	fa c8 fa b8 	sub	r8,sp,-1352
8000606c:	0c 9b       	mov	r11,r6
8000606e:	1a d8       	st.w	--sp,r8
80006070:	fa c8 fb b4 	sub	r8,sp,-1100
80006074:	04 9a       	mov	r10,r2
80006076:	1a d8       	st.w	--sp,r8
80006078:	08 9c       	mov	r12,r4
8000607a:	fa c8 f9 40 	sub	r8,sp,-1728
8000607e:	fa c9 ff b4 	sub	r9,sp,-76
80006082:	fe b0 fa f5 	rcall	8000566c <get_arg>
80006086:	2f dd       	sub	sp,-12
80006088:	78 0b       	ld.w	r11,r12[0x0]
8000608a:	c2 48       	rjmp	800060d2 <_vfprintf_r+0x72a>
8000608c:	ee ca ff ff 	sub	r10,r7,-1
80006090:	10 37       	cp.w	r7,r8
80006092:	c0 94       	brge	800060a4 <_vfprintf_r+0x6fc>
80006094:	fa c9 f9 44 	sub	r9,sp,-1724
80006098:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000609c:	14 97       	mov	r7,r10
8000609e:	ec fb fd 88 	ld.w	r11,r6[-632]
800060a2:	c1 88       	rjmp	800060d2 <_vfprintf_r+0x72a>
800060a4:	41 09       	lddsp	r9,sp[0x40]
800060a6:	59 f8       	cp.w	r8,31
800060a8:	e0 89 00 11 	brgt	800060ca <_vfprintf_r+0x722>
800060ac:	f2 cb ff fc 	sub	r11,r9,-4
800060b0:	51 0b       	stdsp	sp[0x40],r11
800060b2:	fa c6 f9 44 	sub	r6,sp,-1724
800060b6:	72 0b       	ld.w	r11,r9[0x0]
800060b8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800060bc:	f3 4b fd 88 	st.w	r9[-632],r11
800060c0:	2f f8       	sub	r8,-1
800060c2:	14 97       	mov	r7,r10
800060c4:	fb 48 06 b4 	st.w	sp[1716],r8
800060c8:	c0 58       	rjmp	800060d2 <_vfprintf_r+0x72a>
800060ca:	72 0b       	ld.w	r11,r9[0x0]
800060cc:	14 97       	mov	r7,r10
800060ce:	2f c9       	sub	r9,-4
800060d0:	51 09       	stdsp	sp[0x40],r9
800060d2:	50 1b       	stdsp	sp[0x4],r11
800060d4:	bf 5b       	asr	r11,0x1f
800060d6:	50 0b       	stdsp	sp[0x0],r11
800060d8:	fa ea 00 00 	ld.d	r10,sp[0]
800060dc:	58 0a       	cp.w	r10,0
800060de:	5c 2b       	cpc	r11
800060e0:	c0 e4       	brge	800060fc <_vfprintf_r+0x754>
800060e2:	30 08       	mov	r8,0
800060e4:	fa ea 00 00 	ld.d	r10,sp[0]
800060e8:	30 09       	mov	r9,0
800060ea:	f0 0a 01 0a 	sub	r10,r8,r10
800060ee:	f2 0b 01 4b 	sbc	r11,r9,r11
800060f2:	32 d8       	mov	r8,45
800060f4:	fa eb 00 00 	st.d	sp[0],r10
800060f8:	fb 68 06 bb 	st.b	sp[1723],r8
800060fc:	30 18       	mov	r8,1
800060fe:	e0 8f 06 fe 	bral	80006efa <_vfprintf_r+0x1552>
80006102:	50 a7       	stdsp	sp[0x28],r7
80006104:	50 80       	stdsp	sp[0x20],r0
80006106:	0c 97       	mov	r7,r6
80006108:	04 94       	mov	r4,r2
8000610a:	06 96       	mov	r6,r3
8000610c:	02 92       	mov	r2,r1
8000610e:	40 93       	lddsp	r3,sp[0x24]
80006110:	10 90       	mov	r0,r8
80006112:	40 41       	lddsp	r1,sp[0x10]
80006114:	0e 99       	mov	r9,r7
80006116:	ed b5 00 03 	bld	r5,0x3
8000611a:	c4 11       	brne	8000619c <_vfprintf_r+0x7f4>
8000611c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006120:	40 3a       	lddsp	r10,sp[0xc]
80006122:	58 0a       	cp.w	r10,0
80006124:	c1 90       	breq	80006156 <_vfprintf_r+0x7ae>
80006126:	10 36       	cp.w	r6,r8
80006128:	c6 45       	brlt	800061f0 <_vfprintf_r+0x848>
8000612a:	fa c8 f9 50 	sub	r8,sp,-1712
8000612e:	1a d8       	st.w	--sp,r8
80006130:	fa c8 fa b8 	sub	r8,sp,-1352
80006134:	1a d8       	st.w	--sp,r8
80006136:	fa c8 fb b4 	sub	r8,sp,-1100
8000613a:	0c 9b       	mov	r11,r6
8000613c:	1a d8       	st.w	--sp,r8
8000613e:	04 9a       	mov	r10,r2
80006140:	fa c8 f9 40 	sub	r8,sp,-1728
80006144:	fa c9 ff b4 	sub	r9,sp,-76
80006148:	08 9c       	mov	r12,r4
8000614a:	fe b0 fa 91 	rcall	8000566c <get_arg>
8000614e:	2f dd       	sub	sp,-12
80006150:	78 16       	ld.w	r6,r12[0x4]
80006152:	50 76       	stdsp	sp[0x1c],r6
80006154:	c4 88       	rjmp	800061e4 <_vfprintf_r+0x83c>
80006156:	2f f7       	sub	r7,-1
80006158:	10 39       	cp.w	r9,r8
8000615a:	c0 c4       	brge	80006172 <_vfprintf_r+0x7ca>
8000615c:	fa ce f9 44 	sub	lr,sp,-1724
80006160:	fc 06 00 36 	add	r6,lr,r6<<0x3
80006164:	ec fc fd 8c 	ld.w	r12,r6[-628]
80006168:	50 7c       	stdsp	sp[0x1c],r12
8000616a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000616e:	50 56       	stdsp	sp[0x14],r6
80006170:	c6 68       	rjmp	8000623c <_vfprintf_r+0x894>
80006172:	41 09       	lddsp	r9,sp[0x40]
80006174:	59 f8       	cp.w	r8,31
80006176:	e0 89 00 10 	brgt	80006196 <_vfprintf_r+0x7ee>
8000617a:	f2 ca ff f8 	sub	r10,r9,-8
8000617e:	72 1b       	ld.w	r11,r9[0x4]
80006180:	51 0a       	stdsp	sp[0x40],r10
80006182:	72 09       	ld.w	r9,r9[0x0]
80006184:	fa ca f9 44 	sub	r10,sp,-1724
80006188:	50 7b       	stdsp	sp[0x1c],r11
8000618a:	50 59       	stdsp	sp[0x14],r9
8000618c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006190:	40 5b       	lddsp	r11,sp[0x14]
80006192:	40 7a       	lddsp	r10,sp[0x1c]
80006194:	c4 78       	rjmp	80006222 <_vfprintf_r+0x87a>
80006196:	72 18       	ld.w	r8,r9[0x4]
80006198:	50 78       	stdsp	sp[0x1c],r8
8000619a:	c4 c8       	rjmp	80006232 <_vfprintf_r+0x88a>
8000619c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800061a0:	40 3e       	lddsp	lr,sp[0xc]
800061a2:	58 0e       	cp.w	lr,0
800061a4:	c2 30       	breq	800061ea <_vfprintf_r+0x842>
800061a6:	10 36       	cp.w	r6,r8
800061a8:	c0 94       	brge	800061ba <_vfprintf_r+0x812>
800061aa:	fa cc f9 44 	sub	r12,sp,-1724
800061ae:	f8 06 00 36 	add	r6,r12,r6<<0x3
800061b2:	ec fb fd 8c 	ld.w	r11,r6[-628]
800061b6:	50 7b       	stdsp	sp[0x1c],r11
800061b8:	cd 9b       	rjmp	8000616a <_vfprintf_r+0x7c2>
800061ba:	fa c8 f9 50 	sub	r8,sp,-1712
800061be:	1a d8       	st.w	--sp,r8
800061c0:	fa c8 fa b8 	sub	r8,sp,-1352
800061c4:	04 9a       	mov	r10,r2
800061c6:	1a d8       	st.w	--sp,r8
800061c8:	fa c8 fb b4 	sub	r8,sp,-1100
800061cc:	0c 9b       	mov	r11,r6
800061ce:	1a d8       	st.w	--sp,r8
800061d0:	08 9c       	mov	r12,r4
800061d2:	fa c8 f9 40 	sub	r8,sp,-1728
800061d6:	fa c9 ff b4 	sub	r9,sp,-76
800061da:	fe b0 fa 49 	rcall	8000566c <get_arg>
800061de:	2f dd       	sub	sp,-12
800061e0:	78 1a       	ld.w	r10,r12[0x4]
800061e2:	50 7a       	stdsp	sp[0x1c],r10
800061e4:	78 0c       	ld.w	r12,r12[0x0]
800061e6:	50 5c       	stdsp	sp[0x14],r12
800061e8:	c2 a8       	rjmp	8000623c <_vfprintf_r+0x894>
800061ea:	2f f7       	sub	r7,-1
800061ec:	10 39       	cp.w	r9,r8
800061ee:	c0 94       	brge	80006200 <_vfprintf_r+0x858>
800061f0:	fa c9 f9 44 	sub	r9,sp,-1724
800061f4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800061f8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800061fc:	50 78       	stdsp	sp[0x1c],r8
800061fe:	cb 6b       	rjmp	8000616a <_vfprintf_r+0x7c2>
80006200:	41 09       	lddsp	r9,sp[0x40]
80006202:	59 f8       	cp.w	r8,31
80006204:	e0 89 00 15 	brgt	8000622e <_vfprintf_r+0x886>
80006208:	f2 ca ff f8 	sub	r10,r9,-8
8000620c:	72 16       	ld.w	r6,r9[0x4]
8000620e:	72 09       	ld.w	r9,r9[0x0]
80006210:	51 0a       	stdsp	sp[0x40],r10
80006212:	50 59       	stdsp	sp[0x14],r9
80006214:	fa ce f9 44 	sub	lr,sp,-1724
80006218:	50 76       	stdsp	sp[0x1c],r6
8000621a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000621e:	40 5b       	lddsp	r11,sp[0x14]
80006220:	0c 9a       	mov	r10,r6
80006222:	f2 eb fd 88 	st.d	r9[-632],r10
80006226:	2f f8       	sub	r8,-1
80006228:	fb 48 06 b4 	st.w	sp[1716],r8
8000622c:	c0 88       	rjmp	8000623c <_vfprintf_r+0x894>
8000622e:	72 1c       	ld.w	r12,r9[0x4]
80006230:	50 7c       	stdsp	sp[0x1c],r12
80006232:	f2 c8 ff f8 	sub	r8,r9,-8
80006236:	51 08       	stdsp	sp[0x40],r8
80006238:	72 09       	ld.w	r9,r9[0x0]
8000623a:	50 59       	stdsp	sp[0x14],r9
8000623c:	40 5b       	lddsp	r11,sp[0x14]
8000623e:	40 7a       	lddsp	r10,sp[0x1c]
80006240:	e0 a0 1d 94 	rcall	80009d68 <__isinfd>
80006244:	18 96       	mov	r6,r12
80006246:	c1 50       	breq	80006270 <_vfprintf_r+0x8c8>
80006248:	30 08       	mov	r8,0
8000624a:	30 09       	mov	r9,0
8000624c:	40 5b       	lddsp	r11,sp[0x14]
8000624e:	40 7a       	lddsp	r10,sp[0x1c]
80006250:	e0 a0 22 98 	rcall	8000a780 <__avr32_f64_cmp_lt>
80006254:	c0 40       	breq	8000625c <_vfprintf_r+0x8b4>
80006256:	32 d8       	mov	r8,45
80006258:	fb 68 06 bb 	st.b	sp[1723],r8
8000625c:	4d 18       	lddpc	r8,800063a0 <_vfprintf_r+0x9f8>
8000625e:	4d 26       	lddpc	r6,800063a4 <_vfprintf_r+0x9fc>
80006260:	a7 d5       	cbr	r5,0x7
80006262:	e0 40 00 47 	cp.w	r0,71
80006266:	f0 06 17 a0 	movle	r6,r8
8000626a:	30 32       	mov	r2,3
8000626c:	e0 8f 06 d4 	bral	80007014 <_vfprintf_r+0x166c>
80006270:	40 5b       	lddsp	r11,sp[0x14]
80006272:	40 7a       	lddsp	r10,sp[0x1c]
80006274:	e0 a0 1d 8f 	rcall	80009d92 <__isnand>
80006278:	c0 c0       	breq	80006290 <_vfprintf_r+0x8e8>
8000627a:	50 26       	stdsp	sp[0x8],r6
8000627c:	4c b8       	lddpc	r8,800063a8 <_vfprintf_r+0xa00>
8000627e:	4c c6       	lddpc	r6,800063ac <_vfprintf_r+0xa04>
80006280:	a7 d5       	cbr	r5,0x7
80006282:	e0 40 00 47 	cp.w	r0,71
80006286:	f0 06 17 a0 	movle	r6,r8
8000628a:	30 32       	mov	r2,3
8000628c:	e0 8f 06 ca 	bral	80007020 <_vfprintf_r+0x1678>
80006290:	40 2a       	lddsp	r10,sp[0x8]
80006292:	5b fa       	cp.w	r10,-1
80006294:	c0 41       	brne	8000629c <_vfprintf_r+0x8f4>
80006296:	30 69       	mov	r9,6
80006298:	50 29       	stdsp	sp[0x8],r9
8000629a:	c1 18       	rjmp	800062bc <_vfprintf_r+0x914>
8000629c:	e0 40 00 47 	cp.w	r0,71
800062a0:	5f 09       	sreq	r9
800062a2:	e0 40 00 67 	cp.w	r0,103
800062a6:	5f 08       	sreq	r8
800062a8:	f3 e8 10 08 	or	r8,r9,r8
800062ac:	f8 08 18 00 	cp.b	r8,r12
800062b0:	c0 60       	breq	800062bc <_vfprintf_r+0x914>
800062b2:	40 28       	lddsp	r8,sp[0x8]
800062b4:	58 08       	cp.w	r8,0
800062b6:	f9 b8 00 01 	moveq	r8,1
800062ba:	50 28       	stdsp	sp[0x8],r8
800062bc:	40 78       	lddsp	r8,sp[0x1c]
800062be:	40 59       	lddsp	r9,sp[0x14]
800062c0:	fa e9 06 94 	st.d	sp[1684],r8
800062c4:	a9 a5       	sbr	r5,0x8
800062c6:	fa f8 06 94 	ld.w	r8,sp[1684]
800062ca:	58 08       	cp.w	r8,0
800062cc:	c0 65       	brlt	800062d8 <_vfprintf_r+0x930>
800062ce:	40 5e       	lddsp	lr,sp[0x14]
800062d0:	30 0c       	mov	r12,0
800062d2:	50 6e       	stdsp	sp[0x18],lr
800062d4:	50 9c       	stdsp	sp[0x24],r12
800062d6:	c0 78       	rjmp	800062e4 <_vfprintf_r+0x93c>
800062d8:	40 5b       	lddsp	r11,sp[0x14]
800062da:	32 da       	mov	r10,45
800062dc:	ee 1b 80 00 	eorh	r11,0x8000
800062e0:	50 9a       	stdsp	sp[0x24],r10
800062e2:	50 6b       	stdsp	sp[0x18],r11
800062e4:	e0 40 00 46 	cp.w	r0,70
800062e8:	5f 09       	sreq	r9
800062ea:	e0 40 00 66 	cp.w	r0,102
800062ee:	5f 08       	sreq	r8
800062f0:	f3 e8 10 08 	or	r8,r9,r8
800062f4:	50 48       	stdsp	sp[0x10],r8
800062f6:	c0 40       	breq	800062fe <_vfprintf_r+0x956>
800062f8:	40 22       	lddsp	r2,sp[0x8]
800062fa:	30 39       	mov	r9,3
800062fc:	c1 08       	rjmp	8000631c <_vfprintf_r+0x974>
800062fe:	e0 40 00 45 	cp.w	r0,69
80006302:	5f 09       	sreq	r9
80006304:	e0 40 00 65 	cp.w	r0,101
80006308:	5f 08       	sreq	r8
8000630a:	40 22       	lddsp	r2,sp[0x8]
8000630c:	10 49       	or	r9,r8
8000630e:	2f f2       	sub	r2,-1
80006310:	40 46       	lddsp	r6,sp[0x10]
80006312:	ec 09 18 00 	cp.b	r9,r6
80006316:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000631a:	30 29       	mov	r9,2
8000631c:	fa c8 f9 5c 	sub	r8,sp,-1700
80006320:	1a d8       	st.w	--sp,r8
80006322:	fa c8 f9 54 	sub	r8,sp,-1708
80006326:	1a d8       	st.w	--sp,r8
80006328:	fa c8 f9 4c 	sub	r8,sp,-1716
8000632c:	08 9c       	mov	r12,r4
8000632e:	1a d8       	st.w	--sp,r8
80006330:	04 98       	mov	r8,r2
80006332:	40 9b       	lddsp	r11,sp[0x24]
80006334:	40 aa       	lddsp	r10,sp[0x28]
80006336:	e0 a0 0b cd 	rcall	80007ad0 <_dtoa_r>
8000633a:	e0 40 00 47 	cp.w	r0,71
8000633e:	5f 19       	srne	r9
80006340:	e0 40 00 67 	cp.w	r0,103
80006344:	5f 18       	srne	r8
80006346:	18 96       	mov	r6,r12
80006348:	2f dd       	sub	sp,-12
8000634a:	f3 e8 00 08 	and	r8,r9,r8
8000634e:	c0 41       	brne	80006356 <_vfprintf_r+0x9ae>
80006350:	ed b5 00 00 	bld	r5,0x0
80006354:	c3 81       	brne	800063c4 <_vfprintf_r+0xa1c>
80006356:	ec 02 00 0e 	add	lr,r6,r2
8000635a:	50 3e       	stdsp	sp[0xc],lr
8000635c:	40 4c       	lddsp	r12,sp[0x10]
8000635e:	58 0c       	cp.w	r12,0
80006360:	c1 50       	breq	8000638a <_vfprintf_r+0x9e2>
80006362:	0d 89       	ld.ub	r9,r6[0x0]
80006364:	33 08       	mov	r8,48
80006366:	f0 09 18 00 	cp.b	r9,r8
8000636a:	c0 b1       	brne	80006380 <_vfprintf_r+0x9d8>
8000636c:	30 08       	mov	r8,0
8000636e:	30 09       	mov	r9,0
80006370:	40 6b       	lddsp	r11,sp[0x18]
80006372:	40 7a       	lddsp	r10,sp[0x1c]
80006374:	e0 a0 21 bf 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
80006378:	fb b2 00 01 	rsubeq	r2,1
8000637c:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80006380:	40 3b       	lddsp	r11,sp[0xc]
80006382:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006386:	10 0b       	add	r11,r8
80006388:	50 3b       	stdsp	sp[0xc],r11
8000638a:	40 6b       	lddsp	r11,sp[0x18]
8000638c:	30 08       	mov	r8,0
8000638e:	30 09       	mov	r9,0
80006390:	40 7a       	lddsp	r10,sp[0x1c]
80006392:	e0 a0 21 b0 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
80006396:	c1 10       	breq	800063b8 <_vfprintf_r+0xa10>
80006398:	40 3a       	lddsp	r10,sp[0xc]
8000639a:	fb 4a 06 a4 	st.w	sp[1700],r10
8000639e:	c0 d8       	rjmp	800063b8 <_vfprintf_r+0xa10>
800063a0:	80 00       	ld.sh	r0,r0[0x0]
800063a2:	bd d4       	cbr	r4,0x1d
800063a4:	80 00       	ld.sh	r0,r0[0x0]
800063a6:	bd d8       	cbr	r8,0x1d
800063a8:	80 00       	ld.sh	r0,r0[0x0]
800063aa:	bd dc       	cbr	r12,0x1d
800063ac:	80 00       	ld.sh	r0,r0[0x0]
800063ae:	bd e0       	*unknown*
800063b0:	10 c9       	st.b	r8++,r9
800063b2:	fb 48 06 a4 	st.w	sp[1700],r8
800063b6:	c0 28       	rjmp	800063ba <_vfprintf_r+0xa12>
800063b8:	33 09       	mov	r9,48
800063ba:	fa f8 06 a4 	ld.w	r8,sp[1700]
800063be:	40 3e       	lddsp	lr,sp[0xc]
800063c0:	1c 38       	cp.w	r8,lr
800063c2:	cf 73       	brcs	800063b0 <_vfprintf_r+0xa08>
800063c4:	e0 40 00 47 	cp.w	r0,71
800063c8:	5f 09       	sreq	r9
800063ca:	e0 40 00 67 	cp.w	r0,103
800063ce:	5f 08       	sreq	r8
800063d0:	f3 e8 10 08 	or	r8,r9,r8
800063d4:	fa f9 06 a4 	ld.w	r9,sp[1700]
800063d8:	0c 19       	sub	r9,r6
800063da:	50 69       	stdsp	sp[0x18],r9
800063dc:	58 08       	cp.w	r8,0
800063de:	c0 b0       	breq	800063f4 <_vfprintf_r+0xa4c>
800063e0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800063e4:	5b d8       	cp.w	r8,-3
800063e6:	c0 55       	brlt	800063f0 <_vfprintf_r+0xa48>
800063e8:	40 2c       	lddsp	r12,sp[0x8]
800063ea:	18 38       	cp.w	r8,r12
800063ec:	e0 8a 00 6a 	brle	800064c0 <_vfprintf_r+0xb18>
800063f0:	20 20       	sub	r0,2
800063f2:	c0 58       	rjmp	800063fc <_vfprintf_r+0xa54>
800063f4:	e0 40 00 65 	cp.w	r0,101
800063f8:	e0 89 00 46 	brgt	80006484 <_vfprintf_r+0xadc>
800063fc:	fa fb 06 ac 	ld.w	r11,sp[1708]
80006400:	fb 60 06 9c 	st.b	sp[1692],r0
80006404:	20 1b       	sub	r11,1
80006406:	fb 4b 06 ac 	st.w	sp[1708],r11
8000640a:	c0 47       	brpl	80006412 <_vfprintf_r+0xa6a>
8000640c:	5c 3b       	neg	r11
8000640e:	32 d8       	mov	r8,45
80006410:	c0 28       	rjmp	80006414 <_vfprintf_r+0xa6c>
80006412:	32 b8       	mov	r8,43
80006414:	fb 68 06 9d 	st.b	sp[1693],r8
80006418:	58 9b       	cp.w	r11,9
8000641a:	e0 8a 00 1d 	brle	80006454 <_vfprintf_r+0xaac>
8000641e:	fa c9 fa 35 	sub	r9,sp,-1483
80006422:	30 aa       	mov	r10,10
80006424:	12 98       	mov	r8,r9
80006426:	0e 9c       	mov	r12,r7
80006428:	0c 92       	mov	r2,r6
8000642a:	f6 0a 0c 06 	divs	r6,r11,r10
8000642e:	0e 9b       	mov	r11,r7
80006430:	2d 0b       	sub	r11,-48
80006432:	10 fb       	st.b	--r8,r11
80006434:	0c 9b       	mov	r11,r6
80006436:	58 96       	cp.w	r6,9
80006438:	fe 99 ff f9 	brgt	8000642a <_vfprintf_r+0xa82>
8000643c:	2d 0b       	sub	r11,-48
8000643e:	18 97       	mov	r7,r12
80006440:	04 96       	mov	r6,r2
80006442:	10 fb       	st.b	--r8,r11
80006444:	fa ca f9 62 	sub	r10,sp,-1694
80006448:	c0 38       	rjmp	8000644e <_vfprintf_r+0xaa6>
8000644a:	11 3b       	ld.ub	r11,r8++
8000644c:	14 cb       	st.b	r10++,r11
8000644e:	12 38       	cp.w	r8,r9
80006450:	cf d3       	brcs	8000644a <_vfprintf_r+0xaa2>
80006452:	c0 98       	rjmp	80006464 <_vfprintf_r+0xabc>
80006454:	2d 0b       	sub	r11,-48
80006456:	33 08       	mov	r8,48
80006458:	fb 6b 06 9f 	st.b	sp[1695],r11
8000645c:	fb 68 06 9e 	st.b	sp[1694],r8
80006460:	fa ca f9 60 	sub	r10,sp,-1696
80006464:	fa c8 f9 64 	sub	r8,sp,-1692
80006468:	f4 08 01 08 	sub	r8,r10,r8
8000646c:	50 e8       	stdsp	sp[0x38],r8
8000646e:	10 92       	mov	r2,r8
80006470:	40 6b       	lddsp	r11,sp[0x18]
80006472:	16 02       	add	r2,r11
80006474:	58 1b       	cp.w	r11,1
80006476:	e0 89 00 05 	brgt	80006480 <_vfprintf_r+0xad8>
8000647a:	ed b5 00 00 	bld	r5,0x0
8000647e:	c3 51       	brne	800064e8 <_vfprintf_r+0xb40>
80006480:	2f f2       	sub	r2,-1
80006482:	c3 38       	rjmp	800064e8 <_vfprintf_r+0xb40>
80006484:	e0 40 00 66 	cp.w	r0,102
80006488:	c1 c1       	brne	800064c0 <_vfprintf_r+0xb18>
8000648a:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000648e:	58 02       	cp.w	r2,0
80006490:	e0 8a 00 0c 	brle	800064a8 <_vfprintf_r+0xb00>
80006494:	40 2a       	lddsp	r10,sp[0x8]
80006496:	58 0a       	cp.w	r10,0
80006498:	c0 41       	brne	800064a0 <_vfprintf_r+0xaf8>
8000649a:	ed b5 00 00 	bld	r5,0x0
8000649e:	c2 51       	brne	800064e8 <_vfprintf_r+0xb40>
800064a0:	2f f2       	sub	r2,-1
800064a2:	40 29       	lddsp	r9,sp[0x8]
800064a4:	12 02       	add	r2,r9
800064a6:	c0 b8       	rjmp	800064bc <_vfprintf_r+0xb14>
800064a8:	40 28       	lddsp	r8,sp[0x8]
800064aa:	58 08       	cp.w	r8,0
800064ac:	c0 61       	brne	800064b8 <_vfprintf_r+0xb10>
800064ae:	ed b5 00 00 	bld	r5,0x0
800064b2:	c0 30       	breq	800064b8 <_vfprintf_r+0xb10>
800064b4:	30 12       	mov	r2,1
800064b6:	c1 98       	rjmp	800064e8 <_vfprintf_r+0xb40>
800064b8:	40 22       	lddsp	r2,sp[0x8]
800064ba:	2f e2       	sub	r2,-2
800064bc:	36 60       	mov	r0,102
800064be:	c1 58       	rjmp	800064e8 <_vfprintf_r+0xb40>
800064c0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800064c4:	40 6e       	lddsp	lr,sp[0x18]
800064c6:	1c 32       	cp.w	r2,lr
800064c8:	c0 65       	brlt	800064d4 <_vfprintf_r+0xb2c>
800064ca:	ed b5 00 00 	bld	r5,0x0
800064ce:	f7 b2 00 ff 	subeq	r2,-1
800064d2:	c0 a8       	rjmp	800064e6 <_vfprintf_r+0xb3e>
800064d4:	e4 08 11 02 	rsub	r8,r2,2
800064d8:	40 6c       	lddsp	r12,sp[0x18]
800064da:	58 02       	cp.w	r2,0
800064dc:	f0 02 17 a0 	movle	r2,r8
800064e0:	f9 b2 09 01 	movgt	r2,1
800064e4:	18 02       	add	r2,r12
800064e6:	36 70       	mov	r0,103
800064e8:	40 9b       	lddsp	r11,sp[0x24]
800064ea:	58 0b       	cp.w	r11,0
800064ec:	e0 80 05 94 	breq	80007014 <_vfprintf_r+0x166c>
800064f0:	32 d8       	mov	r8,45
800064f2:	fb 68 06 bb 	st.b	sp[1723],r8
800064f6:	e0 8f 05 93 	bral	8000701c <_vfprintf_r+0x1674>
800064fa:	50 a7       	stdsp	sp[0x28],r7
800064fc:	04 94       	mov	r4,r2
800064fe:	0c 97       	mov	r7,r6
80006500:	02 92       	mov	r2,r1
80006502:	06 96       	mov	r6,r3
80006504:	40 41       	lddsp	r1,sp[0x10]
80006506:	40 93       	lddsp	r3,sp[0x24]
80006508:	0e 99       	mov	r9,r7
8000650a:	ed b5 00 05 	bld	r5,0x5
8000650e:	c4 81       	brne	8000659e <_vfprintf_r+0xbf6>
80006510:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006514:	40 3e       	lddsp	lr,sp[0xc]
80006516:	58 0e       	cp.w	lr,0
80006518:	c1 d0       	breq	80006552 <_vfprintf_r+0xbaa>
8000651a:	10 36       	cp.w	r6,r8
8000651c:	c0 64       	brge	80006528 <_vfprintf_r+0xb80>
8000651e:	fa cc f9 44 	sub	r12,sp,-1724
80006522:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006526:	c1 d8       	rjmp	80006560 <_vfprintf_r+0xbb8>
80006528:	fa c8 f9 50 	sub	r8,sp,-1712
8000652c:	1a d8       	st.w	--sp,r8
8000652e:	fa c8 fa b8 	sub	r8,sp,-1352
80006532:	04 9a       	mov	r10,r2
80006534:	1a d8       	st.w	--sp,r8
80006536:	fa c8 fb b4 	sub	r8,sp,-1100
8000653a:	0c 9b       	mov	r11,r6
8000653c:	1a d8       	st.w	--sp,r8
8000653e:	08 9c       	mov	r12,r4
80006540:	fa c8 f9 40 	sub	r8,sp,-1728
80006544:	fa c9 ff b4 	sub	r9,sp,-76
80006548:	fe b0 f8 92 	rcall	8000566c <get_arg>
8000654c:	2f dd       	sub	sp,-12
8000654e:	78 0a       	ld.w	r10,r12[0x0]
80006550:	c2 08       	rjmp	80006590 <_vfprintf_r+0xbe8>
80006552:	2f f7       	sub	r7,-1
80006554:	10 39       	cp.w	r9,r8
80006556:	c0 84       	brge	80006566 <_vfprintf_r+0xbbe>
80006558:	fa cb f9 44 	sub	r11,sp,-1724
8000655c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006560:	ec fa fd 88 	ld.w	r10,r6[-632]
80006564:	c1 68       	rjmp	80006590 <_vfprintf_r+0xbe8>
80006566:	41 09       	lddsp	r9,sp[0x40]
80006568:	59 f8       	cp.w	r8,31
8000656a:	e0 89 00 10 	brgt	8000658a <_vfprintf_r+0xbe2>
8000656e:	f2 ca ff fc 	sub	r10,r9,-4
80006572:	51 0a       	stdsp	sp[0x40],r10
80006574:	fa c6 f9 44 	sub	r6,sp,-1724
80006578:	72 0a       	ld.w	r10,r9[0x0]
8000657a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000657e:	f3 4a fd 88 	st.w	r9[-632],r10
80006582:	2f f8       	sub	r8,-1
80006584:	fb 48 06 b4 	st.w	sp[1716],r8
80006588:	c0 48       	rjmp	80006590 <_vfprintf_r+0xbe8>
8000658a:	72 0a       	ld.w	r10,r9[0x0]
8000658c:	2f c9       	sub	r9,-4
8000658e:	51 09       	stdsp	sp[0x40],r9
80006590:	40 be       	lddsp	lr,sp[0x2c]
80006592:	1c 98       	mov	r8,lr
80006594:	95 1e       	st.w	r10[0x4],lr
80006596:	bf 58       	asr	r8,0x1f
80006598:	95 08       	st.w	r10[0x0],r8
8000659a:	fe 9f fa 92 	bral	80005abe <_vfprintf_r+0x116>
8000659e:	ed b5 00 04 	bld	r5,0x4
800065a2:	c4 80       	breq	80006632 <_vfprintf_r+0xc8a>
800065a4:	e2 15 00 40 	andl	r5,0x40,COH
800065a8:	c4 50       	breq	80006632 <_vfprintf_r+0xc8a>
800065aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065ae:	40 3c       	lddsp	r12,sp[0xc]
800065b0:	58 0c       	cp.w	r12,0
800065b2:	c1 d0       	breq	800065ec <_vfprintf_r+0xc44>
800065b4:	10 36       	cp.w	r6,r8
800065b6:	c0 64       	brge	800065c2 <_vfprintf_r+0xc1a>
800065b8:	fa cb f9 44 	sub	r11,sp,-1724
800065bc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800065c0:	c1 d8       	rjmp	800065fa <_vfprintf_r+0xc52>
800065c2:	fa c8 f9 50 	sub	r8,sp,-1712
800065c6:	1a d8       	st.w	--sp,r8
800065c8:	fa c8 fa b8 	sub	r8,sp,-1352
800065cc:	04 9a       	mov	r10,r2
800065ce:	1a d8       	st.w	--sp,r8
800065d0:	fa c8 fb b4 	sub	r8,sp,-1100
800065d4:	0c 9b       	mov	r11,r6
800065d6:	1a d8       	st.w	--sp,r8
800065d8:	08 9c       	mov	r12,r4
800065da:	fa c8 f9 40 	sub	r8,sp,-1728
800065de:	fa c9 ff b4 	sub	r9,sp,-76
800065e2:	fe b0 f8 45 	rcall	8000566c <get_arg>
800065e6:	2f dd       	sub	sp,-12
800065e8:	78 0a       	ld.w	r10,r12[0x0]
800065ea:	c2 08       	rjmp	8000662a <_vfprintf_r+0xc82>
800065ec:	2f f7       	sub	r7,-1
800065ee:	10 39       	cp.w	r9,r8
800065f0:	c0 84       	brge	80006600 <_vfprintf_r+0xc58>
800065f2:	fa ca f9 44 	sub	r10,sp,-1724
800065f6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800065fa:	ec fa fd 88 	ld.w	r10,r6[-632]
800065fe:	c1 68       	rjmp	8000662a <_vfprintf_r+0xc82>
80006600:	41 09       	lddsp	r9,sp[0x40]
80006602:	59 f8       	cp.w	r8,31
80006604:	e0 89 00 10 	brgt	80006624 <_vfprintf_r+0xc7c>
80006608:	f2 ca ff fc 	sub	r10,r9,-4
8000660c:	51 0a       	stdsp	sp[0x40],r10
8000660e:	fa c6 f9 44 	sub	r6,sp,-1724
80006612:	72 0a       	ld.w	r10,r9[0x0]
80006614:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006618:	f3 4a fd 88 	st.w	r9[-632],r10
8000661c:	2f f8       	sub	r8,-1
8000661e:	fb 48 06 b4 	st.w	sp[1716],r8
80006622:	c0 48       	rjmp	8000662a <_vfprintf_r+0xc82>
80006624:	72 0a       	ld.w	r10,r9[0x0]
80006626:	2f c9       	sub	r9,-4
80006628:	51 09       	stdsp	sp[0x40],r9
8000662a:	40 be       	lddsp	lr,sp[0x2c]
8000662c:	b4 0e       	st.h	r10[0x0],lr
8000662e:	fe 9f fa 48 	bral	80005abe <_vfprintf_r+0x116>
80006632:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006636:	40 3c       	lddsp	r12,sp[0xc]
80006638:	58 0c       	cp.w	r12,0
8000663a:	c1 d0       	breq	80006674 <_vfprintf_r+0xccc>
8000663c:	10 36       	cp.w	r6,r8
8000663e:	c0 64       	brge	8000664a <_vfprintf_r+0xca2>
80006640:	fa cb f9 44 	sub	r11,sp,-1724
80006644:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006648:	c1 d8       	rjmp	80006682 <_vfprintf_r+0xcda>
8000664a:	fa c8 f9 50 	sub	r8,sp,-1712
8000664e:	1a d8       	st.w	--sp,r8
80006650:	fa c8 fa b8 	sub	r8,sp,-1352
80006654:	04 9a       	mov	r10,r2
80006656:	1a d8       	st.w	--sp,r8
80006658:	fa c8 fb b4 	sub	r8,sp,-1100
8000665c:	0c 9b       	mov	r11,r6
8000665e:	1a d8       	st.w	--sp,r8
80006660:	08 9c       	mov	r12,r4
80006662:	fa c8 f9 40 	sub	r8,sp,-1728
80006666:	fa c9 ff b4 	sub	r9,sp,-76
8000666a:	fe b0 f8 01 	rcall	8000566c <get_arg>
8000666e:	2f dd       	sub	sp,-12
80006670:	78 0a       	ld.w	r10,r12[0x0]
80006672:	c2 08       	rjmp	800066b2 <_vfprintf_r+0xd0a>
80006674:	2f f7       	sub	r7,-1
80006676:	10 39       	cp.w	r9,r8
80006678:	c0 84       	brge	80006688 <_vfprintf_r+0xce0>
8000667a:	fa ca f9 44 	sub	r10,sp,-1724
8000667e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006682:	ec fa fd 88 	ld.w	r10,r6[-632]
80006686:	c1 68       	rjmp	800066b2 <_vfprintf_r+0xd0a>
80006688:	41 09       	lddsp	r9,sp[0x40]
8000668a:	59 f8       	cp.w	r8,31
8000668c:	e0 89 00 10 	brgt	800066ac <_vfprintf_r+0xd04>
80006690:	f2 ca ff fc 	sub	r10,r9,-4
80006694:	51 0a       	stdsp	sp[0x40],r10
80006696:	fa c6 f9 44 	sub	r6,sp,-1724
8000669a:	72 0a       	ld.w	r10,r9[0x0]
8000669c:	ec 08 00 39 	add	r9,r6,r8<<0x3
800066a0:	f3 4a fd 88 	st.w	r9[-632],r10
800066a4:	2f f8       	sub	r8,-1
800066a6:	fb 48 06 b4 	st.w	sp[1716],r8
800066aa:	c0 48       	rjmp	800066b2 <_vfprintf_r+0xd0a>
800066ac:	72 0a       	ld.w	r10,r9[0x0]
800066ae:	2f c9       	sub	r9,-4
800066b0:	51 09       	stdsp	sp[0x40],r9
800066b2:	40 be       	lddsp	lr,sp[0x2c]
800066b4:	95 0e       	st.w	r10[0x0],lr
800066b6:	fe 9f fa 04 	bral	80005abe <_vfprintf_r+0x116>
800066ba:	50 a7       	stdsp	sp[0x28],r7
800066bc:	50 80       	stdsp	sp[0x20],r0
800066be:	0c 97       	mov	r7,r6
800066c0:	04 94       	mov	r4,r2
800066c2:	06 96       	mov	r6,r3
800066c4:	02 92       	mov	r2,r1
800066c6:	40 93       	lddsp	r3,sp[0x24]
800066c8:	10 90       	mov	r0,r8
800066ca:	40 41       	lddsp	r1,sp[0x10]
800066cc:	a5 a5       	sbr	r5,0x4
800066ce:	c0 a8       	rjmp	800066e2 <_vfprintf_r+0xd3a>
800066d0:	50 a7       	stdsp	sp[0x28],r7
800066d2:	50 80       	stdsp	sp[0x20],r0
800066d4:	0c 97       	mov	r7,r6
800066d6:	04 94       	mov	r4,r2
800066d8:	06 96       	mov	r6,r3
800066da:	02 92       	mov	r2,r1
800066dc:	40 93       	lddsp	r3,sp[0x24]
800066de:	10 90       	mov	r0,r8
800066e0:	40 41       	lddsp	r1,sp[0x10]
800066e2:	ed b5 00 05 	bld	r5,0x5
800066e6:	c5 d1       	brne	800067a0 <_vfprintf_r+0xdf8>
800066e8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800066ec:	40 3c       	lddsp	r12,sp[0xc]
800066ee:	58 0c       	cp.w	r12,0
800066f0:	c2 60       	breq	8000673c <_vfprintf_r+0xd94>
800066f2:	10 36       	cp.w	r6,r8
800066f4:	c0 a4       	brge	80006708 <_vfprintf_r+0xd60>
800066f6:	fa cb f9 44 	sub	r11,sp,-1724
800066fa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800066fe:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006702:	fa e9 00 00 	st.d	sp[0],r8
80006706:	c1 88       	rjmp	80006736 <_vfprintf_r+0xd8e>
80006708:	fa c8 f9 50 	sub	r8,sp,-1712
8000670c:	1a d8       	st.w	--sp,r8
8000670e:	fa c8 fa b8 	sub	r8,sp,-1352
80006712:	04 9a       	mov	r10,r2
80006714:	1a d8       	st.w	--sp,r8
80006716:	0c 9b       	mov	r11,r6
80006718:	fa c8 fb b4 	sub	r8,sp,-1100
8000671c:	08 9c       	mov	r12,r4
8000671e:	1a d8       	st.w	--sp,r8
80006720:	fa c8 f9 40 	sub	r8,sp,-1728
80006724:	fa c9 ff b4 	sub	r9,sp,-76
80006728:	fe b0 f7 a2 	rcall	8000566c <get_arg>
8000672c:	2f dd       	sub	sp,-12
8000672e:	f8 ea 00 00 	ld.d	r10,r12[0]
80006732:	fa eb 00 00 	st.d	sp[0],r10
80006736:	30 08       	mov	r8,0
80006738:	e0 8f 03 de 	bral	80006ef4 <_vfprintf_r+0x154c>
8000673c:	ee ca ff ff 	sub	r10,r7,-1
80006740:	10 37       	cp.w	r7,r8
80006742:	c0 b4       	brge	80006758 <_vfprintf_r+0xdb0>
80006744:	fa c9 f9 44 	sub	r9,sp,-1724
80006748:	14 97       	mov	r7,r10
8000674a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000674e:	ec ea fd 88 	ld.d	r10,r6[-632]
80006752:	fa eb 00 00 	st.d	sp[0],r10
80006756:	c1 88       	rjmp	80006786 <_vfprintf_r+0xdde>
80006758:	41 09       	lddsp	r9,sp[0x40]
8000675a:	59 f8       	cp.w	r8,31
8000675c:	e0 89 00 18 	brgt	8000678c <_vfprintf_r+0xde4>
80006760:	f2 e6 00 00 	ld.d	r6,r9[0]
80006764:	f2 cb ff f8 	sub	r11,r9,-8
80006768:	fa e7 00 00 	st.d	sp[0],r6
8000676c:	51 0b       	stdsp	sp[0x40],r11
8000676e:	fa c6 f9 44 	sub	r6,sp,-1724
80006772:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006776:	fa e6 00 00 	ld.d	r6,sp[0]
8000677a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000677e:	2f f8       	sub	r8,-1
80006780:	14 97       	mov	r7,r10
80006782:	fb 48 06 b4 	st.w	sp[1716],r8
80006786:	40 38       	lddsp	r8,sp[0xc]
80006788:	e0 8f 03 b6 	bral	80006ef4 <_vfprintf_r+0x154c>
8000678c:	f2 e6 00 00 	ld.d	r6,r9[0]
80006790:	40 38       	lddsp	r8,sp[0xc]
80006792:	fa e7 00 00 	st.d	sp[0],r6
80006796:	2f 89       	sub	r9,-8
80006798:	14 97       	mov	r7,r10
8000679a:	51 09       	stdsp	sp[0x40],r9
8000679c:	e0 8f 03 ac 	bral	80006ef4 <_vfprintf_r+0x154c>
800067a0:	ed b5 00 04 	bld	r5,0x4
800067a4:	c1 61       	brne	800067d0 <_vfprintf_r+0xe28>
800067a6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800067aa:	40 3e       	lddsp	lr,sp[0xc]
800067ac:	58 0e       	cp.w	lr,0
800067ae:	c0 80       	breq	800067be <_vfprintf_r+0xe16>
800067b0:	10 36       	cp.w	r6,r8
800067b2:	c6 74       	brge	80006880 <_vfprintf_r+0xed8>
800067b4:	fa cc f9 44 	sub	r12,sp,-1724
800067b8:	f8 06 00 36 	add	r6,r12,r6<<0x3
800067bc:	c8 08       	rjmp	800068bc <_vfprintf_r+0xf14>
800067be:	ee ca ff ff 	sub	r10,r7,-1
800067c2:	10 37       	cp.w	r7,r8
800067c4:	c7 f4       	brge	800068c2 <_vfprintf_r+0xf1a>
800067c6:	fa cb f9 44 	sub	r11,sp,-1724
800067ca:	f6 06 00 36 	add	r6,r11,r6<<0x3
800067ce:	c7 68       	rjmp	800068ba <_vfprintf_r+0xf12>
800067d0:	ed b5 00 06 	bld	r5,0x6
800067d4:	c4 a1       	brne	80006868 <_vfprintf_r+0xec0>
800067d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800067da:	40 3c       	lddsp	r12,sp[0xc]
800067dc:	58 0c       	cp.w	r12,0
800067de:	c1 d0       	breq	80006818 <_vfprintf_r+0xe70>
800067e0:	10 36       	cp.w	r6,r8
800067e2:	c0 64       	brge	800067ee <_vfprintf_r+0xe46>
800067e4:	fa cb f9 44 	sub	r11,sp,-1724
800067e8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800067ec:	c1 f8       	rjmp	8000682a <_vfprintf_r+0xe82>
800067ee:	fa c8 f9 50 	sub	r8,sp,-1712
800067f2:	1a d8       	st.w	--sp,r8
800067f4:	fa c8 fa b8 	sub	r8,sp,-1352
800067f8:	1a d8       	st.w	--sp,r8
800067fa:	fa c8 fb b4 	sub	r8,sp,-1100
800067fe:	1a d8       	st.w	--sp,r8
80006800:	fa c8 f9 40 	sub	r8,sp,-1728
80006804:	fa c9 ff b4 	sub	r9,sp,-76
80006808:	04 9a       	mov	r10,r2
8000680a:	0c 9b       	mov	r11,r6
8000680c:	08 9c       	mov	r12,r4
8000680e:	fe b0 f7 2f 	rcall	8000566c <get_arg>
80006812:	2f dd       	sub	sp,-12
80006814:	98 18       	ld.sh	r8,r12[0x2]
80006816:	c2 68       	rjmp	80006862 <_vfprintf_r+0xeba>
80006818:	ee ca ff ff 	sub	r10,r7,-1
8000681c:	10 37       	cp.w	r7,r8
8000681e:	c0 94       	brge	80006830 <_vfprintf_r+0xe88>
80006820:	fa c9 f9 44 	sub	r9,sp,-1724
80006824:	14 97       	mov	r7,r10
80006826:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000682a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000682e:	c1 a8       	rjmp	80006862 <_vfprintf_r+0xeba>
80006830:	41 09       	lddsp	r9,sp[0x40]
80006832:	59 f8       	cp.w	r8,31
80006834:	e0 89 00 13 	brgt	8000685a <_vfprintf_r+0xeb2>
80006838:	f2 cb ff fc 	sub	r11,r9,-4
8000683c:	51 0b       	stdsp	sp[0x40],r11
8000683e:	72 09       	ld.w	r9,r9[0x0]
80006840:	fa c6 f9 44 	sub	r6,sp,-1724
80006844:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006848:	2f f8       	sub	r8,-1
8000684a:	f7 49 fd 88 	st.w	r11[-632],r9
8000684e:	fb 48 06 b4 	st.w	sp[1716],r8
80006852:	14 97       	mov	r7,r10
80006854:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006858:	c0 58       	rjmp	80006862 <_vfprintf_r+0xeba>
8000685a:	92 18       	ld.sh	r8,r9[0x2]
8000685c:	14 97       	mov	r7,r10
8000685e:	2f c9       	sub	r9,-4
80006860:	51 09       	stdsp	sp[0x40],r9
80006862:	5c 78       	castu.h	r8
80006864:	50 18       	stdsp	sp[0x4],r8
80006866:	c4 68       	rjmp	800068f2 <_vfprintf_r+0xf4a>
80006868:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000686c:	40 3c       	lddsp	r12,sp[0xc]
8000686e:	58 0c       	cp.w	r12,0
80006870:	c1 d0       	breq	800068aa <_vfprintf_r+0xf02>
80006872:	10 36       	cp.w	r6,r8
80006874:	c0 64       	brge	80006880 <_vfprintf_r+0xed8>
80006876:	fa cb f9 44 	sub	r11,sp,-1724
8000687a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000687e:	c1 f8       	rjmp	800068bc <_vfprintf_r+0xf14>
80006880:	fa c8 f9 50 	sub	r8,sp,-1712
80006884:	1a d8       	st.w	--sp,r8
80006886:	fa c8 fa b8 	sub	r8,sp,-1352
8000688a:	0c 9b       	mov	r11,r6
8000688c:	1a d8       	st.w	--sp,r8
8000688e:	fa c8 fb b4 	sub	r8,sp,-1100
80006892:	04 9a       	mov	r10,r2
80006894:	1a d8       	st.w	--sp,r8
80006896:	08 9c       	mov	r12,r4
80006898:	fa c8 f9 40 	sub	r8,sp,-1728
8000689c:	fa c9 ff b4 	sub	r9,sp,-76
800068a0:	fe b0 f6 e6 	rcall	8000566c <get_arg>
800068a4:	2f dd       	sub	sp,-12
800068a6:	78 0b       	ld.w	r11,r12[0x0]
800068a8:	c2 48       	rjmp	800068f0 <_vfprintf_r+0xf48>
800068aa:	ee ca ff ff 	sub	r10,r7,-1
800068ae:	10 37       	cp.w	r7,r8
800068b0:	c0 94       	brge	800068c2 <_vfprintf_r+0xf1a>
800068b2:	fa c9 f9 44 	sub	r9,sp,-1724
800068b6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800068ba:	14 97       	mov	r7,r10
800068bc:	ec fb fd 88 	ld.w	r11,r6[-632]
800068c0:	c1 88       	rjmp	800068f0 <_vfprintf_r+0xf48>
800068c2:	41 09       	lddsp	r9,sp[0x40]
800068c4:	59 f8       	cp.w	r8,31
800068c6:	e0 89 00 11 	brgt	800068e8 <_vfprintf_r+0xf40>
800068ca:	f2 cb ff fc 	sub	r11,r9,-4
800068ce:	51 0b       	stdsp	sp[0x40],r11
800068d0:	fa c6 f9 44 	sub	r6,sp,-1724
800068d4:	72 0b       	ld.w	r11,r9[0x0]
800068d6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800068da:	f3 4b fd 88 	st.w	r9[-632],r11
800068de:	2f f8       	sub	r8,-1
800068e0:	14 97       	mov	r7,r10
800068e2:	fb 48 06 b4 	st.w	sp[1716],r8
800068e6:	c0 58       	rjmp	800068f0 <_vfprintf_r+0xf48>
800068e8:	72 0b       	ld.w	r11,r9[0x0]
800068ea:	14 97       	mov	r7,r10
800068ec:	2f c9       	sub	r9,-4
800068ee:	51 09       	stdsp	sp[0x40],r9
800068f0:	50 1b       	stdsp	sp[0x4],r11
800068f2:	30 0e       	mov	lr,0
800068f4:	50 0e       	stdsp	sp[0x0],lr
800068f6:	1c 98       	mov	r8,lr
800068f8:	e0 8f 02 fe 	bral	80006ef4 <_vfprintf_r+0x154c>
800068fc:	50 a7       	stdsp	sp[0x28],r7
800068fe:	50 80       	stdsp	sp[0x20],r0
80006900:	0c 97       	mov	r7,r6
80006902:	04 94       	mov	r4,r2
80006904:	06 96       	mov	r6,r3
80006906:	02 92       	mov	r2,r1
80006908:	40 93       	lddsp	r3,sp[0x24]
8000690a:	40 41       	lddsp	r1,sp[0x10]
8000690c:	0e 99       	mov	r9,r7
8000690e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006912:	40 3c       	lddsp	r12,sp[0xc]
80006914:	58 0c       	cp.w	r12,0
80006916:	c1 d0       	breq	80006950 <_vfprintf_r+0xfa8>
80006918:	10 36       	cp.w	r6,r8
8000691a:	c0 64       	brge	80006926 <_vfprintf_r+0xf7e>
8000691c:	fa cb f9 44 	sub	r11,sp,-1724
80006920:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006924:	c1 d8       	rjmp	8000695e <_vfprintf_r+0xfb6>
80006926:	fa c8 f9 50 	sub	r8,sp,-1712
8000692a:	1a d8       	st.w	--sp,r8
8000692c:	fa c8 fa b8 	sub	r8,sp,-1352
80006930:	1a d8       	st.w	--sp,r8
80006932:	fa c8 fb b4 	sub	r8,sp,-1100
80006936:	1a d8       	st.w	--sp,r8
80006938:	fa c9 ff b4 	sub	r9,sp,-76
8000693c:	fa c8 f9 40 	sub	r8,sp,-1728
80006940:	04 9a       	mov	r10,r2
80006942:	0c 9b       	mov	r11,r6
80006944:	08 9c       	mov	r12,r4
80006946:	fe b0 f6 93 	rcall	8000566c <get_arg>
8000694a:	2f dd       	sub	sp,-12
8000694c:	78 09       	ld.w	r9,r12[0x0]
8000694e:	c2 18       	rjmp	80006990 <_vfprintf_r+0xfe8>
80006950:	2f f7       	sub	r7,-1
80006952:	10 39       	cp.w	r9,r8
80006954:	c0 84       	brge	80006964 <_vfprintf_r+0xfbc>
80006956:	fa ca f9 44 	sub	r10,sp,-1724
8000695a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000695e:	ec f9 fd 88 	ld.w	r9,r6[-632]
80006962:	c1 78       	rjmp	80006990 <_vfprintf_r+0xfe8>
80006964:	41 09       	lddsp	r9,sp[0x40]
80006966:	59 f8       	cp.w	r8,31
80006968:	e0 89 00 10 	brgt	80006988 <_vfprintf_r+0xfe0>
8000696c:	f2 ca ff fc 	sub	r10,r9,-4
80006970:	51 0a       	stdsp	sp[0x40],r10
80006972:	fa c6 f9 44 	sub	r6,sp,-1724
80006976:	72 09       	ld.w	r9,r9[0x0]
80006978:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000697c:	f5 49 fd 88 	st.w	r10[-632],r9
80006980:	2f f8       	sub	r8,-1
80006982:	fb 48 06 b4 	st.w	sp[1716],r8
80006986:	c0 58       	rjmp	80006990 <_vfprintf_r+0xfe8>
80006988:	f2 c8 ff fc 	sub	r8,r9,-4
8000698c:	51 08       	stdsp	sp[0x40],r8
8000698e:	72 09       	ld.w	r9,r9[0x0]
80006990:	33 08       	mov	r8,48
80006992:	fb 68 06 b8 	st.b	sp[1720],r8
80006996:	37 88       	mov	r8,120
80006998:	30 0e       	mov	lr,0
8000699a:	fb 68 06 b9 	st.b	sp[1721],r8
8000699e:	4c ac       	lddpc	r12,80006ac4 <_vfprintf_r+0x111c>
800069a0:	50 19       	stdsp	sp[0x4],r9
800069a2:	a1 b5       	sbr	r5,0x1
800069a4:	50 0e       	stdsp	sp[0x0],lr
800069a6:	50 dc       	stdsp	sp[0x34],r12
800069a8:	30 28       	mov	r8,2
800069aa:	37 80       	mov	r0,120
800069ac:	e0 8f 02 a4 	bral	80006ef4 <_vfprintf_r+0x154c>
800069b0:	50 a7       	stdsp	sp[0x28],r7
800069b2:	50 80       	stdsp	sp[0x20],r0
800069b4:	10 90       	mov	r0,r8
800069b6:	30 08       	mov	r8,0
800069b8:	fb 68 06 bb 	st.b	sp[1723],r8
800069bc:	0c 97       	mov	r7,r6
800069be:	04 94       	mov	r4,r2
800069c0:	06 96       	mov	r6,r3
800069c2:	02 92       	mov	r2,r1
800069c4:	40 93       	lddsp	r3,sp[0x24]
800069c6:	40 41       	lddsp	r1,sp[0x10]
800069c8:	0e 99       	mov	r9,r7
800069ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
800069ce:	40 3b       	lddsp	r11,sp[0xc]
800069d0:	58 0b       	cp.w	r11,0
800069d2:	c1 d0       	breq	80006a0c <_vfprintf_r+0x1064>
800069d4:	10 36       	cp.w	r6,r8
800069d6:	c0 64       	brge	800069e2 <_vfprintf_r+0x103a>
800069d8:	fa ca f9 44 	sub	r10,sp,-1724
800069dc:	f4 06 00 36 	add	r6,r10,r6<<0x3
800069e0:	c1 d8       	rjmp	80006a1a <_vfprintf_r+0x1072>
800069e2:	fa c8 f9 50 	sub	r8,sp,-1712
800069e6:	1a d8       	st.w	--sp,r8
800069e8:	fa c8 fa b8 	sub	r8,sp,-1352
800069ec:	1a d8       	st.w	--sp,r8
800069ee:	fa c8 fb b4 	sub	r8,sp,-1100
800069f2:	0c 9b       	mov	r11,r6
800069f4:	1a d8       	st.w	--sp,r8
800069f6:	04 9a       	mov	r10,r2
800069f8:	fa c8 f9 40 	sub	r8,sp,-1728
800069fc:	fa c9 ff b4 	sub	r9,sp,-76
80006a00:	08 9c       	mov	r12,r4
80006a02:	fe b0 f6 35 	rcall	8000566c <get_arg>
80006a06:	2f dd       	sub	sp,-12
80006a08:	78 06       	ld.w	r6,r12[0x0]
80006a0a:	c2 08       	rjmp	80006a4a <_vfprintf_r+0x10a2>
80006a0c:	2f f7       	sub	r7,-1
80006a0e:	10 39       	cp.w	r9,r8
80006a10:	c0 84       	brge	80006a20 <_vfprintf_r+0x1078>
80006a12:	fa c9 f9 44 	sub	r9,sp,-1724
80006a16:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006a1a:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006a1e:	c1 68       	rjmp	80006a4a <_vfprintf_r+0x10a2>
80006a20:	41 09       	lddsp	r9,sp[0x40]
80006a22:	59 f8       	cp.w	r8,31
80006a24:	e0 89 00 10 	brgt	80006a44 <_vfprintf_r+0x109c>
80006a28:	f2 ca ff fc 	sub	r10,r9,-4
80006a2c:	51 0a       	stdsp	sp[0x40],r10
80006a2e:	72 06       	ld.w	r6,r9[0x0]
80006a30:	fa ce f9 44 	sub	lr,sp,-1724
80006a34:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006a38:	f3 46 fd 88 	st.w	r9[-632],r6
80006a3c:	2f f8       	sub	r8,-1
80006a3e:	fb 48 06 b4 	st.w	sp[1716],r8
80006a42:	c0 48       	rjmp	80006a4a <_vfprintf_r+0x10a2>
80006a44:	72 06       	ld.w	r6,r9[0x0]
80006a46:	2f c9       	sub	r9,-4
80006a48:	51 09       	stdsp	sp[0x40],r9
80006a4a:	40 2c       	lddsp	r12,sp[0x8]
80006a4c:	58 0c       	cp.w	r12,0
80006a4e:	c1 05       	brlt	80006a6e <_vfprintf_r+0x10c6>
80006a50:	18 9a       	mov	r10,r12
80006a52:	30 0b       	mov	r11,0
80006a54:	0c 9c       	mov	r12,r6
80006a56:	e0 a0 14 63 	rcall	8000931c <memchr>
80006a5a:	e0 80 02 e0 	breq	8000701a <_vfprintf_r+0x1672>
80006a5e:	f8 06 01 02 	sub	r2,r12,r6
80006a62:	40 2b       	lddsp	r11,sp[0x8]
80006a64:	16 32       	cp.w	r2,r11
80006a66:	e0 89 02 da 	brgt	8000701a <_vfprintf_r+0x1672>
80006a6a:	e0 8f 02 d5 	bral	80007014 <_vfprintf_r+0x166c>
80006a6e:	30 0a       	mov	r10,0
80006a70:	0c 9c       	mov	r12,r6
80006a72:	50 2a       	stdsp	sp[0x8],r10
80006a74:	e0 a0 19 e6 	rcall	80009e40 <strlen>
80006a78:	18 92       	mov	r2,r12
80006a7a:	e0 8f 02 d3 	bral	80007020 <_vfprintf_r+0x1678>
80006a7e:	50 a7       	stdsp	sp[0x28],r7
80006a80:	50 80       	stdsp	sp[0x20],r0
80006a82:	0c 97       	mov	r7,r6
80006a84:	04 94       	mov	r4,r2
80006a86:	06 96       	mov	r6,r3
80006a88:	02 92       	mov	r2,r1
80006a8a:	40 93       	lddsp	r3,sp[0x24]
80006a8c:	10 90       	mov	r0,r8
80006a8e:	40 41       	lddsp	r1,sp[0x10]
80006a90:	a5 a5       	sbr	r5,0x4
80006a92:	c0 a8       	rjmp	80006aa6 <_vfprintf_r+0x10fe>
80006a94:	50 a7       	stdsp	sp[0x28],r7
80006a96:	50 80       	stdsp	sp[0x20],r0
80006a98:	0c 97       	mov	r7,r6
80006a9a:	04 94       	mov	r4,r2
80006a9c:	06 96       	mov	r6,r3
80006a9e:	02 92       	mov	r2,r1
80006aa0:	40 93       	lddsp	r3,sp[0x24]
80006aa2:	10 90       	mov	r0,r8
80006aa4:	40 41       	lddsp	r1,sp[0x10]
80006aa6:	ed b5 00 05 	bld	r5,0x5
80006aaa:	c5 71       	brne	80006b58 <_vfprintf_r+0x11b0>
80006aac:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006ab0:	40 39       	lddsp	r9,sp[0xc]
80006ab2:	58 09       	cp.w	r9,0
80006ab4:	c2 20       	breq	80006af8 <_vfprintf_r+0x1150>
80006ab6:	10 36       	cp.w	r6,r8
80006ab8:	c0 84       	brge	80006ac8 <_vfprintf_r+0x1120>
80006aba:	fa c8 f9 44 	sub	r8,sp,-1724
80006abe:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006ac2:	c2 48       	rjmp	80006b0a <_vfprintf_r+0x1162>
80006ac4:	80 00       	ld.sh	r0,r0[0x0]
80006ac6:	bd e4       	*unknown*
80006ac8:	fa c8 f9 50 	sub	r8,sp,-1712
80006acc:	1a d8       	st.w	--sp,r8
80006ace:	fa c8 fa b8 	sub	r8,sp,-1352
80006ad2:	1a d8       	st.w	--sp,r8
80006ad4:	fa c8 fb b4 	sub	r8,sp,-1100
80006ad8:	1a d8       	st.w	--sp,r8
80006ada:	fa c8 f9 40 	sub	r8,sp,-1728
80006ade:	fa c9 ff b4 	sub	r9,sp,-76
80006ae2:	04 9a       	mov	r10,r2
80006ae4:	0c 9b       	mov	r11,r6
80006ae6:	08 9c       	mov	r12,r4
80006ae8:	fe b0 f5 c2 	rcall	8000566c <get_arg>
80006aec:	2f dd       	sub	sp,-12
80006aee:	f8 e8 00 00 	ld.d	r8,r12[0]
80006af2:	fa e9 00 00 	st.d	sp[0],r8
80006af6:	c2 e8       	rjmp	80006b52 <_vfprintf_r+0x11aa>
80006af8:	ee ca ff ff 	sub	r10,r7,-1
80006afc:	10 37       	cp.w	r7,r8
80006afe:	c0 b4       	brge	80006b14 <_vfprintf_r+0x116c>
80006b00:	fa c8 f9 44 	sub	r8,sp,-1724
80006b04:	14 97       	mov	r7,r10
80006b06:	f0 06 00 36 	add	r6,r8,r6<<0x3
80006b0a:	ec ea fd 88 	ld.d	r10,r6[-632]
80006b0e:	fa eb 00 00 	st.d	sp[0],r10
80006b12:	c2 08       	rjmp	80006b52 <_vfprintf_r+0x11aa>
80006b14:	41 09       	lddsp	r9,sp[0x40]
80006b16:	59 f8       	cp.w	r8,31
80006b18:	e0 89 00 16 	brgt	80006b44 <_vfprintf_r+0x119c>
80006b1c:	f2 e6 00 00 	ld.d	r6,r9[0]
80006b20:	f2 cb ff f8 	sub	r11,r9,-8
80006b24:	fa e7 00 00 	st.d	sp[0],r6
80006b28:	51 0b       	stdsp	sp[0x40],r11
80006b2a:	fa c6 f9 44 	sub	r6,sp,-1724
80006b2e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006b32:	fa e6 00 00 	ld.d	r6,sp[0]
80006b36:	f2 e7 fd 88 	st.d	r9[-632],r6
80006b3a:	2f f8       	sub	r8,-1
80006b3c:	14 97       	mov	r7,r10
80006b3e:	fb 48 06 b4 	st.w	sp[1716],r8
80006b42:	c0 88       	rjmp	80006b52 <_vfprintf_r+0x11aa>
80006b44:	f2 e6 00 00 	ld.d	r6,r9[0]
80006b48:	2f 89       	sub	r9,-8
80006b4a:	fa e7 00 00 	st.d	sp[0],r6
80006b4e:	51 09       	stdsp	sp[0x40],r9
80006b50:	14 97       	mov	r7,r10
80006b52:	30 18       	mov	r8,1
80006b54:	e0 8f 01 d0 	bral	80006ef4 <_vfprintf_r+0x154c>
80006b58:	ed b5 00 04 	bld	r5,0x4
80006b5c:	c1 61       	brne	80006b88 <_vfprintf_r+0x11e0>
80006b5e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b62:	40 3e       	lddsp	lr,sp[0xc]
80006b64:	58 0e       	cp.w	lr,0
80006b66:	c0 80       	breq	80006b76 <_vfprintf_r+0x11ce>
80006b68:	10 36       	cp.w	r6,r8
80006b6a:	c6 74       	brge	80006c38 <_vfprintf_r+0x1290>
80006b6c:	fa cc f9 44 	sub	r12,sp,-1724
80006b70:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006b74:	c8 08       	rjmp	80006c74 <_vfprintf_r+0x12cc>
80006b76:	ee ca ff ff 	sub	r10,r7,-1
80006b7a:	10 37       	cp.w	r7,r8
80006b7c:	c7 f4       	brge	80006c7a <_vfprintf_r+0x12d2>
80006b7e:	fa cb f9 44 	sub	r11,sp,-1724
80006b82:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b86:	c7 68       	rjmp	80006c72 <_vfprintf_r+0x12ca>
80006b88:	ed b5 00 06 	bld	r5,0x6
80006b8c:	c4 a1       	brne	80006c20 <_vfprintf_r+0x1278>
80006b8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b92:	40 3c       	lddsp	r12,sp[0xc]
80006b94:	58 0c       	cp.w	r12,0
80006b96:	c1 d0       	breq	80006bd0 <_vfprintf_r+0x1228>
80006b98:	10 36       	cp.w	r6,r8
80006b9a:	c0 64       	brge	80006ba6 <_vfprintf_r+0x11fe>
80006b9c:	fa cb f9 44 	sub	r11,sp,-1724
80006ba0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006ba4:	c1 f8       	rjmp	80006be2 <_vfprintf_r+0x123a>
80006ba6:	fa c8 f9 50 	sub	r8,sp,-1712
80006baa:	1a d8       	st.w	--sp,r8
80006bac:	fa c8 fa b8 	sub	r8,sp,-1352
80006bb0:	1a d8       	st.w	--sp,r8
80006bb2:	fa c8 fb b4 	sub	r8,sp,-1100
80006bb6:	1a d8       	st.w	--sp,r8
80006bb8:	fa c8 f9 40 	sub	r8,sp,-1728
80006bbc:	fa c9 ff b4 	sub	r9,sp,-76
80006bc0:	04 9a       	mov	r10,r2
80006bc2:	0c 9b       	mov	r11,r6
80006bc4:	08 9c       	mov	r12,r4
80006bc6:	fe b0 f5 53 	rcall	8000566c <get_arg>
80006bca:	2f dd       	sub	sp,-12
80006bcc:	98 18       	ld.sh	r8,r12[0x2]
80006bce:	c2 68       	rjmp	80006c1a <_vfprintf_r+0x1272>
80006bd0:	ee ca ff ff 	sub	r10,r7,-1
80006bd4:	10 37       	cp.w	r7,r8
80006bd6:	c0 94       	brge	80006be8 <_vfprintf_r+0x1240>
80006bd8:	fa c9 f9 44 	sub	r9,sp,-1724
80006bdc:	14 97       	mov	r7,r10
80006bde:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006be2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006be6:	c1 a8       	rjmp	80006c1a <_vfprintf_r+0x1272>
80006be8:	41 09       	lddsp	r9,sp[0x40]
80006bea:	59 f8       	cp.w	r8,31
80006bec:	e0 89 00 13 	brgt	80006c12 <_vfprintf_r+0x126a>
80006bf0:	f2 cb ff fc 	sub	r11,r9,-4
80006bf4:	51 0b       	stdsp	sp[0x40],r11
80006bf6:	72 09       	ld.w	r9,r9[0x0]
80006bf8:	fa c6 f9 44 	sub	r6,sp,-1724
80006bfc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006c00:	2f f8       	sub	r8,-1
80006c02:	f7 49 fd 88 	st.w	r11[-632],r9
80006c06:	fb 48 06 b4 	st.w	sp[1716],r8
80006c0a:	14 97       	mov	r7,r10
80006c0c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006c10:	c0 58       	rjmp	80006c1a <_vfprintf_r+0x1272>
80006c12:	92 18       	ld.sh	r8,r9[0x2]
80006c14:	14 97       	mov	r7,r10
80006c16:	2f c9       	sub	r9,-4
80006c18:	51 09       	stdsp	sp[0x40],r9
80006c1a:	5c 78       	castu.h	r8
80006c1c:	50 18       	stdsp	sp[0x4],r8
80006c1e:	c4 68       	rjmp	80006caa <_vfprintf_r+0x1302>
80006c20:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c24:	40 3c       	lddsp	r12,sp[0xc]
80006c26:	58 0c       	cp.w	r12,0
80006c28:	c1 d0       	breq	80006c62 <_vfprintf_r+0x12ba>
80006c2a:	10 36       	cp.w	r6,r8
80006c2c:	c0 64       	brge	80006c38 <_vfprintf_r+0x1290>
80006c2e:	fa cb f9 44 	sub	r11,sp,-1724
80006c32:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006c36:	c1 f8       	rjmp	80006c74 <_vfprintf_r+0x12cc>
80006c38:	fa c8 f9 50 	sub	r8,sp,-1712
80006c3c:	1a d8       	st.w	--sp,r8
80006c3e:	fa c8 fa b8 	sub	r8,sp,-1352
80006c42:	0c 9b       	mov	r11,r6
80006c44:	1a d8       	st.w	--sp,r8
80006c46:	fa c8 fb b4 	sub	r8,sp,-1100
80006c4a:	04 9a       	mov	r10,r2
80006c4c:	1a d8       	st.w	--sp,r8
80006c4e:	08 9c       	mov	r12,r4
80006c50:	fa c8 f9 40 	sub	r8,sp,-1728
80006c54:	fa c9 ff b4 	sub	r9,sp,-76
80006c58:	fe b0 f5 0a 	rcall	8000566c <get_arg>
80006c5c:	2f dd       	sub	sp,-12
80006c5e:	78 0b       	ld.w	r11,r12[0x0]
80006c60:	c2 48       	rjmp	80006ca8 <_vfprintf_r+0x1300>
80006c62:	ee ca ff ff 	sub	r10,r7,-1
80006c66:	10 37       	cp.w	r7,r8
80006c68:	c0 94       	brge	80006c7a <_vfprintf_r+0x12d2>
80006c6a:	fa c9 f9 44 	sub	r9,sp,-1724
80006c6e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006c72:	14 97       	mov	r7,r10
80006c74:	ec fb fd 88 	ld.w	r11,r6[-632]
80006c78:	c1 88       	rjmp	80006ca8 <_vfprintf_r+0x1300>
80006c7a:	41 09       	lddsp	r9,sp[0x40]
80006c7c:	59 f8       	cp.w	r8,31
80006c7e:	e0 89 00 11 	brgt	80006ca0 <_vfprintf_r+0x12f8>
80006c82:	f2 cb ff fc 	sub	r11,r9,-4
80006c86:	51 0b       	stdsp	sp[0x40],r11
80006c88:	fa c6 f9 44 	sub	r6,sp,-1724
80006c8c:	72 0b       	ld.w	r11,r9[0x0]
80006c8e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006c92:	f3 4b fd 88 	st.w	r9[-632],r11
80006c96:	2f f8       	sub	r8,-1
80006c98:	14 97       	mov	r7,r10
80006c9a:	fb 48 06 b4 	st.w	sp[1716],r8
80006c9e:	c0 58       	rjmp	80006ca8 <_vfprintf_r+0x1300>
80006ca0:	72 0b       	ld.w	r11,r9[0x0]
80006ca2:	14 97       	mov	r7,r10
80006ca4:	2f c9       	sub	r9,-4
80006ca6:	51 09       	stdsp	sp[0x40],r9
80006ca8:	50 1b       	stdsp	sp[0x4],r11
80006caa:	30 0e       	mov	lr,0
80006cac:	30 18       	mov	r8,1
80006cae:	50 0e       	stdsp	sp[0x0],lr
80006cb0:	c2 29       	rjmp	80006ef4 <_vfprintf_r+0x154c>
80006cb2:	50 a7       	stdsp	sp[0x28],r7
80006cb4:	50 80       	stdsp	sp[0x20],r0
80006cb6:	0c 97       	mov	r7,r6
80006cb8:	04 94       	mov	r4,r2
80006cba:	06 96       	mov	r6,r3
80006cbc:	02 92       	mov	r2,r1
80006cbe:	4d 3c       	lddpc	r12,80006e08 <_vfprintf_r+0x1460>
80006cc0:	40 93       	lddsp	r3,sp[0x24]
80006cc2:	10 90       	mov	r0,r8
80006cc4:	40 41       	lddsp	r1,sp[0x10]
80006cc6:	50 dc       	stdsp	sp[0x34],r12
80006cc8:	ed b5 00 05 	bld	r5,0x5
80006ccc:	c5 51       	brne	80006d76 <_vfprintf_r+0x13ce>
80006cce:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006cd2:	40 3b       	lddsp	r11,sp[0xc]
80006cd4:	58 0b       	cp.w	r11,0
80006cd6:	c2 20       	breq	80006d1a <_vfprintf_r+0x1372>
80006cd8:	10 36       	cp.w	r6,r8
80006cda:	c0 a4       	brge	80006cee <_vfprintf_r+0x1346>
80006cdc:	fa ca f9 44 	sub	r10,sp,-1724
80006ce0:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006ce4:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006ce8:	fa e9 00 00 	st.d	sp[0],r8
80006cec:	cf 38       	rjmp	80006ed2 <_vfprintf_r+0x152a>
80006cee:	fa c8 f9 50 	sub	r8,sp,-1712
80006cf2:	1a d8       	st.w	--sp,r8
80006cf4:	fa c8 fa b8 	sub	r8,sp,-1352
80006cf8:	04 9a       	mov	r10,r2
80006cfa:	1a d8       	st.w	--sp,r8
80006cfc:	0c 9b       	mov	r11,r6
80006cfe:	fa c8 fb b4 	sub	r8,sp,-1100
80006d02:	08 9c       	mov	r12,r4
80006d04:	1a d8       	st.w	--sp,r8
80006d06:	fa c8 f9 40 	sub	r8,sp,-1728
80006d0a:	fa c9 ff b4 	sub	r9,sp,-76
80006d0e:	fe b0 f4 af 	rcall	8000566c <get_arg>
80006d12:	2f dd       	sub	sp,-12
80006d14:	f8 ea 00 00 	ld.d	r10,r12[0]
80006d18:	c0 c8       	rjmp	80006d30 <_vfprintf_r+0x1388>
80006d1a:	ee ca ff ff 	sub	r10,r7,-1
80006d1e:	10 37       	cp.w	r7,r8
80006d20:	c0 b4       	brge	80006d36 <_vfprintf_r+0x138e>
80006d22:	fa c9 f9 44 	sub	r9,sp,-1724
80006d26:	14 97       	mov	r7,r10
80006d28:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006d2c:	ec ea fd 88 	ld.d	r10,r6[-632]
80006d30:	fa eb 00 00 	st.d	sp[0],r10
80006d34:	cc f8       	rjmp	80006ed2 <_vfprintf_r+0x152a>
80006d36:	41 09       	lddsp	r9,sp[0x40]
80006d38:	59 f8       	cp.w	r8,31
80006d3a:	e0 89 00 16 	brgt	80006d66 <_vfprintf_r+0x13be>
80006d3e:	f2 e6 00 00 	ld.d	r6,r9[0]
80006d42:	f2 cb ff f8 	sub	r11,r9,-8
80006d46:	fa e7 00 00 	st.d	sp[0],r6
80006d4a:	51 0b       	stdsp	sp[0x40],r11
80006d4c:	fa c6 f9 44 	sub	r6,sp,-1724
80006d50:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006d54:	fa e6 00 00 	ld.d	r6,sp[0]
80006d58:	f2 e7 fd 88 	st.d	r9[-632],r6
80006d5c:	2f f8       	sub	r8,-1
80006d5e:	14 97       	mov	r7,r10
80006d60:	fb 48 06 b4 	st.w	sp[1716],r8
80006d64:	cb 78       	rjmp	80006ed2 <_vfprintf_r+0x152a>
80006d66:	f2 e6 00 00 	ld.d	r6,r9[0]
80006d6a:	2f 89       	sub	r9,-8
80006d6c:	fa e7 00 00 	st.d	sp[0],r6
80006d70:	51 09       	stdsp	sp[0x40],r9
80006d72:	14 97       	mov	r7,r10
80006d74:	ca f8       	rjmp	80006ed2 <_vfprintf_r+0x152a>
80006d76:	ed b5 00 04 	bld	r5,0x4
80006d7a:	c1 71       	brne	80006da8 <_vfprintf_r+0x1400>
80006d7c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d80:	40 3e       	lddsp	lr,sp[0xc]
80006d82:	58 0e       	cp.w	lr,0
80006d84:	c0 80       	breq	80006d94 <_vfprintf_r+0x13ec>
80006d86:	10 36       	cp.w	r6,r8
80006d88:	c6 a4       	brge	80006e5c <_vfprintf_r+0x14b4>
80006d8a:	fa cc f9 44 	sub	r12,sp,-1724
80006d8e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006d92:	c8 38       	rjmp	80006e98 <_vfprintf_r+0x14f0>
80006d94:	ee ca ff ff 	sub	r10,r7,-1
80006d98:	10 37       	cp.w	r7,r8
80006d9a:	e0 84 00 82 	brge	80006e9e <_vfprintf_r+0x14f6>
80006d9e:	fa cb f9 44 	sub	r11,sp,-1724
80006da2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006da6:	c7 88       	rjmp	80006e96 <_vfprintf_r+0x14ee>
80006da8:	ed b5 00 06 	bld	r5,0x6
80006dac:	c4 c1       	brne	80006e44 <_vfprintf_r+0x149c>
80006dae:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006db2:	40 3c       	lddsp	r12,sp[0xc]
80006db4:	58 0c       	cp.w	r12,0
80006db6:	c1 d0       	breq	80006df0 <_vfprintf_r+0x1448>
80006db8:	10 36       	cp.w	r6,r8
80006dba:	c0 64       	brge	80006dc6 <_vfprintf_r+0x141e>
80006dbc:	fa cb f9 44 	sub	r11,sp,-1724
80006dc0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006dc4:	c1 f8       	rjmp	80006e02 <_vfprintf_r+0x145a>
80006dc6:	fa c8 f9 50 	sub	r8,sp,-1712
80006dca:	1a d8       	st.w	--sp,r8
80006dcc:	fa c8 fa b8 	sub	r8,sp,-1352
80006dd0:	1a d8       	st.w	--sp,r8
80006dd2:	fa c8 fb b4 	sub	r8,sp,-1100
80006dd6:	1a d8       	st.w	--sp,r8
80006dd8:	fa c8 f9 40 	sub	r8,sp,-1728
80006ddc:	fa c9 ff b4 	sub	r9,sp,-76
80006de0:	04 9a       	mov	r10,r2
80006de2:	0c 9b       	mov	r11,r6
80006de4:	08 9c       	mov	r12,r4
80006de6:	fe b0 f4 43 	rcall	8000566c <get_arg>
80006dea:	2f dd       	sub	sp,-12
80006dec:	98 18       	ld.sh	r8,r12[0x2]
80006dee:	c2 88       	rjmp	80006e3e <_vfprintf_r+0x1496>
80006df0:	ee ca ff ff 	sub	r10,r7,-1
80006df4:	10 37       	cp.w	r7,r8
80006df6:	c0 b4       	brge	80006e0c <_vfprintf_r+0x1464>
80006df8:	fa c9 f9 44 	sub	r9,sp,-1724
80006dfc:	14 97       	mov	r7,r10
80006dfe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006e02:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006e06:	c1 c8       	rjmp	80006e3e <_vfprintf_r+0x1496>
80006e08:	80 00       	ld.sh	r0,r0[0x0]
80006e0a:	bd e4       	*unknown*
80006e0c:	41 09       	lddsp	r9,sp[0x40]
80006e0e:	59 f8       	cp.w	r8,31
80006e10:	e0 89 00 13 	brgt	80006e36 <_vfprintf_r+0x148e>
80006e14:	f2 cb ff fc 	sub	r11,r9,-4
80006e18:	51 0b       	stdsp	sp[0x40],r11
80006e1a:	72 09       	ld.w	r9,r9[0x0]
80006e1c:	fa c6 f9 44 	sub	r6,sp,-1724
80006e20:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006e24:	2f f8       	sub	r8,-1
80006e26:	f7 49 fd 88 	st.w	r11[-632],r9
80006e2a:	fb 48 06 b4 	st.w	sp[1716],r8
80006e2e:	14 97       	mov	r7,r10
80006e30:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006e34:	c0 58       	rjmp	80006e3e <_vfprintf_r+0x1496>
80006e36:	92 18       	ld.sh	r8,r9[0x2]
80006e38:	14 97       	mov	r7,r10
80006e3a:	2f c9       	sub	r9,-4
80006e3c:	51 09       	stdsp	sp[0x40],r9
80006e3e:	5c 78       	castu.h	r8
80006e40:	50 18       	stdsp	sp[0x4],r8
80006e42:	c4 68       	rjmp	80006ece <_vfprintf_r+0x1526>
80006e44:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006e48:	40 3c       	lddsp	r12,sp[0xc]
80006e4a:	58 0c       	cp.w	r12,0
80006e4c:	c1 d0       	breq	80006e86 <_vfprintf_r+0x14de>
80006e4e:	10 36       	cp.w	r6,r8
80006e50:	c0 64       	brge	80006e5c <_vfprintf_r+0x14b4>
80006e52:	fa cb f9 44 	sub	r11,sp,-1724
80006e56:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006e5a:	c1 f8       	rjmp	80006e98 <_vfprintf_r+0x14f0>
80006e5c:	fa c8 f9 50 	sub	r8,sp,-1712
80006e60:	1a d8       	st.w	--sp,r8
80006e62:	fa c8 fa b8 	sub	r8,sp,-1352
80006e66:	0c 9b       	mov	r11,r6
80006e68:	1a d8       	st.w	--sp,r8
80006e6a:	fa c8 fb b4 	sub	r8,sp,-1100
80006e6e:	04 9a       	mov	r10,r2
80006e70:	1a d8       	st.w	--sp,r8
80006e72:	08 9c       	mov	r12,r4
80006e74:	fa c8 f9 40 	sub	r8,sp,-1728
80006e78:	fa c9 ff b4 	sub	r9,sp,-76
80006e7c:	fe b0 f3 f8 	rcall	8000566c <get_arg>
80006e80:	2f dd       	sub	sp,-12
80006e82:	78 0b       	ld.w	r11,r12[0x0]
80006e84:	c2 48       	rjmp	80006ecc <_vfprintf_r+0x1524>
80006e86:	ee ca ff ff 	sub	r10,r7,-1
80006e8a:	10 37       	cp.w	r7,r8
80006e8c:	c0 94       	brge	80006e9e <_vfprintf_r+0x14f6>
80006e8e:	fa c9 f9 44 	sub	r9,sp,-1724
80006e92:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006e96:	14 97       	mov	r7,r10
80006e98:	ec fb fd 88 	ld.w	r11,r6[-632]
80006e9c:	c1 88       	rjmp	80006ecc <_vfprintf_r+0x1524>
80006e9e:	41 09       	lddsp	r9,sp[0x40]
80006ea0:	59 f8       	cp.w	r8,31
80006ea2:	e0 89 00 11 	brgt	80006ec4 <_vfprintf_r+0x151c>
80006ea6:	f2 cb ff fc 	sub	r11,r9,-4
80006eaa:	51 0b       	stdsp	sp[0x40],r11
80006eac:	fa c6 f9 44 	sub	r6,sp,-1724
80006eb0:	72 0b       	ld.w	r11,r9[0x0]
80006eb2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006eb6:	f3 4b fd 88 	st.w	r9[-632],r11
80006eba:	2f f8       	sub	r8,-1
80006ebc:	14 97       	mov	r7,r10
80006ebe:	fb 48 06 b4 	st.w	sp[1716],r8
80006ec2:	c0 58       	rjmp	80006ecc <_vfprintf_r+0x1524>
80006ec4:	72 0b       	ld.w	r11,r9[0x0]
80006ec6:	14 97       	mov	r7,r10
80006ec8:	2f c9       	sub	r9,-4
80006eca:	51 09       	stdsp	sp[0x40],r9
80006ecc:	50 1b       	stdsp	sp[0x4],r11
80006ece:	30 0e       	mov	lr,0
80006ed0:	50 0e       	stdsp	sp[0x0],lr
80006ed2:	40 08       	lddsp	r8,sp[0x0]
80006ed4:	40 1c       	lddsp	r12,sp[0x4]
80006ed6:	18 48       	or	r8,r12
80006ed8:	5f 19       	srne	r9
80006eda:	0a 98       	mov	r8,r5
80006edc:	eb e9 00 09 	and	r9,r5,r9
80006ee0:	a1 b8       	sbr	r8,0x1
80006ee2:	58 09       	cp.w	r9,0
80006ee4:	c0 70       	breq	80006ef2 <_vfprintf_r+0x154a>
80006ee6:	10 95       	mov	r5,r8
80006ee8:	fb 60 06 b9 	st.b	sp[1721],r0
80006eec:	33 08       	mov	r8,48
80006eee:	fb 68 06 b8 	st.b	sp[1720],r8
80006ef2:	30 28       	mov	r8,2
80006ef4:	30 09       	mov	r9,0
80006ef6:	fb 69 06 bb 	st.b	sp[1723],r9
80006efa:	0a 99       	mov	r9,r5
80006efc:	a7 d9       	cbr	r9,0x7
80006efe:	40 2b       	lddsp	r11,sp[0x8]
80006f00:	40 16       	lddsp	r6,sp[0x4]
80006f02:	58 0b       	cp.w	r11,0
80006f04:	5f 1a       	srne	r10
80006f06:	f2 05 17 40 	movge	r5,r9
80006f0a:	fa c2 f9 78 	sub	r2,sp,-1672
80006f0e:	40 09       	lddsp	r9,sp[0x0]
80006f10:	0c 49       	or	r9,r6
80006f12:	5f 19       	srne	r9
80006f14:	f5 e9 10 09 	or	r9,r10,r9
80006f18:	c5 c0       	breq	80006fd0 <_vfprintf_r+0x1628>
80006f1a:	30 19       	mov	r9,1
80006f1c:	f2 08 18 00 	cp.b	r8,r9
80006f20:	c0 60       	breq	80006f2c <_vfprintf_r+0x1584>
80006f22:	30 29       	mov	r9,2
80006f24:	f2 08 18 00 	cp.b	r8,r9
80006f28:	c0 41       	brne	80006f30 <_vfprintf_r+0x1588>
80006f2a:	c3 c8       	rjmp	80006fa2 <_vfprintf_r+0x15fa>
80006f2c:	04 96       	mov	r6,r2
80006f2e:	c3 08       	rjmp	80006f8e <_vfprintf_r+0x15e6>
80006f30:	04 96       	mov	r6,r2
80006f32:	fa e8 00 00 	ld.d	r8,sp[0]
80006f36:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80006f3a:	2d 0a       	sub	r10,-48
80006f3c:	0c fa       	st.b	--r6,r10
80006f3e:	f0 0b 16 03 	lsr	r11,r8,0x3
80006f42:	f2 0c 16 03 	lsr	r12,r9,0x3
80006f46:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80006f4a:	18 99       	mov	r9,r12
80006f4c:	16 98       	mov	r8,r11
80006f4e:	58 08       	cp.w	r8,0
80006f50:	5c 29       	cpc	r9
80006f52:	cf 21       	brne	80006f36 <_vfprintf_r+0x158e>
80006f54:	fa e9 00 00 	st.d	sp[0],r8
80006f58:	ed b5 00 00 	bld	r5,0x0
80006f5c:	c4 51       	brne	80006fe6 <_vfprintf_r+0x163e>
80006f5e:	33 09       	mov	r9,48
80006f60:	f2 0a 18 00 	cp.b	r10,r9
80006f64:	c4 10       	breq	80006fe6 <_vfprintf_r+0x163e>
80006f66:	0c f9       	st.b	--r6,r9
80006f68:	c3 f8       	rjmp	80006fe6 <_vfprintf_r+0x163e>
80006f6a:	fa ea 00 00 	ld.d	r10,sp[0]
80006f6e:	30 a8       	mov	r8,10
80006f70:	30 09       	mov	r9,0
80006f72:	e0 a0 1d c7 	rcall	8000ab00 <__avr32_umod64>
80006f76:	30 a8       	mov	r8,10
80006f78:	2d 0a       	sub	r10,-48
80006f7a:	30 09       	mov	r9,0
80006f7c:	ac 8a       	st.b	r6[0x0],r10
80006f7e:	fa ea 00 00 	ld.d	r10,sp[0]
80006f82:	fe b0 f2 24 	rcall	800053ca <__avr32_udiv64>
80006f86:	16 99       	mov	r9,r11
80006f88:	14 98       	mov	r8,r10
80006f8a:	fa e9 00 00 	st.d	sp[0],r8
80006f8e:	20 16       	sub	r6,1
80006f90:	fa ea 00 00 	ld.d	r10,sp[0]
80006f94:	58 9a       	cp.w	r10,9
80006f96:	5c 2b       	cpc	r11
80006f98:	fe 9b ff e9 	brhi	80006f6a <_vfprintf_r+0x15c2>
80006f9c:	1b f8       	ld.ub	r8,sp[0x7]
80006f9e:	2d 08       	sub	r8,-48
80006fa0:	c2 08       	rjmp	80006fe0 <_vfprintf_r+0x1638>
80006fa2:	04 96       	mov	r6,r2
80006fa4:	fa e8 00 00 	ld.d	r8,sp[0]
80006fa8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80006fac:	40 de       	lddsp	lr,sp[0x34]
80006fae:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80006fb2:	0c fa       	st.b	--r6,r10
80006fb4:	f2 0b 16 04 	lsr	r11,r9,0x4
80006fb8:	f0 0a 16 04 	lsr	r10,r8,0x4
80006fbc:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80006fc0:	16 99       	mov	r9,r11
80006fc2:	14 98       	mov	r8,r10
80006fc4:	58 08       	cp.w	r8,0
80006fc6:	5c 29       	cpc	r9
80006fc8:	cf 01       	brne	80006fa8 <_vfprintf_r+0x1600>
80006fca:	fa e9 00 00 	st.d	sp[0],r8
80006fce:	c0 c8       	rjmp	80006fe6 <_vfprintf_r+0x163e>
80006fd0:	58 08       	cp.w	r8,0
80006fd2:	c0 91       	brne	80006fe4 <_vfprintf_r+0x163c>
80006fd4:	ed b5 00 00 	bld	r5,0x0
80006fd8:	c0 61       	brne	80006fe4 <_vfprintf_r+0x163c>
80006fda:	fa c6 f9 79 	sub	r6,sp,-1671
80006fde:	33 08       	mov	r8,48
80006fe0:	ac 88       	st.b	r6[0x0],r8
80006fe2:	c0 28       	rjmp	80006fe6 <_vfprintf_r+0x163e>
80006fe4:	04 96       	mov	r6,r2
80006fe6:	0c 12       	sub	r2,r6
80006fe8:	c1 c8       	rjmp	80007020 <_vfprintf_r+0x1678>
80006fea:	50 a7       	stdsp	sp[0x28],r7
80006fec:	50 80       	stdsp	sp[0x20],r0
80006fee:	40 93       	lddsp	r3,sp[0x24]
80006ff0:	0c 97       	mov	r7,r6
80006ff2:	10 90       	mov	r0,r8
80006ff4:	04 94       	mov	r4,r2
80006ff6:	40 41       	lddsp	r1,sp[0x10]
80006ff8:	58 08       	cp.w	r8,0
80006ffa:	e0 80 04 51 	breq	8000789c <_vfprintf_r+0x1ef4>
80006ffe:	fb 68 06 60 	st.b	sp[1632],r8
80007002:	30 0c       	mov	r12,0
80007004:	30 08       	mov	r8,0
80007006:	30 12       	mov	r2,1
80007008:	fb 68 06 bb 	st.b	sp[1723],r8
8000700c:	50 2c       	stdsp	sp[0x8],r12
8000700e:	fa c6 f9 a0 	sub	r6,sp,-1632
80007012:	c0 78       	rjmp	80007020 <_vfprintf_r+0x1678>
80007014:	30 0b       	mov	r11,0
80007016:	50 2b       	stdsp	sp[0x8],r11
80007018:	c0 48       	rjmp	80007020 <_vfprintf_r+0x1678>
8000701a:	40 22       	lddsp	r2,sp[0x8]
8000701c:	30 0a       	mov	r10,0
8000701e:	50 2a       	stdsp	sp[0x8],r10
80007020:	40 29       	lddsp	r9,sp[0x8]
80007022:	e4 09 0c 49 	max	r9,r2,r9
80007026:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000702a:	50 39       	stdsp	sp[0xc],r9
8000702c:	0a 9e       	mov	lr,r5
8000702e:	30 09       	mov	r9,0
80007030:	e2 1e 00 02 	andl	lr,0x2,COH
80007034:	f2 08 18 00 	cp.b	r8,r9
80007038:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000703c:	f7 b8 01 ff 	subne	r8,-1
80007040:	fb f8 1a 03 	st.wne	sp[0xc],r8
80007044:	0a 9b       	mov	r11,r5
80007046:	58 0e       	cp.w	lr,0
80007048:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000704c:	f7 bc 01 fe 	subne	r12,-2
80007050:	fb fc 1a 03 	st.wne	sp[0xc],r12
80007054:	e2 1b 00 84 	andl	r11,0x84,COH
80007058:	50 fe       	stdsp	sp[0x3c],lr
8000705a:	50 9b       	stdsp	sp[0x24],r11
8000705c:	c4 51       	brne	800070e6 <_vfprintf_r+0x173e>
8000705e:	40 8a       	lddsp	r10,sp[0x20]
80007060:	40 39       	lddsp	r9,sp[0xc]
80007062:	12 1a       	sub	r10,r9
80007064:	50 4a       	stdsp	sp[0x10],r10
80007066:	58 0a       	cp.w	r10,0
80007068:	e0 89 00 1f 	brgt	800070a6 <_vfprintf_r+0x16fe>
8000706c:	c3 d8       	rjmp	800070e6 <_vfprintf_r+0x173e>
8000706e:	2f 09       	sub	r9,-16
80007070:	2f f8       	sub	r8,-1
80007072:	4c ee       	lddpc	lr,800071a8 <_vfprintf_r+0x1800>
80007074:	31 0c       	mov	r12,16
80007076:	fb 49 06 90 	st.w	sp[1680],r9
8000707a:	87 0e       	st.w	r3[0x0],lr
8000707c:	87 1c       	st.w	r3[0x4],r12
8000707e:	fb 48 06 8c 	st.w	sp[1676],r8
80007082:	58 78       	cp.w	r8,7
80007084:	e0 89 00 04 	brgt	8000708c <_vfprintf_r+0x16e4>
80007088:	2f 83       	sub	r3,-8
8000708a:	c0 b8       	rjmp	800070a0 <_vfprintf_r+0x16f8>
8000708c:	fa ca f9 78 	sub	r10,sp,-1672
80007090:	02 9b       	mov	r11,r1
80007092:	08 9c       	mov	r12,r4
80007094:	fe b0 f4 7c 	rcall	8000598c <__sprint_r>
80007098:	e0 81 04 13 	brne	800078be <_vfprintf_r+0x1f16>
8000709c:	fa c3 f9 e0 	sub	r3,sp,-1568
800070a0:	40 4b       	lddsp	r11,sp[0x10]
800070a2:	21 0b       	sub	r11,16
800070a4:	50 4b       	stdsp	sp[0x10],r11
800070a6:	fa f9 06 90 	ld.w	r9,sp[1680]
800070aa:	fa f8 06 8c 	ld.w	r8,sp[1676]
800070ae:	4b fa       	lddpc	r10,800071a8 <_vfprintf_r+0x1800>
800070b0:	40 4e       	lddsp	lr,sp[0x10]
800070b2:	59 0e       	cp.w	lr,16
800070b4:	fe 99 ff dd 	brgt	8000706e <_vfprintf_r+0x16c6>
800070b8:	1c 09       	add	r9,lr
800070ba:	2f f8       	sub	r8,-1
800070bc:	87 0a       	st.w	r3[0x0],r10
800070be:	fb 49 06 90 	st.w	sp[1680],r9
800070c2:	87 1e       	st.w	r3[0x4],lr
800070c4:	fb 48 06 8c 	st.w	sp[1676],r8
800070c8:	58 78       	cp.w	r8,7
800070ca:	e0 89 00 04 	brgt	800070d2 <_vfprintf_r+0x172a>
800070ce:	2f 83       	sub	r3,-8
800070d0:	c0 b8       	rjmp	800070e6 <_vfprintf_r+0x173e>
800070d2:	fa ca f9 78 	sub	r10,sp,-1672
800070d6:	02 9b       	mov	r11,r1
800070d8:	08 9c       	mov	r12,r4
800070da:	fe b0 f4 59 	rcall	8000598c <__sprint_r>
800070de:	e0 81 03 f0 	brne	800078be <_vfprintf_r+0x1f16>
800070e2:	fa c3 f9 e0 	sub	r3,sp,-1568
800070e6:	30 09       	mov	r9,0
800070e8:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800070ec:	f2 08 18 00 	cp.b	r8,r9
800070f0:	c1 f0       	breq	8000712e <_vfprintf_r+0x1786>
800070f2:	fa f8 06 90 	ld.w	r8,sp[1680]
800070f6:	fa c9 f9 45 	sub	r9,sp,-1723
800070fa:	2f f8       	sub	r8,-1
800070fc:	87 09       	st.w	r3[0x0],r9
800070fe:	fb 48 06 90 	st.w	sp[1680],r8
80007102:	30 19       	mov	r9,1
80007104:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007108:	87 19       	st.w	r3[0x4],r9
8000710a:	2f f8       	sub	r8,-1
8000710c:	fb 48 06 8c 	st.w	sp[1676],r8
80007110:	58 78       	cp.w	r8,7
80007112:	e0 89 00 04 	brgt	8000711a <_vfprintf_r+0x1772>
80007116:	2f 83       	sub	r3,-8
80007118:	c0 b8       	rjmp	8000712e <_vfprintf_r+0x1786>
8000711a:	fa ca f9 78 	sub	r10,sp,-1672
8000711e:	02 9b       	mov	r11,r1
80007120:	08 9c       	mov	r12,r4
80007122:	fe b0 f4 35 	rcall	8000598c <__sprint_r>
80007126:	e0 81 03 cc 	brne	800078be <_vfprintf_r+0x1f16>
8000712a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000712e:	40 fc       	lddsp	r12,sp[0x3c]
80007130:	58 0c       	cp.w	r12,0
80007132:	c1 f0       	breq	80007170 <_vfprintf_r+0x17c8>
80007134:	fa f8 06 90 	ld.w	r8,sp[1680]
80007138:	fa c9 f9 48 	sub	r9,sp,-1720
8000713c:	2f e8       	sub	r8,-2
8000713e:	87 09       	st.w	r3[0x0],r9
80007140:	fb 48 06 90 	st.w	sp[1680],r8
80007144:	30 29       	mov	r9,2
80007146:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000714a:	87 19       	st.w	r3[0x4],r9
8000714c:	2f f8       	sub	r8,-1
8000714e:	fb 48 06 8c 	st.w	sp[1676],r8
80007152:	58 78       	cp.w	r8,7
80007154:	e0 89 00 04 	brgt	8000715c <_vfprintf_r+0x17b4>
80007158:	2f 83       	sub	r3,-8
8000715a:	c0 b8       	rjmp	80007170 <_vfprintf_r+0x17c8>
8000715c:	fa ca f9 78 	sub	r10,sp,-1672
80007160:	02 9b       	mov	r11,r1
80007162:	08 9c       	mov	r12,r4
80007164:	fe b0 f4 14 	rcall	8000598c <__sprint_r>
80007168:	e0 81 03 ab 	brne	800078be <_vfprintf_r+0x1f16>
8000716c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007170:	40 9b       	lddsp	r11,sp[0x24]
80007172:	e0 4b 00 80 	cp.w	r11,128
80007176:	c4 a1       	brne	8000720a <_vfprintf_r+0x1862>
80007178:	40 8a       	lddsp	r10,sp[0x20]
8000717a:	40 39       	lddsp	r9,sp[0xc]
8000717c:	12 1a       	sub	r10,r9
8000717e:	50 4a       	stdsp	sp[0x10],r10
80007180:	58 0a       	cp.w	r10,0
80007182:	e0 89 00 24 	brgt	800071ca <_vfprintf_r+0x1822>
80007186:	c4 28       	rjmp	8000720a <_vfprintf_r+0x1862>
80007188:	2f 09       	sub	r9,-16
8000718a:	2f f8       	sub	r8,-1
8000718c:	48 8e       	lddpc	lr,800071ac <_vfprintf_r+0x1804>
8000718e:	31 0c       	mov	r12,16
80007190:	fb 49 06 90 	st.w	sp[1680],r9
80007194:	87 0e       	st.w	r3[0x0],lr
80007196:	87 1c       	st.w	r3[0x4],r12
80007198:	fb 48 06 8c 	st.w	sp[1676],r8
8000719c:	58 78       	cp.w	r8,7
8000719e:	e0 89 00 09 	brgt	800071b0 <_vfprintf_r+0x1808>
800071a2:	2f 83       	sub	r3,-8
800071a4:	c1 08       	rjmp	800071c4 <_vfprintf_r+0x181c>
800071a6:	d7 03       	nop
800071a8:	80 00       	ld.sh	r0,r0[0x0]
800071aa:	bd fc       	*unknown*
800071ac:	80 00       	ld.sh	r0,r0[0x0]
800071ae:	be 0c       	st.h	pc[0x0],r12
800071b0:	fa ca f9 78 	sub	r10,sp,-1672
800071b4:	02 9b       	mov	r11,r1
800071b6:	08 9c       	mov	r12,r4
800071b8:	fe b0 f3 ea 	rcall	8000598c <__sprint_r>
800071bc:	e0 81 03 81 	brne	800078be <_vfprintf_r+0x1f16>
800071c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800071c4:	40 4b       	lddsp	r11,sp[0x10]
800071c6:	21 0b       	sub	r11,16
800071c8:	50 4b       	stdsp	sp[0x10],r11
800071ca:	fa f9 06 90 	ld.w	r9,sp[1680]
800071ce:	fa f8 06 8c 	ld.w	r8,sp[1676]
800071d2:	4c 6a       	lddpc	r10,800072e8 <_vfprintf_r+0x1940>
800071d4:	40 4e       	lddsp	lr,sp[0x10]
800071d6:	59 0e       	cp.w	lr,16
800071d8:	fe 99 ff d8 	brgt	80007188 <_vfprintf_r+0x17e0>
800071dc:	1c 09       	add	r9,lr
800071de:	2f f8       	sub	r8,-1
800071e0:	87 0a       	st.w	r3[0x0],r10
800071e2:	fb 49 06 90 	st.w	sp[1680],r9
800071e6:	87 1e       	st.w	r3[0x4],lr
800071e8:	fb 48 06 8c 	st.w	sp[1676],r8
800071ec:	58 78       	cp.w	r8,7
800071ee:	e0 89 00 04 	brgt	800071f6 <_vfprintf_r+0x184e>
800071f2:	2f 83       	sub	r3,-8
800071f4:	c0 b8       	rjmp	8000720a <_vfprintf_r+0x1862>
800071f6:	fa ca f9 78 	sub	r10,sp,-1672
800071fa:	02 9b       	mov	r11,r1
800071fc:	08 9c       	mov	r12,r4
800071fe:	fe b0 f3 c7 	rcall	8000598c <__sprint_r>
80007202:	e0 81 03 5e 	brne	800078be <_vfprintf_r+0x1f16>
80007206:	fa c3 f9 e0 	sub	r3,sp,-1568
8000720a:	40 2c       	lddsp	r12,sp[0x8]
8000720c:	04 1c       	sub	r12,r2
8000720e:	50 2c       	stdsp	sp[0x8],r12
80007210:	58 0c       	cp.w	r12,0
80007212:	e0 89 00 1f 	brgt	80007250 <_vfprintf_r+0x18a8>
80007216:	c3 d8       	rjmp	80007290 <_vfprintf_r+0x18e8>
80007218:	2f 09       	sub	r9,-16
8000721a:	2f f8       	sub	r8,-1
8000721c:	4b 3b       	lddpc	r11,800072e8 <_vfprintf_r+0x1940>
8000721e:	31 0a       	mov	r10,16
80007220:	fb 49 06 90 	st.w	sp[1680],r9
80007224:	87 0b       	st.w	r3[0x0],r11
80007226:	87 1a       	st.w	r3[0x4],r10
80007228:	fb 48 06 8c 	st.w	sp[1676],r8
8000722c:	58 78       	cp.w	r8,7
8000722e:	e0 89 00 04 	brgt	80007236 <_vfprintf_r+0x188e>
80007232:	2f 83       	sub	r3,-8
80007234:	c0 b8       	rjmp	8000724a <_vfprintf_r+0x18a2>
80007236:	fa ca f9 78 	sub	r10,sp,-1672
8000723a:	02 9b       	mov	r11,r1
8000723c:	08 9c       	mov	r12,r4
8000723e:	fe b0 f3 a7 	rcall	8000598c <__sprint_r>
80007242:	e0 81 03 3e 	brne	800078be <_vfprintf_r+0x1f16>
80007246:	fa c3 f9 e0 	sub	r3,sp,-1568
8000724a:	40 29       	lddsp	r9,sp[0x8]
8000724c:	21 09       	sub	r9,16
8000724e:	50 29       	stdsp	sp[0x8],r9
80007250:	fa f9 06 90 	ld.w	r9,sp[1680]
80007254:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007258:	4a 4a       	lddpc	r10,800072e8 <_vfprintf_r+0x1940>
8000725a:	40 2e       	lddsp	lr,sp[0x8]
8000725c:	59 0e       	cp.w	lr,16
8000725e:	fe 99 ff dd 	brgt	80007218 <_vfprintf_r+0x1870>
80007262:	1c 09       	add	r9,lr
80007264:	2f f8       	sub	r8,-1
80007266:	87 0a       	st.w	r3[0x0],r10
80007268:	fb 49 06 90 	st.w	sp[1680],r9
8000726c:	87 1e       	st.w	r3[0x4],lr
8000726e:	fb 48 06 8c 	st.w	sp[1676],r8
80007272:	58 78       	cp.w	r8,7
80007274:	e0 89 00 04 	brgt	8000727c <_vfprintf_r+0x18d4>
80007278:	2f 83       	sub	r3,-8
8000727a:	c0 b8       	rjmp	80007290 <_vfprintf_r+0x18e8>
8000727c:	fa ca f9 78 	sub	r10,sp,-1672
80007280:	02 9b       	mov	r11,r1
80007282:	08 9c       	mov	r12,r4
80007284:	fe b0 f3 84 	rcall	8000598c <__sprint_r>
80007288:	e0 81 03 1b 	brne	800078be <_vfprintf_r+0x1f16>
8000728c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007290:	ed b5 00 08 	bld	r5,0x8
80007294:	c0 b0       	breq	800072aa <_vfprintf_r+0x1902>
80007296:	fa f8 06 90 	ld.w	r8,sp[1680]
8000729a:	87 12       	st.w	r3[0x4],r2
8000729c:	87 06       	st.w	r3[0x0],r6
8000729e:	f0 02 00 02 	add	r2,r8,r2
800072a2:	fb 42 06 90 	st.w	sp[1680],r2
800072a6:	e0 8f 01 d5 	bral	80007650 <_vfprintf_r+0x1ca8>
800072aa:	e0 40 00 65 	cp.w	r0,101
800072ae:	e0 8a 01 d7 	brle	8000765c <_vfprintf_r+0x1cb4>
800072b2:	30 08       	mov	r8,0
800072b4:	30 09       	mov	r9,0
800072b6:	40 5b       	lddsp	r11,sp[0x14]
800072b8:	40 7a       	lddsp	r10,sp[0x1c]
800072ba:	e0 a0 1a 1c 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
800072be:	c7 a0       	breq	800073b2 <_vfprintf_r+0x1a0a>
800072c0:	fa f8 06 90 	ld.w	r8,sp[1680]
800072c4:	48 a9       	lddpc	r9,800072ec <_vfprintf_r+0x1944>
800072c6:	2f f8       	sub	r8,-1
800072c8:	87 09       	st.w	r3[0x0],r9
800072ca:	fb 48 06 90 	st.w	sp[1680],r8
800072ce:	30 19       	mov	r9,1
800072d0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800072d4:	87 19       	st.w	r3[0x4],r9
800072d6:	2f f8       	sub	r8,-1
800072d8:	fb 48 06 8c 	st.w	sp[1676],r8
800072dc:	58 78       	cp.w	r8,7
800072de:	e0 89 00 09 	brgt	800072f0 <_vfprintf_r+0x1948>
800072e2:	2f 83       	sub	r3,-8
800072e4:	c1 08       	rjmp	80007304 <_vfprintf_r+0x195c>
800072e6:	d7 03       	nop
800072e8:	80 00       	ld.sh	r0,r0[0x0]
800072ea:	be 0c       	st.h	pc[0x0],r12
800072ec:	80 00       	ld.sh	r0,r0[0x0]
800072ee:	bd f8       	*unknown*
800072f0:	fa ca f9 78 	sub	r10,sp,-1672
800072f4:	02 9b       	mov	r11,r1
800072f6:	08 9c       	mov	r12,r4
800072f8:	fe b0 f3 4a 	rcall	8000598c <__sprint_r>
800072fc:	e0 81 02 e1 	brne	800078be <_vfprintf_r+0x1f16>
80007300:	fa c3 f9 e0 	sub	r3,sp,-1568
80007304:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007308:	40 6c       	lddsp	r12,sp[0x18]
8000730a:	18 38       	cp.w	r8,r12
8000730c:	c0 55       	brlt	80007316 <_vfprintf_r+0x196e>
8000730e:	ed b5 00 00 	bld	r5,0x0
80007312:	e0 81 02 69 	brne	800077e4 <_vfprintf_r+0x1e3c>
80007316:	fa f8 06 90 	ld.w	r8,sp[1680]
8000731a:	2f f8       	sub	r8,-1
8000731c:	40 cb       	lddsp	r11,sp[0x30]
8000731e:	fb 48 06 90 	st.w	sp[1680],r8
80007322:	30 19       	mov	r9,1
80007324:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007328:	87 0b       	st.w	r3[0x0],r11
8000732a:	2f f8       	sub	r8,-1
8000732c:	87 19       	st.w	r3[0x4],r9
8000732e:	fb 48 06 8c 	st.w	sp[1676],r8
80007332:	58 78       	cp.w	r8,7
80007334:	e0 89 00 04 	brgt	8000733c <_vfprintf_r+0x1994>
80007338:	2f 83       	sub	r3,-8
8000733a:	c0 b8       	rjmp	80007350 <_vfprintf_r+0x19a8>
8000733c:	fa ca f9 78 	sub	r10,sp,-1672
80007340:	02 9b       	mov	r11,r1
80007342:	08 9c       	mov	r12,r4
80007344:	fe b0 f3 24 	rcall	8000598c <__sprint_r>
80007348:	e0 81 02 bb 	brne	800078be <_vfprintf_r+0x1f16>
8000734c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007350:	40 66       	lddsp	r6,sp[0x18]
80007352:	20 16       	sub	r6,1
80007354:	58 06       	cp.w	r6,0
80007356:	e0 89 00 1d 	brgt	80007390 <_vfprintf_r+0x19e8>
8000735a:	e0 8f 02 45 	bral	800077e4 <_vfprintf_r+0x1e3c>
8000735e:	2f 09       	sub	r9,-16
80007360:	2f f8       	sub	r8,-1
80007362:	fb 49 06 90 	st.w	sp[1680],r9
80007366:	87 02       	st.w	r3[0x0],r2
80007368:	87 10       	st.w	r3[0x4],r0
8000736a:	fb 48 06 8c 	st.w	sp[1676],r8
8000736e:	58 78       	cp.w	r8,7
80007370:	e0 89 00 04 	brgt	80007378 <_vfprintf_r+0x19d0>
80007374:	2f 83       	sub	r3,-8
80007376:	c0 b8       	rjmp	8000738c <_vfprintf_r+0x19e4>
80007378:	fa ca f9 78 	sub	r10,sp,-1672
8000737c:	02 9b       	mov	r11,r1
8000737e:	08 9c       	mov	r12,r4
80007380:	fe b0 f3 06 	rcall	8000598c <__sprint_r>
80007384:	e0 81 02 9d 	brne	800078be <_vfprintf_r+0x1f16>
80007388:	fa c3 f9 e0 	sub	r3,sp,-1568
8000738c:	21 06       	sub	r6,16
8000738e:	c0 38       	rjmp	80007394 <_vfprintf_r+0x19ec>
80007390:	4d 22       	lddpc	r2,800074d8 <_vfprintf_r+0x1b30>
80007392:	31 00       	mov	r0,16
80007394:	fa f9 06 90 	ld.w	r9,sp[1680]
80007398:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000739c:	4c fa       	lddpc	r10,800074d8 <_vfprintf_r+0x1b30>
8000739e:	59 06       	cp.w	r6,16
800073a0:	fe 99 ff df 	brgt	8000735e <_vfprintf_r+0x19b6>
800073a4:	0c 09       	add	r9,r6
800073a6:	87 0a       	st.w	r3[0x0],r10
800073a8:	fb 49 06 90 	st.w	sp[1680],r9
800073ac:	2f f8       	sub	r8,-1
800073ae:	87 16       	st.w	r3[0x4],r6
800073b0:	c5 39       	rjmp	80007656 <_vfprintf_r+0x1cae>
800073b2:	fa fa 06 ac 	ld.w	r10,sp[1708]
800073b6:	58 0a       	cp.w	r10,0
800073b8:	e0 89 00 94 	brgt	800074e0 <_vfprintf_r+0x1b38>
800073bc:	fa f8 06 90 	ld.w	r8,sp[1680]
800073c0:	4c 79       	lddpc	r9,800074dc <_vfprintf_r+0x1b34>
800073c2:	2f f8       	sub	r8,-1
800073c4:	87 09       	st.w	r3[0x0],r9
800073c6:	fb 48 06 90 	st.w	sp[1680],r8
800073ca:	30 19       	mov	r9,1
800073cc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800073d0:	87 19       	st.w	r3[0x4],r9
800073d2:	2f f8       	sub	r8,-1
800073d4:	fb 48 06 8c 	st.w	sp[1676],r8
800073d8:	58 78       	cp.w	r8,7
800073da:	e0 89 00 04 	brgt	800073e2 <_vfprintf_r+0x1a3a>
800073de:	2f 83       	sub	r3,-8
800073e0:	c0 b8       	rjmp	800073f6 <_vfprintf_r+0x1a4e>
800073e2:	fa ca f9 78 	sub	r10,sp,-1672
800073e6:	02 9b       	mov	r11,r1
800073e8:	08 9c       	mov	r12,r4
800073ea:	fe b0 f2 d1 	rcall	8000598c <__sprint_r>
800073ee:	e0 81 02 68 	brne	800078be <_vfprintf_r+0x1f16>
800073f2:	fa c3 f9 e0 	sub	r3,sp,-1568
800073f6:	fa f8 06 ac 	ld.w	r8,sp[1708]
800073fa:	58 08       	cp.w	r8,0
800073fc:	c0 81       	brne	8000740c <_vfprintf_r+0x1a64>
800073fe:	40 6a       	lddsp	r10,sp[0x18]
80007400:	58 0a       	cp.w	r10,0
80007402:	c0 51       	brne	8000740c <_vfprintf_r+0x1a64>
80007404:	ed b5 00 00 	bld	r5,0x0
80007408:	e0 81 01 ee 	brne	800077e4 <_vfprintf_r+0x1e3c>
8000740c:	40 c9       	lddsp	r9,sp[0x30]
8000740e:	fa f8 06 90 	ld.w	r8,sp[1680]
80007412:	2f f8       	sub	r8,-1
80007414:	87 09       	st.w	r3[0x0],r9
80007416:	fb 48 06 90 	st.w	sp[1680],r8
8000741a:	30 19       	mov	r9,1
8000741c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007420:	87 19       	st.w	r3[0x4],r9
80007422:	2f f8       	sub	r8,-1
80007424:	fb 48 06 8c 	st.w	sp[1676],r8
80007428:	58 78       	cp.w	r8,7
8000742a:	e0 89 00 04 	brgt	80007432 <_vfprintf_r+0x1a8a>
8000742e:	2f 83       	sub	r3,-8
80007430:	c0 b8       	rjmp	80007446 <_vfprintf_r+0x1a9e>
80007432:	fa ca f9 78 	sub	r10,sp,-1672
80007436:	02 9b       	mov	r11,r1
80007438:	08 9c       	mov	r12,r4
8000743a:	fe b0 f2 a9 	rcall	8000598c <__sprint_r>
8000743e:	e0 81 02 40 	brne	800078be <_vfprintf_r+0x1f16>
80007442:	fa c3 f9 e0 	sub	r3,sp,-1568
80007446:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000744a:	5c 32       	neg	r2
8000744c:	58 02       	cp.w	r2,0
8000744e:	e0 89 00 1d 	brgt	80007488 <_vfprintf_r+0x1ae0>
80007452:	c3 b8       	rjmp	800074c8 <_vfprintf_r+0x1b20>
80007454:	2f 09       	sub	r9,-16
80007456:	2f f8       	sub	r8,-1
80007458:	31 0e       	mov	lr,16
8000745a:	fb 49 06 90 	st.w	sp[1680],r9
8000745e:	87 00       	st.w	r3[0x0],r0
80007460:	87 1e       	st.w	r3[0x4],lr
80007462:	fb 48 06 8c 	st.w	sp[1676],r8
80007466:	58 78       	cp.w	r8,7
80007468:	e0 89 00 04 	brgt	80007470 <_vfprintf_r+0x1ac8>
8000746c:	2f 83       	sub	r3,-8
8000746e:	c0 b8       	rjmp	80007484 <_vfprintf_r+0x1adc>
80007470:	fa ca f9 78 	sub	r10,sp,-1672
80007474:	02 9b       	mov	r11,r1
80007476:	08 9c       	mov	r12,r4
80007478:	fe b0 f2 8a 	rcall	8000598c <__sprint_r>
8000747c:	e0 81 02 21 	brne	800078be <_vfprintf_r+0x1f16>
80007480:	fa c3 f9 e0 	sub	r3,sp,-1568
80007484:	21 02       	sub	r2,16
80007486:	c0 28       	rjmp	8000748a <_vfprintf_r+0x1ae2>
80007488:	49 40       	lddpc	r0,800074d8 <_vfprintf_r+0x1b30>
8000748a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000748e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007492:	49 2a       	lddpc	r10,800074d8 <_vfprintf_r+0x1b30>
80007494:	59 02       	cp.w	r2,16
80007496:	fe 99 ff df 	brgt	80007454 <_vfprintf_r+0x1aac>
8000749a:	04 09       	add	r9,r2
8000749c:	2f f8       	sub	r8,-1
8000749e:	87 0a       	st.w	r3[0x0],r10
800074a0:	fb 49 06 90 	st.w	sp[1680],r9
800074a4:	87 12       	st.w	r3[0x4],r2
800074a6:	fb 48 06 8c 	st.w	sp[1676],r8
800074aa:	58 78       	cp.w	r8,7
800074ac:	e0 89 00 04 	brgt	800074b4 <_vfprintf_r+0x1b0c>
800074b0:	2f 83       	sub	r3,-8
800074b2:	c0 b8       	rjmp	800074c8 <_vfprintf_r+0x1b20>
800074b4:	fa ca f9 78 	sub	r10,sp,-1672
800074b8:	02 9b       	mov	r11,r1
800074ba:	08 9c       	mov	r12,r4
800074bc:	fe b0 f2 68 	rcall	8000598c <__sprint_r>
800074c0:	e0 81 01 ff 	brne	800078be <_vfprintf_r+0x1f16>
800074c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800074c8:	40 6c       	lddsp	r12,sp[0x18]
800074ca:	fa f8 06 90 	ld.w	r8,sp[1680]
800074ce:	87 06       	st.w	r3[0x0],r6
800074d0:	87 1c       	st.w	r3[0x4],r12
800074d2:	18 08       	add	r8,r12
800074d4:	cb c8       	rjmp	8000764c <_vfprintf_r+0x1ca4>
800074d6:	d7 03       	nop
800074d8:	80 00       	ld.sh	r0,r0[0x0]
800074da:	be 0c       	st.h	pc[0x0],r12
800074dc:	80 00       	ld.sh	r0,r0[0x0]
800074de:	bd f8       	*unknown*
800074e0:	fa f9 06 90 	ld.w	r9,sp[1680]
800074e4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800074e8:	40 6b       	lddsp	r11,sp[0x18]
800074ea:	16 3a       	cp.w	r10,r11
800074ec:	c6 d5       	brlt	800075c6 <_vfprintf_r+0x1c1e>
800074ee:	16 09       	add	r9,r11
800074f0:	2f f8       	sub	r8,-1
800074f2:	87 06       	st.w	r3[0x0],r6
800074f4:	fb 49 06 90 	st.w	sp[1680],r9
800074f8:	87 1b       	st.w	r3[0x4],r11
800074fa:	fb 48 06 8c 	st.w	sp[1676],r8
800074fe:	58 78       	cp.w	r8,7
80007500:	e0 89 00 04 	brgt	80007508 <_vfprintf_r+0x1b60>
80007504:	2f 83       	sub	r3,-8
80007506:	c0 b8       	rjmp	8000751c <_vfprintf_r+0x1b74>
80007508:	fa ca f9 78 	sub	r10,sp,-1672
8000750c:	02 9b       	mov	r11,r1
8000750e:	08 9c       	mov	r12,r4
80007510:	fe b0 f2 3e 	rcall	8000598c <__sprint_r>
80007514:	e0 81 01 d5 	brne	800078be <_vfprintf_r+0x1f16>
80007518:	fa c3 f9 e0 	sub	r3,sp,-1568
8000751c:	fa f6 06 ac 	ld.w	r6,sp[1708]
80007520:	40 6a       	lddsp	r10,sp[0x18]
80007522:	14 16       	sub	r6,r10
80007524:	58 06       	cp.w	r6,0
80007526:	e0 89 00 1c 	brgt	8000755e <_vfprintf_r+0x1bb6>
8000752a:	c3 b8       	rjmp	800075a0 <_vfprintf_r+0x1bf8>
8000752c:	2f 09       	sub	r9,-16
8000752e:	2f f8       	sub	r8,-1
80007530:	fb 49 06 90 	st.w	sp[1680],r9
80007534:	87 02       	st.w	r3[0x0],r2
80007536:	87 10       	st.w	r3[0x4],r0
80007538:	fb 48 06 8c 	st.w	sp[1676],r8
8000753c:	58 78       	cp.w	r8,7
8000753e:	e0 89 00 04 	brgt	80007546 <_vfprintf_r+0x1b9e>
80007542:	2f 83       	sub	r3,-8
80007544:	c0 b8       	rjmp	8000755a <_vfprintf_r+0x1bb2>
80007546:	fa ca f9 78 	sub	r10,sp,-1672
8000754a:	02 9b       	mov	r11,r1
8000754c:	08 9c       	mov	r12,r4
8000754e:	fe b0 f2 1f 	rcall	8000598c <__sprint_r>
80007552:	e0 81 01 b6 	brne	800078be <_vfprintf_r+0x1f16>
80007556:	fa c3 f9 e0 	sub	r3,sp,-1568
8000755a:	21 06       	sub	r6,16
8000755c:	c0 38       	rjmp	80007562 <_vfprintf_r+0x1bba>
8000755e:	4d c2       	lddpc	r2,800076cc <_vfprintf_r+0x1d24>
80007560:	31 00       	mov	r0,16
80007562:	fa f9 06 90 	ld.w	r9,sp[1680]
80007566:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000756a:	4d 9a       	lddpc	r10,800076cc <_vfprintf_r+0x1d24>
8000756c:	59 06       	cp.w	r6,16
8000756e:	fe 99 ff df 	brgt	8000752c <_vfprintf_r+0x1b84>
80007572:	0c 09       	add	r9,r6
80007574:	2f f8       	sub	r8,-1
80007576:	87 0a       	st.w	r3[0x0],r10
80007578:	fb 49 06 90 	st.w	sp[1680],r9
8000757c:	87 16       	st.w	r3[0x4],r6
8000757e:	fb 48 06 8c 	st.w	sp[1676],r8
80007582:	58 78       	cp.w	r8,7
80007584:	e0 89 00 04 	brgt	8000758c <_vfprintf_r+0x1be4>
80007588:	2f 83       	sub	r3,-8
8000758a:	c0 b8       	rjmp	800075a0 <_vfprintf_r+0x1bf8>
8000758c:	fa ca f9 78 	sub	r10,sp,-1672
80007590:	02 9b       	mov	r11,r1
80007592:	08 9c       	mov	r12,r4
80007594:	fe b0 f1 fc 	rcall	8000598c <__sprint_r>
80007598:	e0 81 01 93 	brne	800078be <_vfprintf_r+0x1f16>
8000759c:	fa c3 f9 e0 	sub	r3,sp,-1568
800075a0:	ed b5 00 00 	bld	r5,0x0
800075a4:	e0 81 01 20 	brne	800077e4 <_vfprintf_r+0x1e3c>
800075a8:	40 c9       	lddsp	r9,sp[0x30]
800075aa:	fa f8 06 90 	ld.w	r8,sp[1680]
800075ae:	2f f8       	sub	r8,-1
800075b0:	87 09       	st.w	r3[0x0],r9
800075b2:	fb 48 06 90 	st.w	sp[1680],r8
800075b6:	30 19       	mov	r9,1
800075b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800075bc:	87 19       	st.w	r3[0x4],r9
800075be:	2f f8       	sub	r8,-1
800075c0:	fb 48 06 8c 	st.w	sp[1676],r8
800075c4:	c0 29       	rjmp	800077c8 <_vfprintf_r+0x1e20>
800075c6:	14 09       	add	r9,r10
800075c8:	2f f8       	sub	r8,-1
800075ca:	fb 49 06 90 	st.w	sp[1680],r9
800075ce:	87 06       	st.w	r3[0x0],r6
800075d0:	87 1a       	st.w	r3[0x4],r10
800075d2:	fb 48 06 8c 	st.w	sp[1676],r8
800075d6:	58 78       	cp.w	r8,7
800075d8:	e0 89 00 04 	brgt	800075e0 <_vfprintf_r+0x1c38>
800075dc:	2f 83       	sub	r3,-8
800075de:	c0 b8       	rjmp	800075f4 <_vfprintf_r+0x1c4c>
800075e0:	fa ca f9 78 	sub	r10,sp,-1672
800075e4:	02 9b       	mov	r11,r1
800075e6:	08 9c       	mov	r12,r4
800075e8:	fe b0 f1 d2 	rcall	8000598c <__sprint_r>
800075ec:	e0 81 01 69 	brne	800078be <_vfprintf_r+0x1f16>
800075f0:	fa c3 f9 e0 	sub	r3,sp,-1568
800075f4:	40 c8       	lddsp	r8,sp[0x30]
800075f6:	87 08       	st.w	r3[0x0],r8
800075f8:	fa f8 06 90 	ld.w	r8,sp[1680]
800075fc:	2f f8       	sub	r8,-1
800075fe:	30 19       	mov	r9,1
80007600:	fb 48 06 90 	st.w	sp[1680],r8
80007604:	87 19       	st.w	r3[0x4],r9
80007606:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000760a:	2f f8       	sub	r8,-1
8000760c:	fb 48 06 8c 	st.w	sp[1676],r8
80007610:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007614:	58 78       	cp.w	r8,7
80007616:	e0 89 00 04 	brgt	8000761e <_vfprintf_r+0x1c76>
8000761a:	2f 83       	sub	r3,-8
8000761c:	c0 b8       	rjmp	80007632 <_vfprintf_r+0x1c8a>
8000761e:	fa ca f9 78 	sub	r10,sp,-1672
80007622:	02 9b       	mov	r11,r1
80007624:	08 9c       	mov	r12,r4
80007626:	fe b0 f1 b3 	rcall	8000598c <__sprint_r>
8000762a:	e0 81 01 4a 	brne	800078be <_vfprintf_r+0x1f16>
8000762e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007632:	04 06       	add	r6,r2
80007634:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007638:	87 06       	st.w	r3[0x0],r6
8000763a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000763e:	40 66       	lddsp	r6,sp[0x18]
80007640:	40 6e       	lddsp	lr,sp[0x18]
80007642:	10 16       	sub	r6,r8
80007644:	f2 08 01 08 	sub	r8,r9,r8
80007648:	87 16       	st.w	r3[0x4],r6
8000764a:	1c 08       	add	r8,lr
8000764c:	fb 48 06 90 	st.w	sp[1680],r8
80007650:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007654:	2f f8       	sub	r8,-1
80007656:	fb 48 06 8c 	st.w	sp[1676],r8
8000765a:	cb 78       	rjmp	800077c8 <_vfprintf_r+0x1e20>
8000765c:	40 6c       	lddsp	r12,sp[0x18]
8000765e:	58 1c       	cp.w	r12,1
80007660:	e0 89 00 06 	brgt	8000766c <_vfprintf_r+0x1cc4>
80007664:	ed b5 00 00 	bld	r5,0x0
80007668:	e0 81 00 85 	brne	80007772 <_vfprintf_r+0x1dca>
8000766c:	fa f8 06 90 	ld.w	r8,sp[1680]
80007670:	2f f8       	sub	r8,-1
80007672:	30 19       	mov	r9,1
80007674:	fb 48 06 90 	st.w	sp[1680],r8
80007678:	87 06       	st.w	r3[0x0],r6
8000767a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000767e:	87 19       	st.w	r3[0x4],r9
80007680:	2f f8       	sub	r8,-1
80007682:	fb 48 06 8c 	st.w	sp[1676],r8
80007686:	58 78       	cp.w	r8,7
80007688:	e0 89 00 04 	brgt	80007690 <_vfprintf_r+0x1ce8>
8000768c:	2f 83       	sub	r3,-8
8000768e:	c0 b8       	rjmp	800076a4 <_vfprintf_r+0x1cfc>
80007690:	fa ca f9 78 	sub	r10,sp,-1672
80007694:	02 9b       	mov	r11,r1
80007696:	08 9c       	mov	r12,r4
80007698:	fe b0 f1 7a 	rcall	8000598c <__sprint_r>
8000769c:	e0 81 01 11 	brne	800078be <_vfprintf_r+0x1f16>
800076a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800076a4:	fa f8 06 90 	ld.w	r8,sp[1680]
800076a8:	2f f8       	sub	r8,-1
800076aa:	40 cb       	lddsp	r11,sp[0x30]
800076ac:	fb 48 06 90 	st.w	sp[1680],r8
800076b0:	30 19       	mov	r9,1
800076b2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800076b6:	87 0b       	st.w	r3[0x0],r11
800076b8:	2f f8       	sub	r8,-1
800076ba:	87 19       	st.w	r3[0x4],r9
800076bc:	fb 48 06 8c 	st.w	sp[1676],r8
800076c0:	58 78       	cp.w	r8,7
800076c2:	e0 89 00 07 	brgt	800076d0 <_vfprintf_r+0x1d28>
800076c6:	2f 83       	sub	r3,-8
800076c8:	c0 e8       	rjmp	800076e4 <_vfprintf_r+0x1d3c>
800076ca:	d7 03       	nop
800076cc:	80 00       	ld.sh	r0,r0[0x0]
800076ce:	be 0c       	st.h	pc[0x0],r12
800076d0:	fa ca f9 78 	sub	r10,sp,-1672
800076d4:	02 9b       	mov	r11,r1
800076d6:	08 9c       	mov	r12,r4
800076d8:	fe b0 f1 5a 	rcall	8000598c <__sprint_r>
800076dc:	e0 81 00 f1 	brne	800078be <_vfprintf_r+0x1f16>
800076e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800076e4:	30 08       	mov	r8,0
800076e6:	30 09       	mov	r9,0
800076e8:	40 5b       	lddsp	r11,sp[0x14]
800076ea:	40 7a       	lddsp	r10,sp[0x1c]
800076ec:	e0 a0 18 03 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
800076f0:	40 68       	lddsp	r8,sp[0x18]
800076f2:	20 18       	sub	r8,1
800076f4:	58 0c       	cp.w	r12,0
800076f6:	c0 d1       	brne	80007710 <_vfprintf_r+0x1d68>
800076f8:	2f f6       	sub	r6,-1
800076fa:	87 18       	st.w	r3[0x4],r8
800076fc:	87 06       	st.w	r3[0x0],r6
800076fe:	fa f6 06 90 	ld.w	r6,sp[1680]
80007702:	10 06       	add	r6,r8
80007704:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007708:	fb 46 06 90 	st.w	sp[1680],r6
8000770c:	2f f8       	sub	r8,-1
8000770e:	c2 f8       	rjmp	8000776c <_vfprintf_r+0x1dc4>
80007710:	10 96       	mov	r6,r8
80007712:	58 08       	cp.w	r8,0
80007714:	e0 89 00 1c 	brgt	8000774c <_vfprintf_r+0x1da4>
80007718:	c4 98       	rjmp	800077aa <_vfprintf_r+0x1e02>
8000771a:	2f 09       	sub	r9,-16
8000771c:	2f f8       	sub	r8,-1
8000771e:	fb 49 06 90 	st.w	sp[1680],r9
80007722:	87 02       	st.w	r3[0x0],r2
80007724:	87 10       	st.w	r3[0x4],r0
80007726:	fb 48 06 8c 	st.w	sp[1676],r8
8000772a:	58 78       	cp.w	r8,7
8000772c:	e0 89 00 04 	brgt	80007734 <_vfprintf_r+0x1d8c>
80007730:	2f 83       	sub	r3,-8
80007732:	c0 b8       	rjmp	80007748 <_vfprintf_r+0x1da0>
80007734:	fa ca f9 78 	sub	r10,sp,-1672
80007738:	02 9b       	mov	r11,r1
8000773a:	08 9c       	mov	r12,r4
8000773c:	fe b0 f1 28 	rcall	8000598c <__sprint_r>
80007740:	e0 81 00 bf 	brne	800078be <_vfprintf_r+0x1f16>
80007744:	fa c3 f9 e0 	sub	r3,sp,-1568
80007748:	21 06       	sub	r6,16
8000774a:	c0 38       	rjmp	80007750 <_vfprintf_r+0x1da8>
8000774c:	4d 22       	lddpc	r2,80007894 <_vfprintf_r+0x1eec>
8000774e:	31 00       	mov	r0,16
80007750:	fa f9 06 90 	ld.w	r9,sp[1680]
80007754:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007758:	4c fa       	lddpc	r10,80007894 <_vfprintf_r+0x1eec>
8000775a:	59 06       	cp.w	r6,16
8000775c:	fe 99 ff df 	brgt	8000771a <_vfprintf_r+0x1d72>
80007760:	0c 09       	add	r9,r6
80007762:	87 0a       	st.w	r3[0x0],r10
80007764:	fb 49 06 90 	st.w	sp[1680],r9
80007768:	2f f8       	sub	r8,-1
8000776a:	87 16       	st.w	r3[0x4],r6
8000776c:	fb 48 06 8c 	st.w	sp[1676],r8
80007770:	c0 e8       	rjmp	8000778c <_vfprintf_r+0x1de4>
80007772:	fa f8 06 90 	ld.w	r8,sp[1680]
80007776:	2f f8       	sub	r8,-1
80007778:	30 19       	mov	r9,1
8000777a:	fb 48 06 90 	st.w	sp[1680],r8
8000777e:	87 06       	st.w	r3[0x0],r6
80007780:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007784:	87 19       	st.w	r3[0x4],r9
80007786:	2f f8       	sub	r8,-1
80007788:	fb 48 06 8c 	st.w	sp[1676],r8
8000778c:	58 78       	cp.w	r8,7
8000778e:	e0 89 00 04 	brgt	80007796 <_vfprintf_r+0x1dee>
80007792:	2f 83       	sub	r3,-8
80007794:	c0 b8       	rjmp	800077aa <_vfprintf_r+0x1e02>
80007796:	fa ca f9 78 	sub	r10,sp,-1672
8000779a:	02 9b       	mov	r11,r1
8000779c:	08 9c       	mov	r12,r4
8000779e:	fe b0 f0 f7 	rcall	8000598c <__sprint_r>
800077a2:	e0 81 00 8e 	brne	800078be <_vfprintf_r+0x1f16>
800077a6:	fa c3 f9 e0 	sub	r3,sp,-1568
800077aa:	40 ea       	lddsp	r10,sp[0x38]
800077ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800077b0:	14 08       	add	r8,r10
800077b2:	fa c9 f9 64 	sub	r9,sp,-1692
800077b6:	fb 48 06 90 	st.w	sp[1680],r8
800077ba:	87 1a       	st.w	r3[0x4],r10
800077bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800077c0:	87 09       	st.w	r3[0x0],r9
800077c2:	2f f8       	sub	r8,-1
800077c4:	fb 48 06 8c 	st.w	sp[1676],r8
800077c8:	58 78       	cp.w	r8,7
800077ca:	e0 89 00 04 	brgt	800077d2 <_vfprintf_r+0x1e2a>
800077ce:	2f 83       	sub	r3,-8
800077d0:	c0 a8       	rjmp	800077e4 <_vfprintf_r+0x1e3c>
800077d2:	fa ca f9 78 	sub	r10,sp,-1672
800077d6:	02 9b       	mov	r11,r1
800077d8:	08 9c       	mov	r12,r4
800077da:	fe b0 f0 d9 	rcall	8000598c <__sprint_r>
800077de:	c7 01       	brne	800078be <_vfprintf_r+0x1f16>
800077e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800077e4:	e2 15 00 04 	andl	r5,0x4,COH
800077e8:	c3 d0       	breq	80007862 <_vfprintf_r+0x1eba>
800077ea:	40 86       	lddsp	r6,sp[0x20]
800077ec:	40 39       	lddsp	r9,sp[0xc]
800077ee:	12 16       	sub	r6,r9
800077f0:	58 06       	cp.w	r6,0
800077f2:	e0 89 00 1a 	brgt	80007826 <_vfprintf_r+0x1e7e>
800077f6:	c3 68       	rjmp	80007862 <_vfprintf_r+0x1eba>
800077f8:	2f 09       	sub	r9,-16
800077fa:	2f f8       	sub	r8,-1
800077fc:	fb 49 06 90 	st.w	sp[1680],r9
80007800:	87 05       	st.w	r3[0x0],r5
80007802:	87 12       	st.w	r3[0x4],r2
80007804:	fb 48 06 8c 	st.w	sp[1676],r8
80007808:	58 78       	cp.w	r8,7
8000780a:	e0 89 00 04 	brgt	80007812 <_vfprintf_r+0x1e6a>
8000780e:	2f 83       	sub	r3,-8
80007810:	c0 98       	rjmp	80007822 <_vfprintf_r+0x1e7a>
80007812:	00 9a       	mov	r10,r0
80007814:	02 9b       	mov	r11,r1
80007816:	08 9c       	mov	r12,r4
80007818:	fe b0 f0 ba 	rcall	8000598c <__sprint_r>
8000781c:	c5 11       	brne	800078be <_vfprintf_r+0x1f16>
8000781e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007822:	21 06       	sub	r6,16
80007824:	c0 58       	rjmp	8000782e <_vfprintf_r+0x1e86>
80007826:	49 d5       	lddpc	r5,80007898 <_vfprintf_r+0x1ef0>
80007828:	31 02       	mov	r2,16
8000782a:	fa c0 f9 78 	sub	r0,sp,-1672
8000782e:	fa f9 06 90 	ld.w	r9,sp[1680]
80007832:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007836:	49 9a       	lddpc	r10,80007898 <_vfprintf_r+0x1ef0>
80007838:	59 06       	cp.w	r6,16
8000783a:	fe 99 ff df 	brgt	800077f8 <_vfprintf_r+0x1e50>
8000783e:	0c 09       	add	r9,r6
80007840:	2f f8       	sub	r8,-1
80007842:	87 0a       	st.w	r3[0x0],r10
80007844:	87 16       	st.w	r3[0x4],r6
80007846:	fb 49 06 90 	st.w	sp[1680],r9
8000784a:	fb 48 06 8c 	st.w	sp[1676],r8
8000784e:	58 78       	cp.w	r8,7
80007850:	e0 8a 00 09 	brle	80007862 <_vfprintf_r+0x1eba>
80007854:	fa ca f9 78 	sub	r10,sp,-1672
80007858:	02 9b       	mov	r11,r1
8000785a:	08 9c       	mov	r12,r4
8000785c:	fe b0 f0 98 	rcall	8000598c <__sprint_r>
80007860:	c2 f1       	brne	800078be <_vfprintf_r+0x1f16>
80007862:	40 bc       	lddsp	r12,sp[0x2c]
80007864:	40 36       	lddsp	r6,sp[0xc]
80007866:	40 8e       	lddsp	lr,sp[0x20]
80007868:	ec 0e 0c 48 	max	r8,r6,lr
8000786c:	10 0c       	add	r12,r8
8000786e:	50 bc       	stdsp	sp[0x2c],r12
80007870:	fa f8 06 90 	ld.w	r8,sp[1680]
80007874:	58 08       	cp.w	r8,0
80007876:	c0 80       	breq	80007886 <_vfprintf_r+0x1ede>
80007878:	fa ca f9 78 	sub	r10,sp,-1672
8000787c:	02 9b       	mov	r11,r1
8000787e:	08 9c       	mov	r12,r4
80007880:	fe b0 f0 86 	rcall	8000598c <__sprint_r>
80007884:	c1 d1       	brne	800078be <_vfprintf_r+0x1f16>
80007886:	30 0b       	mov	r11,0
80007888:	fa c3 f9 e0 	sub	r3,sp,-1568
8000788c:	fb 4b 06 8c 	st.w	sp[1676],r11
80007890:	fe 9f f1 17 	bral	80005abe <_vfprintf_r+0x116>
80007894:	80 00       	ld.sh	r0,r0[0x0]
80007896:	be 0c       	st.h	pc[0x0],r12
80007898:	80 00       	ld.sh	r0,r0[0x0]
8000789a:	bd fc       	*unknown*
8000789c:	08 95       	mov	r5,r4
8000789e:	fa f8 06 90 	ld.w	r8,sp[1680]
800078a2:	58 08       	cp.w	r8,0
800078a4:	c0 80       	breq	800078b4 <_vfprintf_r+0x1f0c>
800078a6:	08 9c       	mov	r12,r4
800078a8:	fa ca f9 78 	sub	r10,sp,-1672
800078ac:	02 9b       	mov	r11,r1
800078ae:	fe b0 f0 6f 	rcall	8000598c <__sprint_r>
800078b2:	c0 61       	brne	800078be <_vfprintf_r+0x1f16>
800078b4:	30 08       	mov	r8,0
800078b6:	fb 48 06 8c 	st.w	sp[1676],r8
800078ba:	c0 28       	rjmp	800078be <_vfprintf_r+0x1f16>
800078bc:	40 41       	lddsp	r1,sp[0x10]
800078be:	82 68       	ld.sh	r8,r1[0xc]
800078c0:	ed b8 00 06 	bld	r8,0x6
800078c4:	c0 31       	brne	800078ca <_vfprintf_r+0x1f22>
800078c6:	3f fa       	mov	r10,-1
800078c8:	50 ba       	stdsp	sp[0x2c],r10
800078ca:	40 bc       	lddsp	r12,sp[0x2c]
800078cc:	fe 3d f9 44 	sub	sp,-1724
800078d0:	d8 32       	popm	r0-r7,pc
800078d2:	d7 03       	nop

800078d4 <__swsetup_r>:
800078d4:	d4 21       	pushm	r4-r7,lr
800078d6:	4b 38       	lddpc	r8,800079a0 <__swsetup_r+0xcc>
800078d8:	18 96       	mov	r6,r12
800078da:	16 97       	mov	r7,r11
800078dc:	70 0c       	ld.w	r12,r8[0x0]
800078de:	58 0c       	cp.w	r12,0
800078e0:	c0 60       	breq	800078ec <__swsetup_r+0x18>
800078e2:	78 68       	ld.w	r8,r12[0x18]
800078e4:	58 08       	cp.w	r8,0
800078e6:	c0 31       	brne	800078ec <__swsetup_r+0x18>
800078e8:	e0 a0 07 c0 	rcall	80008868 <__sinit>
800078ec:	4a e8       	lddpc	r8,800079a4 <__swsetup_r+0xd0>
800078ee:	10 37       	cp.w	r7,r8
800078f0:	c0 51       	brne	800078fa <__swsetup_r+0x26>
800078f2:	4a c8       	lddpc	r8,800079a0 <__swsetup_r+0xcc>
800078f4:	70 08       	ld.w	r8,r8[0x0]
800078f6:	70 07       	ld.w	r7,r8[0x0]
800078f8:	c0 e8       	rjmp	80007914 <__swsetup_r+0x40>
800078fa:	4a c8       	lddpc	r8,800079a8 <__swsetup_r+0xd4>
800078fc:	10 37       	cp.w	r7,r8
800078fe:	c0 51       	brne	80007908 <__swsetup_r+0x34>
80007900:	4a 88       	lddpc	r8,800079a0 <__swsetup_r+0xcc>
80007902:	70 08       	ld.w	r8,r8[0x0]
80007904:	70 17       	ld.w	r7,r8[0x4]
80007906:	c0 78       	rjmp	80007914 <__swsetup_r+0x40>
80007908:	4a 98       	lddpc	r8,800079ac <__swsetup_r+0xd8>
8000790a:	10 37       	cp.w	r7,r8
8000790c:	c0 41       	brne	80007914 <__swsetup_r+0x40>
8000790e:	4a 58       	lddpc	r8,800079a0 <__swsetup_r+0xcc>
80007910:	70 08       	ld.w	r8,r8[0x0]
80007912:	70 27       	ld.w	r7,r8[0x8]
80007914:	8e 68       	ld.sh	r8,r7[0xc]
80007916:	ed b8 00 03 	bld	r8,0x3
8000791a:	c1 e0       	breq	80007956 <__swsetup_r+0x82>
8000791c:	ed b8 00 04 	bld	r8,0x4
80007920:	c3 e1       	brne	8000799c <__swsetup_r+0xc8>
80007922:	ed b8 00 02 	bld	r8,0x2
80007926:	c1 51       	brne	80007950 <__swsetup_r+0x7c>
80007928:	6e db       	ld.w	r11,r7[0x34]
8000792a:	58 0b       	cp.w	r11,0
8000792c:	c0 a0       	breq	80007940 <__swsetup_r+0x6c>
8000792e:	ee c8 ff bc 	sub	r8,r7,-68
80007932:	10 3b       	cp.w	r11,r8
80007934:	c0 40       	breq	8000793c <__swsetup_r+0x68>
80007936:	0c 9c       	mov	r12,r6
80007938:	e0 a0 08 34 	rcall	800089a0 <_free_r>
8000793c:	30 08       	mov	r8,0
8000793e:	8f d8       	st.w	r7[0x34],r8
80007940:	8e 68       	ld.sh	r8,r7[0xc]
80007942:	e0 18 ff db 	andl	r8,0xffdb
80007946:	ae 68       	st.h	r7[0xc],r8
80007948:	30 08       	mov	r8,0
8000794a:	8f 18       	st.w	r7[0x4],r8
8000794c:	6e 48       	ld.w	r8,r7[0x10]
8000794e:	8f 08       	st.w	r7[0x0],r8
80007950:	8e 68       	ld.sh	r8,r7[0xc]
80007952:	a3 b8       	sbr	r8,0x3
80007954:	ae 68       	st.h	r7[0xc],r8
80007956:	6e 48       	ld.w	r8,r7[0x10]
80007958:	58 08       	cp.w	r8,0
8000795a:	c0 b1       	brne	80007970 <__swsetup_r+0x9c>
8000795c:	8e 68       	ld.sh	r8,r7[0xc]
8000795e:	e2 18 02 80 	andl	r8,0x280,COH
80007962:	e0 48 02 00 	cp.w	r8,512
80007966:	c0 50       	breq	80007970 <__swsetup_r+0x9c>
80007968:	0c 9c       	mov	r12,r6
8000796a:	0e 9b       	mov	r11,r7
8000796c:	e0 a0 0a 5c 	rcall	80008e24 <__smakebuf_r>
80007970:	8e 69       	ld.sh	r9,r7[0xc]
80007972:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80007976:	c0 70       	breq	80007984 <__swsetup_r+0xb0>
80007978:	30 08       	mov	r8,0
8000797a:	8f 28       	st.w	r7[0x8],r8
8000797c:	6e 58       	ld.w	r8,r7[0x14]
8000797e:	5c 38       	neg	r8
80007980:	8f 68       	st.w	r7[0x18],r8
80007982:	c0 68       	rjmp	8000798e <__swsetup_r+0xba>
80007984:	ed b9 00 01 	bld	r9,0x1
80007988:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000798c:	8f 28       	st.w	r7[0x8],r8
8000798e:	6e 48       	ld.w	r8,r7[0x10]
80007990:	58 08       	cp.w	r8,0
80007992:	c0 61       	brne	8000799e <__swsetup_r+0xca>
80007994:	8e 68       	ld.sh	r8,r7[0xc]
80007996:	ed b8 00 07 	bld	r8,0x7
8000799a:	c0 21       	brne	8000799e <__swsetup_r+0xca>
8000799c:	dc 2a       	popm	r4-r7,pc,r12=-1
8000799e:	d8 2a       	popm	r4-r7,pc,r12=0
800079a0:	00 00       	add	r0,r0
800079a2:	00 f8       	st.b	--r0,r8
800079a4:	80 00       	ld.sh	r0,r0[0x0]
800079a6:	bf 2c       	st.d	pc++,r12
800079a8:	80 00       	ld.sh	r0,r0[0x0]
800079aa:	bf 4c       	asr	r12,0x1e
800079ac:	80 00       	ld.sh	r0,r0[0x0]
800079ae:	bf 6c       	lsl	r12,0x1e

800079b0 <quorem>:
800079b0:	d4 31       	pushm	r0-r7,lr
800079b2:	20 2d       	sub	sp,8
800079b4:	18 97       	mov	r7,r12
800079b6:	78 48       	ld.w	r8,r12[0x10]
800079b8:	76 46       	ld.w	r6,r11[0x10]
800079ba:	0c 38       	cp.w	r8,r6
800079bc:	c0 34       	brge	800079c2 <quorem+0x12>
800079be:	30 0c       	mov	r12,0
800079c0:	c8 58       	rjmp	80007aca <quorem+0x11a>
800079c2:	ec c2 ff fc 	sub	r2,r6,-4
800079c6:	f6 c3 ff ec 	sub	r3,r11,-20
800079ca:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800079ce:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800079d2:	2f f9       	sub	r9,-1
800079d4:	20 16       	sub	r6,1
800079d6:	f8 09 0d 08 	divu	r8,r12,r9
800079da:	f6 02 00 22 	add	r2,r11,r2<<0x2
800079de:	ee c4 ff ec 	sub	r4,r7,-20
800079e2:	10 95       	mov	r5,r8
800079e4:	58 08       	cp.w	r8,0
800079e6:	c4 10       	breq	80007a68 <quorem+0xb8>
800079e8:	30 09       	mov	r9,0
800079ea:	06 9a       	mov	r10,r3
800079ec:	08 98       	mov	r8,r4
800079ee:	12 91       	mov	r1,r9
800079f0:	50 0b       	stdsp	sp[0x0],r11
800079f2:	70 0e       	ld.w	lr,r8[0x0]
800079f4:	b1 8e       	lsr	lr,0x10
800079f6:	50 1e       	stdsp	sp[0x4],lr
800079f8:	15 0e       	ld.w	lr,r10++
800079fa:	fc 00 16 10 	lsr	r0,lr,0x10
800079fe:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007a02:	ea 0e 03 41 	mac	r1,r5,lr
80007a06:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80007a0a:	b1 81       	lsr	r1,0x10
80007a0c:	40 1b       	lddsp	r11,sp[0x4]
80007a0e:	ea 00 02 40 	mul	r0,r5,r0
80007a12:	e2 00 00 00 	add	r0,r1,r0
80007a16:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80007a1a:	02 1b       	sub	r11,r1
80007a1c:	50 1b       	stdsp	sp[0x4],r11
80007a1e:	70 0b       	ld.w	r11,r8[0x0]
80007a20:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80007a24:	02 09       	add	r9,r1
80007a26:	f2 0e 01 0e 	sub	lr,r9,lr
80007a2a:	b0 1e       	st.h	r8[0x2],lr
80007a2c:	fc 09 14 10 	asr	r9,lr,0x10
80007a30:	40 1e       	lddsp	lr,sp[0x4]
80007a32:	fc 09 00 09 	add	r9,lr,r9
80007a36:	b0 09       	st.h	r8[0x0],r9
80007a38:	e0 01 16 10 	lsr	r1,r0,0x10
80007a3c:	2f c8       	sub	r8,-4
80007a3e:	b1 49       	asr	r9,0x10
80007a40:	04 3a       	cp.w	r10,r2
80007a42:	fe 98 ff d8 	brls	800079f2 <quorem+0x42>
80007a46:	40 0b       	lddsp	r11,sp[0x0]
80007a48:	58 0c       	cp.w	r12,0
80007a4a:	c0 f1       	brne	80007a68 <quorem+0xb8>
80007a4c:	ec c8 ff fb 	sub	r8,r6,-5
80007a50:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007a54:	c0 28       	rjmp	80007a58 <quorem+0xa8>
80007a56:	20 16       	sub	r6,1
80007a58:	20 48       	sub	r8,4
80007a5a:	08 38       	cp.w	r8,r4
80007a5c:	e0 88 00 05 	brls	80007a66 <quorem+0xb6>
80007a60:	70 09       	ld.w	r9,r8[0x0]
80007a62:	58 09       	cp.w	r9,0
80007a64:	cf 90       	breq	80007a56 <quorem+0xa6>
80007a66:	8f 46       	st.w	r7[0x10],r6
80007a68:	0e 9c       	mov	r12,r7
80007a6a:	e0 a0 0d a7 	rcall	800095b8 <__mcmp>
80007a6e:	c2 d5       	brlt	80007ac8 <quorem+0x118>
80007a70:	2f f5       	sub	r5,-1
80007a72:	08 98       	mov	r8,r4
80007a74:	30 09       	mov	r9,0
80007a76:	07 0b       	ld.w	r11,r3++
80007a78:	f6 0a 16 10 	lsr	r10,r11,0x10
80007a7c:	70 0c       	ld.w	r12,r8[0x0]
80007a7e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007a82:	f8 0e 16 10 	lsr	lr,r12,0x10
80007a86:	14 1e       	sub	lr,r10
80007a88:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007a8c:	16 1a       	sub	r10,r11
80007a8e:	12 0a       	add	r10,r9
80007a90:	b0 1a       	st.h	r8[0x2],r10
80007a92:	b1 4a       	asr	r10,0x10
80007a94:	fc 0a 00 09 	add	r9,lr,r10
80007a98:	b0 09       	st.h	r8[0x0],r9
80007a9a:	2f c8       	sub	r8,-4
80007a9c:	b1 49       	asr	r9,0x10
80007a9e:	04 33       	cp.w	r3,r2
80007aa0:	fe 98 ff eb 	brls	80007a76 <quorem+0xc6>
80007aa4:	ec c8 ff fb 	sub	r8,r6,-5
80007aa8:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80007aac:	58 09       	cp.w	r9,0
80007aae:	c0 d1       	brne	80007ac8 <quorem+0x118>
80007ab0:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007ab4:	c0 28       	rjmp	80007ab8 <quorem+0x108>
80007ab6:	20 16       	sub	r6,1
80007ab8:	20 48       	sub	r8,4
80007aba:	08 38       	cp.w	r8,r4
80007abc:	e0 88 00 05 	brls	80007ac6 <quorem+0x116>
80007ac0:	70 09       	ld.w	r9,r8[0x0]
80007ac2:	58 09       	cp.w	r9,0
80007ac4:	cf 90       	breq	80007ab6 <quorem+0x106>
80007ac6:	8f 46       	st.w	r7[0x10],r6
80007ac8:	0a 9c       	mov	r12,r5
80007aca:	2f ed       	sub	sp,-8
80007acc:	d8 32       	popm	r0-r7,pc
80007ace:	d7 03       	nop

80007ad0 <_dtoa_r>:
80007ad0:	d4 31       	pushm	r0-r7,lr
80007ad2:	21 ad       	sub	sp,104
80007ad4:	fa c4 ff 74 	sub	r4,sp,-140
80007ad8:	18 97       	mov	r7,r12
80007ada:	16 95       	mov	r5,r11
80007adc:	68 2c       	ld.w	r12,r4[0x8]
80007ade:	50 c9       	stdsp	sp[0x30],r9
80007ae0:	68 16       	ld.w	r6,r4[0x4]
80007ae2:	68 09       	ld.w	r9,r4[0x0]
80007ae4:	50 e8       	stdsp	sp[0x38],r8
80007ae6:	14 94       	mov	r4,r10
80007ae8:	51 2c       	stdsp	sp[0x48],r12
80007aea:	fa e5 00 08 	st.d	sp[8],r4
80007aee:	51 59       	stdsp	sp[0x54],r9
80007af0:	6e 95       	ld.w	r5,r7[0x24]
80007af2:	58 05       	cp.w	r5,0
80007af4:	c0 91       	brne	80007b06 <_dtoa_r+0x36>
80007af6:	31 0c       	mov	r12,16
80007af8:	e0 a0 09 f4 	rcall	80008ee0 <malloc>
80007afc:	99 35       	st.w	r12[0xc],r5
80007afe:	8f 9c       	st.w	r7[0x24],r12
80007b00:	99 15       	st.w	r12[0x4],r5
80007b02:	99 25       	st.w	r12[0x8],r5
80007b04:	99 05       	st.w	r12[0x0],r5
80007b06:	6e 99       	ld.w	r9,r7[0x24]
80007b08:	72 08       	ld.w	r8,r9[0x0]
80007b0a:	58 08       	cp.w	r8,0
80007b0c:	c0 f0       	breq	80007b2a <_dtoa_r+0x5a>
80007b0e:	72 1a       	ld.w	r10,r9[0x4]
80007b10:	91 1a       	st.w	r8[0x4],r10
80007b12:	30 1a       	mov	r10,1
80007b14:	72 19       	ld.w	r9,r9[0x4]
80007b16:	f4 09 09 49 	lsl	r9,r10,r9
80007b1a:	10 9b       	mov	r11,r8
80007b1c:	91 29       	st.w	r8[0x8],r9
80007b1e:	0e 9c       	mov	r12,r7
80007b20:	e0 a0 0d 66 	rcall	800095ec <_Bfree>
80007b24:	6e 98       	ld.w	r8,r7[0x24]
80007b26:	30 09       	mov	r9,0
80007b28:	91 09       	st.w	r8[0x0],r9
80007b2a:	40 28       	lddsp	r8,sp[0x8]
80007b2c:	10 94       	mov	r4,r8
80007b2e:	58 08       	cp.w	r8,0
80007b30:	c0 64       	brge	80007b3c <_dtoa_r+0x6c>
80007b32:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80007b36:	50 28       	stdsp	sp[0x8],r8
80007b38:	30 18       	mov	r8,1
80007b3a:	c0 28       	rjmp	80007b3e <_dtoa_r+0x6e>
80007b3c:	30 08       	mov	r8,0
80007b3e:	8d 08       	st.w	r6[0x0],r8
80007b40:	fc 1c 7f f0 	movh	r12,0x7ff0
80007b44:	40 26       	lddsp	r6,sp[0x8]
80007b46:	0c 98       	mov	r8,r6
80007b48:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007b4c:	18 38       	cp.w	r8,r12
80007b4e:	c1 e1       	brne	80007b8a <_dtoa_r+0xba>
80007b50:	e0 68 27 0f 	mov	r8,9999
80007b54:	41 5b       	lddsp	r11,sp[0x54]
80007b56:	97 08       	st.w	r11[0x0],r8
80007b58:	40 3a       	lddsp	r10,sp[0xc]
80007b5a:	58 0a       	cp.w	r10,0
80007b5c:	c0 61       	brne	80007b68 <_dtoa_r+0x98>
80007b5e:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80007b62:	c0 31       	brne	80007b68 <_dtoa_r+0x98>
80007b64:	4a cc       	lddpc	r12,80007c14 <_dtoa_r+0x144>
80007b66:	c0 28       	rjmp	80007b6a <_dtoa_r+0x9a>
80007b68:	4a cc       	lddpc	r12,80007c18 <_dtoa_r+0x148>
80007b6a:	41 29       	lddsp	r9,sp[0x48]
80007b6c:	58 09       	cp.w	r9,0
80007b6e:	e0 80 05 9e 	breq	800086aa <_dtoa_r+0xbda>
80007b72:	f8 c8 ff fd 	sub	r8,r12,-3
80007b76:	f8 c9 ff f8 	sub	r9,r12,-8
80007b7a:	11 8b       	ld.ub	r11,r8[0x0]
80007b7c:	30 0a       	mov	r10,0
80007b7e:	41 25       	lddsp	r5,sp[0x48]
80007b80:	f4 0b 18 00 	cp.b	r11,r10
80007b84:	f2 08 17 10 	movne	r8,r9
80007b88:	c1 58       	rjmp	80007bb2 <_dtoa_r+0xe2>
80007b8a:	fa ea 00 08 	ld.d	r10,sp[8]
80007b8e:	30 08       	mov	r8,0
80007b90:	fa eb 00 3c 	st.d	sp[60],r10
80007b94:	30 09       	mov	r9,0
80007b96:	e0 a0 15 ae 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
80007b9a:	c0 f0       	breq	80007bb8 <_dtoa_r+0xe8>
80007b9c:	30 18       	mov	r8,1
80007b9e:	41 5a       	lddsp	r10,sp[0x54]
80007ba0:	95 08       	st.w	r10[0x0],r8
80007ba2:	49 fc       	lddpc	r12,80007c1c <_dtoa_r+0x14c>
80007ba4:	41 29       	lddsp	r9,sp[0x48]
80007ba6:	f8 08 00 08 	add	r8,r12,r8
80007baa:	58 09       	cp.w	r9,0
80007bac:	e0 80 05 7f 	breq	800086aa <_dtoa_r+0xbda>
80007bb0:	12 95       	mov	r5,r9
80007bb2:	8b 08       	st.w	r5[0x0],r8
80007bb4:	e0 8f 05 7b 	bral	800086aa <_dtoa_r+0xbda>
80007bb8:	fa c8 ff 9c 	sub	r8,sp,-100
80007bbc:	fa c9 ff a0 	sub	r9,sp,-96
80007bc0:	fa ea 00 3c 	ld.d	r10,sp[60]
80007bc4:	0e 9c       	mov	r12,r7
80007bc6:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80007bca:	e0 a0 0d 63 	rcall	80009690 <__d2b>
80007bce:	18 93       	mov	r3,r12
80007bd0:	58 05       	cp.w	r5,0
80007bd2:	c0 d0       	breq	80007bec <_dtoa_r+0x11c>
80007bd4:	fa ea 00 3c 	ld.d	r10,sp[60]
80007bd8:	30 04       	mov	r4,0
80007bda:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80007bde:	ea c5 03 ff 	sub	r5,r5,1023
80007be2:	10 9b       	mov	r11,r8
80007be4:	51 74       	stdsp	sp[0x5c],r4
80007be6:	ea 1b 3f f0 	orh	r11,0x3ff0
80007bea:	c2 a8       	rjmp	80007c3e <_dtoa_r+0x16e>
80007bec:	41 88       	lddsp	r8,sp[0x60]
80007bee:	41 9c       	lddsp	r12,sp[0x64]
80007bf0:	10 0c       	add	r12,r8
80007bf2:	f8 c5 fb ce 	sub	r5,r12,-1074
80007bf6:	e0 45 00 20 	cp.w	r5,32
80007bfa:	e0 8a 00 13 	brle	80007c20 <_dtoa_r+0x150>
80007bfe:	f8 cc fb ee 	sub	r12,r12,-1042
80007c02:	40 3b       	lddsp	r11,sp[0xc]
80007c04:	ea 08 11 40 	rsub	r8,r5,64
80007c08:	f6 0c 0a 4c 	lsr	r12,r11,r12
80007c0c:	ec 08 09 46 	lsl	r6,r6,r8
80007c10:	0c 4c       	or	r12,r6
80007c12:	c0 c8       	rjmp	80007c2a <_dtoa_r+0x15a>
80007c14:	80 00       	ld.sh	r0,r0[0x0]
80007c16:	bf 1c       	ld.d	r12,--pc
80007c18:	80 00       	ld.sh	r0,r0[0x0]
80007c1a:	bf 28       	st.d	pc++,r8
80007c1c:	80 00       	ld.sh	r0,r0[0x0]
80007c1e:	bd f8       	*unknown*
80007c20:	ea 0c 11 20 	rsub	r12,r5,32
80007c24:	40 3a       	lddsp	r10,sp[0xc]
80007c26:	f4 0c 09 4c 	lsl	r12,r10,r12
80007c2a:	e0 a0 14 f0 	rcall	8000a60a <__avr32_u32_to_f64>
80007c2e:	fc 18 fe 10 	movh	r8,0xfe10
80007c32:	30 19       	mov	r9,1
80007c34:	ea c5 04 33 	sub	r5,r5,1075
80007c38:	f0 0b 00 0b 	add	r11,r8,r11
80007c3c:	51 79       	stdsp	sp[0x5c],r9
80007c3e:	30 08       	mov	r8,0
80007c40:	fc 19 3f f8 	movh	r9,0x3ff8
80007c44:	e0 a0 13 78 	rcall	8000a334 <__avr32_f64_sub>
80007c48:	e0 68 43 61 	mov	r8,17249
80007c4c:	ea 18 63 6f 	orh	r8,0x636f
80007c50:	e0 69 87 a7 	mov	r9,34727
80007c54:	ea 19 3f d2 	orh	r9,0x3fd2
80007c58:	e0 a0 12 82 	rcall	8000a15c <__avr32_f64_mul>
80007c5c:	e0 68 c8 b3 	mov	r8,51379
80007c60:	ea 18 8b 60 	orh	r8,0x8b60
80007c64:	e0 69 8a 28 	mov	r9,35368
80007c68:	ea 19 3f c6 	orh	r9,0x3fc6
80007c6c:	e0 a0 14 32 	rcall	8000a4d0 <__avr32_f64_add>
80007c70:	0a 9c       	mov	r12,r5
80007c72:	14 90       	mov	r0,r10
80007c74:	16 91       	mov	r1,r11
80007c76:	e0 a0 14 ce 	rcall	8000a612 <__avr32_s32_to_f64>
80007c7a:	e0 68 79 fb 	mov	r8,31227
80007c7e:	ea 18 50 9f 	orh	r8,0x509f
80007c82:	e0 69 44 13 	mov	r9,17427
80007c86:	ea 19 3f d3 	orh	r9,0x3fd3
80007c8a:	e0 a0 12 69 	rcall	8000a15c <__avr32_f64_mul>
80007c8e:	14 98       	mov	r8,r10
80007c90:	16 99       	mov	r9,r11
80007c92:	00 9a       	mov	r10,r0
80007c94:	02 9b       	mov	r11,r1
80007c96:	e0 a0 14 1d 	rcall	8000a4d0 <__avr32_f64_add>
80007c9a:	14 90       	mov	r0,r10
80007c9c:	16 91       	mov	r1,r11
80007c9e:	e0 a0 14 a3 	rcall	8000a5e4 <__avr32_f64_to_s32>
80007ca2:	30 08       	mov	r8,0
80007ca4:	18 96       	mov	r6,r12
80007ca6:	30 09       	mov	r9,0
80007ca8:	00 9a       	mov	r10,r0
80007caa:	02 9b       	mov	r11,r1
80007cac:	e0 a0 15 6a 	rcall	8000a780 <__avr32_f64_cmp_lt>
80007cb0:	c0 c0       	breq	80007cc8 <_dtoa_r+0x1f8>
80007cb2:	0c 9c       	mov	r12,r6
80007cb4:	e0 a0 14 af 	rcall	8000a612 <__avr32_s32_to_f64>
80007cb8:	14 98       	mov	r8,r10
80007cba:	16 99       	mov	r9,r11
80007cbc:	00 9a       	mov	r10,r0
80007cbe:	02 9b       	mov	r11,r1
80007cc0:	e0 a0 15 19 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
80007cc4:	f7 b6 00 01 	subeq	r6,1
80007cc8:	59 66       	cp.w	r6,22
80007cca:	e0 88 00 05 	brls	80007cd4 <_dtoa_r+0x204>
80007cce:	30 18       	mov	r8,1
80007cd0:	51 48       	stdsp	sp[0x50],r8
80007cd2:	c1 28       	rjmp	80007cf6 <_dtoa_r+0x226>
80007cd4:	4c 08       	lddpc	r8,80007dd4 <_dtoa_r+0x304>
80007cd6:	fa ea 00 3c 	ld.d	r10,sp[60]
80007cda:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80007cde:	e0 a0 15 51 	rcall	8000a780 <__avr32_f64_cmp_lt>
80007ce2:	f9 b4 00 00 	moveq	r4,0
80007ce6:	fb f4 0a 14 	st.weq	sp[0x50],r4
80007cea:	f7 b6 01 01 	subne	r6,1
80007cee:	f9 bc 01 00 	movne	r12,0
80007cf2:	fb fc 1a 14 	st.wne	sp[0x50],r12
80007cf6:	41 90       	lddsp	r0,sp[0x64]
80007cf8:	20 10       	sub	r0,1
80007cfa:	0a 10       	sub	r0,r5
80007cfc:	c0 46       	brmi	80007d04 <_dtoa_r+0x234>
80007cfe:	50 40       	stdsp	sp[0x10],r0
80007d00:	30 00       	mov	r0,0
80007d02:	c0 48       	rjmp	80007d0a <_dtoa_r+0x23a>
80007d04:	30 0b       	mov	r11,0
80007d06:	5c 30       	neg	r0
80007d08:	50 4b       	stdsp	sp[0x10],r11
80007d0a:	ec 02 11 00 	rsub	r2,r6,0
80007d0e:	58 06       	cp.w	r6,0
80007d10:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80007d14:	f5 d6 e4 0a 	addge	r10,r10,r6
80007d18:	fb fa 4a 04 	st.wge	sp[0x10],r10
80007d1c:	fb f6 4a 11 	st.wge	sp[0x44],r6
80007d20:	f9 b2 04 00 	movge	r2,0
80007d24:	e1 d6 e5 10 	sublt	r0,r0,r6
80007d28:	f9 b9 05 00 	movlt	r9,0
80007d2c:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80007d30:	40 c8       	lddsp	r8,sp[0x30]
80007d32:	58 98       	cp.w	r8,9
80007d34:	e0 8b 00 20 	brhi	80007d74 <_dtoa_r+0x2a4>
80007d38:	58 58       	cp.w	r8,5
80007d3a:	f9 b4 0a 01 	movle	r4,1
80007d3e:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80007d42:	f7 b5 09 04 	subgt	r5,4
80007d46:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80007d4a:	f9 b4 09 00 	movgt	r4,0
80007d4e:	40 cc       	lddsp	r12,sp[0x30]
80007d50:	58 3c       	cp.w	r12,3
80007d52:	c2 d0       	breq	80007dac <_dtoa_r+0x2dc>
80007d54:	e0 89 00 05 	brgt	80007d5e <_dtoa_r+0x28e>
80007d58:	58 2c       	cp.w	r12,2
80007d5a:	c1 01       	brne	80007d7a <_dtoa_r+0x2aa>
80007d5c:	c1 88       	rjmp	80007d8c <_dtoa_r+0x2bc>
80007d5e:	40 cb       	lddsp	r11,sp[0x30]
80007d60:	58 4b       	cp.w	r11,4
80007d62:	c0 60       	breq	80007d6e <_dtoa_r+0x29e>
80007d64:	58 5b       	cp.w	r11,5
80007d66:	c0 a1       	brne	80007d7a <_dtoa_r+0x2aa>
80007d68:	30 1a       	mov	r10,1
80007d6a:	50 da       	stdsp	sp[0x34],r10
80007d6c:	c2 28       	rjmp	80007db0 <_dtoa_r+0x2e0>
80007d6e:	30 19       	mov	r9,1
80007d70:	50 d9       	stdsp	sp[0x34],r9
80007d72:	c0 f8       	rjmp	80007d90 <_dtoa_r+0x2c0>
80007d74:	30 08       	mov	r8,0
80007d76:	30 14       	mov	r4,1
80007d78:	50 c8       	stdsp	sp[0x30],r8
80007d7a:	3f f5       	mov	r5,-1
80007d7c:	30 1c       	mov	r12,1
80007d7e:	30 0b       	mov	r11,0
80007d80:	50 95       	stdsp	sp[0x24],r5
80007d82:	50 dc       	stdsp	sp[0x34],r12
80007d84:	0a 91       	mov	r1,r5
80007d86:	31 28       	mov	r8,18
80007d88:	50 eb       	stdsp	sp[0x38],r11
80007d8a:	c2 08       	rjmp	80007dca <_dtoa_r+0x2fa>
80007d8c:	30 0a       	mov	r10,0
80007d8e:	50 da       	stdsp	sp[0x34],r10
80007d90:	40 e9       	lddsp	r9,sp[0x38]
80007d92:	58 09       	cp.w	r9,0
80007d94:	e0 89 00 07 	brgt	80007da2 <_dtoa_r+0x2d2>
80007d98:	30 18       	mov	r8,1
80007d9a:	50 98       	stdsp	sp[0x24],r8
80007d9c:	10 91       	mov	r1,r8
80007d9e:	50 e8       	stdsp	sp[0x38],r8
80007da0:	c1 58       	rjmp	80007dca <_dtoa_r+0x2fa>
80007da2:	40 e5       	lddsp	r5,sp[0x38]
80007da4:	50 95       	stdsp	sp[0x24],r5
80007da6:	0a 91       	mov	r1,r5
80007da8:	0a 98       	mov	r8,r5
80007daa:	c1 08       	rjmp	80007dca <_dtoa_r+0x2fa>
80007dac:	30 0c       	mov	r12,0
80007dae:	50 dc       	stdsp	sp[0x34],r12
80007db0:	40 eb       	lddsp	r11,sp[0x38]
80007db2:	ec 0b 00 0b 	add	r11,r6,r11
80007db6:	50 9b       	stdsp	sp[0x24],r11
80007db8:	16 98       	mov	r8,r11
80007dba:	2f f8       	sub	r8,-1
80007dbc:	58 08       	cp.w	r8,0
80007dbe:	e0 89 00 05 	brgt	80007dc8 <_dtoa_r+0x2f8>
80007dc2:	10 91       	mov	r1,r8
80007dc4:	30 18       	mov	r8,1
80007dc6:	c0 28       	rjmp	80007dca <_dtoa_r+0x2fa>
80007dc8:	10 91       	mov	r1,r8
80007dca:	30 09       	mov	r9,0
80007dcc:	6e 9a       	ld.w	r10,r7[0x24]
80007dce:	95 19       	st.w	r10[0x4],r9
80007dd0:	30 49       	mov	r9,4
80007dd2:	c0 78       	rjmp	80007de0 <_dtoa_r+0x310>
80007dd4:	80 00       	ld.sh	r0,r0[0x0]
80007dd6:	bf e0       	*unknown*
80007dd8:	6a 1a       	ld.w	r10,r5[0x4]
80007dda:	a1 79       	lsl	r9,0x1
80007ddc:	2f fa       	sub	r10,-1
80007dde:	8b 1a       	st.w	r5[0x4],r10
80007de0:	6e 95       	ld.w	r5,r7[0x24]
80007de2:	f2 ca ff ec 	sub	r10,r9,-20
80007de6:	10 3a       	cp.w	r10,r8
80007de8:	fe 98 ff f8 	brls	80007dd8 <_dtoa_r+0x308>
80007dec:	6a 1b       	ld.w	r11,r5[0x4]
80007dee:	0e 9c       	mov	r12,r7
80007df0:	e0 a0 0c 18 	rcall	80009620 <_Balloc>
80007df4:	58 e1       	cp.w	r1,14
80007df6:	5f 88       	srls	r8
80007df8:	8b 0c       	st.w	r5[0x0],r12
80007dfa:	f1 e4 00 04 	and	r4,r8,r4
80007dfe:	6e 98       	ld.w	r8,r7[0x24]
80007e00:	70 08       	ld.w	r8,r8[0x0]
80007e02:	50 88       	stdsp	sp[0x20],r8
80007e04:	e0 80 01 82 	breq	80008108 <_dtoa_r+0x638>
80007e08:	58 06       	cp.w	r6,0
80007e0a:	e0 8a 00 40 	brle	80007e8a <_dtoa_r+0x3ba>
80007e0e:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80007e12:	4c b8       	lddpc	r8,80007f3c <_dtoa_r+0x46c>
80007e14:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80007e18:	fa e5 00 18 	st.d	sp[24],r4
80007e1c:	ec 04 14 04 	asr	r4,r6,0x4
80007e20:	ed b4 00 04 	bld	r4,0x4
80007e24:	c0 30       	breq	80007e2a <_dtoa_r+0x35a>
80007e26:	30 25       	mov	r5,2
80007e28:	c0 f8       	rjmp	80007e46 <_dtoa_r+0x376>
80007e2a:	4c 68       	lddpc	r8,80007f40 <_dtoa_r+0x470>
80007e2c:	f0 e8 00 20 	ld.d	r8,r8[32]
80007e30:	fa ea 00 3c 	ld.d	r10,sp[60]
80007e34:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80007e38:	e0 a0 14 d8 	rcall	8000a7e8 <__avr32_f64_div>
80007e3c:	30 35       	mov	r5,3
80007e3e:	14 98       	mov	r8,r10
80007e40:	16 99       	mov	r9,r11
80007e42:	fa e9 00 08 	st.d	sp[8],r8
80007e46:	4b fc       	lddpc	r12,80007f40 <_dtoa_r+0x470>
80007e48:	50 a3       	stdsp	sp[0x28],r3
80007e4a:	0c 93       	mov	r3,r6
80007e4c:	18 96       	mov	r6,r12
80007e4e:	c0 f8       	rjmp	80007e6c <_dtoa_r+0x39c>
80007e50:	fa ea 00 18 	ld.d	r10,sp[24]
80007e54:	ed b4 00 00 	bld	r4,0x0
80007e58:	c0 81       	brne	80007e68 <_dtoa_r+0x398>
80007e5a:	ec e8 00 00 	ld.d	r8,r6[0]
80007e5e:	2f f5       	sub	r5,-1
80007e60:	e0 a0 11 7e 	rcall	8000a15c <__avr32_f64_mul>
80007e64:	fa eb 00 18 	st.d	sp[24],r10
80007e68:	a1 54       	asr	r4,0x1
80007e6a:	2f 86       	sub	r6,-8
80007e6c:	58 04       	cp.w	r4,0
80007e6e:	cf 11       	brne	80007e50 <_dtoa_r+0x380>
80007e70:	fa e8 00 18 	ld.d	r8,sp[24]
80007e74:	fa ea 00 08 	ld.d	r10,sp[8]
80007e78:	06 96       	mov	r6,r3
80007e7a:	e0 a0 14 b7 	rcall	8000a7e8 <__avr32_f64_div>
80007e7e:	40 a3       	lddsp	r3,sp[0x28]
80007e80:	14 98       	mov	r8,r10
80007e82:	16 99       	mov	r9,r11
80007e84:	fa e9 00 08 	st.d	sp[8],r8
80007e88:	c2 d8       	rjmp	80007ee2 <_dtoa_r+0x412>
80007e8a:	ec 08 11 00 	rsub	r8,r6,0
80007e8e:	c0 31       	brne	80007e94 <_dtoa_r+0x3c4>
80007e90:	30 25       	mov	r5,2
80007e92:	c2 88       	rjmp	80007ee2 <_dtoa_r+0x412>
80007e94:	4a bc       	lddpc	r12,80007f40 <_dtoa_r+0x470>
80007e96:	f0 04 14 04 	asr	r4,r8,0x4
80007e9a:	50 1c       	stdsp	sp[0x4],r12
80007e9c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80007ea0:	4a 79       	lddpc	r9,80007f3c <_dtoa_r+0x46c>
80007ea2:	fa ea 00 3c 	ld.d	r10,sp[60]
80007ea6:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007eaa:	e0 a0 11 59 	rcall	8000a15c <__avr32_f64_mul>
80007eae:	40 1c       	lddsp	r12,sp[0x4]
80007eb0:	50 63       	stdsp	sp[0x18],r3
80007eb2:	30 25       	mov	r5,2
80007eb4:	0c 93       	mov	r3,r6
80007eb6:	fa eb 00 08 	st.d	sp[8],r10
80007eba:	18 96       	mov	r6,r12
80007ebc:	c0 f8       	rjmp	80007eda <_dtoa_r+0x40a>
80007ebe:	fa ea 00 08 	ld.d	r10,sp[8]
80007ec2:	ed b4 00 00 	bld	r4,0x0
80007ec6:	c0 81       	brne	80007ed6 <_dtoa_r+0x406>
80007ec8:	ec e8 00 00 	ld.d	r8,r6[0]
80007ecc:	2f f5       	sub	r5,-1
80007ece:	e0 a0 11 47 	rcall	8000a15c <__avr32_f64_mul>
80007ed2:	fa eb 00 08 	st.d	sp[8],r10
80007ed6:	a1 54       	asr	r4,0x1
80007ed8:	2f 86       	sub	r6,-8
80007eda:	58 04       	cp.w	r4,0
80007edc:	cf 11       	brne	80007ebe <_dtoa_r+0x3ee>
80007ede:	06 96       	mov	r6,r3
80007ee0:	40 63       	lddsp	r3,sp[0x18]
80007ee2:	41 4a       	lddsp	r10,sp[0x50]
80007ee4:	58 0a       	cp.w	r10,0
80007ee6:	c2 f0       	breq	80007f44 <_dtoa_r+0x474>
80007ee8:	fa e8 00 08 	ld.d	r8,sp[8]
80007eec:	58 01       	cp.w	r1,0
80007eee:	5f 94       	srgt	r4
80007ef0:	fa e9 00 18 	st.d	sp[24],r8
80007ef4:	30 08       	mov	r8,0
80007ef6:	fc 19 3f f0 	movh	r9,0x3ff0
80007efa:	fa ea 00 18 	ld.d	r10,sp[24]
80007efe:	e0 a0 14 41 	rcall	8000a780 <__avr32_f64_cmp_lt>
80007f02:	f9 bc 00 00 	moveq	r12,0
80007f06:	f9 bc 01 01 	movne	r12,1
80007f0a:	e9 ec 00 0c 	and	r12,r4,r12
80007f0e:	c1 b0       	breq	80007f44 <_dtoa_r+0x474>
80007f10:	40 98       	lddsp	r8,sp[0x24]
80007f12:	58 08       	cp.w	r8,0
80007f14:	e0 8a 00 f6 	brle	80008100 <_dtoa_r+0x630>
80007f18:	30 08       	mov	r8,0
80007f1a:	fc 19 40 24 	movh	r9,0x4024
80007f1e:	ec c4 00 01 	sub	r4,r6,1
80007f22:	fa ea 00 18 	ld.d	r10,sp[24]
80007f26:	2f f5       	sub	r5,-1
80007f28:	50 64       	stdsp	sp[0x18],r4
80007f2a:	e0 a0 11 19 	rcall	8000a15c <__avr32_f64_mul>
80007f2e:	40 94       	lddsp	r4,sp[0x24]
80007f30:	14 98       	mov	r8,r10
80007f32:	16 99       	mov	r9,r11
80007f34:	fa e9 00 08 	st.d	sp[8],r8
80007f38:	c0 88       	rjmp	80007f48 <_dtoa_r+0x478>
80007f3a:	d7 03       	nop
80007f3c:	80 00       	ld.sh	r0,r0[0x0]
80007f3e:	bf e0       	*unknown*
80007f40:	80 00       	ld.sh	r0,r0[0x0]
80007f42:	c0 a8       	rjmp	80007f56 <_dtoa_r+0x486>
80007f44:	50 66       	stdsp	sp[0x18],r6
80007f46:	02 94       	mov	r4,r1
80007f48:	0a 9c       	mov	r12,r5
80007f4a:	e0 a0 13 64 	rcall	8000a612 <__avr32_s32_to_f64>
80007f4e:	fa e8 00 08 	ld.d	r8,sp[8]
80007f52:	e0 a0 11 05 	rcall	8000a15c <__avr32_f64_mul>
80007f56:	30 08       	mov	r8,0
80007f58:	fc 19 40 1c 	movh	r9,0x401c
80007f5c:	e0 a0 12 ba 	rcall	8000a4d0 <__avr32_f64_add>
80007f60:	14 98       	mov	r8,r10
80007f62:	16 99       	mov	r9,r11
80007f64:	fa e9 00 28 	st.d	sp[40],r8
80007f68:	fc 18 fc c0 	movh	r8,0xfcc0
80007f6c:	40 a5       	lddsp	r5,sp[0x28]
80007f6e:	10 05       	add	r5,r8
80007f70:	50 a5       	stdsp	sp[0x28],r5
80007f72:	58 04       	cp.w	r4,0
80007f74:	c2 11       	brne	80007fb6 <_dtoa_r+0x4e6>
80007f76:	fa ea 00 08 	ld.d	r10,sp[8]
80007f7a:	30 08       	mov	r8,0
80007f7c:	fc 19 40 14 	movh	r9,0x4014
80007f80:	e0 a0 11 da 	rcall	8000a334 <__avr32_f64_sub>
80007f84:	40 bc       	lddsp	r12,sp[0x2c]
80007f86:	fa eb 00 08 	st.d	sp[8],r10
80007f8a:	14 98       	mov	r8,r10
80007f8c:	16 99       	mov	r9,r11
80007f8e:	18 9a       	mov	r10,r12
80007f90:	0a 9b       	mov	r11,r5
80007f92:	e0 a0 13 f7 	rcall	8000a780 <__avr32_f64_cmp_lt>
80007f96:	e0 81 02 54 	brne	8000843e <_dtoa_r+0x96e>
80007f9a:	0a 98       	mov	r8,r5
80007f9c:	40 b9       	lddsp	r9,sp[0x2c]
80007f9e:	ee 18 80 00 	eorh	r8,0x8000
80007fa2:	fa ea 00 08 	ld.d	r10,sp[8]
80007fa6:	10 95       	mov	r5,r8
80007fa8:	12 98       	mov	r8,r9
80007faa:	0a 99       	mov	r9,r5
80007fac:	e0 a0 13 ea 	rcall	8000a780 <__avr32_f64_cmp_lt>
80007fb0:	e0 81 02 3e 	brne	8000842c <_dtoa_r+0x95c>
80007fb4:	ca 68       	rjmp	80008100 <_dtoa_r+0x630>
80007fb6:	4c e9       	lddpc	r9,800080ec <_dtoa_r+0x61c>
80007fb8:	e8 c8 00 01 	sub	r8,r4,1
80007fbc:	40 d5       	lddsp	r5,sp[0x34]
80007fbe:	58 05       	cp.w	r5,0
80007fc0:	c4 f0       	breq	8000805e <_dtoa_r+0x58e>
80007fc2:	30 0c       	mov	r12,0
80007fc4:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80007fc8:	51 3c       	stdsp	sp[0x4c],r12
80007fca:	30 0a       	mov	r10,0
80007fcc:	fc 1b 3f e0 	movh	r11,0x3fe0
80007fd0:	e0 a0 14 0c 	rcall	8000a7e8 <__avr32_f64_div>
80007fd4:	fa e8 00 28 	ld.d	r8,sp[40]
80007fd8:	40 85       	lddsp	r5,sp[0x20]
80007fda:	e0 a0 11 ad 	rcall	8000a334 <__avr32_f64_sub>
80007fde:	fa eb 00 28 	st.d	sp[40],r10
80007fe2:	fa ea 00 08 	ld.d	r10,sp[8]
80007fe6:	e0 a0 12 ff 	rcall	8000a5e4 <__avr32_f64_to_s32>
80007fea:	51 6c       	stdsp	sp[0x58],r12
80007fec:	e0 a0 13 13 	rcall	8000a612 <__avr32_s32_to_f64>
80007ff0:	14 98       	mov	r8,r10
80007ff2:	16 99       	mov	r9,r11
80007ff4:	fa ea 00 08 	ld.d	r10,sp[8]
80007ff8:	e0 a0 11 9e 	rcall	8000a334 <__avr32_f64_sub>
80007ffc:	fa eb 00 08 	st.d	sp[8],r10
80008000:	41 68       	lddsp	r8,sp[0x58]
80008002:	2d 08       	sub	r8,-48
80008004:	0a c8       	st.b	r5++,r8
80008006:	41 39       	lddsp	r9,sp[0x4c]
80008008:	2f f9       	sub	r9,-1
8000800a:	51 39       	stdsp	sp[0x4c],r9
8000800c:	fa e8 00 28 	ld.d	r8,sp[40]
80008010:	e0 a0 13 b8 	rcall	8000a780 <__avr32_f64_cmp_lt>
80008014:	e0 81 03 3a 	brne	80008688 <_dtoa_r+0xbb8>
80008018:	fa e8 00 08 	ld.d	r8,sp[8]
8000801c:	30 0a       	mov	r10,0
8000801e:	fc 1b 3f f0 	movh	r11,0x3ff0
80008022:	e0 a0 11 89 	rcall	8000a334 <__avr32_f64_sub>
80008026:	fa e8 00 28 	ld.d	r8,sp[40]
8000802a:	e0 a0 13 ab 	rcall	8000a780 <__avr32_f64_cmp_lt>
8000802e:	fa ea 00 28 	ld.d	r10,sp[40]
80008032:	30 08       	mov	r8,0
80008034:	fc 19 40 24 	movh	r9,0x4024
80008038:	e0 81 00 da 	brne	800081ec <_dtoa_r+0x71c>
8000803c:	41 3c       	lddsp	r12,sp[0x4c]
8000803e:	08 3c       	cp.w	r12,r4
80008040:	c6 04       	brge	80008100 <_dtoa_r+0x630>
80008042:	e0 a0 10 8d 	rcall	8000a15c <__avr32_f64_mul>
80008046:	30 08       	mov	r8,0
80008048:	fa eb 00 28 	st.d	sp[40],r10
8000804c:	fc 19 40 24 	movh	r9,0x4024
80008050:	fa ea 00 08 	ld.d	r10,sp[8]
80008054:	e0 a0 10 84 	rcall	8000a15c <__avr32_f64_mul>
80008058:	fa eb 00 08 	st.d	sp[8],r10
8000805c:	cc 3b       	rjmp	80007fe2 <_dtoa_r+0x512>
8000805e:	40 85       	lddsp	r5,sp[0x20]
80008060:	08 05       	add	r5,r4
80008062:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80008066:	51 35       	stdsp	sp[0x4c],r5
80008068:	fa e8 00 28 	ld.d	r8,sp[40]
8000806c:	40 85       	lddsp	r5,sp[0x20]
8000806e:	e0 a0 10 77 	rcall	8000a15c <__avr32_f64_mul>
80008072:	fa eb 00 28 	st.d	sp[40],r10
80008076:	fa ea 00 08 	ld.d	r10,sp[8]
8000807a:	e0 a0 12 b5 	rcall	8000a5e4 <__avr32_f64_to_s32>
8000807e:	51 6c       	stdsp	sp[0x58],r12
80008080:	e0 a0 12 c9 	rcall	8000a612 <__avr32_s32_to_f64>
80008084:	14 98       	mov	r8,r10
80008086:	16 99       	mov	r9,r11
80008088:	fa ea 00 08 	ld.d	r10,sp[8]
8000808c:	e0 a0 11 54 	rcall	8000a334 <__avr32_f64_sub>
80008090:	fa eb 00 08 	st.d	sp[8],r10
80008094:	41 68       	lddsp	r8,sp[0x58]
80008096:	2d 08       	sub	r8,-48
80008098:	0a c8       	st.b	r5++,r8
8000809a:	41 3c       	lddsp	r12,sp[0x4c]
8000809c:	18 35       	cp.w	r5,r12
8000809e:	c2 91       	brne	800080f0 <_dtoa_r+0x620>
800080a0:	30 08       	mov	r8,0
800080a2:	fc 19 3f e0 	movh	r9,0x3fe0
800080a6:	fa ea 00 28 	ld.d	r10,sp[40]
800080aa:	e0 a0 12 13 	rcall	8000a4d0 <__avr32_f64_add>
800080ae:	40 85       	lddsp	r5,sp[0x20]
800080b0:	fa e8 00 08 	ld.d	r8,sp[8]
800080b4:	08 05       	add	r5,r4
800080b6:	e0 a0 13 65 	rcall	8000a780 <__avr32_f64_cmp_lt>
800080ba:	e0 81 00 99 	brne	800081ec <_dtoa_r+0x71c>
800080be:	fa e8 00 28 	ld.d	r8,sp[40]
800080c2:	30 0a       	mov	r10,0
800080c4:	fc 1b 3f e0 	movh	r11,0x3fe0
800080c8:	e0 a0 11 36 	rcall	8000a334 <__avr32_f64_sub>
800080cc:	14 98       	mov	r8,r10
800080ce:	16 99       	mov	r9,r11
800080d0:	fa ea 00 08 	ld.d	r10,sp[8]
800080d4:	e0 a0 13 56 	rcall	8000a780 <__avr32_f64_cmp_lt>
800080d8:	c1 40       	breq	80008100 <_dtoa_r+0x630>
800080da:	33 09       	mov	r9,48
800080dc:	0a 98       	mov	r8,r5
800080de:	11 7a       	ld.ub	r10,--r8
800080e0:	f2 0a 18 00 	cp.b	r10,r9
800080e4:	e0 81 02 d2 	brne	80008688 <_dtoa_r+0xbb8>
800080e8:	10 95       	mov	r5,r8
800080ea:	cf 9b       	rjmp	800080dc <_dtoa_r+0x60c>
800080ec:	80 00       	ld.sh	r0,r0[0x0]
800080ee:	bf e0       	*unknown*
800080f0:	30 08       	mov	r8,0
800080f2:	fc 19 40 24 	movh	r9,0x4024
800080f6:	e0 a0 10 33 	rcall	8000a15c <__avr32_f64_mul>
800080fa:	fa eb 00 08 	st.d	sp[8],r10
800080fe:	cb cb       	rjmp	80008076 <_dtoa_r+0x5a6>
80008100:	fa ea 00 3c 	ld.d	r10,sp[60]
80008104:	fa eb 00 08 	st.d	sp[8],r10
80008108:	58 e6       	cp.w	r6,14
8000810a:	5f ab       	srle	r11
8000810c:	41 8a       	lddsp	r10,sp[0x60]
8000810e:	30 08       	mov	r8,0
80008110:	f4 09 11 ff 	rsub	r9,r10,-1
80008114:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008118:	f0 09 18 00 	cp.b	r9,r8
8000811c:	e0 80 00 81 	breq	8000821e <_dtoa_r+0x74e>
80008120:	40 ea       	lddsp	r10,sp[0x38]
80008122:	58 01       	cp.w	r1,0
80008124:	5f a9       	srle	r9
80008126:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000812a:	4c 9a       	lddpc	r10,8000824c <_dtoa_r+0x77c>
8000812c:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80008130:	fa e5 00 10 	st.d	sp[16],r4
80008134:	f0 09 18 00 	cp.b	r9,r8
80008138:	c1 40       	breq	80008160 <_dtoa_r+0x690>
8000813a:	58 01       	cp.w	r1,0
8000813c:	e0 81 01 78 	brne	8000842c <_dtoa_r+0x95c>
80008140:	30 08       	mov	r8,0
80008142:	fc 19 40 14 	movh	r9,0x4014
80008146:	08 9a       	mov	r10,r4
80008148:	0a 9b       	mov	r11,r5
8000814a:	e0 a0 10 09 	rcall	8000a15c <__avr32_f64_mul>
8000814e:	fa e8 00 08 	ld.d	r8,sp[8]
80008152:	e0 a0 12 e3 	rcall	8000a718 <__avr32_f64_cmp_ge>
80008156:	e0 81 01 6b 	brne	8000842c <_dtoa_r+0x95c>
8000815a:	02 92       	mov	r2,r1
8000815c:	e0 8f 01 73 	bral	80008442 <_dtoa_r+0x972>
80008160:	40 85       	lddsp	r5,sp[0x20]
80008162:	30 14       	mov	r4,1
80008164:	fa e8 00 10 	ld.d	r8,sp[16]
80008168:	fa ea 00 08 	ld.d	r10,sp[8]
8000816c:	e0 a0 13 3e 	rcall	8000a7e8 <__avr32_f64_div>
80008170:	e0 a0 12 3a 	rcall	8000a5e4 <__avr32_f64_to_s32>
80008174:	18 92       	mov	r2,r12
80008176:	e0 a0 12 4e 	rcall	8000a612 <__avr32_s32_to_f64>
8000817a:	fa e8 00 10 	ld.d	r8,sp[16]
8000817e:	e0 a0 0f ef 	rcall	8000a15c <__avr32_f64_mul>
80008182:	14 98       	mov	r8,r10
80008184:	16 99       	mov	r9,r11
80008186:	fa ea 00 08 	ld.d	r10,sp[8]
8000818a:	e0 a0 10 d5 	rcall	8000a334 <__avr32_f64_sub>
8000818e:	fa eb 00 08 	st.d	sp[8],r10
80008192:	e4 c8 ff d0 	sub	r8,r2,-48
80008196:	0a c8       	st.b	r5++,r8
80008198:	fc 19 40 24 	movh	r9,0x4024
8000819c:	30 08       	mov	r8,0
8000819e:	02 34       	cp.w	r4,r1
800081a0:	c3 31       	brne	80008206 <_dtoa_r+0x736>
800081a2:	fa e8 00 08 	ld.d	r8,sp[8]
800081a6:	e0 a0 11 95 	rcall	8000a4d0 <__avr32_f64_add>
800081aa:	16 91       	mov	r1,r11
800081ac:	14 90       	mov	r0,r10
800081ae:	14 98       	mov	r8,r10
800081b0:	02 99       	mov	r9,r1
800081b2:	fa ea 00 10 	ld.d	r10,sp[16]
800081b6:	e0 a0 12 e5 	rcall	8000a780 <__avr32_f64_cmp_lt>
800081ba:	c1 a1       	brne	800081ee <_dtoa_r+0x71e>
800081bc:	fa e8 00 10 	ld.d	r8,sp[16]
800081c0:	00 9a       	mov	r10,r0
800081c2:	02 9b       	mov	r11,r1
800081c4:	e0 a0 12 97 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
800081c8:	e0 80 02 5f 	breq	80008686 <_dtoa_r+0xbb6>
800081cc:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
800081d0:	c0 f1       	brne	800081ee <_dtoa_r+0x71e>
800081d2:	e0 8f 02 5a 	bral	80008686 <_dtoa_r+0xbb6>
800081d6:	40 8a       	lddsp	r10,sp[0x20]
800081d8:	14 38       	cp.w	r8,r10
800081da:	c0 30       	breq	800081e0 <_dtoa_r+0x710>
800081dc:	10 95       	mov	r5,r8
800081de:	c0 98       	rjmp	800081f0 <_dtoa_r+0x720>
800081e0:	33 08       	mov	r8,48
800081e2:	40 89       	lddsp	r9,sp[0x20]
800081e4:	2f f6       	sub	r6,-1
800081e6:	b2 88       	st.b	r9[0x0],r8
800081e8:	40 88       	lddsp	r8,sp[0x20]
800081ea:	c0 88       	rjmp	800081fa <_dtoa_r+0x72a>
800081ec:	40 66       	lddsp	r6,sp[0x18]
800081ee:	33 99       	mov	r9,57
800081f0:	0a 98       	mov	r8,r5
800081f2:	11 7a       	ld.ub	r10,--r8
800081f4:	f2 0a 18 00 	cp.b	r10,r9
800081f8:	ce f0       	breq	800081d6 <_dtoa_r+0x706>
800081fa:	50 66       	stdsp	sp[0x18],r6
800081fc:	11 89       	ld.ub	r9,r8[0x0]
800081fe:	2f f9       	sub	r9,-1
80008200:	b0 89       	st.b	r8[0x0],r9
80008202:	e0 8f 02 43 	bral	80008688 <_dtoa_r+0xbb8>
80008206:	e0 a0 0f ab 	rcall	8000a15c <__avr32_f64_mul>
8000820a:	2f f4       	sub	r4,-1
8000820c:	fa eb 00 08 	st.d	sp[8],r10
80008210:	30 08       	mov	r8,0
80008212:	30 09       	mov	r9,0
80008214:	e0 a0 12 6f 	rcall	8000a6f2 <__avr32_f64_cmp_eq>
80008218:	ca 60       	breq	80008164 <_dtoa_r+0x694>
8000821a:	e0 8f 02 36 	bral	80008686 <_dtoa_r+0xbb6>
8000821e:	40 d8       	lddsp	r8,sp[0x34]
80008220:	58 08       	cp.w	r8,0
80008222:	c0 51       	brne	8000822c <_dtoa_r+0x75c>
80008224:	04 98       	mov	r8,r2
80008226:	00 95       	mov	r5,r0
80008228:	40 d4       	lddsp	r4,sp[0x34]
8000822a:	c3 88       	rjmp	8000829a <_dtoa_r+0x7ca>
8000822c:	40 c5       	lddsp	r5,sp[0x30]
8000822e:	58 15       	cp.w	r5,1
80008230:	e0 89 00 10 	brgt	80008250 <_dtoa_r+0x780>
80008234:	41 74       	lddsp	r4,sp[0x5c]
80008236:	58 04       	cp.w	r4,0
80008238:	c0 40       	breq	80008240 <_dtoa_r+0x770>
8000823a:	f4 c9 fb cd 	sub	r9,r10,-1075
8000823e:	c0 48       	rjmp	80008246 <_dtoa_r+0x776>
80008240:	41 99       	lddsp	r9,sp[0x64]
80008242:	f2 09 11 36 	rsub	r9,r9,54
80008246:	04 98       	mov	r8,r2
80008248:	00 95       	mov	r5,r0
8000824a:	c1 d8       	rjmp	80008284 <_dtoa_r+0x7b4>
8000824c:	80 00       	ld.sh	r0,r0[0x0]
8000824e:	bf e0       	*unknown*
80008250:	e2 c8 00 01 	sub	r8,r1,1
80008254:	58 01       	cp.w	r1,0
80008256:	e0 05 17 40 	movge	r5,r0
8000825a:	e2 09 17 40 	movge	r9,r1
8000825e:	e1 d1 e5 15 	sublt	r5,r0,r1
80008262:	f9 b9 05 00 	movlt	r9,0
80008266:	10 32       	cp.w	r2,r8
80008268:	e5 d8 e4 18 	subge	r8,r2,r8
8000826c:	f1 d2 e5 18 	sublt	r8,r8,r2
80008270:	e5 d8 e5 02 	addlt	r2,r2,r8
80008274:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80008278:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000827c:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80008280:	f9 b8 05 00 	movlt	r8,0
80008284:	40 4b       	lddsp	r11,sp[0x10]
80008286:	12 0b       	add	r11,r9
80008288:	50 08       	stdsp	sp[0x0],r8
8000828a:	50 4b       	stdsp	sp[0x10],r11
8000828c:	12 00       	add	r0,r9
8000828e:	30 1b       	mov	r11,1
80008290:	0e 9c       	mov	r12,r7
80008292:	e0 a0 0b 7b 	rcall	80009988 <__i2b>
80008296:	40 08       	lddsp	r8,sp[0x0]
80008298:	18 94       	mov	r4,r12
8000829a:	40 4a       	lddsp	r10,sp[0x10]
8000829c:	58 05       	cp.w	r5,0
8000829e:	5f 99       	srgt	r9
800082a0:	58 0a       	cp.w	r10,0
800082a2:	5f 9a       	srgt	r10
800082a4:	f5 e9 00 09 	and	r9,r10,r9
800082a8:	c0 80       	breq	800082b8 <_dtoa_r+0x7e8>
800082aa:	40 4c       	lddsp	r12,sp[0x10]
800082ac:	f8 05 0d 49 	min	r9,r12,r5
800082b0:	12 1c       	sub	r12,r9
800082b2:	12 10       	sub	r0,r9
800082b4:	50 4c       	stdsp	sp[0x10],r12
800082b6:	12 15       	sub	r5,r9
800082b8:	58 02       	cp.w	r2,0
800082ba:	e0 8a 00 27 	brle	80008308 <_dtoa_r+0x838>
800082be:	40 db       	lddsp	r11,sp[0x34]
800082c0:	58 0b       	cp.w	r11,0
800082c2:	c1 d0       	breq	800082fc <_dtoa_r+0x82c>
800082c4:	58 08       	cp.w	r8,0
800082c6:	e0 8a 00 17 	brle	800082f4 <_dtoa_r+0x824>
800082ca:	10 9a       	mov	r10,r8
800082cc:	50 08       	stdsp	sp[0x0],r8
800082ce:	08 9b       	mov	r11,r4
800082d0:	0e 9c       	mov	r12,r7
800082d2:	e0 a0 0b a1 	rcall	80009a14 <__pow5mult>
800082d6:	06 9a       	mov	r10,r3
800082d8:	18 9b       	mov	r11,r12
800082da:	18 94       	mov	r4,r12
800082dc:	0e 9c       	mov	r12,r7
800082de:	e0 a0 0a d5 	rcall	80009888 <__multiply>
800082e2:	18 99       	mov	r9,r12
800082e4:	06 9b       	mov	r11,r3
800082e6:	50 19       	stdsp	sp[0x4],r9
800082e8:	0e 9c       	mov	r12,r7
800082ea:	e0 a0 09 81 	rcall	800095ec <_Bfree>
800082ee:	40 19       	lddsp	r9,sp[0x4]
800082f0:	40 08       	lddsp	r8,sp[0x0]
800082f2:	12 93       	mov	r3,r9
800082f4:	e4 08 01 0a 	sub	r10,r2,r8
800082f8:	c0 80       	breq	80008308 <_dtoa_r+0x838>
800082fa:	c0 28       	rjmp	800082fe <_dtoa_r+0x82e>
800082fc:	04 9a       	mov	r10,r2
800082fe:	06 9b       	mov	r11,r3
80008300:	0e 9c       	mov	r12,r7
80008302:	e0 a0 0b 89 	rcall	80009a14 <__pow5mult>
80008306:	18 93       	mov	r3,r12
80008308:	30 1b       	mov	r11,1
8000830a:	0e 9c       	mov	r12,r7
8000830c:	e0 a0 0b 3e 	rcall	80009988 <__i2b>
80008310:	41 1a       	lddsp	r10,sp[0x44]
80008312:	18 92       	mov	r2,r12
80008314:	58 0a       	cp.w	r10,0
80008316:	e0 8a 00 07 	brle	80008324 <_dtoa_r+0x854>
8000831a:	18 9b       	mov	r11,r12
8000831c:	0e 9c       	mov	r12,r7
8000831e:	e0 a0 0b 7b 	rcall	80009a14 <__pow5mult>
80008322:	18 92       	mov	r2,r12
80008324:	40 c9       	lddsp	r9,sp[0x30]
80008326:	58 19       	cp.w	r9,1
80008328:	e0 89 00 14 	brgt	80008350 <_dtoa_r+0x880>
8000832c:	40 38       	lddsp	r8,sp[0xc]
8000832e:	58 08       	cp.w	r8,0
80008330:	c1 01       	brne	80008350 <_dtoa_r+0x880>
80008332:	40 29       	lddsp	r9,sp[0x8]
80008334:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80008338:	c0 c1       	brne	80008350 <_dtoa_r+0x880>
8000833a:	12 98       	mov	r8,r9
8000833c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008340:	c0 80       	breq	80008350 <_dtoa_r+0x880>
80008342:	40 4c       	lddsp	r12,sp[0x10]
80008344:	30 1b       	mov	r11,1
80008346:	2f fc       	sub	r12,-1
80008348:	2f f0       	sub	r0,-1
8000834a:	50 4c       	stdsp	sp[0x10],r12
8000834c:	50 6b       	stdsp	sp[0x18],r11
8000834e:	c0 38       	rjmp	80008354 <_dtoa_r+0x884>
80008350:	30 0a       	mov	r10,0
80008352:	50 6a       	stdsp	sp[0x18],r10
80008354:	41 19       	lddsp	r9,sp[0x44]
80008356:	58 09       	cp.w	r9,0
80008358:	c0 31       	brne	8000835e <_dtoa_r+0x88e>
8000835a:	30 1c       	mov	r12,1
8000835c:	c0 98       	rjmp	8000836e <_dtoa_r+0x89e>
8000835e:	64 48       	ld.w	r8,r2[0x10]
80008360:	2f c8       	sub	r8,-4
80008362:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80008366:	e0 a0 08 b2 	rcall	800094ca <__hi0bits>
8000836a:	f8 0c 11 20 	rsub	r12,r12,32
8000836e:	40 4b       	lddsp	r11,sp[0x10]
80008370:	f8 0b 00 08 	add	r8,r12,r11
80008374:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008378:	c0 c0       	breq	80008390 <_dtoa_r+0x8c0>
8000837a:	f0 08 11 20 	rsub	r8,r8,32
8000837e:	58 48       	cp.w	r8,4
80008380:	e0 8a 00 06 	brle	8000838c <_dtoa_r+0x8bc>
80008384:	20 48       	sub	r8,4
80008386:	10 0b       	add	r11,r8
80008388:	50 4b       	stdsp	sp[0x10],r11
8000838a:	c0 78       	rjmp	80008398 <_dtoa_r+0x8c8>
8000838c:	58 48       	cp.w	r8,4
8000838e:	c0 70       	breq	8000839c <_dtoa_r+0x8cc>
80008390:	40 4a       	lddsp	r10,sp[0x10]
80008392:	2e 48       	sub	r8,-28
80008394:	10 0a       	add	r10,r8
80008396:	50 4a       	stdsp	sp[0x10],r10
80008398:	10 00       	add	r0,r8
8000839a:	10 05       	add	r5,r8
8000839c:	58 00       	cp.w	r0,0
8000839e:	e0 8a 00 08 	brle	800083ae <_dtoa_r+0x8de>
800083a2:	06 9b       	mov	r11,r3
800083a4:	00 9a       	mov	r10,r0
800083a6:	0e 9c       	mov	r12,r7
800083a8:	e0 a0 0a 2c 	rcall	80009800 <__lshift>
800083ac:	18 93       	mov	r3,r12
800083ae:	40 49       	lddsp	r9,sp[0x10]
800083b0:	58 09       	cp.w	r9,0
800083b2:	e0 8a 00 08 	brle	800083c2 <_dtoa_r+0x8f2>
800083b6:	04 9b       	mov	r11,r2
800083b8:	12 9a       	mov	r10,r9
800083ba:	0e 9c       	mov	r12,r7
800083bc:	e0 a0 0a 22 	rcall	80009800 <__lshift>
800083c0:	18 92       	mov	r2,r12
800083c2:	41 48       	lddsp	r8,sp[0x50]
800083c4:	58 08       	cp.w	r8,0
800083c6:	c1 b0       	breq	800083fc <_dtoa_r+0x92c>
800083c8:	04 9b       	mov	r11,r2
800083ca:	06 9c       	mov	r12,r3
800083cc:	e0 a0 08 f6 	rcall	800095b8 <__mcmp>
800083d0:	c1 64       	brge	800083fc <_dtoa_r+0x92c>
800083d2:	06 9b       	mov	r11,r3
800083d4:	30 09       	mov	r9,0
800083d6:	30 aa       	mov	r10,10
800083d8:	0e 9c       	mov	r12,r7
800083da:	e0 a0 0a df 	rcall	80009998 <__multadd>
800083de:	20 16       	sub	r6,1
800083e0:	18 93       	mov	r3,r12
800083e2:	40 dc       	lddsp	r12,sp[0x34]
800083e4:	58 0c       	cp.w	r12,0
800083e6:	c0 31       	brne	800083ec <_dtoa_r+0x91c>
800083e8:	40 91       	lddsp	r1,sp[0x24]
800083ea:	c0 98       	rjmp	800083fc <_dtoa_r+0x92c>
800083ec:	08 9b       	mov	r11,r4
800083ee:	40 91       	lddsp	r1,sp[0x24]
800083f0:	30 09       	mov	r9,0
800083f2:	30 aa       	mov	r10,10
800083f4:	0e 9c       	mov	r12,r7
800083f6:	e0 a0 0a d1 	rcall	80009998 <__multadd>
800083fa:	18 94       	mov	r4,r12
800083fc:	58 01       	cp.w	r1,0
800083fe:	5f a9       	srle	r9
80008400:	40 cb       	lddsp	r11,sp[0x30]
80008402:	58 2b       	cp.w	r11,2
80008404:	5f 98       	srgt	r8
80008406:	f3 e8 00 08 	and	r8,r9,r8
8000840a:	c2 50       	breq	80008454 <_dtoa_r+0x984>
8000840c:	58 01       	cp.w	r1,0
8000840e:	c1 11       	brne	80008430 <_dtoa_r+0x960>
80008410:	04 9b       	mov	r11,r2
80008412:	02 99       	mov	r9,r1
80008414:	30 5a       	mov	r10,5
80008416:	0e 9c       	mov	r12,r7
80008418:	e0 a0 0a c0 	rcall	80009998 <__multadd>
8000841c:	18 92       	mov	r2,r12
8000841e:	18 9b       	mov	r11,r12
80008420:	06 9c       	mov	r12,r3
80008422:	e0 a0 08 cb 	rcall	800095b8 <__mcmp>
80008426:	e0 89 00 0f 	brgt	80008444 <_dtoa_r+0x974>
8000842a:	c0 38       	rjmp	80008430 <_dtoa_r+0x960>
8000842c:	30 02       	mov	r2,0
8000842e:	04 94       	mov	r4,r2
80008430:	40 ea       	lddsp	r10,sp[0x38]
80008432:	30 09       	mov	r9,0
80008434:	5c da       	com	r10
80008436:	40 85       	lddsp	r5,sp[0x20]
80008438:	50 6a       	stdsp	sp[0x18],r10
8000843a:	50 49       	stdsp	sp[0x10],r9
8000843c:	c0 f9       	rjmp	8000865a <_dtoa_r+0xb8a>
8000843e:	08 92       	mov	r2,r4
80008440:	40 66       	lddsp	r6,sp[0x18]
80008442:	04 94       	mov	r4,r2
80008444:	2f f6       	sub	r6,-1
80008446:	50 66       	stdsp	sp[0x18],r6
80008448:	33 18       	mov	r8,49
8000844a:	40 85       	lddsp	r5,sp[0x20]
8000844c:	0a c8       	st.b	r5++,r8
8000844e:	30 08       	mov	r8,0
80008450:	50 48       	stdsp	sp[0x10],r8
80008452:	c0 49       	rjmp	8000865a <_dtoa_r+0xb8a>
80008454:	40 dc       	lddsp	r12,sp[0x34]
80008456:	58 0c       	cp.w	r12,0
80008458:	e0 80 00 b5 	breq	800085c2 <_dtoa_r+0xaf2>
8000845c:	58 05       	cp.w	r5,0
8000845e:	e0 8a 00 08 	brle	8000846e <_dtoa_r+0x99e>
80008462:	08 9b       	mov	r11,r4
80008464:	0a 9a       	mov	r10,r5
80008466:	0e 9c       	mov	r12,r7
80008468:	e0 a0 09 cc 	rcall	80009800 <__lshift>
8000846c:	18 94       	mov	r4,r12
8000846e:	40 6b       	lddsp	r11,sp[0x18]
80008470:	58 0b       	cp.w	r11,0
80008472:	c0 31       	brne	80008478 <_dtoa_r+0x9a8>
80008474:	08 9c       	mov	r12,r4
80008476:	c1 38       	rjmp	8000849c <_dtoa_r+0x9cc>
80008478:	68 1b       	ld.w	r11,r4[0x4]
8000847a:	0e 9c       	mov	r12,r7
8000847c:	e0 a0 08 d2 	rcall	80009620 <_Balloc>
80008480:	68 4a       	ld.w	r10,r4[0x10]
80008482:	18 95       	mov	r5,r12
80008484:	e8 cb ff f4 	sub	r11,r4,-12
80008488:	2f ea       	sub	r10,-2
8000848a:	2f 4c       	sub	r12,-12
8000848c:	a3 6a       	lsl	r10,0x2
8000848e:	e0 a0 07 52 	rcall	80009332 <memcpy>
80008492:	0a 9b       	mov	r11,r5
80008494:	30 1a       	mov	r10,1
80008496:	0e 9c       	mov	r12,r7
80008498:	e0 a0 09 b4 	rcall	80009800 <__lshift>
8000849c:	50 44       	stdsp	sp[0x10],r4
8000849e:	40 3a       	lddsp	r10,sp[0xc]
800084a0:	30 19       	mov	r9,1
800084a2:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800084a6:	18 94       	mov	r4,r12
800084a8:	50 da       	stdsp	sp[0x34],r10
800084aa:	40 85       	lddsp	r5,sp[0x20]
800084ac:	50 99       	stdsp	sp[0x24],r9
800084ae:	50 26       	stdsp	sp[0x8],r6
800084b0:	50 e1       	stdsp	sp[0x38],r1
800084b2:	04 9b       	mov	r11,r2
800084b4:	06 9c       	mov	r12,r3
800084b6:	fe b0 fa 7d 	rcall	800079b0 <quorem>
800084ba:	40 4b       	lddsp	r11,sp[0x10]
800084bc:	f8 c0 ff d0 	sub	r0,r12,-48
800084c0:	06 9c       	mov	r12,r3
800084c2:	e0 a0 08 7b 	rcall	800095b8 <__mcmp>
800084c6:	08 9a       	mov	r10,r4
800084c8:	50 6c       	stdsp	sp[0x18],r12
800084ca:	04 9b       	mov	r11,r2
800084cc:	0e 9c       	mov	r12,r7
800084ce:	e0 a0 09 31 	rcall	80009730 <__mdiff>
800084d2:	18 91       	mov	r1,r12
800084d4:	78 38       	ld.w	r8,r12[0xc]
800084d6:	58 08       	cp.w	r8,0
800084d8:	c0 30       	breq	800084de <_dtoa_r+0xa0e>
800084da:	30 16       	mov	r6,1
800084dc:	c0 68       	rjmp	800084e8 <_dtoa_r+0xa18>
800084de:	18 9b       	mov	r11,r12
800084e0:	06 9c       	mov	r12,r3
800084e2:	e0 a0 08 6b 	rcall	800095b8 <__mcmp>
800084e6:	18 96       	mov	r6,r12
800084e8:	0e 9c       	mov	r12,r7
800084ea:	02 9b       	mov	r11,r1
800084ec:	e0 a0 08 80 	rcall	800095ec <_Bfree>
800084f0:	40 cc       	lddsp	r12,sp[0x30]
800084f2:	ed ec 10 08 	or	r8,r6,r12
800084f6:	c0 d1       	brne	80008510 <_dtoa_r+0xa40>
800084f8:	40 db       	lddsp	r11,sp[0x34]
800084fa:	58 0b       	cp.w	r11,0
800084fc:	c0 a1       	brne	80008510 <_dtoa_r+0xa40>
800084fe:	40 26       	lddsp	r6,sp[0x8]
80008500:	e0 40 00 39 	cp.w	r0,57
80008504:	c3 00       	breq	80008564 <_dtoa_r+0xa94>
80008506:	40 6a       	lddsp	r10,sp[0x18]
80008508:	58 0a       	cp.w	r10,0
8000850a:	e0 89 00 24 	brgt	80008552 <_dtoa_r+0xa82>
8000850e:	c2 f8       	rjmp	8000856c <_dtoa_r+0xa9c>
80008510:	40 69       	lddsp	r9,sp[0x18]
80008512:	58 09       	cp.w	r9,0
80008514:	c0 85       	brlt	80008524 <_dtoa_r+0xa54>
80008516:	12 98       	mov	r8,r9
80008518:	40 cc       	lddsp	r12,sp[0x30]
8000851a:	18 48       	or	r8,r12
8000851c:	c1 d1       	brne	80008556 <_dtoa_r+0xa86>
8000851e:	40 db       	lddsp	r11,sp[0x34]
80008520:	58 0b       	cp.w	r11,0
80008522:	c1 a1       	brne	80008556 <_dtoa_r+0xa86>
80008524:	0c 99       	mov	r9,r6
80008526:	40 26       	lddsp	r6,sp[0x8]
80008528:	58 09       	cp.w	r9,0
8000852a:	e0 8a 00 21 	brle	8000856c <_dtoa_r+0xa9c>
8000852e:	06 9b       	mov	r11,r3
80008530:	30 1a       	mov	r10,1
80008532:	0e 9c       	mov	r12,r7
80008534:	e0 a0 09 66 	rcall	80009800 <__lshift>
80008538:	04 9b       	mov	r11,r2
8000853a:	18 93       	mov	r3,r12
8000853c:	e0 a0 08 3e 	rcall	800095b8 <__mcmp>
80008540:	e0 89 00 06 	brgt	8000854c <_dtoa_r+0xa7c>
80008544:	c1 41       	brne	8000856c <_dtoa_r+0xa9c>
80008546:	ed b0 00 00 	bld	r0,0x0
8000854a:	c1 11       	brne	8000856c <_dtoa_r+0xa9c>
8000854c:	e0 40 00 39 	cp.w	r0,57
80008550:	c0 a0       	breq	80008564 <_dtoa_r+0xa94>
80008552:	2f f0       	sub	r0,-1
80008554:	c0 c8       	rjmp	8000856c <_dtoa_r+0xa9c>
80008556:	58 06       	cp.w	r6,0
80008558:	e0 8a 00 0c 	brle	80008570 <_dtoa_r+0xaa0>
8000855c:	40 26       	lddsp	r6,sp[0x8]
8000855e:	e0 40 00 39 	cp.w	r0,57
80008562:	c0 41       	brne	8000856a <_dtoa_r+0xa9a>
80008564:	33 98       	mov	r8,57
80008566:	0a c8       	st.b	r5++,r8
80008568:	c6 78       	rjmp	80008636 <_dtoa_r+0xb66>
8000856a:	2f f0       	sub	r0,-1
8000856c:	0a c0       	st.b	r5++,r0
8000856e:	c7 58       	rjmp	80008658 <_dtoa_r+0xb88>
80008570:	0a c0       	st.b	r5++,r0
80008572:	40 9a       	lddsp	r10,sp[0x24]
80008574:	40 e9       	lddsp	r9,sp[0x38]
80008576:	12 3a       	cp.w	r10,r9
80008578:	c4 30       	breq	800085fe <_dtoa_r+0xb2e>
8000857a:	06 9b       	mov	r11,r3
8000857c:	30 09       	mov	r9,0
8000857e:	30 aa       	mov	r10,10
80008580:	0e 9c       	mov	r12,r7
80008582:	e0 a0 0a 0b 	rcall	80009998 <__multadd>
80008586:	40 48       	lddsp	r8,sp[0x10]
80008588:	18 93       	mov	r3,r12
8000858a:	08 38       	cp.w	r8,r4
8000858c:	c0 91       	brne	8000859e <_dtoa_r+0xace>
8000858e:	10 9b       	mov	r11,r8
80008590:	30 09       	mov	r9,0
80008592:	30 aa       	mov	r10,10
80008594:	0e 9c       	mov	r12,r7
80008596:	e0 a0 0a 01 	rcall	80009998 <__multadd>
8000859a:	50 4c       	stdsp	sp[0x10],r12
8000859c:	c0 e8       	rjmp	800085b8 <_dtoa_r+0xae8>
8000859e:	40 4b       	lddsp	r11,sp[0x10]
800085a0:	30 09       	mov	r9,0
800085a2:	30 aa       	mov	r10,10
800085a4:	0e 9c       	mov	r12,r7
800085a6:	e0 a0 09 f9 	rcall	80009998 <__multadd>
800085aa:	08 9b       	mov	r11,r4
800085ac:	50 4c       	stdsp	sp[0x10],r12
800085ae:	30 09       	mov	r9,0
800085b0:	30 aa       	mov	r10,10
800085b2:	0e 9c       	mov	r12,r7
800085b4:	e0 a0 09 f2 	rcall	80009998 <__multadd>
800085b8:	18 94       	mov	r4,r12
800085ba:	40 9c       	lddsp	r12,sp[0x24]
800085bc:	2f fc       	sub	r12,-1
800085be:	50 9c       	stdsp	sp[0x24],r12
800085c0:	c7 9b       	rjmp	800084b2 <_dtoa_r+0x9e2>
800085c2:	30 18       	mov	r8,1
800085c4:	06 90       	mov	r0,r3
800085c6:	40 85       	lddsp	r5,sp[0x20]
800085c8:	08 93       	mov	r3,r4
800085ca:	0c 94       	mov	r4,r6
800085cc:	10 96       	mov	r6,r8
800085ce:	04 9b       	mov	r11,r2
800085d0:	00 9c       	mov	r12,r0
800085d2:	fe b0 f9 ef 	rcall	800079b0 <quorem>
800085d6:	2d 0c       	sub	r12,-48
800085d8:	0a cc       	st.b	r5++,r12
800085da:	02 36       	cp.w	r6,r1
800085dc:	c0 a4       	brge	800085f0 <_dtoa_r+0xb20>
800085de:	00 9b       	mov	r11,r0
800085e0:	30 09       	mov	r9,0
800085e2:	30 aa       	mov	r10,10
800085e4:	0e 9c       	mov	r12,r7
800085e6:	2f f6       	sub	r6,-1
800085e8:	e0 a0 09 d8 	rcall	80009998 <__multadd>
800085ec:	18 90       	mov	r0,r12
800085ee:	cf 0b       	rjmp	800085ce <_dtoa_r+0xafe>
800085f0:	08 96       	mov	r6,r4
800085f2:	30 0b       	mov	r11,0
800085f4:	06 94       	mov	r4,r3
800085f6:	50 4b       	stdsp	sp[0x10],r11
800085f8:	00 93       	mov	r3,r0
800085fa:	18 90       	mov	r0,r12
800085fc:	c0 28       	rjmp	80008600 <_dtoa_r+0xb30>
800085fe:	40 26       	lddsp	r6,sp[0x8]
80008600:	06 9b       	mov	r11,r3
80008602:	30 1a       	mov	r10,1
80008604:	0e 9c       	mov	r12,r7
80008606:	e0 a0 08 fd 	rcall	80009800 <__lshift>
8000860a:	04 9b       	mov	r11,r2
8000860c:	18 93       	mov	r3,r12
8000860e:	e0 a0 07 d5 	rcall	800095b8 <__mcmp>
80008612:	e0 89 00 12 	brgt	80008636 <_dtoa_r+0xb66>
80008616:	c1 b1       	brne	8000864c <_dtoa_r+0xb7c>
80008618:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000861c:	c0 d1       	brne	80008636 <_dtoa_r+0xb66>
8000861e:	c1 78       	rjmp	8000864c <_dtoa_r+0xb7c>
80008620:	40 89       	lddsp	r9,sp[0x20]
80008622:	12 38       	cp.w	r8,r9
80008624:	c0 30       	breq	8000862a <_dtoa_r+0xb5a>
80008626:	10 95       	mov	r5,r8
80008628:	c0 88       	rjmp	80008638 <_dtoa_r+0xb68>
8000862a:	2f f6       	sub	r6,-1
8000862c:	50 66       	stdsp	sp[0x18],r6
8000862e:	33 18       	mov	r8,49
80008630:	40 8c       	lddsp	r12,sp[0x20]
80008632:	b8 88       	st.b	r12[0x0],r8
80008634:	c1 38       	rjmp	8000865a <_dtoa_r+0xb8a>
80008636:	33 9a       	mov	r10,57
80008638:	0a 98       	mov	r8,r5
8000863a:	11 79       	ld.ub	r9,--r8
8000863c:	f4 09 18 00 	cp.b	r9,r10
80008640:	cf 00       	breq	80008620 <_dtoa_r+0xb50>
80008642:	2f f9       	sub	r9,-1
80008644:	b0 89       	st.b	r8[0x0],r9
80008646:	c0 98       	rjmp	80008658 <_dtoa_r+0xb88>
80008648:	10 95       	mov	r5,r8
8000864a:	c0 28       	rjmp	8000864e <_dtoa_r+0xb7e>
8000864c:	33 09       	mov	r9,48
8000864e:	0a 98       	mov	r8,r5
80008650:	11 7a       	ld.ub	r10,--r8
80008652:	f2 0a 18 00 	cp.b	r10,r9
80008656:	cf 90       	breq	80008648 <_dtoa_r+0xb78>
80008658:	50 66       	stdsp	sp[0x18],r6
8000865a:	04 9b       	mov	r11,r2
8000865c:	0e 9c       	mov	r12,r7
8000865e:	e0 a0 07 c7 	rcall	800095ec <_Bfree>
80008662:	58 04       	cp.w	r4,0
80008664:	c1 20       	breq	80008688 <_dtoa_r+0xbb8>
80008666:	40 4b       	lddsp	r11,sp[0x10]
80008668:	08 3b       	cp.w	r11,r4
8000866a:	5f 19       	srne	r9
8000866c:	58 0b       	cp.w	r11,0
8000866e:	5f 18       	srne	r8
80008670:	f3 e8 00 08 	and	r8,r9,r8
80008674:	c0 40       	breq	8000867c <_dtoa_r+0xbac>
80008676:	0e 9c       	mov	r12,r7
80008678:	e0 a0 07 ba 	rcall	800095ec <_Bfree>
8000867c:	08 9b       	mov	r11,r4
8000867e:	0e 9c       	mov	r12,r7
80008680:	e0 a0 07 b6 	rcall	800095ec <_Bfree>
80008684:	c0 28       	rjmp	80008688 <_dtoa_r+0xbb8>
80008686:	50 66       	stdsp	sp[0x18],r6
80008688:	0e 9c       	mov	r12,r7
8000868a:	06 9b       	mov	r11,r3
8000868c:	e0 a0 07 b0 	rcall	800095ec <_Bfree>
80008690:	30 08       	mov	r8,0
80008692:	aa 88       	st.b	r5[0x0],r8
80008694:	40 68       	lddsp	r8,sp[0x18]
80008696:	41 5a       	lddsp	r10,sp[0x54]
80008698:	2f f8       	sub	r8,-1
8000869a:	41 29       	lddsp	r9,sp[0x48]
8000869c:	95 08       	st.w	r10[0x0],r8
8000869e:	40 8c       	lddsp	r12,sp[0x20]
800086a0:	58 09       	cp.w	r9,0
800086a2:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800086a6:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800086aa:	2e 6d       	sub	sp,-104
800086ac:	d8 32       	popm	r0-r7,pc
800086ae:	d7 03       	nop

800086b0 <_fflush_r>:
800086b0:	d4 21       	pushm	r4-r7,lr
800086b2:	16 97       	mov	r7,r11
800086b4:	18 96       	mov	r6,r12
800086b6:	76 48       	ld.w	r8,r11[0x10]
800086b8:	58 08       	cp.w	r8,0
800086ba:	c7 c0       	breq	800087b2 <_fflush_r+0x102>
800086bc:	58 0c       	cp.w	r12,0
800086be:	c0 50       	breq	800086c8 <_fflush_r+0x18>
800086c0:	78 68       	ld.w	r8,r12[0x18]
800086c2:	58 08       	cp.w	r8,0
800086c4:	c0 21       	brne	800086c8 <_fflush_r+0x18>
800086c6:	cd 1c       	rcall	80008868 <__sinit>
800086c8:	4b b8       	lddpc	r8,800087b4 <_fflush_r+0x104>
800086ca:	10 37       	cp.w	r7,r8
800086cc:	c0 31       	brne	800086d2 <_fflush_r+0x22>
800086ce:	6c 07       	ld.w	r7,r6[0x0]
800086d0:	c0 a8       	rjmp	800086e4 <_fflush_r+0x34>
800086d2:	4b a8       	lddpc	r8,800087b8 <_fflush_r+0x108>
800086d4:	10 37       	cp.w	r7,r8
800086d6:	c0 31       	brne	800086dc <_fflush_r+0x2c>
800086d8:	6c 17       	ld.w	r7,r6[0x4]
800086da:	c0 58       	rjmp	800086e4 <_fflush_r+0x34>
800086dc:	4b 88       	lddpc	r8,800087bc <_fflush_r+0x10c>
800086de:	10 37       	cp.w	r7,r8
800086e0:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800086e4:	8e 6a       	ld.sh	r10,r7[0xc]
800086e6:	14 98       	mov	r8,r10
800086e8:	ed ba 00 03 	bld	r10,0x3
800086ec:	c4 20       	breq	80008770 <_fflush_r+0xc0>
800086ee:	ab ba       	sbr	r10,0xb
800086f0:	ae 6a       	st.h	r7[0xc],r10
800086f2:	6e 18       	ld.w	r8,r7[0x4]
800086f4:	58 08       	cp.w	r8,0
800086f6:	e0 89 00 06 	brgt	80008702 <_fflush_r+0x52>
800086fa:	6f 08       	ld.w	r8,r7[0x40]
800086fc:	58 08       	cp.w	r8,0
800086fe:	e0 8a 00 5a 	brle	800087b2 <_fflush_r+0x102>
80008702:	6e b8       	ld.w	r8,r7[0x2c]
80008704:	58 08       	cp.w	r8,0
80008706:	c5 60       	breq	800087b2 <_fflush_r+0x102>
80008708:	e2 1a 10 00 	andl	r10,0x1000,COH
8000870c:	c0 30       	breq	80008712 <_fflush_r+0x62>
8000870e:	6f 55       	ld.w	r5,r7[0x54]
80008710:	c0 f8       	rjmp	8000872e <_fflush_r+0x7e>
80008712:	30 19       	mov	r9,1
80008714:	6e 8b       	ld.w	r11,r7[0x20]
80008716:	0c 9c       	mov	r12,r6
80008718:	5d 18       	icall	r8
8000871a:	18 95       	mov	r5,r12
8000871c:	5b fc       	cp.w	r12,-1
8000871e:	c0 81       	brne	8000872e <_fflush_r+0x7e>
80008720:	6c 38       	ld.w	r8,r6[0xc]
80008722:	59 d8       	cp.w	r8,29
80008724:	c4 70       	breq	800087b2 <_fflush_r+0x102>
80008726:	8e 68       	ld.sh	r8,r7[0xc]
80008728:	a7 a8       	sbr	r8,0x6
8000872a:	ae 68       	st.h	r7[0xc],r8
8000872c:	d8 22       	popm	r4-r7,pc
8000872e:	8e 68       	ld.sh	r8,r7[0xc]
80008730:	ed b8 00 02 	bld	r8,0x2
80008734:	c0 91       	brne	80008746 <_fflush_r+0x96>
80008736:	6e 18       	ld.w	r8,r7[0x4]
80008738:	10 15       	sub	r5,r8
8000873a:	6e d8       	ld.w	r8,r7[0x34]
8000873c:	58 08       	cp.w	r8,0
8000873e:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80008742:	eb d8 e1 15 	subne	r5,r5,r8
80008746:	6e b8       	ld.w	r8,r7[0x2c]
80008748:	0c 9c       	mov	r12,r6
8000874a:	30 09       	mov	r9,0
8000874c:	0a 9a       	mov	r10,r5
8000874e:	6e 8b       	ld.w	r11,r7[0x20]
80008750:	5d 18       	icall	r8
80008752:	8e 68       	ld.sh	r8,r7[0xc]
80008754:	0a 3c       	cp.w	r12,r5
80008756:	c2 61       	brne	800087a2 <_fflush_r+0xf2>
80008758:	ab d8       	cbr	r8,0xb
8000875a:	30 0c       	mov	r12,0
8000875c:	6e 49       	ld.w	r9,r7[0x10]
8000875e:	ae 68       	st.h	r7[0xc],r8
80008760:	8f 1c       	st.w	r7[0x4],r12
80008762:	8f 09       	st.w	r7[0x0],r9
80008764:	ed b8 00 0c 	bld	r8,0xc
80008768:	c2 51       	brne	800087b2 <_fflush_r+0x102>
8000876a:	ef 45 00 54 	st.w	r7[84],r5
8000876e:	d8 22       	popm	r4-r7,pc
80008770:	6e 45       	ld.w	r5,r7[0x10]
80008772:	58 05       	cp.w	r5,0
80008774:	c1 f0       	breq	800087b2 <_fflush_r+0x102>
80008776:	6e 04       	ld.w	r4,r7[0x0]
80008778:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000877c:	8f 05       	st.w	r7[0x0],r5
8000877e:	f9 b8 01 00 	movne	r8,0
80008782:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80008786:	0a 14       	sub	r4,r5
80008788:	8f 28       	st.w	r7[0x8],r8
8000878a:	c1 18       	rjmp	800087ac <_fflush_r+0xfc>
8000878c:	08 99       	mov	r9,r4
8000878e:	0a 9a       	mov	r10,r5
80008790:	6e a8       	ld.w	r8,r7[0x28]
80008792:	6e 8b       	ld.w	r11,r7[0x20]
80008794:	0c 9c       	mov	r12,r6
80008796:	5d 18       	icall	r8
80008798:	18 14       	sub	r4,r12
8000879a:	58 0c       	cp.w	r12,0
8000879c:	e0 89 00 07 	brgt	800087aa <_fflush_r+0xfa>
800087a0:	8e 68       	ld.sh	r8,r7[0xc]
800087a2:	a7 a8       	sbr	r8,0x6
800087a4:	3f fc       	mov	r12,-1
800087a6:	ae 68       	st.h	r7[0xc],r8
800087a8:	d8 22       	popm	r4-r7,pc
800087aa:	18 05       	add	r5,r12
800087ac:	58 04       	cp.w	r4,0
800087ae:	fe 99 ff ef 	brgt	8000878c <_fflush_r+0xdc>
800087b2:	d8 2a       	popm	r4-r7,pc,r12=0
800087b4:	80 00       	ld.sh	r0,r0[0x0]
800087b6:	bf 2c       	st.d	pc++,r12
800087b8:	80 00       	ld.sh	r0,r0[0x0]
800087ba:	bf 4c       	asr	r12,0x1e
800087bc:	80 00       	ld.sh	r0,r0[0x0]
800087be:	bf 6c       	lsl	r12,0x1e

800087c0 <__sfp_lock_acquire>:
800087c0:	5e fc       	retal	r12

800087c2 <__sfp_lock_release>:
800087c2:	5e fc       	retal	r12

800087c4 <_cleanup_r>:
800087c4:	d4 01       	pushm	lr
800087c6:	fe cb e6 ee 	sub	r11,pc,-6418
800087ca:	e0 a0 03 03 	rcall	80008dd0 <_fwalk>
800087ce:	d8 02       	popm	pc

800087d0 <__sfmoreglue>:
800087d0:	d4 21       	pushm	r4-r7,lr
800087d2:	16 95       	mov	r5,r11
800087d4:	f6 06 10 5c 	mul	r6,r11,92
800087d8:	ec cb ff f4 	sub	r11,r6,-12
800087dc:	e0 a0 03 8a 	rcall	80008ef0 <_malloc_r>
800087e0:	18 97       	mov	r7,r12
800087e2:	c0 90       	breq	800087f4 <__sfmoreglue+0x24>
800087e4:	99 15       	st.w	r12[0x4],r5
800087e6:	30 0b       	mov	r11,0
800087e8:	2f 4c       	sub	r12,-12
800087ea:	0c 9a       	mov	r10,r6
800087ec:	8f 2c       	st.w	r7[0x8],r12
800087ee:	8f 0b       	st.w	r7[0x0],r11
800087f0:	e0 a0 06 64 	rcall	800094b8 <memset>
800087f4:	0e 9c       	mov	r12,r7
800087f6:	d8 22       	popm	r4-r7,pc

800087f8 <__sfp>:
800087f8:	d4 21       	pushm	r4-r7,lr
800087fa:	49 b8       	lddpc	r8,80008864 <__sfp+0x6c>
800087fc:	18 96       	mov	r6,r12
800087fe:	70 07       	ld.w	r7,r8[0x0]
80008800:	6e 68       	ld.w	r8,r7[0x18]
80008802:	58 08       	cp.w	r8,0
80008804:	c0 31       	brne	8000880a <__sfp+0x12>
80008806:	0e 9c       	mov	r12,r7
80008808:	c3 0c       	rcall	80008868 <__sinit>
8000880a:	ee c7 ff 28 	sub	r7,r7,-216
8000880e:	30 05       	mov	r5,0
80008810:	6e 2c       	ld.w	r12,r7[0x8]
80008812:	6e 18       	ld.w	r8,r7[0x4]
80008814:	c0 68       	rjmp	80008820 <__sfp+0x28>
80008816:	98 69       	ld.sh	r9,r12[0xc]
80008818:	ea 09 19 00 	cp.h	r9,r5
8000881c:	c1 10       	breq	8000883e <__sfp+0x46>
8000881e:	2a 4c       	sub	r12,-92
80008820:	20 18       	sub	r8,1
80008822:	cf a7       	brpl	80008816 <__sfp+0x1e>
80008824:	6e 08       	ld.w	r8,r7[0x0]
80008826:	58 08       	cp.w	r8,0
80008828:	c0 61       	brne	80008834 <__sfp+0x3c>
8000882a:	30 4b       	mov	r11,4
8000882c:	0c 9c       	mov	r12,r6
8000882e:	cd 1f       	rcall	800087d0 <__sfmoreglue>
80008830:	8f 0c       	st.w	r7[0x0],r12
80008832:	c0 30       	breq	80008838 <__sfp+0x40>
80008834:	6e 07       	ld.w	r7,r7[0x0]
80008836:	ce db       	rjmp	80008810 <__sfp+0x18>
80008838:	30 c8       	mov	r8,12
8000883a:	8d 38       	st.w	r6[0xc],r8
8000883c:	d8 22       	popm	r4-r7,pc
8000883e:	30 08       	mov	r8,0
80008840:	f9 48 00 4c 	st.w	r12[76],r8
80008844:	99 08       	st.w	r12[0x0],r8
80008846:	99 28       	st.w	r12[0x8],r8
80008848:	99 18       	st.w	r12[0x4],r8
8000884a:	99 48       	st.w	r12[0x10],r8
8000884c:	99 58       	st.w	r12[0x14],r8
8000884e:	99 68       	st.w	r12[0x18],r8
80008850:	99 d8       	st.w	r12[0x34],r8
80008852:	99 e8       	st.w	r12[0x38],r8
80008854:	f9 48 00 48 	st.w	r12[72],r8
80008858:	3f f8       	mov	r8,-1
8000885a:	b8 78       	st.h	r12[0xe],r8
8000885c:	30 18       	mov	r8,1
8000885e:	b8 68       	st.h	r12[0xc],r8
80008860:	d8 22       	popm	r4-r7,pc
80008862:	d7 03       	nop
80008864:	80 00       	ld.sh	r0,r0[0x0]
80008866:	bf 90       	lsr	r0,0x1f

80008868 <__sinit>:
80008868:	d4 21       	pushm	r4-r7,lr
8000886a:	18 96       	mov	r6,r12
8000886c:	78 67       	ld.w	r7,r12[0x18]
8000886e:	58 07       	cp.w	r7,0
80008870:	c4 91       	brne	80008902 <__sinit+0x9a>
80008872:	fe c8 00 ae 	sub	r8,pc,174
80008876:	30 15       	mov	r5,1
80008878:	99 a8       	st.w	r12[0x28],r8
8000887a:	f9 47 00 d8 	st.w	r12[216],r7
8000887e:	f9 47 00 dc 	st.w	r12[220],r7
80008882:	f9 47 00 e0 	st.w	r12[224],r7
80008886:	99 65       	st.w	r12[0x18],r5
80008888:	cb 8f       	rcall	800087f8 <__sfp>
8000888a:	8d 0c       	st.w	r6[0x0],r12
8000888c:	0c 9c       	mov	r12,r6
8000888e:	cb 5f       	rcall	800087f8 <__sfp>
80008890:	8d 1c       	st.w	r6[0x4],r12
80008892:	0c 9c       	mov	r12,r6
80008894:	cb 2f       	rcall	800087f8 <__sfp>
80008896:	6c 09       	ld.w	r9,r6[0x0]
80008898:	30 48       	mov	r8,4
8000889a:	93 07       	st.w	r9[0x0],r7
8000889c:	b2 68       	st.h	r9[0xc],r8
8000889e:	93 17       	st.w	r9[0x4],r7
800088a0:	93 27       	st.w	r9[0x8],r7
800088a2:	6c 18       	ld.w	r8,r6[0x4]
800088a4:	b2 77       	st.h	r9[0xe],r7
800088a6:	93 47       	st.w	r9[0x10],r7
800088a8:	93 57       	st.w	r9[0x14],r7
800088aa:	93 67       	st.w	r9[0x18],r7
800088ac:	93 89       	st.w	r9[0x20],r9
800088ae:	91 07       	st.w	r8[0x0],r7
800088b0:	91 17       	st.w	r8[0x4],r7
800088b2:	91 27       	st.w	r8[0x8],r7
800088b4:	fe ce ea 90 	sub	lr,pc,-5488
800088b8:	fe cb ea c0 	sub	r11,pc,-5440
800088bc:	93 9e       	st.w	r9[0x24],lr
800088be:	93 ab       	st.w	r9[0x28],r11
800088c0:	fe ca ea e8 	sub	r10,pc,-5400
800088c4:	fe c4 ea f4 	sub	r4,pc,-5388
800088c8:	93 ba       	st.w	r9[0x2c],r10
800088ca:	93 c4       	st.w	r9[0x30],r4
800088cc:	30 99       	mov	r9,9
800088ce:	b0 69       	st.h	r8[0xc],r9
800088d0:	b0 75       	st.h	r8[0xe],r5
800088d2:	91 c4       	st.w	r8[0x30],r4
800088d4:	91 47       	st.w	r8[0x10],r7
800088d6:	91 57       	st.w	r8[0x14],r7
800088d8:	91 67       	st.w	r8[0x18],r7
800088da:	91 88       	st.w	r8[0x20],r8
800088dc:	91 9e       	st.w	r8[0x24],lr
800088de:	91 ab       	st.w	r8[0x28],r11
800088e0:	91 ba       	st.w	r8[0x2c],r10
800088e2:	8d 2c       	st.w	r6[0x8],r12
800088e4:	31 28       	mov	r8,18
800088e6:	99 07       	st.w	r12[0x0],r7
800088e8:	b8 68       	st.h	r12[0xc],r8
800088ea:	99 17       	st.w	r12[0x4],r7
800088ec:	99 27       	st.w	r12[0x8],r7
800088ee:	30 28       	mov	r8,2
800088f0:	b8 78       	st.h	r12[0xe],r8
800088f2:	99 c4       	st.w	r12[0x30],r4
800088f4:	99 67       	st.w	r12[0x18],r7
800088f6:	99 9e       	st.w	r12[0x24],lr
800088f8:	99 ab       	st.w	r12[0x28],r11
800088fa:	99 ba       	st.w	r12[0x2c],r10
800088fc:	99 47       	st.w	r12[0x10],r7
800088fe:	99 57       	st.w	r12[0x14],r7
80008900:	99 8c       	st.w	r12[0x20],r12
80008902:	d8 22       	popm	r4-r7,pc

80008904 <_malloc_trim_r>:
80008904:	d4 21       	pushm	r4-r7,lr
80008906:	16 95       	mov	r5,r11
80008908:	18 97       	mov	r7,r12
8000890a:	e0 a0 05 de 	rcall	800094c6 <__malloc_lock>
8000890e:	4a 24       	lddpc	r4,80008994 <_malloc_trim_r+0x90>
80008910:	68 28       	ld.w	r8,r4[0x8]
80008912:	70 16       	ld.w	r6,r8[0x4]
80008914:	e0 16 ff fc 	andl	r6,0xfffc
80008918:	ec c8 ff 91 	sub	r8,r6,-111
8000891c:	f0 05 01 05 	sub	r5,r8,r5
80008920:	e0 15 ff 80 	andl	r5,0xff80
80008924:	ea c5 00 80 	sub	r5,r5,128
80008928:	e0 45 00 7f 	cp.w	r5,127
8000892c:	e0 8a 00 23 	brle	80008972 <_malloc_trim_r+0x6e>
80008930:	30 0b       	mov	r11,0
80008932:	0e 9c       	mov	r12,r7
80008934:	e0 a0 0a 3e 	rcall	80009db0 <_sbrk_r>
80008938:	68 28       	ld.w	r8,r4[0x8]
8000893a:	0c 08       	add	r8,r6
8000893c:	10 3c       	cp.w	r12,r8
8000893e:	c1 a1       	brne	80008972 <_malloc_trim_r+0x6e>
80008940:	ea 0b 11 00 	rsub	r11,r5,0
80008944:	0e 9c       	mov	r12,r7
80008946:	e0 a0 0a 35 	rcall	80009db0 <_sbrk_r>
8000894a:	5b fc       	cp.w	r12,-1
8000894c:	c1 71       	brne	8000897a <_malloc_trim_r+0x76>
8000894e:	30 0b       	mov	r11,0
80008950:	0e 9c       	mov	r12,r7
80008952:	e0 a0 0a 2f 	rcall	80009db0 <_sbrk_r>
80008956:	68 28       	ld.w	r8,r4[0x8]
80008958:	f8 08 01 09 	sub	r9,r12,r8
8000895c:	58 f9       	cp.w	r9,15
8000895e:	e0 8a 00 0a 	brle	80008972 <_malloc_trim_r+0x6e>
80008962:	a1 a9       	sbr	r9,0x0
80008964:	91 19       	st.w	r8[0x4],r9
80008966:	48 d8       	lddpc	r8,80008998 <_malloc_trim_r+0x94>
80008968:	70 09       	ld.w	r9,r8[0x0]
8000896a:	48 d8       	lddpc	r8,8000899c <_malloc_trim_r+0x98>
8000896c:	f8 09 01 09 	sub	r9,r12,r9
80008970:	91 09       	st.w	r8[0x0],r9
80008972:	0e 9c       	mov	r12,r7
80008974:	e0 a0 05 aa 	rcall	800094c8 <__malloc_unlock>
80008978:	d8 2a       	popm	r4-r7,pc,r12=0
8000897a:	68 28       	ld.w	r8,r4[0x8]
8000897c:	0a 16       	sub	r6,r5
8000897e:	a1 a6       	sbr	r6,0x0
80008980:	91 16       	st.w	r8[0x4],r6
80008982:	48 78       	lddpc	r8,8000899c <_malloc_trim_r+0x98>
80008984:	70 09       	ld.w	r9,r8[0x0]
80008986:	0a 19       	sub	r9,r5
80008988:	0e 9c       	mov	r12,r7
8000898a:	91 09       	st.w	r8[0x0],r9
8000898c:	e0 a0 05 9e 	rcall	800094c8 <__malloc_unlock>
80008990:	da 2a       	popm	r4-r7,pc,r12=1
80008992:	d7 03       	nop
80008994:	00 00       	add	r0,r0
80008996:	00 fc       	st.b	--r0,r12
80008998:	00 00       	add	r0,r0
8000899a:	05 08       	ld.w	r8,r2++
8000899c:	00 00       	add	r0,r0
8000899e:	06 18       	sub	r8,r3

800089a0 <_free_r>:
800089a0:	d4 21       	pushm	r4-r7,lr
800089a2:	16 96       	mov	r6,r11
800089a4:	18 97       	mov	r7,r12
800089a6:	58 0b       	cp.w	r11,0
800089a8:	e0 80 00 c2 	breq	80008b2c <_free_r+0x18c>
800089ac:	e0 a0 05 8d 	rcall	800094c6 <__malloc_lock>
800089b0:	20 86       	sub	r6,8
800089b2:	4c ba       	lddpc	r10,80008adc <_free_r+0x13c>
800089b4:	6c 18       	ld.w	r8,r6[0x4]
800089b6:	74 2e       	ld.w	lr,r10[0x8]
800089b8:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800089bc:	a1 c8       	cbr	r8,0x0
800089be:	ec 08 00 09 	add	r9,r6,r8
800089c2:	72 1b       	ld.w	r11,r9[0x4]
800089c4:	e0 1b ff fc 	andl	r11,0xfffc
800089c8:	1c 39       	cp.w	r9,lr
800089ca:	c1 c1       	brne	80008a02 <_free_r+0x62>
800089cc:	f6 08 00 08 	add	r8,r11,r8
800089d0:	58 0c       	cp.w	r12,0
800089d2:	c0 81       	brne	800089e2 <_free_r+0x42>
800089d4:	6c 09       	ld.w	r9,r6[0x0]
800089d6:	12 16       	sub	r6,r9
800089d8:	12 08       	add	r8,r9
800089da:	6c 3b       	ld.w	r11,r6[0xc]
800089dc:	6c 29       	ld.w	r9,r6[0x8]
800089de:	97 29       	st.w	r11[0x8],r9
800089e0:	93 3b       	st.w	r9[0xc],r11
800089e2:	10 99       	mov	r9,r8
800089e4:	95 26       	st.w	r10[0x8],r6
800089e6:	a1 a9       	sbr	r9,0x0
800089e8:	8d 19       	st.w	r6[0x4],r9
800089ea:	4b e9       	lddpc	r9,80008ae0 <_free_r+0x140>
800089ec:	72 09       	ld.w	r9,r9[0x0]
800089ee:	12 38       	cp.w	r8,r9
800089f0:	c0 53       	brcs	800089fa <_free_r+0x5a>
800089f2:	4b d8       	lddpc	r8,80008ae4 <_free_r+0x144>
800089f4:	0e 9c       	mov	r12,r7
800089f6:	70 0b       	ld.w	r11,r8[0x0]
800089f8:	c8 6f       	rcall	80008904 <_malloc_trim_r>
800089fa:	0e 9c       	mov	r12,r7
800089fc:	e0 a0 05 66 	rcall	800094c8 <__malloc_unlock>
80008a00:	d8 22       	popm	r4-r7,pc
80008a02:	93 1b       	st.w	r9[0x4],r11
80008a04:	58 0c       	cp.w	r12,0
80008a06:	c0 30       	breq	80008a0c <_free_r+0x6c>
80008a08:	30 0c       	mov	r12,0
80008a0a:	c1 08       	rjmp	80008a2a <_free_r+0x8a>
80008a0c:	6c 0e       	ld.w	lr,r6[0x0]
80008a0e:	f4 c5 ff f8 	sub	r5,r10,-8
80008a12:	1c 16       	sub	r6,lr
80008a14:	1c 08       	add	r8,lr
80008a16:	6c 2e       	ld.w	lr,r6[0x8]
80008a18:	0a 3e       	cp.w	lr,r5
80008a1a:	f9 bc 00 01 	moveq	r12,1
80008a1e:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80008a22:	eb fe 1a 02 	st.wne	r5[0x8],lr
80008a26:	fd f5 1a 03 	st.wne	lr[0xc],r5
80008a2a:	f2 0b 00 0e 	add	lr,r9,r11
80008a2e:	7c 1e       	ld.w	lr,lr[0x4]
80008a30:	ed be 00 00 	bld	lr,0x0
80008a34:	c1 30       	breq	80008a5a <_free_r+0xba>
80008a36:	16 08       	add	r8,r11
80008a38:	58 0c       	cp.w	r12,0
80008a3a:	c0 c1       	brne	80008a52 <_free_r+0xb2>
80008a3c:	4a 8e       	lddpc	lr,80008adc <_free_r+0x13c>
80008a3e:	72 2b       	ld.w	r11,r9[0x8]
80008a40:	2f 8e       	sub	lr,-8
80008a42:	1c 3b       	cp.w	r11,lr
80008a44:	c0 71       	brne	80008a52 <_free_r+0xb2>
80008a46:	97 36       	st.w	r11[0xc],r6
80008a48:	97 26       	st.w	r11[0x8],r6
80008a4a:	8d 2b       	st.w	r6[0x8],r11
80008a4c:	8d 3b       	st.w	r6[0xc],r11
80008a4e:	30 1c       	mov	r12,1
80008a50:	c0 58       	rjmp	80008a5a <_free_r+0xba>
80008a52:	72 2b       	ld.w	r11,r9[0x8]
80008a54:	72 39       	ld.w	r9,r9[0xc]
80008a56:	93 2b       	st.w	r9[0x8],r11
80008a58:	97 39       	st.w	r11[0xc],r9
80008a5a:	10 99       	mov	r9,r8
80008a5c:	ec 08 09 08 	st.w	r6[r8],r8
80008a60:	a1 a9       	sbr	r9,0x0
80008a62:	8d 19       	st.w	r6[0x4],r9
80008a64:	58 0c       	cp.w	r12,0
80008a66:	c6 01       	brne	80008b26 <_free_r+0x186>
80008a68:	e0 48 01 ff 	cp.w	r8,511
80008a6c:	e0 8b 00 13 	brhi	80008a92 <_free_r+0xf2>
80008a70:	a3 98       	lsr	r8,0x3
80008a72:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008a76:	72 2b       	ld.w	r11,r9[0x8]
80008a78:	8d 39       	st.w	r6[0xc],r9
80008a7a:	8d 2b       	st.w	r6[0x8],r11
80008a7c:	97 36       	st.w	r11[0xc],r6
80008a7e:	93 26       	st.w	r9[0x8],r6
80008a80:	a3 48       	asr	r8,0x2
80008a82:	74 19       	ld.w	r9,r10[0x4]
80008a84:	30 1b       	mov	r11,1
80008a86:	f6 08 09 48 	lsl	r8,r11,r8
80008a8a:	f3 e8 10 08 	or	r8,r9,r8
80008a8e:	95 18       	st.w	r10[0x4],r8
80008a90:	c4 b8       	rjmp	80008b26 <_free_r+0x186>
80008a92:	f0 0b 16 09 	lsr	r11,r8,0x9
80008a96:	58 4b       	cp.w	r11,4
80008a98:	e0 8b 00 06 	brhi	80008aa4 <_free_r+0x104>
80008a9c:	f0 0b 16 06 	lsr	r11,r8,0x6
80008aa0:	2c 8b       	sub	r11,-56
80008aa2:	c2 68       	rjmp	80008aee <_free_r+0x14e>
80008aa4:	59 4b       	cp.w	r11,20
80008aa6:	e0 8b 00 04 	brhi	80008aae <_free_r+0x10e>
80008aaa:	2a 5b       	sub	r11,-91
80008aac:	c2 18       	rjmp	80008aee <_free_r+0x14e>
80008aae:	e0 4b 00 54 	cp.w	r11,84
80008ab2:	e0 8b 00 06 	brhi	80008abe <_free_r+0x11e>
80008ab6:	f0 0b 16 0c 	lsr	r11,r8,0xc
80008aba:	29 2b       	sub	r11,-110
80008abc:	c1 98       	rjmp	80008aee <_free_r+0x14e>
80008abe:	e0 4b 01 54 	cp.w	r11,340
80008ac2:	e0 8b 00 06 	brhi	80008ace <_free_r+0x12e>
80008ac6:	f0 0b 16 0f 	lsr	r11,r8,0xf
80008aca:	28 9b       	sub	r11,-119
80008acc:	c1 18       	rjmp	80008aee <_free_r+0x14e>
80008ace:	e0 4b 05 54 	cp.w	r11,1364
80008ad2:	e0 88 00 0b 	brls	80008ae8 <_free_r+0x148>
80008ad6:	37 eb       	mov	r11,126
80008ad8:	c0 b8       	rjmp	80008aee <_free_r+0x14e>
80008ada:	d7 03       	nop
80008adc:	00 00       	add	r0,r0
80008ade:	00 fc       	st.b	--r0,r12
80008ae0:	00 00       	add	r0,r0
80008ae2:	05 04       	ld.w	r4,r2++
80008ae4:	00 00       	add	r0,r0
80008ae6:	06 14       	sub	r4,r3
80008ae8:	f0 0b 16 12 	lsr	r11,r8,0x12
80008aec:	28 4b       	sub	r11,-124
80008aee:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80008af2:	78 29       	ld.w	r9,r12[0x8]
80008af4:	18 39       	cp.w	r9,r12
80008af6:	c0 e1       	brne	80008b12 <_free_r+0x172>
80008af8:	74 18       	ld.w	r8,r10[0x4]
80008afa:	a3 4b       	asr	r11,0x2
80008afc:	30 1c       	mov	r12,1
80008afe:	f8 0b 09 4b 	lsl	r11,r12,r11
80008b02:	f1 eb 10 0b 	or	r11,r8,r11
80008b06:	12 98       	mov	r8,r9
80008b08:	95 1b       	st.w	r10[0x4],r11
80008b0a:	c0 a8       	rjmp	80008b1e <_free_r+0x17e>
80008b0c:	72 29       	ld.w	r9,r9[0x8]
80008b0e:	18 39       	cp.w	r9,r12
80008b10:	c0 60       	breq	80008b1c <_free_r+0x17c>
80008b12:	72 1a       	ld.w	r10,r9[0x4]
80008b14:	e0 1a ff fc 	andl	r10,0xfffc
80008b18:	14 38       	cp.w	r8,r10
80008b1a:	cf 93       	brcs	80008b0c <_free_r+0x16c>
80008b1c:	72 38       	ld.w	r8,r9[0xc]
80008b1e:	8d 38       	st.w	r6[0xc],r8
80008b20:	8d 29       	st.w	r6[0x8],r9
80008b22:	93 36       	st.w	r9[0xc],r6
80008b24:	91 26       	st.w	r8[0x8],r6
80008b26:	0e 9c       	mov	r12,r7
80008b28:	e0 a0 04 d0 	rcall	800094c8 <__malloc_unlock>
80008b2c:	d8 22       	popm	r4-r7,pc
80008b2e:	d7 03       	nop

80008b30 <__sfvwrite_r>:
80008b30:	d4 31       	pushm	r0-r7,lr
80008b32:	20 3d       	sub	sp,12
80008b34:	14 94       	mov	r4,r10
80008b36:	18 95       	mov	r5,r12
80008b38:	16 97       	mov	r7,r11
80008b3a:	74 28       	ld.w	r8,r10[0x8]
80008b3c:	58 08       	cp.w	r8,0
80008b3e:	e0 80 01 45 	breq	80008dc8 <__sfvwrite_r+0x298>
80008b42:	96 68       	ld.sh	r8,r11[0xc]
80008b44:	ed b8 00 03 	bld	r8,0x3
80008b48:	c0 41       	brne	80008b50 <__sfvwrite_r+0x20>
80008b4a:	76 48       	ld.w	r8,r11[0x10]
80008b4c:	58 08       	cp.w	r8,0
80008b4e:	c0 c1       	brne	80008b66 <__sfvwrite_r+0x36>
80008b50:	0e 9b       	mov	r11,r7
80008b52:	0a 9c       	mov	r12,r5
80008b54:	fe b0 f6 c0 	rcall	800078d4 <__swsetup_r>
80008b58:	c0 70       	breq	80008b66 <__sfvwrite_r+0x36>
80008b5a:	8e 68       	ld.sh	r8,r7[0xc]
80008b5c:	a7 a8       	sbr	r8,0x6
80008b5e:	ae 68       	st.h	r7[0xc],r8
80008b60:	30 98       	mov	r8,9
80008b62:	8b 38       	st.w	r5[0xc],r8
80008b64:	c3 09       	rjmp	80008dc4 <__sfvwrite_r+0x294>
80008b66:	8e 63       	ld.sh	r3,r7[0xc]
80008b68:	68 00       	ld.w	r0,r4[0x0]
80008b6a:	06 96       	mov	r6,r3
80008b6c:	e2 16 00 02 	andl	r6,0x2,COH
80008b70:	c2 10       	breq	80008bb2 <__sfvwrite_r+0x82>
80008b72:	30 03       	mov	r3,0
80008b74:	e0 62 04 00 	mov	r2,1024
80008b78:	06 96       	mov	r6,r3
80008b7a:	c0 48       	rjmp	80008b82 <__sfvwrite_r+0x52>
80008b7c:	60 03       	ld.w	r3,r0[0x0]
80008b7e:	60 16       	ld.w	r6,r0[0x4]
80008b80:	2f 80       	sub	r0,-8
80008b82:	58 06       	cp.w	r6,0
80008b84:	cf c0       	breq	80008b7c <__sfvwrite_r+0x4c>
80008b86:	e0 46 04 00 	cp.w	r6,1024
80008b8a:	ec 09 17 80 	movls	r9,r6
80008b8e:	e4 09 17 b0 	movhi	r9,r2
80008b92:	06 9a       	mov	r10,r3
80008b94:	6e a8       	ld.w	r8,r7[0x28]
80008b96:	6e 8b       	ld.w	r11,r7[0x20]
80008b98:	0a 9c       	mov	r12,r5
80008b9a:	5d 18       	icall	r8
80008b9c:	18 16       	sub	r6,r12
80008b9e:	58 0c       	cp.w	r12,0
80008ba0:	e0 8a 01 0f 	brle	80008dbe <__sfvwrite_r+0x28e>
80008ba4:	68 28       	ld.w	r8,r4[0x8]
80008ba6:	18 18       	sub	r8,r12
80008ba8:	89 28       	st.w	r4[0x8],r8
80008baa:	e0 80 01 0f 	breq	80008dc8 <__sfvwrite_r+0x298>
80008bae:	18 03       	add	r3,r12
80008bb0:	ce 9b       	rjmp	80008b82 <__sfvwrite_r+0x52>
80008bb2:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80008bb6:	c0 70       	breq	80008bc4 <__sfvwrite_r+0x94>
80008bb8:	50 06       	stdsp	sp[0x0],r6
80008bba:	0c 93       	mov	r3,r6
80008bbc:	0c 91       	mov	r1,r6
80008bbe:	50 15       	stdsp	sp[0x4],r5
80008bc0:	08 92       	mov	r2,r4
80008bc2:	c9 e8       	rjmp	80008cfe <__sfvwrite_r+0x1ce>
80008bc4:	06 96       	mov	r6,r3
80008bc6:	08 91       	mov	r1,r4
80008bc8:	c0 48       	rjmp	80008bd0 <__sfvwrite_r+0xa0>
80008bca:	60 03       	ld.w	r3,r0[0x0]
80008bcc:	60 16       	ld.w	r6,r0[0x4]
80008bce:	2f 80       	sub	r0,-8
80008bd0:	58 06       	cp.w	r6,0
80008bd2:	cf c0       	breq	80008bca <__sfvwrite_r+0x9a>
80008bd4:	8e 68       	ld.sh	r8,r7[0xc]
80008bd6:	6e 24       	ld.w	r4,r7[0x8]
80008bd8:	10 99       	mov	r9,r8
80008bda:	e2 19 02 00 	andl	r9,0x200,COH
80008bde:	c5 50       	breq	80008c88 <__sfvwrite_r+0x158>
80008be0:	08 36       	cp.w	r6,r4
80008be2:	c4 33       	brcs	80008c68 <__sfvwrite_r+0x138>
80008be4:	10 99       	mov	r9,r8
80008be6:	e2 19 04 80 	andl	r9,0x480,COH
80008bea:	c3 f0       	breq	80008c68 <__sfvwrite_r+0x138>
80008bec:	6e 4b       	ld.w	r11,r7[0x10]
80008bee:	6e 09       	ld.w	r9,r7[0x0]
80008bf0:	16 19       	sub	r9,r11
80008bf2:	50 09       	stdsp	sp[0x0],r9
80008bf4:	6e 59       	ld.w	r9,r7[0x14]
80008bf6:	10 9c       	mov	r12,r8
80008bf8:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80008bfc:	30 28       	mov	r8,2
80008bfe:	f4 08 0c 08 	divs	r8,r10,r8
80008c02:	fa e9 00 04 	st.d	sp[4],r8
80008c06:	10 94       	mov	r4,r8
80008c08:	40 09       	lddsp	r9,sp[0x0]
80008c0a:	e2 1c 04 00 	andl	r12,0x400,COH
80008c0e:	2f f9       	sub	r9,-1
80008c10:	0c 09       	add	r9,r6
80008c12:	12 38       	cp.w	r8,r9
80008c14:	f2 04 17 30 	movlo	r4,r9
80008c18:	58 0c       	cp.w	r12,0
80008c1a:	c1 00       	breq	80008c3a <__sfvwrite_r+0x10a>
80008c1c:	08 9b       	mov	r11,r4
80008c1e:	0a 9c       	mov	r12,r5
80008c20:	c6 8d       	rcall	80008ef0 <_malloc_r>
80008c22:	18 92       	mov	r2,r12
80008c24:	c1 40       	breq	80008c4c <__sfvwrite_r+0x11c>
80008c26:	40 0a       	lddsp	r10,sp[0x0]
80008c28:	6e 4b       	ld.w	r11,r7[0x10]
80008c2a:	e0 a0 03 84 	rcall	80009332 <memcpy>
80008c2e:	8e 68       	ld.sh	r8,r7[0xc]
80008c30:	e0 18 fb 7f 	andl	r8,0xfb7f
80008c34:	a7 b8       	sbr	r8,0x7
80008c36:	ae 68       	st.h	r7[0xc],r8
80008c38:	c0 d8       	rjmp	80008c52 <__sfvwrite_r+0x122>
80008c3a:	08 9a       	mov	r10,r4
80008c3c:	0a 9c       	mov	r12,r5
80008c3e:	e0 a0 07 33 	rcall	80009aa4 <_realloc_r>
80008c42:	18 92       	mov	r2,r12
80008c44:	c0 71       	brne	80008c52 <__sfvwrite_r+0x122>
80008c46:	6e 4b       	ld.w	r11,r7[0x10]
80008c48:	0a 9c       	mov	r12,r5
80008c4a:	ca be       	rcall	800089a0 <_free_r>
80008c4c:	30 c8       	mov	r8,12
80008c4e:	8b 38       	st.w	r5[0xc],r8
80008c50:	cb 78       	rjmp	80008dbe <__sfvwrite_r+0x28e>
80008c52:	40 0a       	lddsp	r10,sp[0x0]
80008c54:	40 09       	lddsp	r9,sp[0x0]
80008c56:	e8 0a 01 0a 	sub	r10,r4,r10
80008c5a:	e4 09 00 08 	add	r8,r2,r9
80008c5e:	8f 54       	st.w	r7[0x14],r4
80008c60:	8f 2a       	st.w	r7[0x8],r10
80008c62:	8f 08       	st.w	r7[0x0],r8
80008c64:	8f 42       	st.w	r7[0x10],r2
80008c66:	0c 94       	mov	r4,r6
80008c68:	08 36       	cp.w	r6,r4
80008c6a:	ec 04 17 30 	movlo	r4,r6
80008c6e:	06 9b       	mov	r11,r3
80008c70:	08 9a       	mov	r10,r4
80008c72:	6e 0c       	ld.w	r12,r7[0x0]
80008c74:	e0 a0 04 03 	rcall	8000947a <memmove>
80008c78:	6e 08       	ld.w	r8,r7[0x0]
80008c7a:	08 08       	add	r8,r4
80008c7c:	8f 08       	st.w	r7[0x0],r8
80008c7e:	6e 28       	ld.w	r8,r7[0x8]
80008c80:	08 18       	sub	r8,r4
80008c82:	0c 94       	mov	r4,r6
80008c84:	8f 28       	st.w	r7[0x8],r8
80008c86:	c3 08       	rjmp	80008ce6 <__sfvwrite_r+0x1b6>
80008c88:	08 36       	cp.w	r6,r4
80008c8a:	5f ba       	srhi	r10
80008c8c:	6e 0c       	ld.w	r12,r7[0x0]
80008c8e:	6e 48       	ld.w	r8,r7[0x10]
80008c90:	10 3c       	cp.w	r12,r8
80008c92:	5f b8       	srhi	r8
80008c94:	f5 e8 00 08 	and	r8,r10,r8
80008c98:	f2 08 18 00 	cp.b	r8,r9
80008c9c:	c0 e0       	breq	80008cb8 <__sfvwrite_r+0x188>
80008c9e:	06 9b       	mov	r11,r3
80008ca0:	08 9a       	mov	r10,r4
80008ca2:	e0 a0 03 ec 	rcall	8000947a <memmove>
80008ca6:	6e 08       	ld.w	r8,r7[0x0]
80008ca8:	08 08       	add	r8,r4
80008caa:	0e 9b       	mov	r11,r7
80008cac:	8f 08       	st.w	r7[0x0],r8
80008cae:	0a 9c       	mov	r12,r5
80008cb0:	fe b0 fd 00 	rcall	800086b0 <_fflush_r>
80008cb4:	c1 90       	breq	80008ce6 <__sfvwrite_r+0x1b6>
80008cb6:	c8 48       	rjmp	80008dbe <__sfvwrite_r+0x28e>
80008cb8:	6e 59       	ld.w	r9,r7[0x14]
80008cba:	12 36       	cp.w	r6,r9
80008cbc:	c0 a3       	brcs	80008cd0 <__sfvwrite_r+0x1a0>
80008cbe:	6e a8       	ld.w	r8,r7[0x28]
80008cc0:	06 9a       	mov	r10,r3
80008cc2:	6e 8b       	ld.w	r11,r7[0x20]
80008cc4:	0a 9c       	mov	r12,r5
80008cc6:	5d 18       	icall	r8
80008cc8:	18 94       	mov	r4,r12
80008cca:	e0 89 00 0e 	brgt	80008ce6 <__sfvwrite_r+0x1b6>
80008cce:	c7 88       	rjmp	80008dbe <__sfvwrite_r+0x28e>
80008cd0:	0c 9a       	mov	r10,r6
80008cd2:	06 9b       	mov	r11,r3
80008cd4:	e0 a0 03 d3 	rcall	8000947a <memmove>
80008cd8:	6e 08       	ld.w	r8,r7[0x0]
80008cda:	0c 08       	add	r8,r6
80008cdc:	0c 94       	mov	r4,r6
80008cde:	8f 08       	st.w	r7[0x0],r8
80008ce0:	6e 28       	ld.w	r8,r7[0x8]
80008ce2:	0c 18       	sub	r8,r6
80008ce4:	8f 28       	st.w	r7[0x8],r8
80008ce6:	62 28       	ld.w	r8,r1[0x8]
80008ce8:	08 18       	sub	r8,r4
80008cea:	83 28       	st.w	r1[0x8],r8
80008cec:	c6 e0       	breq	80008dc8 <__sfvwrite_r+0x298>
80008cee:	08 16       	sub	r6,r4
80008cf0:	08 03       	add	r3,r4
80008cf2:	c6 fb       	rjmp	80008bd0 <__sfvwrite_r+0xa0>
80008cf4:	60 03       	ld.w	r3,r0[0x0]
80008cf6:	60 11       	ld.w	r1,r0[0x4]
80008cf8:	30 08       	mov	r8,0
80008cfa:	2f 80       	sub	r0,-8
80008cfc:	50 08       	stdsp	sp[0x0],r8
80008cfe:	58 01       	cp.w	r1,0
80008d00:	cf a0       	breq	80008cf4 <__sfvwrite_r+0x1c4>
80008d02:	40 0a       	lddsp	r10,sp[0x0]
80008d04:	58 0a       	cp.w	r10,0
80008d06:	c1 51       	brne	80008d30 <__sfvwrite_r+0x200>
80008d08:	e2 c6 ff ff 	sub	r6,r1,-1
80008d0c:	02 9a       	mov	r10,r1
80008d0e:	30 ab       	mov	r11,10
80008d10:	06 9c       	mov	r12,r3
80008d12:	e0 a0 03 05 	rcall	8000931c <memchr>
80008d16:	f8 c8 ff ff 	sub	r8,r12,-1
80008d1a:	58 0c       	cp.w	r12,0
80008d1c:	f1 d3 e1 16 	subne	r6,r8,r3
80008d20:	f9 b9 01 01 	movne	r9,1
80008d24:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008d28:	f9 b8 00 01 	moveq	r8,1
80008d2c:	fb f8 0a 00 	st.weq	sp[0x0],r8
80008d30:	02 36       	cp.w	r6,r1
80008d32:	ec 04 17 80 	movls	r4,r6
80008d36:	e2 04 17 b0 	movhi	r4,r1
80008d3a:	6e 59       	ld.w	r9,r7[0x14]
80008d3c:	6e 25       	ld.w	r5,r7[0x8]
80008d3e:	f2 05 00 05 	add	r5,r9,r5
80008d42:	0a 34       	cp.w	r4,r5
80008d44:	5f 9a       	srgt	r10
80008d46:	6e 0c       	ld.w	r12,r7[0x0]
80008d48:	6e 48       	ld.w	r8,r7[0x10]
80008d4a:	10 3c       	cp.w	r12,r8
80008d4c:	5f b8       	srhi	r8
80008d4e:	f5 e8 00 08 	and	r8,r10,r8
80008d52:	30 0a       	mov	r10,0
80008d54:	f4 08 18 00 	cp.b	r8,r10
80008d58:	c0 e0       	breq	80008d74 <__sfvwrite_r+0x244>
80008d5a:	06 9b       	mov	r11,r3
80008d5c:	0a 9a       	mov	r10,r5
80008d5e:	e0 a0 03 8e 	rcall	8000947a <memmove>
80008d62:	6e 08       	ld.w	r8,r7[0x0]
80008d64:	0a 08       	add	r8,r5
80008d66:	0e 9b       	mov	r11,r7
80008d68:	8f 08       	st.w	r7[0x0],r8
80008d6a:	40 1c       	lddsp	r12,sp[0x4]
80008d6c:	fe b0 fc a2 	rcall	800086b0 <_fflush_r>
80008d70:	c1 80       	breq	80008da0 <__sfvwrite_r+0x270>
80008d72:	c2 68       	rjmp	80008dbe <__sfvwrite_r+0x28e>
80008d74:	12 34       	cp.w	r4,r9
80008d76:	c0 a5       	brlt	80008d8a <__sfvwrite_r+0x25a>
80008d78:	6e a8       	ld.w	r8,r7[0x28]
80008d7a:	06 9a       	mov	r10,r3
80008d7c:	6e 8b       	ld.w	r11,r7[0x20]
80008d7e:	40 1c       	lddsp	r12,sp[0x4]
80008d80:	5d 18       	icall	r8
80008d82:	18 95       	mov	r5,r12
80008d84:	e0 89 00 0e 	brgt	80008da0 <__sfvwrite_r+0x270>
80008d88:	c1 b8       	rjmp	80008dbe <__sfvwrite_r+0x28e>
80008d8a:	08 9a       	mov	r10,r4
80008d8c:	06 9b       	mov	r11,r3
80008d8e:	e0 a0 03 76 	rcall	8000947a <memmove>
80008d92:	6e 08       	ld.w	r8,r7[0x0]
80008d94:	08 08       	add	r8,r4
80008d96:	08 95       	mov	r5,r4
80008d98:	8f 08       	st.w	r7[0x0],r8
80008d9a:	6e 28       	ld.w	r8,r7[0x8]
80008d9c:	08 18       	sub	r8,r4
80008d9e:	8f 28       	st.w	r7[0x8],r8
80008da0:	0a 16       	sub	r6,r5
80008da2:	c0 71       	brne	80008db0 <__sfvwrite_r+0x280>
80008da4:	0e 9b       	mov	r11,r7
80008da6:	40 1c       	lddsp	r12,sp[0x4]
80008da8:	fe b0 fc 84 	rcall	800086b0 <_fflush_r>
80008dac:	c0 91       	brne	80008dbe <__sfvwrite_r+0x28e>
80008dae:	50 06       	stdsp	sp[0x0],r6
80008db0:	64 28       	ld.w	r8,r2[0x8]
80008db2:	0a 18       	sub	r8,r5
80008db4:	85 28       	st.w	r2[0x8],r8
80008db6:	c0 90       	breq	80008dc8 <__sfvwrite_r+0x298>
80008db8:	0a 11       	sub	r1,r5
80008dba:	0a 03       	add	r3,r5
80008dbc:	ca 1b       	rjmp	80008cfe <__sfvwrite_r+0x1ce>
80008dbe:	8e 68       	ld.sh	r8,r7[0xc]
80008dc0:	a7 a8       	sbr	r8,0x6
80008dc2:	ae 68       	st.h	r7[0xc],r8
80008dc4:	3f fc       	mov	r12,-1
80008dc6:	c0 28       	rjmp	80008dca <__sfvwrite_r+0x29a>
80008dc8:	30 0c       	mov	r12,0
80008dca:	2f dd       	sub	sp,-12
80008dcc:	d8 32       	popm	r0-r7,pc
80008dce:	d7 03       	nop

80008dd0 <_fwalk>:
80008dd0:	d4 31       	pushm	r0-r7,lr
80008dd2:	30 05       	mov	r5,0
80008dd4:	16 91       	mov	r1,r11
80008dd6:	f8 c7 ff 28 	sub	r7,r12,-216
80008dda:	0a 92       	mov	r2,r5
80008ddc:	fe b0 fc f2 	rcall	800087c0 <__sfp_lock_acquire>
80008de0:	3f f3       	mov	r3,-1
80008de2:	c1 68       	rjmp	80008e0e <_fwalk+0x3e>
80008de4:	6e 26       	ld.w	r6,r7[0x8]
80008de6:	6e 14       	ld.w	r4,r7[0x4]
80008de8:	2f 46       	sub	r6,-12
80008dea:	c0 c8       	rjmp	80008e02 <_fwalk+0x32>
80008dec:	8c 08       	ld.sh	r8,r6[0x0]
80008dee:	e4 08 19 00 	cp.h	r8,r2
80008df2:	c0 70       	breq	80008e00 <_fwalk+0x30>
80008df4:	8c 18       	ld.sh	r8,r6[0x2]
80008df6:	e6 08 19 00 	cp.h	r8,r3
80008dfa:	c0 30       	breq	80008e00 <_fwalk+0x30>
80008dfc:	5d 11       	icall	r1
80008dfe:	18 45       	or	r5,r12
80008e00:	2a 46       	sub	r6,-92
80008e02:	20 14       	sub	r4,1
80008e04:	ec cc 00 0c 	sub	r12,r6,12
80008e08:	58 04       	cp.w	r4,0
80008e0a:	cf 14       	brge	80008dec <_fwalk+0x1c>
80008e0c:	6e 07       	ld.w	r7,r7[0x0]
80008e0e:	58 07       	cp.w	r7,0
80008e10:	ce a1       	brne	80008de4 <_fwalk+0x14>
80008e12:	fe b0 fc d8 	rcall	800087c2 <__sfp_lock_release>
80008e16:	0a 9c       	mov	r12,r5
80008e18:	d8 32       	popm	r0-r7,pc
80008e1a:	d7 03       	nop

80008e1c <_localeconv_r>:
80008e1c:	48 1c       	lddpc	r12,80008e20 <_localeconv_r+0x4>
80008e1e:	5e fc       	retal	r12
80008e20:	80 00       	ld.sh	r0,r0[0x0]
80008e22:	bf 94       	lsr	r4,0x1f

80008e24 <__smakebuf_r>:
80008e24:	d4 21       	pushm	r4-r7,lr
80008e26:	20 fd       	sub	sp,60
80008e28:	96 68       	ld.sh	r8,r11[0xc]
80008e2a:	16 97       	mov	r7,r11
80008e2c:	18 96       	mov	r6,r12
80008e2e:	e2 18 00 02 	andl	r8,0x2,COH
80008e32:	c3 c1       	brne	80008eaa <__smakebuf_r+0x86>
80008e34:	96 7b       	ld.sh	r11,r11[0xe]
80008e36:	f0 0b 19 00 	cp.h	r11,r8
80008e3a:	c0 55       	brlt	80008e44 <__smakebuf_r+0x20>
80008e3c:	1a 9a       	mov	r10,sp
80008e3e:	e0 a0 09 55 	rcall	8000a0e8 <_fstat_r>
80008e42:	c0 f4       	brge	80008e60 <__smakebuf_r+0x3c>
80008e44:	8e 65       	ld.sh	r5,r7[0xc]
80008e46:	0a 98       	mov	r8,r5
80008e48:	ab b8       	sbr	r8,0xb
80008e4a:	e2 15 00 80 	andl	r5,0x80,COH
80008e4e:	ae 68       	st.h	r7[0xc],r8
80008e50:	30 04       	mov	r4,0
80008e52:	e0 68 04 00 	mov	r8,1024
80008e56:	f9 b5 01 40 	movne	r5,64
80008e5a:	f0 05 17 00 	moveq	r5,r8
80008e5e:	c1 c8       	rjmp	80008e96 <__smakebuf_r+0x72>
80008e60:	40 18       	lddsp	r8,sp[0x4]
80008e62:	e2 18 f0 00 	andl	r8,0xf000,COH
80008e66:	e0 48 20 00 	cp.w	r8,8192
80008e6a:	5f 04       	sreq	r4
80008e6c:	e0 48 80 00 	cp.w	r8,32768
80008e70:	c0 e1       	brne	80008e8c <__smakebuf_r+0x68>
80008e72:	6e b9       	ld.w	r9,r7[0x2c]
80008e74:	fe c8 f0 9c 	sub	r8,pc,-3940
80008e78:	10 39       	cp.w	r9,r8
80008e7a:	c0 91       	brne	80008e8c <__smakebuf_r+0x68>
80008e7c:	8e 68       	ld.sh	r8,r7[0xc]
80008e7e:	e0 65 04 00 	mov	r5,1024
80008e82:	ab a8       	sbr	r8,0xa
80008e84:	ef 45 00 50 	st.w	r7[80],r5
80008e88:	ae 68       	st.h	r7[0xc],r8
80008e8a:	c0 68       	rjmp	80008e96 <__smakebuf_r+0x72>
80008e8c:	8e 68       	ld.sh	r8,r7[0xc]
80008e8e:	e0 65 04 00 	mov	r5,1024
80008e92:	ab b8       	sbr	r8,0xb
80008e94:	ae 68       	st.h	r7[0xc],r8
80008e96:	0a 9b       	mov	r11,r5
80008e98:	0c 9c       	mov	r12,r6
80008e9a:	c2 bc       	rcall	80008ef0 <_malloc_r>
80008e9c:	8e 68       	ld.sh	r8,r7[0xc]
80008e9e:	c0 d1       	brne	80008eb8 <__smakebuf_r+0x94>
80008ea0:	ed b8 00 09 	bld	r8,0x9
80008ea4:	c1 b0       	breq	80008eda <__smakebuf_r+0xb6>
80008ea6:	a1 b8       	sbr	r8,0x1
80008ea8:	ae 68       	st.h	r7[0xc],r8
80008eaa:	ee c8 ff b9 	sub	r8,r7,-71
80008eae:	8f 48       	st.w	r7[0x10],r8
80008eb0:	8f 08       	st.w	r7[0x0],r8
80008eb2:	30 18       	mov	r8,1
80008eb4:	8f 58       	st.w	r7[0x14],r8
80008eb6:	c1 28       	rjmp	80008eda <__smakebuf_r+0xb6>
80008eb8:	a7 b8       	sbr	r8,0x7
80008eba:	8f 4c       	st.w	r7[0x10],r12
80008ebc:	ae 68       	st.h	r7[0xc],r8
80008ebe:	8f 55       	st.w	r7[0x14],r5
80008ec0:	fe c8 06 fc 	sub	r8,pc,1788
80008ec4:	8f 0c       	st.w	r7[0x0],r12
80008ec6:	8d a8       	st.w	r6[0x28],r8
80008ec8:	58 04       	cp.w	r4,0
80008eca:	c0 80       	breq	80008eda <__smakebuf_r+0xb6>
80008ecc:	8e 7c       	ld.sh	r12,r7[0xe]
80008ece:	e0 a0 07 f5 	rcall	80009eb8 <isatty>
80008ed2:	c0 40       	breq	80008eda <__smakebuf_r+0xb6>
80008ed4:	8e 68       	ld.sh	r8,r7[0xc]
80008ed6:	a1 a8       	sbr	r8,0x0
80008ed8:	ae 68       	st.h	r7[0xc],r8
80008eda:	2f 1d       	sub	sp,-60
80008edc:	d8 22       	popm	r4-r7,pc
80008ede:	d7 03       	nop

80008ee0 <malloc>:
80008ee0:	d4 01       	pushm	lr
80008ee2:	48 38       	lddpc	r8,80008eec <malloc+0xc>
80008ee4:	18 9b       	mov	r11,r12
80008ee6:	70 0c       	ld.w	r12,r8[0x0]
80008ee8:	c0 4c       	rcall	80008ef0 <_malloc_r>
80008eea:	d8 02       	popm	pc
80008eec:	00 00       	add	r0,r0
80008eee:	00 f8       	st.b	--r0,r8

80008ef0 <_malloc_r>:
80008ef0:	d4 31       	pushm	r0-r7,lr
80008ef2:	f6 c8 ff f5 	sub	r8,r11,-11
80008ef6:	18 95       	mov	r5,r12
80008ef8:	10 97       	mov	r7,r8
80008efa:	e0 17 ff f8 	andl	r7,0xfff8
80008efe:	59 68       	cp.w	r8,22
80008f00:	f9 b7 08 10 	movls	r7,16
80008f04:	16 37       	cp.w	r7,r11
80008f06:	5f 38       	srlo	r8
80008f08:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80008f0c:	c0 50       	breq	80008f16 <_malloc_r+0x26>
80008f0e:	30 c8       	mov	r8,12
80008f10:	99 38       	st.w	r12[0xc],r8
80008f12:	e0 8f 01 ec 	bral	800092ea <_malloc_r+0x3fa>
80008f16:	e0 a0 02 d8 	rcall	800094c6 <__malloc_lock>
80008f1a:	e0 47 01 f7 	cp.w	r7,503
80008f1e:	e0 8b 00 1c 	brhi	80008f56 <_malloc_r+0x66>
80008f22:	ee 03 16 03 	lsr	r3,r7,0x3
80008f26:	4c c8       	lddpc	r8,80009054 <_malloc_r+0x164>
80008f28:	f0 03 00 38 	add	r8,r8,r3<<0x3
80008f2c:	70 36       	ld.w	r6,r8[0xc]
80008f2e:	10 36       	cp.w	r6,r8
80008f30:	c0 61       	brne	80008f3c <_malloc_r+0x4c>
80008f32:	ec c8 ff f8 	sub	r8,r6,-8
80008f36:	70 36       	ld.w	r6,r8[0xc]
80008f38:	10 36       	cp.w	r6,r8
80008f3a:	c0 c0       	breq	80008f52 <_malloc_r+0x62>
80008f3c:	6c 18       	ld.w	r8,r6[0x4]
80008f3e:	e0 18 ff fc 	andl	r8,0xfffc
80008f42:	6c 3a       	ld.w	r10,r6[0xc]
80008f44:	ec 08 00 09 	add	r9,r6,r8
80008f48:	0a 9c       	mov	r12,r5
80008f4a:	6c 28       	ld.w	r8,r6[0x8]
80008f4c:	95 28       	st.w	r10[0x8],r8
80008f4e:	91 3a       	st.w	r8[0xc],r10
80008f50:	c4 68       	rjmp	80008fdc <_malloc_r+0xec>
80008f52:	2f e3       	sub	r3,-2
80008f54:	c4 c8       	rjmp	80008fec <_malloc_r+0xfc>
80008f56:	ee 03 16 09 	lsr	r3,r7,0x9
80008f5a:	c0 41       	brne	80008f62 <_malloc_r+0x72>
80008f5c:	ee 03 16 03 	lsr	r3,r7,0x3
80008f60:	c2 68       	rjmp	80008fac <_malloc_r+0xbc>
80008f62:	58 43       	cp.w	r3,4
80008f64:	e0 8b 00 06 	brhi	80008f70 <_malloc_r+0x80>
80008f68:	ee 03 16 06 	lsr	r3,r7,0x6
80008f6c:	2c 83       	sub	r3,-56
80008f6e:	c1 f8       	rjmp	80008fac <_malloc_r+0xbc>
80008f70:	59 43       	cp.w	r3,20
80008f72:	e0 8b 00 04 	brhi	80008f7a <_malloc_r+0x8a>
80008f76:	2a 53       	sub	r3,-91
80008f78:	c1 a8       	rjmp	80008fac <_malloc_r+0xbc>
80008f7a:	e0 43 00 54 	cp.w	r3,84
80008f7e:	e0 8b 00 06 	brhi	80008f8a <_malloc_r+0x9a>
80008f82:	ee 03 16 0c 	lsr	r3,r7,0xc
80008f86:	29 23       	sub	r3,-110
80008f88:	c1 28       	rjmp	80008fac <_malloc_r+0xbc>
80008f8a:	e0 43 01 54 	cp.w	r3,340
80008f8e:	e0 8b 00 06 	brhi	80008f9a <_malloc_r+0xaa>
80008f92:	ee 03 16 0f 	lsr	r3,r7,0xf
80008f96:	28 93       	sub	r3,-119
80008f98:	c0 a8       	rjmp	80008fac <_malloc_r+0xbc>
80008f9a:	e0 43 05 54 	cp.w	r3,1364
80008f9e:	e0 88 00 04 	brls	80008fa6 <_malloc_r+0xb6>
80008fa2:	37 e3       	mov	r3,126
80008fa4:	c0 48       	rjmp	80008fac <_malloc_r+0xbc>
80008fa6:	ee 03 16 12 	lsr	r3,r7,0x12
80008faa:	28 43       	sub	r3,-124
80008fac:	4a aa       	lddpc	r10,80009054 <_malloc_r+0x164>
80008fae:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80008fb2:	74 36       	ld.w	r6,r10[0xc]
80008fb4:	c1 98       	rjmp	80008fe6 <_malloc_r+0xf6>
80008fb6:	6c 19       	ld.w	r9,r6[0x4]
80008fb8:	e0 19 ff fc 	andl	r9,0xfffc
80008fbc:	f2 07 01 0b 	sub	r11,r9,r7
80008fc0:	58 fb       	cp.w	r11,15
80008fc2:	e0 8a 00 04 	brle	80008fca <_malloc_r+0xda>
80008fc6:	20 13       	sub	r3,1
80008fc8:	c1 18       	rjmp	80008fea <_malloc_r+0xfa>
80008fca:	6c 38       	ld.w	r8,r6[0xc]
80008fcc:	58 0b       	cp.w	r11,0
80008fce:	c0 b5       	brlt	80008fe4 <_malloc_r+0xf4>
80008fd0:	6c 2a       	ld.w	r10,r6[0x8]
80008fd2:	ec 09 00 09 	add	r9,r6,r9
80008fd6:	0a 9c       	mov	r12,r5
80008fd8:	91 2a       	st.w	r8[0x8],r10
80008fda:	95 38       	st.w	r10[0xc],r8
80008fdc:	72 18       	ld.w	r8,r9[0x4]
80008fde:	a1 a8       	sbr	r8,0x0
80008fe0:	93 18       	st.w	r9[0x4],r8
80008fe2:	cb a8       	rjmp	80009156 <_malloc_r+0x266>
80008fe4:	10 96       	mov	r6,r8
80008fe6:	14 36       	cp.w	r6,r10
80008fe8:	ce 71       	brne	80008fb6 <_malloc_r+0xc6>
80008fea:	2f f3       	sub	r3,-1
80008fec:	49 aa       	lddpc	r10,80009054 <_malloc_r+0x164>
80008fee:	f4 cc ff f8 	sub	r12,r10,-8
80008ff2:	78 26       	ld.w	r6,r12[0x8]
80008ff4:	18 36       	cp.w	r6,r12
80008ff6:	c6 c0       	breq	800090ce <_malloc_r+0x1de>
80008ff8:	6c 19       	ld.w	r9,r6[0x4]
80008ffa:	e0 19 ff fc 	andl	r9,0xfffc
80008ffe:	f2 07 01 08 	sub	r8,r9,r7
80009002:	58 f8       	cp.w	r8,15
80009004:	e0 89 00 8e 	brgt	80009120 <_malloc_r+0x230>
80009008:	99 3c       	st.w	r12[0xc],r12
8000900a:	99 2c       	st.w	r12[0x8],r12
8000900c:	58 08       	cp.w	r8,0
8000900e:	c0 55       	brlt	80009018 <_malloc_r+0x128>
80009010:	ec 09 00 09 	add	r9,r6,r9
80009014:	0a 9c       	mov	r12,r5
80009016:	ce 3b       	rjmp	80008fdc <_malloc_r+0xec>
80009018:	e0 49 01 ff 	cp.w	r9,511
8000901c:	e0 8b 00 13 	brhi	80009042 <_malloc_r+0x152>
80009020:	a3 99       	lsr	r9,0x3
80009022:	f4 09 00 38 	add	r8,r10,r9<<0x3
80009026:	70 2b       	ld.w	r11,r8[0x8]
80009028:	8d 38       	st.w	r6[0xc],r8
8000902a:	8d 2b       	st.w	r6[0x8],r11
8000902c:	97 36       	st.w	r11[0xc],r6
8000902e:	91 26       	st.w	r8[0x8],r6
80009030:	a3 49       	asr	r9,0x2
80009032:	74 18       	ld.w	r8,r10[0x4]
80009034:	30 1b       	mov	r11,1
80009036:	f6 09 09 49 	lsl	r9,r11,r9
8000903a:	f1 e9 10 09 	or	r9,r8,r9
8000903e:	95 19       	st.w	r10[0x4],r9
80009040:	c4 78       	rjmp	800090ce <_malloc_r+0x1de>
80009042:	f2 0a 16 09 	lsr	r10,r9,0x9
80009046:	58 4a       	cp.w	r10,4
80009048:	e0 8b 00 08 	brhi	80009058 <_malloc_r+0x168>
8000904c:	f2 0a 16 06 	lsr	r10,r9,0x6
80009050:	2c 8a       	sub	r10,-56
80009052:	c2 18       	rjmp	80009094 <_malloc_r+0x1a4>
80009054:	00 00       	add	r0,r0
80009056:	00 fc       	st.b	--r0,r12
80009058:	59 4a       	cp.w	r10,20
8000905a:	e0 8b 00 04 	brhi	80009062 <_malloc_r+0x172>
8000905e:	2a 5a       	sub	r10,-91
80009060:	c1 a8       	rjmp	80009094 <_malloc_r+0x1a4>
80009062:	e0 4a 00 54 	cp.w	r10,84
80009066:	e0 8b 00 06 	brhi	80009072 <_malloc_r+0x182>
8000906a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000906e:	29 2a       	sub	r10,-110
80009070:	c1 28       	rjmp	80009094 <_malloc_r+0x1a4>
80009072:	e0 4a 01 54 	cp.w	r10,340
80009076:	e0 8b 00 06 	brhi	80009082 <_malloc_r+0x192>
8000907a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000907e:	28 9a       	sub	r10,-119
80009080:	c0 a8       	rjmp	80009094 <_malloc_r+0x1a4>
80009082:	e0 4a 05 54 	cp.w	r10,1364
80009086:	e0 88 00 04 	brls	8000908e <_malloc_r+0x19e>
8000908a:	37 ea       	mov	r10,126
8000908c:	c0 48       	rjmp	80009094 <_malloc_r+0x1a4>
8000908e:	f2 0a 16 12 	lsr	r10,r9,0x12
80009092:	28 4a       	sub	r10,-124
80009094:	4c 7b       	lddpc	r11,800091b0 <_malloc_r+0x2c0>
80009096:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000909a:	68 28       	ld.w	r8,r4[0x8]
8000909c:	08 38       	cp.w	r8,r4
8000909e:	c0 e1       	brne	800090ba <_malloc_r+0x1ca>
800090a0:	76 19       	ld.w	r9,r11[0x4]
800090a2:	a3 4a       	asr	r10,0x2
800090a4:	30 1e       	mov	lr,1
800090a6:	fc 0a 09 4a 	lsl	r10,lr,r10
800090aa:	f3 ea 10 0a 	or	r10,r9,r10
800090ae:	10 99       	mov	r9,r8
800090b0:	97 1a       	st.w	r11[0x4],r10
800090b2:	c0 a8       	rjmp	800090c6 <_malloc_r+0x1d6>
800090b4:	70 28       	ld.w	r8,r8[0x8]
800090b6:	08 38       	cp.w	r8,r4
800090b8:	c0 60       	breq	800090c4 <_malloc_r+0x1d4>
800090ba:	70 1a       	ld.w	r10,r8[0x4]
800090bc:	e0 1a ff fc 	andl	r10,0xfffc
800090c0:	14 39       	cp.w	r9,r10
800090c2:	cf 93       	brcs	800090b4 <_malloc_r+0x1c4>
800090c4:	70 39       	ld.w	r9,r8[0xc]
800090c6:	8d 39       	st.w	r6[0xc],r9
800090c8:	8d 28       	st.w	r6[0x8],r8
800090ca:	91 36       	st.w	r8[0xc],r6
800090cc:	93 26       	st.w	r9[0x8],r6
800090ce:	e6 08 14 02 	asr	r8,r3,0x2
800090d2:	30 1b       	mov	r11,1
800090d4:	4b 74       	lddpc	r4,800091b0 <_malloc_r+0x2c0>
800090d6:	f6 08 09 4b 	lsl	r11,r11,r8
800090da:	68 18       	ld.w	r8,r4[0x4]
800090dc:	10 3b       	cp.w	r11,r8
800090de:	e0 8b 00 6b 	brhi	800091b4 <_malloc_r+0x2c4>
800090e2:	f7 e8 00 09 	and	r9,r11,r8
800090e6:	c0 b1       	brne	800090fc <_malloc_r+0x20c>
800090e8:	e0 13 ff fc 	andl	r3,0xfffc
800090ec:	a1 7b       	lsl	r11,0x1
800090ee:	2f c3       	sub	r3,-4
800090f0:	c0 38       	rjmp	800090f6 <_malloc_r+0x206>
800090f2:	2f c3       	sub	r3,-4
800090f4:	a1 7b       	lsl	r11,0x1
800090f6:	f7 e8 00 09 	and	r9,r11,r8
800090fa:	cf c0       	breq	800090f2 <_malloc_r+0x202>
800090fc:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80009100:	06 92       	mov	r2,r3
80009102:	1c 91       	mov	r1,lr
80009104:	62 36       	ld.w	r6,r1[0xc]
80009106:	c2 d8       	rjmp	80009160 <_malloc_r+0x270>
80009108:	6c 1a       	ld.w	r10,r6[0x4]
8000910a:	e0 1a ff fc 	andl	r10,0xfffc
8000910e:	f4 07 01 08 	sub	r8,r10,r7
80009112:	58 f8       	cp.w	r8,15
80009114:	e0 8a 00 15 	brle	8000913e <_malloc_r+0x24e>
80009118:	6c 3a       	ld.w	r10,r6[0xc]
8000911a:	6c 29       	ld.w	r9,r6[0x8]
8000911c:	95 29       	st.w	r10[0x8],r9
8000911e:	93 3a       	st.w	r9[0xc],r10
80009120:	0e 99       	mov	r9,r7
80009122:	ec 07 00 07 	add	r7,r6,r7
80009126:	a1 a9       	sbr	r9,0x0
80009128:	99 37       	st.w	r12[0xc],r7
8000912a:	99 27       	st.w	r12[0x8],r7
8000912c:	8d 19       	st.w	r6[0x4],r9
8000912e:	ee 08 09 08 	st.w	r7[r8],r8
80009132:	8f 2c       	st.w	r7[0x8],r12
80009134:	8f 3c       	st.w	r7[0xc],r12
80009136:	a1 a8       	sbr	r8,0x0
80009138:	0a 9c       	mov	r12,r5
8000913a:	8f 18       	st.w	r7[0x4],r8
8000913c:	c0 d8       	rjmp	80009156 <_malloc_r+0x266>
8000913e:	6c 39       	ld.w	r9,r6[0xc]
80009140:	58 08       	cp.w	r8,0
80009142:	c0 e5       	brlt	8000915e <_malloc_r+0x26e>
80009144:	ec 0a 00 0a 	add	r10,r6,r10
80009148:	74 18       	ld.w	r8,r10[0x4]
8000914a:	a1 a8       	sbr	r8,0x0
8000914c:	0a 9c       	mov	r12,r5
8000914e:	95 18       	st.w	r10[0x4],r8
80009150:	6c 28       	ld.w	r8,r6[0x8]
80009152:	93 28       	st.w	r9[0x8],r8
80009154:	91 39       	st.w	r8[0xc],r9
80009156:	cb 9d       	rcall	800094c8 <__malloc_unlock>
80009158:	ec cc ff f8 	sub	r12,r6,-8
8000915c:	d8 32       	popm	r0-r7,pc
8000915e:	12 96       	mov	r6,r9
80009160:	02 36       	cp.w	r6,r1
80009162:	cd 31       	brne	80009108 <_malloc_r+0x218>
80009164:	2f f2       	sub	r2,-1
80009166:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000916a:	c0 30       	breq	80009170 <_malloc_r+0x280>
8000916c:	2f 81       	sub	r1,-8
8000916e:	cc bb       	rjmp	80009104 <_malloc_r+0x214>
80009170:	1c 98       	mov	r8,lr
80009172:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80009176:	c0 81       	brne	80009186 <_malloc_r+0x296>
80009178:	68 19       	ld.w	r9,r4[0x4]
8000917a:	f6 08 11 ff 	rsub	r8,r11,-1
8000917e:	f3 e8 00 08 	and	r8,r9,r8
80009182:	89 18       	st.w	r4[0x4],r8
80009184:	c0 78       	rjmp	80009192 <_malloc_r+0x2a2>
80009186:	f0 c9 00 08 	sub	r9,r8,8
8000918a:	20 13       	sub	r3,1
8000918c:	70 08       	ld.w	r8,r8[0x0]
8000918e:	12 38       	cp.w	r8,r9
80009190:	cf 10       	breq	80009172 <_malloc_r+0x282>
80009192:	a1 7b       	lsl	r11,0x1
80009194:	68 18       	ld.w	r8,r4[0x4]
80009196:	10 3b       	cp.w	r11,r8
80009198:	e0 8b 00 0e 	brhi	800091b4 <_malloc_r+0x2c4>
8000919c:	58 0b       	cp.w	r11,0
8000919e:	c0 b0       	breq	800091b4 <_malloc_r+0x2c4>
800091a0:	04 93       	mov	r3,r2
800091a2:	c0 38       	rjmp	800091a8 <_malloc_r+0x2b8>
800091a4:	2f c3       	sub	r3,-4
800091a6:	a1 7b       	lsl	r11,0x1
800091a8:	f7 e8 00 09 	and	r9,r11,r8
800091ac:	ca 81       	brne	800090fc <_malloc_r+0x20c>
800091ae:	cf bb       	rjmp	800091a4 <_malloc_r+0x2b4>
800091b0:	00 00       	add	r0,r0
800091b2:	00 fc       	st.b	--r0,r12
800091b4:	68 23       	ld.w	r3,r4[0x8]
800091b6:	66 12       	ld.w	r2,r3[0x4]
800091b8:	e0 12 ff fc 	andl	r2,0xfffc
800091bc:	0e 32       	cp.w	r2,r7
800091be:	5f 39       	srlo	r9
800091c0:	e4 07 01 08 	sub	r8,r2,r7
800091c4:	58 f8       	cp.w	r8,15
800091c6:	5f aa       	srle	r10
800091c8:	f5 e9 10 09 	or	r9,r10,r9
800091cc:	e0 80 00 9a 	breq	80009300 <_malloc_r+0x410>
800091d0:	4c 78       	lddpc	r8,800092ec <_malloc_r+0x3fc>
800091d2:	70 01       	ld.w	r1,r8[0x0]
800091d4:	4c 78       	lddpc	r8,800092f0 <_malloc_r+0x400>
800091d6:	2f 01       	sub	r1,-16
800091d8:	70 08       	ld.w	r8,r8[0x0]
800091da:	0e 01       	add	r1,r7
800091dc:	5b f8       	cp.w	r8,-1
800091de:	c0 40       	breq	800091e6 <_malloc_r+0x2f6>
800091e0:	28 11       	sub	r1,-127
800091e2:	e0 11 ff 80 	andl	r1,0xff80
800091e6:	02 9b       	mov	r11,r1
800091e8:	0a 9c       	mov	r12,r5
800091ea:	e0 a0 05 e3 	rcall	80009db0 <_sbrk_r>
800091ee:	18 96       	mov	r6,r12
800091f0:	5b fc       	cp.w	r12,-1
800091f2:	c6 e0       	breq	800092ce <_malloc_r+0x3de>
800091f4:	e6 02 00 08 	add	r8,r3,r2
800091f8:	10 3c       	cp.w	r12,r8
800091fa:	c0 32       	brcc	80009200 <_malloc_r+0x310>
800091fc:	08 33       	cp.w	r3,r4
800091fe:	c6 81       	brne	800092ce <_malloc_r+0x3de>
80009200:	4b da       	lddpc	r10,800092f4 <_malloc_r+0x404>
80009202:	74 09       	ld.w	r9,r10[0x0]
80009204:	e2 09 00 09 	add	r9,r1,r9
80009208:	95 09       	st.w	r10[0x0],r9
8000920a:	10 36       	cp.w	r6,r8
8000920c:	c0 a1       	brne	80009220 <_malloc_r+0x330>
8000920e:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80009212:	c0 71       	brne	80009220 <_malloc_r+0x330>
80009214:	e2 02 00 02 	add	r2,r1,r2
80009218:	68 28       	ld.w	r8,r4[0x8]
8000921a:	a1 a2       	sbr	r2,0x0
8000921c:	91 12       	st.w	r8[0x4],r2
8000921e:	c4 c8       	rjmp	800092b6 <_malloc_r+0x3c6>
80009220:	4b 4a       	lddpc	r10,800092f0 <_malloc_r+0x400>
80009222:	74 0b       	ld.w	r11,r10[0x0]
80009224:	5b fb       	cp.w	r11,-1
80009226:	c0 31       	brne	8000922c <_malloc_r+0x33c>
80009228:	95 06       	st.w	r10[0x0],r6
8000922a:	c0 68       	rjmp	80009236 <_malloc_r+0x346>
8000922c:	ec 09 00 09 	add	r9,r6,r9
80009230:	4b 1a       	lddpc	r10,800092f4 <_malloc_r+0x404>
80009232:	10 19       	sub	r9,r8
80009234:	95 09       	st.w	r10[0x0],r9
80009236:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000923a:	f0 09 11 08 	rsub	r9,r8,8
8000923e:	58 08       	cp.w	r8,0
80009240:	f2 08 17 10 	movne	r8,r9
80009244:	ed d8 e1 06 	addne	r6,r6,r8
80009248:	28 08       	sub	r8,-128
8000924a:	ec 01 00 01 	add	r1,r6,r1
8000924e:	0a 9c       	mov	r12,r5
80009250:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80009254:	f0 01 01 01 	sub	r1,r8,r1
80009258:	02 9b       	mov	r11,r1
8000925a:	e0 a0 05 ab 	rcall	80009db0 <_sbrk_r>
8000925e:	4a 68       	lddpc	r8,800092f4 <_malloc_r+0x404>
80009260:	5b fc       	cp.w	r12,-1
80009262:	ec 0c 17 00 	moveq	r12,r6
80009266:	f9 b1 00 00 	moveq	r1,0
8000926a:	70 09       	ld.w	r9,r8[0x0]
8000926c:	0c 1c       	sub	r12,r6
8000926e:	89 26       	st.w	r4[0x8],r6
80009270:	02 0c       	add	r12,r1
80009272:	12 01       	add	r1,r9
80009274:	a1 ac       	sbr	r12,0x0
80009276:	91 01       	st.w	r8[0x0],r1
80009278:	8d 1c       	st.w	r6[0x4],r12
8000927a:	08 33       	cp.w	r3,r4
8000927c:	c1 d0       	breq	800092b6 <_malloc_r+0x3c6>
8000927e:	58 f2       	cp.w	r2,15
80009280:	e0 8b 00 05 	brhi	8000928a <_malloc_r+0x39a>
80009284:	30 18       	mov	r8,1
80009286:	8d 18       	st.w	r6[0x4],r8
80009288:	c2 38       	rjmp	800092ce <_malloc_r+0x3de>
8000928a:	30 59       	mov	r9,5
8000928c:	20 c2       	sub	r2,12
8000928e:	e0 12 ff f8 	andl	r2,0xfff8
80009292:	e6 02 00 08 	add	r8,r3,r2
80009296:	91 29       	st.w	r8[0x8],r9
80009298:	91 19       	st.w	r8[0x4],r9
8000929a:	66 18       	ld.w	r8,r3[0x4]
8000929c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800092a0:	e5 e8 10 08 	or	r8,r2,r8
800092a4:	87 18       	st.w	r3[0x4],r8
800092a6:	58 f2       	cp.w	r2,15
800092a8:	e0 88 00 07 	brls	800092b6 <_malloc_r+0x3c6>
800092ac:	e6 cb ff f8 	sub	r11,r3,-8
800092b0:	0a 9c       	mov	r12,r5
800092b2:	fe b0 fb 77 	rcall	800089a0 <_free_r>
800092b6:	49 19       	lddpc	r9,800092f8 <_malloc_r+0x408>
800092b8:	72 0a       	ld.w	r10,r9[0x0]
800092ba:	48 f8       	lddpc	r8,800092f4 <_malloc_r+0x404>
800092bc:	70 08       	ld.w	r8,r8[0x0]
800092be:	14 38       	cp.w	r8,r10
800092c0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800092c4:	48 e9       	lddpc	r9,800092fc <_malloc_r+0x40c>
800092c6:	72 0a       	ld.w	r10,r9[0x0]
800092c8:	14 38       	cp.w	r8,r10
800092ca:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800092ce:	68 28       	ld.w	r8,r4[0x8]
800092d0:	70 18       	ld.w	r8,r8[0x4]
800092d2:	e0 18 ff fc 	andl	r8,0xfffc
800092d6:	0e 38       	cp.w	r8,r7
800092d8:	5f 39       	srlo	r9
800092da:	0e 18       	sub	r8,r7
800092dc:	58 f8       	cp.w	r8,15
800092de:	5f aa       	srle	r10
800092e0:	f5 e9 10 09 	or	r9,r10,r9
800092e4:	c0 e0       	breq	80009300 <_malloc_r+0x410>
800092e6:	0a 9c       	mov	r12,r5
800092e8:	cf 0c       	rcall	800094c8 <__malloc_unlock>
800092ea:	d8 3a       	popm	r0-r7,pc,r12=0
800092ec:	00 00       	add	r0,r0
800092ee:	06 14       	sub	r4,r3
800092f0:	00 00       	add	r0,r0
800092f2:	05 08       	ld.w	r8,r2++
800092f4:	00 00       	add	r0,r0
800092f6:	06 18       	sub	r8,r3
800092f8:	00 00       	add	r0,r0
800092fa:	06 10       	sub	r0,r3
800092fc:	00 00       	add	r0,r0
800092fe:	06 0c       	add	r12,r3
80009300:	68 26       	ld.w	r6,r4[0x8]
80009302:	a1 a8       	sbr	r8,0x0
80009304:	0e 99       	mov	r9,r7
80009306:	a1 a9       	sbr	r9,0x0
80009308:	8d 19       	st.w	r6[0x4],r9
8000930a:	ec 07 00 07 	add	r7,r6,r7
8000930e:	0a 9c       	mov	r12,r5
80009310:	89 27       	st.w	r4[0x8],r7
80009312:	8f 18       	st.w	r7[0x4],r8
80009314:	cd ac       	rcall	800094c8 <__malloc_unlock>
80009316:	ec cc ff f8 	sub	r12,r6,-8
8000931a:	d8 32       	popm	r0-r7,pc

8000931c <memchr>:
8000931c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80009320:	c0 68       	rjmp	8000932c <memchr+0x10>
80009322:	20 1a       	sub	r10,1
80009324:	19 88       	ld.ub	r8,r12[0x0]
80009326:	16 38       	cp.w	r8,r11
80009328:	5e 0c       	reteq	r12
8000932a:	2f fc       	sub	r12,-1
8000932c:	58 0a       	cp.w	r10,0
8000932e:	cf a1       	brne	80009322 <memchr+0x6>
80009330:	5e fa       	retal	r10

80009332 <memcpy>:
80009332:	58 8a       	cp.w	r10,8
80009334:	c2 f5       	brlt	80009392 <memcpy+0x60>
80009336:	f9 eb 10 09 	or	r9,r12,r11
8000933a:	e2 19 00 03 	andl	r9,0x3,COH
8000933e:	e0 81 00 97 	brne	8000946c <memcpy+0x13a>
80009342:	e0 4a 00 20 	cp.w	r10,32
80009346:	c3 b4       	brge	800093bc <memcpy+0x8a>
80009348:	f4 08 14 02 	asr	r8,r10,0x2
8000934c:	f0 09 11 08 	rsub	r9,r8,8
80009350:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009354:	76 69       	ld.w	r9,r11[0x18]
80009356:	99 69       	st.w	r12[0x18],r9
80009358:	76 59       	ld.w	r9,r11[0x14]
8000935a:	99 59       	st.w	r12[0x14],r9
8000935c:	76 49       	ld.w	r9,r11[0x10]
8000935e:	99 49       	st.w	r12[0x10],r9
80009360:	76 39       	ld.w	r9,r11[0xc]
80009362:	99 39       	st.w	r12[0xc],r9
80009364:	76 29       	ld.w	r9,r11[0x8]
80009366:	99 29       	st.w	r12[0x8],r9
80009368:	76 19       	ld.w	r9,r11[0x4]
8000936a:	99 19       	st.w	r12[0x4],r9
8000936c:	76 09       	ld.w	r9,r11[0x0]
8000936e:	99 09       	st.w	r12[0x0],r9
80009370:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80009374:	f8 08 00 28 	add	r8,r12,r8<<0x2
80009378:	e0 1a 00 03 	andl	r10,0x3
8000937c:	f4 0a 11 04 	rsub	r10,r10,4
80009380:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009384:	17 a9       	ld.ub	r9,r11[0x2]
80009386:	b0 a9       	st.b	r8[0x2],r9
80009388:	17 99       	ld.ub	r9,r11[0x1]
8000938a:	b0 99       	st.b	r8[0x1],r9
8000938c:	17 89       	ld.ub	r9,r11[0x0]
8000938e:	b0 89       	st.b	r8[0x0],r9
80009390:	5e fc       	retal	r12
80009392:	f4 0a 11 09 	rsub	r10,r10,9
80009396:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000939a:	17 f9       	ld.ub	r9,r11[0x7]
8000939c:	b8 f9       	st.b	r12[0x7],r9
8000939e:	17 e9       	ld.ub	r9,r11[0x6]
800093a0:	b8 e9       	st.b	r12[0x6],r9
800093a2:	17 d9       	ld.ub	r9,r11[0x5]
800093a4:	b8 d9       	st.b	r12[0x5],r9
800093a6:	17 c9       	ld.ub	r9,r11[0x4]
800093a8:	b8 c9       	st.b	r12[0x4],r9
800093aa:	17 b9       	ld.ub	r9,r11[0x3]
800093ac:	b8 b9       	st.b	r12[0x3],r9
800093ae:	17 a9       	ld.ub	r9,r11[0x2]
800093b0:	b8 a9       	st.b	r12[0x2],r9
800093b2:	17 99       	ld.ub	r9,r11[0x1]
800093b4:	b8 99       	st.b	r12[0x1],r9
800093b6:	17 89       	ld.ub	r9,r11[0x0]
800093b8:	b8 89       	st.b	r12[0x0],r9
800093ba:	5e fc       	retal	r12
800093bc:	eb cd 40 c0 	pushm	r6-r7,lr
800093c0:	18 99       	mov	r9,r12
800093c2:	22 0a       	sub	r10,32
800093c4:	b7 07       	ld.d	r6,r11++
800093c6:	b3 26       	st.d	r9++,r6
800093c8:	b7 07       	ld.d	r6,r11++
800093ca:	b3 26       	st.d	r9++,r6
800093cc:	b7 07       	ld.d	r6,r11++
800093ce:	b3 26       	st.d	r9++,r6
800093d0:	b7 07       	ld.d	r6,r11++
800093d2:	b3 26       	st.d	r9++,r6
800093d4:	22 0a       	sub	r10,32
800093d6:	cf 74       	brge	800093c4 <memcpy+0x92>
800093d8:	2f 0a       	sub	r10,-16
800093da:	c0 65       	brlt	800093e6 <memcpy+0xb4>
800093dc:	b7 07       	ld.d	r6,r11++
800093de:	b3 26       	st.d	r9++,r6
800093e0:	b7 07       	ld.d	r6,r11++
800093e2:	b3 26       	st.d	r9++,r6
800093e4:	21 0a       	sub	r10,16
800093e6:	5c 3a       	neg	r10
800093e8:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800093ec:	d7 03       	nop
800093ee:	d7 03       	nop
800093f0:	f7 36 00 0e 	ld.ub	r6,r11[14]
800093f4:	f3 66 00 0e 	st.b	r9[14],r6
800093f8:	f7 36 00 0d 	ld.ub	r6,r11[13]
800093fc:	f3 66 00 0d 	st.b	r9[13],r6
80009400:	f7 36 00 0c 	ld.ub	r6,r11[12]
80009404:	f3 66 00 0c 	st.b	r9[12],r6
80009408:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000940c:	f3 66 00 0b 	st.b	r9[11],r6
80009410:	f7 36 00 0a 	ld.ub	r6,r11[10]
80009414:	f3 66 00 0a 	st.b	r9[10],r6
80009418:	f7 36 00 09 	ld.ub	r6,r11[9]
8000941c:	f3 66 00 09 	st.b	r9[9],r6
80009420:	f7 36 00 08 	ld.ub	r6,r11[8]
80009424:	f3 66 00 08 	st.b	r9[8],r6
80009428:	f7 36 00 07 	ld.ub	r6,r11[7]
8000942c:	f3 66 00 07 	st.b	r9[7],r6
80009430:	f7 36 00 06 	ld.ub	r6,r11[6]
80009434:	f3 66 00 06 	st.b	r9[6],r6
80009438:	f7 36 00 05 	ld.ub	r6,r11[5]
8000943c:	f3 66 00 05 	st.b	r9[5],r6
80009440:	f7 36 00 04 	ld.ub	r6,r11[4]
80009444:	f3 66 00 04 	st.b	r9[4],r6
80009448:	f7 36 00 03 	ld.ub	r6,r11[3]
8000944c:	f3 66 00 03 	st.b	r9[3],r6
80009450:	f7 36 00 02 	ld.ub	r6,r11[2]
80009454:	f3 66 00 02 	st.b	r9[2],r6
80009458:	f7 36 00 01 	ld.ub	r6,r11[1]
8000945c:	f3 66 00 01 	st.b	r9[1],r6
80009460:	f7 36 00 00 	ld.ub	r6,r11[0]
80009464:	f3 66 00 00 	st.b	r9[0],r6
80009468:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000946c:	20 1a       	sub	r10,1
8000946e:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80009472:	f8 0a 0b 09 	st.b	r12[r10],r9
80009476:	cf b1       	brne	8000946c <memcpy+0x13a>
80009478:	5e fc       	retal	r12

8000947a <memmove>:
8000947a:	d4 01       	pushm	lr
8000947c:	18 3b       	cp.w	r11,r12
8000947e:	c1 92       	brcc	800094b0 <memmove+0x36>
80009480:	f6 0a 00 09 	add	r9,r11,r10
80009484:	12 3c       	cp.w	r12,r9
80009486:	c1 52       	brcc	800094b0 <memmove+0x36>
80009488:	f8 0a 00 0b 	add	r11,r12,r10
8000948c:	30 08       	mov	r8,0
8000948e:	c0 68       	rjmp	8000949a <memmove+0x20>
80009490:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80009494:	20 1a       	sub	r10,1
80009496:	f6 08 0b 0e 	st.b	r11[r8],lr
8000949a:	20 18       	sub	r8,1
8000949c:	58 0a       	cp.w	r10,0
8000949e:	cf 91       	brne	80009490 <memmove+0x16>
800094a0:	d8 02       	popm	pc
800094a2:	f6 08 07 09 	ld.ub	r9,r11[r8]
800094a6:	20 1a       	sub	r10,1
800094a8:	f8 08 0b 09 	st.b	r12[r8],r9
800094ac:	2f f8       	sub	r8,-1
800094ae:	c0 28       	rjmp	800094b2 <memmove+0x38>
800094b0:	30 08       	mov	r8,0
800094b2:	58 0a       	cp.w	r10,0
800094b4:	cf 71       	brne	800094a2 <memmove+0x28>
800094b6:	d8 02       	popm	pc

800094b8 <memset>:
800094b8:	18 98       	mov	r8,r12
800094ba:	c0 38       	rjmp	800094c0 <memset+0x8>
800094bc:	10 cb       	st.b	r8++,r11
800094be:	20 1a       	sub	r10,1
800094c0:	58 0a       	cp.w	r10,0
800094c2:	cf d1       	brne	800094bc <memset+0x4>
800094c4:	5e fc       	retal	r12

800094c6 <__malloc_lock>:
800094c6:	5e fc       	retal	r12

800094c8 <__malloc_unlock>:
800094c8:	5e fc       	retal	r12

800094ca <__hi0bits>:
800094ca:	18 98       	mov	r8,r12
800094cc:	e0 1c 00 00 	andl	r12,0x0
800094d0:	f0 09 15 10 	lsl	r9,r8,0x10
800094d4:	58 0c       	cp.w	r12,0
800094d6:	f2 08 17 00 	moveq	r8,r9
800094da:	f9 bc 00 10 	moveq	r12,16
800094de:	f9 bc 01 00 	movne	r12,0
800094e2:	10 9a       	mov	r10,r8
800094e4:	f0 09 15 08 	lsl	r9,r8,0x8
800094e8:	e6 1a ff 00 	andh	r10,0xff00,COH
800094ec:	f7 bc 00 f8 	subeq	r12,-8
800094f0:	f2 08 17 00 	moveq	r8,r9
800094f4:	10 9a       	mov	r10,r8
800094f6:	f0 09 15 04 	lsl	r9,r8,0x4
800094fa:	e6 1a f0 00 	andh	r10,0xf000,COH
800094fe:	f7 bc 00 fc 	subeq	r12,-4
80009502:	f2 08 17 00 	moveq	r8,r9
80009506:	10 9a       	mov	r10,r8
80009508:	f0 09 15 02 	lsl	r9,r8,0x2
8000950c:	e6 1a c0 00 	andh	r10,0xc000,COH
80009510:	f7 bc 00 fe 	subeq	r12,-2
80009514:	f2 08 17 00 	moveq	r8,r9
80009518:	58 08       	cp.w	r8,0
8000951a:	5e 5c       	retlt	r12
8000951c:	ed b8 00 1e 	bld	r8,0x1e
80009520:	f9 bc 01 20 	movne	r12,32
80009524:	f7 bc 00 ff 	subeq	r12,-1
80009528:	5e fc       	retal	r12

8000952a <__lo0bits>:
8000952a:	18 99       	mov	r9,r12
8000952c:	78 08       	ld.w	r8,r12[0x0]
8000952e:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80009532:	c1 50       	breq	8000955c <__lo0bits+0x32>
80009534:	ed b8 00 00 	bld	r8,0x0
80009538:	c0 21       	brne	8000953c <__lo0bits+0x12>
8000953a:	5e fd       	retal	0
8000953c:	10 9b       	mov	r11,r8
8000953e:	f0 0a 16 01 	lsr	r10,r8,0x1
80009542:	e2 1b 00 02 	andl	r11,0x2,COH
80009546:	a3 88       	lsr	r8,0x2
80009548:	58 0b       	cp.w	r11,0
8000954a:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000954e:	f9 bc 01 01 	movne	r12,1
80009552:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80009556:	f9 bc 00 02 	moveq	r12,2
8000955a:	5e fc       	retal	r12
8000955c:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80009560:	f0 0b 16 10 	lsr	r11,r8,0x10
80009564:	58 0a       	cp.w	r10,0
80009566:	f6 08 17 00 	moveq	r8,r11
8000956a:	f9 bc 00 10 	moveq	r12,16
8000956e:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80009572:	f0 0a 16 08 	lsr	r10,r8,0x8
80009576:	58 0b       	cp.w	r11,0
80009578:	f7 bc 00 f8 	subeq	r12,-8
8000957c:	f4 08 17 00 	moveq	r8,r10
80009580:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80009584:	f0 0a 16 04 	lsr	r10,r8,0x4
80009588:	58 0b       	cp.w	r11,0
8000958a:	f7 bc 00 fc 	subeq	r12,-4
8000958e:	f4 08 17 00 	moveq	r8,r10
80009592:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80009596:	f0 0a 16 02 	lsr	r10,r8,0x2
8000959a:	58 0b       	cp.w	r11,0
8000959c:	f7 bc 00 fe 	subeq	r12,-2
800095a0:	f4 08 17 00 	moveq	r8,r10
800095a4:	ed b8 00 00 	bld	r8,0x0
800095a8:	c0 60       	breq	800095b4 <__lo0bits+0x8a>
800095aa:	a1 98       	lsr	r8,0x1
800095ac:	c0 31       	brne	800095b2 <__lo0bits+0x88>
800095ae:	32 0c       	mov	r12,32
800095b0:	5e fc       	retal	r12
800095b2:	2f fc       	sub	r12,-1
800095b4:	93 08       	st.w	r9[0x0],r8
800095b6:	5e fc       	retal	r12

800095b8 <__mcmp>:
800095b8:	d4 01       	pushm	lr
800095ba:	18 98       	mov	r8,r12
800095bc:	76 49       	ld.w	r9,r11[0x10]
800095be:	78 4c       	ld.w	r12,r12[0x10]
800095c0:	12 1c       	sub	r12,r9
800095c2:	c1 31       	brne	800095e8 <__mcmp+0x30>
800095c4:	2f b9       	sub	r9,-5
800095c6:	a3 69       	lsl	r9,0x2
800095c8:	12 0b       	add	r11,r9
800095ca:	f0 09 00 09 	add	r9,r8,r9
800095ce:	2e c8       	sub	r8,-20
800095d0:	13 4e       	ld.w	lr,--r9
800095d2:	17 4a       	ld.w	r10,--r11
800095d4:	14 3e       	cp.w	lr,r10
800095d6:	c0 60       	breq	800095e2 <__mcmp+0x2a>
800095d8:	f9 bc 03 ff 	movlo	r12,-1
800095dc:	f9 bc 02 01 	movhs	r12,1
800095e0:	d8 02       	popm	pc
800095e2:	10 39       	cp.w	r9,r8
800095e4:	fe 9b ff f6 	brhi	800095d0 <__mcmp+0x18>
800095e8:	d8 02       	popm	pc
800095ea:	d7 03       	nop

800095ec <_Bfree>:
800095ec:	d4 21       	pushm	r4-r7,lr
800095ee:	18 97       	mov	r7,r12
800095f0:	16 95       	mov	r5,r11
800095f2:	78 96       	ld.w	r6,r12[0x24]
800095f4:	58 06       	cp.w	r6,0
800095f6:	c0 91       	brne	80009608 <_Bfree+0x1c>
800095f8:	31 0c       	mov	r12,16
800095fa:	fe b0 fc 73 	rcall	80008ee0 <malloc>
800095fe:	99 36       	st.w	r12[0xc],r6
80009600:	8f 9c       	st.w	r7[0x24],r12
80009602:	99 16       	st.w	r12[0x4],r6
80009604:	99 26       	st.w	r12[0x8],r6
80009606:	99 06       	st.w	r12[0x0],r6
80009608:	58 05       	cp.w	r5,0
8000960a:	c0 90       	breq	8000961c <_Bfree+0x30>
8000960c:	6a 19       	ld.w	r9,r5[0x4]
8000960e:	6e 98       	ld.w	r8,r7[0x24]
80009610:	70 38       	ld.w	r8,r8[0xc]
80009612:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80009616:	8b 0a       	st.w	r5[0x0],r10
80009618:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000961c:	d8 22       	popm	r4-r7,pc
8000961e:	d7 03       	nop

80009620 <_Balloc>:
80009620:	d4 21       	pushm	r4-r7,lr
80009622:	18 97       	mov	r7,r12
80009624:	16 96       	mov	r6,r11
80009626:	78 95       	ld.w	r5,r12[0x24]
80009628:	58 05       	cp.w	r5,0
8000962a:	c0 91       	brne	8000963c <_Balloc+0x1c>
8000962c:	31 0c       	mov	r12,16
8000962e:	fe b0 fc 59 	rcall	80008ee0 <malloc>
80009632:	99 35       	st.w	r12[0xc],r5
80009634:	8f 9c       	st.w	r7[0x24],r12
80009636:	99 15       	st.w	r12[0x4],r5
80009638:	99 25       	st.w	r12[0x8],r5
8000963a:	99 05       	st.w	r12[0x0],r5
8000963c:	6e 95       	ld.w	r5,r7[0x24]
8000963e:	6a 38       	ld.w	r8,r5[0xc]
80009640:	58 08       	cp.w	r8,0
80009642:	c0 b1       	brne	80009658 <_Balloc+0x38>
80009644:	31 0a       	mov	r10,16
80009646:	30 4b       	mov	r11,4
80009648:	0e 9c       	mov	r12,r7
8000964a:	e0 a0 04 a7 	rcall	80009f98 <_calloc_r>
8000964e:	8b 3c       	st.w	r5[0xc],r12
80009650:	6e 98       	ld.w	r8,r7[0x24]
80009652:	70 3c       	ld.w	r12,r8[0xc]
80009654:	58 0c       	cp.w	r12,0
80009656:	c1 b0       	breq	8000968c <_Balloc+0x6c>
80009658:	6e 98       	ld.w	r8,r7[0x24]
8000965a:	70 38       	ld.w	r8,r8[0xc]
8000965c:	f0 06 00 28 	add	r8,r8,r6<<0x2
80009660:	70 0c       	ld.w	r12,r8[0x0]
80009662:	58 0c       	cp.w	r12,0
80009664:	c0 40       	breq	8000966c <_Balloc+0x4c>
80009666:	78 09       	ld.w	r9,r12[0x0]
80009668:	91 09       	st.w	r8[0x0],r9
8000966a:	c0 e8       	rjmp	80009686 <_Balloc+0x66>
8000966c:	0e 9c       	mov	r12,r7
8000966e:	30 17       	mov	r7,1
80009670:	0e 9b       	mov	r11,r7
80009672:	ee 06 09 47 	lsl	r7,r7,r6
80009676:	ee ca ff fb 	sub	r10,r7,-5
8000967a:	a3 6a       	lsl	r10,0x2
8000967c:	e0 a0 04 8e 	rcall	80009f98 <_calloc_r>
80009680:	c0 60       	breq	8000968c <_Balloc+0x6c>
80009682:	99 16       	st.w	r12[0x4],r6
80009684:	99 27       	st.w	r12[0x8],r7
80009686:	30 08       	mov	r8,0
80009688:	99 38       	st.w	r12[0xc],r8
8000968a:	99 48       	st.w	r12[0x10],r8
8000968c:	d8 22       	popm	r4-r7,pc
8000968e:	d7 03       	nop

80009690 <__d2b>:
80009690:	d4 31       	pushm	r0-r7,lr
80009692:	20 2d       	sub	sp,8
80009694:	16 93       	mov	r3,r11
80009696:	12 96       	mov	r6,r9
80009698:	10 95       	mov	r5,r8
8000969a:	14 92       	mov	r2,r10
8000969c:	30 1b       	mov	r11,1
8000969e:	cc 1f       	rcall	80009620 <_Balloc>
800096a0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800096a4:	50 09       	stdsp	sp[0x0],r9
800096a6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800096aa:	b5 a9       	sbr	r9,0x14
800096ac:	f0 01 16 14 	lsr	r1,r8,0x14
800096b0:	fb f9 1a 00 	st.wne	sp[0x0],r9
800096b4:	18 94       	mov	r4,r12
800096b6:	58 02       	cp.w	r2,0
800096b8:	c1 d0       	breq	800096f2 <__d2b+0x62>
800096ba:	fa cc ff f8 	sub	r12,sp,-8
800096be:	18 d2       	st.w	--r12,r2
800096c0:	c3 5f       	rcall	8000952a <__lo0bits>
800096c2:	40 18       	lddsp	r8,sp[0x4]
800096c4:	c0 d0       	breq	800096de <__d2b+0x4e>
800096c6:	40 09       	lddsp	r9,sp[0x0]
800096c8:	f8 0a 11 20 	rsub	r10,r12,32
800096cc:	f2 0a 09 4a 	lsl	r10,r9,r10
800096d0:	f5 e8 10 08 	or	r8,r10,r8
800096d4:	89 58       	st.w	r4[0x14],r8
800096d6:	f2 0c 0a 49 	lsr	r9,r9,r12
800096da:	50 09       	stdsp	sp[0x0],r9
800096dc:	c0 28       	rjmp	800096e0 <__d2b+0x50>
800096de:	89 58       	st.w	r4[0x14],r8
800096e0:	40 08       	lddsp	r8,sp[0x0]
800096e2:	58 08       	cp.w	r8,0
800096e4:	f9 b3 01 02 	movne	r3,2
800096e8:	f9 b3 00 01 	moveq	r3,1
800096ec:	89 68       	st.w	r4[0x18],r8
800096ee:	89 43       	st.w	r4[0x10],r3
800096f0:	c0 88       	rjmp	80009700 <__d2b+0x70>
800096f2:	1a 9c       	mov	r12,sp
800096f4:	c1 bf       	rcall	8000952a <__lo0bits>
800096f6:	30 13       	mov	r3,1
800096f8:	40 08       	lddsp	r8,sp[0x0]
800096fa:	2e 0c       	sub	r12,-32
800096fc:	89 43       	st.w	r4[0x10],r3
800096fe:	89 58       	st.w	r4[0x14],r8
80009700:	58 01       	cp.w	r1,0
80009702:	c0 90       	breq	80009714 <__d2b+0x84>
80009704:	e2 c1 04 33 	sub	r1,r1,1075
80009708:	18 01       	add	r1,r12
8000970a:	8d 01       	st.w	r6[0x0],r1
8000970c:	f8 0c 11 35 	rsub	r12,r12,53
80009710:	8b 0c       	st.w	r5[0x0],r12
80009712:	c0 c8       	rjmp	8000972a <__d2b+0x9a>
80009714:	e6 c8 ff fc 	sub	r8,r3,-4
80009718:	f8 cc 04 32 	sub	r12,r12,1074
8000971c:	a5 73       	lsl	r3,0x5
8000971e:	8d 0c       	st.w	r6[0x0],r12
80009720:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80009724:	cd 3e       	rcall	800094ca <__hi0bits>
80009726:	18 13       	sub	r3,r12
80009728:	8b 03       	st.w	r5[0x0],r3
8000972a:	08 9c       	mov	r12,r4
8000972c:	2f ed       	sub	sp,-8
8000972e:	d8 32       	popm	r0-r7,pc

80009730 <__mdiff>:
80009730:	d4 31       	pushm	r0-r7,lr
80009732:	74 48       	ld.w	r8,r10[0x10]
80009734:	76 45       	ld.w	r5,r11[0x10]
80009736:	16 97       	mov	r7,r11
80009738:	14 96       	mov	r6,r10
8000973a:	10 15       	sub	r5,r8
8000973c:	c1 31       	brne	80009762 <__mdiff+0x32>
8000973e:	2f b8       	sub	r8,-5
80009740:	ee ce ff ec 	sub	lr,r7,-20
80009744:	a3 68       	lsl	r8,0x2
80009746:	f4 08 00 0b 	add	r11,r10,r8
8000974a:	ee 08 00 08 	add	r8,r7,r8
8000974e:	11 4a       	ld.w	r10,--r8
80009750:	17 49       	ld.w	r9,--r11
80009752:	12 3a       	cp.w	r10,r9
80009754:	c0 30       	breq	8000975a <__mdiff+0x2a>
80009756:	c0 e2       	brcc	80009772 <__mdiff+0x42>
80009758:	c0 78       	rjmp	80009766 <__mdiff+0x36>
8000975a:	1c 38       	cp.w	r8,lr
8000975c:	fe 9b ff f9 	brhi	8000974e <__mdiff+0x1e>
80009760:	c4 98       	rjmp	800097f2 <__mdiff+0xc2>
80009762:	58 05       	cp.w	r5,0
80009764:	c0 64       	brge	80009770 <__mdiff+0x40>
80009766:	0e 98       	mov	r8,r7
80009768:	30 15       	mov	r5,1
8000976a:	0c 97       	mov	r7,r6
8000976c:	10 96       	mov	r6,r8
8000976e:	c0 28       	rjmp	80009772 <__mdiff+0x42>
80009770:	30 05       	mov	r5,0
80009772:	6e 1b       	ld.w	r11,r7[0x4]
80009774:	c5 6f       	rcall	80009620 <_Balloc>
80009776:	6e 49       	ld.w	r9,r7[0x10]
80009778:	6c 44       	ld.w	r4,r6[0x10]
8000977a:	99 35       	st.w	r12[0xc],r5
8000977c:	2f b4       	sub	r4,-5
8000977e:	f2 c5 ff fb 	sub	r5,r9,-5
80009782:	ec 04 00 24 	add	r4,r6,r4<<0x2
80009786:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000978a:	2e c6       	sub	r6,-20
8000978c:	2e c7       	sub	r7,-20
8000978e:	f8 c8 ff ec 	sub	r8,r12,-20
80009792:	30 0a       	mov	r10,0
80009794:	0f 0e       	ld.w	lr,r7++
80009796:	0d 0b       	ld.w	r11,r6++
80009798:	fc 02 16 10 	lsr	r2,lr,0x10
8000979c:	f6 03 16 10 	lsr	r3,r11,0x10
800097a0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800097a4:	e4 03 01 03 	sub	r3,r2,r3
800097a8:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800097ac:	fc 0b 01 0b 	sub	r11,lr,r11
800097b0:	f6 0a 00 0a 	add	r10,r11,r10
800097b4:	b0 1a       	st.h	r8[0x2],r10
800097b6:	b1 4a       	asr	r10,0x10
800097b8:	e6 0a 00 0a 	add	r10,r3,r10
800097bc:	b0 0a       	st.h	r8[0x0],r10
800097be:	2f c8       	sub	r8,-4
800097c0:	b1 4a       	asr	r10,0x10
800097c2:	08 36       	cp.w	r6,r4
800097c4:	ce 83       	brcs	80009794 <__mdiff+0x64>
800097c6:	c0 d8       	rjmp	800097e0 <__mdiff+0xb0>
800097c8:	0f 0b       	ld.w	r11,r7++
800097ca:	f6 0e 16 10 	lsr	lr,r11,0x10
800097ce:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800097d2:	16 0a       	add	r10,r11
800097d4:	b0 1a       	st.h	r8[0x2],r10
800097d6:	b1 4a       	asr	r10,0x10
800097d8:	1c 0a       	add	r10,lr
800097da:	b0 0a       	st.h	r8[0x0],r10
800097dc:	2f c8       	sub	r8,-4
800097de:	b1 4a       	asr	r10,0x10
800097e0:	0a 37       	cp.w	r7,r5
800097e2:	cf 33       	brcs	800097c8 <__mdiff+0x98>
800097e4:	c0 28       	rjmp	800097e8 <__mdiff+0xb8>
800097e6:	20 19       	sub	r9,1
800097e8:	11 4a       	ld.w	r10,--r8
800097ea:	58 0a       	cp.w	r10,0
800097ec:	cf d0       	breq	800097e6 <__mdiff+0xb6>
800097ee:	99 49       	st.w	r12[0x10],r9
800097f0:	d8 32       	popm	r0-r7,pc
800097f2:	30 0b       	mov	r11,0
800097f4:	c1 6f       	rcall	80009620 <_Balloc>
800097f6:	30 18       	mov	r8,1
800097f8:	99 48       	st.w	r12[0x10],r8
800097fa:	30 08       	mov	r8,0
800097fc:	99 58       	st.w	r12[0x14],r8
800097fe:	d8 32       	popm	r0-r7,pc

80009800 <__lshift>:
80009800:	d4 31       	pushm	r0-r7,lr
80009802:	16 97       	mov	r7,r11
80009804:	76 46       	ld.w	r6,r11[0x10]
80009806:	f4 02 14 05 	asr	r2,r10,0x5
8000980a:	2f f6       	sub	r6,-1
8000980c:	14 93       	mov	r3,r10
8000980e:	18 94       	mov	r4,r12
80009810:	04 06       	add	r6,r2
80009812:	76 1b       	ld.w	r11,r11[0x4]
80009814:	6e 28       	ld.w	r8,r7[0x8]
80009816:	c0 38       	rjmp	8000981c <__lshift+0x1c>
80009818:	2f fb       	sub	r11,-1
8000981a:	a1 78       	lsl	r8,0x1
8000981c:	10 36       	cp.w	r6,r8
8000981e:	fe 99 ff fd 	brgt	80009818 <__lshift+0x18>
80009822:	08 9c       	mov	r12,r4
80009824:	cf ee       	rcall	80009620 <_Balloc>
80009826:	30 09       	mov	r9,0
80009828:	18 95       	mov	r5,r12
8000982a:	f8 c8 ff ec 	sub	r8,r12,-20
8000982e:	12 9a       	mov	r10,r9
80009830:	c0 38       	rjmp	80009836 <__lshift+0x36>
80009832:	10 aa       	st.w	r8++,r10
80009834:	2f f9       	sub	r9,-1
80009836:	04 39       	cp.w	r9,r2
80009838:	cf d5       	brlt	80009832 <__lshift+0x32>
8000983a:	6e 4b       	ld.w	r11,r7[0x10]
8000983c:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80009840:	2f bb       	sub	r11,-5
80009842:	ee c9 ff ec 	sub	r9,r7,-20
80009846:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000984a:	58 03       	cp.w	r3,0
8000984c:	c1 30       	breq	80009872 <__lshift+0x72>
8000984e:	e6 0c 11 20 	rsub	r12,r3,32
80009852:	30 0a       	mov	r10,0
80009854:	72 02       	ld.w	r2,r9[0x0]
80009856:	e4 03 09 42 	lsl	r2,r2,r3
8000985a:	04 4a       	or	r10,r2
8000985c:	10 aa       	st.w	r8++,r10
8000985e:	13 0a       	ld.w	r10,r9++
80009860:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009864:	16 39       	cp.w	r9,r11
80009866:	cf 73       	brcs	80009854 <__lshift+0x54>
80009868:	91 0a       	st.w	r8[0x0],r10
8000986a:	58 0a       	cp.w	r10,0
8000986c:	c0 70       	breq	8000987a <__lshift+0x7a>
8000986e:	2f f6       	sub	r6,-1
80009870:	c0 58       	rjmp	8000987a <__lshift+0x7a>
80009872:	13 0a       	ld.w	r10,r9++
80009874:	10 aa       	st.w	r8++,r10
80009876:	16 39       	cp.w	r9,r11
80009878:	cf d3       	brcs	80009872 <__lshift+0x72>
8000987a:	08 9c       	mov	r12,r4
8000987c:	20 16       	sub	r6,1
8000987e:	0e 9b       	mov	r11,r7
80009880:	8b 46       	st.w	r5[0x10],r6
80009882:	cb 5e       	rcall	800095ec <_Bfree>
80009884:	0a 9c       	mov	r12,r5
80009886:	d8 32       	popm	r0-r7,pc

80009888 <__multiply>:
80009888:	d4 31       	pushm	r0-r7,lr
8000988a:	20 2d       	sub	sp,8
8000988c:	76 49       	ld.w	r9,r11[0x10]
8000988e:	74 48       	ld.w	r8,r10[0x10]
80009890:	16 96       	mov	r6,r11
80009892:	14 95       	mov	r5,r10
80009894:	10 39       	cp.w	r9,r8
80009896:	ec 08 17 50 	movlt	r8,r6
8000989a:	ea 06 17 50 	movlt	r6,r5
8000989e:	f0 05 17 50 	movlt	r5,r8
800098a2:	6c 28       	ld.w	r8,r6[0x8]
800098a4:	76 43       	ld.w	r3,r11[0x10]
800098a6:	74 42       	ld.w	r2,r10[0x10]
800098a8:	76 1b       	ld.w	r11,r11[0x4]
800098aa:	e4 03 00 07 	add	r7,r2,r3
800098ae:	10 37       	cp.w	r7,r8
800098b0:	f7 bb 09 ff 	subgt	r11,-1
800098b4:	cb 6e       	rcall	80009620 <_Balloc>
800098b6:	ee c4 ff fb 	sub	r4,r7,-5
800098ba:	f8 c9 ff ec 	sub	r9,r12,-20
800098be:	f8 04 00 24 	add	r4,r12,r4<<0x2
800098c2:	30 0a       	mov	r10,0
800098c4:	12 98       	mov	r8,r9
800098c6:	c0 28       	rjmp	800098ca <__multiply+0x42>
800098c8:	10 aa       	st.w	r8++,r10
800098ca:	08 38       	cp.w	r8,r4
800098cc:	cf e3       	brcs	800098c8 <__multiply+0x40>
800098ce:	2f b3       	sub	r3,-5
800098d0:	2f b2       	sub	r2,-5
800098d2:	ec 03 00 23 	add	r3,r6,r3<<0x2
800098d6:	ea 02 00 22 	add	r2,r5,r2<<0x2
800098da:	ec cb ff ec 	sub	r11,r6,-20
800098de:	50 12       	stdsp	sp[0x4],r2
800098e0:	ea ca ff ec 	sub	r10,r5,-20
800098e4:	c4 48       	rjmp	8000996c <__multiply+0xe4>
800098e6:	94 95       	ld.uh	r5,r10[0x2]
800098e8:	58 05       	cp.w	r5,0
800098ea:	c2 00       	breq	8000992a <__multiply+0xa2>
800098ec:	12 98       	mov	r8,r9
800098ee:	16 96       	mov	r6,r11
800098f0:	30 0e       	mov	lr,0
800098f2:	50 09       	stdsp	sp[0x0],r9
800098f4:	0d 02       	ld.w	r2,r6++
800098f6:	e4 00 16 10 	lsr	r0,r2,0x10
800098fa:	70 01       	ld.w	r1,r8[0x0]
800098fc:	70 09       	ld.w	r9,r8[0x0]
800098fe:	b1 81       	lsr	r1,0x10
80009900:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80009904:	e0 05 03 41 	mac	r1,r0,r5
80009908:	ab 32       	mul	r2,r5
8000990a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000990e:	00 02       	add	r2,r0
80009910:	e4 0e 00 0e 	add	lr,r2,lr
80009914:	b0 1e       	st.h	r8[0x2],lr
80009916:	b1 8e       	lsr	lr,0x10
80009918:	1c 01       	add	r1,lr
8000991a:	b0 01       	st.h	r8[0x0],r1
8000991c:	e2 0e 16 10 	lsr	lr,r1,0x10
80009920:	2f c8       	sub	r8,-4
80009922:	06 36       	cp.w	r6,r3
80009924:	ce 83       	brcs	800098f4 <__multiply+0x6c>
80009926:	40 09       	lddsp	r9,sp[0x0]
80009928:	91 0e       	st.w	r8[0x0],lr
8000992a:	94 86       	ld.uh	r6,r10[0x0]
8000992c:	58 06       	cp.w	r6,0
8000992e:	c1 d0       	breq	80009968 <__multiply+0xe0>
80009930:	72 02       	ld.w	r2,r9[0x0]
80009932:	12 98       	mov	r8,r9
80009934:	16 9e       	mov	lr,r11
80009936:	30 05       	mov	r5,0
80009938:	b0 12       	st.h	r8[0x2],r2
8000993a:	1d 01       	ld.w	r1,lr++
8000993c:	90 82       	ld.uh	r2,r8[0x0]
8000993e:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80009942:	ad 30       	mul	r0,r6
80009944:	e0 02 00 02 	add	r2,r0,r2
80009948:	e4 05 00 05 	add	r5,r2,r5
8000994c:	b0 05       	st.h	r8[0x0],r5
8000994e:	b1 85       	lsr	r5,0x10
80009950:	b1 81       	lsr	r1,0x10
80009952:	2f c8       	sub	r8,-4
80009954:	ad 31       	mul	r1,r6
80009956:	90 92       	ld.uh	r2,r8[0x2]
80009958:	e2 02 00 02 	add	r2,r1,r2
8000995c:	0a 02       	add	r2,r5
8000995e:	e4 05 16 10 	lsr	r5,r2,0x10
80009962:	06 3e       	cp.w	lr,r3
80009964:	ce a3       	brcs	80009938 <__multiply+0xb0>
80009966:	91 02       	st.w	r8[0x0],r2
80009968:	2f ca       	sub	r10,-4
8000996a:	2f c9       	sub	r9,-4
8000996c:	40 18       	lddsp	r8,sp[0x4]
8000996e:	10 3a       	cp.w	r10,r8
80009970:	cb b3       	brcs	800098e6 <__multiply+0x5e>
80009972:	c0 28       	rjmp	80009976 <__multiply+0xee>
80009974:	20 17       	sub	r7,1
80009976:	58 07       	cp.w	r7,0
80009978:	e0 8a 00 05 	brle	80009982 <__multiply+0xfa>
8000997c:	09 48       	ld.w	r8,--r4
8000997e:	58 08       	cp.w	r8,0
80009980:	cf a0       	breq	80009974 <__multiply+0xec>
80009982:	99 47       	st.w	r12[0x10],r7
80009984:	2f ed       	sub	sp,-8
80009986:	d8 32       	popm	r0-r7,pc

80009988 <__i2b>:
80009988:	d4 21       	pushm	r4-r7,lr
8000998a:	16 97       	mov	r7,r11
8000998c:	30 1b       	mov	r11,1
8000998e:	c4 9e       	rcall	80009620 <_Balloc>
80009990:	30 19       	mov	r9,1
80009992:	99 57       	st.w	r12[0x14],r7
80009994:	99 49       	st.w	r12[0x10],r9
80009996:	d8 22       	popm	r4-r7,pc

80009998 <__multadd>:
80009998:	d4 31       	pushm	r0-r7,lr
8000999a:	30 08       	mov	r8,0
8000999c:	12 95       	mov	r5,r9
8000999e:	16 97       	mov	r7,r11
800099a0:	18 96       	mov	r6,r12
800099a2:	76 44       	ld.w	r4,r11[0x10]
800099a4:	f6 c9 ff ec 	sub	r9,r11,-20
800099a8:	72 0b       	ld.w	r11,r9[0x0]
800099aa:	f6 0c 16 10 	lsr	r12,r11,0x10
800099ae:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800099b2:	f4 0c 02 4c 	mul	r12,r10,r12
800099b6:	f4 0b 03 45 	mac	r5,r10,r11
800099ba:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800099be:	b1 85       	lsr	r5,0x10
800099c0:	18 05       	add	r5,r12
800099c2:	ea 0c 15 10 	lsl	r12,r5,0x10
800099c6:	f8 0b 00 0b 	add	r11,r12,r11
800099ca:	12 ab       	st.w	r9++,r11
800099cc:	2f f8       	sub	r8,-1
800099ce:	b1 85       	lsr	r5,0x10
800099d0:	08 38       	cp.w	r8,r4
800099d2:	ce b5       	brlt	800099a8 <__multadd+0x10>
800099d4:	58 05       	cp.w	r5,0
800099d6:	c1 c0       	breq	80009a0e <__multadd+0x76>
800099d8:	6e 28       	ld.w	r8,r7[0x8]
800099da:	10 34       	cp.w	r4,r8
800099dc:	c1 35       	brlt	80009a02 <__multadd+0x6a>
800099de:	6e 1b       	ld.w	r11,r7[0x4]
800099e0:	0c 9c       	mov	r12,r6
800099e2:	2f fb       	sub	r11,-1
800099e4:	c1 ee       	rcall	80009620 <_Balloc>
800099e6:	6e 4a       	ld.w	r10,r7[0x10]
800099e8:	ee cb ff f4 	sub	r11,r7,-12
800099ec:	18 93       	mov	r3,r12
800099ee:	2f ea       	sub	r10,-2
800099f0:	2f 4c       	sub	r12,-12
800099f2:	a3 6a       	lsl	r10,0x2
800099f4:	fe b0 fc 9f 	rcall	80009332 <memcpy>
800099f8:	0e 9b       	mov	r11,r7
800099fa:	0c 9c       	mov	r12,r6
800099fc:	fe b0 fd f8 	rcall	800095ec <_Bfree>
80009a00:	06 97       	mov	r7,r3
80009a02:	e8 c8 ff ff 	sub	r8,r4,-1
80009a06:	2f b4       	sub	r4,-5
80009a08:	8f 48       	st.w	r7[0x10],r8
80009a0a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80009a0e:	0e 9c       	mov	r12,r7
80009a10:	d8 32       	popm	r0-r7,pc
80009a12:	d7 03       	nop

80009a14 <__pow5mult>:
80009a14:	d4 31       	pushm	r0-r7,lr
80009a16:	14 96       	mov	r6,r10
80009a18:	18 97       	mov	r7,r12
80009a1a:	16 94       	mov	r4,r11
80009a1c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80009a20:	c0 80       	breq	80009a30 <__pow5mult+0x1c>
80009a22:	20 18       	sub	r8,1
80009a24:	49 f9       	lddpc	r9,80009aa0 <__pow5mult+0x8c>
80009a26:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80009a2a:	30 09       	mov	r9,0
80009a2c:	cb 6f       	rcall	80009998 <__multadd>
80009a2e:	18 94       	mov	r4,r12
80009a30:	a3 46       	asr	r6,0x2
80009a32:	c3 40       	breq	80009a9a <__pow5mult+0x86>
80009a34:	6e 95       	ld.w	r5,r7[0x24]
80009a36:	58 05       	cp.w	r5,0
80009a38:	c0 91       	brne	80009a4a <__pow5mult+0x36>
80009a3a:	31 0c       	mov	r12,16
80009a3c:	fe b0 fa 52 	rcall	80008ee0 <malloc>
80009a40:	99 35       	st.w	r12[0xc],r5
80009a42:	8f 9c       	st.w	r7[0x24],r12
80009a44:	99 15       	st.w	r12[0x4],r5
80009a46:	99 25       	st.w	r12[0x8],r5
80009a48:	99 05       	st.w	r12[0x0],r5
80009a4a:	6e 93       	ld.w	r3,r7[0x24]
80009a4c:	66 25       	ld.w	r5,r3[0x8]
80009a4e:	58 05       	cp.w	r5,0
80009a50:	c0 c1       	brne	80009a68 <__pow5mult+0x54>
80009a52:	e0 6b 02 71 	mov	r11,625
80009a56:	0e 9c       	mov	r12,r7
80009a58:	c9 8f       	rcall	80009988 <__i2b>
80009a5a:	87 2c       	st.w	r3[0x8],r12
80009a5c:	30 08       	mov	r8,0
80009a5e:	18 95       	mov	r5,r12
80009a60:	99 08       	st.w	r12[0x0],r8
80009a62:	c0 38       	rjmp	80009a68 <__pow5mult+0x54>
80009a64:	06 9c       	mov	r12,r3
80009a66:	18 95       	mov	r5,r12
80009a68:	ed b6 00 00 	bld	r6,0x0
80009a6c:	c0 b1       	brne	80009a82 <__pow5mult+0x6e>
80009a6e:	08 9b       	mov	r11,r4
80009a70:	0a 9a       	mov	r10,r5
80009a72:	0e 9c       	mov	r12,r7
80009a74:	c0 af       	rcall	80009888 <__multiply>
80009a76:	08 9b       	mov	r11,r4
80009a78:	18 93       	mov	r3,r12
80009a7a:	0e 9c       	mov	r12,r7
80009a7c:	06 94       	mov	r4,r3
80009a7e:	fe b0 fd b7 	rcall	800095ec <_Bfree>
80009a82:	a1 56       	asr	r6,0x1
80009a84:	c0 b0       	breq	80009a9a <__pow5mult+0x86>
80009a86:	6a 03       	ld.w	r3,r5[0x0]
80009a88:	58 03       	cp.w	r3,0
80009a8a:	ce d1       	brne	80009a64 <__pow5mult+0x50>
80009a8c:	0a 9a       	mov	r10,r5
80009a8e:	0a 9b       	mov	r11,r5
80009a90:	0e 9c       	mov	r12,r7
80009a92:	cf be       	rcall	80009888 <__multiply>
80009a94:	8b 0c       	st.w	r5[0x0],r12
80009a96:	99 03       	st.w	r12[0x0],r3
80009a98:	ce 7b       	rjmp	80009a66 <__pow5mult+0x52>
80009a9a:	08 9c       	mov	r12,r4
80009a9c:	d8 32       	popm	r0-r7,pc
80009a9e:	d7 03       	nop
80009aa0:	80 00       	ld.sh	r0,r0[0x0]
80009aa2:	bf d4       	cbr	r4,0x1f

80009aa4 <_realloc_r>:
80009aa4:	d4 31       	pushm	r0-r7,lr
80009aa6:	20 1d       	sub	sp,4
80009aa8:	16 94       	mov	r4,r11
80009aaa:	18 92       	mov	r2,r12
80009aac:	14 9b       	mov	r11,r10
80009aae:	58 04       	cp.w	r4,0
80009ab0:	c0 51       	brne	80009aba <_realloc_r+0x16>
80009ab2:	fe b0 fa 1f 	rcall	80008ef0 <_malloc_r>
80009ab6:	18 95       	mov	r5,r12
80009ab8:	c5 59       	rjmp	80009d62 <_realloc_r+0x2be>
80009aba:	50 0a       	stdsp	sp[0x0],r10
80009abc:	fe b0 fd 05 	rcall	800094c6 <__malloc_lock>
80009ac0:	40 0b       	lddsp	r11,sp[0x0]
80009ac2:	f6 c8 ff f5 	sub	r8,r11,-11
80009ac6:	e8 c1 00 08 	sub	r1,r4,8
80009aca:	10 96       	mov	r6,r8
80009acc:	62 1c       	ld.w	r12,r1[0x4]
80009ace:	e0 16 ff f8 	andl	r6,0xfff8
80009ad2:	59 68       	cp.w	r8,22
80009ad4:	f9 b6 08 10 	movls	r6,16
80009ad8:	16 36       	cp.w	r6,r11
80009ada:	5f 38       	srlo	r8
80009adc:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80009ae0:	c0 50       	breq	80009aea <_realloc_r+0x46>
80009ae2:	30 c8       	mov	r8,12
80009ae4:	30 05       	mov	r5,0
80009ae6:	85 38       	st.w	r2[0xc],r8
80009ae8:	c3 d9       	rjmp	80009d62 <_realloc_r+0x2be>
80009aea:	18 90       	mov	r0,r12
80009aec:	e0 10 ff fc 	andl	r0,0xfffc
80009af0:	0c 30       	cp.w	r0,r6
80009af2:	e0 84 01 0d 	brge	80009d0c <_realloc_r+0x268>
80009af6:	4c a8       	lddpc	r8,80009c1c <_realloc_r+0x178>
80009af8:	e2 00 00 09 	add	r9,r1,r0
80009afc:	70 25       	ld.w	r5,r8[0x8]
80009afe:	0a 39       	cp.w	r9,r5
80009b00:	c0 90       	breq	80009b12 <_realloc_r+0x6e>
80009b02:	72 1a       	ld.w	r10,r9[0x4]
80009b04:	a1 ca       	cbr	r10,0x0
80009b06:	f2 0a 00 0a 	add	r10,r9,r10
80009b0a:	74 1a       	ld.w	r10,r10[0x4]
80009b0c:	ed ba 00 00 	bld	r10,0x0
80009b10:	c2 20       	breq	80009b54 <_realloc_r+0xb0>
80009b12:	72 1a       	ld.w	r10,r9[0x4]
80009b14:	e0 1a ff fc 	andl	r10,0xfffc
80009b18:	f4 00 00 03 	add	r3,r10,r0
80009b1c:	0a 39       	cp.w	r9,r5
80009b1e:	c1 31       	brne	80009b44 <_realloc_r+0xa0>
80009b20:	ec c7 ff f0 	sub	r7,r6,-16
80009b24:	0e 33       	cp.w	r3,r7
80009b26:	c1 95       	brlt	80009b58 <_realloc_r+0xb4>
80009b28:	e2 06 00 09 	add	r9,r1,r6
80009b2c:	0c 13       	sub	r3,r6
80009b2e:	a1 a3       	sbr	r3,0x0
80009b30:	93 13       	st.w	r9[0x4],r3
80009b32:	91 29       	st.w	r8[0x8],r9
80009b34:	04 9c       	mov	r12,r2
80009b36:	62 18       	ld.w	r8,r1[0x4]
80009b38:	08 95       	mov	r5,r4
80009b3a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b3e:	10 46       	or	r6,r8
80009b40:	83 16       	st.w	r1[0x4],r6
80009b42:	c0 e9       	rjmp	80009d5e <_realloc_r+0x2ba>
80009b44:	0c 33       	cp.w	r3,r6
80009b46:	c0 95       	brlt	80009b58 <_realloc_r+0xb4>
80009b48:	72 28       	ld.w	r8,r9[0x8]
80009b4a:	02 97       	mov	r7,r1
80009b4c:	72 39       	ld.w	r9,r9[0xc]
80009b4e:	93 28       	st.w	r9[0x8],r8
80009b50:	91 39       	st.w	r8[0xc],r9
80009b52:	cd f8       	rjmp	80009d10 <_realloc_r+0x26c>
80009b54:	30 0a       	mov	r10,0
80009b56:	14 99       	mov	r9,r10
80009b58:	ed bc 00 00 	bld	r12,0x0
80009b5c:	e0 80 00 98 	breq	80009c8c <_realloc_r+0x1e8>
80009b60:	62 07       	ld.w	r7,r1[0x0]
80009b62:	e2 07 01 07 	sub	r7,r1,r7
80009b66:	6e 1c       	ld.w	r12,r7[0x4]
80009b68:	e0 1c ff fc 	andl	r12,0xfffc
80009b6c:	58 09       	cp.w	r9,0
80009b6e:	c5 90       	breq	80009c20 <_realloc_r+0x17c>
80009b70:	f8 00 00 03 	add	r3,r12,r0
80009b74:	0a 39       	cp.w	r9,r5
80009b76:	c4 81       	brne	80009c06 <_realloc_r+0x162>
80009b78:	14 03       	add	r3,r10
80009b7a:	ec c9 ff f0 	sub	r9,r6,-16
80009b7e:	12 33       	cp.w	r3,r9
80009b80:	c5 05       	brlt	80009c20 <_realloc_r+0x17c>
80009b82:	6e 3a       	ld.w	r10,r7[0xc]
80009b84:	6e 29       	ld.w	r9,r7[0x8]
80009b86:	95 29       	st.w	r10[0x8],r9
80009b88:	93 3a       	st.w	r9[0xc],r10
80009b8a:	ee c5 ff f8 	sub	r5,r7,-8
80009b8e:	e0 ca 00 04 	sub	r10,r0,4
80009b92:	e0 4a 00 24 	cp.w	r10,36
80009b96:	e0 8b 00 25 	brhi	80009be0 <_realloc_r+0x13c>
80009b9a:	0a 99       	mov	r9,r5
80009b9c:	59 3a       	cp.w	r10,19
80009b9e:	e0 88 00 1a 	brls	80009bd2 <_realloc_r+0x12e>
80009ba2:	09 09       	ld.w	r9,r4++
80009ba4:	8b 09       	st.w	r5[0x0],r9
80009ba6:	09 09       	ld.w	r9,r4++
80009ba8:	8f 39       	st.w	r7[0xc],r9
80009baa:	ee c9 ff f0 	sub	r9,r7,-16
80009bae:	59 ba       	cp.w	r10,27
80009bb0:	e0 88 00 11 	brls	80009bd2 <_realloc_r+0x12e>
80009bb4:	09 0b       	ld.w	r11,r4++
80009bb6:	93 0b       	st.w	r9[0x0],r11
80009bb8:	09 09       	ld.w	r9,r4++
80009bba:	8f 59       	st.w	r7[0x14],r9
80009bbc:	ee c9 ff e8 	sub	r9,r7,-24
80009bc0:	e0 4a 00 24 	cp.w	r10,36
80009bc4:	c0 71       	brne	80009bd2 <_realloc_r+0x12e>
80009bc6:	09 0a       	ld.w	r10,r4++
80009bc8:	93 0a       	st.w	r9[0x0],r10
80009bca:	ee c9 ff e0 	sub	r9,r7,-32
80009bce:	09 0a       	ld.w	r10,r4++
80009bd0:	8f 7a       	st.w	r7[0x1c],r10
80009bd2:	09 0a       	ld.w	r10,r4++
80009bd4:	12 aa       	st.w	r9++,r10
80009bd6:	68 0a       	ld.w	r10,r4[0x0]
80009bd8:	93 0a       	st.w	r9[0x0],r10
80009bda:	68 1a       	ld.w	r10,r4[0x4]
80009bdc:	93 1a       	st.w	r9[0x4],r10
80009bde:	c0 78       	rjmp	80009bec <_realloc_r+0x148>
80009be0:	50 08       	stdsp	sp[0x0],r8
80009be2:	08 9b       	mov	r11,r4
80009be4:	0a 9c       	mov	r12,r5
80009be6:	fe b0 fc 4a 	rcall	8000947a <memmove>
80009bea:	40 08       	lddsp	r8,sp[0x0]
80009bec:	ee 06 00 09 	add	r9,r7,r6
80009bf0:	0c 13       	sub	r3,r6
80009bf2:	a1 a3       	sbr	r3,0x0
80009bf4:	93 13       	st.w	r9[0x4],r3
80009bf6:	91 29       	st.w	r8[0x8],r9
80009bf8:	04 9c       	mov	r12,r2
80009bfa:	6e 18       	ld.w	r8,r7[0x4]
80009bfc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009c00:	10 46       	or	r6,r8
80009c02:	8f 16       	st.w	r7[0x4],r6
80009c04:	ca d8       	rjmp	80009d5e <_realloc_r+0x2ba>
80009c06:	14 03       	add	r3,r10
80009c08:	0c 33       	cp.w	r3,r6
80009c0a:	c0 b5       	brlt	80009c20 <_realloc_r+0x17c>
80009c0c:	72 28       	ld.w	r8,r9[0x8]
80009c0e:	72 39       	ld.w	r9,r9[0xc]
80009c10:	93 28       	st.w	r9[0x8],r8
80009c12:	91 39       	st.w	r8[0xc],r9
80009c14:	6e 28       	ld.w	r8,r7[0x8]
80009c16:	6e 39       	ld.w	r9,r7[0xc]
80009c18:	c0 a8       	rjmp	80009c2c <_realloc_r+0x188>
80009c1a:	d7 03       	nop
80009c1c:	00 00       	add	r0,r0
80009c1e:	00 fc       	st.b	--r0,r12
80009c20:	f8 00 00 03 	add	r3,r12,r0
80009c24:	0c 33       	cp.w	r3,r6
80009c26:	c3 35       	brlt	80009c8c <_realloc_r+0x1e8>
80009c28:	6e 39       	ld.w	r9,r7[0xc]
80009c2a:	6e 28       	ld.w	r8,r7[0x8]
80009c2c:	93 28       	st.w	r9[0x8],r8
80009c2e:	91 39       	st.w	r8[0xc],r9
80009c30:	e0 ca 00 04 	sub	r10,r0,4
80009c34:	ee cc ff f8 	sub	r12,r7,-8
80009c38:	e0 4a 00 24 	cp.w	r10,36
80009c3c:	e0 8b 00 24 	brhi	80009c84 <_realloc_r+0x1e0>
80009c40:	59 3a       	cp.w	r10,19
80009c42:	e0 88 00 1a 	brls	80009c76 <_realloc_r+0x1d2>
80009c46:	09 08       	ld.w	r8,r4++
80009c48:	99 08       	st.w	r12[0x0],r8
80009c4a:	09 08       	ld.w	r8,r4++
80009c4c:	8f 38       	st.w	r7[0xc],r8
80009c4e:	ee cc ff f0 	sub	r12,r7,-16
80009c52:	59 ba       	cp.w	r10,27
80009c54:	e0 88 00 11 	brls	80009c76 <_realloc_r+0x1d2>
80009c58:	09 08       	ld.w	r8,r4++
80009c5a:	99 08       	st.w	r12[0x0],r8
80009c5c:	09 08       	ld.w	r8,r4++
80009c5e:	8f 58       	st.w	r7[0x14],r8
80009c60:	ee cc ff e8 	sub	r12,r7,-24
80009c64:	e0 4a 00 24 	cp.w	r10,36
80009c68:	c0 71       	brne	80009c76 <_realloc_r+0x1d2>
80009c6a:	09 08       	ld.w	r8,r4++
80009c6c:	99 08       	st.w	r12[0x0],r8
80009c6e:	ee cc ff e0 	sub	r12,r7,-32
80009c72:	09 08       	ld.w	r8,r4++
80009c74:	8f 78       	st.w	r7[0x1c],r8
80009c76:	09 08       	ld.w	r8,r4++
80009c78:	18 a8       	st.w	r12++,r8
80009c7a:	68 08       	ld.w	r8,r4[0x0]
80009c7c:	99 08       	st.w	r12[0x0],r8
80009c7e:	68 18       	ld.w	r8,r4[0x4]
80009c80:	99 18       	st.w	r12[0x4],r8
80009c82:	c4 78       	rjmp	80009d10 <_realloc_r+0x26c>
80009c84:	08 9b       	mov	r11,r4
80009c86:	fe b0 fb fa 	rcall	8000947a <memmove>
80009c8a:	c4 38       	rjmp	80009d10 <_realloc_r+0x26c>
80009c8c:	04 9c       	mov	r12,r2
80009c8e:	fe b0 f9 31 	rcall	80008ef0 <_malloc_r>
80009c92:	18 95       	mov	r5,r12
80009c94:	c3 a0       	breq	80009d08 <_realloc_r+0x264>
80009c96:	62 18       	ld.w	r8,r1[0x4]
80009c98:	f8 c9 00 08 	sub	r9,r12,8
80009c9c:	a1 c8       	cbr	r8,0x0
80009c9e:	e2 08 00 08 	add	r8,r1,r8
80009ca2:	10 39       	cp.w	r9,r8
80009ca4:	c0 71       	brne	80009cb2 <_realloc_r+0x20e>
80009ca6:	72 13       	ld.w	r3,r9[0x4]
80009ca8:	02 97       	mov	r7,r1
80009caa:	e0 13 ff fc 	andl	r3,0xfffc
80009cae:	00 03       	add	r3,r0
80009cb0:	c3 08       	rjmp	80009d10 <_realloc_r+0x26c>
80009cb2:	e0 ca 00 04 	sub	r10,r0,4
80009cb6:	e0 4a 00 24 	cp.w	r10,36
80009cba:	e0 8b 00 20 	brhi	80009cfa <_realloc_r+0x256>
80009cbe:	08 99       	mov	r9,r4
80009cc0:	18 98       	mov	r8,r12
80009cc2:	59 3a       	cp.w	r10,19
80009cc4:	e0 88 00 14 	brls	80009cec <_realloc_r+0x248>
80009cc8:	13 0b       	ld.w	r11,r9++
80009cca:	10 ab       	st.w	r8++,r11
80009ccc:	13 0b       	ld.w	r11,r9++
80009cce:	10 ab       	st.w	r8++,r11
80009cd0:	59 ba       	cp.w	r10,27
80009cd2:	e0 88 00 0d 	brls	80009cec <_realloc_r+0x248>
80009cd6:	13 0b       	ld.w	r11,r9++
80009cd8:	10 ab       	st.w	r8++,r11
80009cda:	13 0b       	ld.w	r11,r9++
80009cdc:	10 ab       	st.w	r8++,r11
80009cde:	e0 4a 00 24 	cp.w	r10,36
80009ce2:	c0 51       	brne	80009cec <_realloc_r+0x248>
80009ce4:	13 0a       	ld.w	r10,r9++
80009ce6:	10 aa       	st.w	r8++,r10
80009ce8:	13 0a       	ld.w	r10,r9++
80009cea:	10 aa       	st.w	r8++,r10
80009cec:	13 0a       	ld.w	r10,r9++
80009cee:	10 aa       	st.w	r8++,r10
80009cf0:	72 0a       	ld.w	r10,r9[0x0]
80009cf2:	91 0a       	st.w	r8[0x0],r10
80009cf4:	72 19       	ld.w	r9,r9[0x4]
80009cf6:	91 19       	st.w	r8[0x4],r9
80009cf8:	c0 48       	rjmp	80009d00 <_realloc_r+0x25c>
80009cfa:	08 9b       	mov	r11,r4
80009cfc:	fe b0 fb bf 	rcall	8000947a <memmove>
80009d00:	08 9b       	mov	r11,r4
80009d02:	04 9c       	mov	r12,r2
80009d04:	fe b0 f6 4e 	rcall	800089a0 <_free_r>
80009d08:	04 9c       	mov	r12,r2
80009d0a:	c2 a8       	rjmp	80009d5e <_realloc_r+0x2ba>
80009d0c:	00 93       	mov	r3,r0
80009d0e:	02 97       	mov	r7,r1
80009d10:	e6 06 01 09 	sub	r9,r3,r6
80009d14:	6e 18       	ld.w	r8,r7[0x4]
80009d16:	58 f9       	cp.w	r9,15
80009d18:	e0 88 00 16 	brls	80009d44 <_realloc_r+0x2a0>
80009d1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009d20:	ed e8 10 08 	or	r8,r6,r8
80009d24:	8f 18       	st.w	r7[0x4],r8
80009d26:	12 98       	mov	r8,r9
80009d28:	a1 a8       	sbr	r8,0x0
80009d2a:	ee 06 00 0b 	add	r11,r7,r6
80009d2e:	f6 09 00 09 	add	r9,r11,r9
80009d32:	97 18       	st.w	r11[0x4],r8
80009d34:	72 18       	ld.w	r8,r9[0x4]
80009d36:	a1 a8       	sbr	r8,0x0
80009d38:	2f 8b       	sub	r11,-8
80009d3a:	93 18       	st.w	r9[0x4],r8
80009d3c:	04 9c       	mov	r12,r2
80009d3e:	fe b0 f6 31 	rcall	800089a0 <_free_r>
80009d42:	c0 b8       	rjmp	80009d58 <_realloc_r+0x2b4>
80009d44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009d48:	e7 e8 10 08 	or	r8,r3,r8
80009d4c:	8f 18       	st.w	r7[0x4],r8
80009d4e:	ee 03 00 03 	add	r3,r7,r3
80009d52:	66 18       	ld.w	r8,r3[0x4]
80009d54:	a1 a8       	sbr	r8,0x0
80009d56:	87 18       	st.w	r3[0x4],r8
80009d58:	04 9c       	mov	r12,r2
80009d5a:	ee c5 ff f8 	sub	r5,r7,-8
80009d5e:	fe b0 fb b5 	rcall	800094c8 <__malloc_unlock>
80009d62:	0a 9c       	mov	r12,r5
80009d64:	2f fd       	sub	sp,-4
80009d66:	d8 32       	popm	r0-r7,pc

80009d68 <__isinfd>:
80009d68:	14 98       	mov	r8,r10
80009d6a:	fc 19 7f f0 	movh	r9,0x7ff0
80009d6e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009d72:	f0 0b 11 00 	rsub	r11,r8,0
80009d76:	f7 e8 10 08 	or	r8,r11,r8
80009d7a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80009d7e:	f2 08 01 08 	sub	r8,r9,r8
80009d82:	f0 0c 11 00 	rsub	r12,r8,0
80009d86:	f9 e8 10 08 	or	r8,r12,r8
80009d8a:	f0 0c 14 1f 	asr	r12,r8,0x1f
80009d8e:	2f fc       	sub	r12,-1
80009d90:	5e fc       	retal	r12

80009d92 <__isnand>:
80009d92:	14 98       	mov	r8,r10
80009d94:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80009d98:	f0 0c 11 00 	rsub	r12,r8,0
80009d9c:	10 4c       	or	r12,r8
80009d9e:	fc 18 7f f0 	movh	r8,0x7ff0
80009da2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80009da6:	f0 0c 01 0c 	sub	r12,r8,r12
80009daa:	bf 9c       	lsr	r12,0x1f
80009dac:	5e fc       	retal	r12
80009dae:	d7 03       	nop

80009db0 <_sbrk_r>:
80009db0:	d4 21       	pushm	r4-r7,lr
80009db2:	30 08       	mov	r8,0
80009db4:	18 97       	mov	r7,r12
80009db6:	48 66       	lddpc	r6,80009dcc <_sbrk_r+0x1c>
80009db8:	16 9c       	mov	r12,r11
80009dba:	8d 08       	st.w	r6[0x0],r8
80009dbc:	cb cc       	rcall	80009f34 <_sbrk>
80009dbe:	5b fc       	cp.w	r12,-1
80009dc0:	c0 51       	brne	80009dca <_sbrk_r+0x1a>
80009dc2:	6c 08       	ld.w	r8,r6[0x0]
80009dc4:	58 08       	cp.w	r8,0
80009dc6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009dca:	d8 22       	popm	r4-r7,pc
80009dcc:	00 00       	add	r0,r0
80009dce:	08 e0       	st.h	--r4,r0

80009dd0 <__sclose>:
80009dd0:	d4 01       	pushm	lr
80009dd2:	96 7b       	ld.sh	r11,r11[0xe]
80009dd4:	c0 ed       	rcall	80009ff0 <_close_r>
80009dd6:	d8 02       	popm	pc

80009dd8 <__sseek>:
80009dd8:	d4 21       	pushm	r4-r7,lr
80009dda:	16 97       	mov	r7,r11
80009ddc:	96 7b       	ld.sh	r11,r11[0xe]
80009dde:	c9 7d       	rcall	8000a10c <_lseek_r>
80009de0:	8e 68       	ld.sh	r8,r7[0xc]
80009de2:	10 99       	mov	r9,r8
80009de4:	ad c8       	cbr	r8,0xc
80009de6:	ad a9       	sbr	r9,0xc
80009de8:	5b fc       	cp.w	r12,-1
80009dea:	ef f8 0c 06 	st.heq	r7[0xc],r8
80009dee:	ef f9 1c 06 	st.hne	r7[0xc],r9
80009df2:	ef fc 1a 15 	st.wne	r7[0x54],r12
80009df6:	d8 22       	popm	r4-r7,pc

80009df8 <__swrite>:
80009df8:	d4 21       	pushm	r4-r7,lr
80009dfa:	96 68       	ld.sh	r8,r11[0xc]
80009dfc:	16 97       	mov	r7,r11
80009dfe:	14 95       	mov	r5,r10
80009e00:	12 94       	mov	r4,r9
80009e02:	e2 18 01 00 	andl	r8,0x100,COH
80009e06:	18 96       	mov	r6,r12
80009e08:	c0 50       	breq	80009e12 <__swrite+0x1a>
80009e0a:	30 29       	mov	r9,2
80009e0c:	30 0a       	mov	r10,0
80009e0e:	96 7b       	ld.sh	r11,r11[0xe]
80009e10:	c7 ed       	rcall	8000a10c <_lseek_r>
80009e12:	8e 68       	ld.sh	r8,r7[0xc]
80009e14:	ad c8       	cbr	r8,0xc
80009e16:	08 99       	mov	r9,r4
80009e18:	0a 9a       	mov	r10,r5
80009e1a:	8e 7b       	ld.sh	r11,r7[0xe]
80009e1c:	0c 9c       	mov	r12,r6
80009e1e:	ae 68       	st.h	r7[0xc],r8
80009e20:	ca 8c       	rcall	80009f70 <_write_r>
80009e22:	d8 22       	popm	r4-r7,pc

80009e24 <__sread>:
80009e24:	d4 21       	pushm	r4-r7,lr
80009e26:	16 97       	mov	r7,r11
80009e28:	96 7b       	ld.sh	r11,r11[0xe]
80009e2a:	c8 5d       	rcall	8000a134 <_read_r>
80009e2c:	c0 65       	brlt	80009e38 <__sread+0x14>
80009e2e:	6f 58       	ld.w	r8,r7[0x54]
80009e30:	18 08       	add	r8,r12
80009e32:	ef 48 00 54 	st.w	r7[84],r8
80009e36:	d8 22       	popm	r4-r7,pc
80009e38:	8e 68       	ld.sh	r8,r7[0xc]
80009e3a:	ad c8       	cbr	r8,0xc
80009e3c:	ae 68       	st.h	r7[0xc],r8
80009e3e:	d8 22       	popm	r4-r7,pc

80009e40 <strlen>:
80009e40:	30 09       	mov	r9,0
80009e42:	18 98       	mov	r8,r12
80009e44:	c0 28       	rjmp	80009e48 <strlen+0x8>
80009e46:	2f f8       	sub	r8,-1
80009e48:	11 8a       	ld.ub	r10,r8[0x0]
80009e4a:	f2 0a 18 00 	cp.b	r10,r9
80009e4e:	cf c1       	brne	80009e46 <strlen+0x6>
80009e50:	f0 0c 01 0c 	sub	r12,r8,r12
80009e54:	5e fc       	retal	r12
80009e56:	d7 03       	nop

80009e58 <_close>:
80009e58:	30 28       	mov	r8,2
80009e5a:	d6 73       	breakpoint
80009e5c:	3f fc       	mov	r12,-1
80009e5e:	35 8b       	mov	r11,88
80009e60:	58 0c       	cp.w	r12,0
80009e62:	5e 4c       	retge	r12
80009e64:	48 2a       	lddpc	r10,80009e6c <_close+0x14>
80009e66:	95 0b       	st.w	r10[0x0],r11
80009e68:	5e fc       	retal	r12
80009e6a:	d7 03       	nop
80009e6c:	00 00       	add	r0,r0
80009e6e:	08 e0       	st.h	--r4,r0

80009e70 <_lseek>:
80009e70:	30 58       	mov	r8,5
80009e72:	d6 73       	breakpoint
80009e74:	3f fc       	mov	r12,-1
80009e76:	35 8b       	mov	r11,88
80009e78:	58 0c       	cp.w	r12,0
80009e7a:	5e 4c       	retge	r12
80009e7c:	48 2a       	lddpc	r10,80009e84 <_lseek+0x14>
80009e7e:	95 0b       	st.w	r10[0x0],r11
80009e80:	5e fc       	retal	r12
80009e82:	d7 03       	nop
80009e84:	00 00       	add	r0,r0
80009e86:	08 e0       	st.h	--r4,r0

80009e88 <_read>:
80009e88:	30 38       	mov	r8,3
80009e8a:	d6 73       	breakpoint
80009e8c:	3f fc       	mov	r12,-1
80009e8e:	35 8b       	mov	r11,88
80009e90:	58 0c       	cp.w	r12,0
80009e92:	5e 4c       	retge	r12
80009e94:	48 2a       	lddpc	r10,80009e9c <_read+0x14>
80009e96:	95 0b       	st.w	r10[0x0],r11
80009e98:	5e fc       	retal	r12
80009e9a:	d7 03       	nop
80009e9c:	00 00       	add	r0,r0
80009e9e:	08 e0       	st.h	--r4,r0

80009ea0 <_write>:
80009ea0:	30 48       	mov	r8,4
80009ea2:	d6 73       	breakpoint
80009ea4:	3f fc       	mov	r12,-1
80009ea6:	35 8b       	mov	r11,88
80009ea8:	58 0c       	cp.w	r12,0
80009eaa:	5e 4c       	retge	r12
80009eac:	48 2a       	lddpc	r10,80009eb4 <_write+0x14>
80009eae:	95 0b       	st.w	r10[0x0],r11
80009eb0:	5e fc       	retal	r12
80009eb2:	d7 03       	nop
80009eb4:	00 00       	add	r0,r0
80009eb6:	08 e0       	st.h	--r4,r0

80009eb8 <isatty>:
80009eb8:	30 b8       	mov	r8,11
80009eba:	d6 73       	breakpoint
80009ebc:	3f fc       	mov	r12,-1
80009ebe:	35 8b       	mov	r11,88
80009ec0:	58 0c       	cp.w	r12,0
80009ec2:	5e 4c       	retge	r12
80009ec4:	48 2a       	lddpc	r10,80009ecc <isatty+0x14>
80009ec6:	95 0b       	st.w	r10[0x0],r11
80009ec8:	5e fc       	retal	r12
80009eca:	d7 03       	nop
80009ecc:	00 00       	add	r0,r0
80009ece:	08 e0       	st.h	--r4,r0

80009ed0 <_fstat_host>:
80009ed0:	30 98       	mov	r8,9
80009ed2:	d6 73       	breakpoint
80009ed4:	3f fc       	mov	r12,-1
80009ed6:	35 8b       	mov	r11,88
80009ed8:	58 0c       	cp.w	r12,0
80009eda:	5e 4c       	retge	r12
80009edc:	48 2a       	lddpc	r10,80009ee4 <_fstat_host+0x14>
80009ede:	95 0b       	st.w	r10[0x0],r11
80009ee0:	5e fc       	retal	r12
80009ee2:	d7 03       	nop
80009ee4:	00 00       	add	r0,r0
80009ee6:	08 e0       	st.h	--r4,r0

80009ee8 <_fstat>:
80009ee8:	d4 21       	pushm	r4-r7,lr
80009eea:	21 0d       	sub	sp,64
80009eec:	16 97       	mov	r7,r11
80009eee:	1a 9b       	mov	r11,sp
80009ef0:	cf 0f       	rcall	80009ed0 <_fstat_host>
80009ef2:	c0 34       	brge	80009ef8 <_fstat+0x10>
80009ef4:	3f fc       	mov	r12,-1
80009ef6:	c1 c8       	rjmp	80009f2e <_fstat+0x46>
80009ef8:	40 08       	lddsp	r8,sp[0x0]
80009efa:	ae 08       	st.h	r7[0x0],r8
80009efc:	40 18       	lddsp	r8,sp[0x4]
80009efe:	ae 18       	st.h	r7[0x2],r8
80009f00:	40 28       	lddsp	r8,sp[0x8]
80009f02:	8f 18       	st.w	r7[0x4],r8
80009f04:	40 38       	lddsp	r8,sp[0xc]
80009f06:	ae 48       	st.h	r7[0x8],r8
80009f08:	40 48       	lddsp	r8,sp[0x10]
80009f0a:	ae 58       	st.h	r7[0xa],r8
80009f0c:	40 58       	lddsp	r8,sp[0x14]
80009f0e:	ae 68       	st.h	r7[0xc],r8
80009f10:	40 68       	lddsp	r8,sp[0x18]
80009f12:	ae 78       	st.h	r7[0xe],r8
80009f14:	40 88       	lddsp	r8,sp[0x20]
80009f16:	8f 48       	st.w	r7[0x10],r8
80009f18:	40 a8       	lddsp	r8,sp[0x28]
80009f1a:	8f b8       	st.w	r7[0x2c],r8
80009f1c:	40 c8       	lddsp	r8,sp[0x30]
80009f1e:	8f c8       	st.w	r7[0x30],r8
80009f20:	40 d8       	lddsp	r8,sp[0x34]
80009f22:	8f 58       	st.w	r7[0x14],r8
80009f24:	40 e8       	lddsp	r8,sp[0x38]
80009f26:	30 0c       	mov	r12,0
80009f28:	8f 78       	st.w	r7[0x1c],r8
80009f2a:	40 f8       	lddsp	r8,sp[0x3c]
80009f2c:	8f 98       	st.w	r7[0x24],r8
80009f2e:	2f 0d       	sub	sp,-64
80009f30:	d8 22       	popm	r4-r7,pc
80009f32:	d7 03       	nop

80009f34 <_sbrk>:
80009f34:	d4 01       	pushm	lr
80009f36:	48 c8       	lddpc	r8,80009f64 <_sbrk+0x30>
80009f38:	70 09       	ld.w	r9,r8[0x0]
80009f3a:	58 09       	cp.w	r9,0
80009f3c:	c0 31       	brne	80009f42 <_sbrk+0xe>
80009f3e:	48 b9       	lddpc	r9,80009f68 <_sbrk+0x34>
80009f40:	91 09       	st.w	r8[0x0],r9
80009f42:	48 99       	lddpc	r9,80009f64 <_sbrk+0x30>
80009f44:	48 aa       	lddpc	r10,80009f6c <_sbrk+0x38>
80009f46:	72 08       	ld.w	r8,r9[0x0]
80009f48:	f0 0c 00 0c 	add	r12,r8,r12
80009f4c:	14 3c       	cp.w	r12,r10
80009f4e:	e0 8b 00 04 	brhi	80009f56 <_sbrk+0x22>
80009f52:	93 0c       	st.w	r9[0x0],r12
80009f54:	c0 58       	rjmp	80009f5e <_sbrk+0x2a>
80009f56:	c5 dc       	rcall	8000a010 <__errno>
80009f58:	30 c8       	mov	r8,12
80009f5a:	99 08       	st.w	r12[0x0],r8
80009f5c:	3f f8       	mov	r8,-1
80009f5e:	10 9c       	mov	r12,r8
80009f60:	d8 02       	popm	pc
80009f62:	d7 03       	nop
80009f64:	00 00       	add	r0,r0
80009f66:	06 40       	or	r0,r3
80009f68:	00 00       	add	r0,r0
80009f6a:	08 e8       	st.h	--r4,r8
80009f6c:	00 00       	add	r0,r0
80009f6e:	70 00       	ld.w	r0,r8[0x0]

80009f70 <_write_r>:
80009f70:	d4 21       	pushm	r4-r7,lr
80009f72:	16 98       	mov	r8,r11
80009f74:	18 97       	mov	r7,r12
80009f76:	10 9c       	mov	r12,r8
80009f78:	30 08       	mov	r8,0
80009f7a:	14 9b       	mov	r11,r10
80009f7c:	48 66       	lddpc	r6,80009f94 <_write_r+0x24>
80009f7e:	12 9a       	mov	r10,r9
80009f80:	8d 08       	st.w	r6[0x0],r8
80009f82:	c8 ff       	rcall	80009ea0 <_write>
80009f84:	5b fc       	cp.w	r12,-1
80009f86:	c0 51       	brne	80009f90 <_write_r+0x20>
80009f88:	6c 08       	ld.w	r8,r6[0x0]
80009f8a:	58 08       	cp.w	r8,0
80009f8c:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009f90:	d8 22       	popm	r4-r7,pc
80009f92:	d7 03       	nop
80009f94:	00 00       	add	r0,r0
80009f96:	08 e0       	st.h	--r4,r0

80009f98 <_calloc_r>:
80009f98:	d4 21       	pushm	r4-r7,lr
80009f9a:	f4 0b 02 4b 	mul	r11,r10,r11
80009f9e:	fe b0 f7 a9 	rcall	80008ef0 <_malloc_r>
80009fa2:	18 97       	mov	r7,r12
80009fa4:	c2 30       	breq	80009fea <_calloc_r+0x52>
80009fa6:	f8 fa ff fc 	ld.w	r10,r12[-4]
80009faa:	e0 1a ff fc 	andl	r10,0xfffc
80009fae:	20 4a       	sub	r10,4
80009fb0:	e0 4a 00 24 	cp.w	r10,36
80009fb4:	e0 8b 00 18 	brhi	80009fe4 <_calloc_r+0x4c>
80009fb8:	18 98       	mov	r8,r12
80009fba:	59 3a       	cp.w	r10,19
80009fbc:	e0 88 00 0f 	brls	80009fda <_calloc_r+0x42>
80009fc0:	30 09       	mov	r9,0
80009fc2:	10 a9       	st.w	r8++,r9
80009fc4:	10 a9       	st.w	r8++,r9
80009fc6:	59 ba       	cp.w	r10,27
80009fc8:	e0 88 00 09 	brls	80009fda <_calloc_r+0x42>
80009fcc:	10 a9       	st.w	r8++,r9
80009fce:	10 a9       	st.w	r8++,r9
80009fd0:	e0 4a 00 24 	cp.w	r10,36
80009fd4:	c0 31       	brne	80009fda <_calloc_r+0x42>
80009fd6:	10 a9       	st.w	r8++,r9
80009fd8:	10 a9       	st.w	r8++,r9
80009fda:	30 09       	mov	r9,0
80009fdc:	10 a9       	st.w	r8++,r9
80009fde:	91 19       	st.w	r8[0x4],r9
80009fe0:	91 09       	st.w	r8[0x0],r9
80009fe2:	c0 48       	rjmp	80009fea <_calloc_r+0x52>
80009fe4:	30 0b       	mov	r11,0
80009fe6:	fe b0 fa 69 	rcall	800094b8 <memset>
80009fea:	0e 9c       	mov	r12,r7
80009fec:	d8 22       	popm	r4-r7,pc
80009fee:	d7 03       	nop

80009ff0 <_close_r>:
80009ff0:	d4 21       	pushm	r4-r7,lr
80009ff2:	30 08       	mov	r8,0
80009ff4:	18 97       	mov	r7,r12
80009ff6:	48 66       	lddpc	r6,8000a00c <_close_r+0x1c>
80009ff8:	16 9c       	mov	r12,r11
80009ffa:	8d 08       	st.w	r6[0x0],r8
80009ffc:	c2 ef       	rcall	80009e58 <_close>
80009ffe:	5b fc       	cp.w	r12,-1
8000a000:	c0 51       	brne	8000a00a <_close_r+0x1a>
8000a002:	6c 08       	ld.w	r8,r6[0x0]
8000a004:	58 08       	cp.w	r8,0
8000a006:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a00a:	d8 22       	popm	r4-r7,pc
8000a00c:	00 00       	add	r0,r0
8000a00e:	08 e0       	st.h	--r4,r0

8000a010 <__errno>:
8000a010:	48 28       	lddpc	r8,8000a018 <__errno+0x8>
8000a012:	70 0c       	ld.w	r12,r8[0x0]
8000a014:	2f 4c       	sub	r12,-12
8000a016:	5e fc       	retal	r12
8000a018:	00 00       	add	r0,r0
8000a01a:	00 f8       	st.b	--r0,r8

8000a01c <_fclose_r>:
8000a01c:	d4 21       	pushm	r4-r7,lr
8000a01e:	18 96       	mov	r6,r12
8000a020:	16 97       	mov	r7,r11
8000a022:	58 0b       	cp.w	r11,0
8000a024:	c0 31       	brne	8000a02a <_fclose_r+0xe>
8000a026:	16 95       	mov	r5,r11
8000a028:	c5 08       	rjmp	8000a0c8 <_fclose_r+0xac>
8000a02a:	fe b0 f3 cb 	rcall	800087c0 <__sfp_lock_acquire>
8000a02e:	58 06       	cp.w	r6,0
8000a030:	c0 70       	breq	8000a03e <_fclose_r+0x22>
8000a032:	6c 68       	ld.w	r8,r6[0x18]
8000a034:	58 08       	cp.w	r8,0
8000a036:	c0 41       	brne	8000a03e <_fclose_r+0x22>
8000a038:	0c 9c       	mov	r12,r6
8000a03a:	fe b0 f4 17 	rcall	80008868 <__sinit>
8000a03e:	4a 48       	lddpc	r8,8000a0cc <_fclose_r+0xb0>
8000a040:	10 37       	cp.w	r7,r8
8000a042:	c0 31       	brne	8000a048 <_fclose_r+0x2c>
8000a044:	6c 07       	ld.w	r7,r6[0x0]
8000a046:	c0 a8       	rjmp	8000a05a <_fclose_r+0x3e>
8000a048:	4a 28       	lddpc	r8,8000a0d0 <_fclose_r+0xb4>
8000a04a:	10 37       	cp.w	r7,r8
8000a04c:	c0 31       	brne	8000a052 <_fclose_r+0x36>
8000a04e:	6c 17       	ld.w	r7,r6[0x4]
8000a050:	c0 58       	rjmp	8000a05a <_fclose_r+0x3e>
8000a052:	4a 18       	lddpc	r8,8000a0d4 <_fclose_r+0xb8>
8000a054:	10 37       	cp.w	r7,r8
8000a056:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000a05a:	8e 69       	ld.sh	r9,r7[0xc]
8000a05c:	30 08       	mov	r8,0
8000a05e:	f0 09 19 00 	cp.h	r9,r8
8000a062:	c0 51       	brne	8000a06c <_fclose_r+0x50>
8000a064:	fe b0 f3 af 	rcall	800087c2 <__sfp_lock_release>
8000a068:	30 05       	mov	r5,0
8000a06a:	c2 f8       	rjmp	8000a0c8 <_fclose_r+0xac>
8000a06c:	0e 9b       	mov	r11,r7
8000a06e:	0c 9c       	mov	r12,r6
8000a070:	fe b0 f3 20 	rcall	800086b0 <_fflush_r>
8000a074:	6e c8       	ld.w	r8,r7[0x30]
8000a076:	18 95       	mov	r5,r12
8000a078:	58 08       	cp.w	r8,0
8000a07a:	c0 60       	breq	8000a086 <_fclose_r+0x6a>
8000a07c:	6e 8b       	ld.w	r11,r7[0x20]
8000a07e:	0c 9c       	mov	r12,r6
8000a080:	5d 18       	icall	r8
8000a082:	f9 b5 05 ff 	movlt	r5,-1
8000a086:	8e 68       	ld.sh	r8,r7[0xc]
8000a088:	ed b8 00 07 	bld	r8,0x7
8000a08c:	c0 51       	brne	8000a096 <_fclose_r+0x7a>
8000a08e:	6e 4b       	ld.w	r11,r7[0x10]
8000a090:	0c 9c       	mov	r12,r6
8000a092:	fe b0 f4 87 	rcall	800089a0 <_free_r>
8000a096:	6e db       	ld.w	r11,r7[0x34]
8000a098:	58 0b       	cp.w	r11,0
8000a09a:	c0 a0       	breq	8000a0ae <_fclose_r+0x92>
8000a09c:	ee c8 ff bc 	sub	r8,r7,-68
8000a0a0:	10 3b       	cp.w	r11,r8
8000a0a2:	c0 40       	breq	8000a0aa <_fclose_r+0x8e>
8000a0a4:	0c 9c       	mov	r12,r6
8000a0a6:	fe b0 f4 7d 	rcall	800089a0 <_free_r>
8000a0aa:	30 08       	mov	r8,0
8000a0ac:	8f d8       	st.w	r7[0x34],r8
8000a0ae:	6f 2b       	ld.w	r11,r7[0x48]
8000a0b0:	58 0b       	cp.w	r11,0
8000a0b2:	c0 70       	breq	8000a0c0 <_fclose_r+0xa4>
8000a0b4:	0c 9c       	mov	r12,r6
8000a0b6:	fe b0 f4 75 	rcall	800089a0 <_free_r>
8000a0ba:	30 08       	mov	r8,0
8000a0bc:	ef 48 00 48 	st.w	r7[72],r8
8000a0c0:	30 08       	mov	r8,0
8000a0c2:	ae 68       	st.h	r7[0xc],r8
8000a0c4:	fe b0 f3 7f 	rcall	800087c2 <__sfp_lock_release>
8000a0c8:	0a 9c       	mov	r12,r5
8000a0ca:	d8 22       	popm	r4-r7,pc
8000a0cc:	80 00       	ld.sh	r0,r0[0x0]
8000a0ce:	bf 2c       	st.d	pc++,r12
8000a0d0:	80 00       	ld.sh	r0,r0[0x0]
8000a0d2:	bf 4c       	asr	r12,0x1e
8000a0d4:	80 00       	ld.sh	r0,r0[0x0]
8000a0d6:	bf 6c       	lsl	r12,0x1e

8000a0d8 <fclose>:
8000a0d8:	d4 01       	pushm	lr
8000a0da:	48 38       	lddpc	r8,8000a0e4 <fclose+0xc>
8000a0dc:	18 9b       	mov	r11,r12
8000a0de:	70 0c       	ld.w	r12,r8[0x0]
8000a0e0:	c9 ef       	rcall	8000a01c <_fclose_r>
8000a0e2:	d8 02       	popm	pc
8000a0e4:	00 00       	add	r0,r0
8000a0e6:	00 f8       	st.b	--r0,r8

8000a0e8 <_fstat_r>:
8000a0e8:	d4 21       	pushm	r4-r7,lr
8000a0ea:	16 98       	mov	r8,r11
8000a0ec:	18 97       	mov	r7,r12
8000a0ee:	10 9c       	mov	r12,r8
8000a0f0:	30 08       	mov	r8,0
8000a0f2:	48 66       	lddpc	r6,8000a108 <_fstat_r+0x20>
8000a0f4:	14 9b       	mov	r11,r10
8000a0f6:	8d 08       	st.w	r6[0x0],r8
8000a0f8:	cf 8e       	rcall	80009ee8 <_fstat>
8000a0fa:	5b fc       	cp.w	r12,-1
8000a0fc:	c0 51       	brne	8000a106 <_fstat_r+0x1e>
8000a0fe:	6c 08       	ld.w	r8,r6[0x0]
8000a100:	58 08       	cp.w	r8,0
8000a102:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a106:	d8 22       	popm	r4-r7,pc
8000a108:	00 00       	add	r0,r0
8000a10a:	08 e0       	st.h	--r4,r0

8000a10c <_lseek_r>:
8000a10c:	d4 21       	pushm	r4-r7,lr
8000a10e:	16 98       	mov	r8,r11
8000a110:	18 97       	mov	r7,r12
8000a112:	10 9c       	mov	r12,r8
8000a114:	30 08       	mov	r8,0
8000a116:	14 9b       	mov	r11,r10
8000a118:	48 66       	lddpc	r6,8000a130 <_lseek_r+0x24>
8000a11a:	12 9a       	mov	r10,r9
8000a11c:	8d 08       	st.w	r6[0x0],r8
8000a11e:	ca 9e       	rcall	80009e70 <_lseek>
8000a120:	5b fc       	cp.w	r12,-1
8000a122:	c0 51       	brne	8000a12c <_lseek_r+0x20>
8000a124:	6c 08       	ld.w	r8,r6[0x0]
8000a126:	58 08       	cp.w	r8,0
8000a128:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a12c:	d8 22       	popm	r4-r7,pc
8000a12e:	d7 03       	nop
8000a130:	00 00       	add	r0,r0
8000a132:	08 e0       	st.h	--r4,r0

8000a134 <_read_r>:
8000a134:	d4 21       	pushm	r4-r7,lr
8000a136:	16 98       	mov	r8,r11
8000a138:	18 97       	mov	r7,r12
8000a13a:	10 9c       	mov	r12,r8
8000a13c:	30 08       	mov	r8,0
8000a13e:	14 9b       	mov	r11,r10
8000a140:	48 66       	lddpc	r6,8000a158 <_read_r+0x24>
8000a142:	12 9a       	mov	r10,r9
8000a144:	8d 08       	st.w	r6[0x0],r8
8000a146:	ca 1e       	rcall	80009e88 <_read>
8000a148:	5b fc       	cp.w	r12,-1
8000a14a:	c0 51       	brne	8000a154 <_read_r+0x20>
8000a14c:	6c 08       	ld.w	r8,r6[0x0]
8000a14e:	58 08       	cp.w	r8,0
8000a150:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a154:	d8 22       	popm	r4-r7,pc
8000a156:	d7 03       	nop
8000a158:	00 00       	add	r0,r0
8000a15a:	08 e0       	st.h	--r4,r0

8000a15c <__avr32_f64_mul>:
8000a15c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000a160:	e0 80 00 dc 	breq	8000a318 <__avr32_f64_mul_op1_zero>
8000a164:	d4 21       	pushm	r4-r7,lr
8000a166:	f7 e9 20 0e 	eor	lr,r11,r9
8000a16a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a16e:	30 15       	mov	r5,1
8000a170:	c4 30       	breq	8000a1f6 <__avr32_f64_mul_op1_subnormal>
8000a172:	ab 6b       	lsl	r11,0xa
8000a174:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000a178:	ab 6a       	lsl	r10,0xa
8000a17a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000a17e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a182:	c5 c0       	breq	8000a23a <__avr32_f64_mul_op2_subnormal>
8000a184:	a1 78       	lsl	r8,0x1
8000a186:	5c f9       	rol	r9
8000a188:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000a18c:	e0 47 07 ff 	cp.w	r7,2047
8000a190:	c7 70       	breq	8000a27e <__avr32_f64_mul_op_nan_or_inf>
8000a192:	e0 46 07 ff 	cp.w	r6,2047
8000a196:	c7 40       	breq	8000a27e <__avr32_f64_mul_op_nan_or_inf>
8000a198:	ee 06 00 0c 	add	r12,r7,r6
8000a19c:	e0 2c 03 fe 	sub	r12,1022
8000a1a0:	f6 08 06 44 	mulu.d	r4,r11,r8
8000a1a4:	f4 09 07 44 	macu.d	r4,r10,r9
8000a1a8:	f4 08 06 46 	mulu.d	r6,r10,r8
8000a1ac:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000a1b0:	08 07       	add	r7,r4
8000a1b2:	f4 05 00 4a 	adc	r10,r10,r5
8000a1b6:	5c 0b       	acr	r11
8000a1b8:	ed bb 00 14 	bld	r11,0x14
8000a1bc:	c0 50       	breq	8000a1c6 <__avr32_f64_mul+0x6a>
8000a1be:	a1 77       	lsl	r7,0x1
8000a1c0:	5c fa       	rol	r10
8000a1c2:	5c fb       	rol	r11
8000a1c4:	20 1c       	sub	r12,1
8000a1c6:	58 0c       	cp.w	r12,0
8000a1c8:	e0 8a 00 6f 	brle	8000a2a6 <__avr32_f64_mul_res_subnormal>
8000a1cc:	e0 4c 07 ff 	cp.w	r12,2047
8000a1d0:	e0 84 00 9c 	brge	8000a308 <__avr32_f64_mul_res_inf>
8000a1d4:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000a1d8:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000a1dc:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000a1e0:	ee 17 80 00 	eorh	r7,0x8000
8000a1e4:	f1 b7 04 20 	satu	r7,0x1
8000a1e8:	0e 0a       	add	r10,r7
8000a1ea:	5c 0b       	acr	r11
8000a1ec:	ed be 00 1f 	bld	lr,0x1f
8000a1f0:	ef bb 00 1f 	bst	r11,0x1f
8000a1f4:	d8 22       	popm	r4-r7,pc

8000a1f6 <__avr32_f64_mul_op1_subnormal>:
8000a1f6:	e4 1b 00 0f 	andh	r11,0xf
8000a1fa:	f4 0c 12 00 	clz	r12,r10
8000a1fe:	f6 06 12 00 	clz	r6,r11
8000a202:	f7 bc 03 e1 	sublo	r12,-31
8000a206:	f8 06 17 30 	movlo	r6,r12
8000a20a:	f7 b6 02 01 	subhs	r6,1
8000a20e:	e0 46 00 20 	cp.w	r6,32
8000a212:	c0 d4       	brge	8000a22c <__avr32_f64_mul_op1_subnormal+0x36>
8000a214:	ec 0c 11 20 	rsub	r12,r6,32
8000a218:	f6 06 09 4b 	lsl	r11,r11,r6
8000a21c:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000a220:	18 4b       	or	r11,r12
8000a222:	f4 06 09 4a 	lsl	r10,r10,r6
8000a226:	20 b6       	sub	r6,11
8000a228:	0c 17       	sub	r7,r6
8000a22a:	ca ab       	rjmp	8000a17e <__avr32_f64_mul+0x22>
8000a22c:	f4 06 09 4b 	lsl	r11,r10,r6
8000a230:	c6 40       	breq	8000a2f8 <__avr32_f64_mul_res_zero>
8000a232:	30 0a       	mov	r10,0
8000a234:	20 b6       	sub	r6,11
8000a236:	0c 17       	sub	r7,r6
8000a238:	ca 3b       	rjmp	8000a17e <__avr32_f64_mul+0x22>

8000a23a <__avr32_f64_mul_op2_subnormal>:
8000a23a:	e4 19 00 0f 	andh	r9,0xf
8000a23e:	f0 0c 12 00 	clz	r12,r8
8000a242:	f2 05 12 00 	clz	r5,r9
8000a246:	f7 bc 03 ea 	sublo	r12,-22
8000a24a:	f8 05 17 30 	movlo	r5,r12
8000a24e:	f7 b5 02 0a 	subhs	r5,10
8000a252:	e0 45 00 20 	cp.w	r5,32
8000a256:	c0 d4       	brge	8000a270 <__avr32_f64_mul_op2_subnormal+0x36>
8000a258:	ea 0c 11 20 	rsub	r12,r5,32
8000a25c:	f2 05 09 49 	lsl	r9,r9,r5
8000a260:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000a264:	18 49       	or	r9,r12
8000a266:	f0 05 09 48 	lsl	r8,r8,r5
8000a26a:	20 25       	sub	r5,2
8000a26c:	0a 16       	sub	r6,r5
8000a26e:	c8 fb       	rjmp	8000a18c <__avr32_f64_mul+0x30>
8000a270:	f0 05 09 49 	lsl	r9,r8,r5
8000a274:	c4 20       	breq	8000a2f8 <__avr32_f64_mul_res_zero>
8000a276:	30 08       	mov	r8,0
8000a278:	20 25       	sub	r5,2
8000a27a:	0a 16       	sub	r6,r5
8000a27c:	c8 8b       	rjmp	8000a18c <__avr32_f64_mul+0x30>

8000a27e <__avr32_f64_mul_op_nan_or_inf>:
8000a27e:	e4 19 00 0f 	andh	r9,0xf
8000a282:	e4 1b 00 0f 	andh	r11,0xf
8000a286:	14 4b       	or	r11,r10
8000a288:	10 49       	or	r9,r8
8000a28a:	e0 47 07 ff 	cp.w	r7,2047
8000a28e:	c0 91       	brne	8000a2a0 <__avr32_f64_mul_op1_not_naninf>
8000a290:	58 0b       	cp.w	r11,0
8000a292:	c3 81       	brne	8000a302 <__avr32_f64_mul_res_nan>
8000a294:	e0 46 07 ff 	cp.w	r6,2047
8000a298:	c3 81       	brne	8000a308 <__avr32_f64_mul_res_inf>
8000a29a:	58 09       	cp.w	r9,0
8000a29c:	c3 60       	breq	8000a308 <__avr32_f64_mul_res_inf>
8000a29e:	c3 28       	rjmp	8000a302 <__avr32_f64_mul_res_nan>

8000a2a0 <__avr32_f64_mul_op1_not_naninf>:
8000a2a0:	58 09       	cp.w	r9,0
8000a2a2:	c3 30       	breq	8000a308 <__avr32_f64_mul_res_inf>
8000a2a4:	c2 f8       	rjmp	8000a302 <__avr32_f64_mul_res_nan>

8000a2a6 <__avr32_f64_mul_res_subnormal>:
8000a2a6:	5c 3c       	neg	r12
8000a2a8:	2f fc       	sub	r12,-1
8000a2aa:	f1 bc 04 c0 	satu	r12,0x6
8000a2ae:	e0 4c 00 20 	cp.w	r12,32
8000a2b2:	c1 14       	brge	8000a2d4 <__avr32_f64_mul_res_subnormal+0x2e>
8000a2b4:	f8 08 11 20 	rsub	r8,r12,32
8000a2b8:	0e 46       	or	r6,r7
8000a2ba:	ee 0c 0a 47 	lsr	r7,r7,r12
8000a2be:	f4 08 09 49 	lsl	r9,r10,r8
8000a2c2:	12 47       	or	r7,r9
8000a2c4:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a2c8:	f6 08 09 49 	lsl	r9,r11,r8
8000a2cc:	12 4a       	or	r10,r9
8000a2ce:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a2d2:	c8 3b       	rjmp	8000a1d8 <__avr32_f64_mul+0x7c>
8000a2d4:	f8 08 11 20 	rsub	r8,r12,32
8000a2d8:	f9 b9 00 00 	moveq	r9,0
8000a2dc:	c0 30       	breq	8000a2e2 <__avr32_f64_mul_res_subnormal+0x3c>
8000a2de:	f6 08 09 49 	lsl	r9,r11,r8
8000a2e2:	0e 46       	or	r6,r7
8000a2e4:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000a2e8:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a2ec:	f3 ea 10 07 	or	r7,r9,r10
8000a2f0:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000a2f4:	30 0b       	mov	r11,0
8000a2f6:	c7 1b       	rjmp	8000a1d8 <__avr32_f64_mul+0x7c>

8000a2f8 <__avr32_f64_mul_res_zero>:
8000a2f8:	1c 9b       	mov	r11,lr
8000a2fa:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a2fe:	30 0a       	mov	r10,0
8000a300:	d8 22       	popm	r4-r7,pc

8000a302 <__avr32_f64_mul_res_nan>:
8000a302:	3f fb       	mov	r11,-1
8000a304:	3f fa       	mov	r10,-1
8000a306:	d8 22       	popm	r4-r7,pc

8000a308 <__avr32_f64_mul_res_inf>:
8000a308:	f0 6b 00 00 	mov	r11,-1048576
8000a30c:	ed be 00 1f 	bld	lr,0x1f
8000a310:	ef bb 00 1f 	bst	r11,0x1f
8000a314:	30 0a       	mov	r10,0
8000a316:	d8 22       	popm	r4-r7,pc

8000a318 <__avr32_f64_mul_op1_zero>:
8000a318:	f7 e9 20 0b 	eor	r11,r11,r9
8000a31c:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a320:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000a324:	e0 4c 07 ff 	cp.w	r12,2047
8000a328:	5e 1c       	retne	r12
8000a32a:	3f fa       	mov	r10,-1
8000a32c:	3f fb       	mov	r11,-1
8000a32e:	5e fc       	retal	r12

8000a330 <__avr32_f64_sub_from_add>:
8000a330:	ee 19 80 00 	eorh	r9,0x8000

8000a334 <__avr32_f64_sub>:
8000a334:	f7 e9 20 0c 	eor	r12,r11,r9
8000a338:	e0 86 00 ca 	brmi	8000a4cc <__avr32_f64_add_from_sub>
8000a33c:	eb cd 40 e0 	pushm	r5-r7,lr
8000a340:	16 9c       	mov	r12,r11
8000a342:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a346:	bf db       	cbr	r11,0x1f
8000a348:	bf d9       	cbr	r9,0x1f
8000a34a:	10 3a       	cp.w	r10,r8
8000a34c:	f2 0b 13 00 	cpc	r11,r9
8000a350:	c0 92       	brcc	8000a362 <__avr32_f64_sub+0x2e>
8000a352:	16 97       	mov	r7,r11
8000a354:	12 9b       	mov	r11,r9
8000a356:	0e 99       	mov	r9,r7
8000a358:	14 97       	mov	r7,r10
8000a35a:	10 9a       	mov	r10,r8
8000a35c:	0e 98       	mov	r8,r7
8000a35e:	ee 1c 80 00 	eorh	r12,0x8000
8000a362:	f6 07 16 14 	lsr	r7,r11,0x14
8000a366:	ab 7b       	lsl	r11,0xb
8000a368:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a36c:	ab 7a       	lsl	r10,0xb
8000a36e:	bf bb       	sbr	r11,0x1f
8000a370:	f2 06 16 14 	lsr	r6,r9,0x14
8000a374:	c4 40       	breq	8000a3fc <__avr32_f64_sub_opL_subnormal>
8000a376:	ab 79       	lsl	r9,0xb
8000a378:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a37c:	ab 78       	lsl	r8,0xb
8000a37e:	bf b9       	sbr	r9,0x1f

8000a380 <__avr32_f64_sub_opL_subnormal_done>:
8000a380:	e0 47 07 ff 	cp.w	r7,2047
8000a384:	c4 f0       	breq	8000a422 <__avr32_f64_sub_opH_nan_or_inf>
8000a386:	0e 26       	rsub	r6,r7
8000a388:	c1 20       	breq	8000a3ac <__avr32_f64_sub_shift_done>
8000a38a:	ec 05 11 20 	rsub	r5,r6,32
8000a38e:	e0 46 00 20 	cp.w	r6,32
8000a392:	c7 c2       	brcc	8000a48a <__avr32_f64_sub_longshift>
8000a394:	f0 05 09 4e 	lsl	lr,r8,r5
8000a398:	f2 05 09 45 	lsl	r5,r9,r5
8000a39c:	f0 06 0a 48 	lsr	r8,r8,r6
8000a3a0:	f2 06 0a 49 	lsr	r9,r9,r6
8000a3a4:	0a 48       	or	r8,r5
8000a3a6:	58 0e       	cp.w	lr,0
8000a3a8:	5f 1e       	srne	lr
8000a3aa:	1c 48       	or	r8,lr

8000a3ac <__avr32_f64_sub_shift_done>:
8000a3ac:	10 1a       	sub	r10,r8
8000a3ae:	f6 09 01 4b 	sbc	r11,r11,r9
8000a3b2:	f6 06 12 00 	clz	r6,r11
8000a3b6:	c0 e0       	breq	8000a3d2 <__avr32_f64_sub_longnormalize_done>
8000a3b8:	c7 83       	brcs	8000a4a8 <__avr32_f64_sub_longnormalize>
8000a3ba:	ec 0e 11 20 	rsub	lr,r6,32
8000a3be:	f6 06 09 4b 	lsl	r11,r11,r6
8000a3c2:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a3c6:	1c 4b       	or	r11,lr
8000a3c8:	f4 06 09 4a 	lsl	r10,r10,r6
8000a3cc:	0c 17       	sub	r7,r6
8000a3ce:	e0 8a 00 39 	brle	8000a440 <__avr32_f64_sub_subnormal_result>

8000a3d2 <__avr32_f64_sub_longnormalize_done>:
8000a3d2:	f4 09 15 15 	lsl	r9,r10,0x15
8000a3d6:	ab 9a       	lsr	r10,0xb
8000a3d8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a3dc:	ab 9b       	lsr	r11,0xb
8000a3de:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a3e2:	18 4b       	or	r11,r12

8000a3e4 <__avr32_f64_sub_round>:
8000a3e4:	fc 17 80 00 	movh	r7,0x8000
8000a3e8:	ed ba 00 00 	bld	r10,0x0
8000a3ec:	f7 b7 01 ff 	subne	r7,-1
8000a3f0:	0e 39       	cp.w	r9,r7
8000a3f2:	5f 29       	srhs	r9
8000a3f4:	12 0a       	add	r10,r9
8000a3f6:	5c 0b       	acr	r11
8000a3f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a3fc <__avr32_f64_sub_opL_subnormal>:
8000a3fc:	ab 79       	lsl	r9,0xb
8000a3fe:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a402:	ab 78       	lsl	r8,0xb
8000a404:	f3 e8 10 0e 	or	lr,r9,r8
8000a408:	f9 b6 01 01 	movne	r6,1
8000a40c:	ee 0e 11 00 	rsub	lr,r7,0
8000a410:	f9 b7 00 01 	moveq	r7,1
8000a414:	ef bb 00 1f 	bst	r11,0x1f
8000a418:	f7 ea 10 0e 	or	lr,r11,r10
8000a41c:	f9 b7 00 00 	moveq	r7,0
8000a420:	cb 0b       	rjmp	8000a380 <__avr32_f64_sub_opL_subnormal_done>

8000a422 <__avr32_f64_sub_opH_nan_or_inf>:
8000a422:	bf db       	cbr	r11,0x1f
8000a424:	f7 ea 10 0e 	or	lr,r11,r10
8000a428:	c0 81       	brne	8000a438 <__avr32_f64_sub_return_nan>
8000a42a:	e0 46 07 ff 	cp.w	r6,2047
8000a42e:	c0 50       	breq	8000a438 <__avr32_f64_sub_return_nan>
8000a430:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000a434:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a438 <__avr32_f64_sub_return_nan>:
8000a438:	3f fa       	mov	r10,-1
8000a43a:	3f fb       	mov	r11,-1
8000a43c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a440 <__avr32_f64_sub_subnormal_result>:
8000a440:	5c 37       	neg	r7
8000a442:	2f f7       	sub	r7,-1
8000a444:	f1 b7 04 c0 	satu	r7,0x6
8000a448:	e0 47 00 20 	cp.w	r7,32
8000a44c:	c1 14       	brge	8000a46e <__avr32_f64_sub_subnormal_result+0x2e>
8000a44e:	ee 08 11 20 	rsub	r8,r7,32
8000a452:	f4 08 09 49 	lsl	r9,r10,r8
8000a456:	5f 16       	srne	r6
8000a458:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a45c:	0c 4a       	or	r10,r6
8000a45e:	f6 08 09 49 	lsl	r9,r11,r8
8000a462:	f5 e9 10 0a 	or	r10,r10,r9
8000a466:	f4 07 0a 4b 	lsr	r11,r10,r7
8000a46a:	30 07       	mov	r7,0
8000a46c:	cb 3b       	rjmp	8000a3d2 <__avr32_f64_sub_longnormalize_done>
8000a46e:	ee 08 11 40 	rsub	r8,r7,64
8000a472:	f6 08 09 49 	lsl	r9,r11,r8
8000a476:	14 49       	or	r9,r10
8000a478:	5f 16       	srne	r6
8000a47a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a47e:	0c 4a       	or	r10,r6
8000a480:	30 0b       	mov	r11,0
8000a482:	30 07       	mov	r7,0
8000a484:	ca 7b       	rjmp	8000a3d2 <__avr32_f64_sub_longnormalize_done>
8000a486:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a48a <__avr32_f64_sub_longshift>:
8000a48a:	f1 b6 04 c0 	satu	r6,0x6
8000a48e:	f0 0e 17 00 	moveq	lr,r8
8000a492:	c0 40       	breq	8000a49a <__avr32_f64_sub_longshift+0x10>
8000a494:	f2 05 09 4e 	lsl	lr,r9,r5
8000a498:	10 4e       	or	lr,r8
8000a49a:	f2 06 0a 48 	lsr	r8,r9,r6
8000a49e:	30 09       	mov	r9,0
8000a4a0:	58 0e       	cp.w	lr,0
8000a4a2:	5f 1e       	srne	lr
8000a4a4:	1c 48       	or	r8,lr
8000a4a6:	c8 3b       	rjmp	8000a3ac <__avr32_f64_sub_shift_done>

8000a4a8 <__avr32_f64_sub_longnormalize>:
8000a4a8:	f4 06 12 00 	clz	r6,r10
8000a4ac:	f9 b7 03 00 	movlo	r7,0
8000a4b0:	f9 b6 03 00 	movlo	r6,0
8000a4b4:	f9 bc 03 00 	movlo	r12,0
8000a4b8:	f7 b6 02 e0 	subhs	r6,-32
8000a4bc:	f4 06 09 4b 	lsl	r11,r10,r6
8000a4c0:	30 0a       	mov	r10,0
8000a4c2:	0c 17       	sub	r7,r6
8000a4c4:	fe 9a ff be 	brle	8000a440 <__avr32_f64_sub_subnormal_result>
8000a4c8:	c8 5b       	rjmp	8000a3d2 <__avr32_f64_sub_longnormalize_done>
8000a4ca:	d7 03       	nop

8000a4cc <__avr32_f64_add_from_sub>:
8000a4cc:	ee 19 80 00 	eorh	r9,0x8000

8000a4d0 <__avr32_f64_add>:
8000a4d0:	f7 e9 20 0c 	eor	r12,r11,r9
8000a4d4:	fe 96 ff 2e 	brmi	8000a330 <__avr32_f64_sub_from_add>
8000a4d8:	eb cd 40 e0 	pushm	r5-r7,lr
8000a4dc:	16 9c       	mov	r12,r11
8000a4de:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a4e2:	bf db       	cbr	r11,0x1f
8000a4e4:	bf d9       	cbr	r9,0x1f
8000a4e6:	12 3b       	cp.w	r11,r9
8000a4e8:	c0 72       	brcc	8000a4f6 <__avr32_f64_add+0x26>
8000a4ea:	16 97       	mov	r7,r11
8000a4ec:	12 9b       	mov	r11,r9
8000a4ee:	0e 99       	mov	r9,r7
8000a4f0:	14 97       	mov	r7,r10
8000a4f2:	10 9a       	mov	r10,r8
8000a4f4:	0e 98       	mov	r8,r7
8000a4f6:	30 0e       	mov	lr,0
8000a4f8:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a4fc:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000a500:	b5 ab       	sbr	r11,0x14
8000a502:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a506:	c6 20       	breq	8000a5ca <__avr32_f64_add_op2_subnormal>
8000a508:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000a50c:	b5 a9       	sbr	r9,0x14
8000a50e:	e0 47 07 ff 	cp.w	r7,2047
8000a512:	c2 80       	breq	8000a562 <__avr32_f64_add_opH_nan_or_inf>
8000a514:	0e 26       	rsub	r6,r7
8000a516:	c1 20       	breq	8000a53a <__avr32_f64_add_shift_done>
8000a518:	e0 46 00 36 	cp.w	r6,54
8000a51c:	c1 52       	brcc	8000a546 <__avr32_f64_add_res_of_done>
8000a51e:	ec 05 11 20 	rsub	r5,r6,32
8000a522:	e0 46 00 20 	cp.w	r6,32
8000a526:	c3 52       	brcc	8000a590 <__avr32_f64_add_longshift>
8000a528:	f0 05 09 4e 	lsl	lr,r8,r5
8000a52c:	f2 05 09 45 	lsl	r5,r9,r5
8000a530:	f0 06 0a 48 	lsr	r8,r8,r6
8000a534:	f2 06 0a 49 	lsr	r9,r9,r6
8000a538:	0a 48       	or	r8,r5

8000a53a <__avr32_f64_add_shift_done>:
8000a53a:	10 0a       	add	r10,r8
8000a53c:	f6 09 00 4b 	adc	r11,r11,r9
8000a540:	ed bb 00 15 	bld	r11,0x15
8000a544:	c3 40       	breq	8000a5ac <__avr32_f64_add_res_of>

8000a546 <__avr32_f64_add_res_of_done>:
8000a546:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a54a:	18 4b       	or	r11,r12

8000a54c <__avr32_f64_add_round>:
8000a54c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000a550:	18 4e       	or	lr,r12
8000a552:	ee 1e 80 00 	eorh	lr,0x8000
8000a556:	f1 be 04 20 	satu	lr,0x1
8000a55a:	1c 0a       	add	r10,lr
8000a55c:	5c 0b       	acr	r11
8000a55e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a562 <__avr32_f64_add_opH_nan_or_inf>:
8000a562:	b5 cb       	cbr	r11,0x14
8000a564:	f7 ea 10 0e 	or	lr,r11,r10
8000a568:	c1 01       	brne	8000a588 <__avr32_f64_add_return_nan>
8000a56a:	e0 46 07 ff 	cp.w	r6,2047
8000a56e:	c0 30       	breq	8000a574 <__avr32_f64_add_opL_nan_or_inf>
8000a570:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a574 <__avr32_f64_add_opL_nan_or_inf>:
8000a574:	b5 c9       	cbr	r9,0x14
8000a576:	f3 e8 10 0e 	or	lr,r9,r8
8000a57a:	c0 71       	brne	8000a588 <__avr32_f64_add_return_nan>
8000a57c:	30 0a       	mov	r10,0
8000a57e:	fc 1b 7f f0 	movh	r11,0x7ff0
8000a582:	18 4b       	or	r11,r12
8000a584:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a588 <__avr32_f64_add_return_nan>:
8000a588:	3f fa       	mov	r10,-1
8000a58a:	3f fb       	mov	r11,-1
8000a58c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a590 <__avr32_f64_add_longshift>:
8000a590:	f1 b6 04 c0 	satu	r6,0x6
8000a594:	f0 0e 17 00 	moveq	lr,r8
8000a598:	c0 60       	breq	8000a5a4 <__avr32_f64_add_longshift+0x14>
8000a59a:	f2 05 09 4e 	lsl	lr,r9,r5
8000a59e:	58 08       	cp.w	r8,0
8000a5a0:	5f 18       	srne	r8
8000a5a2:	10 4e       	or	lr,r8
8000a5a4:	f2 06 0a 48 	lsr	r8,r9,r6
8000a5a8:	30 09       	mov	r9,0
8000a5aa:	cc 8b       	rjmp	8000a53a <__avr32_f64_add_shift_done>

8000a5ac <__avr32_f64_add_res_of>:
8000a5ac:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000a5b0:	a1 9b       	lsr	r11,0x1
8000a5b2:	5d 0a       	ror	r10
8000a5b4:	5d 0e       	ror	lr
8000a5b6:	2f f7       	sub	r7,-1
8000a5b8:	e0 47 07 ff 	cp.w	r7,2047
8000a5bc:	f9 ba 00 00 	moveq	r10,0
8000a5c0:	f9 bb 00 00 	moveq	r11,0
8000a5c4:	f9 be 00 00 	moveq	lr,0
8000a5c8:	cb fb       	rjmp	8000a546 <__avr32_f64_add_res_of_done>

8000a5ca <__avr32_f64_add_op2_subnormal>:
8000a5ca:	30 16       	mov	r6,1
8000a5cc:	58 07       	cp.w	r7,0
8000a5ce:	ca 01       	brne	8000a50e <__avr32_f64_add+0x3e>
8000a5d0:	b5 cb       	cbr	r11,0x14
8000a5d2:	10 0a       	add	r10,r8
8000a5d4:	f6 09 00 4b 	adc	r11,r11,r9
8000a5d8:	18 4b       	or	r11,r12
8000a5da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a5de:	d7 03       	nop

8000a5e0 <__avr32_f64_to_u32>:
8000a5e0:	58 0b       	cp.w	r11,0
8000a5e2:	5e 6d       	retmi	0

8000a5e4 <__avr32_f64_to_s32>:
8000a5e4:	f6 0c 15 01 	lsl	r12,r11,0x1
8000a5e8:	b5 9c       	lsr	r12,0x15
8000a5ea:	e0 2c 03 ff 	sub	r12,1023
8000a5ee:	5e 3d       	retlo	0
8000a5f0:	f8 0c 11 1f 	rsub	r12,r12,31
8000a5f4:	16 99       	mov	r9,r11
8000a5f6:	ab 7b       	lsl	r11,0xb
8000a5f8:	bf bb       	sbr	r11,0x1f
8000a5fa:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a5fe:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a602:	a1 79       	lsl	r9,0x1
8000a604:	5e 2b       	reths	r11
8000a606:	5c 3b       	neg	r11
8000a608:	5e fb       	retal	r11

8000a60a <__avr32_u32_to_f64>:
8000a60a:	f8 cb 00 00 	sub	r11,r12,0
8000a60e:	30 0c       	mov	r12,0
8000a610:	c0 38       	rjmp	8000a616 <__avr32_s32_to_f64+0x4>

8000a612 <__avr32_s32_to_f64>:
8000a612:	18 9b       	mov	r11,r12
8000a614:	5c 4b       	abs	r11
8000a616:	30 0a       	mov	r10,0
8000a618:	5e 0b       	reteq	r11
8000a61a:	d4 01       	pushm	lr
8000a61c:	e0 69 04 1e 	mov	r9,1054
8000a620:	f6 08 12 00 	clz	r8,r11
8000a624:	c1 70       	breq	8000a652 <__avr32_s32_to_f64+0x40>
8000a626:	c0 c3       	brcs	8000a63e <__avr32_s32_to_f64+0x2c>
8000a628:	f0 0e 11 20 	rsub	lr,r8,32
8000a62c:	f6 08 09 4b 	lsl	r11,r11,r8
8000a630:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a634:	1c 4b       	or	r11,lr
8000a636:	f4 08 09 4a 	lsl	r10,r10,r8
8000a63a:	10 19       	sub	r9,r8
8000a63c:	c0 b8       	rjmp	8000a652 <__avr32_s32_to_f64+0x40>
8000a63e:	f4 08 12 00 	clz	r8,r10
8000a642:	f9 b8 03 00 	movlo	r8,0
8000a646:	f7 b8 02 e0 	subhs	r8,-32
8000a64a:	f4 08 09 4b 	lsl	r11,r10,r8
8000a64e:	30 0a       	mov	r10,0
8000a650:	10 19       	sub	r9,r8
8000a652:	58 09       	cp.w	r9,0
8000a654:	e0 89 00 30 	brgt	8000a6b4 <__avr32_s32_to_f64+0xa2>
8000a658:	5c 39       	neg	r9
8000a65a:	2f f9       	sub	r9,-1
8000a65c:	e0 49 00 36 	cp.w	r9,54
8000a660:	c0 43       	brcs	8000a668 <__avr32_s32_to_f64+0x56>
8000a662:	30 0b       	mov	r11,0
8000a664:	30 0a       	mov	r10,0
8000a666:	c2 68       	rjmp	8000a6b2 <__avr32_s32_to_f64+0xa0>
8000a668:	2f 69       	sub	r9,-10
8000a66a:	f2 08 11 20 	rsub	r8,r9,32
8000a66e:	e0 49 00 20 	cp.w	r9,32
8000a672:	c0 b2       	brcc	8000a688 <__avr32_s32_to_f64+0x76>
8000a674:	f4 08 09 4e 	lsl	lr,r10,r8
8000a678:	f6 08 09 48 	lsl	r8,r11,r8
8000a67c:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a680:	f6 09 0a 4b 	lsr	r11,r11,r9
8000a684:	10 4b       	or	r11,r8
8000a686:	c0 88       	rjmp	8000a696 <__avr32_s32_to_f64+0x84>
8000a688:	f6 08 09 4e 	lsl	lr,r11,r8
8000a68c:	14 4e       	or	lr,r10
8000a68e:	16 9a       	mov	r10,r11
8000a690:	30 0b       	mov	r11,0
8000a692:	f4 09 0a 4a 	lsr	r10,r10,r9
8000a696:	ed ba 00 00 	bld	r10,0x0
8000a69a:	c0 92       	brcc	8000a6ac <__avr32_s32_to_f64+0x9a>
8000a69c:	1c 7e       	tst	lr,lr
8000a69e:	c0 41       	brne	8000a6a6 <__avr32_s32_to_f64+0x94>
8000a6a0:	ed ba 00 01 	bld	r10,0x1
8000a6a4:	c0 42       	brcc	8000a6ac <__avr32_s32_to_f64+0x9a>
8000a6a6:	2f fa       	sub	r10,-1
8000a6a8:	f7 bb 02 ff 	subhs	r11,-1
8000a6ac:	5c fc       	rol	r12
8000a6ae:	5d 0b       	ror	r11
8000a6b0:	5d 0a       	ror	r10
8000a6b2:	d8 02       	popm	pc
8000a6b4:	e0 68 03 ff 	mov	r8,1023
8000a6b8:	ed ba 00 0b 	bld	r10,0xb
8000a6bc:	f7 b8 00 ff 	subeq	r8,-1
8000a6c0:	10 0a       	add	r10,r8
8000a6c2:	5c 0b       	acr	r11
8000a6c4:	f7 b9 03 fe 	sublo	r9,-2
8000a6c8:	e0 49 07 ff 	cp.w	r9,2047
8000a6cc:	c0 55       	brlt	8000a6d6 <__avr32_s32_to_f64+0xc4>
8000a6ce:	30 0a       	mov	r10,0
8000a6d0:	fc 1b ff e0 	movh	r11,0xffe0
8000a6d4:	c0 c8       	rjmp	8000a6ec <__floatsidf_return_op1>
8000a6d6:	ed bb 00 1f 	bld	r11,0x1f
8000a6da:	f7 b9 01 01 	subne	r9,1
8000a6de:	ab 9a       	lsr	r10,0xb
8000a6e0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a6e4:	a1 7b       	lsl	r11,0x1
8000a6e6:	ab 9b       	lsr	r11,0xb
8000a6e8:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000a6ec <__floatsidf_return_op1>:
8000a6ec:	a1 7c       	lsl	r12,0x1
8000a6ee:	5d 0b       	ror	r11
8000a6f0:	d8 02       	popm	pc

8000a6f2 <__avr32_f64_cmp_eq>:
8000a6f2:	10 3a       	cp.w	r10,r8
8000a6f4:	f2 0b 13 00 	cpc	r11,r9
8000a6f8:	c0 80       	breq	8000a708 <__avr32_f64_cmp_eq+0x16>
8000a6fa:	a1 7b       	lsl	r11,0x1
8000a6fc:	a1 79       	lsl	r9,0x1
8000a6fe:	14 4b       	or	r11,r10
8000a700:	12 4b       	or	r11,r9
8000a702:	10 4b       	or	r11,r8
8000a704:	5e 0f       	reteq	1
8000a706:	5e fd       	retal	0
8000a708:	a1 7b       	lsl	r11,0x1
8000a70a:	fc 1c ff e0 	movh	r12,0xffe0
8000a70e:	58 0a       	cp.w	r10,0
8000a710:	f8 0b 13 00 	cpc	r11,r12
8000a714:	5e 8f       	retls	1
8000a716:	5e fd       	retal	0

8000a718 <__avr32_f64_cmp_ge>:
8000a718:	1a de       	st.w	--sp,lr
8000a71a:	1a d7       	st.w	--sp,r7
8000a71c:	a1 7b       	lsl	r11,0x1
8000a71e:	5f 3c       	srlo	r12
8000a720:	a1 79       	lsl	r9,0x1
8000a722:	5f 37       	srlo	r7
8000a724:	5c fc       	rol	r12
8000a726:	fc 1e ff e0 	movh	lr,0xffe0
8000a72a:	58 0a       	cp.w	r10,0
8000a72c:	fc 0b 13 00 	cpc	r11,lr
8000a730:	e0 8b 00 1d 	brhi	8000a76a <__avr32_f64_cmp_ge+0x52>
8000a734:	58 08       	cp.w	r8,0
8000a736:	fc 09 13 00 	cpc	r9,lr
8000a73a:	e0 8b 00 18 	brhi	8000a76a <__avr32_f64_cmp_ge+0x52>
8000a73e:	58 0b       	cp.w	r11,0
8000a740:	f5 ba 00 00 	subfeq	r10,0
8000a744:	c1 50       	breq	8000a76e <__avr32_f64_cmp_ge+0x56>
8000a746:	1b 07       	ld.w	r7,sp++
8000a748:	1b 0e       	ld.w	lr,sp++
8000a74a:	58 3c       	cp.w	r12,3
8000a74c:	c0 a0       	breq	8000a760 <__avr32_f64_cmp_ge+0x48>
8000a74e:	58 1c       	cp.w	r12,1
8000a750:	c0 33       	brcs	8000a756 <__avr32_f64_cmp_ge+0x3e>
8000a752:	5e 0f       	reteq	1
8000a754:	5e 1d       	retne	0
8000a756:	10 3a       	cp.w	r10,r8
8000a758:	f2 0b 13 00 	cpc	r11,r9
8000a75c:	5e 2f       	reths	1
8000a75e:	5e 3d       	retlo	0
8000a760:	14 38       	cp.w	r8,r10
8000a762:	f6 09 13 00 	cpc	r9,r11
8000a766:	5e 2f       	reths	1
8000a768:	5e 3d       	retlo	0
8000a76a:	1b 07       	ld.w	r7,sp++
8000a76c:	d8 0a       	popm	pc,r12=0
8000a76e:	58 17       	cp.w	r7,1
8000a770:	5f 0c       	sreq	r12
8000a772:	58 09       	cp.w	r9,0
8000a774:	f5 b8 00 00 	subfeq	r8,0
8000a778:	1b 07       	ld.w	r7,sp++
8000a77a:	1b 0e       	ld.w	lr,sp++
8000a77c:	5e 0f       	reteq	1
8000a77e:	5e fc       	retal	r12

8000a780 <__avr32_f64_cmp_lt>:
8000a780:	1a de       	st.w	--sp,lr
8000a782:	1a d7       	st.w	--sp,r7
8000a784:	a1 7b       	lsl	r11,0x1
8000a786:	5f 3c       	srlo	r12
8000a788:	a1 79       	lsl	r9,0x1
8000a78a:	5f 37       	srlo	r7
8000a78c:	5c fc       	rol	r12
8000a78e:	fc 1e ff e0 	movh	lr,0xffe0
8000a792:	58 0a       	cp.w	r10,0
8000a794:	fc 0b 13 00 	cpc	r11,lr
8000a798:	e0 8b 00 1d 	brhi	8000a7d2 <__avr32_f64_cmp_lt+0x52>
8000a79c:	58 08       	cp.w	r8,0
8000a79e:	fc 09 13 00 	cpc	r9,lr
8000a7a2:	e0 8b 00 18 	brhi	8000a7d2 <__avr32_f64_cmp_lt+0x52>
8000a7a6:	58 0b       	cp.w	r11,0
8000a7a8:	f5 ba 00 00 	subfeq	r10,0
8000a7ac:	c1 50       	breq	8000a7d6 <__avr32_f64_cmp_lt+0x56>
8000a7ae:	1b 07       	ld.w	r7,sp++
8000a7b0:	1b 0e       	ld.w	lr,sp++
8000a7b2:	58 3c       	cp.w	r12,3
8000a7b4:	c0 a0       	breq	8000a7c8 <__avr32_f64_cmp_lt+0x48>
8000a7b6:	58 1c       	cp.w	r12,1
8000a7b8:	c0 33       	brcs	8000a7be <__avr32_f64_cmp_lt+0x3e>
8000a7ba:	5e 0d       	reteq	0
8000a7bc:	5e 1f       	retne	1
8000a7be:	10 3a       	cp.w	r10,r8
8000a7c0:	f2 0b 13 00 	cpc	r11,r9
8000a7c4:	5e 2d       	reths	0
8000a7c6:	5e 3f       	retlo	1
8000a7c8:	14 38       	cp.w	r8,r10
8000a7ca:	f6 09 13 00 	cpc	r9,r11
8000a7ce:	5e 2d       	reths	0
8000a7d0:	5e 3f       	retlo	1
8000a7d2:	1b 07       	ld.w	r7,sp++
8000a7d4:	d8 0a       	popm	pc,r12=0
8000a7d6:	58 17       	cp.w	r7,1
8000a7d8:	5f 1c       	srne	r12
8000a7da:	58 09       	cp.w	r9,0
8000a7dc:	f5 b8 00 00 	subfeq	r8,0
8000a7e0:	1b 07       	ld.w	r7,sp++
8000a7e2:	1b 0e       	ld.w	lr,sp++
8000a7e4:	5e 0d       	reteq	0
8000a7e6:	5e fc       	retal	r12

8000a7e8 <__avr32_f64_div>:
8000a7e8:	eb cd 40 ff 	pushm	r0-r7,lr
8000a7ec:	f7 e9 20 0e 	eor	lr,r11,r9
8000a7f0:	f6 07 16 14 	lsr	r7,r11,0x14
8000a7f4:	a9 7b       	lsl	r11,0x9
8000a7f6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000a7fa:	a9 7a       	lsl	r10,0x9
8000a7fc:	bd bb       	sbr	r11,0x1d
8000a7fe:	e4 1b 3f ff 	andh	r11,0x3fff
8000a802:	ab d7       	cbr	r7,0xb
8000a804:	e0 80 00 cc 	breq	8000a99c <__avr32_f64_div_round_subnormal+0x54>
8000a808:	e0 47 07 ff 	cp.w	r7,2047
8000a80c:	e0 84 00 b5 	brge	8000a976 <__avr32_f64_div_round_subnormal+0x2e>
8000a810:	f2 06 16 14 	lsr	r6,r9,0x14
8000a814:	a9 79       	lsl	r9,0x9
8000a816:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000a81a:	a9 78       	lsl	r8,0x9
8000a81c:	bd b9       	sbr	r9,0x1d
8000a81e:	e4 19 3f ff 	andh	r9,0x3fff
8000a822:	ab d6       	cbr	r6,0xb
8000a824:	e0 80 00 e2 	breq	8000a9e8 <__avr32_f64_div_round_subnormal+0xa0>
8000a828:	e0 46 07 ff 	cp.w	r6,2047
8000a82c:	e0 84 00 b2 	brge	8000a990 <__avr32_f64_div_round_subnormal+0x48>
8000a830:	0c 17       	sub	r7,r6
8000a832:	fe 37 fc 01 	sub	r7,-1023
8000a836:	fc 1c 80 00 	movh	r12,0x8000
8000a83a:	f8 03 16 01 	lsr	r3,r12,0x1
8000a83e:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000a842:	5c d4       	com	r4
8000a844:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000a848:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a84c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a850:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a854:	ea 03 15 02 	lsl	r3,r5,0x2
8000a858:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a85c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a860:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a864:	ea 03 15 02 	lsl	r3,r5,0x2
8000a868:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a86c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000a870:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a874:	ea 03 15 02 	lsl	r3,r5,0x2
8000a878:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a87c:	e4 09 07 40 	macu.d	r0,r2,r9
8000a880:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a884:	02 04       	add	r4,r1
8000a886:	5c 05       	acr	r5
8000a888:	a3 65       	lsl	r5,0x2
8000a88a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a88e:	a3 64       	lsl	r4,0x2
8000a890:	5c 34       	neg	r4
8000a892:	f8 05 01 45 	sbc	r5,r12,r5
8000a896:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a89a:	e4 05 07 40 	macu.d	r0,r2,r5
8000a89e:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a8a2:	02 04       	add	r4,r1
8000a8a4:	5c 05       	acr	r5
8000a8a6:	ea 03 15 02 	lsl	r3,r5,0x2
8000a8aa:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a8ae:	e8 02 15 02 	lsl	r2,r4,0x2
8000a8b2:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a8b6:	e4 09 07 40 	macu.d	r0,r2,r9
8000a8ba:	e6 09 06 44 	mulu.d	r4,r3,r9
8000a8be:	02 04       	add	r4,r1
8000a8c0:	5c 05       	acr	r5
8000a8c2:	a3 65       	lsl	r5,0x2
8000a8c4:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000a8c8:	a3 64       	lsl	r4,0x2
8000a8ca:	5c 34       	neg	r4
8000a8cc:	f8 05 01 45 	sbc	r5,r12,r5
8000a8d0:	e6 04 06 40 	mulu.d	r0,r3,r4
8000a8d4:	e4 05 07 40 	macu.d	r0,r2,r5
8000a8d8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000a8dc:	02 04       	add	r4,r1
8000a8de:	5c 05       	acr	r5
8000a8e0:	ea 03 15 02 	lsl	r3,r5,0x2
8000a8e4:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000a8e8:	e8 02 15 02 	lsl	r2,r4,0x2
8000a8ec:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000a8f0:	e4 0b 07 40 	macu.d	r0,r2,r11
8000a8f4:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000a8f8:	02 02       	add	r2,r1
8000a8fa:	5c 03       	acr	r3
8000a8fc:	ed b3 00 1c 	bld	r3,0x1c
8000a900:	c0 90       	breq	8000a912 <__avr32_f64_div+0x12a>
8000a902:	a1 72       	lsl	r2,0x1
8000a904:	5c f3       	rol	r3
8000a906:	20 17       	sub	r7,1
8000a908:	a3 9a       	lsr	r10,0x3
8000a90a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000a90e:	a3 9b       	lsr	r11,0x3
8000a910:	c0 58       	rjmp	8000a91a <__avr32_f64_div+0x132>
8000a912:	a5 8a       	lsr	r10,0x4
8000a914:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000a918:	a5 8b       	lsr	r11,0x4
8000a91a:	58 07       	cp.w	r7,0
8000a91c:	e0 8a 00 8b 	brle	8000aa32 <__avr32_f64_div_res_subnormal>
8000a920:	e0 12 ff 00 	andl	r2,0xff00
8000a924:	e8 12 00 80 	orl	r2,0x80
8000a928:	e6 08 06 40 	mulu.d	r0,r3,r8
8000a92c:	e4 09 07 40 	macu.d	r0,r2,r9
8000a930:	e4 08 06 44 	mulu.d	r4,r2,r8
8000a934:	e6 09 06 48 	mulu.d	r8,r3,r9
8000a938:	00 05       	add	r5,r0
8000a93a:	f0 01 00 48 	adc	r8,r8,r1
8000a93e:	5c 09       	acr	r9
8000a940:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000a944:	58 04       	cp.w	r4,0
8000a946:	5c 25       	cpc	r5

8000a948 <__avr32_f64_div_round_subnormal>:
8000a948:	f4 08 13 00 	cpc	r8,r10
8000a94c:	f6 09 13 00 	cpc	r9,r11
8000a950:	5f 36       	srlo	r6
8000a952:	f8 06 17 00 	moveq	r6,r12
8000a956:	e4 0a 16 08 	lsr	r10,r2,0x8
8000a95a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000a95e:	e6 0b 16 08 	lsr	r11,r3,0x8
8000a962:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a966:	ed be 00 1f 	bld	lr,0x1f
8000a96a:	ef bb 00 1f 	bst	r11,0x1f
8000a96e:	0c 0a       	add	r10,r6
8000a970:	5c 0b       	acr	r11
8000a972:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000a976:	e4 1b 00 0f 	andh	r11,0xf
8000a97a:	14 4b       	or	r11,r10
8000a97c:	e0 81 00 a7 	brne	8000aaca <__avr32_f64_div_res_subnormal+0x98>
8000a980:	f2 06 16 14 	lsr	r6,r9,0x14
8000a984:	ab d6       	cbr	r6,0xb
8000a986:	e0 46 07 ff 	cp.w	r6,2047
8000a98a:	e0 81 00 a4 	brne	8000aad2 <__avr32_f64_div_res_subnormal+0xa0>
8000a98e:	c9 e8       	rjmp	8000aaca <__avr32_f64_div_res_subnormal+0x98>
8000a990:	e4 19 00 0f 	andh	r9,0xf
8000a994:	10 49       	or	r9,r8
8000a996:	e0 81 00 9a 	brne	8000aaca <__avr32_f64_div_res_subnormal+0x98>
8000a99a:	c9 28       	rjmp	8000aabe <__avr32_f64_div_res_subnormal+0x8c>
8000a99c:	a3 7b       	lsl	r11,0x3
8000a99e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000a9a2:	a3 7a       	lsl	r10,0x3
8000a9a4:	f5 eb 10 04 	or	r4,r10,r11
8000a9a8:	e0 80 00 a0 	breq	8000aae8 <__avr32_f64_div_op1_zero>
8000a9ac:	f6 04 12 00 	clz	r4,r11
8000a9b0:	c1 70       	breq	8000a9de <__avr32_f64_div_round_subnormal+0x96>
8000a9b2:	c0 c3       	brcs	8000a9ca <__avr32_f64_div_round_subnormal+0x82>
8000a9b4:	e8 05 11 20 	rsub	r5,r4,32
8000a9b8:	f6 04 09 4b 	lsl	r11,r11,r4
8000a9bc:	f4 05 0a 45 	lsr	r5,r10,r5
8000a9c0:	0a 4b       	or	r11,r5
8000a9c2:	f4 04 09 4a 	lsl	r10,r10,r4
8000a9c6:	08 17       	sub	r7,r4
8000a9c8:	c0 b8       	rjmp	8000a9de <__avr32_f64_div_round_subnormal+0x96>
8000a9ca:	f4 04 12 00 	clz	r4,r10
8000a9ce:	f9 b4 03 00 	movlo	r4,0
8000a9d2:	f7 b4 02 e0 	subhs	r4,-32
8000a9d6:	f4 04 09 4b 	lsl	r11,r10,r4
8000a9da:	30 0a       	mov	r10,0
8000a9dc:	08 17       	sub	r7,r4
8000a9de:	a3 8a       	lsr	r10,0x2
8000a9e0:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000a9e4:	a3 8b       	lsr	r11,0x2
8000a9e6:	c1 1b       	rjmp	8000a808 <__avr32_f64_div+0x20>
8000a9e8:	a3 79       	lsl	r9,0x3
8000a9ea:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000a9ee:	a3 78       	lsl	r8,0x3
8000a9f0:	f3 e8 10 04 	or	r4,r9,r8
8000a9f4:	c6 f0       	breq	8000aad2 <__avr32_f64_div_res_subnormal+0xa0>
8000a9f6:	f2 04 12 00 	clz	r4,r9
8000a9fa:	c1 70       	breq	8000aa28 <__avr32_f64_div_round_subnormal+0xe0>
8000a9fc:	c0 c3       	brcs	8000aa14 <__avr32_f64_div_round_subnormal+0xcc>
8000a9fe:	e8 05 11 20 	rsub	r5,r4,32
8000aa02:	f2 04 09 49 	lsl	r9,r9,r4
8000aa06:	f0 05 0a 45 	lsr	r5,r8,r5
8000aa0a:	0a 49       	or	r9,r5
8000aa0c:	f0 04 09 48 	lsl	r8,r8,r4
8000aa10:	08 16       	sub	r6,r4
8000aa12:	c0 b8       	rjmp	8000aa28 <__avr32_f64_div_round_subnormal+0xe0>
8000aa14:	f0 04 12 00 	clz	r4,r8
8000aa18:	f9 b4 03 00 	movlo	r4,0
8000aa1c:	f7 b4 02 e0 	subhs	r4,-32
8000aa20:	f0 04 09 49 	lsl	r9,r8,r4
8000aa24:	30 08       	mov	r8,0
8000aa26:	08 16       	sub	r6,r4
8000aa28:	a3 88       	lsr	r8,0x2
8000aa2a:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000aa2e:	a3 89       	lsr	r9,0x2
8000aa30:	cf ca       	rjmp	8000a828 <__avr32_f64_div+0x40>

8000aa32 <__avr32_f64_div_res_subnormal>:
8000aa32:	5c 37       	neg	r7
8000aa34:	2f f7       	sub	r7,-1
8000aa36:	f1 b7 04 c0 	satu	r7,0x6
8000aa3a:	e0 47 00 20 	cp.w	r7,32
8000aa3e:	c1 54       	brge	8000aa68 <__avr32_f64_div_res_subnormal+0x36>
8000aa40:	ee 06 11 20 	rsub	r6,r7,32
8000aa44:	e4 07 0a 42 	lsr	r2,r2,r7
8000aa48:	e6 06 09 4c 	lsl	r12,r3,r6
8000aa4c:	18 42       	or	r2,r12
8000aa4e:	e6 07 0a 43 	lsr	r3,r3,r7
8000aa52:	f4 06 09 41 	lsl	r1,r10,r6
8000aa56:	f4 07 0a 4a 	lsr	r10,r10,r7
8000aa5a:	f6 06 09 4c 	lsl	r12,r11,r6
8000aa5e:	18 4a       	or	r10,r12
8000aa60:	f6 07 0a 4b 	lsr	r11,r11,r7
8000aa64:	30 00       	mov	r0,0
8000aa66:	c1 58       	rjmp	8000aa90 <__avr32_f64_div_res_subnormal+0x5e>
8000aa68:	ee 06 11 20 	rsub	r6,r7,32
8000aa6c:	f9 b0 00 00 	moveq	r0,0
8000aa70:	f9 bc 00 00 	moveq	r12,0
8000aa74:	c0 50       	breq	8000aa7e <__avr32_f64_div_res_subnormal+0x4c>
8000aa76:	f4 06 09 40 	lsl	r0,r10,r6
8000aa7a:	f6 06 09 4c 	lsl	r12,r11,r6
8000aa7e:	e6 07 0a 42 	lsr	r2,r3,r7
8000aa82:	30 03       	mov	r3,0
8000aa84:	f4 07 0a 41 	lsr	r1,r10,r7
8000aa88:	18 41       	or	r1,r12
8000aa8a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000aa8e:	30 0b       	mov	r11,0
8000aa90:	e0 12 ff 00 	andl	r2,0xff00
8000aa94:	e8 12 00 80 	orl	r2,0x80
8000aa98:	e6 08 06 46 	mulu.d	r6,r3,r8
8000aa9c:	e4 09 07 46 	macu.d	r6,r2,r9
8000aaa0:	e4 08 06 44 	mulu.d	r4,r2,r8
8000aaa4:	e6 09 06 48 	mulu.d	r8,r3,r9
8000aaa8:	0c 05       	add	r5,r6
8000aaaa:	f0 07 00 48 	adc	r8,r8,r7
8000aaae:	5c 09       	acr	r9
8000aab0:	30 07       	mov	r7,0
8000aab2:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000aab6:	00 34       	cp.w	r4,r0
8000aab8:	e2 05 13 00 	cpc	r5,r1
8000aabc:	c4 6b       	rjmp	8000a948 <__avr32_f64_div_round_subnormal>
8000aabe:	1c 9b       	mov	r11,lr
8000aac0:	e6 1b 80 00 	andh	r11,0x8000,COH
8000aac4:	30 0a       	mov	r10,0
8000aac6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000aaca:	3f fb       	mov	r11,-1
8000aacc:	30 0a       	mov	r10,0
8000aace:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000aad2:	f5 eb 10 04 	or	r4,r10,r11
8000aad6:	c0 90       	breq	8000aae8 <__avr32_f64_div_op1_zero>
8000aad8:	1c 9b       	mov	r11,lr
8000aada:	e6 1b 80 00 	andh	r11,0x8000,COH
8000aade:	ea 1b 7f f0 	orh	r11,0x7ff0
8000aae2:	30 0a       	mov	r10,0
8000aae4:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000aae8 <__avr32_f64_div_op1_zero>:
8000aae8:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000aaec:	ce f0       	breq	8000aaca <__avr32_f64_div_res_subnormal+0x98>
8000aaee:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000aaf2:	e0 44 07 ff 	cp.w	r4,2047
8000aaf6:	ce 41       	brne	8000aabe <__avr32_f64_div_res_subnormal+0x8c>
8000aaf8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000aafc:	ce 10       	breq	8000aabe <__avr32_f64_div_res_subnormal+0x8c>
8000aafe:	ce 6b       	rjmp	8000aaca <__avr32_f64_div_res_subnormal+0x98>

8000ab00 <__avr32_umod64>:
8000ab00:	d4 31       	pushm	r0-r7,lr
8000ab02:	1a 97       	mov	r7,sp
8000ab04:	20 3d       	sub	sp,12
8000ab06:	10 9c       	mov	r12,r8
8000ab08:	12 95       	mov	r5,r9
8000ab0a:	14 9e       	mov	lr,r10
8000ab0c:	16 91       	mov	r1,r11
8000ab0e:	16 96       	mov	r6,r11
8000ab10:	58 09       	cp.w	r9,0
8000ab12:	e0 81 00 81 	brne	8000ac14 <__avr32_umod64+0x114>
8000ab16:	16 38       	cp.w	r8,r11
8000ab18:	e0 88 00 12 	brls	8000ab3c <__avr32_umod64+0x3c>
8000ab1c:	f0 08 12 00 	clz	r8,r8
8000ab20:	c4 e0       	breq	8000abbc <__avr32_umod64+0xbc>
8000ab22:	f6 08 09 46 	lsl	r6,r11,r8
8000ab26:	f8 08 09 4c 	lsl	r12,r12,r8
8000ab2a:	f0 0b 11 20 	rsub	r11,r8,32
8000ab2e:	f4 08 09 4e 	lsl	lr,r10,r8
8000ab32:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000ab36:	f7 e6 10 06 	or	r6,r11,r6
8000ab3a:	c4 18       	rjmp	8000abbc <__avr32_umod64+0xbc>
8000ab3c:	58 08       	cp.w	r8,0
8000ab3e:	c0 51       	brne	8000ab48 <__avr32_umod64+0x48>
8000ab40:	30 19       	mov	r9,1
8000ab42:	f2 08 0d 08 	divu	r8,r9,r8
8000ab46:	10 9c       	mov	r12,r8
8000ab48:	f8 08 12 00 	clz	r8,r12
8000ab4c:	c0 31       	brne	8000ab52 <__avr32_umod64+0x52>
8000ab4e:	18 16       	sub	r6,r12
8000ab50:	c3 68       	rjmp	8000abbc <__avr32_umod64+0xbc>
8000ab52:	f0 03 11 20 	rsub	r3,r8,32
8000ab56:	f4 03 0a 4b 	lsr	r11,r10,r3
8000ab5a:	f8 08 09 4c 	lsl	r12,r12,r8
8000ab5e:	ec 08 09 49 	lsl	r9,r6,r8
8000ab62:	ec 03 0a 43 	lsr	r3,r6,r3
8000ab66:	f7 e9 10 09 	or	r9,r11,r9
8000ab6a:	f8 05 16 10 	lsr	r5,r12,0x10
8000ab6e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000ab72:	e6 05 0d 02 	divu	r2,r3,r5
8000ab76:	f2 0e 16 10 	lsr	lr,r9,0x10
8000ab7a:	ec 02 02 4b 	mul	r11,r6,r2
8000ab7e:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000ab82:	16 3e       	cp.w	lr,r11
8000ab84:	c0 72       	brcc	8000ab92 <__avr32_umod64+0x92>
8000ab86:	18 0e       	add	lr,r12
8000ab88:	18 3e       	cp.w	lr,r12
8000ab8a:	c0 43       	brcs	8000ab92 <__avr32_umod64+0x92>
8000ab8c:	16 3e       	cp.w	lr,r11
8000ab8e:	fd dc e3 0e 	addcs	lr,lr,r12
8000ab92:	fc 0b 01 03 	sub	r3,lr,r11
8000ab96:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000ab9a:	e6 05 0d 02 	divu	r2,r3,r5
8000ab9e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000aba2:	a5 36       	mul	r6,r2
8000aba4:	0c 39       	cp.w	r9,r6
8000aba6:	c0 72       	brcc	8000abb4 <__avr32_umod64+0xb4>
8000aba8:	18 09       	add	r9,r12
8000abaa:	18 39       	cp.w	r9,r12
8000abac:	c0 43       	brcs	8000abb4 <__avr32_umod64+0xb4>
8000abae:	0c 39       	cp.w	r9,r6
8000abb0:	f3 dc e3 09 	addcs	r9,r9,r12
8000abb4:	f2 06 01 06 	sub	r6,r9,r6
8000abb8:	f4 08 09 4e 	lsl	lr,r10,r8
8000abbc:	f8 0a 16 10 	lsr	r10,r12,0x10
8000abc0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000abc4:	ec 0a 0d 02 	divu	r2,r6,r10
8000abc8:	fc 09 16 10 	lsr	r9,lr,0x10
8000abcc:	ea 02 02 4b 	mul	r11,r5,r2
8000abd0:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000abd4:	16 39       	cp.w	r9,r11
8000abd6:	c0 72       	brcc	8000abe4 <__avr32_umod64+0xe4>
8000abd8:	18 09       	add	r9,r12
8000abda:	18 39       	cp.w	r9,r12
8000abdc:	c0 43       	brcs	8000abe4 <__avr32_umod64+0xe4>
8000abde:	16 39       	cp.w	r9,r11
8000abe0:	f3 dc e3 09 	addcs	r9,r9,r12
8000abe4:	f2 0b 01 0b 	sub	r11,r9,r11
8000abe8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000abec:	f6 0a 0d 0a 	divu	r10,r11,r10
8000abf0:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000abf4:	ea 0a 02 4a 	mul	r10,r5,r10
8000abf8:	14 3e       	cp.w	lr,r10
8000abfa:	c0 72       	brcc	8000ac08 <__avr32_umod64+0x108>
8000abfc:	18 0e       	add	lr,r12
8000abfe:	18 3e       	cp.w	lr,r12
8000ac00:	c0 43       	brcs	8000ac08 <__avr32_umod64+0x108>
8000ac02:	14 3e       	cp.w	lr,r10
8000ac04:	fd dc e3 0e 	addcs	lr,lr,r12
8000ac08:	fc 0a 01 0a 	sub	r10,lr,r10
8000ac0c:	30 0b       	mov	r11,0
8000ac0e:	f4 08 0a 4a 	lsr	r10,r10,r8
8000ac12:	c7 b8       	rjmp	8000ad08 <__avr32_umod64+0x208>
8000ac14:	16 39       	cp.w	r9,r11
8000ac16:	e0 8b 00 79 	brhi	8000ad08 <__avr32_umod64+0x208>
8000ac1a:	f2 09 12 00 	clz	r9,r9
8000ac1e:	c1 21       	brne	8000ac42 <__avr32_umod64+0x142>
8000ac20:	10 3a       	cp.w	r10,r8
8000ac22:	5f 2b       	srhs	r11
8000ac24:	0a 31       	cp.w	r1,r5
8000ac26:	5f ba       	srhi	r10
8000ac28:	f7 ea 10 0a 	or	r10,r11,r10
8000ac2c:	f2 0a 18 00 	cp.b	r10,r9
8000ac30:	c0 60       	breq	8000ac3c <__avr32_umod64+0x13c>
8000ac32:	fc 08 01 0c 	sub	r12,lr,r8
8000ac36:	e2 05 01 46 	sbc	r6,r1,r5
8000ac3a:	18 9e       	mov	lr,r12
8000ac3c:	0c 9b       	mov	r11,r6
8000ac3e:	1c 9a       	mov	r10,lr
8000ac40:	c6 48       	rjmp	8000ad08 <__avr32_umod64+0x208>
8000ac42:	ea 09 09 4c 	lsl	r12,r5,r9
8000ac46:	f2 06 11 20 	rsub	r6,r9,32
8000ac4a:	f6 09 09 4b 	lsl	r11,r11,r9
8000ac4e:	f0 09 09 42 	lsl	r2,r8,r9
8000ac52:	ef 46 ff f4 	st.w	r7[-12],r6
8000ac56:	f0 06 0a 48 	lsr	r8,r8,r6
8000ac5a:	18 48       	or	r8,r12
8000ac5c:	e2 06 0a 4c 	lsr	r12,r1,r6
8000ac60:	f4 09 09 43 	lsl	r3,r10,r9
8000ac64:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000ac68:	f4 06 0a 4a 	lsr	r10,r10,r6
8000ac6c:	16 4a       	or	r10,r11
8000ac6e:	f0 0b 16 10 	lsr	r11,r8,0x10
8000ac72:	f8 0b 0d 04 	divu	r4,r12,r11
8000ac76:	f4 0c 16 10 	lsr	r12,r10,0x10
8000ac7a:	08 91       	mov	r1,r4
8000ac7c:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000ac80:	e8 0e 02 46 	mul	r6,r4,lr
8000ac84:	0c 3c       	cp.w	r12,r6
8000ac86:	c0 a2       	brcc	8000ac9a <__avr32_umod64+0x19a>
8000ac88:	20 11       	sub	r1,1
8000ac8a:	10 0c       	add	r12,r8
8000ac8c:	10 3c       	cp.w	r12,r8
8000ac8e:	c0 63       	brcs	8000ac9a <__avr32_umod64+0x19a>
8000ac90:	0c 3c       	cp.w	r12,r6
8000ac92:	f7 b1 03 01 	sublo	r1,1
8000ac96:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000ac9a:	0c 1c       	sub	r12,r6
8000ac9c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000aca0:	f8 0b 0d 04 	divu	r4,r12,r11
8000aca4:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000aca8:	08 96       	mov	r6,r4
8000acaa:	e8 0e 02 4e 	mul	lr,r4,lr
8000acae:	1c 3b       	cp.w	r11,lr
8000acb0:	c0 a2       	brcc	8000acc4 <__avr32_umod64+0x1c4>
8000acb2:	20 16       	sub	r6,1
8000acb4:	10 0b       	add	r11,r8
8000acb6:	10 3b       	cp.w	r11,r8
8000acb8:	c0 63       	brcs	8000acc4 <__avr32_umod64+0x1c4>
8000acba:	1c 3b       	cp.w	r11,lr
8000acbc:	f7 b6 03 01 	sublo	r6,1
8000acc0:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000acc4:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000acc8:	1c 1b       	sub	r11,lr
8000acca:	e2 02 06 40 	mulu.d	r0,r1,r2
8000acce:	00 9e       	mov	lr,r0
8000acd0:	02 9c       	mov	r12,r1
8000acd2:	16 3c       	cp.w	r12,r11
8000acd4:	e0 8b 00 08 	brhi	8000ace4 <__avr32_umod64+0x1e4>
8000acd8:	5f 06       	sreq	r6
8000acda:	06 30       	cp.w	r0,r3
8000acdc:	5f ba       	srhi	r10
8000acde:	ed ea 00 0a 	and	r10,r6,r10
8000ace2:	c0 60       	breq	8000acee <__avr32_umod64+0x1ee>
8000ace4:	fc 02 01 04 	sub	r4,lr,r2
8000ace8:	f8 08 01 4c 	sbc	r12,r12,r8
8000acec:	08 9e       	mov	lr,r4
8000acee:	e6 0e 01 0a 	sub	r10,r3,lr
8000acf2:	f6 0c 01 4c 	sbc	r12,r11,r12
8000acf6:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000acfa:	f8 09 0a 4b 	lsr	r11,r12,r9
8000acfe:	f4 09 0a 4a 	lsr	r10,r10,r9
8000ad02:	f8 01 09 4c 	lsl	r12,r12,r1
8000ad06:	18 4a       	or	r10,r12
8000ad08:	2f dd       	sub	sp,-12
8000ad0a:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000ae00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000ae00:	c0 08       	rjmp	8000ae00 <_evba>
	...

8000ae04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000ae04:	c0 08       	rjmp	8000ae04 <_handle_TLB_Multiple_Hit>
	...

8000ae08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000ae08:	c0 08       	rjmp	8000ae08 <_handle_Bus_Error_Data_Fetch>
	...

8000ae0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000ae0c:	c0 08       	rjmp	8000ae0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ae10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000ae10:	c0 08       	rjmp	8000ae10 <_handle_NMI>
	...

8000ae14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000ae14:	c0 08       	rjmp	8000ae14 <_handle_Instruction_Address>
	...

8000ae18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000ae18:	c0 08       	rjmp	8000ae18 <_handle_ITLB_Protection>
	...

8000ae1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000ae1c:	c0 08       	rjmp	8000ae1c <_handle_Breakpoint>
	...

8000ae20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000ae20:	c0 08       	rjmp	8000ae20 <_handle_Illegal_Opcode>
	...

8000ae24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000ae24:	c0 08       	rjmp	8000ae24 <_handle_Unimplemented_Instruction>
	...

8000ae28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000ae28:	c0 08       	rjmp	8000ae28 <_handle_Privilege_Violation>
	...

8000ae2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000ae2c:	c0 08       	rjmp	8000ae2c <_handle_Floating_Point>
	...

8000ae30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000ae30:	c0 08       	rjmp	8000ae30 <_handle_Coprocessor_Absent>
	...

8000ae34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000ae34:	c0 08       	rjmp	8000ae34 <_handle_Data_Address_Read>
	...

8000ae38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000ae38:	c0 08       	rjmp	8000ae38 <_handle_Data_Address_Write>
	...

8000ae3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000ae3c:	c0 08       	rjmp	8000ae3c <_handle_DTLB_Protection_Read>
	...

8000ae40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000ae40:	c0 08       	rjmp	8000ae40 <_handle_DTLB_Protection_Write>
	...

8000ae44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000ae44:	c0 08       	rjmp	8000ae44 <_handle_DTLB_Modified>
	...

8000ae50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000ae50:	c0 08       	rjmp	8000ae50 <_handle_ITLB_Miss>
	...

8000ae60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000ae60:	c0 08       	rjmp	8000ae60 <_handle_DTLB_Miss_Read>
	...

8000ae70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000ae70:	c0 08       	rjmp	8000ae70 <_handle_DTLB_Miss_Write>
	...

8000af00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000af00:	c0 08       	rjmp	8000af00 <_handle_Supervisor_Call>
8000af02:	d7 03       	nop

8000af04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000af04:	30 0c       	mov	r12,0
8000af06:	fe b0 ba bd 	rcall	80002480 <_get_interrupt_handler>
8000af0a:	58 0c       	cp.w	r12,0
8000af0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000af10:	d6 03       	rete

8000af12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000af12:	30 1c       	mov	r12,1
8000af14:	fe b0 ba b6 	rcall	80002480 <_get_interrupt_handler>
8000af18:	58 0c       	cp.w	r12,0
8000af1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000af1e:	d6 03       	rete

8000af20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000af20:	30 2c       	mov	r12,2
8000af22:	fe b0 ba af 	rcall	80002480 <_get_interrupt_handler>
8000af26:	58 0c       	cp.w	r12,0
8000af28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000af2c:	d6 03       	rete

8000af2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000af2e:	30 3c       	mov	r12,3
8000af30:	fe b0 ba a8 	rcall	80002480 <_get_interrupt_handler>
8000af34:	58 0c       	cp.w	r12,0
8000af36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000af3a:	d6 03       	rete
8000af3c:	d7 03       	nop
8000af3e:	d7 03       	nop
8000af40:	d7 03       	nop
8000af42:	d7 03       	nop
8000af44:	d7 03       	nop
8000af46:	d7 03       	nop
8000af48:	d7 03       	nop
8000af4a:	d7 03       	nop
8000af4c:	d7 03       	nop
8000af4e:	d7 03       	nop
8000af50:	d7 03       	nop
8000af52:	d7 03       	nop
8000af54:	d7 03       	nop
8000af56:	d7 03       	nop
8000af58:	d7 03       	nop
8000af5a:	d7 03       	nop
8000af5c:	d7 03       	nop
8000af5e:	d7 03       	nop
8000af60:	d7 03       	nop
8000af62:	d7 03       	nop
8000af64:	d7 03       	nop
8000af66:	d7 03       	nop
8000af68:	d7 03       	nop
8000af6a:	d7 03       	nop
8000af6c:	d7 03       	nop
8000af6e:	d7 03       	nop
8000af70:	d7 03       	nop
8000af72:	d7 03       	nop
8000af74:	d7 03       	nop
8000af76:	d7 03       	nop
8000af78:	d7 03       	nop
8000af7a:	d7 03       	nop
8000af7c:	d7 03       	nop
8000af7e:	d7 03       	nop
8000af80:	d7 03       	nop
8000af82:	d7 03       	nop
8000af84:	d7 03       	nop
8000af86:	d7 03       	nop
8000af88:	d7 03       	nop
8000af8a:	d7 03       	nop
8000af8c:	d7 03       	nop
8000af8e:	d7 03       	nop
8000af90:	d7 03       	nop
8000af92:	d7 03       	nop
8000af94:	d7 03       	nop
8000af96:	d7 03       	nop
8000af98:	d7 03       	nop
8000af9a:	d7 03       	nop
8000af9c:	d7 03       	nop
8000af9e:	d7 03       	nop
8000afa0:	d7 03       	nop
8000afa2:	d7 03       	nop
8000afa4:	d7 03       	nop
8000afa6:	d7 03       	nop
8000afa8:	d7 03       	nop
8000afaa:	d7 03       	nop
8000afac:	d7 03       	nop
8000afae:	d7 03       	nop
8000afb0:	d7 03       	nop
8000afb2:	d7 03       	nop
8000afb4:	d7 03       	nop
8000afb6:	d7 03       	nop
8000afb8:	d7 03       	nop
8000afba:	d7 03       	nop
8000afbc:	d7 03       	nop
8000afbe:	d7 03       	nop
8000afc0:	d7 03       	nop
8000afc2:	d7 03       	nop
8000afc4:	d7 03       	nop
8000afc6:	d7 03       	nop
8000afc8:	d7 03       	nop
8000afca:	d7 03       	nop
8000afcc:	d7 03       	nop
8000afce:	d7 03       	nop
8000afd0:	d7 03       	nop
8000afd2:	d7 03       	nop
8000afd4:	d7 03       	nop
8000afd6:	d7 03       	nop
8000afd8:	d7 03       	nop
8000afda:	d7 03       	nop
8000afdc:	d7 03       	nop
8000afde:	d7 03       	nop
8000afe0:	d7 03       	nop
8000afe2:	d7 03       	nop
8000afe4:	d7 03       	nop
8000afe6:	d7 03       	nop
8000afe8:	d7 03       	nop
8000afea:	d7 03       	nop
8000afec:	d7 03       	nop
8000afee:	d7 03       	nop
8000aff0:	d7 03       	nop
8000aff2:	d7 03       	nop
8000aff4:	d7 03       	nop
8000aff6:	d7 03       	nop
8000aff8:	d7 03       	nop
8000affa:	d7 03       	nop
8000affc:	d7 03       	nop
8000affe:	d7 03       	nop
