
godwit-v01.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000983c  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000ba00  8000ba00  0000be00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000112c  8000bc00  8000bc00  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  8000cd2c  8000cd2c  0000d12c  2**0
                  ALLOC
  6 .data         0000050c  00000004  8000cd30  0000d404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000418  00000510  8000d23c  0000d910  2**2
                  ALLOC
  8 .comment      00000030  00000000  00000000  0000d910  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001118  00000000  00000000  0000d940  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00002521  00000000  00000000  0000ea58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00028467  00000000  00000000  00010f79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005636  00000000  00000000  000393e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000106b1  00000000  00000000  0003ea16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fa0  00000000  00000000  0004f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006ce8  00000000  00000000  00052068  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000aa07  00000000  00000000  00058d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00df1741  00000000  00000000  00063757  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  00007000  00007000  00000400  2**0
                  ALLOC
 19 .debug_ranges 00001190  00000000  00000000  00e54e98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf e3 40 	sub	pc,pc,-7360

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	eb cd 40 80 	pushm	r7,lr
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80002008:	1a 97       	mov	r7,sp
8000200a:	20 2d       	sub	sp,8
8000200c:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002010:	fe 68 00 00 	mov	r8,-131072
80002014:	70 08       	ld.w	r8,r8[0x0]
80002016:	30 09       	mov	r9,0
80002018:	ef 49 ff fc 	st.w	r7[-4],r9
8000201c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002020:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002024:	5c 58       	castu.b	r8
80002026:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000202a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000202e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002032:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80002036:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000203a:	fe 68 00 00 	mov	r8,-131072
8000203e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002042:	91 09       	st.w	r8[0x0],r9
}
80002044:	2f ed       	sub	sp,-8
80002046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000204a:	d7 03       	nop

8000204c <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
8000204c:	eb cd 40 80 	pushm	r7,lr
80002050:	1a 97       	mov	r7,sp
80002052:	20 1d       	sub	sp,4
80002054:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80002058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205c:	e0 69 e1 c0 	mov	r9,57792
80002060:	ea 19 00 e4 	orh	r9,0xe4
80002064:	12 38       	cp.w	r8,r9
80002066:	e0 88 00 1b 	brls	8000209c <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
8000206a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000206e:	e0 69 c3 80 	mov	r9,50048
80002072:	ea 19 01 c9 	orh	r9,0x1c9
80002076:	12 38       	cp.w	r8,r9
80002078:	e0 8b 00 0a 	brhi	8000208c <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000207c:	30 1c       	mov	r12,1
8000207e:	f0 1f 00 0d 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002082:	3f fb       	mov	r11,-1
80002084:	31 1c       	mov	r12,17
80002086:	f0 1f 00 0c 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000208a:	c1 08       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000208c:	30 1c       	mov	r12,1
8000208e:	f0 1f 00 09 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80002092:	3f fb       	mov	r11,-1
80002094:	31 0c       	mov	r12,16
80002096:	f0 1f 00 08 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000209a:	c0 88       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
8000209c:	30 0c       	mov	r12,0
8000209e:	f0 1f 00 05 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800020a2:	3f fb       	mov	r11,-1
800020a4:	31 1c       	mov	r12,17
800020a6:	f0 1f 00 04 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800020aa:	2f fd       	sub	sp,-4
800020ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800020b0:	80 00       	ld.sh	r0,r0[0x0]
800020b2:	20 04       	sub	r4,0
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	21 04       	sub	r4,16

800020b8 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800020b8:	eb cd 40 80 	pushm	r7,lr
800020bc:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800020be:	fe 68 00 00 	mov	r8,-131072
800020c2:	70 28       	ld.w	r8,r8[0x8]
800020c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020c8:	5c 58       	castu.b	r8
}
800020ca:	10 9c       	mov	r12,r8
800020cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800020d0 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800020d0:	eb cd 40 80 	pushm	r7,lr
800020d4:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800020d6:	f0 1f 00 05 	mcall	800020e8 <flashcdw_default_wait_until_ready+0x18>
800020da:	18 98       	mov	r8,r12
800020dc:	ec 18 00 01 	eorl	r8,0x1
800020e0:	5c 58       	castu.b	r8
800020e2:	cf a1       	brne	800020d6 <flashcdw_default_wait_until_ready+0x6>
}
800020e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 b8       	sub	r8,11

800020ec <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
800020ec:	eb cd 40 80 	pushm	r7,lr
800020f0:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800020f2:	fe 68 00 00 	mov	r8,-131072
800020f6:	70 28       	ld.w	r8,r8[0x8]
800020f8:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
800020fc:	10 9c       	mov	r12,r8
800020fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002102:	d7 03       	nop

80002104 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002104:	eb cd 40 80 	pushm	r7,lr
80002108:	1a 97       	mov	r7,sp
8000210a:	20 3d       	sub	sp,12
8000210c:	ef 4c ff f8 	st.w	r7[-8],r12
80002110:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002114:	49 b8       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002116:	70 08       	ld.w	r8,r8[0x0]
80002118:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000211a:	fe 68 00 00 	mov	r8,-131072
8000211e:	70 18       	ld.w	r8,r8[0x4]
80002120:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002128:	5c 58       	castu.b	r8
8000212a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000212e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002136:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000213a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
8000213e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002142:	58 08       	cp.w	r8,0
80002144:	c0 b5       	brlt	8000215a <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
80002146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000214a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000214e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002152:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80002156:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
8000215a:	3a 58       	mov	r8,-91
8000215c:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002160:	fe 68 00 00 	mov	r8,-131072
80002164:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002168:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
8000216a:	f0 1f 00 07 	mcall	80002184 <flashcdw_issue_command+0x80>
8000216e:	18 99       	mov	r9,r12
80002170:	48 68       	lddpc	r8,80002188 <flashcdw_issue_command+0x84>
80002172:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80002174:	48 38       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002176:	70 08       	ld.w	r8,r8[0x0]
80002178:	5d 18       	icall	r8
}
8000217a:	2f dd       	sub	sp,-12
8000217c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002180:	00 00       	add	r0,r0
80002182:	00 04       	add	r4,r0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 ec       	sub	r12,14
80002188:	00 00       	add	r0,r0
8000218a:	05 10       	ld.sh	r0,r2++

8000218c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000218c:	eb cd 40 80 	pushm	r7,lr
80002190:	1a 97       	mov	r7,sp
80002192:	20 4d       	sub	sp,16
80002194:	ef 4c ff f4 	st.w	r7[-12],r12
80002198:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000219c:	30 08       	mov	r8,0
8000219e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800021a2:	30 08       	mov	r8,0
800021a4:	ef 48 ff fc 	st.w	r7[-4],r8
800021a8:	c1 c8       	rjmp	800021e0 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800021aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021ae:	70 19       	ld.w	r9,r8[0x4]
800021b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021b4:	70 08       	ld.w	r8,r8[0x0]
800021b6:	12 9b       	mov	r11,r9
800021b8:	10 9c       	mov	r12,r8
800021ba:	f0 1f 00 10 	mcall	800021f8 <gpio_enable_module+0x6c>
800021be:	18 98       	mov	r8,r12
800021c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021c4:	f3 e8 10 08 	or	r8,r9,r8
800021c8:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
800021cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021d0:	2f 88       	sub	r8,-8
800021d2:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800021d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021da:	2f f8       	sub	r8,-1
800021dc:	ef 48 ff fc 	st.w	r7[-4],r8
800021e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800021e8:	10 39       	cp.w	r9,r8
800021ea:	ce 03       	brcs	800021aa <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
800021ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800021f0:	10 9c       	mov	r12,r8
800021f2:	2f cd       	sub	sp,-16
800021f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 fc       	sub	r12,31

800021fc <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800021fc:	eb cd 40 80 	pushm	r7,lr
80002200:	1a 97       	mov	r7,sp
80002202:	20 3d       	sub	sp,12
80002204:	ef 4c ff f8 	st.w	r7[-8],r12
80002208:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000220c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002210:	a5 98       	lsr	r8,0x5
80002212:	a9 78       	lsl	r8,0x9
80002214:	e0 28 d4 00 	sub	r8,54272
80002218:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000221c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002220:	58 78       	cp.w	r8,7
80002222:	e0 8b 01 16 	brhi	8000244e <gpio_enable_module_pin+0x252>
80002226:	fe f9 02 4e 	ld.w	r9,pc[590]
8000222a:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000222e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002232:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002236:	30 19       	mov	r9,1
80002238:	f2 08 09 48 	lsl	r8,r9,r8
8000223c:	10 99       	mov	r9,r8
8000223e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002242:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002248:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000224c:	30 19       	mov	r9,1
8000224e:	f2 08 09 48 	lsl	r8,r9,r8
80002252:	10 99       	mov	r9,r8
80002254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002258:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000225a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000225e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002262:	30 19       	mov	r9,1
80002264:	f2 08 09 48 	lsl	r8,r9,r8
80002268:	10 99       	mov	r9,r8
8000226a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000226e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002270:	cf 18       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002276:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000227a:	30 19       	mov	r9,1
8000227c:	f2 08 09 48 	lsl	r8,r9,r8
80002280:	10 99       	mov	r9,r8
80002282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002286:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000228c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002290:	30 19       	mov	r9,1
80002292:	f2 08 09 48 	lsl	r8,r9,r8
80002296:	10 99       	mov	r9,r8
80002298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000229c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000229e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022a6:	30 19       	mov	r9,1
800022a8:	f2 08 09 48 	lsl	r8,r9,r8
800022ac:	10 99       	mov	r9,r8
800022ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022b2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022b4:	cc f8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800022b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022be:	30 19       	mov	r9,1
800022c0:	f2 08 09 48 	lsl	r8,r9,r8
800022c4:	10 99       	mov	r9,r8
800022c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ca:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800022cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022d4:	30 19       	mov	r9,1
800022d6:	f2 08 09 48 	lsl	r8,r9,r8
800022da:	10 99       	mov	r9,r8
800022dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800022e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022ea:	30 19       	mov	r9,1
800022ec:	f2 08 09 48 	lsl	r8,r9,r8
800022f0:	10 99       	mov	r9,r8
800022f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022f6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022f8:	ca d8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800022fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002302:	30 19       	mov	r9,1
80002304:	f2 08 09 48 	lsl	r8,r9,r8
80002308:	10 99       	mov	r9,r8
8000230a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000230e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002314:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002318:	30 19       	mov	r9,1
8000231a:	f2 08 09 48 	lsl	r8,r9,r8
8000231e:	10 99       	mov	r9,r8
80002320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002324:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000232a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000232e:	30 19       	mov	r9,1
80002330:	f2 08 09 48 	lsl	r8,r9,r8
80002334:	10 99       	mov	r9,r8
80002336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000233a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000233c:	c8 b8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000233e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002342:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002346:	30 19       	mov	r9,1
80002348:	f2 08 09 48 	lsl	r8,r9,r8
8000234c:	10 99       	mov	r9,r8
8000234e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002352:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002358:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000235c:	30 19       	mov	r9,1
8000235e:	f2 08 09 48 	lsl	r8,r9,r8
80002362:	10 99       	mov	r9,r8
80002364:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002368:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000236a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002372:	30 19       	mov	r9,1
80002374:	f2 08 09 48 	lsl	r8,r9,r8
80002378:	10 99       	mov	r9,r8
8000237a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000237e:	91 d9       	st.w	r8[0x34],r9
		break;
80002380:	c6 98       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002386:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000238a:	30 19       	mov	r9,1
8000238c:	f2 08 09 48 	lsl	r8,r9,r8
80002390:	10 99       	mov	r9,r8
80002392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002396:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023a0:	30 19       	mov	r9,1
800023a2:	f2 08 09 48 	lsl	r8,r9,r8
800023a6:	10 99       	mov	r9,r8
800023a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023ac:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023b6:	30 19       	mov	r9,1
800023b8:	f2 08 09 48 	lsl	r8,r9,r8
800023bc:	10 99       	mov	r9,r8
800023be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023c2:	91 d9       	st.w	r8[0x34],r9
		break;
800023c4:	c4 78       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800023c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023ce:	30 19       	mov	r9,1
800023d0:	f2 08 09 48 	lsl	r8,r9,r8
800023d4:	10 99       	mov	r9,r8
800023d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023da:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800023dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023e4:	30 19       	mov	r9,1
800023e6:	f2 08 09 48 	lsl	r8,r9,r8
800023ea:	10 99       	mov	r9,r8
800023ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023f0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023fa:	30 19       	mov	r9,1
800023fc:	f2 08 09 48 	lsl	r8,r9,r8
80002400:	10 99       	mov	r9,r8
80002402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002406:	91 d9       	st.w	r8[0x34],r9
		break;
80002408:	c2 58       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000240a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000240e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002412:	30 19       	mov	r9,1
80002414:	f2 08 09 48 	lsl	r8,r9,r8
80002418:	10 99       	mov	r9,r8
8000241a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002424:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002428:	30 19       	mov	r9,1
8000242a:	f2 08 09 48 	lsl	r8,r9,r8
8000242e:	10 99       	mov	r9,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000243a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000243e:	30 19       	mov	r9,1
80002440:	f2 08 09 48 	lsl	r8,r9,r8
80002444:	10 99       	mov	r9,r8
80002446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244a:	91 d9       	st.w	r8[0x34],r9
		break;
8000244c:	c0 38       	rjmp	80002452 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000244e:	30 18       	mov	r8,1
80002450:	c0 d8       	rjmp	8000246a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002456:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000245a:	30 19       	mov	r9,1
8000245c:	f2 08 09 48 	lsl	r8,r9,r8
80002460:	10 99       	mov	r9,r8
80002462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002466:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80002468:	30 08       	mov	r8,0
}
8000246a:	10 9c       	mov	r12,r8
8000246c:	2f dd       	sub	sp,-12
8000246e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002472:	00 00       	add	r0,r0
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	bc 00       	st.h	lr[0x0],r0

80002478 <gpio_enable_gpio_pin>:
 *            GPIO mode of PX21, AVR32_PIN_PX21 can be used. Module pins such as
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
80002478:	eb cd 40 80 	pushm	r7,lr
8000247c:	1a 97       	mov	r7,sp
8000247e:	20 2d       	sub	sp,8
80002480:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002488:	a5 98       	lsr	r8,0x5
8000248a:	a9 78       	lsl	r8,0x9
8000248c:	e0 28 d4 00 	sub	r8,54272
80002490:	ef 48 ff fc 	st.w	r7[-4],r8
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002494:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002498:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000249c:	30 19       	mov	r9,1
8000249e:	f2 08 09 48 	lsl	r8,r9,r8
800024a2:	10 99       	mov	r9,r8
800024a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a8:	f1 49 00 48 	st.w	r8[72],r9
	gpio_port->gpers = 1 << (pin & 0x1F);
800024ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800024b4:	30 19       	mov	r9,1
800024b6:	f2 08 09 48 	lsl	r8,r9,r8
800024ba:	10 99       	mov	r9,r8
800024bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024c0:	91 19       	st.w	r8[0x4],r9
}
800024c2:	2f ed       	sub	sp,-8
800024c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800024c8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800024c8:	eb cd 40 80 	pushm	r7,lr
800024cc:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
800024ce:	c0 08       	rjmp	800024ce <_unhandled_interrupt+0x6>

800024d0 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
800024d0:	eb cd 40 80 	pushm	r7,lr
800024d4:	1a 97       	mov	r7,sp
800024d6:	20 3d       	sub	sp,12
800024d8:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800024dc:	fe 78 10 00 	mov	r8,-61440
800024e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800024e4:	f2 09 11 03 	rsub	r9,r9,3
800024e8:	28 09       	sub	r9,-128
800024ea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800024ee:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800024f2:	fe 78 10 00 	mov	r8,-61440
800024f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024fa:	2c 09       	sub	r9,-64
800024fc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002500:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	58 08       	cp.w	r8,0
8000250a:	c1 30       	breq	80002530 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000250c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002510:	48 b8       	lddpc	r8,8000253c <_get_interrupt_handler+0x6c>
80002512:	a1 79       	lsl	r9,0x1
80002514:	2f f9       	sub	r9,-1
80002516:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000251a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000251e:	f0 08 12 00 	clz	r8,r8
80002522:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80002526:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002528:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000252c:	70 08       	ld.w	r8,r8[0x0]
8000252e:	c0 28       	rjmp	80002532 <_get_interrupt_handler+0x62>
80002530:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002532:	10 9c       	mov	r12,r8
80002534:	2f dd       	sub	sp,-12
80002536:	e3 cd 80 80 	ldm	sp++,r7,pc
8000253a:	00 00       	add	r0,r0
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	bc 20       	st.h	lr[0x4],r0

80002540 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80002540:	eb cd 40 80 	pushm	r7,lr
80002544:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002546:	48 38       	lddpc	r8,80002550 <INTC_init_evba+0x10>
80002548:	e3 b8 00 01 	mtsr	0x4,r8
}
8000254c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002550:	80 00       	ld.sh	r0,r0[0x0]
80002552:	ba 00       	st.h	sp[0x0],r0

80002554 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002554:	eb cd 40 80 	pushm	r7,lr
80002558:	1a 97       	mov	r7,sp
8000255a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000255c:	f0 1f 00 20 	mcall	800025dc <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002560:	30 08       	mov	r8,0
80002562:	ef 48 ff f8 	st.w	r7[-8],r8
80002566:	c3 18       	rjmp	800025c8 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002568:	30 08       	mov	r8,0
8000256a:	ef 48 ff fc 	st.w	r7[-4],r8
8000256e:	c1 48       	rjmp	80002596 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002574:	49 b8       	lddpc	r8,800025e0 <INTC_init_interrupts+0x8c>
80002576:	a1 79       	lsl	r9,0x1
80002578:	2f f9       	sub	r9,-1
8000257a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000257e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002582:	a3 68       	lsl	r8,0x2
80002584:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002588:	49 79       	lddpc	r9,800025e4 <INTC_init_interrupts+0x90>
8000258a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000258c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002590:	2f f8       	sub	r8,-1
80002592:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80002596:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000259a:	49 28       	lddpc	r8,800025e0 <INTC_init_interrupts+0x8c>
8000259c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025a4:	10 39       	cp.w	r9,r8
800025a6:	fe 9b ff e5 	brhi	80002570 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025aa:	fe 78 10 00 	mov	r8,-61440
800025ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025b2:	48 eb       	lddpc	r11,800025e8 <INTC_init_interrupts+0x94>
800025b4:	48 ea       	lddpc	r10,800025ec <INTC_init_interrupts+0x98>
800025b6:	f6 0a 01 0a 	sub	r10,r11,r10
800025ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800025be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025c2:	2f f8       	sub	r8,-1
800025c4:	ef 48 ff f8 	st.w	r7[-8],r8
800025c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025cc:	e0 48 00 21 	cp.w	r8,33
800025d0:	fe 98 ff cc 	brls	80002568 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
800025d4:	2f ed       	sub	sp,-8
800025d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800025da:	00 00       	add	r0,r0
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	25 40       	sub	r0,84
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	bc 20       	st.h	lr[0x4],r0
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	24 c8       	sub	r8,76
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	bb 04       	ld.d	r4,sp
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	ba 00       	st.h	sp[0x0],r0

800025f0 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800025f0:	eb cd 40 80 	pushm	r7,lr
800025f4:	1a 97       	mov	r7,sp
800025f6:	20 4d       	sub	sp,16
800025f8:	ef 4c ff f8 	st.w	r7[-8],r12
800025fc:	ef 4b ff f4 	st.w	r7[-12],r11
80002600:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002604:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002608:	a5 98       	lsr	r8,0x5
8000260a:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000260e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002612:	4a 78       	lddpc	r8,800026ac <INTC_register_interrupt+0xbc>
80002614:	a1 79       	lsl	r9,0x1
80002616:	2f f9       	sub	r9,-1
80002618:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000261c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002620:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002624:	a3 68       	lsl	r8,0x2
80002626:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000262a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000262e:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002634:	58 08       	cp.w	r8,0
80002636:	c0 c1       	brne	8000264e <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002638:	fe 78 10 00 	mov	r8,-61440
8000263c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002640:	49 cb       	lddpc	r11,800026b0 <INTC_register_interrupt+0xc0>
80002642:	49 da       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002644:	f6 0a 01 0a 	sub	r10,r11,r10
80002648:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000264c:	c2 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000264e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002652:	58 18       	cp.w	r8,1
80002654:	c0 d1       	brne	8000266e <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002656:	fe 78 10 00 	mov	r8,-61440
8000265a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000265e:	49 7b       	lddpc	r11,800026b8 <INTC_register_interrupt+0xc8>
80002660:	49 5a       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002662:	f6 0a 01 0a 	sub	r10,r11,r10
80002666:	bf aa       	sbr	r10,0x1e
80002668:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000266c:	c1 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000266e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002672:	58 28       	cp.w	r8,2
80002674:	c0 d1       	brne	8000268e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002676:	fe 78 10 00 	mov	r8,-61440
8000267a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000267e:	49 0b       	lddpc	r11,800026bc <INTC_register_interrupt+0xcc>
80002680:	48 da       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002682:	f6 0a 01 0a 	sub	r10,r11,r10
80002686:	bf ba       	sbr	r10,0x1f
80002688:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000268c:	c0 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000268e:	fe 78 10 00 	mov	r8,-61440
80002692:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002696:	48 bb       	lddpc	r11,800026c0 <INTC_register_interrupt+0xd0>
80002698:	48 7a       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
8000269a:	f6 0a 01 0a 	sub	r10,r11,r10
8000269e:	ea 1a c0 00 	orh	r10,0xc000
800026a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800026a6:	2f cd       	sub	sp,-16
800026a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ac:	80 00       	ld.sh	r0,r0[0x0]
800026ae:	bc 20       	st.h	lr[0x4],r0
800026b0:	80 00       	ld.sh	r0,r0[0x0]
800026b2:	bb 04       	ld.d	r4,sp
800026b4:	80 00       	ld.sh	r0,r0[0x0]
800026b6:	ba 00       	st.h	sp[0x0],r0
800026b8:	80 00       	ld.sh	r0,r0[0x0]
800026ba:	bb 12       	ld.d	r2,--sp
800026bc:	80 00       	ld.sh	r0,r0[0x0]
800026be:	bb 20       	st.d	sp++,r0
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	bb 2e       	st.d	sp++,lr

800026c4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800026c4:	eb cd 40 80 	pushm	r7,lr
800026c8:	1a 97       	mov	r7,sp
800026ca:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026cc:	e1 b8 00 00 	mfsr	r8,0x0
800026d0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800026d4:	d3 03       	ssrf	0x10

	return flags;
800026d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800026da:	10 9c       	mov	r12,r8
800026dc:	2f fd       	sub	sp,-4
800026de:	e3 cd 80 80 	ldm	sp++,r7,pc

800026e2 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800026e2:	eb cd 40 80 	pushm	r7,lr
800026e6:	1a 97       	mov	r7,sp
800026e8:	20 1d       	sub	sp,4
800026ea:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800026ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026f2:	e6 18 00 01 	andh	r8,0x1,COH
800026f6:	5f 08       	sreq	r8
800026f8:	5c 58       	castu.b	r8
}
800026fa:	10 9c       	mov	r12,r8
800026fc:	2f fd       	sub	sp,-4
800026fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002702:	d7 03       	nop

80002704 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80002704:	eb cd 40 80 	pushm	r7,lr
80002708:	1a 97       	mov	r7,sp
8000270a:	20 1d       	sub	sp,4
8000270c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002710:	ee fc ff fc 	ld.w	r12,r7[-4]
80002714:	f0 1f 00 05 	mcall	80002728 <cpu_irq_restore+0x24>
80002718:	18 98       	mov	r8,r12
8000271a:	58 08       	cp.w	r8,0
8000271c:	c0 20       	breq	80002720 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000271e:	d5 03       	csrf	0x10
   }

	barrier();
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 80 	ldm	sp++,r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	26 e2       	sub	r2,110

8000272c <pdca_get_handler>:

#include "compiler.h"
#include "pdca.h"

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
8000272c:	eb cd 40 80 	pushm	r7,lr
80002730:	1a 97       	mov	r7,sp
80002732:	20 2d       	sub	sp,8
80002734:	18 98       	mov	r8,r12
80002736:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
8000273a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000273e:	a7 68       	lsl	r8,0x6
80002740:	e0 38 00 00 	sub	r8,65536
80002744:	ef 48 ff fc 	st.w	r7[-4],r8

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002748:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000274c:	30 f8       	mov	r8,15
8000274e:	f0 09 18 00 	cp.b	r9,r8
80002752:	e0 88 00 04 	brls	8000275a <pdca_get_handler+0x2e>
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80002756:	3f f8       	mov	r8,-1
80002758:	c0 38       	rjmp	8000275e <pdca_get_handler+0x32>
	}

	return pdca_channel;
8000275a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000275e:	10 9c       	mov	r12,r8
80002760:	2f ed       	sub	sp,-8
80002762:	e3 cd 80 80 	ldm	sp++,r7,pc
80002766:	d7 03       	nop

80002768 <pdca_init_channel>:

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80002768:	eb cd 40 80 	pushm	r7,lr
8000276c:	1a 97       	mov	r7,sp
8000276e:	20 4d       	sub	sp,16
80002770:	18 98       	mov	r8,r12
80002772:	ef 4b ff f0 	st.w	r7[-16],r11
80002776:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000277a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000277e:	10 9c       	mov	r12,r8
80002780:	f0 1f 00 29 	mcall	80002824 <pdca_init_channel+0xbc>
80002784:	18 98       	mov	r8,r12
			pdca_ch_number);
80002786:	ef 48 ff f8 	st.w	r7[-8],r8

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
8000278a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000278e:	10 9c       	mov	r12,r8
80002790:	f0 1f 00 26 	mcall	80002828 <pdca_init_channel+0xc0>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
80002794:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002798:	10 9c       	mov	r12,r8
8000279a:	f0 1f 00 25 	mcall	8000282c <pdca_init_channel+0xc4>
	
	irqflags_t flags = cpu_irq_save();
8000279e:	f0 1f 00 25 	mcall	80002830 <pdca_init_channel+0xc8>
800027a2:	18 98       	mov	r8,r12
800027a4:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)opt->addr;
800027a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ac:	70 08       	ld.w	r8,r8[0x0]
800027ae:	10 99       	mov	r9,r8
800027b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b4:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = opt->size;
800027b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ba:	70 19       	ld.w	r9,r8[0x4]
800027bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027c0:	91 29       	st.w	r8[0x8],r9
	pdca_channel->psr = opt->pid;
800027c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027c6:	70 49       	ld.w	r9,r8[0x10]
800027c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027cc:	91 19       	st.w	r8[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
800027ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027d2:	70 28       	ld.w	r8,r8[0x8]
800027d4:	10 99       	mov	r9,r8
800027d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027da:	91 39       	st.w	r8[0xc],r9
	pdca_channel->tcrr = opt->r_size;
800027dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027e0:	70 39       	ld.w	r9,r8[0xc]
800027e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027e6:	91 49       	st.w	r8[0x10],r9
	pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
800027e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ec:	f1 38 00 18 	ld.ub	r8,r8[24]
800027f0:	a3 68       	lsl	r8,0x2
800027f2:	10 99       	mov	r9,r8
800027f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027f8:	70 58       	ld.w	r8,r8[0x14]
800027fa:	10 49       	or	r9,r8
	pdca_channel->mar = (uint32_t)opt->addr;
	pdca_channel->tcr = opt->size;
	pdca_channel->psr = opt->pid;
	pdca_channel->marr = (uint32_t)opt->r_addr;
	pdca_channel->tcrr = opt->r_size;
	pdca_channel->mr =
800027fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002800:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002806:	e0 69 01 00 	mov	r9,256
8000280a:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
8000280c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002810:	70 b8       	ld.w	r8,r8[0x2c]
	
	cpu_irq_restore(flags);
80002812:	ee fc ff fc 	ld.w	r12,r7[-4]
80002816:	f0 1f 00 08 	mcall	80002834 <pdca_init_channel+0xcc>

	return PDCA_SUCCESS;
8000281a:	30 08       	mov	r8,0
}
8000281c:	10 9c       	mov	r12,r8
8000281e:	2f cd       	sub	sp,-16
80002820:	e3 cd 80 80 	ldm	sp++,r7,pc
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	27 2c       	sub	r12,114
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	29 08       	sub	r8,-112
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	29 88       	sub	r8,-104
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	26 c4       	sub	r4,108
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	27 04       	sub	r4,112

80002838 <pdca_disable>:

	return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
}

void pdca_disable(uint8_t pdca_ch_number)
{
80002838:	eb cd 40 80 	pushm	r7,lr
8000283c:	1a 97       	mov	r7,sp
8000283e:	20 2d       	sub	sp,8
80002840:	18 98       	mov	r8,r12
80002842:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002846:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000284a:	10 9c       	mov	r12,r8
8000284c:	f0 1f 00 06 	mcall	80002864 <pdca_disable+0x2c>
80002850:	18 98       	mov	r8,r12
			pdca_ch_number);
80002852:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000285a:	30 29       	mov	r9,2
8000285c:	91 59       	st.w	r8[0x14],r9
}
8000285e:	2f ed       	sub	sp,-8
80002860:	e3 cd 80 80 	ldm	sp++,r7,pc
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	27 2c       	sub	r12,114

80002868 <pdca_enable>:

void pdca_enable(uint8_t pdca_ch_number)
{
80002868:	eb cd 40 80 	pushm	r7,lr
8000286c:	1a 97       	mov	r7,sp
8000286e:	20 2d       	sub	sp,8
80002870:	18 98       	mov	r8,r12
80002872:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002876:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000287a:	10 9c       	mov	r12,r8
8000287c:	f0 1f 00 06 	mcall	80002894 <pdca_enable+0x2c>
80002880:	18 98       	mov	r8,r12
			pdca_ch_number);
80002882:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80002886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000288a:	30 19       	mov	r9,1
8000288c:	91 59       	st.w	r8[0x14],r9
}
8000288e:	2f ed       	sub	sp,-8
80002890:	e3 cd 80 80 	ldm	sp++,r7,pc
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	27 2c       	sub	r12,114

80002898 <pdca_load_channel>:
	return pdca_channel->tcr;
}

void pdca_load_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
80002898:	eb cd 40 80 	pushm	r7,lr
8000289c:	1a 97       	mov	r7,sp
8000289e:	20 5d       	sub	sp,20
800028a0:	18 98       	mov	r8,r12
800028a2:	ef 4b ff f0 	st.w	r7[-16],r11
800028a6:	ef 4a ff ec 	st.w	r7[-20],r10
800028aa:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800028ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800028b2:	10 9c       	mov	r12,r8
800028b4:	f0 1f 00 12 	mcall	800028fc <pdca_load_channel+0x64>
800028b8:	18 98       	mov	r8,r12
			pdca_ch_number);
800028ba:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800028be:	f0 1f 00 11 	mcall	80002900 <pdca_load_channel+0x68>
800028c2:	18 98       	mov	r8,r12
800028c4:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)addr;
800028c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028d0:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = size;
800028d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800028da:	91 29       	st.w	r8[0x8],r9
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800028dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e0:	e0 69 01 00 	mov	r9,256
800028e4:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
800028e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ea:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
800028ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800028f0:	f0 1f 00 05 	mcall	80002904 <pdca_load_channel+0x6c>
}
800028f4:	2f bd       	sub	sp,-20
800028f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800028fa:	00 00       	add	r0,r0
800028fc:	80 00       	ld.sh	r0,r0[0x0]
800028fe:	27 2c       	sub	r12,114
80002900:	80 00       	ld.sh	r0,r0[0x0]
80002902:	26 c4       	sub	r4,108
80002904:	80 00       	ld.sh	r0,r0[0x0]
80002906:	27 04       	sub	r4,112

80002908 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002908:	eb cd 40 80 	pushm	r7,lr
8000290c:	1a 97       	mov	r7,sp
8000290e:	20 3d       	sub	sp,12
80002910:	18 98       	mov	r8,r12
80002912:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002916:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000291a:	10 9c       	mov	r12,r8
8000291c:	f0 1f 00 0c 	mcall	8000294c <pdca_disable_interrupt_transfer_complete+0x44>
80002920:	18 98       	mov	r8,r12
			pdca_ch_number);
80002922:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
80002926:	f0 1f 00 0b 	mcall	80002950 <pdca_disable_interrupt_transfer_complete+0x48>
8000292a:	18 98       	mov	r8,r12
8000292c:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002930:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002934:	30 29       	mov	r9,2
80002936:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
80002938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000293c:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
8000293e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002942:	f0 1f 00 05 	mcall	80002954 <pdca_disable_interrupt_transfer_complete+0x4c>
}
80002946:	2f dd       	sub	sp,-12
80002948:	e3 cd 80 80 	ldm	sp++,r7,pc
8000294c:	80 00       	ld.sh	r0,r0[0x0]
8000294e:	27 2c       	sub	r12,114
80002950:	80 00       	ld.sh	r0,r0[0x0]
80002952:	26 c4       	sub	r4,108
80002954:	80 00       	ld.sh	r0,r0[0x0]
80002956:	27 04       	sub	r4,112

80002958 <pdca_enable_interrupt_transfer_complete>:

void pdca_enable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002958:	eb cd 40 80 	pushm	r7,lr
8000295c:	1a 97       	mov	r7,sp
8000295e:	20 2d       	sub	sp,8
80002960:	18 98       	mov	r8,r12
80002962:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002966:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000296a:	10 9c       	mov	r12,r8
8000296c:	f0 1f 00 06 	mcall	80002984 <pdca_enable_interrupt_transfer_complete+0x2c>
80002970:	18 98       	mov	r8,r12
			pdca_ch_number);
80002972:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80002976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000297a:	30 29       	mov	r9,2
8000297c:	91 89       	st.w	r8[0x20],r9
}
8000297e:	2f ed       	sub	sp,-8
80002980:	e3 cd 80 80 	ldm	sp++,r7,pc
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	27 2c       	sub	r12,114

80002988 <pdca_disable_interrupt_reload_counter_zero>:

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
80002988:	eb cd 40 80 	pushm	r7,lr
8000298c:	1a 97       	mov	r7,sp
8000298e:	20 3d       	sub	sp,12
80002990:	18 98       	mov	r8,r12
80002992:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002996:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000299a:	10 9c       	mov	r12,r8
8000299c:	f0 1f 00 0c 	mcall	800029cc <pdca_disable_interrupt_reload_counter_zero+0x44>
800029a0:	18 98       	mov	r8,r12
			pdca_ch_number);
800029a2:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800029a6:	f0 1f 00 0b 	mcall	800029d0 <pdca_disable_interrupt_reload_counter_zero+0x48>
800029aa:	18 98       	mov	r8,r12
800029ac:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800029b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029b4:	30 19       	mov	r9,1
800029b6:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
800029b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029bc:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
800029be:	ee fc ff fc 	ld.w	r12,r7[-4]
800029c2:	f0 1f 00 05 	mcall	800029d4 <pdca_disable_interrupt_reload_counter_zero+0x4c>
}
800029c6:	2f dd       	sub	sp,-12
800029c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800029cc:	80 00       	ld.sh	r0,r0[0x0]
800029ce:	27 2c       	sub	r12,114
800029d0:	80 00       	ld.sh	r0,r0[0x0]
800029d2:	26 c4       	sub	r4,108
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	27 04       	sub	r4,112

800029d8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800029d8:	eb cd 40 80 	pushm	r7,lr
800029dc:	1a 97       	mov	r7,sp
800029de:	20 1d       	sub	sp,4
800029e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800029e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029e8:	e6 18 00 01 	andh	r8,0x1,COH
800029ec:	5f 08       	sreq	r8
800029ee:	5c 58       	castu.b	r8
}
800029f0:	10 9c       	mov	r12,r8
800029f2:	2f fd       	sub	sp,-4
800029f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800029f8 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
800029f8:	eb cd 40 80 	pushm	r7,lr
800029fc:	1a 97       	mov	r7,sp
800029fe:	20 2d       	sub	sp,8
80002a00:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
80002a04:	e1 b8 00 00 	mfsr	r8,0x0
80002a08:	10 9c       	mov	r12,r8
80002a0a:	f0 1f 00 0f 	mcall	80002a44 <pm_set_mclk_source+0x4c>
80002a0e:	18 98       	mov	r8,r12
80002a10:	ef 68 ff ff 	st.b	r7[-1],r8
80002a14:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
80002a16:	fe 78 14 00 	mov	r8,-60416
80002a1a:	fc 19 aa 00 	movh	r9,0xaa00
80002a1e:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80002a22:	fe 78 14 00 	mov	r8,-60416
80002a26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a2a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002a2c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a30:	30 08       	mov	r8,0
80002a32:	f0 09 18 00 	cp.b	r9,r8
80002a36:	c0 20       	breq	80002a3a <pm_set_mclk_source+0x42>
80002a38:	d5 03       	csrf	0x10

  return PASS;
80002a3a:	30 08       	mov	r8,0
}
80002a3c:	10 9c       	mov	r12,r8
80002a3e:	2f ed       	sub	sp,-8
80002a40:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	29 d8       	sub	r8,-99

80002a48 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
80002a48:	eb cd 40 80 	pushm	r7,lr
80002a4c:	1a 97       	mov	r7,sp
80002a4e:	20 4d       	sub	sp,16
80002a50:	ef 4c ff f4 	st.w	r7[-12],r12
80002a54:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002a58:	fe 78 14 00 	mov	r8,-60416
80002a5c:	70 18       	ld.w	r8,r8[0x4]
80002a5e:	30 09       	mov	r9,0
80002a60:	ef 49 ff f8 	st.w	r7[-8],r9
80002a64:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002a68:	fe 78 14 00 	mov	r8,-60416
80002a6c:	f0 f8 00 d4 	ld.w	r8,r8[212]
80002a70:	e2 18 00 20 	andl	r8,0x20,COH
80002a74:	cf a0       	breq	80002a68 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80002a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a7a:	30 19       	mov	r9,1
80002a7c:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002a80:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80002a84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a88:	5c 58       	castu.b	r8
80002a8a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a8e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a96:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002a9a:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002a9e:	e1 b8 00 00 	mfsr	r8,0x0
80002aa2:	10 9c       	mov	r12,r8
80002aa4:	f0 1f 00 12 	mcall	80002aec <pm_set_clk_domain_div+0xa4>
80002aa8:	18 98       	mov	r8,r12
80002aaa:	ef 68 ff ff 	st.b	r7[-1],r8
80002aae:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002ab0:	fe 78 14 00 	mov	r8,-60416
80002ab4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002ab8:	2f f9       	sub	r9,-1
80002aba:	a3 69       	lsl	r9,0x2
80002abc:	ea 19 aa 00 	orh	r9,0xaa00
80002ac0:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ac8:	a3 68       	lsl	r8,0x2
80002aca:	e0 28 eb fc 	sub	r8,60412
80002ace:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ad2:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002ad4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002ad8:	30 08       	mov	r8,0
80002ada:	f0 09 18 00 	cp.b	r9,r8
80002ade:	c0 20       	breq	80002ae2 <pm_set_clk_domain_div+0x9a>
80002ae0:	d5 03       	csrf	0x10

  return PASS;
80002ae2:	30 08       	mov	r8,0
}
80002ae4:	10 9c       	mov	r12,r8
80002ae6:	2f cd       	sub	sp,-16
80002ae8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	29 d8       	sub	r8,-99

80002af0 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80002af0:	eb cd 40 80 	pushm	r7,lr
80002af4:	1a 97       	mov	r7,sp
80002af6:	20 3d       	sub	sp,12
80002af8:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002afc:	fe 78 14 00 	mov	r8,-60416
80002b00:	70 18       	ld.w	r8,r8[0x4]
80002b02:	30 09       	mov	r9,0
80002b04:	ef 49 ff f8 	st.w	r7[-8],r9
80002b08:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002b0c:	fe 78 14 00 	mov	r8,-60416
80002b10:	f0 f8 00 d4 	ld.w	r8,r8[212]
80002b14:	e2 18 00 20 	andl	r8,0x20,COH
80002b18:	cf a0       	breq	80002b0c <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80002b1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b1e:	30 09       	mov	r9,0
80002b20:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002b24:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002b28:	e1 b8 00 00 	mfsr	r8,0x0
80002b2c:	10 9c       	mov	r12,r8
80002b2e:	f0 1f 00 13 	mcall	80002b78 <pm_disable_clk_domain_div+0x88>
80002b32:	18 98       	mov	r8,r12
80002b34:	ef 68 ff ff 	st.b	r7[-1],r8
80002b38:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002b3a:	fe 78 14 00 	mov	r8,-60416
80002b3e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b42:	2f f9       	sub	r9,-1
80002b44:	a3 69       	lsl	r9,0x2
80002b46:	ea 19 aa 00 	orh	r9,0xaa00
80002b4a:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002b4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b52:	a3 68       	lsl	r8,0x2
80002b54:	e0 28 eb fc 	sub	r8,60412
80002b58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b5c:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002b5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002b62:	30 08       	mov	r8,0
80002b64:	f0 09 18 00 	cp.b	r9,r8
80002b68:	c0 20       	breq	80002b6c <pm_disable_clk_domain_div+0x7c>
80002b6a:	d5 03       	csrf	0x10

  return PASS;
80002b6c:	30 08       	mov	r8,0
}
80002b6e:	10 9c       	mov	r12,r8
80002b70:	2f dd       	sub	sp,-12
80002b72:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b76:	00 00       	add	r0,r0
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	29 d8       	sub	r8,-99

80002b7c <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
80002b7c:	eb cd 40 80 	pushm	r7,lr
80002b80:	1a 97       	mov	r7,sp
80002b82:	20 5d       	sub	sp,20
80002b84:	ef 4c ff f8 	st.w	r7[-8],r12
80002b88:	ef 4b ff f4 	st.w	r7[-12],r11
80002b8c:	ef 4a ff f0 	st.w	r7[-16],r10
80002b90:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
80002b94:	ee fb ff f4 	ld.w	r11,r7[-12]
80002b98:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b9c:	f0 1f 00 21 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002ba0:	18 98       	mov	r8,r12
80002ba2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002baa:	58 88       	cp.w	r8,8
80002bac:	c0 51       	brne	80002bb6 <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
80002bae:	30 0c       	mov	r12,0
80002bb0:	f0 1f 00 1d 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002bb4:	c0 68       	rjmp	80002bc0 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
80002bb6:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bba:	30 0c       	mov	r12,0
80002bbc:	f0 1f 00 1b 	mcall	80002c28 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
80002bc0:	ee fb ff f0 	ld.w	r11,r7[-16]
80002bc4:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bc8:	f0 1f 00 16 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002bcc:	18 98       	mov	r8,r12
80002bce:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002bd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bd6:	58 88       	cp.w	r8,8
80002bd8:	c0 51       	brne	80002be2 <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
80002bda:	30 2c       	mov	r12,2
80002bdc:	f0 1f 00 12 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002be0:	c0 68       	rjmp	80002bec <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
80002be2:	ee fb ff fc 	ld.w	r11,r7[-4]
80002be6:	30 2c       	mov	r12,2
80002be8:	f0 1f 00 10 	mcall	80002c28 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
80002bec:	ee fb ff ec 	ld.w	r11,r7[-20]
80002bf0:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bf4:	f0 1f 00 0b 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002bf8:	18 98       	mov	r8,r12
80002bfa:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002bfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c02:	58 88       	cp.w	r8,8
80002c04:	c0 51       	brne	80002c0e <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80002c06:	30 3c       	mov	r12,3
80002c08:	f0 1f 00 07 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002c0c:	c0 68       	rjmp	80002c18 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80002c0e:	ee fb ff fc 	ld.w	r11,r7[-4]
80002c12:	30 3c       	mov	r12,3
80002c14:	f0 1f 00 05 	mcall	80002c28 <pm_set_all_cksel+0xac>
}
80002c18:	2f bd       	sub	sp,-20
80002c1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c1e:	00 00       	add	r0,r0
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	2c 2c       	sub	r12,-62
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	2a f0       	sub	r0,-81
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	2a 48       	sub	r8,-92

80002c2c <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80002c2c:	eb cd 40 80 	pushm	r7,lr
80002c30:	1a 97       	mov	r7,sp
80002c32:	20 3d       	sub	sp,12
80002c34:	ef 4c ff f8 	st.w	r7[-8],r12
80002c38:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80002c3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002c44:	f0 09 0d 08 	divu	r8,r8,r9
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80002c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c50:	58 18       	cp.w	r8,1
80002c52:	c0 31       	brne	80002c58 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80002c54:	30 88       	mov	r8,8
80002c56:	c0 78       	rjmp	80002c64 <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80002c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c5c:	5c 98       	brev	r8
80002c5e:	f0 08 12 00 	clz	r8,r8
80002c62:	20 18       	sub	r8,1
  }
}
80002c64:	10 9c       	mov	r12,r8
80002c66:	2f dd       	sub	sp,-12
80002c68:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c6c <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80002c6c:	eb cd 40 80 	pushm	r7,lr
80002c70:	1a 97       	mov	r7,sp
80002c72:	20 1d       	sub	sp,4
80002c74:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80002c78:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c7c:	f0 1f 00 04 	mcall	80002c8c <pcl_configure_clocks+0x20>
80002c80:	18 98       	mov	r8,r12
  #endif
#endif
}
80002c82:	10 9c       	mov	r12,r8
80002c84:	2f fd       	sub	sp,-4
80002c86:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c8a:	00 00       	add	r0,r0
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	2d 90       	sub	r0,-39

80002c90 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	1a 97       	mov	r7,sp
80002c96:	20 1d       	sub	sp,4
80002c98:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80002c9c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ca0:	e0 7b c2 00 	mov	r11,115200
80002ca4:	30 0c       	mov	r12,0
80002ca6:	f0 1f 00 04 	mcall	80002cb4 <pcl_configure_clocks_rcsys+0x24>
80002caa:	18 98       	mov	r8,r12
}
80002cac:	10 9c       	mov	r12,r8
80002cae:	2f fd       	sub	sp,-4
80002cb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2e 00       	sub	r0,-32

80002cb8 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80002cb8:	eb cd 40 80 	pushm	r7,lr
80002cbc:	1a 97       	mov	r7,sp
80002cbe:	20 1d       	sub	sp,4
80002cc0:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80002cc4:	f0 1f 00 08 	mcall	80002ce4 <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80002cc8:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ccc:	e0 6b 0e 00 	mov	r11,3584
80002cd0:	ea 1b 07 27 	orh	r11,0x727
80002cd4:	30 3c       	mov	r12,3
80002cd6:	f0 1f 00 05 	mcall	80002ce8 <pcl_configure_clocks_rc120m+0x30>
80002cda:	18 98       	mov	r8,r12
}
80002cdc:	10 9c       	mov	r12,r8
80002cde:	2f fd       	sub	sp,-4
80002ce0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ce4:	80 00       	ld.sh	r0,r0[0x0]
80002ce6:	33 dc       	mov	r12,61
80002ce8:	80 00       	ld.sh	r0,r0[0x0]
80002cea:	2e 00       	sub	r0,-32

80002cec <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80002cec:	eb cd 40 80 	pushm	r7,lr
80002cf0:	1a 97       	mov	r7,sp
80002cf2:	20 2d       	sub	sp,8
80002cf4:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80002cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfc:	70 58       	ld.w	r8,r8[0x14]
80002cfe:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80002d02:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d06:	30 0c       	mov	r12,0
80002d08:	f0 1f 00 0b 	mcall	80002d34 <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80002d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d10:	70 68       	ld.w	r8,r8[0x18]
80002d12:	30 1a       	mov	r10,1
80002d14:	10 9b       	mov	r11,r8
80002d16:	30 0c       	mov	r12,0
80002d18:	f0 1f 00 08 	mcall	80002d38 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80002d1c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d20:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d24:	30 1c       	mov	r12,1
80002d26:	f0 1f 00 06 	mcall	80002d3c <pcl_configure_clocks_osc0+0x50>
80002d2a:	18 98       	mov	r8,r12
}
80002d2c:	10 9c       	mov	r12,r8
80002d2e:	2f ed       	sub	sp,-8
80002d30:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	2e 7c       	sub	r12,-25
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	2f 2c       	sub	r12,-14
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	2e 00       	sub	r0,-32

80002d40 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80002d40:	eb cd 40 80 	pushm	r7,lr
80002d44:	1a 97       	mov	r7,sp
80002d46:	20 3d       	sub	sp,12
80002d48:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80002d4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d50:	70 78       	ld.w	r8,r8[0x1c]
80002d52:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80002d56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d5a:	70 88       	ld.w	r8,r8[0x20]
80002d5c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80002d60:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d64:	30 0b       	mov	r11,0
80002d66:	30 19       	mov	r9,1
80002d68:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d6c:	f0 1f 00 07 	mcall	80002d88 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80002d70:	ee fa ff f4 	ld.w	r10,r7[-12]
80002d74:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d78:	30 2c       	mov	r12,2
80002d7a:	f0 1f 00 05 	mcall	80002d8c <pcl_configure_clocks_dfll0+0x4c>
80002d7e:	18 98       	mov	r8,r12
}
80002d80:	10 9c       	mov	r12,r8
80002d82:	2f dd       	sub	sp,-12
80002d84:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	31 a8       	mov	r8,26
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2e 00       	sub	r0,-32

80002d90 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80002d90:	eb cd 40 80 	pushm	r7,lr
80002d94:	1a 97       	mov	r7,sp
80002d96:	20 1d       	sub	sp,4
80002d98:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80002d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002da0:	70 08       	ld.w	r8,r8[0x0]
80002da2:	58 08       	cp.w	r8,0
80002da4:	c0 71       	brne	80002db2 <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80002da6:	ee fc ff fc 	ld.w	r12,r7[-4]
80002daa:	f0 1f 00 12 	mcall	80002df0 <pcl_configure_clocks_uc3l+0x60>
80002dae:	18 98       	mov	r8,r12
80002db0:	c1 c8       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80002db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002db6:	70 08       	ld.w	r8,r8[0x0]
80002db8:	58 98       	cp.w	r8,9
80002dba:	c0 71       	brne	80002dc8 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80002dbc:	ee fc ff fc 	ld.w	r12,r7[-4]
80002dc0:	f0 1f 00 0d 	mcall	80002df4 <pcl_configure_clocks_uc3l+0x64>
80002dc4:	18 98       	mov	r8,r12
80002dc6:	c1 18       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80002dc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002dcc:	70 08       	ld.w	r8,r8[0x0]
80002dce:	58 18       	cp.w	r8,1
80002dd0:	c0 71       	brne	80002dde <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80002dd2:	ee fc ff fc 	ld.w	r12,r7[-4]
80002dd6:	f0 1f 00 09 	mcall	80002df8 <pcl_configure_clocks_uc3l+0x68>
80002dda:	18 98       	mov	r8,r12
80002ddc:	c0 68       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80002dde:	ee fc ff fc 	ld.w	r12,r7[-4]
80002de2:	f0 1f 00 07 	mcall	80002dfc <pcl_configure_clocks_uc3l+0x6c>
80002de6:	18 98       	mov	r8,r12
  }
}
80002de8:	10 9c       	mov	r12,r8
80002dea:	2f fd       	sub	sp,-4
80002dec:	e3 cd 80 80 	ldm	sp++,r7,pc
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	2c 90       	sub	r0,-55
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2c b8       	sub	r8,-53
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	2c ec       	sub	r12,-50
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	2d 40       	sub	r0,-44

80002e00 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80002e00:	eb cd 40 80 	pushm	r7,lr
80002e04:	1a 97       	mov	r7,sp
80002e06:	20 3d       	sub	sp,12
80002e08:	ef 4c ff fc 	st.w	r7[-4],r12
80002e0c:	ef 4b ff f8 	st.w	r7[-8],r11
80002e10:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80002e14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e18:	70 39       	ld.w	r9,r8[0xc]
80002e1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e1e:	70 2a       	ld.w	r10,r8[0x8]
80002e20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e24:	70 18       	ld.w	r8,r8[0x4]
80002e26:	10 9b       	mov	r11,r8
80002e28:	ee fc ff f8 	ld.w	r12,r7[-8]
80002e2c:	f0 1f 00 09 	mcall	80002e50 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80002e30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e34:	70 18       	ld.w	r8,r8[0x4]
80002e36:	10 9c       	mov	r12,r8
80002e38:	f0 1f 00 07 	mcall	80002e54 <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80002e3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002e40:	f0 1f 00 06 	mcall	80002e58 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80002e44:	30 08       	mov	r8,0
}
80002e46:	10 9c       	mov	r12,r8
80002e48:	2f dd       	sub	sp,-12
80002e4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e4e:	00 00       	add	r0,r0
80002e50:	80 00       	ld.sh	r0,r0[0x0]
80002e52:	2b 7c       	sub	r12,-73
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	20 4c       	sub	r12,4
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	29 f8       	sub	r8,-97

80002e5c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002e5c:	eb cd 40 80 	pushm	r7,lr
80002e60:	1a 97       	mov	r7,sp
80002e62:	20 1d       	sub	sp,4
80002e64:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80002e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e6c:	e6 18 00 01 	andh	r8,0x1,COH
80002e70:	5f 08       	sreq	r8
80002e72:	5c 58       	castu.b	r8
}
80002e74:	10 9c       	mov	r12,r8
80002e76:	2f fd       	sub	sp,-4
80002e78:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e7c <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80002e7c:	eb cd 40 80 	pushm	r7,lr
80002e80:	1a 97       	mov	r7,sp
80002e82:	20 4d       	sub	sp,16
80002e84:	ef 4c ff f4 	st.w	r7[-12],r12
80002e88:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80002e8c:	fe 78 18 00 	mov	r8,-59392
80002e90:	70 78       	ld.w	r8,r8[0x1c]
80002e92:	30 09       	mov	r9,0
80002e94:	ef 49 ff f8 	st.w	r7[-8],r9
80002e98:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // crystal frequency. Gain G3 (for power optimization) is unused and if 
  // required will need to be set manually.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80002e9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ea0:	30 19       	mov	r9,1
80002ea2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002ea6:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal < 12000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002eaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002eae:	e0 69 1a ff 	mov	r9,6911
80002eb2:	ea 19 00 b7 	orh	r9,0xb7
80002eb6:	12 38       	cp.w	r8,r9
80002eb8:	e0 88 00 10 	brls	80002ed8 <scif_configure_osc_crystalmode+0x5c>
80002ebc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ec0:	e0 69 23 ff 	mov	r9,9215
80002ec4:	ea 19 00 f4 	orh	r9,0xf4
80002ec8:	12 38       	cp.w	r8,r9
80002eca:	e0 8b 00 04 	brhi	80002ed2 <scif_configure_osc_crystalmode+0x56>
80002ece:	30 18       	mov	r8,1
80002ed0:	c0 28       	rjmp	80002ed4 <scif_configure_osc_crystalmode+0x58>
80002ed2:	30 28       	mov	r8,2
80002ed4:	10 99       	mov	r9,r8
80002ed6:	c0 28       	rjmp	80002eda <scif_configure_osc_crystalmode+0x5e>
80002ed8:	30 09       	mov	r9,0
80002eda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ede:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80002ee2:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        AVR32_SCIF_OSCCTRL0_GAIN_G2;
  AVR32_ENTER_CRITICAL_REGION( );
80002ee6:	e1 b8 00 00 	mfsr	r8,0x0
80002eea:	10 9c       	mov	r12,r8
80002eec:	f0 1f 00 0f 	mcall	80002f28 <scif_configure_osc_crystalmode+0xac>
80002ef0:	18 98       	mov	r8,r12
80002ef2:	ef 68 ff ff 	st.b	r7[-1],r8
80002ef6:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80002ef8:	fe 78 18 00 	mov	r8,-59392
80002efc:	31 c9       	mov	r9,28
80002efe:	ea 19 aa 00 	orh	r9,0xaa00
80002f02:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80002f04:	fe 78 18 00 	mov	r8,-59392
80002f08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002f0c:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002f0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002f12:	30 08       	mov	r8,0
80002f14:	f0 09 18 00 	cp.b	r9,r8
80002f18:	c0 20       	breq	80002f1c <scif_configure_osc_crystalmode+0xa0>
80002f1a:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
80002f1c:	30 08       	mov	r8,0
}
80002f1e:	10 9c       	mov	r12,r8
80002f20:	2f cd       	sub	sp,-16
80002f22:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f26:	00 00       	add	r0,r0
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2e 5c       	sub	r12,-27

80002f2c <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80002f2c:	eb cd 40 80 	pushm	r7,lr
80002f30:	1a 97       	mov	r7,sp
80002f32:	20 5d       	sub	sp,20
80002f34:	ef 4c ff f4 	st.w	r7[-12],r12
80002f38:	ef 4b ff f0 	st.w	r7[-16],r11
80002f3c:	14 98       	mov	r8,r10
80002f3e:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80002f42:	fe 78 18 00 	mov	r8,-59392
80002f46:	70 78       	ld.w	r8,r8[0x1c]
80002f48:	30 09       	mov	r9,0
80002f4a:	ef 49 ff f8 	st.w	r7[-8],r9
80002f4e:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
80002f52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f56:	5c 58       	castu.b	r8
80002f58:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002f5c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002f60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f64:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80002f68:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
80002f6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f70:	30 19       	mov	r9,1
80002f72:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80002f76:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002f7a:	e1 b8 00 00 	mfsr	r8,0x0
80002f7e:	10 9c       	mov	r12,r8
80002f80:	f0 1f 00 16 	mcall	80002fd8 <scif_enable_osc+0xac>
80002f84:	18 98       	mov	r8,r12
80002f86:	ef 68 ff ff 	st.b	r7[-1],r8
80002f8a:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80002f8c:	fe 78 18 00 	mov	r8,-59392
80002f90:	31 c9       	mov	r9,28
80002f92:	ea 19 aa 00 	orh	r9,0xaa00
80002f96:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80002f98:	fe 78 18 00 	mov	r8,-59392
80002f9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002fa0:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002fa2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002fa6:	30 08       	mov	r8,0
80002fa8:	f0 09 18 00 	cp.b	r9,r8
80002fac:	c0 20       	breq	80002fb0 <scif_enable_osc+0x84>
80002fae:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80002fb0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80002fb4:	30 08       	mov	r8,0
80002fb6:	f0 09 18 00 	cp.b	r9,r8
80002fba:	c0 90       	breq	80002fcc <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80002fbc:	30 2c       	mov	r12,2
80002fbe:	f0 1f 00 08 	mcall	80002fdc <scif_enable_osc+0xb0>
80002fc2:	18 98       	mov	r8,r12
80002fc4:	58 08       	cp.w	r8,0
80002fc6:	c0 30       	breq	80002fcc <scif_enable_osc+0xa0>
      return -1;
80002fc8:	3f f8       	mov	r8,-1
80002fca:	c0 28       	rjmp	80002fce <scif_enable_osc+0xa2>
  }

  return PASS;
80002fcc:	30 08       	mov	r8,0
}
80002fce:	10 9c       	mov	r12,r8
80002fd0:	2f bd       	sub	sp,-20
80002fd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fd6:	00 00       	add	r0,r0
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	2e 5c       	sub	r12,-27
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	34 ec       	mov	r12,78

80002fe0 <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
80002fe0:	eb cd 40 80 	pushm	r7,lr
80002fe4:	1a 97       	mov	r7,sp
80002fe6:	20 4d       	sub	sp,16
80002fe8:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80002fec:	fe 78 18 00 	mov	r8,-59392
80002ff0:	70 98       	ld.w	r8,r8[0x24]
80002ff2:	30 09       	mov	r9,0
80002ff4:	ef 49 ff f8 	st.w	r7[-8],r9
80002ff8:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80002ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003000:	30 19       	mov	r9,1
80003002:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003006:	ef 48 ff f8 	st.w	r7[-8],r8
#if (UC3L0128 || UC3L0256 || UC3L3_L4)
  u_avr32_scif_dfll0conf.DFLL0CONF.ccen = ENABLE;
8000300a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000300e:	30 19       	mov	r9,1
80003010:	f1 d9 d0 a1 	bfins	r8,r9,0x5,0x1
80003014:	ef 48 ff f8 	st.w	r7[-8],r8
#endif
  AVR32_ENTER_CRITICAL_REGION( );
80003018:	e1 b8 00 00 	mfsr	r8,0x0
8000301c:	10 9c       	mov	r12,r8
8000301e:	f0 1f 00 61 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
80003022:	18 98       	mov	r8,r12
80003024:	ef 68 ff fc 	st.b	r7[-4],r8
80003028:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
8000302a:	fe 78 18 00 	mov	r8,-59392
8000302e:	32 49       	mov	r9,36
80003030:	ea 19 aa 00 	orh	r9,0xaa00
80003034:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80003036:	fe 78 18 00 	mov	r8,-59392
8000303a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000303e:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003040:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003044:	30 08       	mov	r8,0
80003046:	f0 09 18 00 	cp.b	r9,r8
8000304a:	c0 20       	breq	8000304e <scif_dfll0_closedloop_start+0x6e>
8000304c:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000304e:	e0 6c 40 00 	mov	r12,16384
80003052:	f0 1f 00 55 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
80003056:	18 98       	mov	r8,r12
80003058:	58 08       	cp.w	r8,0
8000305a:	c0 30       	breq	80003060 <scif_dfll0_closedloop_start+0x80>
    return -1;
8000305c:	3f f8       	mov	r8,-1
8000305e:	c9 c8       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80003060:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003064:	70 48       	ld.w	r8,r8[0x10]
80003066:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
8000306a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000306e:	70 38       	ld.w	r8,r8[0xc]
80003070:	b1 68       	lsl	r8,0x10
80003072:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80003076:	f3 e8 10 08 	or	r8,r9,r8
8000307a:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
8000307e:	e1 b8 00 00 	mfsr	r8,0x0
80003082:	10 9c       	mov	r12,r8
80003084:	f0 1f 00 47 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
80003088:	18 98       	mov	r8,r12
8000308a:	ef 68 ff fd 	st.b	r7[-3],r8
8000308e:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
80003090:	fe 78 18 00 	mov	r8,-59392
80003094:	32 c9       	mov	r9,44
80003096:	ea 19 aa 00 	orh	r9,0xaa00
8000309a:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
8000309c:	fe 78 18 00 	mov	r8,-59392
800030a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800030a4:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800030a6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800030aa:	30 08       	mov	r8,0
800030ac:	f0 09 18 00 	cp.b	r9,r8
800030b0:	c0 20       	breq	800030b4 <scif_dfll0_closedloop_start+0xd4>
800030b2:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
800030b4:	e0 6c 40 00 	mov	r12,16384
800030b8:	f0 1f 00 3b 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
800030bc:	18 98       	mov	r8,r12
800030be:	58 08       	cp.w	r8,0
800030c0:	c0 30       	breq	800030c6 <scif_dfll0_closedloop_start+0xe6>
    return -1;
800030c2:	3f f8       	mov	r8,-1
800030c4:	c6 98       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
800030c6:	e1 b8 00 00 	mfsr	r8,0x0
800030ca:	10 9c       	mov	r12,r8
800030cc:	f0 1f 00 35 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
800030d0:	18 98       	mov	r8,r12
800030d2:	ef 68 ff fe 	st.b	r7[-2],r8
800030d6:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
800030d8:	fe 78 18 00 	mov	r8,-59392
800030dc:	32 89       	mov	r9,40
800030de:	ea 19 aa 00 	orh	r9,0xaa00
800030e2:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
800030e4:	fe 78 18 00 	mov	r8,-59392
800030e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800030ec:	72 19       	ld.w	r9,r9[0x4]
800030ee:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
800030f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800030f6:	72 29       	ld.w	r9,r9[0x8]
800030f8:	b1 69       	lsl	r9,0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
800030fa:	f5 e9 10 09 	or	r9,r10,r9
800030fe:	91 a9       	st.w	r8[0x28],r9
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80003100:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003104:	30 08       	mov	r8,0
80003106:	f0 09 18 00 	cp.b	r9,r8
8000310a:	c0 20       	breq	8000310e <scif_dfll0_closedloop_start+0x12e>
8000310c:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000310e:	e0 6c 40 00 	mov	r12,16384
80003112:	f0 1f 00 25 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
80003116:	18 98       	mov	r8,r12
80003118:	58 08       	cp.w	r8,0
8000311a:	c0 30       	breq	80003120 <scif_dfll0_closedloop_start+0x140>
    return -1;
8000311c:	3f f8       	mov	r8,-1
8000311e:	c3 c8       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
80003120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003124:	30 19       	mov	r9,1
80003126:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000312a:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
8000312e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003132:	70 08       	ld.w	r8,r8[0x0]
80003134:	5c 58       	castu.b	r8
80003136:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8000313a:	e1 b8 00 00 	mfsr	r8,0x0
8000313e:	10 9c       	mov	r12,r8
80003140:	f0 1f 00 18 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
80003144:	18 98       	mov	r8,r12
80003146:	ef 68 ff ff 	st.b	r7[-1],r8
8000314a:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
8000314c:	fe 78 18 00 	mov	r8,-59392
80003150:	32 49       	mov	r9,36
80003152:	ea 19 aa 00 	orh	r9,0xaa00
80003156:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80003158:	fe 78 18 00 	mov	r8,-59392
8000315c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003160:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003162:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003166:	30 08       	mov	r8,0
80003168:	f0 09 18 00 	cp.b	r9,r8
8000316c:	c0 20       	breq	80003170 <scif_dfll0_closedloop_start+0x190>
8000316e:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80003170:	e0 6c 40 00 	mov	r12,16384
80003174:	f0 1f 00 0c 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
80003178:	18 98       	mov	r8,r12
8000317a:	58 08       	cp.w	r8,0
8000317c:	c0 30       	breq	80003182 <scif_dfll0_closedloop_start+0x1a2>
    return -1;
8000317e:	3f f8       	mov	r8,-1
80003180:	c0 b8       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
80003182:	e0 6c 02 00 	mov	r12,512
80003186:	f0 1f 00 08 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
8000318a:	18 98       	mov	r8,r12
8000318c:	58 08       	cp.w	r8,0
8000318e:	c0 30       	breq	80003194 <scif_dfll0_closedloop_start+0x1b4>
    return -1;
80003190:	3f f8       	mov	r8,-1
80003192:	c0 28       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  return PASS;
80003194:	30 08       	mov	r8,0
}
80003196:	10 9c       	mov	r12,r8
80003198:	2f cd       	sub	sp,-16
8000319a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000319e:	00 00       	add	r0,r0
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	2e 5c       	sub	r12,-27
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	34 ec       	mov	r12,78

800031a8 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
800031a8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800031ac:	1a 97       	mov	r7,sp
800031ae:	21 6d       	sub	sp,88
800031b0:	ef 4c ff e4 	st.w	r7[-28],r12
800031b4:	ee eb ff dc 	st.d	r7[-36],r10
800031b8:	12 98       	mov	r8,r9
800031ba:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
800031be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031c2:	70 08       	ld.w	r8,r8[0x0]
800031c4:	58 08       	cp.w	r8,0
800031c6:	c0 61       	brne	800031d2 <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
800031c8:	e0 78 c2 00 	mov	r8,115200
800031cc:	ef 48 ff fc 	st.w	r7[-4],r8
800031d0:	c3 38       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
800031d2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031d6:	70 08       	ld.w	r8,r8[0x0]
800031d8:	58 18       	cp.w	r8,1
800031da:	c0 60       	breq	800031e6 <scif_dfll0_closedloop_configure_and_start+0x3e>
800031dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031e0:	70 08       	ld.w	r8,r8[0x0]
800031e2:	58 98       	cp.w	r8,9
800031e4:	c0 61       	brne	800031f0 <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
800031e6:	e0 68 80 00 	mov	r8,32768
800031ea:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
800031ee:	c2 48       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
800031f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031f4:	70 08       	ld.w	r8,r8[0x0]
800031f6:	58 38       	cp.w	r8,3
800031f8:	c0 71       	brne	80003206 <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
800031fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031fe:	70 38       	ld.w	r8,r8[0xc]
80003200:	ef 48 ff fc 	st.w	r7[-4],r8
80003204:	c1 98       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
80003206:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000320a:	70 08       	ld.w	r8,r8[0x0]
8000320c:	58 48       	cp.w	r8,4
8000320e:	c0 81       	brne	8000321e <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
80003210:	e0 68 0e 00 	mov	r8,3584
80003214:	ea 18 07 27 	orh	r8,0x727
80003218:	ef 48 ff fc 	st.w	r7[-4],r8
8000321c:	c0 d8       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
8000321e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003222:	70 08       	ld.w	r8,r8[0x0]
80003224:	58 b8       	cp.w	r8,11
80003226:	c0 61       	brne	80003232 <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
80003228:	e0 68 03 e8 	mov	r8,1000
8000322c:	ef 48 ff fc 	st.w	r7[-4],r8
80003230:	c0 38       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
80003232:	3f f8       	mov	r8,-1
80003234:	cc 98       	rjmp	800033c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
80003236:	ee fb ff e4 	ld.w	r11,r7[-28]
8000323a:	30 0c       	mov	r12,0
8000323c:	f0 1f 00 65 	mcall	800033d0 <scif_dfll0_closedloop_configure_and_start+0x228>
80003240:	18 98       	mov	r8,r12
80003242:	58 08       	cp.w	r8,0
80003244:	c0 30       	breq	8000324a <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
80003246:	3f f8       	mov	r8,-1
80003248:	cb f8       	rjmp	800033c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
8000324a:	ee ea ff dc 	ld.d	r10,r7[-36]
8000324e:	14 98       	mov	r8,r10
80003250:	16 99       	mov	r9,r11
80003252:	f0 0c 16 18 	lsr	r12,r8,0x18
80003256:	f2 03 15 08 	lsl	r3,r9,0x8
8000325a:	f9 e3 10 03 	or	r3,r12,r3
8000325e:	f0 02 15 08 	lsl	r2,r8,0x8
80003262:	e4 0a 01 0a 	sub	r10,r2,r10
80003266:	e6 0b 01 4b 	sbc	r11,r3,r11
8000326a:	e0 68 5a 00 	mov	r8,23040
8000326e:	ea 18 a0 08 	orh	r8,0xa008
80003272:	3f d9       	mov	r9,-3
80003274:	10 0a       	add	r10,r8
80003276:	f6 09 00 4b 	adc	r11,r11,r9
8000327a:	e0 68 77 80 	mov	r8,30592
8000327e:	ea 18 06 8e 	orh	r8,0x68e
80003282:	30 09       	mov	r9,0
80003284:	f0 1f 00 54 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80003288:	14 98       	mov	r8,r10
8000328a:	16 99       	mov	r9,r11
8000328c:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
80003290:	ee fa ff fc 	ld.w	r10,r7[-4]
80003294:	ef 4a ff ac 	st.w	r7[-84],r10
80003298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000329c:	bf 58       	asr	r8,0x1f
8000329e:	ef 48 ff a8 	st.w	r7[-88],r8
800032a2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800032a6:	ee ea ff dc 	ld.d	r10,r7[-36]
800032aa:	f0 1f 00 4b 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
800032ae:	14 98       	mov	r8,r10
800032b0:	16 99       	mov	r9,r11
800032b2:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
800032b6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800032ba:	70 28       	ld.w	r8,r8[0x8]
800032bc:	58 08       	cp.w	r8,0
800032be:	c2 e1       	brne	8000331a <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
800032c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800032c4:	b1 88       	lsr	r8,0x10
800032c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800032ca:	b1 69       	lsl	r9,0x10
800032cc:	ef 49 ff b0 	st.w	r7[-80],r9
800032d0:	ee f9 ff b0 	ld.w	r9,r7[-80]
800032d4:	f1 e9 10 09 	or	r9,r8,r9
800032d8:	ef 49 ff b0 	st.w	r7[-80],r9
800032dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800032e0:	b1 68       	lsl	r8,0x10
800032e2:	ef 48 ff b4 	st.w	r7[-76],r8
800032e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032ea:	ef 48 ff bc 	st.w	r7[-68],r8
800032ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f2:	bf 58       	asr	r8,0x1f
800032f4:	ef 48 ff b8 	st.w	r7[-72],r8
800032f8:	ee e8 ff b8 	ld.d	r8,r7[-72]
800032fc:	ee ea ff b0 	ld.d	r10,r7[-80]
80003300:	f0 1f 00 35 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80003304:	14 98       	mov	r8,r10
80003306:	16 99       	mov	r9,r11
80003308:	10 99       	mov	r9,r8
8000330a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000330e:	b1 68       	lsl	r8,0x10
80003310:	f2 08 01 08 	sub	r8,r9,r8
80003314:	ef 48 ff ec 	st.w	r7[-20],r8
80003318:	c4 68       	rjmp	800033a4 <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
8000331a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000331e:	b1 88       	lsr	r8,0x10
80003320:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003324:	b1 69       	lsl	r9,0x10
80003326:	ef 49 ff c0 	st.w	r7[-64],r9
8000332a:	ee fa ff c0 	ld.w	r10,r7[-64]
8000332e:	f1 ea 10 0a 	or	r10,r8,r10
80003332:	ef 4a ff c0 	st.w	r7[-64],r10
80003336:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000333a:	b1 68       	lsl	r8,0x10
8000333c:	ef 48 ff c4 	st.w	r7[-60],r8
80003340:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003344:	ef 49 ff cc 	st.w	r7[-52],r9
80003348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000334c:	bf 58       	asr	r8,0x1f
8000334e:	ef 48 ff c8 	st.w	r7[-56],r8
80003352:	ee e8 ff c8 	ld.d	r8,r7[-56]
80003356:	ee ea ff c0 	ld.d	r10,r7[-64]
8000335a:	f0 1f 00 1f 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
8000335e:	14 98       	mov	r8,r10
80003360:	16 99       	mov	r9,r11
80003362:	ee fa ff f0 	ld.w	r10,r7[-16]
80003366:	ef 4a ff d4 	st.w	r7[-44],r10
8000336a:	30 0a       	mov	r10,0
8000336c:	ef 4a ff d0 	st.w	r7[-48],r10
80003370:	ee fa ff d4 	ld.w	r10,r7[-44]
80003374:	b1 8a       	lsr	r10,0x10
80003376:	ee f1 ff d0 	ld.w	r1,r7[-48]
8000337a:	b1 61       	lsl	r1,0x10
8000337c:	f5 e1 10 01 	or	r1,r10,r1
80003380:	ee f0 ff d4 	ld.w	r0,r7[-44]
80003384:	b1 60       	lsl	r0,0x10
80003386:	00 18       	sub	r8,r0
80003388:	f2 01 01 49 	sbc	r9,r9,r1
8000338c:	10 08       	add	r8,r8
8000338e:	f2 09 00 49 	adc	r9,r9,r9
80003392:	10 99       	mov	r9,r8
80003394:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003398:	70 18       	ld.w	r8,r8[0x4]
8000339a:	2f f8       	sub	r8,-1
8000339c:	f2 08 02 48 	mul	r8,r9,r8
800033a0:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
800033a4:	30 48       	mov	r8,4
800033a6:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
800033aa:	30 48       	mov	r8,4
800033ac:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
800033b0:	ee c8 00 18 	sub	r8,r7,24
800033b4:	10 9c       	mov	r12,r8
800033b6:	f0 1f 00 09 	mcall	800033d8 <scif_dfll0_closedloop_configure_and_start+0x230>
800033ba:	18 98       	mov	r8,r12
800033bc:	58 08       	cp.w	r8,0
800033be:	c0 30       	breq	800033c4 <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
800033c0:	3f f8       	mov	r8,-1
800033c2:	c0 28       	rjmp	800033c6 <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
800033c4:	30 08       	mov	r8,0
}
800033c6:	10 9c       	mov	r12,r8
800033c8:	2e ad       	sub	sp,-88
800033ca:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800033ce:	00 00       	add	r0,r0
800033d0:	80 00       	ld.sh	r0,r0[0x0]
800033d2:	34 80       	mov	r0,72
800033d4:	80 00       	ld.sh	r0,r0[0x0]
800033d6:	5e fe       	retal	-1
800033d8:	80 00       	ld.sh	r0,r0[0x0]
800033da:	2f e0       	sub	r0,-2

800033dc <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
800033dc:	eb cd 40 80 	pushm	r7,lr
800033e0:	1a 97       	mov	r7,sp
800033e2:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
800033e4:	e1 b8 00 00 	mfsr	r8,0x0
800033e8:	10 9c       	mov	r12,r8
800033ea:	f0 1f 00 0e 	mcall	80003420 <scif_start_rc120M+0x44>
800033ee:	18 98       	mov	r8,r12
800033f0:	ef 68 ff ff 	st.b	r7[-1],r8
800033f4:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
800033f6:	fe 78 18 00 	mov	r8,-59392
800033fa:	35 89       	mov	r9,88
800033fc:	ea 19 aa 00 	orh	r9,0xaa00
80003400:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
80003402:	fe 78 18 00 	mov	r8,-59392
80003406:	30 19       	mov	r9,1
80003408:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000340c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003410:	30 08       	mov	r8,0
80003412:	f0 09 18 00 	cp.b	r9,r8
80003416:	c0 20       	breq	8000341a <scif_start_rc120M+0x3e>
80003418:	d5 03       	csrf	0x10
}
8000341a:	2f fd       	sub	sp,-4
8000341c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	2e 5c       	sub	r12,-27

80003424 <scif_disable_rc32out>:
  AVR32_SCIF.rc32kcr = temp;
  AVR32_LEAVE_CRITICAL_REGION( );
}

void scif_disable_rc32out(void)
{
80003424:	eb cd 40 80 	pushm	r7,lr
80003428:	1a 97       	mov	r7,sp
8000342a:	20 2d       	sub	sp,8
  unsigned long temp;
  AVR32_ENTER_CRITICAL_REGION( );
8000342c:	e1 b8 00 00 	mfsr	r8,0x0
80003430:	10 9c       	mov	r12,r8
80003432:	f0 1f 00 13 	mcall	8000347c <scif_disable_rc32out+0x58>
80003436:	18 98       	mov	r8,r12
80003438:	ef 68 ff ff 	st.b	r7[-1],r8
8000343c:	d3 03       	ssrf	0x10
  temp = AVR32_PM.ppcr & (~AVR32_PM_PPCR_FRC32_MASK);
8000343e:	fe 78 14 00 	mov	r8,-60416
80003442:	f0 f8 01 60 	ld.w	r8,r8[352]
80003446:	a1 d8       	cbr	r8,0x1
80003448:	ef 48 ff f8 	st.w	r7[-8],r8
  // Un-force the RC32 signal from being output on the dedicated pin (PA20).
  AVR32_PM.unlock = 0xAA000000 | AVR32_PM_PPCR;
8000344c:	fe 78 14 00 	mov	r8,-60416
80003450:	e0 69 01 60 	mov	r9,352
80003454:	ea 19 aa 00 	orh	r9,0xaa00
80003458:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.ppcr = temp;
8000345c:	fe 78 14 00 	mov	r8,-60416
80003460:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003464:	f1 49 01 60 	st.w	r8[352],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003468:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000346c:	30 08       	mov	r8,0
8000346e:	f0 09 18 00 	cp.b	r9,r8
80003472:	c0 20       	breq	80003476 <scif_disable_rc32out+0x52>
80003474:	d5 03       	csrf	0x10
}
80003476:	2f ed       	sub	sp,-8
80003478:	e3 cd 80 80 	ldm	sp++,r7,pc
8000347c:	80 00       	ld.sh	r0,r0[0x0]
8000347e:	2e 5c       	sub	r12,-27

80003480 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80003480:	eb cd 40 80 	pushm	r7,lr
80003484:	1a 97       	mov	r7,sp
80003486:	20 2d       	sub	sp,8
80003488:	ef 4c ff fc 	st.w	r7[-4],r12
8000348c:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003490:	fe 78 18 00 	mov	r8,-59392
80003494:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003498:	2e 49       	sub	r9,-28
8000349a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000349e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034a2:	5c 58       	castu.b	r8
800034a4:	c0 30       	breq	800034aa <scif_start_gclk+0x2a>
    return -1;
800034a6:	3f f8       	mov	r8,-1
800034a8:	c1 e8       	rjmp	800034e4 <scif_start_gclk+0x64>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800034aa:	fe 78 18 00 	mov	r8,-59392
800034ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800034b2:	ee fa ff f8 	ld.w	r10,r7[-8]
800034b6:	74 1a       	ld.w	r10,r10[0x4]
800034b8:	f4 0b 15 10 	lsl	r11,r10,0x10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
800034bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800034c0:	74 2a       	ld.w	r10,r10[0x8]
800034c2:	a1 7a       	lsl	r10,0x1
800034c4:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800034c8:	14 4b       	or	r11,r10
800034ca:	ee fa ff f8 	ld.w	r10,r7[-8]
800034ce:	74 0a       	ld.w	r10,r10[0x0]
800034d0:	a9 6a       	lsl	r10,0x8
800034d2:	e2 1a 1f 00 	andl	r10,0x1f00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
800034d6:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800034da:	a1 aa       	sbr	r10,0x0
800034dc:	2e 49       	sub	r9,-28
800034de:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
800034e2:	30 08       	mov	r8,0
}
800034e4:	10 9c       	mov	r12,r8
800034e6:	2f ed       	sub	sp,-8
800034e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800034ec <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800034ec:	eb cd 40 80 	pushm	r7,lr
800034f0:	1a 97       	mov	r7,sp
800034f2:	20 2d       	sub	sp,8
800034f4:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
800034f8:	e0 78 86 a0 	mov	r8,100000
800034fc:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
80003500:	c0 c8       	rjmp	80003518 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
80003502:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003506:	20 18       	sub	r8,1
80003508:	ef 48 ff fc 	st.w	r7[-4],r8
8000350c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003510:	58 08       	cp.w	r8,0
80003512:	c0 31       	brne	80003518 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80003514:	3f f8       	mov	r8,-1
80003516:	c0 a8       	rjmp	8000352a <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80003518:	fe 78 18 00 	mov	r8,-59392
8000351c:	70 59       	ld.w	r9,r8[0x14]
8000351e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003522:	f3 e8 00 08 	and	r8,r9,r8
80003526:	ce e0       	breq	80003502 <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80003528:	30 08       	mov	r8,0
}
8000352a:	10 9c       	mov	r12,r8
8000352c:	2f ed       	sub	sp,-8
8000352e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003532 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003532:	eb cd 40 80 	pushm	r7,lr
80003536:	1a 97       	mov	r7,sp
80003538:	20 1d       	sub	sp,4
8000353a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000353e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003542:	e6 18 00 01 	andh	r8,0x1,COH
80003546:	5f 08       	sreq	r8
80003548:	5c 58       	castu.b	r8
}
8000354a:	10 9c       	mov	r12,r8
8000354c:	2f fd       	sub	sp,-4
8000354e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003552:	d7 03       	nop

80003554 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80003554:	eb cd 40 80 	pushm	r7,lr
80003558:	1a 97       	mov	r7,sp
8000355a:	20 4d       	sub	sp,16
8000355c:	ef 4c ff f8 	st.w	r7[-8],r12
80003560:	ef 4b ff f4 	st.w	r7[-12],r11
80003564:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003568:	e1 b8 00 00 	mfsr	r8,0x0
8000356c:	10 9c       	mov	r12,r8
8000356e:	f0 1f 00 73 	mcall	80003738 <tc_configure_interrupts+0x1e4>
80003572:	18 98       	mov	r8,r12
80003574:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003578:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000357c:	58 28       	cp.w	r8,2
8000357e:	e0 88 00 04 	brls	80003586 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80003582:	3f f8       	mov	r8,-1
80003584:	cd 68       	rjmp	80003730 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003586:	ee fb ff f4 	ld.w	r11,r7[-12]
8000358a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000358e:	70 08       	ld.w	r8,r8[0x0]
80003590:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003594:	5c 58       	castu.b	r8
80003596:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000359a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000359e:	70 08       	ld.w	r8,r8[0x0]
800035a0:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800035a4:	5c 58       	castu.b	r8
800035a6:	a7 68       	lsl	r8,0x6
800035a8:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
800035aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035ae:	70 08       	ld.w	r8,r8[0x0]
800035b0:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800035b4:	5c 58       	castu.b	r8
800035b6:	a5 78       	lsl	r8,0x5
800035b8:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
800035ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035be:	70 08       	ld.w	r8,r8[0x0]
800035c0:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
800035c4:	5c 58       	castu.b	r8
800035c6:	a5 68       	lsl	r8,0x4
800035c8:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
800035ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035ce:	70 08       	ld.w	r8,r8[0x0]
800035d0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800035d4:	5c 58       	castu.b	r8
800035d6:	a3 78       	lsl	r8,0x3
800035d8:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
800035da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035de:	70 08       	ld.w	r8,r8[0x0]
800035e0:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800035e4:	5c 58       	castu.b	r8
800035e6:	a3 68       	lsl	r8,0x2
800035e8:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
800035ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035ee:	70 08       	ld.w	r8,r8[0x0]
800035f0:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800035f4:	5c 58       	castu.b	r8
800035f6:	a1 78       	lsl	r8,0x1
800035f8:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
800035fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035fe:	70 08       	ld.w	r8,r8[0x0]
80003600:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003604:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003606:	f3 e8 10 08 	or	r8,r9,r8
8000360a:	10 99       	mov	r9,r8
8000360c:	ee fa ff f8 	ld.w	r10,r7[-8]
80003610:	f6 08 15 06 	lsl	r8,r11,0x6
80003614:	f4 08 00 08 	add	r8,r10,r8
80003618:	2d c8       	sub	r8,-36
8000361a:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000361c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003620:	30 08       	mov	r8,0
80003622:	f0 09 18 00 	cp.b	r9,r8
80003626:	c0 20       	breq	8000362a <tc_configure_interrupts+0xd6>
80003628:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
8000362a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000362e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003632:	70 08       	ld.w	r8,r8[0x0]
80003634:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003638:	5c 58       	castu.b	r8
8000363a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000363e:	c0 41       	brne	80003646 <tc_configure_interrupts+0xf2>
80003640:	e0 69 00 80 	mov	r9,128
80003644:	c0 28       	rjmp	80003648 <tc_configure_interrupts+0xf4>
80003646:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80003648:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000364c:	70 08       	ld.w	r8,r8[0x0]
8000364e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003652:	5c 58       	castu.b	r8
80003654:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003658:	c0 31       	brne	8000365e <tc_configure_interrupts+0x10a>
8000365a:	34 08       	mov	r8,64
8000365c:	c0 28       	rjmp	80003660 <tc_configure_interrupts+0x10c>
8000365e:	30 08       	mov	r8,0
80003660:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80003662:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003666:	70 08       	ld.w	r8,r8[0x0]
80003668:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000366c:	5c 58       	castu.b	r8
8000366e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003672:	c0 31       	brne	80003678 <tc_configure_interrupts+0x124>
80003674:	32 08       	mov	r8,32
80003676:	c0 28       	rjmp	8000367a <tc_configure_interrupts+0x126>
80003678:	30 08       	mov	r8,0
8000367a:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
8000367c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003680:	70 08       	ld.w	r8,r8[0x0]
80003682:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003686:	5c 58       	castu.b	r8
80003688:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000368c:	c0 31       	brne	80003692 <tc_configure_interrupts+0x13e>
8000368e:	31 08       	mov	r8,16
80003690:	c0 28       	rjmp	80003694 <tc_configure_interrupts+0x140>
80003692:	30 08       	mov	r8,0
80003694:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80003696:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000369a:	70 08       	ld.w	r8,r8[0x0]
8000369c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800036a0:	5c 58       	castu.b	r8
800036a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036a6:	c0 31       	brne	800036ac <tc_configure_interrupts+0x158>
800036a8:	30 88       	mov	r8,8
800036aa:	c0 28       	rjmp	800036ae <tc_configure_interrupts+0x15a>
800036ac:	30 08       	mov	r8,0
800036ae:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800036b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800036b4:	70 08       	ld.w	r8,r8[0x0]
800036b6:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800036ba:	5c 58       	castu.b	r8
800036bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036c0:	c0 31       	brne	800036c6 <tc_configure_interrupts+0x172>
800036c2:	30 48       	mov	r8,4
800036c4:	c0 28       	rjmp	800036c8 <tc_configure_interrupts+0x174>
800036c6:	30 08       	mov	r8,0
800036c8:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800036ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800036ce:	70 08       	ld.w	r8,r8[0x0]
800036d0:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800036d4:	5c 58       	castu.b	r8
800036d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036da:	c0 31       	brne	800036e0 <tc_configure_interrupts+0x18c>
800036dc:	30 28       	mov	r8,2
800036de:	c0 28       	rjmp	800036e2 <tc_configure_interrupts+0x18e>
800036e0:	30 08       	mov	r8,0
800036e2:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
800036e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800036e8:	70 08       	ld.w	r8,r8[0x0]
800036ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036ee:	5c 58       	castu.b	r8
800036f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036f4:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800036f6:	f3 e8 10 08 	or	r8,r9,r8
800036fa:	10 99       	mov	r9,r8
800036fc:	ee fa ff f8 	ld.w	r10,r7[-8]
80003700:	f6 08 15 06 	lsl	r8,r11,0x6
80003704:	f4 08 00 08 	add	r8,r10,r8
80003708:	2d 88       	sub	r8,-40
8000370a:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000370c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003710:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003714:	a1 78       	lsl	r8,0x1
80003716:	2f f8       	sub	r8,-1
80003718:	a5 78       	lsl	r8,0x5
8000371a:	f2 08 00 08 	add	r8,r9,r8
8000371e:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003720:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003724:	30 08       	mov	r8,0
80003726:	f0 09 18 00 	cp.b	r9,r8
8000372a:	c0 20       	breq	8000372e <tc_configure_interrupts+0x1da>
8000372c:	d5 03       	csrf	0x10

  return 0;
8000372e:	30 08       	mov	r8,0
}
80003730:	10 9c       	mov	r12,r8
80003732:	2f cd       	sub	sp,-16
80003734:	e3 cd 80 80 	ldm	sp++,r7,pc
80003738:	80 00       	ld.sh	r0,r0[0x0]
8000373a:	35 32       	mov	r2,83

8000373c <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
8000373c:	eb cd 40 80 	pushm	r7,lr
80003740:	1a 97       	mov	r7,sp
80003742:	20 2d       	sub	sp,8
80003744:	ef 4c ff fc 	st.w	r7[-4],r12
80003748:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000374c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003750:	70 08       	ld.w	r8,r8[0x0]
80003752:	58 28       	cp.w	r8,2
80003754:	e0 88 00 04 	brls	8000375c <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
80003758:	3f f8       	mov	r8,-1
8000375a:	c9 78       	rjmp	80003888 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
8000375c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003760:	70 09       	ld.w	r9,r8[0x0]
80003762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003766:	70 18       	ld.w	r8,r8[0x4]
80003768:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
8000376c:	5c 58       	castu.b	r8
8000376e:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80003772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003776:	70 18       	ld.w	r8,r8[0x4]
80003778:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
8000377c:	5c 58       	castu.b	r8
8000377e:	bd 68       	lsl	r8,0x1c
80003780:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80003782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003786:	70 18       	ld.w	r8,r8[0x4]
80003788:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
8000378c:	5c 58       	castu.b	r8
8000378e:	bb 68       	lsl	r8,0x1a
80003790:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80003792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003796:	70 18       	ld.w	r8,r8[0x4]
80003798:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
8000379c:	5c 58       	castu.b	r8
8000379e:	b9 68       	lsl	r8,0x18
800037a0:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
800037a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037a6:	70 18       	ld.w	r8,r8[0x4]
800037a8:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
800037ac:	5c 58       	castu.b	r8
800037ae:	b7 68       	lsl	r8,0x16
800037b0:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
800037b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037b6:	70 18       	ld.w	r8,r8[0x4]
800037b8:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
800037bc:	5c 58       	castu.b	r8
800037be:	b5 68       	lsl	r8,0x14
800037c0:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
800037c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037c6:	70 18       	ld.w	r8,r8[0x4]
800037c8:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800037cc:	5c 58       	castu.b	r8
800037ce:	b3 68       	lsl	r8,0x12
800037d0:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
800037d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037d6:	70 18       	ld.w	r8,r8[0x4]
800037d8:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800037dc:	5c 58       	castu.b	r8
800037de:	b1 68       	lsl	r8,0x10
800037e0:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
800037e4:	10 9a       	mov	r10,r8
800037e6:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
800037e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037ec:	70 18       	ld.w	r8,r8[0x4]
800037ee:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
800037f2:	5c 58       	castu.b	r8
800037f4:	ad 78       	lsl	r8,0xd
800037f6:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
800037f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037fc:	70 18       	ld.w	r8,r8[0x4]
800037fe:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80003802:	5c 58       	castu.b	r8
80003804:	ad 68       	lsl	r8,0xc
80003806:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80003808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000380c:	70 18       	ld.w	r8,r8[0x4]
8000380e:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80003812:	5c 58       	castu.b	r8
80003814:	ab 68       	lsl	r8,0xa
80003816:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
80003818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000381c:	70 18       	ld.w	r8,r8[0x4]
8000381e:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80003822:	5c 58       	castu.b	r8
80003824:	a9 68       	lsl	r8,0x8
80003826:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
80003828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000382c:	70 18       	ld.w	r8,r8[0x4]
8000382e:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003832:	5c 58       	castu.b	r8
80003834:	a7 78       	lsl	r8,0x7
80003836:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
80003838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000383c:	70 18       	ld.w	r8,r8[0x4]
8000383e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003842:	5c 58       	castu.b	r8
80003844:	a7 68       	lsl	r8,0x6
80003846:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
80003848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000384c:	70 18       	ld.w	r8,r8[0x4]
8000384e:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80003852:	5c 58       	castu.b	r8
80003854:	a5 68       	lsl	r8,0x4
80003856:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
80003858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000385c:	70 18       	ld.w	r8,r8[0x4]
8000385e:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003862:	5c 58       	castu.b	r8
80003864:	a3 78       	lsl	r8,0x3
80003866:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80003868:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000386c:	70 18       	ld.w	r8,r8[0x4]
8000386e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003872:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80003874:	f5 e8 10 08 	or	r8,r10,r8
80003878:	10 9a       	mov	r10,r8
8000387a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000387e:	a5 69       	lsl	r9,0x4
80003880:	2f f9       	sub	r9,-1
80003882:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80003886:	30 08       	mov	r8,0
}
80003888:	10 9c       	mov	r12,r8
8000388a:	2f ed       	sub	sp,-8
8000388c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003890 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80003890:	eb cd 40 80 	pushm	r7,lr
80003894:	1a 97       	mov	r7,sp
80003896:	20 2d       	sub	sp,8
80003898:	ef 4c ff fc 	st.w	r7[-4],r12
8000389c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800038a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038a4:	58 28       	cp.w	r8,2
800038a6:	e0 88 00 04 	brls	800038ae <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
800038aa:	3f f8       	mov	r8,-1
800038ac:	c0 b8       	rjmp	800038c2 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800038ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800038b6:	a7 68       	lsl	r8,0x6
800038b8:	f2 08 00 08 	add	r8,r9,r8
800038bc:	30 59       	mov	r9,5
800038be:	91 09       	st.w	r8[0x0],r9

  return 0;
800038c0:	30 08       	mov	r8,0
}
800038c2:	10 9c       	mov	r12,r8
800038c4:	2f ed       	sub	sp,-8
800038c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800038ca <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
800038ca:	eb cd 40 80 	pushm	r7,lr
800038ce:	1a 97       	mov	r7,sp
800038d0:	20 3d       	sub	sp,12
800038d2:	ef 4c ff fc 	st.w	r7[-4],r12
800038d6:	ef 4b ff f8 	st.w	r7[-8],r11
800038da:	14 98       	mov	r8,r10
800038dc:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800038e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038e4:	58 28       	cp.w	r8,2
800038e6:	e0 88 00 04 	brls	800038ee <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
800038ea:	3f f8       	mov	r8,-1
800038ec:	c2 78       	rjmp	8000393a <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800038ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800038f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038f6:	a5 69       	lsl	r9,0x4
800038f8:	2f f9       	sub	r9,-1
800038fa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800038fe:	e2 18 80 00 	andl	r8,0x8000,COH
80003902:	c1 a0       	breq	80003936 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80003904:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003908:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000390c:	ee fa ff fc 	ld.w	r10,r7[-4]
80003910:	a7 69       	lsl	r9,0x6
80003912:	f4 09 00 09 	add	r9,r10,r9
80003916:	2e 49       	sub	r9,-28
80003918:	72 09       	ld.w	r9,r9[0x0]
8000391a:	12 9a       	mov	r10,r9
8000391c:	e0 1a 00 00 	andl	r10,0x0
80003920:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80003924:	f5 e9 10 09 	or	r9,r10,r9
80003928:	ee fa ff fc 	ld.w	r10,r7[-4]
8000392c:	a7 68       	lsl	r8,0x6
8000392e:	f4 08 00 08 	add	r8,r10,r8
80003932:	2e 48       	sub	r8,-28
80003934:	91 09       	st.w	r8[0x0],r9

  return value;
80003936:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
8000393a:	10 9c       	mov	r12,r8
8000393c:	2f dd       	sub	sp,-12
8000393e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003942 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003942:	eb cd 40 80 	pushm	r7,lr
80003946:	1a 97       	mov	r7,sp
80003948:	20 5d       	sub	sp,20
8000394a:	ef 4c ff f4 	st.w	r7[-12],r12
8000394e:	ef 4b ff f0 	st.w	r7[-16],r11
80003952:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80003956:	30 08       	mov	r8,0
80003958:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
8000395c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003960:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003964:	f0 09 0d 08 	divu	r8,r8,r9
80003968:	a1 98       	lsr	r8,0x1
8000396a:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000396e:	c0 b8       	rjmp	80003984 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80003970:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003974:	2f f8       	sub	r8,-1
80003976:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
8000397a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000397e:	a1 98       	lsr	r8,0x1
80003980:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003984:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003988:	e0 48 00 ff 	cp.w	r8,255
8000398c:	e0 88 00 09 	brls	8000399e <twim_set_speed+0x5c>
80003990:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003994:	30 78       	mov	r8,7
80003996:	f0 09 18 00 	cp.b	r9,r8
8000399a:	fe 98 ff eb 	brls	80003970 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000399e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039a2:	30 78       	mov	r8,7
800039a4:	f0 09 18 00 	cp.b	r9,r8
800039a8:	e0 88 00 04 	brls	800039b0 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
800039ac:	3f 88       	mov	r8,-8
800039ae:	c1 a8       	rjmp	800039e2 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800039b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039b4:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
800039b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039bc:	a1 98       	lsr	r8,0x1
800039be:	ee fa ff f8 	ld.w	r10,r7[-8]
800039c2:	f4 08 01 08 	sub	r8,r10,r8
800039c6:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
800039c8:	10 49       	or	r9,r8
800039ca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800039ce:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
800039d0:	10 49       	or	r9,r8
800039d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039d6:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800039d8:	10 49       	or	r9,r8
800039da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039de:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
800039e0:	30 08       	mov	r8,0
}
800039e2:	10 9c       	mov	r12,r8
800039e4:	2f bd       	sub	sp,-20
800039e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800039ea <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800039ea:	eb cd 40 80 	pushm	r7,lr
800039ee:	1a 97       	mov	r7,sp
800039f0:	20 1d       	sub	sp,4
800039f2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800039f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039fa:	e6 18 00 01 	andh	r8,0x1,COH
800039fe:	5f 08       	sreq	r8
80003a00:	5c 58       	castu.b	r8
}
80003a02:	10 9c       	mov	r12,r8
80003a04:	2f fd       	sub	sp,-4
80003a06:	e3 cd 80 80 	ldm	sp++,r7,pc

80003a0a <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80003a0a:	eb cd 40 80 	pushm	r7,lr
80003a0e:	1a 97       	mov	r7,sp
80003a10:	20 7d       	sub	sp,28
80003a12:	ef 4c ff ec 	st.w	r7[-20],r12
80003a16:	ef 4b ff e8 	st.w	r7[-24],r11
80003a1a:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80003a1e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003a22:	f0 09 15 04 	lsl	r9,r8,0x4
80003a26:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003a2a:	10 39       	cp.w	r9,r8
80003a2c:	e0 8b 00 04 	brhi	80003a34 <usart_set_async_baudrate+0x2a>
80003a30:	31 08       	mov	r8,16
80003a32:	c0 28       	rjmp	80003a36 <usart_set_async_baudrate+0x2c>
80003a34:	30 88       	mov	r8,8
80003a36:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80003a3a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003a3e:	f0 09 15 03 	lsl	r9,r8,0x3
80003a42:	ee fa ff f0 	ld.w	r10,r7[-16]
80003a46:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003a4a:	f4 08 02 48 	mul	r8,r10,r8
80003a4e:	a1 98       	lsr	r8,0x1
80003a50:	f2 08 00 08 	add	r8,r9,r8
80003a54:	ee fa ff f0 	ld.w	r10,r7[-16]
80003a58:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003a5c:	f4 09 02 49 	mul	r9,r10,r9
80003a60:	f0 09 0d 08 	divu	r8,r8,r9
80003a64:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003a68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a6c:	a3 98       	lsr	r8,0x3
80003a6e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80003a72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a76:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003a7a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80003a7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a82:	58 08       	cp.w	r8,0
80003a84:	c0 70       	breq	80003a92 <usart_set_async_baudrate+0x88>
80003a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a8a:	e0 48 ff ff 	cp.w	r8,65535
80003a8e:	e0 88 00 04 	brls	80003a96 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80003a92:	30 18       	mov	r8,1
80003a94:	c2 08       	rjmp	80003ad4 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003a96:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003a9a:	70 18       	ld.w	r8,r8[0x4]
80003a9c:	10 99       	mov	r9,r8
80003a9e:	e4 19 ff f7 	andh	r9,0xfff7
80003aa2:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003aa6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003aaa:	59 08       	cp.w	r8,16
80003aac:	c0 40       	breq	80003ab4 <usart_set_async_baudrate+0xaa>
80003aae:	e8 68 00 00 	mov	r8,524288
80003ab2:	c0 28       	rjmp	80003ab6 <usart_set_async_baudrate+0xac>
80003ab4:	30 08       	mov	r8,0
80003ab6:	10 49       	or	r9,r8
80003ab8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003abc:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80003abe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ac2:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80003ac6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003aca:	10 49       	or	r9,r8
80003acc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003ad0:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80003ad2:	30 08       	mov	r8,0
}
80003ad4:	10 9c       	mov	r12,r8
80003ad6:	2f 9d       	sub	sp,-28
80003ad8:	e3 cd 80 80 	ldm	sp++,r7,pc

80003adc <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80003adc:	eb cd 40 80 	pushm	r7,lr
80003ae0:	1a 97       	mov	r7,sp
80003ae2:	20 2d       	sub	sp,8
80003ae4:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80003ae8:	e1 b8 00 00 	mfsr	r8,0x0
80003aec:	10 9c       	mov	r12,r8
80003aee:	f0 1f 00 18 	mcall	80003b4c <usart_reset+0x70>
80003af2:	18 98       	mov	r8,r12
80003af4:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80003af8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003afc:	30 08       	mov	r8,0
80003afe:	f0 09 18 00 	cp.b	r9,r8
80003b02:	c0 20       	breq	80003b06 <usart_reset+0x2a>
80003b04:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80003b06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b0a:	3f f9       	mov	r9,-1
80003b0c:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80003b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b12:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003b14:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003b18:	30 08       	mov	r8,0
80003b1a:	f0 09 18 00 	cp.b	r9,r8
80003b1e:	c0 20       	breq	80003b22 <usart_reset+0x46>
80003b20:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003b22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b26:	30 09       	mov	r9,0
80003b28:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80003b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b2e:	30 09       	mov	r9,0
80003b30:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80003b32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b36:	30 09       	mov	r9,0
80003b38:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80003b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b3e:	e8 69 61 0c 	mov	r9,549132
80003b42:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003b44:	2f ed       	sub	sp,-8
80003b46:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b4a:	00 00       	add	r0,r0
80003b4c:	80 00       	ld.sh	r0,r0[0x0]
80003b4e:	39 ea       	mov	r10,-98

80003b50 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003b50:	eb cd 40 80 	pushm	r7,lr
80003b54:	1a 97       	mov	r7,sp
80003b56:	20 3d       	sub	sp,12
80003b58:	ef 4c ff fc 	st.w	r7[-4],r12
80003b5c:	ef 4b ff f8 	st.w	r7[-8],r11
80003b60:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003b64:	ee fc ff fc 	ld.w	r12,r7[-4]
80003b68:	f0 1f 00 54 	mcall	80003cb8 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80003b6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b70:	58 08       	cp.w	r8,0
80003b72:	c3 90       	breq	80003be4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80003b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b78:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003b7a:	30 48       	mov	r8,4
80003b7c:	f0 09 18 00 	cp.b	r9,r8
80003b80:	e0 88 00 32 	brls	80003be4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80003b84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b88:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003b8a:	30 98       	mov	r8,9
80003b8c:	f0 09 18 00 	cp.b	r9,r8
80003b90:	e0 8b 00 2a 	brhi	80003be4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003b94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b98:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003b9a:	30 78       	mov	r8,7
80003b9c:	f0 09 18 00 	cp.b	r9,r8
80003ba0:	e0 8b 00 22 	brhi	80003be4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80003ba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ba8:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003baa:	e0 68 01 01 	mov	r8,257
80003bae:	f0 09 19 00 	cp.h	r9,r8
80003bb2:	e0 8b 00 19 	brhi	80003be4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80003bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bba:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003bbe:	30 38       	mov	r8,3
80003bc0:	f0 09 18 00 	cp.b	r9,r8
80003bc4:	e0 8b 00 10 	brhi	80003be4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80003bc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003bcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bd0:	70 08       	ld.w	r8,r8[0x0]
80003bd2:	12 9a       	mov	r10,r9
80003bd4:	10 9b       	mov	r11,r8
80003bd6:	ee fc ff fc 	ld.w	r12,r7[-4]
80003bda:	f0 1f 00 39 	mcall	80003cbc <usart_init_rs232+0x16c>
80003bde:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80003be0:	58 18       	cp.w	r8,1
80003be2:	c0 31       	brne	80003be8 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80003be4:	30 18       	mov	r8,1
80003be6:	c6 48       	rjmp	80003cae <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80003be8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bec:	11 c9       	ld.ub	r9,r8[0x4]
80003bee:	30 98       	mov	r8,9
80003bf0:	f0 09 18 00 	cp.b	r9,r8
80003bf4:	c0 a1       	brne	80003c08 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80003bf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bfa:	70 18       	ld.w	r8,r8[0x4]
80003bfc:	10 99       	mov	r9,r8
80003bfe:	b1 b9       	sbr	r9,0x11
80003c00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c04:	91 19       	st.w	r8[0x4],r9
80003c06:	c0 d8       	rjmp	80003c20 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80003c08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c0c:	70 19       	ld.w	r9,r8[0x4]
80003c0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c12:	11 c8       	ld.ub	r8,r8[0x4]
80003c14:	20 58       	sub	r8,5
80003c16:	a7 68       	lsl	r8,0x6
80003c18:	10 49       	or	r9,r8
80003c1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c1e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003c20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c24:	70 19       	ld.w	r9,r8[0x4]
80003c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c2a:	11 d8       	ld.ub	r8,r8[0x5]
80003c2c:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80003c30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c34:	f1 38 00 08 	ld.ub	r8,r8[8]
80003c38:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003c3a:	f5 e8 10 08 	or	r8,r10,r8
80003c3e:	10 49       	or	r9,r8
80003c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c44:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003c46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c4a:	90 39       	ld.sh	r9,r8[0x6]
80003c4c:	30 28       	mov	r8,2
80003c4e:	f0 09 19 00 	cp.h	r9,r8
80003c52:	e0 88 00 14 	brls	80003c7a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003c56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c5a:	70 18       	ld.w	r8,r8[0x4]
80003c5c:	10 99       	mov	r9,r8
80003c5e:	ad b9       	sbr	r9,0xd
80003c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c64:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003c66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c6a:	90 38       	ld.sh	r8,r8[0x6]
80003c6c:	5c 78       	castu.h	r8
80003c6e:	20 28       	sub	r8,2
80003c70:	10 99       	mov	r9,r8
80003c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c76:	91 a9       	st.w	r8[0x28],r9
80003c78:	c0 d8       	rjmp	80003c92 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80003c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c7e:	70 19       	ld.w	r9,r8[0x4]
80003c80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c84:	90 38       	ld.sh	r8,r8[0x6]
80003c86:	5c 78       	castu.h	r8
80003c88:	ad 68       	lsl	r8,0xc
80003c8a:	10 49       	or	r9,r8
80003c8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c90:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c96:	70 18       	ld.w	r8,r8[0x4]
80003c98:	10 99       	mov	r9,r8
80003c9a:	e0 19 ff f0 	andl	r9,0xfff0
80003c9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ca2:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003ca4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ca8:	35 09       	mov	r9,80
80003caa:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80003cac:	30 08       	mov	r8,0
}
80003cae:	10 9c       	mov	r12,r8
80003cb0:	2f dd       	sub	sp,-12
80003cb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cb6:	00 00       	add	r0,r0
80003cb8:	80 00       	ld.sh	r0,r0[0x0]
80003cba:	3a dc       	mov	r12,-83
80003cbc:	80 00       	ld.sh	r0,r0[0x0]
80003cbe:	3a 0a       	mov	r10,-96

80003cc0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003cc0:	48 dd       	lddpc	sp,80003cf4 <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
80003cc2:	fe c0 82 c2 	sub	r0,pc,-32062
  mtsr    AVR32_EVBA, r0
80003cc6:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
80003cca:	d5 53       	csrf	0x15
  lda.w   r1, _edata
80003ccc:	48 b0       	lddpc	r0,80003cf8 <udata_clear_loop_end+0x8>
  cp      r0, r1
80003cce:	48 c1       	lddpc	r1,80003cfc <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
80003cd0:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
80003cd2:	c0 62       	brcc	80003cde <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
80003cd4:	48 b2       	lddpc	r2,80003d00 <udata_clear_loop_end+0x10>

80003cd6 <idata_load_loop>:
  st.d    r0++, r4
80003cd6:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
80003cd8:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
80003cda:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003cdc:	cf d3       	brcs	80003cd6 <idata_load_loop>

80003cde <idata_load_loop_end>:
  lda.w   r1, _end
80003cde:	48 a0       	lddpc	r0,80003d04 <udata_clear_loop_end+0x14>
  cp      r0, r1
80003ce0:	48 a1       	lddpc	r1,80003d08 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
80003ce2:	02 30       	cp.w	r0,r1
  mov     r2, 0
80003ce4:	c0 62       	brcc	80003cf0 <udata_clear_loop_end>
  mov     r3, 0
80003ce6:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
80003ce8:	30 03       	mov	r3,0

80003cea <udata_clear_loop>:
  cp      r0, r1
80003cea:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
80003cec:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003cee:	cf e3       	brcs	80003cea <udata_clear_loop>

80003cf0 <udata_clear_loop_end>:
80003cf0:	fe cf e9 68 	sub	pc,pc,-5784
80003cf4:	00 00       	add	r0,r0
80003cf6:	80 00       	ld.sh	r0,r0[0x0]
80003cf8:	00 00       	add	r0,r0
80003cfa:	00 04       	add	r4,r0
80003cfc:	00 00       	add	r0,r0
80003cfe:	05 10       	ld.sh	r0,r2++
80003d00:	80 00       	ld.sh	r0,r0[0x0]
80003d02:	cd 30       	breq	80003ca8 <usart_init_rs232+0x158>
80003d04:	00 00       	add	r0,r0
80003d06:	05 10       	ld.sh	r0,r2++
80003d08:	00 00       	add	r0,r0
80003d0a:	09 28       	ld.uh	r8,r4++

80003d0c <str2int>:
#include <math.h>

static void find_data(const char *c, int data_i[50]);

static int str2int(char* pStr, unsigned int len)
{
80003d0c:	eb cd 40 80 	pushm	r7,lr
80003d10:	1a 97       	mov	r7,sp
80003d12:	20 4d       	sub	sp,16
80003d14:	ef 4c ff f4 	st.w	r7[-12],r12
80003d18:	ef 4b ff f0 	st.w	r7[-16],r11
	int iRetVal = 0;
80003d1c:	30 08       	mov	r8,0
80003d1e:	ef 48 ff f8 	st.w	r7[-8],r8
	int cnt = 0;
80003d22:	30 08       	mov	r8,0
80003d24:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(pStr){
80003d28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d2c:	58 08       	cp.w	r8,0
80003d2e:	c3 10       	breq	80003d90 <str2int+0x84>
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
80003d30:	c1 a8       	rjmp	80003d64 <str2int+0x58>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
80003d32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d36:	12 98       	mov	r8,r9
80003d38:	a3 68       	lsl	r8,0x2
80003d3a:	12 08       	add	r8,r9
80003d3c:	a1 78       	lsl	r8,0x1
80003d3e:	10 99       	mov	r9,r8
80003d40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d44:	11 88       	ld.ub	r8,r8[0x0]
80003d46:	23 08       	sub	r8,48
80003d48:	f2 08 00 08 	add	r8,r9,r8
80003d4c:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
80003d50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d54:	2f f8       	sub	r8,-1
80003d56:	ef 48 ff f4 	st.w	r7[-12],r8
			cnt++;
80003d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d5e:	2f f8       	sub	r8,-1
80003d60:	ef 48 ff fc 	st.w	r7[-4],r8
{
	int iRetVal = 0;
	int cnt = 0;
	
	if(pStr){
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
80003d64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003d68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003d6c:	10 39       	cp.w	r9,r8
80003d6e:	c1 12       	brcc	80003d90 <str2int+0x84>
80003d70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d74:	11 89       	ld.ub	r9,r8[0x0]
80003d76:	33 98       	mov	r8,57
80003d78:	f0 09 18 00 	cp.b	r9,r8
80003d7c:	e0 8b 00 0a 	brhi	80003d90 <str2int+0x84>
80003d80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d84:	11 89       	ld.ub	r9,r8[0x0]
80003d86:	32 f8       	mov	r8,47
80003d88:	f0 09 18 00 	cp.b	r9,r8
80003d8c:	fe 9b ff d3 	brhi	80003d32 <str2int+0x26>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
			cnt++;
		}
	}
	return iRetVal;
80003d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003d94:	10 9c       	mov	r12,r8
80003d96:	2f cd       	sub	sp,-16
80003d98:	e3 cd 80 80 	ldm	sp++,r7,pc

80003d9c <str2float>:

static float str2float(char* pStr){
80003d9c:	eb cd 40 c0 	pushm	r6-r7,lr
80003da0:	1a 97       	mov	r7,sp
80003da2:	20 3d       	sub	sp,12
80003da4:	ef 4c ff f4 	st.w	r7[-12],r12
	float iRetVal = 0;
80003da8:	30 08       	mov	r8,0
80003daa:	ef 48 ff f8 	st.w	r7[-8],r8
	char *decP;
	
	if(pStr){
80003dae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003db2:	58 08       	cp.w	r8,0
80003db4:	e0 80 00 8c 	breq	80003ecc <str2float+0x130>
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80003db8:	c1 d8       	rjmp	80003df2 <str2float+0x56>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
80003dba:	fc 1b 41 20 	movh	r11,0x4120
80003dbe:	ee fc ff f8 	ld.w	r12,r7[-8]
80003dc2:	f0 1f 00 46 	mcall	80003ed8 <str2float+0x13c>
80003dc6:	18 98       	mov	r8,r12
80003dc8:	10 96       	mov	r6,r8
80003dca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003dce:	11 88       	ld.ub	r8,r8[0x0]
80003dd0:	23 08       	sub	r8,48
80003dd2:	10 9c       	mov	r12,r8
80003dd4:	f0 1f 00 42 	mcall	80003edc <str2float+0x140>
80003dd8:	18 98       	mov	r8,r12
80003dda:	10 9b       	mov	r11,r8
80003ddc:	0c 9c       	mov	r12,r6
80003dde:	f0 1f 00 41 	mcall	80003ee0 <str2float+0x144>
80003de2:	18 98       	mov	r8,r12
80003de4:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
80003de8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003dec:	2f f8       	sub	r8,-1
80003dee:	ef 48 ff f4 	st.w	r7[-12],r8
static float str2float(char* pStr){
	float iRetVal = 0;
	char *decP;
	
	if(pStr){
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80003df2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003df6:	11 88       	ld.ub	r8,r8[0x0]
80003df8:	58 08       	cp.w	r8,0
80003dfa:	c1 10       	breq	80003e1c <str2float+0x80>
80003dfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e00:	11 89       	ld.ub	r9,r8[0x0]
80003e02:	33 98       	mov	r8,57
80003e04:	f0 09 18 00 	cp.b	r9,r8
80003e08:	e0 8b 00 0a 	brhi	80003e1c <str2float+0x80>
80003e0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e10:	11 89       	ld.ub	r9,r8[0x0]
80003e12:	32 f8       	mov	r8,47
80003e14:	f0 09 18 00 	cp.b	r9,r8
80003e18:	fe 9b ff d1 	brhi	80003dba <str2float+0x1e>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
		}
	
		if(*pStr == '.'){
80003e1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e20:	11 89       	ld.ub	r9,r8[0x0]
80003e22:	32 e8       	mov	r8,46
80003e24:	f0 09 18 00 	cp.b	r9,r8
80003e28:	c5 21       	brne	80003ecc <str2float+0x130>
			decP = pStr++;
80003e2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e2e:	ef 48 ff fc 	st.w	r7[-4],r8
80003e32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e36:	2f f8       	sub	r8,-1
80003e38:	ef 48 ff f4 	st.w	r7[-12],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80003e3c:	c1 d8       	rjmp	80003e76 <str2float+0xda>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
80003e3e:	fc 1b 41 20 	movh	r11,0x4120
80003e42:	ee fc ff f8 	ld.w	r12,r7[-8]
80003e46:	f0 1f 00 25 	mcall	80003ed8 <str2float+0x13c>
80003e4a:	18 98       	mov	r8,r12
80003e4c:	10 96       	mov	r6,r8
80003e4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e52:	11 88       	ld.ub	r8,r8[0x0]
80003e54:	23 08       	sub	r8,48
80003e56:	10 9c       	mov	r12,r8
80003e58:	f0 1f 00 21 	mcall	80003edc <str2float+0x140>
80003e5c:	18 98       	mov	r8,r12
80003e5e:	10 9b       	mov	r11,r8
80003e60:	0c 9c       	mov	r12,r6
80003e62:	f0 1f 00 20 	mcall	80003ee0 <str2float+0x144>
80003e66:	18 98       	mov	r8,r12
80003e68:	ef 48 ff f8 	st.w	r7[-8],r8
				pStr++;
80003e6c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e70:	2f f8       	sub	r8,-1
80003e72:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	
		if(*pStr == '.'){
			decP = pStr++;
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80003e76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e7a:	11 88       	ld.ub	r8,r8[0x0]
80003e7c:	58 08       	cp.w	r8,0
80003e7e:	c1 b0       	breq	80003eb4 <str2float+0x118>
80003e80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e84:	11 89       	ld.ub	r9,r8[0x0]
80003e86:	33 98       	mov	r8,57
80003e88:	f0 09 18 00 	cp.b	r9,r8
80003e8c:	e0 8b 00 14 	brhi	80003eb4 <str2float+0x118>
80003e90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e94:	11 89       	ld.ub	r9,r8[0x0]
80003e96:	32 f8       	mov	r8,47
80003e98:	f0 09 18 00 	cp.b	r9,r8
80003e9c:	fe 9b ff d1 	brhi	80003e3e <str2float+0xa2>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
80003ea0:	c0 a8       	rjmp	80003eb4 <str2float+0x118>
				iRetVal = iRetVal/10;
80003ea2:	fc 1b 41 20 	movh	r11,0x4120
80003ea6:	ee fc ff f8 	ld.w	r12,r7[-8]
80003eaa:	f0 1f 00 0f 	mcall	80003ee4 <str2float+0x148>
80003eae:	18 98       	mov	r8,r12
80003eb0:	ef 48 ff f8 	st.w	r7[-8],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
80003eb4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003eb8:	20 18       	sub	r8,1
80003eba:	ef 48 ff f4 	st.w	r7[-12],r8
80003ebe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ec6:	10 39       	cp.w	r9,r8
80003ec8:	fe 9b ff ed 	brhi	80003ea2 <str2float+0x106>
				iRetVal = iRetVal/10;
			}
		}
	}
	
	return iRetVal;
80003ecc:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003ed0:	10 9c       	mov	r12,r8
80003ed2:	2f dd       	sub	sp,-12
80003ed4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	5d 48       	*unknown*
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	5e 2a       	reths	r10
80003ee0:	80 00       	ld.sh	r0,r0[0x0]
80003ee2:	5c 9c       	brev	r12
80003ee4:	80 00       	ld.sh	r0,r0[0x0]
80003ee6:	5a 68       	cp.w	r8,-26

80003ee8 <uc530_parse_default>:

int uc530_parse_default(char *str, unsigned int len, uc530_data_t *gps_data){
80003ee8:	eb cd 40 80 	pushm	r7,lr
80003eec:	1a 97       	mov	r7,sp
80003eee:	fa cd 00 dc 	sub	sp,sp,220
80003ef2:	ef 4c ff 2c 	st.w	r7[-212],r12
80003ef6:	ef 4b ff 28 	st.w	r7[-216],r11
80003efa:	ef 4a ff 24 	st.w	r7[-220],r10
	char *nmea = str;
80003efe:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80003f02:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
80003f06:	30 08       	mov	r8,0
80003f08:	ef 48 ff fc 	st.w	r7[-4],r8
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
80003f0c:	e0 8f 02 36 	bral	80004378 <uc530_parse_default+0x490>
		if(found_start){
80003f10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f14:	58 08       	cp.w	r8,0
80003f16:	e0 80 02 22 	breq	8000435a <uc530_parse_default+0x472>
			// Ignore standard 'GP'
			nmea += 2;
80003f1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f1e:	2f e8       	sub	r8,-2
80003f20:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// Find Data Indices
			find_data(nmea, data_i);
80003f24:	ee c8 00 d0 	sub	r8,r7,208
80003f28:	10 9b       	mov	r11,r8
80003f2a:	ee fc ff f8 	ld.w	r12,r7[-8]
80003f2e:	f0 1f 01 1c 	mcall	8000439c <uc530_parse_default+0x4b4>
			gps_data->valid = 1;
80003f32:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003f36:	30 19       	mov	r9,1
80003f38:	f1 49 00 40 	st.w	r8[64],r9
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80003f3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f40:	11 89       	ld.ub	r9,r8[0x0]
80003f42:	34 78       	mov	r8,71
80003f44:	f0 09 18 00 	cp.b	r9,r8
80003f48:	c5 f1       	brne	80004006 <uc530_parse_default+0x11e>
80003f4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f4e:	2f f8       	sub	r8,-1
80003f50:	11 89       	ld.ub	r9,r8[0x0]
80003f52:	34 78       	mov	r8,71
80003f54:	f0 09 18 00 	cp.b	r9,r8
80003f58:	c5 71       	brne	80004006 <uc530_parse_default+0x11e>
80003f5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f5e:	2f e8       	sub	r8,-2
80003f60:	11 89       	ld.ub	r9,r8[0x0]
80003f62:	34 18       	mov	r8,65
80003f64:	f0 09 18 00 	cp.b	r9,r8
80003f68:	c4 f1       	brne	80004006 <uc530_parse_default+0x11e>
				// Fix Indicator
				if(data_i[5] != -1){
80003f6a:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003f6e:	5b f8       	cp.w	r8,-1
80003f70:	c1 20       	breq	80003f94 <uc530_parse_default+0xac>
					gps_data->fix_status = str2int(nmea+data_i[5],10);
80003f72:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003f76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f7a:	f2 08 00 08 	add	r8,r9,r8
80003f7e:	30 ab       	mov	r11,10
80003f80:	10 9c       	mov	r12,r8
80003f82:	f0 1f 01 08 	mcall	800043a0 <uc530_parse_default+0x4b8>
80003f86:	18 98       	mov	r8,r12
80003f88:	5c 58       	castu.b	r8
80003f8a:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003f8e:	f3 68 00 30 	st.b	r9[48],r8
80003f92:	c0 68       	rjmp	80003f9e <uc530_parse_default+0xb6>
				}
				else
					gps_data->valid = 0;
80003f94:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003f98:	30 09       	mov	r9,0
80003f9a:	f1 49 00 40 	st.w	r8[64],r9
				
				// Number of Satellites
				if(data_i[6] != -1){
80003f9e:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003fa2:	5b f8       	cp.w	r8,-1
80003fa4:	c1 20       	breq	80003fc8 <uc530_parse_default+0xe0>
					gps_data->num_sats = str2int(nmea+data_i[6],10);
80003fa6:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003faa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003fae:	f2 08 00 08 	add	r8,r9,r8
80003fb2:	30 ab       	mov	r11,10
80003fb4:	10 9c       	mov	r12,r8
80003fb6:	f0 1f 00 fb 	mcall	800043a0 <uc530_parse_default+0x4b8>
80003fba:	18 98       	mov	r8,r12
80003fbc:	5c 58       	castu.b	r8
80003fbe:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003fc2:	f3 68 00 31 	st.b	r9[49],r8
80003fc6:	c0 68       	rjmp	80003fd2 <uc530_parse_default+0xea>
				}
				else
					gps_data->valid = 0;
80003fc8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003fcc:	30 09       	mov	r9,0
80003fce:	f1 49 00 40 	st.w	r8[64],r9
					
				// Altitude
				if(data_i[8] != -1){
80003fd2:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003fd6:	5b f8       	cp.w	r8,-1
80003fd8:	c1 00       	breq	80003ff8 <uc530_parse_default+0x110>
					gps_data->alt = str2float(nmea+data_i[8]);
80003fda:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003fde:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003fe2:	f2 08 00 08 	add	r8,r9,r8
80003fe6:	10 9c       	mov	r12,r8
80003fe8:	f0 1f 00 ef 	mcall	800043a4 <uc530_parse_default+0x4bc>
80003fec:	18 99       	mov	r9,r12
80003fee:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003ff2:	91 99       	st.w	r8[0x24],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80003ff4:	e0 8f 01 af 	bral	80004352 <uc530_parse_default+0x46a>
				// Altitude
				if(data_i[8] != -1){
					gps_data->alt = str2float(nmea+data_i[8]);
				}
				else
					gps_data->valid = 0;
80003ff8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003ffc:	30 09       	mov	r9,0
80003ffe:	f1 49 00 40 	st.w	r8[64],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80004002:	e0 8f 01 a8 	bral	80004352 <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
80004006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000400a:	11 89       	ld.ub	r9,r8[0x0]
8000400c:	35 28       	mov	r8,82
8000400e:	f0 09 18 00 	cp.b	r9,r8
80004012:	e0 81 01 2d 	brne	8000426c <uc530_parse_default+0x384>
80004016:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000401a:	2f f8       	sub	r8,-1
8000401c:	11 89       	ld.ub	r9,r8[0x0]
8000401e:	34 d8       	mov	r8,77
80004020:	f0 09 18 00 	cp.b	r9,r8
80004024:	e0 81 01 24 	brne	8000426c <uc530_parse_default+0x384>
80004028:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000402c:	2f e8       	sub	r8,-2
8000402e:	11 89       	ld.ub	r9,r8[0x0]
80004030:	34 38       	mov	r8,67
80004032:	f0 09 18 00 	cp.b	r9,r8
80004036:	e0 81 01 1b 	brne	8000426c <uc530_parse_default+0x384>
				// Time
				if(data_i[0] != -1){
8000403a:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000403e:	5b f8       	cp.w	r8,-1
80004040:	c2 f0       	breq	8000409e <uc530_parse_default+0x1b6>
					// Hours
					gps_data->hour = str2int(nmea+data_i[0], 2);
80004042:	ee f8 ff 30 	ld.w	r8,r7[-208]
80004046:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000404a:	f2 08 00 08 	add	r8,r9,r8
8000404e:	30 2b       	mov	r11,2
80004050:	10 9c       	mov	r12,r8
80004052:	f0 1f 00 d4 	mcall	800043a0 <uc530_parse_default+0x4b8>
80004056:	18 98       	mov	r8,r12
80004058:	5c 58       	castu.b	r8
8000405a:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000405e:	b2 b8       	st.b	r9[0x3],r8
					
					// Minutes
					gps_data->minute = str2int(nmea+data_i[0]+2, 2);
80004060:	ee f8 ff 30 	ld.w	r8,r7[-208]
80004064:	2f e8       	sub	r8,-2
80004066:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000406a:	f2 08 00 08 	add	r8,r9,r8
8000406e:	30 2b       	mov	r11,2
80004070:	10 9c       	mov	r12,r8
80004072:	f0 1f 00 cc 	mcall	800043a0 <uc530_parse_default+0x4b8>
80004076:	18 98       	mov	r8,r12
80004078:	5c 58       	castu.b	r8
8000407a:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000407e:	b2 c8       	st.b	r9[0x4],r8
					
					// Seconds
					gps_data->second = str2float(nmea+data_i[0]+4);
80004080:	ee f8 ff 30 	ld.w	r8,r7[-208]
80004084:	2f c8       	sub	r8,-4
80004086:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000408a:	f2 08 00 08 	add	r8,r9,r8
8000408e:	10 9c       	mov	r12,r8
80004090:	f0 1f 00 c5 	mcall	800043a4 <uc530_parse_default+0x4bc>
80004094:	18 99       	mov	r9,r12
80004096:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000409a:	91 29       	st.w	r8[0x8],r9
8000409c:	c0 68       	rjmp	800040a8 <uc530_parse_default+0x1c0>
				}
				else
					gps_data->valid = 0;
8000409e:	ee f8 ff 24 	ld.w	r8,r7[-220]
800040a2:	30 09       	mov	r9,0
800040a4:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude
				if(data_i[2] != -1){
800040a8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800040ac:	5b f8       	cp.w	r8,-1
800040ae:	c2 00       	breq	800040ee <uc530_parse_default+0x206>
					// Degrees
					gps_data->lat.deg = str2int(nmea+data_i[2], 2);
800040b0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800040b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800040b8:	f2 08 00 08 	add	r8,r9,r8
800040bc:	30 2b       	mov	r11,2
800040be:	10 9c       	mov	r12,r8
800040c0:	f0 1f 00 b8 	mcall	800043a0 <uc530_parse_default+0x4b8>
800040c4:	18 98       	mov	r8,r12
800040c6:	5c 58       	castu.b	r8
800040c8:	ee f9 ff 24 	ld.w	r9,r7[-220]
800040cc:	f3 68 00 0c 	st.b	r9[12],r8
					
					// Minutes
					gps_data->lat.min = str2float(nmea+data_i[2]+2);
800040d0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800040d4:	2f e8       	sub	r8,-2
800040d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800040da:	f2 08 00 08 	add	r8,r9,r8
800040de:	10 9c       	mov	r12,r8
800040e0:	f0 1f 00 b1 	mcall	800043a4 <uc530_parse_default+0x4bc>
800040e4:	18 99       	mov	r9,r12
800040e6:	ee f8 ff 24 	ld.w	r8,r7[-220]
800040ea:	91 49       	st.w	r8[0x10],r9
800040ec:	c0 68       	rjmp	800040f8 <uc530_parse_default+0x210>
				}
				else
					gps_data->valid = 0;
800040ee:	ee f8 ff 24 	ld.w	r8,r7[-220]
800040f2:	30 09       	mov	r9,0
800040f4:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude Hemi
				if(data_i[3] != -1){
800040f8:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800040fc:	5b f8       	cp.w	r8,-1
800040fe:	c0 d0       	breq	80004118 <uc530_parse_default+0x230>
					gps_data->lat.hemi = *(nmea+data_i[3]);
80004100:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80004104:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004108:	f2 08 00 08 	add	r8,r9,r8
8000410c:	11 88       	ld.ub	r8,r8[0x0]
8000410e:	ee f9 ff 24 	ld.w	r9,r7[-220]
80004112:	f3 68 00 14 	st.b	r9[20],r8
80004116:	c0 68       	rjmp	80004122 <uc530_parse_default+0x23a>
				}
				else
					gps_data->valid = 0;
80004118:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000411c:	30 09       	mov	r9,0
8000411e:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude
				if(data_i[4] != -1){
80004122:	ee f8 ff 40 	ld.w	r8,r7[-192]
80004126:	5b f8       	cp.w	r8,-1
80004128:	c2 00       	breq	80004168 <uc530_parse_default+0x280>
					// Degrees
					gps_data->longi.deg = str2int(nmea+data_i[4], 3);
8000412a:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000412e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004132:	f2 08 00 08 	add	r8,r9,r8
80004136:	30 3b       	mov	r11,3
80004138:	10 9c       	mov	r12,r8
8000413a:	f0 1f 00 9a 	mcall	800043a0 <uc530_parse_default+0x4b8>
8000413e:	18 98       	mov	r8,r12
80004140:	5c 58       	castu.b	r8
80004142:	ee f9 ff 24 	ld.w	r9,r7[-220]
80004146:	f3 68 00 18 	st.b	r9[24],r8
					
					// Minutes
					gps_data->longi.min = str2float(nmea+data_i[4]+3);
8000414a:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000414e:	2f d8       	sub	r8,-3
80004150:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004154:	f2 08 00 08 	add	r8,r9,r8
80004158:	10 9c       	mov	r12,r8
8000415a:	f0 1f 00 93 	mcall	800043a4 <uc530_parse_default+0x4bc>
8000415e:	18 99       	mov	r9,r12
80004160:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004164:	91 79       	st.w	r8[0x1c],r9
80004166:	c0 68       	rjmp	80004172 <uc530_parse_default+0x28a>
				}
				else
					gps_data->valid = 0;
80004168:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000416c:	30 09       	mov	r9,0
8000416e:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude Hemi
				if(data_i[5] != -1){
80004172:	ee f8 ff 44 	ld.w	r8,r7[-188]
80004176:	5b f8       	cp.w	r8,-1
80004178:	c0 d0       	breq	80004192 <uc530_parse_default+0x2aa>
					gps_data->longi.hemi = *(nmea+data_i[5]);
8000417a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000417e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004182:	f2 08 00 08 	add	r8,r9,r8
80004186:	11 88       	ld.ub	r8,r8[0x0]
80004188:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000418c:	f3 68 00 20 	st.b	r9[32],r8
80004190:	c0 68       	rjmp	8000419c <uc530_parse_default+0x2b4>
				}
				else
					gps_data->valid = 0;
80004192:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004196:	30 09       	mov	r9,0
80004198:	f1 49 00 40 	st.w	r8[64],r9
					
				// Speed
				if(data_i[6] != -1){
8000419c:	ee f8 ff 48 	ld.w	r8,r7[-184]
800041a0:	5b f8       	cp.w	r8,-1
800041a2:	c0 f0       	breq	800041c0 <uc530_parse_default+0x2d8>
					gps_data->spd = str2float(nmea+data_i[6]);
800041a4:	ee f8 ff 48 	ld.w	r8,r7[-184]
800041a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800041ac:	f2 08 00 08 	add	r8,r9,r8
800041b0:	10 9c       	mov	r12,r8
800041b2:	f0 1f 00 7d 	mcall	800043a4 <uc530_parse_default+0x4bc>
800041b6:	18 99       	mov	r9,r12
800041b8:	ee f8 ff 24 	ld.w	r8,r7[-220]
800041bc:	91 a9       	st.w	r8[0x28],r9
800041be:	c0 68       	rjmp	800041ca <uc530_parse_default+0x2e2>
				}
				else
					gps_data->valid = 0;
800041c0:	ee f8 ff 24 	ld.w	r8,r7[-220]
800041c4:	30 09       	mov	r9,0
800041c6:	f1 49 00 40 	st.w	r8[64],r9
					
				// Heading
				if(data_i[7] != -1){
800041ca:	ee f8 ff 4c 	ld.w	r8,r7[-180]
800041ce:	5b f8       	cp.w	r8,-1
800041d0:	c0 f0       	breq	800041ee <uc530_parse_default+0x306>
					gps_data->hdg = str2float(nmea+data_i[7]);
800041d2:	ee f8 ff 4c 	ld.w	r8,r7[-180]
800041d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800041da:	f2 08 00 08 	add	r8,r9,r8
800041de:	10 9c       	mov	r12,r8
800041e0:	f0 1f 00 71 	mcall	800043a4 <uc530_parse_default+0x4bc>
800041e4:	18 99       	mov	r9,r12
800041e6:	ee f8 ff 24 	ld.w	r8,r7[-220]
800041ea:	91 b9       	st.w	r8[0x2c],r9
800041ec:	c0 68       	rjmp	800041f8 <uc530_parse_default+0x310>
				}
				else
					gps_data->valid = 0;
800041ee:	ee f8 ff 24 	ld.w	r8,r7[-220]
800041f2:	30 09       	mov	r9,0
800041f4:	f1 49 00 40 	st.w	r8[64],r9
					
				// Date
				if(data_i[8] != -1){
800041f8:	ee f8 ff 50 	ld.w	r8,r7[-176]
800041fc:	5b f8       	cp.w	r8,-1
800041fe:	c3 10       	breq	80004260 <uc530_parse_default+0x378>
					// Day
					gps_data->day = str2int(nmea+data_i[8], 2);
80004200:	ee f8 ff 50 	ld.w	r8,r7[-176]
80004204:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004208:	f2 08 00 08 	add	r8,r9,r8
8000420c:	30 2b       	mov	r11,2
8000420e:	10 9c       	mov	r12,r8
80004210:	f0 1f 00 64 	mcall	800043a0 <uc530_parse_default+0x4b8>
80004214:	18 98       	mov	r8,r12
80004216:	5c 58       	castu.b	r8
80004218:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000421c:	b2 a8       	st.b	r9[0x2],r8
					
					// Month
					gps_data->month = str2int(nmea+data_i[8]+2, 2);
8000421e:	ee f8 ff 50 	ld.w	r8,r7[-176]
80004222:	2f e8       	sub	r8,-2
80004224:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004228:	f2 08 00 08 	add	r8,r9,r8
8000422c:	30 2b       	mov	r11,2
8000422e:	10 9c       	mov	r12,r8
80004230:	f0 1f 00 5c 	mcall	800043a0 <uc530_parse_default+0x4b8>
80004234:	18 98       	mov	r8,r12
80004236:	5c 58       	castu.b	r8
80004238:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000423c:	b2 98       	st.b	r9[0x1],r8
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
8000423e:	ee f8 ff 50 	ld.w	r8,r7[-176]
80004242:	2f c8       	sub	r8,-4
80004244:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004248:	f2 08 00 08 	add	r8,r9,r8
8000424c:	30 ab       	mov	r11,10
8000424e:	10 9c       	mov	r12,r8
80004250:	f0 1f 00 54 	mcall	800043a0 <uc530_parse_default+0x4b8>
80004254:	18 98       	mov	r8,r12
80004256:	5c 58       	castu.b	r8
80004258:	ee f9 ff 24 	ld.w	r9,r7[-220]
8000425c:	b2 88       	st.b	r9[0x0],r8
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
8000425e:	c7 a8       	rjmp	80004352 <uc530_parse_default+0x46a>
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
				}
				else
					gps_data->valid = 0;
80004260:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004264:	30 09       	mov	r9,0
80004266:	f1 49 00 40 	st.w	r8[64],r9
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
8000426a:	c7 48       	rjmp	80004352 <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//GSV
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='V')){
8000426c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004270:	11 89       	ld.ub	r9,r8[0x0]
80004272:	34 78       	mov	r8,71
80004274:	f0 09 18 00 	cp.b	r9,r8
80004278:	c1 11       	brne	8000429a <uc530_parse_default+0x3b2>
8000427a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000427e:	2f f8       	sub	r8,-1
80004280:	11 89       	ld.ub	r9,r8[0x0]
80004282:	35 38       	mov	r8,83
80004284:	f0 09 18 00 	cp.b	r9,r8
80004288:	c0 91       	brne	8000429a <uc530_parse_default+0x3b2>
8000428a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000428e:	2f e8       	sub	r8,-2
80004290:	11 89       	ld.ub	r9,r8[0x0]
80004292:	35 68       	mov	r8,86
80004294:	f0 09 18 00 	cp.b	r9,r8
80004298:	c5 d0       	breq	80004352 <uc530_parse_default+0x46a>
				
			}
			//GSA
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='A')){
8000429a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000429e:	11 89       	ld.ub	r9,r8[0x0]
800042a0:	34 78       	mov	r8,71
800042a2:	f0 09 18 00 	cp.b	r9,r8
800042a6:	c5 61       	brne	80004352 <uc530_parse_default+0x46a>
800042a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042ac:	2f f8       	sub	r8,-1
800042ae:	11 89       	ld.ub	r9,r8[0x0]
800042b0:	35 38       	mov	r8,83
800042b2:	f0 09 18 00 	cp.b	r9,r8
800042b6:	c4 e1       	brne	80004352 <uc530_parse_default+0x46a>
800042b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042bc:	2f e8       	sub	r8,-2
800042be:	11 89       	ld.ub	r9,r8[0x0]
800042c0:	34 18       	mov	r8,65
800042c2:	f0 09 18 00 	cp.b	r9,r8
800042c6:	c4 61       	brne	80004352 <uc530_parse_default+0x46a>
				// PDOP
				if(data_i[14] != -1){
800042c8:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042cc:	5b f8       	cp.w	r8,-1
800042ce:	c0 f0       	breq	800042ec <uc530_parse_default+0x404>
					gps_data->pdop = str2float(nmea+data_i[14]);
800042d0:	ee f8 ff 68 	ld.w	r8,r7[-152]
800042d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800042d8:	f2 08 00 08 	add	r8,r9,r8
800042dc:	10 9c       	mov	r12,r8
800042de:	f0 1f 00 32 	mcall	800043a4 <uc530_parse_default+0x4bc>
800042e2:	18 99       	mov	r9,r12
800042e4:	ee f8 ff 24 	ld.w	r8,r7[-220]
800042e8:	91 d9       	st.w	r8[0x34],r9
800042ea:	c0 68       	rjmp	800042f6 <uc530_parse_default+0x40e>
				}
				else
					gps_data->valid = 0;
800042ec:	ee f8 ff 24 	ld.w	r8,r7[-220]
800042f0:	30 09       	mov	r9,0
800042f2:	f1 49 00 40 	st.w	r8[64],r9
					
				// HDOP
				if(data_i[15] != -1){
800042f6:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800042fa:	5b f8       	cp.w	r8,-1
800042fc:	c0 f0       	breq	8000431a <uc530_parse_default+0x432>
					gps_data->hdop = str2float(nmea+data_i[15]);
800042fe:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80004302:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004306:	f2 08 00 08 	add	r8,r9,r8
8000430a:	10 9c       	mov	r12,r8
8000430c:	f0 1f 00 26 	mcall	800043a4 <uc530_parse_default+0x4bc>
80004310:	18 99       	mov	r9,r12
80004312:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004316:	91 e9       	st.w	r8[0x38],r9
80004318:	c0 68       	rjmp	80004324 <uc530_parse_default+0x43c>
				}
				else
					gps_data->valid = 0;
8000431a:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000431e:	30 09       	mov	r9,0
80004320:	f1 49 00 40 	st.w	r8[64],r9
					
				// VDOP
				if(data_i[16] != -1){
80004324:	ee f8 ff 70 	ld.w	r8,r7[-144]
80004328:	5b f8       	cp.w	r8,-1
8000432a:	c0 f0       	breq	80004348 <uc530_parse_default+0x460>
					gps_data->vdop = str2float(nmea+data_i[16]);
8000432c:	ee f8 ff 70 	ld.w	r8,r7[-144]
80004330:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004334:	f2 08 00 08 	add	r8,r9,r8
80004338:	10 9c       	mov	r12,r8
8000433a:	f0 1f 00 1b 	mcall	800043a4 <uc530_parse_default+0x4bc>
8000433e:	18 99       	mov	r9,r12
80004340:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004344:	91 f9       	st.w	r8[0x3c],r9
80004346:	c0 68       	rjmp	80004352 <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
80004348:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000434c:	30 09       	mov	r9,0
8000434e:	f1 49 00 40 	st.w	r8[64],r9
			}
			
			found_start = 0;
80004352:	30 08       	mov	r8,0
80004354:	ef 48 ff fc 	st.w	r7[-4],r8
80004358:	c0 b8       	rjmp	8000436e <uc530_parse_default+0x486>
		}
		else if(*nmea == '$')
8000435a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000435e:	11 89       	ld.ub	r9,r8[0x0]
80004360:	32 48       	mov	r8,36
80004362:	f0 09 18 00 	cp.b	r9,r8
80004366:	c0 41       	brne	8000436e <uc530_parse_default+0x486>
			found_start = 1;
80004368:	30 18       	mov	r8,1
8000436a:	ef 48 ff fc 	st.w	r7[-4],r8
		
		// Increment to next character
		nmea++;
8000436e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004372:	2f f8       	sub	r8,-1
80004374:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
80004378:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000437c:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80004380:	f2 08 01 08 	sub	r8,r9,r8
80004384:	10 99       	mov	r9,r8
80004386:	ee f8 ff 28 	ld.w	r8,r7[-216]
8000438a:	10 39       	cp.w	r9,r8
8000438c:	fe 93 fd c2 	brlo	80003f10 <uc530_parse_default+0x28>
		
		// Increment to next character
		nmea++;
	}
	
	return UC530_SUCCESS;
80004390:	30 18       	mov	r8,1
}
80004392:	10 9c       	mov	r12,r8
80004394:	2c 9d       	sub	sp,-220
80004396:	e3 cd 80 80 	ldm	sp++,r7,pc
8000439a:	00 00       	add	r0,r0
8000439c:	80 00       	ld.sh	r0,r0[0x0]
8000439e:	43 a8       	lddsp	r8,sp[0xe8]
800043a0:	80 00       	ld.sh	r0,r0[0x0]
800043a2:	3d 0c       	mov	r12,-48
800043a4:	80 00       	ld.sh	r0,r0[0x0]
800043a6:	3d 9c       	mov	r12,-39

800043a8 <find_data>:

// Finds indices of data fields between commas
// will list up to 50 indices or scan 200 characters
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
800043a8:	eb cd 40 80 	pushm	r7,lr
800043ac:	1a 97       	mov	r7,sp
800043ae:	20 4d       	sub	sp,16
800043b0:	ef 4c ff f4 	st.w	r7[-12],r12
800043b4:	ef 4b ff f0 	st.w	r7[-16],r11
	unsigned int str_cnt = 0;
800043b8:	30 08       	mov	r8,0
800043ba:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int data_cnt = 0;
800043be:	30 08       	mov	r8,0
800043c0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while((str_cnt < 200) && (data_cnt < 50)){
800043c4:	c4 68       	rjmp	80004450 <find_data+0xa8>
		if(str[str_cnt] == ','){
800043c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800043ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043ce:	f2 08 00 08 	add	r8,r9,r8
800043d2:	11 89       	ld.ub	r9,r8[0x0]
800043d4:	32 c8       	mov	r8,44
800043d6:	f0 09 18 00 	cp.b	r9,r8
800043da:	c2 b1       	brne	80004430 <find_data+0x88>
			str_cnt++;
800043dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043e0:	2f f8       	sub	r8,-1
800043e2:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// No Data
			if(str[str_cnt] == ',')
800043e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800043ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043ee:	f2 08 00 08 	add	r8,r9,r8
800043f2:	11 89       	ld.ub	r9,r8[0x0]
800043f4:	32 c8       	mov	r8,44
800043f6:	f0 09 18 00 	cp.b	r9,r8
800043fa:	c0 b1       	brne	80004410 <find_data+0x68>
				data_i[data_cnt] = -1;
800043fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004400:	a3 68       	lsl	r8,0x2
80004402:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004406:	f2 08 00 08 	add	r8,r9,r8
8000440a:	3f f9       	mov	r9,-1
8000440c:	91 09       	st.w	r8[0x0],r9
8000440e:	c0 b8       	rjmp	80004424 <find_data+0x7c>
			// Mark index
			else
				data_i[data_cnt] = str_cnt;
80004410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004414:	a3 68       	lsl	r8,0x2
80004416:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000441a:	f2 08 00 08 	add	r8,r9,r8
8000441e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004422:	91 09       	st.w	r8[0x0],r9
				
			data_cnt++;
80004424:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004428:	2f f8       	sub	r8,-1
8000442a:	ef 48 ff fc 	st.w	r7[-4],r8
8000442e:	c1 18       	rjmp	80004450 <find_data+0xa8>
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
80004430:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004438:	f2 08 00 08 	add	r8,r9,r8
8000443c:	11 89       	ld.ub	r9,r8[0x0]
8000443e:	30 d8       	mov	r8,13
80004440:	f0 09 18 00 	cp.b	r9,r8
80004444:	c1 30       	breq	8000446a <find_data+0xc2>
			return;
		
		else
			str_cnt++;
80004446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000444a:	2f f8       	sub	r8,-1
8000444c:	ef 48 ff f8 	st.w	r7[-8],r8
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
	unsigned int str_cnt = 0;
	unsigned int data_cnt = 0;
	
	while((str_cnt < 200) && (data_cnt < 50)){
80004450:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004454:	e0 48 00 c7 	cp.w	r8,199
80004458:	e0 8b 00 0a 	brhi	8000446c <find_data+0xc4>
8000445c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004460:	e0 48 00 31 	cp.w	r8,49
80004464:	fe 98 ff b1 	brls	800043c6 <find_data+0x1e>
80004468:	c0 28       	rjmp	8000446c <find_data+0xc4>
			data_cnt++;
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
			return;
8000446a:	d7 03       	nop
		
		else
			str_cnt++;
	}
8000446c:	2f cd       	sub	sp,-16
8000446e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004472:	d7 03       	nop

80004474 <st7529_D07_WRITE>:

// LCD OFFSETS
#define ST7529_XOFFSET	16
#define ST7529_YOFFSET	0

inline static void st7529_D07_WRITE(uint8_t data){
80004474:	eb cd 40 80 	pushm	r7,lr
80004478:	1a 97       	mov	r7,sp
8000447a:	20 1d       	sub	sp,4
8000447c:	18 98       	mov	r8,r12
8000447e:	ef 68 ff fc 	st.b	r7[-4],r8
    // Clear Old Values
    AVR32_GPIO_LOCAL.port[0].ovrc = ST7529_D07_PORTA_PINS;
80004482:	fc 18 40 00 	movh	r8,0x4000
80004486:	e0 69 17 09 	mov	r9,5897
8000448a:	ea 19 00 40 	orh	r9,0x40
8000448e:	f1 49 00 58 	st.w	r8[88],r9
    AVR32_GPIO_LOCAL.port[1].ovrc = ST7529_D07_PORTB_PINS;
80004492:	fc 18 40 00 	movh	r8,0x4000
80004496:	e0 69 10 00 	mov	r9,4096
8000449a:	f1 49 01 58 	st.w	r8[344],r9

    // Set Value
    AVR32_GPIO_LOCAL.port[0].ovrs = st7529_pin_map_lut[data].porta;
8000449e:	fc 18 40 00 	movh	r8,0x4000
800044a2:	ef 3a ff fc 	ld.ub	r10,r7[-4]
800044a6:	48 a9       	lddpc	r9,800044cc <st7529_D07_WRITE+0x58>
800044a8:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
800044ac:	f1 49 00 54 	st.w	r8[84],r9
    AVR32_GPIO_LOCAL.port[1].ovrs = st7529_pin_map_lut[data].portb;
800044b0:	fc 18 40 00 	movh	r8,0x4000
800044b4:	ef 3a ff fc 	ld.ub	r10,r7[-4]
800044b8:	48 59       	lddpc	r9,800044cc <st7529_D07_WRITE+0x58>
800044ba:	a1 7a       	lsl	r10,0x1
800044bc:	2f fa       	sub	r10,-1
800044be:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800044c2:	f1 49 01 54 	st.w	r8[340],r9
}
800044c6:	2f fd       	sub	sp,-4
800044c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800044cc:	80 00       	ld.sh	r0,r0[0x0]
800044ce:	bd 30       	mul	r0,lr

800044d0 <st7529_delay_write>:

/********* HELPER FUNCTIONS ***********/
#define st7529_delay_us(delay)      cpu_delay_us(delay, ST7529_FCPU)
#define st7529_delay_ms(delay)      cpu_delay_ms(delay, ST7529_FCPU)

inline static void st7529_delay_write(void){
800044d0:	eb cd 40 80 	pushm	r7,lr
800044d4:	1a 97       	mov	r7,sp
	asm volatile("nop");
800044d6:	d7 03       	nop
	asm volatile("nop");
800044d8:	d7 03       	nop
	asm volatile("nop");
800044da:	d7 03       	nop
	asm volatile("nop");
800044dc:	d7 03       	nop
}
800044de:	e3 cd 80 80 	ldm	sp++,r7,pc
800044e2:	d7 03       	nop

800044e4 <st7529_init>:
static inline void st7529_write_cmd(uint8_t);
static inline void st7529_write_data(uint8_t);
static inline uint8_t st7529_read_data(void);

// Initializes ST7529
void st7529_init(void){
800044e4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800044e8:	1a 97       	mov	r7,sp
800044ea:	fa cd 00 dc 	sub	sp,sp,220
800044ee:	30 28       	mov	r8,2
800044f0:	ef 48 ff 6c 	st.w	r7[-148],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800044f4:	fc 1b 40 00 	movh	r11,0x4000
800044f8:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800044fc:	f0 0a 16 05 	lsr	r10,r8,0x5
80004500:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80004504:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004508:	30 18       	mov	r8,1
8000450a:	f0 09 09 48 	lsl	r8,r8,r9
8000450e:	10 99       	mov	r9,r8
80004510:	f4 08 15 08 	lsl	r8,r10,0x8
80004514:	f6 08 00 08 	add	r8,r11,r8
80004518:	2b c8       	sub	r8,-68
8000451a:	91 09       	st.w	r8[0x0],r9
8000451c:	30 28       	mov	r8,2
8000451e:	ef 48 ff 70 	st.w	r7[-144],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004522:	fc 1b 40 00 	movh	r11,0x4000
80004526:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000452a:	f0 0a 16 05 	lsr	r10,r8,0x5
8000452e:	ee f8 ff 70 	ld.w	r8,r7[-144]
80004532:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004536:	30 18       	mov	r8,1
80004538:	f0 09 09 48 	lsl	r8,r8,r9
8000453c:	10 99       	mov	r9,r8
8000453e:	f4 08 15 08 	lsl	r8,r10,0x8
80004542:	f6 08 00 08 	add	r8,r11,r8
80004546:	2a 88       	sub	r8,-88
80004548:	91 09       	st.w	r8[0x0],r9
8000454a:	30 18       	mov	r8,1
8000454c:	ef 48 ff 74 	st.w	r7[-140],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004550:	fc 1b 40 00 	movh	r11,0x4000
80004554:	ee f8 ff 74 	ld.w	r8,r7[-140]
80004558:	f0 0a 16 05 	lsr	r10,r8,0x5
8000455c:	ee f8 ff 74 	ld.w	r8,r7[-140]
80004560:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004564:	30 18       	mov	r8,1
80004566:	f0 09 09 48 	lsl	r8,r8,r9
8000456a:	10 99       	mov	r9,r8
8000456c:	f4 08 15 08 	lsl	r8,r10,0x8
80004570:	f6 08 00 08 	add	r8,r11,r8
80004574:	2b c8       	sub	r8,-68
80004576:	91 09       	st.w	r8[0x0],r9
80004578:	30 18       	mov	r8,1
8000457a:	ef 48 ff 78 	st.w	r7[-136],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000457e:	fc 1b 40 00 	movh	r11,0x4000
80004582:	ee f8 ff 78 	ld.w	r8,r7[-136]
80004586:	f0 0a 16 05 	lsr	r10,r8,0x5
8000458a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000458e:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004592:	30 18       	mov	r8,1
80004594:	f0 09 09 48 	lsl	r8,r8,r9
80004598:	10 99       	mov	r9,r8
8000459a:	f4 08 15 08 	lsl	r8,r10,0x8
8000459e:	f6 08 00 08 	add	r8,r11,r8
800045a2:	2a c8       	sub	r8,-84
800045a4:	91 09       	st.w	r8[0x0],r9
800045a6:	31 28       	mov	r8,18
800045a8:	ef 48 ff 7c 	st.w	r7[-132],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800045ac:	fc 1b 40 00 	movh	r11,0x4000
800045b0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800045b4:	f0 0a 16 05 	lsr	r10,r8,0x5
800045b8:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800045bc:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800045c0:	30 18       	mov	r8,1
800045c2:	f0 09 09 48 	lsl	r8,r8,r9
800045c6:	10 99       	mov	r9,r8
800045c8:	f4 08 15 08 	lsl	r8,r10,0x8
800045cc:	f6 08 00 08 	add	r8,r11,r8
800045d0:	2b c8       	sub	r8,-68
800045d2:	91 09       	st.w	r8[0x0],r9
800045d4:	31 28       	mov	r8,18
800045d6:	ef 48 ff 80 	st.w	r7[-128],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800045da:	fc 1b 40 00 	movh	r11,0x4000
800045de:	ee f8 ff 80 	ld.w	r8,r7[-128]
800045e2:	f0 0a 16 05 	lsr	r10,r8,0x5
800045e6:	ee f8 ff 80 	ld.w	r8,r7[-128]
800045ea:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800045ee:	30 18       	mov	r8,1
800045f0:	f0 09 09 48 	lsl	r8,r8,r9
800045f4:	10 99       	mov	r9,r8
800045f6:	f4 08 15 08 	lsl	r8,r10,0x8
800045fa:	f6 08 00 08 	add	r8,r11,r8
800045fe:	2a c8       	sub	r8,-84
80004600:	91 09       	st.w	r8[0x0],r9
80004602:	30 58       	mov	r8,5
80004604:	ef 48 ff 84 	st.w	r7[-124],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004608:	fc 1b 40 00 	movh	r11,0x4000
8000460c:	ee f8 ff 84 	ld.w	r8,r7[-124]
80004610:	f0 0a 16 05 	lsr	r10,r8,0x5
80004614:	ee f8 ff 84 	ld.w	r8,r7[-124]
80004618:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000461c:	30 18       	mov	r8,1
8000461e:	f0 09 09 48 	lsl	r8,r8,r9
80004622:	10 99       	mov	r9,r8
80004624:	f4 08 15 08 	lsl	r8,r10,0x8
80004628:	f6 08 00 08 	add	r8,r11,r8
8000462c:	2b c8       	sub	r8,-68
8000462e:	91 09       	st.w	r8[0x0],r9
80004630:	30 58       	mov	r8,5
80004632:	ef 48 ff 88 	st.w	r7[-120],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004636:	fc 1b 40 00 	movh	r11,0x4000
8000463a:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000463e:	f0 0a 16 05 	lsr	r10,r8,0x5
80004642:	ee f8 ff 88 	ld.w	r8,r7[-120]
80004646:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000464a:	30 18       	mov	r8,1
8000464c:	f0 09 09 48 	lsl	r8,r8,r9
80004650:	10 99       	mov	r9,r8
80004652:	f4 08 15 08 	lsl	r8,r10,0x8
80004656:	f6 08 00 08 	add	r8,r11,r8
8000465a:	2a c8       	sub	r8,-84
8000465c:	91 09       	st.w	r8[0x0],r9
8000465e:	32 b8       	mov	r8,43
80004660:	ef 48 ff 8c 	st.w	r7[-116],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004664:	fc 1b 40 00 	movh	r11,0x4000
80004668:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000466c:	f0 0a 16 05 	lsr	r10,r8,0x5
80004670:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004674:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004678:	30 18       	mov	r8,1
8000467a:	f0 09 09 48 	lsl	r8,r8,r9
8000467e:	10 99       	mov	r9,r8
80004680:	f4 08 15 08 	lsl	r8,r10,0x8
80004684:	f6 08 00 08 	add	r8,r11,r8
80004688:	2b c8       	sub	r8,-68
8000468a:	91 09       	st.w	r8[0x0],r9
8000468c:	32 b8       	mov	r8,43
8000468e:	ef 48 ff 90 	st.w	r7[-112],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004692:	fc 1b 40 00 	movh	r11,0x4000
80004696:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000469a:	f0 0a 16 05 	lsr	r10,r8,0x5
8000469e:	ee f8 ff 90 	ld.w	r8,r7[-112]
800046a2:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800046a6:	30 18       	mov	r8,1
800046a8:	f0 09 09 48 	lsl	r8,r8,r9
800046ac:	10 99       	mov	r9,r8
800046ae:	f4 08 15 08 	lsl	r8,r10,0x8
800046b2:	f6 08 00 08 	add	r8,r11,r8
800046b6:	2a c8       	sub	r8,-84
800046b8:	91 09       	st.w	r8[0x0],r9
    st7529_RD_DIR_OUT();
    st7529_RD_SET();
    st7529_WR_DIR_OUT();
    st7529_WR_SET();

    st7529_D07_DIR_OUT();   // Idles as output
800046ba:	fc 18 40 00 	movh	r8,0x4000
800046be:	e0 69 17 09 	mov	r9,5897
800046c2:	ea 19 00 40 	orh	r9,0x40
800046c6:	f1 49 00 44 	st.w	r8[68],r9
800046ca:	fc 18 40 00 	movh	r8,0x4000
800046ce:	e0 69 10 00 	mov	r9,4096
800046d2:	f1 49 01 44 	st.w	r8[324],r9
800046d6:	30 18       	mov	r8,1
800046d8:	ef 48 ff 94 	st.w	r7[-108],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800046dc:	fc 1b 40 00 	movh	r11,0x4000
800046e0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800046e4:	f0 0a 16 05 	lsr	r10,r8,0x5
800046e8:	ee f8 ff 94 	ld.w	r8,r7[-108]
800046ec:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800046f0:	30 18       	mov	r8,1
800046f2:	f0 09 09 48 	lsl	r8,r8,r9
800046f6:	10 99       	mov	r9,r8
800046f8:	f4 08 15 08 	lsl	r8,r10,0x8
800046fc:	f6 08 00 08 	add	r8,r11,r8
80004700:	2a 88       	sub	r8,-88
80004702:	91 09       	st.w	r8[0x0],r9
80004704:	30 18       	mov	r8,1
80004706:	ef 48 ff 9c 	st.w	r7[-100],r8
8000470a:	e0 68 78 40 	mov	r8,30784
8000470e:	ea 18 01 7d 	orh	r8,0x17d
80004712:	ef 48 ff 98 	st.w	r7[-104],r8
80004716:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000471a:	ef 48 ff a4 	st.w	r7[-92],r8
8000471e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004722:	ef 48 ff a0 	st.w	r7[-96],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004726:	ee fc ff a4 	ld.w	r12,r7[-92]
8000472a:	ef 4c ff 30 	st.w	r7[-208],r12
8000472e:	30 0b       	mov	r11,0
80004730:	ef 4b ff 2c 	st.w	r7[-212],r11
80004734:	ee f9 ff a0 	ld.w	r9,r7[-96]
80004738:	ef 49 ff 28 	st.w	r7[-216],r9
8000473c:	30 08       	mov	r8,0
8000473e:	ef 48 ff 24 	st.w	r7[-220],r8
80004742:	ee fa ff 2c 	ld.w	r10,r7[-212]
80004746:	ee fc ff 28 	ld.w	r12,r7[-216]
8000474a:	b9 3a       	mul	r10,r12
8000474c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004750:	ee fb ff 30 	ld.w	r11,r7[-208]
80004754:	b7 38       	mul	r8,r11
80004756:	10 0a       	add	r10,r8
80004758:	ee fc ff 30 	ld.w	r12,r7[-208]
8000475c:	ee fb ff 28 	ld.w	r11,r7[-216]
80004760:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004764:	12 0a       	add	r10,r9
80004766:	14 99       	mov	r9,r10
80004768:	e0 6a 03 e7 	mov	r10,999
8000476c:	30 0b       	mov	r11,0
8000476e:	f0 0a 00 0a 	add	r10,r8,r10
80004772:	f2 0b 00 4b 	adc	r11,r9,r11
80004776:	e0 68 03 e8 	mov	r8,1000
8000477a:	30 09       	mov	r9,0
8000477c:	f0 1f 01 3a 	mcall	80004c64 <st7529_init+0x780>
80004780:	14 98       	mov	r8,r10
80004782:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004784:	ef 48 ff ac 	st.w	r7[-84],r8
80004788:	ee c8 00 bc 	sub	r8,r7,188
8000478c:	ef 48 ff a8 	st.w	r7[-88],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004790:	e1 b8 00 42 	mfsr	r8,0x108
80004794:	10 99       	mov	r9,r8
80004796:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000479a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000479c:	ee f8 ff a8 	ld.w	r8,r7[-88]
800047a0:	70 09       	ld.w	r9,r8[0x0]
800047a2:	ee f8 ff ac 	ld.w	r8,r7[-84]
800047a6:	10 09       	add	r9,r8
800047a8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800047ac:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800047ae:	ee f9 ff a8 	ld.w	r9,r7[-88]
800047b2:	30 08       	mov	r8,0
800047b4:	f3 68 00 08 	st.b	r9[8],r8
800047b8:	ee c8 00 bc 	sub	r8,r7,188
800047bc:	ef 48 ff b0 	st.w	r7[-80],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800047c0:	e1 b8 00 42 	mfsr	r8,0x108
800047c4:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800047c8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800047cc:	f1 39 00 08 	ld.ub	r9,r8[8]
800047d0:	30 28       	mov	r8,2
800047d2:	f0 09 18 00 	cp.b	r9,r8
800047d6:	c0 31       	brne	800047dc <st7529_init+0x2f8>
    return false;
800047d8:	30 08       	mov	r8,0
800047da:	c4 38       	rjmp	80004860 <st7529_init+0x37c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800047dc:	ee f8 ff b0 	ld.w	r8,r7[-80]
800047e0:	f1 39 00 08 	ld.ub	r9,r8[8]
800047e4:	30 18       	mov	r8,1
800047e6:	f0 09 18 00 	cp.b	r9,r8
800047ea:	c0 31       	brne	800047f0 <st7529_init+0x30c>
    return true;
800047ec:	30 18       	mov	r8,1
800047ee:	c3 98       	rjmp	80004860 <st7529_init+0x37c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800047f0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800047f4:	70 09       	ld.w	r9,r8[0x0]
800047f6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800047fa:	70 18       	ld.w	r8,r8[0x4]
800047fc:	10 39       	cp.w	r9,r8
800047fe:	e0 88 00 1a 	brls	80004832 <st7529_init+0x34e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004802:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004806:	70 08       	ld.w	r8,r8[0x0]
80004808:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000480c:	10 39       	cp.w	r9,r8
8000480e:	c1 02       	brcc	8000482e <st7529_init+0x34a>
80004810:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004814:	70 18       	ld.w	r8,r8[0x4]
80004816:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000481a:	10 39       	cp.w	r9,r8
8000481c:	e0 88 00 09 	brls	8000482e <st7529_init+0x34a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004820:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004824:	30 18       	mov	r8,1
80004826:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000482a:	30 18       	mov	r8,1
8000482c:	c1 a8       	rjmp	80004860 <st7529_init+0x37c>
    }
    return false;
8000482e:	30 08       	mov	r8,0
80004830:	c1 88       	rjmp	80004860 <st7529_init+0x37c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004832:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004836:	70 08       	ld.w	r8,r8[0x0]
80004838:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000483c:	10 39       	cp.w	r9,r8
8000483e:	c0 93       	brcs	80004850 <st7529_init+0x36c>
80004840:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004844:	70 18       	ld.w	r8,r8[0x4]
80004846:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000484a:	10 39       	cp.w	r9,r8
8000484c:	e0 88 00 09 	brls	8000485e <st7529_init+0x37a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004850:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004854:	30 18       	mov	r8,1
80004856:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000485a:	30 18       	mov	r8,1
8000485c:	c0 28       	rjmp	80004860 <st7529_init+0x37c>
    }
    return false;
8000485e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004860:	58 08       	cp.w	r8,0
80004862:	ca b0       	breq	800047b8 <st7529_init+0x2d4>
80004864:	30 28       	mov	r8,2
80004866:	ef 48 ff b8 	st.w	r7[-72],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000486a:	fc 1a 40 00 	movh	r10,0x4000
8000486e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80004872:	a5 98       	lsr	r8,0x5
80004874:	ee f9 ff b8 	ld.w	r9,r7[-72]
80004878:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000487c:	30 1b       	mov	r11,1
8000487e:	f6 09 09 49 	lsl	r9,r11,r9
80004882:	a9 68       	lsl	r8,0x8
80004884:	f4 08 00 08 	add	r8,r10,r8
80004888:	2a c8       	sub	r8,-84
8000488a:	91 09       	st.w	r8[0x0],r9
8000488c:	30 a8       	mov	r8,10
8000488e:	ef 48 ff c0 	st.w	r7[-64],r8
80004892:	e0 68 78 40 	mov	r8,30784
80004896:	ea 18 01 7d 	orh	r8,0x17d
8000489a:	ef 48 ff bc 	st.w	r7[-68],r8
8000489e:	ee f8 ff c0 	ld.w	r8,r7[-64]
800048a2:	ef 48 ff c8 	st.w	r7[-56],r8
800048a6:	ee f8 ff bc 	ld.w	r8,r7[-68]
800048aa:	ef 48 ff c4 	st.w	r7[-60],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800048ae:	ee f9 ff c8 	ld.w	r9,r7[-56]
800048b2:	ef 49 ff 40 	st.w	r7[-192],r9
800048b6:	30 08       	mov	r8,0
800048b8:	ef 48 ff 3c 	st.w	r7[-196],r8
800048bc:	ee fc ff c4 	ld.w	r12,r7[-60]
800048c0:	ef 4c ff 38 	st.w	r7[-200],r12
800048c4:	30 0b       	mov	r11,0
800048c6:	ef 4b ff 34 	st.w	r7[-204],r11
800048ca:	ee fa ff 3c 	ld.w	r10,r7[-196]
800048ce:	ee f9 ff 38 	ld.w	r9,r7[-200]
800048d2:	b3 3a       	mul	r10,r9
800048d4:	ee f8 ff 34 	ld.w	r8,r7[-204]
800048d8:	ee fc ff 40 	ld.w	r12,r7[-192]
800048dc:	b9 38       	mul	r8,r12
800048de:	10 0a       	add	r10,r8
800048e0:	ee fb ff 40 	ld.w	r11,r7[-192]
800048e4:	ee fc ff 38 	ld.w	r12,r7[-200]
800048e8:	f6 0c 06 48 	mulu.d	r8,r11,r12
800048ec:	12 0a       	add	r10,r9
800048ee:	14 99       	mov	r9,r10
800048f0:	e0 6a 03 e7 	mov	r10,999
800048f4:	30 0b       	mov	r11,0
800048f6:	f0 0a 00 0a 	add	r10,r8,r10
800048fa:	f2 0b 00 4b 	adc	r11,r9,r11
800048fe:	e0 68 03 e8 	mov	r8,1000
80004902:	30 09       	mov	r9,0
80004904:	f0 1f 00 d8 	mcall	80004c64 <st7529_init+0x780>
80004908:	14 98       	mov	r8,r10
8000490a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000490c:	ef 48 ff d0 	st.w	r7[-48],r8
80004910:	ee c8 00 b0 	sub	r8,r7,176
80004914:	ef 48 ff cc 	st.w	r7[-52],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004918:	e1 b8 00 42 	mfsr	r8,0x108
8000491c:	10 99       	mov	r9,r8
8000491e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004922:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004924:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004928:	70 09       	ld.w	r9,r8[0x0]
8000492a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000492e:	10 09       	add	r9,r8
80004930:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004934:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004936:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000493a:	30 08       	mov	r8,0
8000493c:	f3 68 00 08 	st.b	r9[8],r8
80004940:	ee c8 00 b0 	sub	r8,r7,176
80004944:	ef 48 ff d4 	st.w	r7[-44],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004948:	e1 b8 00 42 	mfsr	r8,0x108
8000494c:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004950:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004954:	f1 39 00 08 	ld.ub	r9,r8[8]
80004958:	30 28       	mov	r8,2
8000495a:	f0 09 18 00 	cp.b	r9,r8
8000495e:	c0 31       	brne	80004964 <st7529_init+0x480>
    return false;
80004960:	30 08       	mov	r8,0
80004962:	c4 38       	rjmp	800049e8 <st7529_init+0x504>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004964:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004968:	f1 39 00 08 	ld.ub	r9,r8[8]
8000496c:	30 18       	mov	r8,1
8000496e:	f0 09 18 00 	cp.b	r9,r8
80004972:	c0 31       	brne	80004978 <st7529_init+0x494>
    return true;
80004974:	30 18       	mov	r8,1
80004976:	c3 98       	rjmp	800049e8 <st7529_init+0x504>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004978:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000497c:	70 09       	ld.w	r9,r8[0x0]
8000497e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004982:	70 18       	ld.w	r8,r8[0x4]
80004984:	10 39       	cp.w	r9,r8
80004986:	e0 88 00 1a 	brls	800049ba <st7529_init+0x4d6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000498a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000498e:	70 08       	ld.w	r8,r8[0x0]
80004990:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004994:	10 39       	cp.w	r9,r8
80004996:	c1 02       	brcc	800049b6 <st7529_init+0x4d2>
80004998:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000499c:	70 18       	ld.w	r8,r8[0x4]
8000499e:	ee f9 ff d8 	ld.w	r9,r7[-40]
800049a2:	10 39       	cp.w	r9,r8
800049a4:	e0 88 00 09 	brls	800049b6 <st7529_init+0x4d2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800049a8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800049ac:	30 18       	mov	r8,1
800049ae:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800049b2:	30 18       	mov	r8,1
800049b4:	c1 a8       	rjmp	800049e8 <st7529_init+0x504>
    }
    return false;
800049b6:	30 08       	mov	r8,0
800049b8:	c1 88       	rjmp	800049e8 <st7529_init+0x504>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800049ba:	ee f8 ff d4 	ld.w	r8,r7[-44]
800049be:	70 08       	ld.w	r8,r8[0x0]
800049c0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800049c4:	10 39       	cp.w	r9,r8
800049c6:	c0 93       	brcs	800049d8 <st7529_init+0x4f4>
800049c8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800049cc:	70 18       	ld.w	r8,r8[0x4]
800049ce:	ee f9 ff d8 	ld.w	r9,r7[-40]
800049d2:	10 39       	cp.w	r9,r8
800049d4:	e0 88 00 09 	brls	800049e6 <st7529_init+0x502>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800049d8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800049dc:	30 18       	mov	r8,1
800049de:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800049e2:	30 18       	mov	r8,1
800049e4:	c0 28       	rjmp	800049e8 <st7529_init+0x504>
    }
    return false;
800049e6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800049e8:	58 08       	cp.w	r8,0
800049ea:	ca b0       	breq	80004940 <st7529_init+0x45c>
	st7529_delay_ms(1);
	
    st7529_RST_SET();       // Release reset
	st7529_delay_ms(10);
	
    st7529_write_cmd(ST7529_EXTIN);
800049ec:	33 0c       	mov	r12,48
800049ee:	f0 1f 00 9f 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_cmd(ST7529_SLPOUT);
800049f2:	e0 6c 00 94 	mov	r12,148
800049f6:	f0 1f 00 9d 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_cmd(ST7529_OSCON);
800049fa:	e0 6c 00 d1 	mov	r12,209
800049fe:	f0 1f 00 9b 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_cmd(ST7529_PWRCTRL);
80004a02:	32 0c       	mov	r12,32
80004a04:	f0 1f 00 99 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_BOOSTER);  // Booster First
80004a08:	30 8c       	mov	r12,8
80004a0a:	f0 1f 00 99 	mcall	80004c6c <st7529_init+0x788>
80004a0e:	36 48       	mov	r8,100
80004a10:	ef 48 ff e0 	st.w	r7[-32],r8
80004a14:	e0 68 78 40 	mov	r8,30784
80004a18:	ea 18 01 7d 	orh	r8,0x17d
80004a1c:	ef 48 ff dc 	st.w	r7[-36],r8
80004a20:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004a24:	ef 48 ff e8 	st.w	r7[-24],r8
80004a28:	ee f8 ff dc 	ld.w	r8,r7[-36]
80004a2c:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004a30:	ee f0 ff e8 	ld.w	r0,r7[-24]
80004a34:	30 01       	mov	r1,0
80004a36:	ee f2 ff e4 	ld.w	r2,r7[-28]
80004a3a:	30 03       	mov	r3,0
80004a3c:	e2 02 02 4a 	mul	r10,r1,r2
80004a40:	e6 00 02 48 	mul	r8,r3,r0
80004a44:	10 0a       	add	r10,r8
80004a46:	e0 02 06 48 	mulu.d	r8,r0,r2
80004a4a:	12 0a       	add	r10,r9
80004a4c:	14 99       	mov	r9,r10
80004a4e:	e0 6a 03 e7 	mov	r10,999
80004a52:	30 0b       	mov	r11,0
80004a54:	f0 0a 00 0a 	add	r10,r8,r10
80004a58:	f2 0b 00 4b 	adc	r11,r9,r11
80004a5c:	e0 68 03 e8 	mov	r8,1000
80004a60:	30 09       	mov	r9,0
80004a62:	f0 1f 00 81 	mcall	80004c64 <st7529_init+0x780>
80004a66:	14 98       	mov	r8,r10
80004a68:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004a6a:	ef 48 ff f0 	st.w	r7[-16],r8
80004a6e:	ee c8 00 a4 	sub	r8,r7,164
80004a72:	ef 48 ff ec 	st.w	r7[-20],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004a76:	e1 b8 00 42 	mfsr	r8,0x108
80004a7a:	10 99       	mov	r9,r8
80004a7c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004a80:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004a82:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004a86:	70 09       	ld.w	r9,r8[0x0]
80004a88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a8c:	10 09       	add	r9,r8
80004a8e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004a92:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004a94:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004a98:	30 08       	mov	r8,0
80004a9a:	f3 68 00 08 	st.b	r9[8],r8
80004a9e:	ee c8 00 a4 	sub	r8,r7,164
80004aa2:	ef 48 ff f4 	st.w	r7[-12],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004aa6:	e1 b8 00 42 	mfsr	r8,0x108
80004aaa:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004aae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ab2:	f1 39 00 08 	ld.ub	r9,r8[8]
80004ab6:	30 28       	mov	r8,2
80004ab8:	f0 09 18 00 	cp.b	r9,r8
80004abc:	c0 31       	brne	80004ac2 <st7529_init+0x5de>
    return false;
80004abe:	30 08       	mov	r8,0
80004ac0:	c4 38       	rjmp	80004b46 <st7529_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004ac2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ac6:	f1 39 00 08 	ld.ub	r9,r8[8]
80004aca:	30 18       	mov	r8,1
80004acc:	f0 09 18 00 	cp.b	r9,r8
80004ad0:	c0 31       	brne	80004ad6 <st7529_init+0x5f2>
    return true;
80004ad2:	30 18       	mov	r8,1
80004ad4:	c3 98       	rjmp	80004b46 <st7529_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004ad6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ada:	70 09       	ld.w	r9,r8[0x0]
80004adc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ae0:	70 18       	ld.w	r8,r8[0x4]
80004ae2:	10 39       	cp.w	r9,r8
80004ae4:	e0 88 00 1a 	brls	80004b18 <st7529_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004ae8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004aec:	70 08       	ld.w	r8,r8[0x0]
80004aee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004af2:	10 39       	cp.w	r9,r8
80004af4:	c1 02       	brcc	80004b14 <st7529_init+0x630>
80004af6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004afa:	70 18       	ld.w	r8,r8[0x4]
80004afc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b00:	10 39       	cp.w	r9,r8
80004b02:	e0 88 00 09 	brls	80004b14 <st7529_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004b06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004b0a:	30 18       	mov	r8,1
80004b0c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004b10:	30 18       	mov	r8,1
80004b12:	c1 a8       	rjmp	80004b46 <st7529_init+0x662>
    }
    return false;
80004b14:	30 08       	mov	r8,0
80004b16:	c1 88       	rjmp	80004b46 <st7529_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004b18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b1c:	70 08       	ld.w	r8,r8[0x0]
80004b1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b22:	10 39       	cp.w	r9,r8
80004b24:	c0 93       	brcs	80004b36 <st7529_init+0x652>
80004b26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b2a:	70 18       	ld.w	r8,r8[0x4]
80004b2c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004b30:	10 39       	cp.w	r9,r8
80004b32:	e0 88 00 09 	brls	80004b44 <st7529_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004b36:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004b3a:	30 18       	mov	r8,1
80004b3c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004b40:	30 18       	mov	r8,1
80004b42:	c0 28       	rjmp	80004b46 <st7529_init+0x662>
    }
    return false;
80004b44:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004b46:	58 08       	cp.w	r8,0
80004b48:	ca b0       	breq	80004a9e <st7529_init+0x5ba>
	st7529_delay_ms(100);
    st7529_write_cmd(ST7529_PWRCTRL);
80004b4a:	32 0c       	mov	r12,32
80004b4c:	f0 1f 00 47 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_PARAM0);
80004b50:	30 bc       	mov	r12,11
80004b52:	f0 1f 00 47 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_VOLCTRL);
80004b56:	e0 6c 00 81 	mov	r12,129
80004b5a:	f0 1f 00 44 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_VOLCTRL_PARAM0);
80004b5e:	32 ac       	mov	r12,42
80004b60:	f0 1f 00 43 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_VOLCTRL_PARAM1);
80004b64:	30 4c       	mov	r12,4
80004b66:	f0 1f 00 42 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISCTRL);
80004b6a:	e0 6c 00 ca 	mov	r12,202
80004b6e:	f0 1f 00 3f 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_DISCTRL_PARAM0);
80004b72:	30 0c       	mov	r12,0
80004b74:	f0 1f 00 3e 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM1);
80004b78:	32 3c       	mov	r12,35
80004b7a:	f0 1f 00 3d 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM2);
80004b7e:	30 0c       	mov	r12,0
80004b80:	f0 1f 00 3b 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISINV);
80004b84:	e0 6c 00 a7 	mov	r12,167
80004b88:	f0 1f 00 38 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_cmd(ST7529_COMSCN);
80004b8c:	e0 6c 00 bb 	mov	r12,187
80004b90:	f0 1f 00 36 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_COMSCN_PARAM0);
80004b94:	30 2c       	mov	r12,2
80004b96:	f0 1f 00 36 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_DATSDR);
80004b9a:	e0 6c 00 bc 	mov	r12,188
80004b9e:	f0 1f 00 33 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_DATSDR_PARAM0);
80004ba2:	30 4c       	mov	r12,4
80004ba4:	f0 1f 00 32 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM1);
80004ba8:	30 0c       	mov	r12,0
80004baa:	f0 1f 00 31 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM2);
80004bae:	30 2c       	mov	r12,2
80004bb0:	f0 1f 00 2f 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_LASET);
80004bb4:	37 5c       	mov	r12,117
80004bb6:	f0 1f 00 2d 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_LASET_PARAM0);
80004bba:	30 0c       	mov	r12,0
80004bbc:	f0 1f 00 2c 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_LASET_PARAM1);
80004bc0:	e0 6c 00 9f 	mov	r12,159
80004bc4:	f0 1f 00 2a 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_CASET);
80004bc8:	31 5c       	mov	r12,21
80004bca:	f0 1f 00 28 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_CASET_PARAM0);
80004bce:	30 0c       	mov	r12,0
80004bd0:	f0 1f 00 27 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_CASET_PARAM1);
80004bd4:	35 4c       	mov	r12,84
80004bd6:	f0 1f 00 26 	mcall	80004c6c <st7529_init+0x788>

    st7529_write_cmd(ST7529_EXTOUT);
80004bda:	33 1c       	mov	r12,49
80004bdc:	f0 1f 00 23 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_cmd(ST7529_ANASET);
80004be0:	33 2c       	mov	r12,50
80004be2:	f0 1f 00 22 	mcall	80004c68 <st7529_init+0x784>
    st7529_write_data(ST7529_ANASET_PARAM0);
80004be6:	30 1c       	mov	r12,1
80004be8:	f0 1f 00 21 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM1);
80004bec:	30 0c       	mov	r12,0
80004bee:	f0 1f 00 20 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM2);
80004bf2:	30 2c       	mov	r12,2
80004bf4:	f0 1f 00 1e 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_SWINT);
80004bf8:	33 4c       	mov	r12,52
80004bfa:	f0 1f 00 1c 	mcall	80004c68 <st7529_init+0x784>

    st7529_write_cmd(ST7529_EXTIN);
80004bfe:	33 0c       	mov	r12,48
80004c00:	f0 1f 00 1a 	mcall	80004c68 <st7529_init+0x784>
	
	st7529_write_cmd(ST7529_RAMWR);
80004c04:	35 cc       	mov	r12,92
80004c06:	f0 1f 00 19 	mcall	80004c68 <st7529_init+0x784>
	
	// Clear Display
	for(int i=0; i<41000; i++){
80004c0a:	30 08       	mov	r8,0
80004c0c:	ef 48 ff 68 	st.w	r7[-152],r8
80004c10:	c0 98       	rjmp	80004c22 <st7529_init+0x73e>
		st7529_write_data(0x00);
80004c12:	30 0c       	mov	r12,0
80004c14:	f0 1f 00 16 	mcall	80004c6c <st7529_init+0x788>
    st7529_write_cmd(ST7529_EXTIN);
	
	st7529_write_cmd(ST7529_RAMWR);
	
	// Clear Display
	for(int i=0; i<41000; i++){
80004c18:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004c1c:	2f f8       	sub	r8,-1
80004c1e:	ef 48 ff 68 	st.w	r7[-152],r8
80004c22:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004c26:	e0 48 a0 27 	cp.w	r8,40999
80004c2a:	fe 9a ff f4 	brle	80004c12 <st7529_init+0x72e>
		st7529_write_data(0x00);
	}
	
	st7529_write_cmd(ST7529_DISON);
80004c2e:	e0 6c 00 af 	mov	r12,175
80004c32:	f0 1f 00 0e 	mcall	80004c68 <st7529_init+0x784>
80004c36:	30 18       	mov	r8,1
80004c38:	ef 48 ff fc 	st.w	r7[-4],r8
80004c3c:	fc 1a 40 00 	movh	r10,0x4000
80004c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c44:	a5 98       	lsr	r8,0x5
80004c46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004c4a:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004c4e:	30 1b       	mov	r11,1
80004c50:	f6 09 09 49 	lsl	r9,r11,r9
80004c54:	a9 68       	lsl	r8,0x8
80004c56:	f4 08 00 08 	add	r8,r10,r8
80004c5a:	2a c8       	sub	r8,-84
80004c5c:	91 09       	st.w	r8[0x0],r9
	
    st7529_CS_SET();
}
80004c5e:	2c 9d       	sub	sp,-220
80004c60:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004c64:	80 00       	ld.sh	r0,r0[0x0]
80004c66:	5e fe       	retal	-1
80004c68:	80 00       	ld.sh	r0,r0[0x0]
80004c6a:	4c 70       	lddpc	r0,80004d84 <st7529_write_data+0x44>
80004c6c:	80 00       	ld.sh	r0,r0[0x0]
80004c6e:	4d 40       	lddpc	r0,80004dbc <st7529_write_data+0x7c>

80004c70 <st7529_write_cmd>:

static inline void st7529_write_cmd(uint8_t data){
80004c70:	eb cd 40 80 	pushm	r7,lr
80004c74:	1a 97       	mov	r7,sp
80004c76:	20 5d       	sub	sp,20
80004c78:	18 98       	mov	r8,r12
80004c7a:	ef 68 ff ec 	st.b	r7[-20],r8
80004c7e:	31 28       	mov	r8,18
80004c80:	ef 48 ff f0 	st.w	r7[-16],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004c84:	fc 1a 40 00 	movh	r10,0x4000
80004c88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c8c:	a5 98       	lsr	r8,0x5
80004c8e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004c92:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004c96:	30 1b       	mov	r11,1
80004c98:	f6 09 09 49 	lsl	r9,r11,r9
80004c9c:	a9 68       	lsl	r8,0x8
80004c9e:	f4 08 00 08 	add	r8,r10,r8
80004ca2:	2a 88       	sub	r8,-88
80004ca4:	91 09       	st.w	r8[0x0],r9
80004ca6:	32 b8       	mov	r8,43
80004ca8:	ef 48 ff f4 	st.w	r7[-12],r8
80004cac:	fc 1a 40 00 	movh	r10,0x4000
80004cb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004cb4:	a5 98       	lsr	r8,0x5
80004cb6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004cba:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004cbe:	30 1b       	mov	r11,1
80004cc0:	f6 09 09 49 	lsl	r9,r11,r9
80004cc4:	a9 68       	lsl	r8,0x8
80004cc6:	f4 08 00 08 	add	r8,r10,r8
80004cca:	2a 88       	sub	r8,-88
80004ccc:	91 09       	st.w	r8[0x0],r9
    st7529_A0_CLR();
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
80004cce:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80004cd2:	10 9c       	mov	r12,r8
80004cd4:	f0 1f 00 19 	mcall	80004d38 <st7529_write_cmd+0xc8>
	
	st7529_delay_write();
80004cd8:	f0 1f 00 19 	mcall	80004d3c <st7529_write_cmd+0xcc>
80004cdc:	32 b8       	mov	r8,43
80004cde:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004ce2:	fc 1a 40 00 	movh	r10,0x4000
80004ce6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cea:	a5 98       	lsr	r8,0x5
80004cec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004cf0:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004cf4:	30 1b       	mov	r11,1
80004cf6:	f6 09 09 49 	lsl	r9,r11,r9
80004cfa:	a9 68       	lsl	r8,0x8
80004cfc:	f4 08 00 08 	add	r8,r10,r8
80004d00:	2a c8       	sub	r8,-84
80004d02:	91 09       	st.w	r8[0x0],r9
80004d04:	31 28       	mov	r8,18
80004d06:	ef 48 ff fc 	st.w	r7[-4],r8
80004d0a:	fc 1a 40 00 	movh	r10,0x4000
80004d0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d12:	a5 98       	lsr	r8,0x5
80004d14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d18:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004d1c:	30 1b       	mov	r11,1
80004d1e:	f6 09 09 49 	lsl	r9,r11,r9
80004d22:	a9 68       	lsl	r8,0x8
80004d24:	f4 08 00 08 	add	r8,r10,r8
80004d28:	2a c8       	sub	r8,-84
80004d2a:	91 09       	st.w	r8[0x0],r9
	
    st7529_WR_SET();
    st7529_A0_SET();
	
	st7529_delay_write();
80004d2c:	f0 1f 00 04 	mcall	80004d3c <st7529_write_cmd+0xcc>
}
80004d30:	2f bd       	sub	sp,-20
80004d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d36:	00 00       	add	r0,r0
80004d38:	80 00       	ld.sh	r0,r0[0x0]
80004d3a:	44 74       	lddsp	r4,sp[0x11c]
80004d3c:	80 00       	ld.sh	r0,r0[0x0]
80004d3e:	44 d0       	lddsp	r0,sp[0x134]

80004d40 <st7529_write_data>:

static inline void st7529_write_data(uint8_t data){
80004d40:	eb cd 40 80 	pushm	r7,lr
80004d44:	1a 97       	mov	r7,sp
80004d46:	20 3d       	sub	sp,12
80004d48:	18 98       	mov	r8,r12
80004d4a:	ef 68 ff f4 	st.b	r7[-12],r8
80004d4e:	32 b8       	mov	r8,43
80004d50:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004d54:	fc 1a 40 00 	movh	r10,0x4000
80004d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d5c:	a5 98       	lsr	r8,0x5
80004d5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d62:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004d66:	30 1b       	mov	r11,1
80004d68:	f6 09 09 49 	lsl	r9,r11,r9
80004d6c:	a9 68       	lsl	r8,0x8
80004d6e:	f4 08 00 08 	add	r8,r10,r8
80004d72:	2a 88       	sub	r8,-88
80004d74:	91 09       	st.w	r8[0x0],r9
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
80004d76:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004d7a:	10 9c       	mov	r12,r8
80004d7c:	f0 1f 00 0f 	mcall	80004db8 <st7529_write_data+0x78>
	
	st7529_delay_write();
80004d80:	f0 1f 00 0f 	mcall	80004dbc <st7529_write_data+0x7c>
80004d84:	32 b8       	mov	r8,43
80004d86:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004d8a:	fc 1a 40 00 	movh	r10,0x4000
80004d8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d92:	a5 98       	lsr	r8,0x5
80004d94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d98:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004d9c:	30 1b       	mov	r11,1
80004d9e:	f6 09 09 49 	lsl	r9,r11,r9
80004da2:	a9 68       	lsl	r8,0x8
80004da4:	f4 08 00 08 	add	r8,r10,r8
80004da8:	2a c8       	sub	r8,-84
80004daa:	91 09       	st.w	r8[0x0],r9

    st7529_WR_SET(); 
	
	st7529_delay_write();
80004dac:	f0 1f 00 04 	mcall	80004dbc <st7529_write_data+0x7c>
}
80004db0:	2f dd       	sub	sp,-12
80004db2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004db6:	00 00       	add	r0,r0
80004db8:	80 00       	ld.sh	r0,r0[0x0]
80004dba:	44 74       	lddsp	r4,sp[0x11c]
80004dbc:	80 00       	ld.sh	r0,r0[0x0]
80004dbe:	44 d0       	lddsp	r0,sp[0x134]

80004dc0 <st7529_put_5x7_text>:
// len: length of character string (not including null termination)
// NOTES:
// To avoid reads, this function assumes two rows of cleared pixels above
// each character.

void st7529_put_5x7_text(uint8_t x, uint8_t y, char *str, uint32_t len){
80004dc0:	eb cd 40 80 	pushm	r7,lr
80004dc4:	1a 97       	mov	r7,sp
80004dc6:	20 ad       	sub	sp,40
80004dc8:	16 98       	mov	r8,r11
80004dca:	ef 4a ff dc 	st.w	r7[-36],r10
80004dce:	ef 49 ff d8 	st.w	r7[-40],r9
80004dd2:	18 99       	mov	r9,r12
80004dd4:	ef 69 ff e4 	st.b	r7[-28],r9
80004dd8:	ef 68 ff e0 	st.b	r7[-32],r8
80004ddc:	30 18       	mov	r8,1
80004dde:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004de2:	fc 1a 40 00 	movh	r10,0x4000
80004de6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004dea:	a5 98       	lsr	r8,0x5
80004dec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004df0:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004df4:	30 1b       	mov	r11,1
80004df6:	f6 09 09 49 	lsl	r9,r11,r9
80004dfa:	a9 68       	lsl	r8,0x8
80004dfc:	f4 08 00 08 	add	r8,r10,r8
80004e00:	2a 88       	sub	r8,-88
80004e02:	91 09       	st.w	r8[0x0],r9

    st7529_CS_CLR();
	
	x = x + ST7529_XOFFSET;
80004e04:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80004e08:	2f 08       	sub	r8,-16
80004e0a:	ef 68 ff e4 	st.b	r7[-28],r8
	y = y + ST7529_YOFFSET;
	
    // Set Start and End Lines/Columns
    uint32_t end_line = x+6*len-1;
80004e0e:	ef 3a ff e4 	ld.ub	r10,r7[-28]
80004e12:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004e16:	12 98       	mov	r8,r9
80004e18:	a1 78       	lsl	r8,0x1
80004e1a:	12 08       	add	r8,r9
80004e1c:	a1 78       	lsl	r8,0x1
80004e1e:	f4 08 00 08 	add	r8,r10,r8
80004e22:	20 18       	sub	r8,1
80004e24:	ef 48 ff e8 	st.w	r7[-24],r8
    uint32_t end_col = y/3+2;
80004e28:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80004e2c:	e0 68 aa ab 	mov	r8,43691
80004e30:	ea 18 aa aa 	orh	r8,0xaaaa
80004e34:	f2 08 06 48 	mulu.d	r8,r9,r8
80004e38:	f2 08 16 01 	lsr	r8,r9,0x1
80004e3c:	5c 58       	castu.b	r8
80004e3e:	2f e8       	sub	r8,-2
80004e40:	ef 48 ff ec 	st.w	r7[-20],r8

    st7529_write_cmd(ST7529_LASET);
80004e44:	37 5c       	mov	r12,117
80004e46:	f0 1f 00 db 	mcall	800051b0 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(x);
80004e4a:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80004e4e:	10 9c       	mov	r12,r8
80004e50:	f0 1f 00 d9 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_line);
80004e54:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004e58:	5c 58       	castu.b	r8
80004e5a:	10 9c       	mov	r12,r8
80004e5c:	f0 1f 00 d6 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>

    st7529_write_cmd(ST7529_CASET);
80004e60:	31 5c       	mov	r12,21
80004e62:	f0 1f 00 d4 	mcall	800051b0 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(y/3);
80004e66:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80004e6a:	e0 68 aa ab 	mov	r8,43691
80004e6e:	ea 18 aa aa 	orh	r8,0xaaaa
80004e72:	f2 08 06 48 	mulu.d	r8,r9,r8
80004e76:	f2 08 16 01 	lsr	r8,r9,0x1
80004e7a:	5c 58       	castu.b	r8
80004e7c:	10 9c       	mov	r12,r8
80004e7e:	f0 1f 00 ce 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_col);
80004e82:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004e86:	5c 58       	castu.b	r8
80004e88:	10 9c       	mov	r12,r8
80004e8a:	f0 1f 00 cb 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>

    // Write Text Data
    st7529_write_cmd(ST7529_RAMWR);
80004e8e:	35 cc       	mov	r12,92
80004e90:	f0 1f 00 c8 	mcall	800051b0 <st7529_put_5x7_text+0x3f0>

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
80004e94:	30 08       	mov	r8,0
80004e96:	ef 48 ff f0 	st.w	r7[-16],r8
80004e9a:	c7 58       	rjmp	80004f84 <st7529_put_5x7_text+0x1c4>
        if((iline % 6) == 5){
80004e9c:	ee fa ff f0 	ld.w	r10,r7[-16]
80004ea0:	e0 68 aa ab 	mov	r8,43691
80004ea4:	ea 18 aa aa 	orh	r8,0xaaaa
80004ea8:	f4 08 06 48 	mulu.d	r8,r10,r8
80004eac:	a3 89       	lsr	r9,0x2
80004eae:	12 98       	mov	r8,r9
80004eb0:	a1 78       	lsl	r8,0x1
80004eb2:	12 08       	add	r8,r9
80004eb4:	a1 78       	lsl	r8,0x1
80004eb6:	f4 08 01 09 	sub	r9,r10,r8
80004eba:	58 59       	cp.w	r9,5
80004ebc:	c0 b1       	brne	80004ed2 <st7529_put_5x7_text+0x112>
            st7529_write_data(0x00);
80004ebe:	30 0c       	mov	r12,0
80004ec0:	f0 1f 00 bd 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004ec4:	30 0c       	mov	r12,0
80004ec6:	f0 1f 00 bc 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004eca:	30 0c       	mov	r12,0
80004ecc:	f0 1f 00 ba 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
80004ed0:	c5 58       	rjmp	80004f7a <st7529_put_5x7_text+0x1ba>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80004ed2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004ed6:	e0 68 aa ab 	mov	r8,43691
80004eda:	ea 18 aa aa 	orh	r8,0xaaaa
80004ede:	f2 08 06 48 	mulu.d	r8,r9,r8
80004ee2:	f2 08 16 02 	lsr	r8,r9,0x2
80004ee6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004eea:	f2 08 00 08 	add	r8,r9,r8
80004eee:	11 88       	ld.ub	r8,r8[0x0]
80004ef0:	10 99       	mov	r9,r8
80004ef2:	12 98       	mov	r8,r9
80004ef4:	a3 68       	lsl	r8,0x2
80004ef6:	12 08       	add	r8,r9
80004ef8:	10 9b       	mov	r11,r8
80004efa:	ee fa ff f0 	ld.w	r10,r7[-16]
80004efe:	e0 68 aa ab 	mov	r8,43691
80004f02:	ea 18 aa aa 	orh	r8,0xaaaa
80004f06:	f4 08 06 48 	mulu.d	r8,r10,r8
80004f0a:	a3 89       	lsr	r9,0x2
80004f0c:	12 98       	mov	r8,r9
80004f0e:	a1 78       	lsl	r8,0x1
80004f10:	12 08       	add	r8,r9
80004f12:	a1 78       	lsl	r8,0x1
80004f14:	f4 08 01 09 	sub	r9,r10,r8
80004f18:	f6 09 00 08 	add	r8,r11,r9
80004f1c:	f0 c8 00 a0 	sub	r8,r8,160
80004f20:	fe f9 02 98 	ld.w	r9,pc[664]
80004f24:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004f28:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<6))
80004f2c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004f30:	e2 18 00 40 	andl	r8,0x40,COH
80004f34:	c0 60       	breq	80004f40 <st7529_put_5x7_text+0x180>
                st7529_write_data(0xFF);
80004f36:	e0 6c 00 ff 	mov	r12,255
80004f3a:	f0 1f 00 9f 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
80004f3e:	c0 48       	rjmp	80004f46 <st7529_put_5x7_text+0x186>
            else
                st7529_write_data(0x00);
80004f40:	30 0c       	mov	r12,0
80004f42:	f0 1f 00 9d 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<5))
80004f46:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004f4a:	e2 18 00 20 	andl	r8,0x20,COH
80004f4e:	c0 60       	breq	80004f5a <st7529_put_5x7_text+0x19a>
                st7529_write_data(0xFF);
80004f50:	e0 6c 00 ff 	mov	r12,255
80004f54:	f0 1f 00 98 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
80004f58:	c0 48       	rjmp	80004f60 <st7529_put_5x7_text+0x1a0>
            else
                st7529_write_data(0x00);
80004f5a:	30 0c       	mov	r12,0
80004f5c:	f0 1f 00 96 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<4))
80004f60:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004f64:	e2 18 00 10 	andl	r8,0x10,COH
80004f68:	c0 60       	breq	80004f74 <st7529_put_5x7_text+0x1b4>
                st7529_write_data(0xFF);
80004f6a:	e0 6c 00 ff 	mov	r12,255
80004f6e:	f0 1f 00 92 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
80004f72:	c0 48       	rjmp	80004f7a <st7529_put_5x7_text+0x1ba>
            else
                st7529_write_data(0x00);
80004f74:	30 0c       	mov	r12,0
80004f76:	f0 1f 00 90 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
    st7529_write_cmd(ST7529_RAMWR);

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
80004f7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004f7e:	2f f8       	sub	r8,-1
80004f80:	ef 48 ff f0 	st.w	r7[-16],r8
80004f84:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004f88:	12 98       	mov	r8,r9
80004f8a:	a1 78       	lsl	r8,0x1
80004f8c:	12 08       	add	r8,r9
80004f8e:	a1 78       	lsl	r8,0x1
80004f90:	10 99       	mov	r9,r8
80004f92:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004f96:	10 39       	cp.w	r9,r8
80004f98:	fe 9b ff 82 	brhi	80004e9c <st7529_put_5x7_text+0xdc>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004f9c:	30 08       	mov	r8,0
80004f9e:	ef 48 ff f0 	st.w	r7[-16],r8
80004fa2:	c7 48       	rjmp	8000508a <st7529_put_5x7_text+0x2ca>
        if((iline % 6) == 5){
80004fa4:	ee fa ff f0 	ld.w	r10,r7[-16]
80004fa8:	e0 68 aa ab 	mov	r8,43691
80004fac:	ea 18 aa aa 	orh	r8,0xaaaa
80004fb0:	f4 08 06 48 	mulu.d	r8,r10,r8
80004fb4:	a3 89       	lsr	r9,0x2
80004fb6:	12 98       	mov	r8,r9
80004fb8:	a1 78       	lsl	r8,0x1
80004fba:	12 08       	add	r8,r9
80004fbc:	a1 78       	lsl	r8,0x1
80004fbe:	f4 08 01 09 	sub	r9,r10,r8
80004fc2:	58 59       	cp.w	r9,5
80004fc4:	c0 b1       	brne	80004fda <st7529_put_5x7_text+0x21a>
            st7529_write_data(0x00);
80004fc6:	30 0c       	mov	r12,0
80004fc8:	f0 1f 00 7b 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004fcc:	30 0c       	mov	r12,0
80004fce:	f0 1f 00 7a 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004fd2:	30 0c       	mov	r12,0
80004fd4:	f0 1f 00 78 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
80004fd8:	c5 48       	rjmp	80005080 <st7529_put_5x7_text+0x2c0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80004fda:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004fde:	e0 68 aa ab 	mov	r8,43691
80004fe2:	ea 18 aa aa 	orh	r8,0xaaaa
80004fe6:	f2 08 06 48 	mulu.d	r8,r9,r8
80004fea:	f2 08 16 02 	lsr	r8,r9,0x2
80004fee:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004ff2:	f2 08 00 08 	add	r8,r9,r8
80004ff6:	11 88       	ld.ub	r8,r8[0x0]
80004ff8:	10 99       	mov	r9,r8
80004ffa:	12 98       	mov	r8,r9
80004ffc:	a3 68       	lsl	r8,0x2
80004ffe:	12 08       	add	r8,r9
80005000:	10 9b       	mov	r11,r8
80005002:	ee fa ff f0 	ld.w	r10,r7[-16]
80005006:	e0 68 aa ab 	mov	r8,43691
8000500a:	ea 18 aa aa 	orh	r8,0xaaaa
8000500e:	f4 08 06 48 	mulu.d	r8,r10,r8
80005012:	a3 89       	lsr	r9,0x2
80005014:	12 98       	mov	r8,r9
80005016:	a1 78       	lsl	r8,0x1
80005018:	12 08       	add	r8,r9
8000501a:	a1 78       	lsl	r8,0x1
8000501c:	f4 08 01 09 	sub	r9,r10,r8
80005020:	f6 09 00 08 	add	r8,r11,r9
80005024:	f0 c8 00 a0 	sub	r8,r8,160
80005028:	4e 49       	lddpc	r9,800051b8 <st7529_put_5x7_text+0x3f8>
8000502a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000502e:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<3))
80005032:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005036:	e2 18 00 08 	andl	r8,0x8,COH
8000503a:	c0 60       	breq	80005046 <st7529_put_5x7_text+0x286>
                st7529_write_data(0xFF);
8000503c:	e0 6c 00 ff 	mov	r12,255
80005040:	f0 1f 00 5d 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
80005044:	c0 48       	rjmp	8000504c <st7529_put_5x7_text+0x28c>
            else
                st7529_write_data(0x00);
80005046:	30 0c       	mov	r12,0
80005048:	f0 1f 00 5b 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<2))
8000504c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005050:	e2 18 00 04 	andl	r8,0x4,COH
80005054:	c0 60       	breq	80005060 <st7529_put_5x7_text+0x2a0>
                st7529_write_data(0xFF);
80005056:	e0 6c 00 ff 	mov	r12,255
8000505a:	f0 1f 00 57 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
8000505e:	c0 48       	rjmp	80005066 <st7529_put_5x7_text+0x2a6>
            else
                st7529_write_data(0x00);
80005060:	30 0c       	mov	r12,0
80005062:	f0 1f 00 55 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<1))
80005066:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000506a:	e2 18 00 02 	andl	r8,0x2,COH
8000506e:	c0 60       	breq	8000507a <st7529_put_5x7_text+0x2ba>
                st7529_write_data(0xFF);
80005070:	e0 6c 00 ff 	mov	r12,255
80005074:	f0 1f 00 50 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
80005078:	c0 48       	rjmp	80005080 <st7529_put_5x7_text+0x2c0>
            else
                st7529_write_data(0x00);
8000507a:	30 0c       	mov	r12,0
8000507c:	f0 1f 00 4e 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80005080:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005084:	2f f8       	sub	r8,-1
80005086:	ef 48 ff f0 	st.w	r7[-16],r8
8000508a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000508e:	12 98       	mov	r8,r9
80005090:	a1 78       	lsl	r8,0x1
80005092:	12 08       	add	r8,r9
80005094:	a1 78       	lsl	r8,0x1
80005096:	10 99       	mov	r9,r8
80005098:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000509c:	10 39       	cp.w	r9,r8
8000509e:	fe 9b ff 83 	brhi	80004fa4 <st7529_put_5x7_text+0x1e4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
800050a2:	30 08       	mov	r8,0
800050a4:	ef 48 ff f0 	st.w	r7[-16],r8
800050a8:	c6 18       	rjmp	8000516a <st7529_put_5x7_text+0x3aa>
        if((iline % 6) == 5){
800050aa:	ee fa ff f0 	ld.w	r10,r7[-16]
800050ae:	e0 68 aa ab 	mov	r8,43691
800050b2:	ea 18 aa aa 	orh	r8,0xaaaa
800050b6:	f4 08 06 48 	mulu.d	r8,r10,r8
800050ba:	a3 89       	lsr	r9,0x2
800050bc:	12 98       	mov	r8,r9
800050be:	a1 78       	lsl	r8,0x1
800050c0:	12 08       	add	r8,r9
800050c2:	a1 78       	lsl	r8,0x1
800050c4:	f4 08 01 09 	sub	r9,r10,r8
800050c8:	58 59       	cp.w	r9,5
800050ca:	c0 b1       	brne	800050e0 <st7529_put_5x7_text+0x320>
            st7529_write_data(0x00);
800050cc:	30 0c       	mov	r12,0
800050ce:	f0 1f 00 3a 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
800050d2:	30 0c       	mov	r12,0
800050d4:	f0 1f 00 38 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
800050d8:	30 0c       	mov	r12,0
800050da:	f0 1f 00 37 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
800050de:	c4 18       	rjmp	80005160 <st7529_put_5x7_text+0x3a0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
800050e0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800050e4:	e0 68 aa ab 	mov	r8,43691
800050e8:	ea 18 aa aa 	orh	r8,0xaaaa
800050ec:	f2 08 06 48 	mulu.d	r8,r9,r8
800050f0:	f2 08 16 02 	lsr	r8,r9,0x2
800050f4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800050f8:	f2 08 00 08 	add	r8,r9,r8
800050fc:	11 88       	ld.ub	r8,r8[0x0]
800050fe:	10 99       	mov	r9,r8
80005100:	12 98       	mov	r8,r9
80005102:	a3 68       	lsl	r8,0x2
80005104:	12 08       	add	r8,r9
80005106:	10 9b       	mov	r11,r8
80005108:	ee fa ff f0 	ld.w	r10,r7[-16]
8000510c:	e0 68 aa ab 	mov	r8,43691
80005110:	ea 18 aa aa 	orh	r8,0xaaaa
80005114:	f4 08 06 48 	mulu.d	r8,r10,r8
80005118:	a3 89       	lsr	r9,0x2
8000511a:	12 98       	mov	r8,r9
8000511c:	a1 78       	lsl	r8,0x1
8000511e:	12 08       	add	r8,r9
80005120:	a1 78       	lsl	r8,0x1
80005122:	f4 08 01 09 	sub	r9,r10,r8
80005126:	f6 09 00 08 	add	r8,r11,r9
8000512a:	f0 c8 00 a0 	sub	r8,r8,160
8000512e:	4a 39       	lddpc	r9,800051b8 <st7529_put_5x7_text+0x3f8>
80005130:	f2 08 07 08 	ld.ub	r8,r9[r8]
80005134:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<0))
80005138:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000513c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005140:	5c 58       	castu.b	r8
80005142:	c0 60       	breq	8000514e <st7529_put_5x7_text+0x38e>
                st7529_write_data(0xFF);
80005144:	e0 6c 00 ff 	mov	r12,255
80005148:	f0 1f 00 1b 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
8000514c:	c0 48       	rjmp	80005154 <st7529_put_5x7_text+0x394>
            else
                st7529_write_data(0x00);
8000514e:	30 0c       	mov	r12,0
80005150:	f0 1f 00 19 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>

            st7529_write_data(0x00);
80005154:	30 0c       	mov	r12,0
80005156:	f0 1f 00 18 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
8000515a:	30 0c       	mov	r12,0
8000515c:	f0 1f 00 16 	mcall	800051b4 <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80005160:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005164:	2f f8       	sub	r8,-1
80005166:	ef 48 ff f0 	st.w	r7[-16],r8
8000516a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000516e:	12 98       	mov	r8,r9
80005170:	a1 78       	lsl	r8,0x1
80005172:	12 08       	add	r8,r9
80005174:	a1 78       	lsl	r8,0x1
80005176:	10 99       	mov	r9,r8
80005178:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000517c:	10 39       	cp.w	r9,r8
8000517e:	fe 9b ff 96 	brhi	800050aa <st7529_put_5x7_text+0x2ea>
80005182:	30 18       	mov	r8,1
80005184:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80005188:	fc 1a 40 00 	movh	r10,0x4000
8000518c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005190:	a5 98       	lsr	r8,0x5
80005192:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005196:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000519a:	30 1b       	mov	r11,1
8000519c:	f6 09 09 49 	lsl	r9,r11,r9
800051a0:	a9 68       	lsl	r8,0x8
800051a2:	f4 08 00 08 	add	r8,r10,r8
800051a6:	2a c8       	sub	r8,-84
800051a8:	91 09       	st.w	r8[0x0],r9
            st7529_write_data(0x00);
        }
    }

    st7529_CS_SET();
}
800051aa:	2f 6d       	sub	sp,-40
800051ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800051b0:	80 00       	ld.sh	r0,r0[0x0]
800051b2:	4c 70       	lddpc	r0,800052cc <sens_rx_complete_handler+0x24>
800051b4:	80 00       	ld.sh	r0,r0[0x0]
800051b6:	4d 40       	lddpc	r0,80005304 <tick_handler+0x4>
800051b8:	80 00       	ld.sh	r0,r0[0x0]
800051ba:	c5 30       	breq	80005260 <usart_timeout_handler+0x84>
800051bc:	54 69       	stdsp	sp[0x118],r9
800051be:	6d 65       	ld.w	r5,r6[0x58]
800051c0:	3a 20       	mov	r0,-94
800051c2:	25 64       	sub	r4,86
800051c4:	3a 25       	mov	r5,-94
800051c6:	64 3a       	ld.w	r10,r2[0xc]
800051c8:	25 66       	sub	r6,86
800051ca:	00 00       	add	r0,r0
800051cc:	4e 75       	lddpc	r5,80005368 <tick_handler+0x68>
800051ce:	6d 20       	ld.w	r0,r6[0x48]
800051d0:	53 61       	stdsp	sp[0xd8],r1
800051d2:	74 73       	ld.w	r3,r10[0x1c]
800051d4:	3a 20       	mov	r0,-94
800051d6:	25 64       	sub	r4,86
800051d8:	00 00       	add	r0,r0
	...

800051dc <usart_timeout_handler>:

volatile uint32_t tick_cnt = 0;
volatile uint32_t last_cnt = 0;

// GPS USART TIMEOUT INTERRUPT
ISR(usart_timeout_handler, AVR32_USART3_IRQ, 0){
800051dc:	eb cd 40 80 	pushm	r7,lr
800051e0:	1a 97       	mov	r7,sp
800051e2:	20 2d       	sub	sp,8
800051e4:	30 e8       	mov	r8,14
800051e6:	ef 48 ff f8 	st.w	r7[-8],r8
800051ea:	fc 1a 40 00 	movh	r10,0x4000
800051ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051f2:	a5 98       	lsr	r8,0x5
800051f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051f8:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800051fc:	30 1b       	mov	r11,1
800051fe:	f6 09 09 49 	lsl	r9,r11,r9
80005202:	a9 68       	lsl	r8,0x8
80005204:	f4 08 00 08 	add	r8,r10,r8
80005208:	2a c8       	sub	r8,-84
8000520a:	91 09       	st.w	r8[0x0],r9
	gpio_local_set_gpio_pin(AVR32_PIN_PA14);
	// Reset Timeout Flag
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
8000520c:	fe 78 3c 00 	mov	r8,-50176
80005210:	fe 79 3c 00 	mov	r9,-50176
80005214:	72 09       	ld.w	r9,r9[0x0]
80005216:	ab b9       	sbr	r9,0xb
80005218:	91 09       	st.w	r8[0x0],r9
	
	usart_timeout_flag = 1;
8000521a:	49 d8       	lddpc	r8,8000528c <usart_timeout_handler+0xb0>
8000521c:	30 19       	mov	r9,1
8000521e:	91 09       	st.w	r8[0x0],r9
	
	// Parse GPS Data
	uc530_parse_default(usart_rx_buffer,
80005220:	49 ca       	lddpc	r10,80005290 <usart_timeout_handler+0xb4>
80005222:	e0 6b 02 58 	mov	r11,600
80005226:	49 cc       	lddpc	r12,80005294 <usart_timeout_handler+0xb8>
80005228:	f0 1f 00 1c 	mcall	80005298 <usart_timeout_handler+0xbc>
						sizeof(usart_rx_buffer),
						&gps_data);
	
	// Reload DMA Address					
	pdca_load_channel(0,
8000522c:	e0 6a 02 58 	mov	r10,600
80005230:	49 9b       	lddpc	r11,80005294 <usart_timeout_handler+0xb8>
80005232:	30 0c       	mov	r12,0
80005234:	f0 1f 00 1a 	mcall	8000529c <usart_timeout_handler+0xc0>
					  (void *)usart_rx_buffer,
					  sizeof(usart_rx_buffer));
			
	// Deal With Tick Timer
	last_cnt = tick_cnt;
80005238:	49 a8       	lddpc	r8,800052a0 <usart_timeout_handler+0xc4>
8000523a:	70 09       	ld.w	r9,r8[0x0]
8000523c:	49 a8       	lddpc	r8,800052a4 <usart_timeout_handler+0xc8>
8000523e:	91 09       	st.w	r8[0x0],r9
	tick_cnt = 0;
80005240:	49 88       	lddpc	r8,800052a0 <usart_timeout_handler+0xc4>
80005242:	30 09       	mov	r9,0
80005244:	91 09       	st.w	r8[0x0],r9
	AVR32_TC0.channel[0].ccr = AVR32_TC_CCR0_SWTRG_MASK;	// Reset Counter
80005246:	fe 78 58 00 	mov	r8,-43008
8000524a:	30 49       	mov	r9,4
8000524c:	91 09       	st.w	r8[0x0],r9
	AVR32_TC0.channel[0].sr;	// Reset any interrupt flags
8000524e:	fe 78 58 00 	mov	r8,-43008
80005252:	70 88       	ld.w	r8,r8[0x20]
	AVR32_TC0.channel[0].ier = AVR32_TC_IER0_CPCS_MASK;	// Enable Compare Match Interrupt
80005254:	fe 78 58 00 	mov	r8,-43008
80005258:	31 09       	mov	r9,16
8000525a:	91 99       	st.w	r8[0x24],r9
8000525c:	30 e8       	mov	r8,14
8000525e:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80005262:	fc 1a 40 00 	movh	r10,0x4000
80005266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000526a:	a5 98       	lsr	r8,0x5
8000526c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005270:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80005274:	30 1b       	mov	r11,1
80005276:	f6 09 09 49 	lsl	r9,r11,r9
8000527a:	a9 68       	lsl	r8,0x8
8000527c:	f4 08 00 08 	add	r8,r10,r8
80005280:	2a 88       	sub	r8,-88
80005282:	91 09       	st.w	r8[0x0],r9
	gpio_local_clr_gpio_pin(AVR32_PIN_PA14);
}
80005284:	2f ed       	sub	sp,-8
80005286:	e3 cd 40 80 	ldm	sp++,r7,lr
8000528a:	d6 03       	rete
8000528c:	00 00       	add	r0,r0
8000528e:	06 08       	add	r8,r3
80005290:	00 00       	add	r0,r0
80005292:	06 68       	and	r8,r3
80005294:	00 00       	add	r0,r0
80005296:	06 c4       	st.b	r3++,r4
80005298:	80 00       	ld.sh	r0,r0[0x0]
8000529a:	3e e8       	mov	r8,-18
8000529c:	80 00       	ld.sh	r0,r0[0x0]
8000529e:	28 98       	sub	r8,-119
800052a0:	00 00       	add	r0,r0
800052a2:	06 10       	sub	r0,r3
800052a4:	00 00       	add	r0,r0
800052a6:	06 14       	sub	r4,r3

800052a8 <sens_rx_complete_handler>:

ISR(sens_rx_complete_handler, AVR32_PDCA_IRQ_1, 0){
800052a8:	eb cd 40 80 	pushm	r7,lr
800052ac:	1a 97       	mov	r7,sp
	// Disable Interrupt By Writing To TCR
	AVR32_PDCA.channel[1].tcr = sizeof(sens_rx_buffer);
800052ae:	fe 78 00 00 	mov	r8,-65536
800052b2:	30 69       	mov	r9,6
800052b4:	f1 49 00 48 	st.w	r8[72],r9
	
	switch(sens_rx_state){
800052b8:	48 e8       	lddpc	r8,800052f0 <sens_rx_complete_handler+0x48>
800052ba:	70 08       	ld.w	r8,r8[0x0]
800052bc:	58 08       	cp.w	r8,0
800052be:	c0 40       	breq	800052c6 <sens_rx_complete_handler+0x1e>
800052c0:	58 18       	cp.w	r8,1
800052c2:	c1 00       	breq	800052e2 <sens_rx_complete_handler+0x3a>
800052c4:	c1 28       	rjmp	800052e8 <sens_rx_complete_handler+0x40>
		case SENS_STATE_PRESSURE:
			// Start Next Calculation
			twim_write_dma(&AVR32_TWIM0, 2, 0x77, sens_tx_buffer, 2);
800052c6:	30 28       	mov	r8,2
800052c8:	48 b9       	lddpc	r9,800052f4 <sens_rx_complete_handler+0x4c>
800052ca:	37 7a       	mov	r10,119
800052cc:	30 2b       	mov	r11,2
800052ce:	fe 7c 44 00 	mov	r12,-48128
800052d2:	f0 1f 00 0a 	mcall	800052f8 <sens_rx_complete_handler+0x50>
		
			// Do stuff with Pressure Data
			
			// Initiate Mag Transfer
			sens_rx_state = SENS_STATE_MAG;
800052d6:	48 78       	lddpc	r8,800052f0 <sens_rx_complete_handler+0x48>
800052d8:	30 19       	mov	r9,1
800052da:	91 09       	st.w	r8[0x0],r9
			sens_rx_start();
800052dc:	f0 1f 00 08 	mcall	800052fc <sens_rx_complete_handler+0x54>
			break;
800052e0:	c0 48       	rjmp	800052e8 <sens_rx_complete_handler+0x40>
			
		case SENS_STATE_MAG:
			// Do Stuff With Data
			
			sens_rx_state = SENS_STATE_PRESSURE;
800052e2:	48 48       	lddpc	r8,800052f0 <sens_rx_complete_handler+0x48>
800052e4:	30 09       	mov	r9,0
800052e6:	91 09       	st.w	r8[0x0],r9
			break;
			
		default:
			break;			
	}
}
800052e8:	e3 cd 40 80 	ldm	sp++,r7,lr
800052ec:	d6 03       	rete
800052ee:	00 00       	add	r0,r0
800052f0:	00 00       	add	r0,r0
800052f2:	06 0c       	add	r12,r3
800052f4:	00 00       	add	r0,r0
800052f6:	00 08       	add	r8,r0
800052f8:	80 00       	ld.sh	r0,r0[0x0]
800052fa:	56 7c       	stdsp	sp[0x19c],r12
800052fc:	80 00       	ld.sh	r0,r0[0x0]
800052fe:	59 10       	cp.w	r0,17

80005300 <tick_handler>:

ISR(tick_handler, AVR32_TC0_IRQ0, 0){
80005300:	eb cd 40 80 	pushm	r7,lr
80005304:	1a 97       	mov	r7,sp
80005306:	20 2d       	sub	sp,8
80005308:	30 e8       	mov	r8,14
8000530a:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000530e:	fc 1a 40 00 	movh	r10,0x4000
80005312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005316:	a5 98       	lsr	r8,0x5
80005318:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000531c:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80005320:	30 1b       	mov	r11,1
80005322:	f6 09 09 49 	lsl	r9,r11,r9
80005326:	a9 68       	lsl	r8,0x8
80005328:	f4 08 00 08 	add	r8,r10,r8
8000532c:	2a c8       	sub	r8,-84
8000532e:	91 09       	st.w	r8[0x0],r9
	gpio_local_set_gpio_pin(AVR32_PIN_PA14);
	// Clear Interrupt
	AVR32_TC0.channel[0].sr;
80005330:	fe 78 58 00 	mov	r8,-43008
80005334:	70 88       	ld.w	r8,r8[0x20]
	
	tick_cnt++;
80005336:	49 48       	lddpc	r8,80005384 <tick_handler+0x84>
80005338:	70 08       	ld.w	r8,r8[0x0]
8000533a:	f0 c9 ff ff 	sub	r9,r8,-1
8000533e:	49 28       	lddpc	r8,80005384 <tick_handler+0x84>
80005340:	91 09       	st.w	r8[0x0],r9
	
	if(tick_cnt < TICK_RATE-1){
80005342:	49 18       	lddpc	r8,80005384 <tick_handler+0x84>
80005344:	70 08       	ld.w	r8,r8[0x0]
80005346:	59 28       	cp.w	r8,18
80005348:	e0 88 00 06 	brls	80005354 <tick_handler+0x54>
		// Do Regular Things
	}
	else
		// Disable Interrupt
		AVR32_TC0.channel[0].idr = AVR32_TC_IDR0_CPCS_MASK;
8000534c:	fe 78 58 00 	mov	r8,-43008
80005350:	31 09       	mov	r9,16
80005352:	91 a9       	st.w	r8[0x28],r9
80005354:	30 e8       	mov	r8,14
80005356:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
8000535a:	fc 1a 40 00 	movh	r10,0x4000
8000535e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005362:	a5 98       	lsr	r8,0x5
80005364:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005368:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000536c:	30 1b       	mov	r11,1
8000536e:	f6 09 09 49 	lsl	r9,r11,r9
80005372:	a9 68       	lsl	r8,0x8
80005374:	f4 08 00 08 	add	r8,r10,r8
80005378:	2a 88       	sub	r8,-88
8000537a:	91 09       	st.w	r8[0x0],r9
	
	gpio_local_clr_gpio_pin(AVR32_PIN_PA14);
}
8000537c:	2f ed       	sub	sp,-8
8000537e:	e3 cd 40 80 	ldm	sp++,r7,lr
80005382:	d6 03       	rete
80005384:	00 00       	add	r0,r0
80005386:	06 10       	sub	r0,r3

80005388 <main>:

int main (void)
{
80005388:	eb cd 40 80 	pushm	r7,lr
8000538c:	1a 97       	mov	r7,sp
8000538e:	20 fd       	sub	sp,60
	char text[50];
	
	board_init();
80005390:	f0 1f 00 40 	mcall	80005490 <main+0x108>
	setup_clocks();
80005394:	f0 1f 00 40 	mcall	80005494 <main+0x10c>
 * \note This function must have been called at least once before using other
 *       functions in this interface.
 */
__always_inline static void gpio_local_init(void)
{
	Set_system_register(AVR32_CPUCR,
80005398:	e1 b8 00 03 	mfsr	r8,0xc
8000539c:	b1 a8       	sbr	r8,0x10
8000539e:	e3 b8 00 03 	mtsr	0xc,r8
800053a2:	30 e8       	mov	r8,14
800053a4:	ef 48 ff f8 	st.w	r7[-8],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800053a8:	fc 1a 40 00 	movh	r10,0x4000
800053ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b0:	a5 98       	lsr	r8,0x5
800053b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800053b6:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800053ba:	30 1b       	mov	r11,1
800053bc:	f6 09 09 49 	lsl	r9,r11,r9
800053c0:	a9 68       	lsl	r8,0x8
800053c2:	f4 08 00 08 	add	r8,r10,r8
800053c6:	2b c8       	sub	r8,-68
800053c8:	91 09       	st.w	r8[0x0],r9
800053ca:	31 48       	mov	r8,20
800053cc:	ef 48 ff fc 	st.w	r7[-4],r8
800053d0:	fc 1a 40 00 	movh	r10,0x4000
800053d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053d8:	a5 98       	lsr	r8,0x5
800053da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800053de:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800053e2:	30 1b       	mov	r11,1
800053e4:	f6 09 09 49 	lsl	r9,r11,r9
800053e8:	a9 68       	lsl	r8,0x8
800053ea:	f4 08 00 08 	add	r8,r10,r8
800053ee:	2b c8       	sub	r8,-68
800053f0:	91 09       	st.w	r8[0x0],r9
	gpio_local_init();
	
	gpio_local_enable_pin_output_driver(AVR32_PIN_PA14);
	gpio_local_enable_pin_output_driver(AVR32_PIN_PA20);
	
	st7529_init();
800053f2:	f0 1f 00 2a 	mcall	80005498 <main+0x110>
	setup_gps_uart();
800053f6:	f0 1f 00 2a 	mcall	8000549c <main+0x114>
	setup_uart_dma();
800053fa:	f0 1f 00 2a 	mcall	800054a0 <main+0x118>
	setup_sens_twi();
800053fe:	f0 1f 00 2a 	mcall	800054a4 <main+0x11c>
	
	setup_magnetometer();
80005402:	f0 1f 00 2a 	mcall	800054a8 <main+0x120>
	setup_barometer();
80005406:	f0 1f 00 2a 	mcall	800054ac <main+0x124>
	
	setup_tick();
8000540a:	f0 1f 00 2a 	mcall	800054b0 <main+0x128>
	
	setup_interrupts();
8000540e:	f0 1f 00 2a 	mcall	800054b4 <main+0x12c>
80005412:	c0 28       	rjmp	80005416 <main+0x8e>
			
			st7529_put_5x7_text(0,9,text,12);
			
			sens_rx_start();
		}
	}
80005414:	d7 03       	nop
	setup_tick();
	
	setup_interrupts();
	
	while(1){
		if(usart_timeout_flag){
80005416:	4a 98       	lddpc	r8,800054b8 <main+0x130>
80005418:	70 08       	ld.w	r8,r8[0x0]
8000541a:	58 08       	cp.w	r8,0
8000541c:	cf c0       	breq	80005414 <main+0x8c>
			usart_timeout_flag = 0;
8000541e:	4a 78       	lddpc	r8,800054b8 <main+0x130>
80005420:	30 09       	mov	r9,0
80005422:	91 09       	st.w	r8[0x0],r9
			
			sprintf(text,"Time: %d:%d:%f",
					gps_data.hour,gps_data.minute,gps_data.second);
80005424:	4a 68       	lddpc	r8,800054bc <main+0x134>
80005426:	70 28       	ld.w	r8,r8[0x8]
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80005428:	10 9c       	mov	r12,r8
8000542a:	f0 1f 00 26 	mcall	800054c0 <main+0x138>
8000542e:	14 98       	mov	r8,r10
80005430:	16 99       	mov	r9,r11
					gps_data.hour,gps_data.minute,gps_data.second);
80005432:	4a 3a       	lddpc	r10,800054bc <main+0x134>
80005434:	15 ca       	ld.ub	r10,r10[0x4]
80005436:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80005438:	14 9c       	mov	r12,r10
					gps_data.hour,gps_data.minute,gps_data.second);
8000543a:	4a 1a       	lddpc	r10,800054bc <main+0x134>
8000543c:	15 ba       	ld.ub	r10,r10[0x3]
8000543e:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80005440:	14 9b       	mov	r11,r10
80005442:	ee ca 00 3c 	sub	r10,r7,60
80005446:	bb 29       	st.d	--sp,r8
80005448:	1a dc       	st.w	--sp,r12
8000544a:	1a db       	st.w	--sp,r11
8000544c:	49 eb       	lddpc	r11,800054c4 <main+0x13c>
8000544e:	14 9c       	mov	r12,r10
80005450:	f0 1f 00 1e 	mcall	800054c8 <main+0x140>
80005454:	2f cd       	sub	sp,-16
					gps_data.hour,gps_data.minute,gps_data.second);
					
			st7529_put_5x7_text(0,0,text,17);
80005456:	ee c8 00 3c 	sub	r8,r7,60
8000545a:	31 19       	mov	r9,17
8000545c:	10 9a       	mov	r10,r8
8000545e:	30 0b       	mov	r11,0
80005460:	30 0c       	mov	r12,0
80005462:	f0 1f 00 1b 	mcall	800054cc <main+0x144>
			
			sprintf(text,"Num Sats: %d", last_cnt);//gps_data.num_sats);
80005466:	49 b8       	lddpc	r8,800054d0 <main+0x148>
80005468:	70 09       	ld.w	r9,r8[0x0]
8000546a:	ee c8 00 3c 	sub	r8,r7,60
8000546e:	1a d9       	st.w	--sp,r9
80005470:	49 9b       	lddpc	r11,800054d4 <main+0x14c>
80005472:	10 9c       	mov	r12,r8
80005474:	f0 1f 00 15 	mcall	800054c8 <main+0x140>
80005478:	2f fd       	sub	sp,-4
			
			st7529_put_5x7_text(0,9,text,12);
8000547a:	ee c8 00 3c 	sub	r8,r7,60
8000547e:	30 c9       	mov	r9,12
80005480:	10 9a       	mov	r10,r8
80005482:	30 9b       	mov	r11,9
80005484:	30 0c       	mov	r12,0
80005486:	f0 1f 00 12 	mcall	800054cc <main+0x144>
			
			sens_rx_start();
8000548a:	f0 1f 00 14 	mcall	800054d8 <main+0x150>
		}
	}
8000548e:	cc 4b       	rjmp	80005416 <main+0x8e>
80005490:	80 00       	ld.sh	r0,r0[0x0]
80005492:	5a 5c       	cp.w	r12,-27
80005494:	80 00       	ld.sh	r0,r0[0x0]
80005496:	54 dc       	stdsp	sp[0x134],r12
80005498:	80 00       	ld.sh	r0,r0[0x0]
8000549a:	44 e4       	lddsp	r4,sp[0x138]
8000549c:	80 00       	ld.sh	r0,r0[0x0]
8000549e:	55 58       	stdsp	sp[0x154],r8
800054a0:	80 00       	ld.sh	r0,r0[0x0]
800054a2:	55 ac       	stdsp	sp[0x168],r12
800054a4:	80 00       	ld.sh	r0,r0[0x0]
800054a6:	55 d0       	stdsp	sp[0x174],r0
800054a8:	80 00       	ld.sh	r0,r0[0x0]
800054aa:	58 28       	cp.w	r8,2
800054ac:	80 00       	ld.sh	r0,r0[0x0]
800054ae:	58 5c       	cp.w	r12,5
800054b0:	80 00       	ld.sh	r0,r0[0x0]
800054b2:	59 c0       	cp.w	r0,28
800054b4:	80 00       	ld.sh	r0,r0[0x0]
800054b6:	5a 10       	cp.w	r0,-31
800054b8:	00 00       	add	r0,r0
800054ba:	06 08       	add	r8,r3
800054bc:	00 00       	add	r0,r0
800054be:	06 68       	and	r8,r3
800054c0:	80 00       	ld.sh	r0,r0[0x0]
800054c2:	5e 9e       	retgt	-1
800054c4:	80 00       	ld.sh	r0,r0[0x0]
800054c6:	51 bc       	stdsp	sp[0x6c],r12
800054c8:	80 00       	ld.sh	r0,r0[0x0]
800054ca:	61 64       	ld.w	r4,r0[0x58]
800054cc:	80 00       	ld.sh	r0,r0[0x0]
800054ce:	4d c0       	lddpc	r0,8000563c <setup_sens_twi+0x6c>
800054d0:	00 00       	add	r0,r0
800054d2:	06 14       	sub	r4,r3
800054d4:	80 00       	ld.sh	r0,r0[0x0]
800054d6:	51 cc       	stdsp	sp[0x70],r12
800054d8:	80 00       	ld.sh	r0,r0[0x0]
800054da:	59 10       	cp.w	r0,17

800054dc <setup_clocks>:
}

void setup_clocks(void){
800054dc:	eb cd 40 80 	pushm	r7,lr
800054e0:	1a 97       	mov	r7,sp
800054e2:	20 dd       	sub	sp,52
	scif_disable_rc32out();
800054e4:	f0 1f 00 1b 	mcall	80005550 <setup_clocks+0x74>
	
	pcl_freq_param_t pcl_params;
	scif_gclk_opt_t gclk_opts;
	
	pcl_params.main_clk_src = PCL_MC_DFLL0;
800054e8:	30 78       	mov	r8,7
800054ea:	ef 48 ff dc 	st.w	r7[-36],r8
	pcl_params.cpu_f = CPU_FREQ;
800054ee:	e0 68 78 40 	mov	r8,30784
800054f2:	ea 18 01 7d 	orh	r8,0x17d
800054f6:	ef 48 ff e0 	st.w	r7[-32],r8
	pcl_params.pba_f = CPU_FREQ;
800054fa:	e0 68 78 40 	mov	r8,30784
800054fe:	ea 18 01 7d 	orh	r8,0x17d
80005502:	ef 48 ff e4 	st.w	r7[-28],r8
	pcl_params.pbb_f = CPU_FREQ;
80005506:	e0 68 78 40 	mov	r8,30784
8000550a:	ea 18 01 7d 	orh	r8,0x17d
8000550e:	ef 48 ff e8 	st.w	r7[-24],r8
	pcl_params.pbc_f = CPU_FREQ;
80005512:	e0 68 78 40 	mov	r8,30784
80005516:	ea 18 01 7d 	orh	r8,0x17d
8000551a:	ef 48 ff ec 	st.w	r7[-20],r8
	pcl_params.dfll_f = DFLL_FREQ;
8000551e:	e0 68 e1 00 	mov	r8,57600
80005522:	ea 18 05 f5 	orh	r8,0x5f5
80005526:	ef 48 ff f8 	st.w	r7[-8],r8
	
	gclk_opts.clock_source = SCIF_GCCTRL_SLOWCLOCK;
8000552a:	30 08       	mov	r8,0
8000552c:	ef 48 ff cc 	st.w	r7[-52],r8
	gclk_opts.diven = false;
80005530:	30 08       	mov	r8,0
80005532:	ef 48 ff d4 	st.w	r7[-44],r8
	
	pcl_params.pextra_params = &gclk_opts;
80005536:	ee c8 00 34 	sub	r8,r7,52
8000553a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	pcl_configure_clocks(&pcl_params);
8000553e:	ee c8 00 24 	sub	r8,r7,36
80005542:	10 9c       	mov	r12,r8
80005544:	f0 1f 00 04 	mcall	80005554 <setup_clocks+0x78>
}
80005548:	2f 3d       	sub	sp,-52
8000554a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000554e:	00 00       	add	r0,r0
80005550:	80 00       	ld.sh	r0,r0[0x0]
80005552:	34 24       	mov	r4,66
80005554:	80 00       	ld.sh	r0,r0[0x0]
80005556:	2c 6c       	sub	r12,-58

80005558 <setup_gps_uart>:

void setup_gps_uart(void){
80005558:	eb cd 40 80 	pushm	r7,lr
8000555c:	1a 97       	mov	r7,sp
		.paritytype		= USART_NO_PARITY,
		.stopbits		= USART_1_STOPBIT,
		.channelmode	= USART_NORMAL_CHMODE
	};
	
	gpio_enable_module(USART_GPIO_MAP, 2);
8000555e:	30 2b       	mov	r11,2
80005560:	48 fc       	lddpc	r12,8000559c <setup_gps_uart+0x44>
80005562:	f0 1f 00 10 	mcall	800055a0 <setup_gps_uart+0x48>
	
	usart_init_rs232(&AVR32_USART3, &USART_OPTIONS, CPU_FREQ);
80005566:	e0 6a 78 40 	mov	r10,30784
8000556a:	ea 1a 01 7d 	orh	r10,0x17d
8000556e:	48 eb       	lddpc	r11,800055a4 <setup_gps_uart+0x4c>
80005570:	fe 7c 3c 00 	mov	r12,-50176
80005574:	f0 1f 00 0d 	mcall	800055a8 <setup_gps_uart+0x50>
	
	(&AVR32_USART3)->ier = AVR32_USART_IER_TIMEOUT_MASK;
80005578:	fe 78 3c 00 	mov	r8,-50176
8000557c:	e0 69 01 00 	mov	r9,256
80005580:	91 29       	st.w	r8[0x8],r9
	(&AVR32_USART3)->rtor = 100;
80005582:	fe 78 3c 00 	mov	r8,-50176
80005586:	36 49       	mov	r9,100
80005588:	91 99       	st.w	r8[0x24],r9
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
8000558a:	fe 78 3c 00 	mov	r8,-50176
8000558e:	fe 79 3c 00 	mov	r9,-50176
80005592:	72 09       	ld.w	r9,r9[0x0]
80005594:	ab b9       	sbr	r9,0xb
80005596:	91 09       	st.w	r8[0x0],r9
}
80005598:	e3 cd 80 80 	ldm	sp++,r7,pc
8000559c:	80 00       	ld.sh	r0,r0[0x0]
8000559e:	c7 88       	rjmp	8000568e <twim_write_dma+0x12>
800055a0:	80 00       	ld.sh	r0,r0[0x0]
800055a2:	21 8c       	sub	r12,24
800055a4:	80 00       	ld.sh	r0,r0[0x0]
800055a6:	c7 98       	rjmp	80005698 <twim_write_dma+0x1c>
800055a8:	80 00       	ld.sh	r0,r0[0x0]
800055aa:	3b 50       	mov	r0,-75

800055ac <setup_uart_dma>:

void setup_uart_dma(void){
800055ac:	eb cd 40 80 	pushm	r7,lr
800055b0:	1a 97       	mov	r7,sp
		.size = sizeof(usart_rx_buffer),
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(0, &PDCA_OPTIONS);
800055b2:	48 5b       	lddpc	r11,800055c4 <setup_uart_dma+0x18>
800055b4:	30 0c       	mov	r12,0
800055b6:	f0 1f 00 05 	mcall	800055c8 <setup_uart_dma+0x1c>
	pdca_enable(0);
800055ba:	30 0c       	mov	r12,0
800055bc:	f0 1f 00 04 	mcall	800055cc <setup_uart_dma+0x20>
}
800055c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800055c4:	80 00       	ld.sh	r0,r0[0x0]
800055c6:	c7 6c       	rcall	800056b2 <twim_write_dma+0x36>
800055c8:	80 00       	ld.sh	r0,r0[0x0]
800055ca:	27 68       	sub	r8,118
800055cc:	80 00       	ld.sh	r0,r0[0x0]
800055ce:	28 68       	sub	r8,-122

800055d0 <setup_sens_twi>:

void setup_sens_twi(void){
800055d0:	eb cd 40 80 	pushm	r7,lr
800055d4:	1a 97       	mov	r7,sp
800055d6:	20 4d       	sub	sp,16
	// Setup Pins
	gpio_enable_gpio_pin(AVR32_PIN_PA21);
800055d8:	31 5c       	mov	r12,21
800055da:	f0 1f 00 20 	mcall	80005658 <setup_sens_twi+0x88>
	gpio_enable_gpio_pin(AVR32_PIN_PB05);
800055de:	32 5c       	mov	r12,37
800055e0:	f0 1f 00 1e 	mcall	80005658 <setup_sens_twi+0x88>
	
	const gpio_map_t TWIM_PIN_MAP = {
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION},
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION}
	};
800055e4:	49 e9       	lddpc	r9,8000565c <setup_sens_twi+0x8c>
800055e6:	ee c8 00 10 	sub	r8,r7,16
800055ea:	20 08       	sub	r8,0
800055ec:	20 09       	sub	r9,0
800055ee:	72 0a       	ld.w	r10,r9[0x0]
800055f0:	91 0a       	st.w	r8[0x0],r10
800055f2:	72 1a       	ld.w	r10,r9[0x4]
800055f4:	91 1a       	st.w	r8[0x4],r10
800055f6:	72 2a       	ld.w	r10,r9[0x8]
800055f8:	91 2a       	st.w	r8[0x8],r10
800055fa:	72 39       	ld.w	r9,r9[0xc]
800055fc:	91 39       	st.w	r8[0xc],r9
	
	gpio_enable_module(TWIM_PIN_MAP, 2);
800055fe:	ee c8 00 10 	sub	r8,r7,16
80005602:	30 2b       	mov	r11,2
80005604:	10 9c       	mov	r12,r8
80005606:	f0 1f 00 17 	mcall	80005660 <setup_sens_twi+0x90>
	
	// Setup TWI
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MEN_MASK;	// Enable Master
8000560a:	fe 78 44 00 	mov	r8,-48128
8000560e:	30 19       	mov	r9,1
80005610:	91 09       	st.w	r8[0x0],r9
	AVR32_TWIM0.scr = ~0UL;	// Clear all Status
80005612:	fe 78 44 00 	mov	r8,-48128
80005616:	3f f9       	mov	r9,-1
80005618:	91 b9       	st.w	r8[0x2c],r9
	
	twim_set_speed(&AVR32_TWIM0, 200000UL, PBA_FREQ);	// Set to 200kHz
8000561a:	e0 6a 78 40 	mov	r10,30784
8000561e:	ea 1a 01 7d 	orh	r10,0x17d
80005622:	e2 7b 0d 40 	mov	r11,200000
80005626:	fe 7c 44 00 	mov	r12,-48128
8000562a:	f0 1f 00 0f 	mcall	80005664 <setup_sens_twi+0x94>
		.size = 6,
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(1, &PDCA_OPTIONS1);
8000562e:	48 fb       	lddpc	r11,80005668 <setup_sens_twi+0x98>
80005630:	30 1c       	mov	r12,1
80005632:	f0 1f 00 0f 	mcall	8000566c <setup_sens_twi+0x9c>
	pdca_enable_interrupt_transfer_complete(1);
80005636:	30 1c       	mov	r12,1
80005638:	f0 1f 00 0e 	mcall	80005670 <setup_sens_twi+0xa0>
	pdca_enable(1);
8000563c:	30 1c       	mov	r12,1
8000563e:	f0 1f 00 0e 	mcall	80005674 <setup_sens_twi+0xa4>
		.size = 0,
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(2, &PDCA_OPTIONS2);
80005642:	48 eb       	lddpc	r11,80005678 <setup_sens_twi+0xa8>
80005644:	30 2c       	mov	r12,2
80005646:	f0 1f 00 0a 	mcall	8000566c <setup_sens_twi+0x9c>
	pdca_enable(2);
8000564a:	30 2c       	mov	r12,2
8000564c:	f0 1f 00 0a 	mcall	80005674 <setup_sens_twi+0xa4>
}
80005650:	2f cd       	sub	sp,-16
80005652:	e3 cd 80 80 	ldm	sp++,r7,pc
80005656:	00 00       	add	r0,r0
80005658:	80 00       	ld.sh	r0,r0[0x0]
8000565a:	24 78       	sub	r8,71
8000565c:	80 00       	ld.sh	r0,r0[0x0]
8000565e:	c7 24       	brge	80005742 <twim_write_blocking+0x56>
80005660:	80 00       	ld.sh	r0,r0[0x0]
80005662:	21 8c       	sub	r12,24
80005664:	80 00       	ld.sh	r0,r0[0x0]
80005666:	39 42       	mov	r2,-108
80005668:	80 00       	ld.sh	r0,r0[0x0]
8000566a:	c7 34       	brge	80005750 <twim_write_blocking+0x64>
8000566c:	80 00       	ld.sh	r0,r0[0x0]
8000566e:	27 68       	sub	r8,118
80005670:	80 00       	ld.sh	r0,r0[0x0]
80005672:	29 58       	sub	r8,-107
80005674:	80 00       	ld.sh	r0,r0[0x0]
80005676:	28 68       	sub	r8,-122
80005678:	80 00       	ld.sh	r0,r0[0x0]
8000567a:	c7 50       	breq	80005764 <twim_write_blocking+0x78>

8000567c <twim_write_dma>:

void twim_write_dma(volatile avr32_twim_t *twim, uint8_t dma_ch, uint8_t saddr, uint8_t *bytes, uint8_t len){
8000567c:	eb cd 40 80 	pushm	r7,lr
80005680:	1a 97       	mov	r7,sp
80005682:	20 5d       	sub	sp,20
80005684:	ef 4c ff fc 	st.w	r7[-4],r12
80005688:	ef 49 ff f0 	st.w	r7[-16],r9
8000568c:	16 99       	mov	r9,r11
8000568e:	ef 69 ff f8 	st.b	r7[-8],r9
80005692:	14 99       	mov	r9,r10
80005694:	ef 69 ff f4 	st.b	r7[-12],r9
80005698:	ef 68 ff ec 	st.b	r7[-20],r8
	// Load DMA
	pdca_load_channel(dma_ch, (void *)bytes, len);
8000569c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800056a0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800056a4:	12 9a       	mov	r10,r9
800056a6:	ee fb ff f0 	ld.w	r11,r7[-16]
800056aa:	10 9c       	mov	r12,r8
800056ac:	f0 1f 00 0f 	mcall	800056e8 <twim_write_dma+0x6c>
	
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
800056b0:	c0 38       	rjmp	800056b6 <twim_write_dma+0x3a>
		cpu_relax();
800056b2:	fe cf ff fc 	sub	pc,pc,-4
void twim_write_dma(volatile avr32_twim_t *twim, uint8_t dma_ch, uint8_t saddr, uint8_t *bytes, uint8_t len){
	// Load DMA
	pdca_load_channel(dma_ch, (void *)bytes, len);
	
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
800056b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056ba:	70 78       	ld.w	r8,r8[0x1c]
800056bc:	e2 18 00 10 	andl	r8,0x10,COH
800056c0:	cf 90       	breq	800056b2 <twim_write_dma+0x36>
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
800056c2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800056c6:	f0 09 15 01 	lsl	r9,r8,0x1
	| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
800056ca:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800056ce:	b1 68       	lsl	r8,0x10
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
800056d0:	f3 e8 10 08 	or	r8,r9,r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
800056d4:	e8 18 e0 00 	orl	r8,0xe000
800056d8:	10 99       	mov	r9,r8
800056da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056de:	91 39       	st.w	r8[0xc],r9
	| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop after NBYTES
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
}
800056e0:	2f bd       	sub	sp,-20
800056e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800056e6:	00 00       	add	r0,r0
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	28 98       	sub	r8,-119

800056ec <twim_write_blocking>:

void twim_write_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t *bytes, uint8_t len){
800056ec:	eb cd 40 80 	pushm	r7,lr
800056f0:	1a 97       	mov	r7,sp
800056f2:	20 5d       	sub	sp,20
800056f4:	ef 4c ff f8 	st.w	r7[-8],r12
800056f8:	ef 4a ff f0 	st.w	r7[-16],r10
800056fc:	12 98       	mov	r8,r9
800056fe:	16 99       	mov	r9,r11
80005700:	ef 69 ff f4 	st.b	r7[-12],r9
80005704:	ef 68 ff ec 	st.b	r7[-20],r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005708:	c0 38       	rjmp	8000570e <twim_write_blocking+0x22>
		cpu_relax();
8000570a:	fe cf ff fc 	sub	pc,pc,-4
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
}

void twim_write_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t *bytes, uint8_t len){
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
8000570e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005712:	70 78       	ld.w	r8,r8[0x1c]
80005714:	e2 18 00 10 	andl	r8,0x10,COH
80005718:	cf 90       	breq	8000570a <twim_write_blocking+0x1e>
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
8000571a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000571e:	f0 09 15 01 	lsl	r9,r8,0x1
			| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
80005722:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005726:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
80005728:	f3 e8 10 08 	or	r8,r9,r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
8000572c:	e8 18 e0 00 	orl	r8,0xe000
80005730:	10 99       	mov	r9,r8
80005732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005736:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
			| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
			| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop after NBYTES
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	twim->thr = *bytes++;	// Load data
80005738:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000573c:	11 88       	ld.ub	r8,r8[0x0]
8000573e:	10 99       	mov	r9,r8
80005740:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005744:	91 69       	st.w	r8[0x18],r9
80005746:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000574a:	2f f8       	sub	r8,-1
8000574c:	ef 48 ff f0 	st.w	r7[-16],r8
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
80005750:	30 08       	mov	r8,0
80005752:	ef 48 ff fc 	st.w	r7[-4],r8
80005756:	c1 c8       	rjmp	8000578e <twim_write_blocking+0xa2>
		// Wait for TXRDY
		while(!(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)){
			cpu_relax();
80005758:	fe cf ff fc 	sub	pc,pc,-4
8000575c:	c0 28       	rjmp	80005760 <twim_write_blocking+0x74>
	twim->thr = *bytes++;	// Load data
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
		// Wait for TXRDY
		while(!(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)){
8000575e:	d7 03       	nop
80005760:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005764:	70 78       	ld.w	r8,r8[0x1c]
80005766:	e2 18 00 02 	andl	r8,0x2,COH
8000576a:	cf 70       	breq	80005758 <twim_write_blocking+0x6c>
			cpu_relax();
		}
		
		twim->thr = *bytes++;
8000576c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005770:	11 88       	ld.ub	r8,r8[0x0]
80005772:	10 99       	mov	r9,r8
80005774:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005778:	91 69       	st.w	r8[0x18],r9
8000577a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000577e:	2f f8       	sub	r8,-1
80005780:	ef 48 ff f0 	st.w	r7[-16],r8
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	twim->thr = *bytes++;	// Load data
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
80005784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005788:	2f f8       	sub	r8,-1
8000578a:	ef 48 ff fc 	st.w	r7[-4],r8
8000578e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005792:	20 18       	sub	r8,1
80005794:	10 99       	mov	r9,r8
80005796:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000579a:	10 39       	cp.w	r9,r8
8000579c:	fe 9b ff e1 	brhi	8000575e <twim_write_blocking+0x72>
			cpu_relax();
		}
		
		twim->thr = *bytes++;
	}
}
800057a0:	2f bd       	sub	sp,-20
800057a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800057a6 <twim_read_blocking>:

uint8_t twim_read_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t raddr){
800057a6:	eb cd 40 80 	pushm	r7,lr
800057aa:	1a 97       	mov	r7,sp
800057ac:	20 3d       	sub	sp,12
800057ae:	ef 4c ff fc 	st.w	r7[-4],r12
800057b2:	16 99       	mov	r9,r11
800057b4:	14 98       	mov	r8,r10
800057b6:	ef 69 ff f8 	st.b	r7[-8],r9
800057ba:	ef 68 ff f4 	st.b	r7[-12],r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
800057be:	c0 38       	rjmp	800057c4 <twim_read_blocking+0x1e>
		cpu_relax();
800057c0:	fe cf ff fc 	sub	pc,pc,-4
	}
}

uint8_t twim_read_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t raddr){
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
800057c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057c8:	70 78       	ld.w	r8,r8[0x1c]
800057ca:	e2 18 00 10 	andl	r8,0x10,COH
800057ce:	cf 90       	breq	800057c0 <twim_read_blocking+0x1a>
		cpu_relax();
	}
	
	// Write Read Address
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
800057d0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057d4:	a1 78       	lsl	r8,0x1
800057d6:	ea 18 00 01 	orh	r8,0x1
800057da:	e8 18 a0 00 	orl	r8,0xa000
800057de:	10 99       	mov	r9,r8
800057e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057e4:	91 39       	st.w	r8[0xc],r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Byte
	twim->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
800057e6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800057ea:	a1 78       	lsl	r8,0x1
800057ec:	ea 18 00 01 	orh	r8,0x1
800057f0:	e8 18 e0 01 	orl	r8,0xe001
800057f4:	10 99       	mov	r9,r8
800057f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057fa:	91 49       	st.w	r8[0x10],r9
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
		
	// Start Read Address Write
	twim->thr = raddr;
800057fc:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80005800:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005804:	91 69       	st.w	r8[0x18],r9
	
	// Wait For Read Byte
	while(!(twim->sr & AVR32_TWIM_SR_RXRDY_MASK)){
80005806:	c0 38       	rjmp	8000580c <twim_read_blocking+0x66>
		cpu_relax();
80005808:	fe cf ff fc 	sub	pc,pc,-4
		
	// Start Read Address Write
	twim->thr = raddr;
	
	// Wait For Read Byte
	while(!(twim->sr & AVR32_TWIM_SR_RXRDY_MASK)){
8000580c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005810:	70 78       	ld.w	r8,r8[0x1c]
80005812:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005816:	cf 90       	breq	80005808 <twim_read_blocking+0x62>
		cpu_relax();
	}
	
	return twim->rhr;
80005818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000581c:	70 58       	ld.w	r8,r8[0x14]
8000581e:	5c 58       	castu.b	r8
}
80005820:	10 9c       	mov	r12,r8
80005822:	2f dd       	sub	sp,-12
80005824:	e3 cd 80 80 	ldm	sp++,r7,pc

80005828 <setup_magnetometer>:

void setup_magnetometer(void){
80005828:	eb cd 40 80 	pushm	r7,lr
8000582c:	1a 97       	mov	r7,sp
	// Device Address = 0x0E
	// CTRL_REG1 = 0x10
	// ODR = 5Hz, OSR = 64, Enable => 0x51
	static const uint8_t bytes1[] = {0x10, 0x51};
	twim_write_blocking(&AVR32_TWIM0,0x0E,bytes1,2);
8000582e:	30 29       	mov	r9,2
80005830:	48 8a       	lddpc	r10,80005850 <setup_magnetometer+0x28>
80005832:	30 eb       	mov	r11,14
80005834:	fe 7c 44 00 	mov	r12,-48128
80005838:	f0 1f 00 07 	mcall	80005854 <setup_magnetometer+0x2c>
	
	// CTRL_REG2 = 0x11
	// AUTO_MRST_EN = 1 => 0x80
	static const uint8_t bytes2[] = {0x11, 0x80};
	twim_write_blocking(&AVR32_TWIM0,0x0E,bytes2,2);
8000583c:	30 29       	mov	r9,2
8000583e:	48 7a       	lddpc	r10,80005858 <setup_magnetometer+0x30>
80005840:	30 eb       	mov	r11,14
80005842:	fe 7c 44 00 	mov	r12,-48128
80005846:	f0 1f 00 04 	mcall	80005854 <setup_magnetometer+0x2c>
}
8000584a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000584e:	00 00       	add	r0,r0
80005850:	80 00       	ld.sh	r0,r0[0x0]
80005852:	c7 1c       	rcall	80005934 <sens_rx_start+0x24>
80005854:	80 00       	ld.sh	r0,r0[0x0]
80005856:	56 ec       	stdsp	sp[0x1b8],r12
80005858:	80 00       	ld.sh	r0,r0[0x0]
8000585a:	c7 20       	breq	8000593e <sens_rx_start+0x2e>

8000585c <setup_barometer>:

void setup_barometer(void){
8000585c:	eb cd 40 c0 	pushm	r6-r7,lr
80005860:	1a 97       	mov	r7,sp
80005862:	20 3d       	sub	sp,12
	// Disable DMA
	pdca_disable(1);
80005864:	30 1c       	mov	r12,1
80005866:	f0 1f 00 27 	mcall	80005900 <setup_barometer+0xa4>
	
	uint32_t data = 0;
8000586a:	30 08       	mov	r8,0
8000586c:	ef 48 ff f4 	st.w	r7[-12],r8
	volatile avr32_twim_t *twim = &AVR32_TWIM0;
80005870:	fe 78 44 00 	mov	r8,-48128
80005874:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// Get Calibration Data	
	for(uint32_t i=0; i<11; i++){
80005878:	30 08       	mov	r8,0
8000587a:	ef 48 ff fc 	st.w	r7[-4],r8
8000587e:	c3 68       	rjmp	800058ea <setup_barometer+0x8e>
		// Get MSB
		data = twim_read_blocking(twim, 0x77, (0xAA+2*i));
80005880:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005884:	2a b8       	sub	r8,-85
80005886:	5c 58       	castu.b	r8
80005888:	a1 78       	lsl	r8,0x1
8000588a:	5c 58       	castu.b	r8
8000588c:	10 9a       	mov	r10,r8
8000588e:	37 7b       	mov	r11,119
80005890:	ee fc ff f8 	ld.w	r12,r7[-8]
80005894:	f0 1f 00 1c 	mcall	80005904 <setup_barometer+0xa8>
80005898:	18 98       	mov	r8,r12
8000589a:	ef 48 ff f4 	st.w	r7[-12],r8
		// Get LSB
		data = (data<<8)|twim_read_blocking(twim, 0x77, 0xAA+2*i+1);
8000589e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058a2:	f0 06 15 08 	lsl	r6,r8,0x8
800058a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058aa:	2a b8       	sub	r8,-85
800058ac:	5c 58       	castu.b	r8
800058ae:	a1 78       	lsl	r8,0x1
800058b0:	5c 58       	castu.b	r8
800058b2:	2f f8       	sub	r8,-1
800058b4:	5c 58       	castu.b	r8
800058b6:	10 9a       	mov	r10,r8
800058b8:	37 7b       	mov	r11,119
800058ba:	ee fc ff f8 	ld.w	r12,r7[-8]
800058be:	f0 1f 00 12 	mcall	80005904 <setup_barometer+0xa8>
800058c2:	18 98       	mov	r8,r12
800058c4:	ed e8 10 08 	or	r8,r6,r8
800058c8:	ef 48 ff f4 	st.w	r7[-12],r8
		
		*((uint16_t *)&bmp180_cal_data+i) = data;
800058cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058d0:	f0 09 15 01 	lsl	r9,r8,0x1
800058d4:	48 d8       	lddpc	r8,80005908 <setup_barometer+0xac>
800058d6:	10 09       	add	r9,r8
800058d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058dc:	5c 88       	casts.h	r8
800058de:	b2 08       	st.h	r9[0x0],r8
	
	uint32_t data = 0;
	volatile avr32_twim_t *twim = &AVR32_TWIM0;
	
	// Get Calibration Data	
	for(uint32_t i=0; i<11; i++){
800058e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058e4:	2f f8       	sub	r8,-1
800058e6:	ef 48 ff fc 	st.w	r7[-4],r8
800058ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058ee:	58 a8       	cp.w	r8,10
800058f0:	fe 98 ff c8 	brls	80005880 <setup_barometer+0x24>
		data = (data<<8)|twim_read_blocking(twim, 0x77, 0xAA+2*i+1);
		
		*((uint16_t *)&bmp180_cal_data+i) = data;
	}
	
	pdca_enable(1);
800058f4:	30 1c       	mov	r12,1
800058f6:	f0 1f 00 06 	mcall	8000590c <setup_barometer+0xb0>
}
800058fa:	2f dd       	sub	sp,-12
800058fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005900:	80 00       	ld.sh	r0,r0[0x0]
80005902:	28 38       	sub	r8,-125
80005904:	80 00       	ld.sh	r0,r0[0x0]
80005906:	57 a6       	stdsp	sp[0x1e8],r6
80005908:	00 00       	add	r0,r0
8000590a:	06 50       	eor	r0,r3
8000590c:	80 00       	ld.sh	r0,r0[0x0]
8000590e:	28 68       	sub	r8,-122

80005910 <sens_rx_start>:

void sens_rx_start(void){
80005910:	eb cd 40 80 	pushm	r7,lr
80005914:	1a 97       	mov	r7,sp
80005916:	20 1d       	sub	sp,4
	uint8_t length;
	uint8_t saddr;
	uint8_t raddr;
	
	switch(sens_rx_state){
80005918:	4a 78       	lddpc	r8,800059b4 <sens_rx_start+0xa4>
8000591a:	70 08       	ld.w	r8,r8[0x0]
8000591c:	58 18       	cp.w	r8,1
8000591e:	c0 e0       	breq	8000593a <sens_rx_start+0x2a>
80005920:	c0 33       	brcs	80005926 <sens_rx_start+0x16>
80005922:	58 28       	cp.w	r8,2
80005924:	c4 31       	brne	800059aa <sens_rx_start+0x9a>
		case SENS_STATE_PRESSURE:
		case SENS_STATE_TEMP:
			length = 3;
80005926:	30 38       	mov	r8,3
80005928:	ef 68 ff fd 	st.b	r7[-3],r8
			saddr = 0x77;
8000592c:	37 78       	mov	r8,119
8000592e:	ef 68 ff fe 	st.b	r7[-2],r8
			raddr = 0xF6;
80005932:	3f 68       	mov	r8,-10
80005934:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
80005938:	c0 b8       	rjmp	8000594e <sens_rx_start+0x3e>
			
		case SENS_STATE_MAG:
			length = 6;
8000593a:	30 68       	mov	r8,6
8000593c:	ef 68 ff fd 	st.b	r7[-3],r8
			saddr = 0x0E;
80005940:	30 e8       	mov	r8,14
80005942:	ef 68 ff fe 	st.b	r7[-2],r8
			raddr = 0x01;
80005946:	30 18       	mov	r8,1
80005948:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
8000594c:	d7 03       	nop
		default:
			return;
	}
	
	// Setup DMA
	pdca_load_channel(1,(void *)sens_rx_buffer,length);
8000594e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80005952:	10 9a       	mov	r10,r8
80005954:	49 9b       	lddpc	r11,800059b8 <sens_rx_start+0xa8>
80005956:	30 1c       	mov	r12,1
80005958:	f0 1f 00 19 	mcall	800059bc <sens_rx_start+0xac>
	
	// Wait For TWIM Idle
	while(!(AVR32_TWIM0.sr & AVR32_TWIM_SR_IDLE_MASK)){
8000595c:	c0 38       	rjmp	80005962 <sens_rx_start+0x52>
		cpu_relax();
8000595e:	fe cf ff fc 	sub	pc,pc,-4
	
	// Setup DMA
	pdca_load_channel(1,(void *)sens_rx_buffer,length);
	
	// Wait For TWIM Idle
	while(!(AVR32_TWIM0.sr & AVR32_TWIM_SR_IDLE_MASK)){
80005962:	fe 78 44 00 	mov	r8,-48128
80005966:	70 78       	ld.w	r8,r8[0x1c]
80005968:	e2 18 00 10 	andl	r8,0x10,COH
8000596c:	cf 90       	breq	8000595e <sens_rx_start+0x4e>
		cpu_relax();
	}
	
	// Read Address write
	AVR32_TWIM0.cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
8000596e:	fe 78 44 00 	mov	r8,-48128
80005972:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005976:	a1 79       	lsl	r9,0x1
80005978:	ea 19 00 01 	orh	r9,0x1
8000597c:	e8 19 a0 00 	orl	r9,0xa000
80005980:	91 39       	st.w	r8[0xc],r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Bytes
	AVR32_TWIM0.ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005982:	fe 78 44 00 	mov	r8,-48128
80005986:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000598a:	f2 0a 15 01 	lsl	r10,r9,0x1
	| (length << AVR32_TWIM_CMDR_NBYTES_OFFSET)		// Num Bytes
8000598e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005992:	b1 69       	lsl	r9,0x10
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
80005994:	f5 e9 10 09 	or	r9,r10,r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Bytes
	AVR32_TWIM0.ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005998:	e8 19 e0 01 	orl	r9,0xe001
8000599c:	91 49       	st.w	r8[0x10],r9
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
	
	// Initial Read Address Write
	AVR32_TWIM0.thr = raddr;
8000599e:	fe 78 44 00 	mov	r8,-48128
800059a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800059a6:	91 69       	st.w	r8[0x18],r9
800059a8:	c0 28       	rjmp	800059ac <sens_rx_start+0x9c>
			saddr = 0x0E;
			raddr = 0x01;
			break;
			
		default:
			return;
800059aa:	d7 03       	nop
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
	
	// Initial Read Address Write
	AVR32_TWIM0.thr = raddr;
}
800059ac:	2f fd       	sub	sp,-4
800059ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800059b2:	00 00       	add	r0,r0
800059b4:	00 00       	add	r0,r0
800059b6:	06 0c       	add	r12,r3
800059b8:	00 00       	add	r0,r0
800059ba:	09 1c       	ld.sh	r12,r4++
800059bc:	80 00       	ld.sh	r0,r0[0x0]
800059be:	28 98       	sub	r8,-119

800059c0 <setup_tick>:

void setup_tick(void){
800059c0:	eb cd 40 80 	pushm	r7,lr
800059c4:	1a 97       	mov	r7,sp
		.cpas = 0,
		.lovrs = 0,
		.covfs = 0
	};
	
	tc_init_waveform(&AVR32_TC0, &waveform_opt);
800059c6:	48 db       	lddpc	r11,800059f8 <setup_tick+0x38>
800059c8:	fe 7c 58 00 	mov	r12,-43008
800059cc:	f0 1f 00 0c 	mcall	800059fc <setup_tick+0x3c>
	// Achieve TICK_RATE ticks, but empty slot before GPS packet
	// for margin.
	tc_write_rc(&AVR32_TC0, 0, PBA_FREQ/128/(TICK_RATE+1));
800059d0:	e0 6a 24 54 	mov	r10,9300
800059d4:	30 0b       	mov	r11,0
800059d6:	fe 7c 58 00 	mov	r12,-43008
800059da:	f0 1f 00 0a 	mcall	80005a00 <setup_tick+0x40>
	tc_configure_interrupts(&AVR32_TC0, 0, &tc_interrupt);
800059de:	48 aa       	lddpc	r10,80005a04 <setup_tick+0x44>
800059e0:	30 0b       	mov	r11,0
800059e2:	fe 7c 58 00 	mov	r12,-43008
800059e6:	f0 1f 00 09 	mcall	80005a08 <setup_tick+0x48>
	
	tc_start(&AVR32_TC0, 0);
800059ea:	30 0b       	mov	r11,0
800059ec:	fe 7c 58 00 	mov	r12,-43008
800059f0:	f0 1f 00 07 	mcall	80005a0c <setup_tick+0x4c>
}
800059f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800059f8:	80 00       	ld.sh	r0,r0[0x0]
800059fa:	c7 10       	breq	80005adc <__avr32_f32_div+0x74>
800059fc:	80 00       	ld.sh	r0,r0[0x0]
800059fe:	37 3c       	mov	r12,115
80005a00:	80 00       	ld.sh	r0,r0[0x0]
80005a02:	38 ca       	mov	r10,-116
80005a04:	80 00       	ld.sh	r0,r0[0x0]
80005a06:	c7 18       	rjmp	80005ae8 <__avr32_f32_div+0x80>
80005a08:	80 00       	ld.sh	r0,r0[0x0]
80005a0a:	35 54       	mov	r4,85
80005a0c:	80 00       	ld.sh	r0,r0[0x0]
80005a0e:	38 90       	mov	r0,-119

80005a10 <setup_interrupts>:

void setup_interrupts(void){
80005a10:	eb cd 40 80 	pushm	r7,lr
80005a14:	1a 97       	mov	r7,sp
	Disable_global_interrupt();
80005a16:	d3 03       	ssrf	0x10
	
	INTC_init_interrupts();
80005a18:	f0 1f 00 0c 	mcall	80005a48 <setup_interrupts+0x38>
	INTC_register_interrupt(&usart_timeout_handler, AVR32_USART3_IRQ, AVR32_INTC_INT0);
80005a1c:	30 0a       	mov	r10,0
80005a1e:	e0 6b 02 40 	mov	r11,576
80005a22:	48 bc       	lddpc	r12,80005a4c <setup_interrupts+0x3c>
80005a24:	f0 1f 00 0b 	mcall	80005a50 <setup_interrupts+0x40>
	INTC_register_interrupt(&sens_rx_complete_handler, AVR32_PDCA_IRQ_1, AVR32_INTC_INT0);
80005a28:	30 0a       	mov	r10,0
80005a2a:	e0 6b 00 81 	mov	r11,129
80005a2e:	48 ac       	lddpc	r12,80005a54 <setup_interrupts+0x44>
80005a30:	f0 1f 00 08 	mcall	80005a50 <setup_interrupts+0x40>
	INTC_register_interrupt(&tick_handler, AVR32_TC0_IRQ0, AVR32_INTC_INT0);
80005a34:	30 0a       	mov	r10,0
80005a36:	e0 6b 03 20 	mov	r11,800
80005a3a:	48 8c       	lddpc	r12,80005a58 <setup_interrupts+0x48>
80005a3c:	f0 1f 00 05 	mcall	80005a50 <setup_interrupts+0x40>
	
	Enable_global_interrupt();
80005a40:	d5 03       	csrf	0x10
80005a42:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a46:	00 00       	add	r0,r0
80005a48:	80 00       	ld.sh	r0,r0[0x0]
80005a4a:	25 54       	sub	r4,85
80005a4c:	80 00       	ld.sh	r0,r0[0x0]
80005a4e:	51 dc       	stdsp	sp[0x74],r12
80005a50:	80 00       	ld.sh	r0,r0[0x0]
80005a52:	25 f0       	sub	r0,95
80005a54:	80 00       	ld.sh	r0,r0[0x0]
80005a56:	52 a8       	stdsp	sp[0xa8],r8
80005a58:	80 00       	ld.sh	r0,r0[0x0]
80005a5a:	53 00       	stdsp	sp[0xc0],r0

80005a5c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
80005a5c:	eb cd 40 80 	pushm	r7,lr
80005a60:	1a 97       	mov	r7,sp
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
80005a62:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a66:	d7 03       	nop

80005a68 <__avr32_f32_div>:
80005a68:	f7 ec 20 08 	eor	r8,r11,r12
80005a6c:	a1 7c       	lsl	r12,0x1
80005a6e:	a1 7b       	lsl	r11,0x1
80005a70:	c7 a0       	breq	80005b64 <__divsf_return_op1+0x16>
80005a72:	18 7c       	tst	r12,r12
80005a74:	f9 b9 00 00 	moveq	r9,0
80005a78:	c0 90       	breq	80005a8a <__avr32_f32_div+0x22>
80005a7a:	f8 09 16 18 	lsr	r9,r12,0x18
80005a7e:	c7 e0       	breq	80005b7a <__divsf_return_op1+0x2c>
80005a80:	e0 49 00 ff 	cp.w	r9,255
80005a84:	c6 82       	brcc	80005b54 <__divsf_return_op1+0x6>
80005a86:	a7 7c       	lsl	r12,0x7
80005a88:	bf bc       	sbr	r12,0x1f
80005a8a:	f6 0a 16 18 	lsr	r10,r11,0x18
80005a8e:	c7 e0       	breq	80005b8a <__divsf_return_op1+0x3c>
80005a90:	e0 4a 00 ff 	cp.w	r10,255
80005a94:	c6 62       	brcc	80005b60 <__divsf_return_op1+0x12>
80005a96:	a7 7b       	lsl	r11,0x7
80005a98:	bf bb       	sbr	r11,0x1f
80005a9a:	58 09       	cp.w	r9,0
80005a9c:	f5 bc 00 00 	subfeq	r12,0
80005aa0:	5e 0d       	reteq	0
80005aa2:	1a d5       	st.w	--sp,r5
80005aa4:	bb 27       	st.d	--sp,r6
80005aa6:	14 19       	sub	r9,r10
80005aa8:	28 19       	sub	r9,-127
80005aaa:	fc 1a 80 00 	movh	r10,0x8000
80005aae:	a3 8c       	lsr	r12,0x2
80005ab0:	f6 05 16 02 	lsr	r5,r11,0x2
80005ab4:	f4 0b 16 01 	lsr	r11,r10,0x1
80005ab8:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80005abc:	5c d6       	com	r6
80005abe:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80005ac2:	f6 05 06 46 	mulu.d	r6,r11,r5
80005ac6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005aca:	f6 07 06 46 	mulu.d	r6,r11,r7
80005ace:	ee 0b 15 02 	lsl	r11,r7,0x2
80005ad2:	f6 05 06 46 	mulu.d	r6,r11,r5
80005ad6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005ada:	f6 07 06 46 	mulu.d	r6,r11,r7
80005ade:	ee 0b 15 02 	lsl	r11,r7,0x2
80005ae2:	f6 05 06 46 	mulu.d	r6,r11,r5
80005ae6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005aea:	f6 07 06 46 	mulu.d	r6,r11,r7
80005aee:	ee 0b 15 02 	lsl	r11,r7,0x2
80005af2:	f6 05 06 46 	mulu.d	r6,r11,r5
80005af6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80005afa:	f6 07 06 46 	mulu.d	r6,r11,r7
80005afe:	ee 0b 15 02 	lsl	r11,r7,0x2
80005b02:	f6 0c 06 46 	mulu.d	r6,r11,r12
80005b06:	a5 8c       	lsr	r12,0x4
80005b08:	ed b7 00 1c 	bld	r7,0x1c
80005b0c:	c0 40       	breq	80005b14 <__avr32_f32_div+0xac>
80005b0e:	a1 77       	lsl	r7,0x1
80005b10:	20 19       	sub	r9,1
80005b12:	a1 7c       	lsl	r12,0x1
80005b14:	58 09       	cp.w	r9,0
80005b16:	e0 8a 00 42 	brle	80005b9a <__avr32_f32_div_res_subnormal>
80005b1a:	e0 17 ff e0 	andl	r7,0xffe0
80005b1e:	e8 17 00 10 	orl	r7,0x10
80005b22:	ea 07 06 4a 	mulu.d	r10,r5,r7
80005b26:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80005b2a:	58 0a       	cp.w	r10,0

80005b2c <__avr32_f32_div_round_subnormal>:
80005b2c:	f8 0b 13 00 	cpc	r11,r12
80005b30:	5f 3b       	srlo	r11
80005b32:	ea 0b 17 00 	moveq	r11,r5
80005b36:	ee 0c 16 05 	lsr	r12,r7,0x5
80005b3a:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80005b3e:	bb 07       	ld.d	r6,sp++
80005b40:	1b 05       	ld.w	r5,sp++
80005b42:	ed b8 00 1f 	bld	r8,0x1f
80005b46:	ef bc 00 1f 	bst	r12,0x1f
80005b4a:	16 0c       	add	r12,r11
80005b4c:	5e fc       	retal	r12

80005b4e <__divsf_return_op1>:
80005b4e:	a1 78       	lsl	r8,0x1
80005b50:	5d 0c       	ror	r12
80005b52:	5e fc       	retal	r12
80005b54:	5e 1e       	retne	-1
80005b56:	fc 19 ff 00 	movh	r9,0xff00
80005b5a:	12 3b       	cp.w	r11,r9
80005b5c:	cf 93       	brcs	80005b4e <__divsf_return_op1>
80005b5e:	5e fe       	retal	-1
80005b60:	5e 0d       	reteq	0
80005b62:	5e fe       	retal	-1
80005b64:	18 7c       	tst	r12,r12
80005b66:	5e 0e       	reteq	-1
80005b68:	f8 09 16 18 	lsr	r9,r12,0x18
80005b6c:	c0 70       	breq	80005b7a <__divsf_return_op1+0x2c>
80005b6e:	e0 49 00 ff 	cp.w	r9,255
80005b72:	cf 12       	brcc	80005b54 <__divsf_return_op1+0x6>
80005b74:	fc 1c ff 00 	movh	r12,0xff00
80005b78:	ce bb       	rjmp	80005b4e <__divsf_return_op1>
80005b7a:	a7 7c       	lsl	r12,0x7
80005b7c:	f8 09 12 00 	clz	r9,r12
80005b80:	f8 09 09 4c 	lsl	r12,r12,r9
80005b84:	f2 09 11 01 	rsub	r9,r9,1
80005b88:	c8 1b       	rjmp	80005a8a <__avr32_f32_div+0x22>
80005b8a:	a7 7b       	lsl	r11,0x7
80005b8c:	f6 0a 12 00 	clz	r10,r11
80005b90:	f6 0a 09 4b 	lsl	r11,r11,r10
80005b94:	f4 0a 11 01 	rsub	r10,r10,1
80005b98:	c8 5b       	rjmp	80005aa2 <__avr32_f32_div+0x3a>

80005b9a <__avr32_f32_div_res_subnormal>:
80005b9a:	5c 39       	neg	r9
80005b9c:	2f f9       	sub	r9,-1
80005b9e:	f1 b9 04 a0 	satu	r9,0x5
80005ba2:	f2 0a 11 20 	rsub	r10,r9,32
80005ba6:	ee 09 0a 47 	lsr	r7,r7,r9
80005baa:	f8 0a 09 46 	lsl	r6,r12,r10
80005bae:	f8 09 0a 4c 	lsr	r12,r12,r9
80005bb2:	e0 17 ff e0 	andl	r7,0xffe0
80005bb6:	e8 17 00 10 	orl	r7,0x10
80005bba:	ea 07 06 4a 	mulu.d	r10,r5,r7
80005bbe:	30 09       	mov	r9,0
80005bc0:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80005bc4:	0c 3a       	cp.w	r10,r6
80005bc6:	cb 3b       	rjmp	80005b2c <__avr32_f32_div_round_subnormal>

80005bc8 <__avr32_f32_sub_from_add>:
80005bc8:	ee 1b 80 00 	eorh	r11,0x8000

80005bcc <__avr32_f32_sub>:
80005bcc:	f7 ec 20 08 	eor	r8,r11,r12
80005bd0:	c6 46       	brmi	80005c98 <__avr32_f32_add_from_sub>
80005bd2:	18 98       	mov	r8,r12
80005bd4:	e6 1c 80 00 	andh	r12,0x8000,COH
80005bd8:	bf db       	cbr	r11,0x1f
80005bda:	bf d8       	cbr	r8,0x1f
80005bdc:	f0 0b 0c 4a 	max	r10,r8,r11
80005be0:	f0 0b 0d 49 	min	r9,r8,r11
80005be4:	10 3a       	cp.w	r10,r8
80005be6:	f7 bc 01 01 	subne	r12,1
80005bea:	e6 1c 80 00 	andh	r12,0x8000,COH
80005bee:	f4 08 15 08 	lsl	r8,r10,0x8
80005bf2:	bf b8       	sbr	r8,0x1f
80005bf4:	b7 9a       	lsr	r10,0x17
80005bf6:	e0 4a 00 ff 	cp.w	r10,255
80005bfa:	c3 80       	breq	80005c6a <__avr32_f32_sub_op1_nan_or_inf>
80005bfc:	f2 0b 15 08 	lsl	r11,r9,0x8
80005c00:	bf bb       	sbr	r11,0x1f
80005c02:	b7 99       	lsr	r9,0x17
80005c04:	1a dc       	st.w	--sp,r12
80005c06:	c2 90       	breq	80005c58 <__avr32_f32_sub_op2_subnormal>
80005c08:	f4 09 01 0c 	sub	r12,r10,r9
80005c0c:	c0 c0       	breq	80005c24 <__avr32_f32_sub_shift_done>
80005c0e:	f1 bc 04 a0 	satu	r12,0x5
80005c12:	f8 09 11 20 	rsub	r9,r12,32
80005c16:	f6 09 09 49 	lsl	r9,r11,r9
80005c1a:	f7 b8 01 01 	subne	r8,1
80005c1e:	5f 19       	srne	r9
80005c20:	f6 0c 0a 4b 	lsr	r11,r11,r12

80005c24 <__avr32_f32_sub_shift_done>:
80005c24:	16 18       	sub	r8,r11
80005c26:	1b 0c       	ld.w	r12,sp++
80005c28:	f0 0b 12 00 	clz	r11,r8
80005c2c:	5e 3d       	retlo	0
80005c2e:	f0 0b 09 48 	lsl	r8,r8,r11
80005c32:	16 1a       	sub	r10,r11
80005c34:	e0 8a 00 26 	brle	80005c80 <__avr32_f32_sub_subnormal_result>
80005c38:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80005c3c:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80005c40:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80005c44 <__avr32_f32_sub_round>:
80005c44:	fc 1a 80 00 	movh	r10,0x8000
80005c48:	ed bc 00 00 	bld	r12,0x0
80005c4c:	f7 ba 01 ff 	subne	r10,-1
80005c50:	14 39       	cp.w	r9,r10
80005c52:	f7 bc 02 ff 	subhs	r12,-1
80005c56:	5e fc       	retal	r12

80005c58 <__avr32_f32_sub_op2_subnormal>:
80005c58:	bf db       	cbr	r11,0x1f
80005c5a:	f9 b9 01 01 	movne	r9,1
80005c5e:	58 0a       	cp.w	r10,0
80005c60:	cd 41       	brne	80005c08 <__avr32_f32_sub+0x3c>
80005c62:	bf d8       	cbr	r8,0x1f
80005c64:	f9 ba 01 01 	movne	r10,1
80005c68:	cd 0b       	rjmp	80005c08 <__avr32_f32_sub+0x3c>

80005c6a <__avr32_f32_sub_op1_nan_or_inf>:
80005c6a:	f0 0b 15 01 	lsl	r11,r8,0x1
80005c6e:	5e 1e       	retne	-1
80005c70:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005c74:	f2 0b 16 17 	lsr	r11,r9,0x17
80005c78:	e0 4b 00 ff 	cp.w	r11,255
80005c7c:	5e 1c       	retne	r12
80005c7e:	5e fe       	retal	-1

80005c80 <__avr32_f32_sub_subnormal_result>:
80005c80:	f4 0a 11 09 	rsub	r10,r10,9
80005c84:	f4 0b 11 20 	rsub	r11,r10,32
80005c88:	5e 3d       	retlo	0
80005c8a:	f0 0a 0a 4a 	lsr	r10,r8,r10
80005c8e:	14 4c       	or	r12,r10
80005c90:	f0 0b 09 48 	lsl	r8,r8,r11
80005c94:	10 49       	or	r9,r8
80005c96:	cd 7b       	rjmp	80005c44 <__avr32_f32_sub_round>

80005c98 <__avr32_f32_add_from_sub>:
80005c98:	ee 1b 80 00 	eorh	r11,0x8000

80005c9c <__avr32_f32_add>:
80005c9c:	f7 ec 20 08 	eor	r8,r11,r12
80005ca0:	c9 46       	brmi	80005bc8 <__avr32_f32_sub_from_add>
80005ca2:	18 98       	mov	r8,r12
80005ca4:	e6 1c 80 00 	andh	r12,0x8000,COH
80005ca8:	bf db       	cbr	r11,0x1f
80005caa:	bf d8       	cbr	r8,0x1f
80005cac:	f0 0b 0c 4a 	max	r10,r8,r11
80005cb0:	f0 0b 0d 49 	min	r9,r8,r11
80005cb4:	f4 08 15 08 	lsl	r8,r10,0x8
80005cb8:	bf b8       	sbr	r8,0x1f
80005cba:	b7 9a       	lsr	r10,0x17
80005cbc:	e0 4a 00 ff 	cp.w	r10,255
80005cc0:	c2 d0       	breq	80005d1a <__avr32_f32_add_op1_nan_or_inf>
80005cc2:	f2 0b 15 08 	lsl	r11,r9,0x8
80005cc6:	bf bb       	sbr	r11,0x1f
80005cc8:	b7 99       	lsr	r9,0x17
80005cca:	c1 e0       	breq	80005d06 <__avr32_f32_add_op2_subnormal>
80005ccc:	1a dc       	st.w	--sp,r12
80005cce:	14 29       	rsub	r9,r10
80005cd0:	f1 b9 04 a0 	satu	r9,0x5
80005cd4:	f6 09 0a 4c 	lsr	r12,r11,r9
80005cd8:	f2 09 11 18 	rsub	r9,r9,24
80005cdc:	f6 09 09 4b 	lsl	r11,r11,r9
80005ce0:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80005ce4:	18 08       	add	r8,r12
80005ce6:	1b 0c       	ld.w	r12,sp++
80005ce8:	c2 63       	brcs	80005d34 <__avr32_f32_add_res_of>
80005cea:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80005cee:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005cf2:	fc 1a 80 00 	movh	r10,0x8000
80005cf6:	ed bc 00 00 	bld	r12,0x0
80005cfa:	f7 ba 01 ff 	subne	r10,-1
80005cfe:	14 3b       	cp.w	r11,r10
80005d00:	f7 bc 02 ff 	subhs	r12,-1
80005d04:	5e fc       	retal	r12

80005d06 <__avr32_f32_add_op2_subnormal>:
80005d06:	bf db       	cbr	r11,0x1f
80005d08:	f9 b9 01 01 	movne	r9,1
80005d0c:	58 0a       	cp.w	r10,0
80005d0e:	cd f1       	brne	80005ccc <__avr32_f32_add+0x30>
80005d10:	bf d8       	cbr	r8,0x1f
80005d12:	10 0b       	add	r11,r8
80005d14:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80005d18:	5e fc       	retal	r12

80005d1a <__avr32_f32_add_op1_nan_or_inf>:
80005d1a:	f0 0b 15 01 	lsl	r11,r8,0x1
80005d1e:	5e 1e       	retne	-1
80005d20:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005d24:	f2 0b 16 17 	lsr	r11,r9,0x17
80005d28:	e0 4b 00 ff 	cp.w	r11,255
80005d2c:	5e 1c       	retne	r12
80005d2e:	a9 79       	lsl	r9,0x9
80005d30:	5e 0c       	reteq	r12
80005d32:	5e fe       	retal	-1

80005d34 <__avr32_f32_add_res_of>:
80005d34:	a1 98       	lsr	r8,0x1
80005d36:	2f fa       	sub	r10,-1
80005d38:	e0 4a 00 ff 	cp.w	r10,255
80005d3c:	f9 b8 00 00 	moveq	r8,0
80005d40:	f9 bb 00 00 	moveq	r11,0
80005d44:	cd 3b       	rjmp	80005cea <__avr32_f32_add+0x4e>
80005d46:	d7 03       	nop

80005d48 <__avr32_f32_mul>:
80005d48:	18 98       	mov	r8,r12
80005d4a:	16 5c       	eor	r12,r11
80005d4c:	e6 1c 80 00 	andh	r12,0x8000,COH
80005d50:	bf d8       	cbr	r8,0x1f
80005d52:	c6 60       	breq	80005e1e <__avr32_f32_mul_op1_zero>
80005d54:	bf db       	cbr	r11,0x1f
80005d56:	f0 0b 0c 4a 	max	r10,r8,r11
80005d5a:	f0 0b 0d 49 	min	r9,r8,r11
80005d5e:	f4 08 15 08 	lsl	r8,r10,0x8
80005d62:	bf b8       	sbr	r8,0x1f
80005d64:	b7 9a       	lsr	r10,0x17
80005d66:	e0 4a 00 ff 	cp.w	r10,255
80005d6a:	c3 d0       	breq	80005de4 <__avr32_f32_mul_op1_nan_or_inf>
80005d6c:	f2 0b 15 08 	lsl	r11,r9,0x8
80005d70:	bf bb       	sbr	r11,0x1f
80005d72:	b7 99       	lsr	r9,0x17
80005d74:	c2 40       	breq	80005dbc <__avr32_f32_mul_op2_subnormal>
80005d76:	14 09       	add	r9,r10
80005d78:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80005d7c:	f6 08 15 01 	lsl	r8,r11,0x1
80005d80:	f0 0b 17 20 	movhs	r11,r8
80005d84:	f7 b9 02 01 	subhs	r9,1
80005d88:	a9 8a       	lsr	r10,0x8
80005d8a:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
80005d8e:	27 e9       	sub	r9,126
80005d90:	e0 8a 00 39 	brle	80005e02 <__avr32_f32_mul_res_subnormal>
80005d94:	e0 49 00 ff 	cp.w	r9,255
80005d98:	c0 f4       	brge	80005db6 <__avr32_f32_mul_round+0x14>
80005d9a:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80005d9e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80005da2 <__avr32_f32_mul_round>:
80005da2:	fc 18 80 00 	movh	r8,0x8000
80005da6:	ed bc 00 00 	bld	r12,0x0
80005daa:	f7 b8 01 ff 	subne	r8,-1
80005dae:	10 3a       	cp.w	r10,r8
80005db0:	f7 bc 02 ff 	subhs	r12,-1
80005db4:	5e fc       	retal	r12
80005db6:	ea 1c 7f 80 	orh	r12,0x7f80
80005dba:	5e fc       	retal	r12

80005dbc <__avr32_f32_mul_op2_subnormal>:
80005dbc:	bf db       	cbr	r11,0x1f
80005dbe:	f6 09 12 00 	clz	r9,r11
80005dc2:	5e 3d       	retlo	0
80005dc4:	20 89       	sub	r9,8
80005dc6:	f6 09 09 4b 	lsl	r11,r11,r9
80005dca:	f2 09 11 01 	rsub	r9,r9,1
80005dce:	14 7a       	tst	r10,r10
80005dd0:	cd 31       	brne	80005d76 <__avr32_f32_mul+0x2e>
80005dd2:	bf d8       	cbr	r8,0x1f
80005dd4:	f6 0a 12 00 	clz	r10,r11
80005dd8:	5e 3d       	retlo	0
80005dda:	f0 0a 09 48 	lsl	r8,r8,r10
80005dde:	f4 0a 11 01 	rsub	r10,r10,1
80005de2:	cc ab       	rjmp	80005d76 <__avr32_f32_mul+0x2e>

80005de4 <__avr32_f32_mul_op1_nan_or_inf>:
80005de4:	f0 0b 15 01 	lsl	r11,r8,0x1
80005de8:	5e 1e       	retne	-1
80005dea:	12 79       	tst	r9,r9
80005dec:	5e 0e       	reteq	-1
80005dee:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005df2:	f2 0b 16 17 	lsr	r11,r9,0x17
80005df6:	e0 4b 00 ff 	cp.w	r11,255
80005dfa:	5e 1c       	retne	r12
80005dfc:	a9 79       	lsl	r9,0x9
80005dfe:	5e 0c       	reteq	r12
80005e00:	5e fe       	retal	-1

80005e02 <__avr32_f32_mul_res_subnormal>:
80005e02:	f2 09 11 09 	rsub	r9,r9,9
80005e06:	f2 08 11 20 	rsub	r8,r9,32
80005e0a:	5e 3d       	retlo	0
80005e0c:	f6 09 0a 49 	lsr	r9,r11,r9
80005e10:	12 4c       	or	r12,r9
80005e12:	f6 08 09 4b 	lsl	r11,r11,r8
80005e16:	e4 1a 00 ff 	andh	r10,0xff
80005e1a:	16 4a       	or	r10,r11
80005e1c:	cc 3b       	rjmp	80005da2 <__avr32_f32_mul_round>

80005e1e <__avr32_f32_mul_op1_zero>:
80005e1e:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80005e22:	e0 4a 00 ff 	cp.w	r10,255
80005e26:	5e 1c       	retne	r12
80005e28:	5e 0e       	reteq	-1

80005e2a <__avr32_s32_to_f32>:
80005e2a:	58 0c       	cp.w	r12,0
80005e2c:	5e 0c       	reteq	r12
80005e2e:	18 9b       	mov	r11,r12
80005e30:	5c 4c       	abs	r12
80005e32:	e0 6a 00 9e 	mov	r10,158
80005e36:	f8 09 12 00 	clz	r9,r12
80005e3a:	12 1a       	sub	r10,r9
80005e3c:	f8 09 09 4c 	lsl	r12,r12,r9
80005e40:	58 0a       	cp.w	r10,0
80005e42:	e0 8a 00 15 	brle	80005e6c <__avr32_s32_to_f32_subnormal>
80005e46:	37 f9       	mov	r9,127
80005e48:	ed bc 00 08 	bld	r12,0x8
80005e4c:	f7 b9 00 ff 	subeq	r9,-1
80005e50:	12 0c       	add	r12,r9
80005e52:	f7 ba 03 fe 	sublo	r10,-2
80005e56:	ed bc 00 1f 	bld	r12,0x1f
80005e5a:	f7 ba 01 01 	subne	r10,1
80005e5e:	f8 0c 16 07 	lsr	r12,r12,0x7
80005e62:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80005e66:	a1 7b       	lsl	r11,0x1
80005e68:	5d 0c       	ror	r12
80005e6a:	5e fc       	retal	r12

80005e6c <__avr32_s32_to_f32_subnormal>:
80005e6c:	f4 0a 11 01 	rsub	r10,r10,1
80005e70:	59 9a       	cp.w	r10,25
80005e72:	f9 bc 02 00 	movhs	r12,0
80005e76:	c1 32       	brcc	80005e9c <__avr32_s32_to_f32_subnormal+0x30>
80005e78:	f4 09 11 20 	rsub	r9,r10,32
80005e7c:	f8 09 09 49 	lsl	r9,r12,r9
80005e80:	5f 19       	srne	r9
80005e82:	f8 0a 0a 4c 	lsr	r12,r12,r10
80005e86:	12 4c       	or	r12,r9
80005e88:	37 f9       	mov	r9,127
80005e8a:	ed bc 00 08 	bld	r12,0x8
80005e8e:	f7 b9 00 ff 	subeq	r9,-1
80005e92:	12 0c       	add	r12,r9
80005e94:	f8 0c 16 07 	lsr	r12,r12,0x7
80005e98:	a1 7b       	lsl	r11,0x1
80005e9a:	5d 0c       	ror	r12
80005e9c:	5e fc       	retal	r12

80005e9e <__avr32_f32_to_f64>:
80005e9e:	f8 0b 15 01 	lsl	r11,r12,0x1
80005ea2:	f9 ba 00 00 	moveq	r10,0
80005ea6:	5e 0b       	reteq	r11
80005ea8:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80005eac:	e0 49 00 ff 	cp.w	r9,255
80005eb0:	c1 e0       	breq	80005eec <__extendsfdf_return_op1+0x6>
80005eb2:	a7 7b       	lsl	r11,0x7
80005eb4:	30 0a       	mov	r10,0
80005eb6:	58 09       	cp.w	r9,0
80005eb8:	f7 b9 00 ff 	subeq	r9,-1
80005ebc:	5f 18       	srne	r8
80005ebe:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80005ec2:	fe 39 fc 80 	sub	r9,-896
80005ec6:	f6 08 12 00 	clz	r8,r11
80005eca:	10 19       	sub	r9,r8
80005ecc:	f6 08 09 4b 	lsl	r11,r11,r8
80005ed0:	ed bb 00 1f 	bld	r11,0x1f
80005ed4:	f7 b9 01 01 	subne	r9,1
80005ed8:	ab 9a       	lsr	r10,0xb
80005eda:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005ede:	a1 7b       	lsl	r11,0x1
80005ee0:	ab 9b       	lsr	r11,0xb
80005ee2:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80005ee6 <__extendsfdf_return_op1>:
80005ee6:	a1 7c       	lsl	r12,0x1
80005ee8:	5d 0b       	ror	r11
80005eea:	5e fb       	retal	r11
80005eec:	fc 1a ff e0 	movh	r10,0xffe0
80005ef0:	a9 6b       	lsl	r11,0x8
80005ef2:	f9 bb 01 ff 	movne	r11,-1
80005ef6:	f4 0b 17 00 	moveq	r11,r10
80005efa:	30 0a       	mov	r10,0
80005efc:	cf 5b       	rjmp	80005ee6 <__extendsfdf_return_op1>

80005efe <__avr32_udiv64>:
80005efe:	d4 31       	pushm	r0-r7,lr
80005f00:	1a 97       	mov	r7,sp
80005f02:	20 3d       	sub	sp,12
80005f04:	10 9c       	mov	r12,r8
80005f06:	12 9e       	mov	lr,r9
80005f08:	14 93       	mov	r3,r10
80005f0a:	58 09       	cp.w	r9,0
80005f0c:	e0 81 00 bd 	brne	80006086 <__avr32_udiv64+0x188>
80005f10:	16 38       	cp.w	r8,r11
80005f12:	e0 88 00 40 	brls	80005f92 <__avr32_udiv64+0x94>
80005f16:	f0 08 12 00 	clz	r8,r8
80005f1a:	c0 d0       	breq	80005f34 <__avr32_udiv64+0x36>
80005f1c:	f6 08 09 4b 	lsl	r11,r11,r8
80005f20:	f0 09 11 20 	rsub	r9,r8,32
80005f24:	f8 08 09 4c 	lsl	r12,r12,r8
80005f28:	f4 09 0a 49 	lsr	r9,r10,r9
80005f2c:	f4 08 09 43 	lsl	r3,r10,r8
80005f30:	f3 eb 10 0b 	or	r11,r9,r11
80005f34:	f8 0e 16 10 	lsr	lr,r12,0x10
80005f38:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005f3c:	f6 0e 0d 00 	divu	r0,r11,lr
80005f40:	e6 0b 16 10 	lsr	r11,r3,0x10
80005f44:	00 99       	mov	r9,r0
80005f46:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005f4a:	e0 0a 02 48 	mul	r8,r0,r10
80005f4e:	10 3b       	cp.w	r11,r8
80005f50:	c0 a2       	brcc	80005f64 <__avr32_udiv64+0x66>
80005f52:	20 19       	sub	r9,1
80005f54:	18 0b       	add	r11,r12
80005f56:	18 3b       	cp.w	r11,r12
80005f58:	c0 63       	brcs	80005f64 <__avr32_udiv64+0x66>
80005f5a:	10 3b       	cp.w	r11,r8
80005f5c:	f7 b9 03 01 	sublo	r9,1
80005f60:	f7 dc e3 0b 	addcs	r11,r11,r12
80005f64:	f6 08 01 01 	sub	r1,r11,r8
80005f68:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80005f6c:	e2 0e 0d 00 	divu	r0,r1,lr
80005f70:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80005f74:	00 98       	mov	r8,r0
80005f76:	e0 0a 02 4a 	mul	r10,r0,r10
80005f7a:	14 33       	cp.w	r3,r10
80005f7c:	c0 82       	brcc	80005f8c <__avr32_udiv64+0x8e>
80005f7e:	20 18       	sub	r8,1
80005f80:	18 03       	add	r3,r12
80005f82:	18 33       	cp.w	r3,r12
80005f84:	c0 43       	brcs	80005f8c <__avr32_udiv64+0x8e>
80005f86:	14 33       	cp.w	r3,r10
80005f88:	f7 b8 03 01 	sublo	r8,1
80005f8c:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80005f90:	cd f8       	rjmp	8000614e <__avr32_udiv64+0x250>
80005f92:	58 08       	cp.w	r8,0
80005f94:	c0 51       	brne	80005f9e <__avr32_udiv64+0xa0>
80005f96:	30 19       	mov	r9,1
80005f98:	f2 08 0d 08 	divu	r8,r9,r8
80005f9c:	10 9c       	mov	r12,r8
80005f9e:	f8 06 12 00 	clz	r6,r12
80005fa2:	c0 41       	brne	80005faa <__avr32_udiv64+0xac>
80005fa4:	18 1b       	sub	r11,r12
80005fa6:	30 19       	mov	r9,1
80005fa8:	c4 08       	rjmp	80006028 <__avr32_udiv64+0x12a>
80005faa:	ec 01 11 20 	rsub	r1,r6,32
80005fae:	f4 01 0a 49 	lsr	r9,r10,r1
80005fb2:	f8 06 09 4c 	lsl	r12,r12,r6
80005fb6:	f6 06 09 48 	lsl	r8,r11,r6
80005fba:	f6 01 0a 41 	lsr	r1,r11,r1
80005fbe:	f3 e8 10 08 	or	r8,r9,r8
80005fc2:	f8 03 16 10 	lsr	r3,r12,0x10
80005fc6:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80005fca:	e2 03 0d 00 	divu	r0,r1,r3
80005fce:	f0 0b 16 10 	lsr	r11,r8,0x10
80005fd2:	00 9e       	mov	lr,r0
80005fd4:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005fd8:	e0 05 02 49 	mul	r9,r0,r5
80005fdc:	12 3b       	cp.w	r11,r9
80005fde:	c0 a2       	brcc	80005ff2 <__avr32_udiv64+0xf4>
80005fe0:	20 1e       	sub	lr,1
80005fe2:	18 0b       	add	r11,r12
80005fe4:	18 3b       	cp.w	r11,r12
80005fe6:	c0 63       	brcs	80005ff2 <__avr32_udiv64+0xf4>
80005fe8:	12 3b       	cp.w	r11,r9
80005fea:	f7 be 03 01 	sublo	lr,1
80005fee:	f7 dc e3 0b 	addcs	r11,r11,r12
80005ff2:	12 1b       	sub	r11,r9
80005ff4:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80005ff8:	f6 03 0d 02 	divu	r2,r11,r3
80005ffc:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80006000:	04 99       	mov	r9,r2
80006002:	e4 05 02 4b 	mul	r11,r2,r5
80006006:	16 38       	cp.w	r8,r11
80006008:	c0 a2       	brcc	8000601c <__avr32_udiv64+0x11e>
8000600a:	20 19       	sub	r9,1
8000600c:	18 08       	add	r8,r12
8000600e:	18 38       	cp.w	r8,r12
80006010:	c0 63       	brcs	8000601c <__avr32_udiv64+0x11e>
80006012:	16 38       	cp.w	r8,r11
80006014:	f7 b9 03 01 	sublo	r9,1
80006018:	f1 dc e3 08 	addcs	r8,r8,r12
8000601c:	f4 06 09 43 	lsl	r3,r10,r6
80006020:	f0 0b 01 0b 	sub	r11,r8,r11
80006024:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80006028:	f8 06 16 10 	lsr	r6,r12,0x10
8000602c:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80006030:	f6 06 0d 00 	divu	r0,r11,r6
80006034:	e6 0b 16 10 	lsr	r11,r3,0x10
80006038:	00 9a       	mov	r10,r0
8000603a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000603e:	e0 0e 02 48 	mul	r8,r0,lr
80006042:	10 3b       	cp.w	r11,r8
80006044:	c0 a2       	brcc	80006058 <__avr32_udiv64+0x15a>
80006046:	20 1a       	sub	r10,1
80006048:	18 0b       	add	r11,r12
8000604a:	18 3b       	cp.w	r11,r12
8000604c:	c0 63       	brcs	80006058 <__avr32_udiv64+0x15a>
8000604e:	10 3b       	cp.w	r11,r8
80006050:	f7 ba 03 01 	sublo	r10,1
80006054:	f7 dc e3 0b 	addcs	r11,r11,r12
80006058:	f6 08 01 01 	sub	r1,r11,r8
8000605c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80006060:	e2 06 0d 00 	divu	r0,r1,r6
80006064:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80006068:	00 98       	mov	r8,r0
8000606a:	e0 0e 02 4b 	mul	r11,r0,lr
8000606e:	16 33       	cp.w	r3,r11
80006070:	c0 82       	brcc	80006080 <__avr32_udiv64+0x182>
80006072:	20 18       	sub	r8,1
80006074:	18 03       	add	r3,r12
80006076:	18 33       	cp.w	r3,r12
80006078:	c0 43       	brcs	80006080 <__avr32_udiv64+0x182>
8000607a:	16 33       	cp.w	r3,r11
8000607c:	f7 b8 03 01 	sublo	r8,1
80006080:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80006084:	c6 98       	rjmp	80006156 <__avr32_udiv64+0x258>
80006086:	16 39       	cp.w	r9,r11
80006088:	e0 8b 00 65 	brhi	80006152 <__avr32_udiv64+0x254>
8000608c:	f2 09 12 00 	clz	r9,r9
80006090:	c0 b1       	brne	800060a6 <__avr32_udiv64+0x1a8>
80006092:	10 3a       	cp.w	r10,r8
80006094:	5f 2a       	srhs	r10
80006096:	1c 3b       	cp.w	r11,lr
80006098:	5f b8       	srhi	r8
8000609a:	10 4a       	or	r10,r8
8000609c:	f2 0a 18 00 	cp.b	r10,r9
800060a0:	c5 90       	breq	80006152 <__avr32_udiv64+0x254>
800060a2:	30 18       	mov	r8,1
800060a4:	c5 98       	rjmp	80006156 <__avr32_udiv64+0x258>
800060a6:	f0 09 09 46 	lsl	r6,r8,r9
800060aa:	f2 03 11 20 	rsub	r3,r9,32
800060ae:	fc 09 09 4e 	lsl	lr,lr,r9
800060b2:	f0 03 0a 48 	lsr	r8,r8,r3
800060b6:	f6 09 09 4c 	lsl	r12,r11,r9
800060ba:	f4 03 0a 42 	lsr	r2,r10,r3
800060be:	ef 46 ff f4 	st.w	r7[-12],r6
800060c2:	f6 03 0a 43 	lsr	r3,r11,r3
800060c6:	18 42       	or	r2,r12
800060c8:	f1 ee 10 0c 	or	r12,r8,lr
800060cc:	f8 01 16 10 	lsr	r1,r12,0x10
800060d0:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800060d4:	e6 01 0d 04 	divu	r4,r3,r1
800060d8:	e4 03 16 10 	lsr	r3,r2,0x10
800060dc:	08 9e       	mov	lr,r4
800060de:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800060e2:	e8 06 02 48 	mul	r8,r4,r6
800060e6:	10 33       	cp.w	r3,r8
800060e8:	c0 a2       	brcc	800060fc <__avr32_udiv64+0x1fe>
800060ea:	20 1e       	sub	lr,1
800060ec:	18 03       	add	r3,r12
800060ee:	18 33       	cp.w	r3,r12
800060f0:	c0 63       	brcs	800060fc <__avr32_udiv64+0x1fe>
800060f2:	10 33       	cp.w	r3,r8
800060f4:	f7 be 03 01 	sublo	lr,1
800060f8:	e7 dc e3 03 	addcs	r3,r3,r12
800060fc:	10 13       	sub	r3,r8
800060fe:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80006102:	e6 01 0d 00 	divu	r0,r3,r1
80006106:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000610a:	00 98       	mov	r8,r0
8000610c:	e0 06 02 46 	mul	r6,r0,r6
80006110:	0c 3b       	cp.w	r11,r6
80006112:	c0 a2       	brcc	80006126 <__avr32_udiv64+0x228>
80006114:	20 18       	sub	r8,1
80006116:	18 0b       	add	r11,r12
80006118:	18 3b       	cp.w	r11,r12
8000611a:	c0 63       	brcs	80006126 <__avr32_udiv64+0x228>
8000611c:	0c 3b       	cp.w	r11,r6
8000611e:	f7 dc e3 0b 	addcs	r11,r11,r12
80006122:	f7 b8 03 01 	sublo	r8,1
80006126:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000612a:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000612e:	0c 1b       	sub	r11,r6
80006130:	f0 04 06 42 	mulu.d	r2,r8,r4
80006134:	06 95       	mov	r5,r3
80006136:	16 35       	cp.w	r5,r11
80006138:	e0 8b 00 0a 	brhi	8000614c <__avr32_udiv64+0x24e>
8000613c:	5f 0b       	sreq	r11
8000613e:	f4 09 09 49 	lsl	r9,r10,r9
80006142:	12 32       	cp.w	r2,r9
80006144:	5f b9       	srhi	r9
80006146:	f7 e9 00 09 	and	r9,r11,r9
8000614a:	c0 60       	breq	80006156 <__avr32_udiv64+0x258>
8000614c:	20 18       	sub	r8,1
8000614e:	30 09       	mov	r9,0
80006150:	c0 38       	rjmp	80006156 <__avr32_udiv64+0x258>
80006152:	30 09       	mov	r9,0
80006154:	12 98       	mov	r8,r9
80006156:	10 9a       	mov	r10,r8
80006158:	12 93       	mov	r3,r9
8000615a:	10 92       	mov	r2,r8
8000615c:	12 9b       	mov	r11,r9
8000615e:	2f dd       	sub	sp,-12
80006160:	d8 32       	popm	r0-r7,pc
80006162:	d7 03       	nop

80006164 <sprintf>:
80006164:	d4 01       	pushm	lr
80006166:	21 7d       	sub	sp,92
80006168:	e0 68 ff ff 	mov	r8,65535
8000616c:	ea 18 7f ff 	orh	r8,0x7fff
80006170:	50 58       	stdsp	sp[0x14],r8
80006172:	50 28       	stdsp	sp[0x8],r8
80006174:	e0 68 02 08 	mov	r8,520
80006178:	ba 68       	st.h	sp[0xc],r8
8000617a:	3f f8       	mov	r8,-1
8000617c:	ba 78       	st.h	sp[0xe],r8
8000617e:	48 88       	lddpc	r8,8000619c <sprintf+0x38>
80006180:	50 4c       	stdsp	sp[0x10],r12
80006182:	16 9a       	mov	r10,r11
80006184:	50 0c       	stdsp	sp[0x0],r12
80006186:	fa c9 ff a0 	sub	r9,sp,-96
8000618a:	70 0c       	ld.w	r12,r8[0x0]
8000618c:	1a 9b       	mov	r11,sp
8000618e:	ca 7d       	rcall	800064dc <_vfprintf_r>
80006190:	30 09       	mov	r9,0
80006192:	40 08       	lddsp	r8,sp[0x0]
80006194:	b0 89       	st.b	r8[0x0],r9
80006196:	2e 9d       	sub	sp,-92
80006198:	d8 02       	popm	pc
8000619a:	d7 03       	nop
8000619c:	00 00       	add	r0,r0
8000619e:	00 fc       	st.b	--r0,r12

800061a0 <get_arg>:
800061a0:	d4 31       	pushm	r0-r7,lr
800061a2:	20 8d       	sub	sp,32
800061a4:	fa c4 ff bc 	sub	r4,sp,-68
800061a8:	50 4b       	stdsp	sp[0x10],r11
800061aa:	68 2e       	ld.w	lr,r4[0x8]
800061ac:	50 58       	stdsp	sp[0x14],r8
800061ae:	12 96       	mov	r6,r9
800061b0:	7c 0b       	ld.w	r11,lr[0x0]
800061b2:	70 05       	ld.w	r5,r8[0x0]
800061b4:	50 6e       	stdsp	sp[0x18],lr
800061b6:	58 0b       	cp.w	r11,0
800061b8:	f4 0b 17 00 	moveq	r11,r10
800061bc:	68 03       	ld.w	r3,r4[0x0]
800061be:	68 11       	ld.w	r1,r4[0x4]
800061c0:	40 49       	lddsp	r9,sp[0x10]
800061c2:	30 08       	mov	r8,0
800061c4:	c2 e9       	rjmp	80006420 <get_arg+0x280>
800061c6:	2f fb       	sub	r11,-1
800061c8:	32 5c       	mov	r12,37
800061ca:	17 8a       	ld.ub	r10,r11[0x0]
800061cc:	f8 0a 18 00 	cp.b	r10,r12
800061d0:	5f 1e       	srne	lr
800061d2:	f0 0a 18 00 	cp.b	r10,r8
800061d6:	5f 1c       	srne	r12
800061d8:	fd ec 00 0c 	and	r12,lr,r12
800061dc:	f0 0c 18 00 	cp.b	r12,r8
800061e0:	cf 31       	brne	800061c6 <get_arg+0x26>
800061e2:	58 0a       	cp.w	r10,0
800061e4:	e0 80 01 2b 	breq	8000643a <get_arg+0x29a>
800061e8:	30 0c       	mov	r12,0
800061ea:	3f fa       	mov	r10,-1
800061ec:	18 90       	mov	r0,r12
800061ee:	50 3a       	stdsp	sp[0xc],r10
800061f0:	18 94       	mov	r4,r12
800061f2:	18 92       	mov	r2,r12
800061f4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800061f8:	16 97       	mov	r7,r11
800061fa:	50 7c       	stdsp	sp[0x1c],r12
800061fc:	4c ec       	lddpc	r12,80006334 <get_arg+0x194>
800061fe:	0f 3a       	ld.ub	r10,r7++
80006200:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80006204:	40 7c       	lddsp	r12,sp[0x1c]
80006206:	1c 0c       	add	r12,lr
80006208:	4c ce       	lddpc	lr,80006338 <get_arg+0x198>
8000620a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000620e:	20 1e       	sub	lr,1
80006210:	50 0e       	stdsp	sp[0x0],lr
80006212:	4c be       	lddpc	lr,8000633c <get_arg+0x19c>
80006214:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80006218:	50 7c       	stdsp	sp[0x1c],r12
8000621a:	40 0c       	lddsp	r12,sp[0x0]
8000621c:	58 7c       	cp.w	r12,7
8000621e:	e0 8b 00 fa 	brhi	80006412 <get_arg+0x272>
80006222:	4c 8e       	lddpc	lr,80006340 <get_arg+0x1a0>
80006224:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80006228:	36 8b       	mov	r11,104
8000622a:	f6 0a 18 00 	cp.b	r10,r11
8000622e:	e0 80 00 f2 	breq	80006412 <get_arg+0x272>
80006232:	37 1b       	mov	r11,113
80006234:	f6 0a 18 00 	cp.b	r10,r11
80006238:	c0 70       	breq	80006246 <get_arg+0xa6>
8000623a:	34 cb       	mov	r11,76
8000623c:	f6 0a 18 00 	cp.b	r10,r11
80006240:	c0 51       	brne	8000624a <get_arg+0xaa>
80006242:	a3 b4       	sbr	r4,0x3
80006244:	ce 78       	rjmp	80006412 <get_arg+0x272>
80006246:	a5 b4       	sbr	r4,0x5
80006248:	ce 58       	rjmp	80006412 <get_arg+0x272>
8000624a:	08 9a       	mov	r10,r4
8000624c:	0e 9b       	mov	r11,r7
8000624e:	a5 aa       	sbr	r10,0x4
80006250:	17 3c       	ld.ub	r12,r11++
80006252:	a5 b4       	sbr	r4,0x5
80006254:	36 ce       	mov	lr,108
80006256:	fc 0c 18 00 	cp.b	r12,lr
8000625a:	e0 80 00 dd 	breq	80006414 <get_arg+0x274>
8000625e:	14 94       	mov	r4,r10
80006260:	cd 98       	rjmp	80006412 <get_arg+0x272>
80006262:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80006266:	36 7c       	mov	r12,103
80006268:	f8 0a 18 00 	cp.b	r10,r12
8000626c:	e0 8b 00 27 	brhi	800062ba <get_arg+0x11a>
80006270:	36 5b       	mov	r11,101
80006272:	f6 0a 18 00 	cp.b	r10,r11
80006276:	c4 82       	brcc	80006306 <get_arg+0x166>
80006278:	34 fb       	mov	r11,79
8000627a:	f6 0a 18 00 	cp.b	r10,r11
8000627e:	c4 80       	breq	8000630e <get_arg+0x16e>
80006280:	e0 8b 00 0c 	brhi	80006298 <get_arg+0xf8>
80006284:	34 5b       	mov	r11,69
80006286:	f6 0a 18 00 	cp.b	r10,r11
8000628a:	c3 e0       	breq	80006306 <get_arg+0x166>
8000628c:	34 7b       	mov	r11,71
8000628e:	f6 0a 18 00 	cp.b	r10,r11
80006292:	c3 a0       	breq	80006306 <get_arg+0x166>
80006294:	34 4b       	mov	r11,68
80006296:	c0 88       	rjmp	800062a6 <get_arg+0x106>
80006298:	35 8b       	mov	r11,88
8000629a:	f6 0a 18 00 	cp.b	r10,r11
8000629e:	c2 c0       	breq	800062f6 <get_arg+0x156>
800062a0:	e0 8b 00 07 	brhi	800062ae <get_arg+0x10e>
800062a4:	35 5b       	mov	r11,85
800062a6:	f6 0a 18 00 	cp.b	r10,r11
800062aa:	c3 51       	brne	80006314 <get_arg+0x174>
800062ac:	c3 18       	rjmp	8000630e <get_arg+0x16e>
800062ae:	36 3b       	mov	r11,99
800062b0:	f6 0a 18 00 	cp.b	r10,r11
800062b4:	c2 f0       	breq	80006312 <get_arg+0x172>
800062b6:	36 4b       	mov	r11,100
800062b8:	c0 e8       	rjmp	800062d4 <get_arg+0x134>
800062ba:	37 0b       	mov	r11,112
800062bc:	f6 0a 18 00 	cp.b	r10,r11
800062c0:	c2 50       	breq	8000630a <get_arg+0x16a>
800062c2:	e0 8b 00 0d 	brhi	800062dc <get_arg+0x13c>
800062c6:	36 eb       	mov	r11,110
800062c8:	f6 0a 18 00 	cp.b	r10,r11
800062cc:	c1 f0       	breq	8000630a <get_arg+0x16a>
800062ce:	e0 8b 00 14 	brhi	800062f6 <get_arg+0x156>
800062d2:	36 9b       	mov	r11,105
800062d4:	f6 0a 18 00 	cp.b	r10,r11
800062d8:	c1 e1       	brne	80006314 <get_arg+0x174>
800062da:	c0 e8       	rjmp	800062f6 <get_arg+0x156>
800062dc:	37 5b       	mov	r11,117
800062de:	f6 0a 18 00 	cp.b	r10,r11
800062e2:	c0 a0       	breq	800062f6 <get_arg+0x156>
800062e4:	37 8b       	mov	r11,120
800062e6:	f6 0a 18 00 	cp.b	r10,r11
800062ea:	c0 60       	breq	800062f6 <get_arg+0x156>
800062ec:	37 3b       	mov	r11,115
800062ee:	f6 0a 18 00 	cp.b	r10,r11
800062f2:	c1 11       	brne	80006314 <get_arg+0x174>
800062f4:	c0 b8       	rjmp	8000630a <get_arg+0x16a>
800062f6:	ed b4 00 04 	bld	r4,0x4
800062fa:	c0 a0       	breq	8000630e <get_arg+0x16e>
800062fc:	ed b4 00 05 	bld	r4,0x5
80006300:	c0 91       	brne	80006312 <get_arg+0x172>
80006302:	30 20       	mov	r0,2
80006304:	c0 88       	rjmp	80006314 <get_arg+0x174>
80006306:	30 40       	mov	r0,4
80006308:	c0 68       	rjmp	80006314 <get_arg+0x174>
8000630a:	30 30       	mov	r0,3
8000630c:	c0 48       	rjmp	80006314 <get_arg+0x174>
8000630e:	30 10       	mov	r0,1
80006310:	c0 28       	rjmp	80006314 <get_arg+0x174>
80006312:	30 00       	mov	r0,0
80006314:	40 3b       	lddsp	r11,sp[0xc]
80006316:	5b fb       	cp.w	r11,-1
80006318:	c0 40       	breq	80006320 <get_arg+0x180>
8000631a:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000631e:	c7 a8       	rjmp	80006412 <get_arg+0x272>
80006320:	58 60       	cp.w	r0,6
80006322:	e0 8b 00 78 	brhi	80006412 <get_arg+0x272>
80006326:	6c 0a       	ld.w	r10,r6[0x0]
80006328:	ea cc ff ff 	sub	r12,r5,-1
8000632c:	48 6e       	lddpc	lr,80006344 <get_arg+0x1a4>
8000632e:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80006332:	d7 03       	nop
80006334:	80 00       	ld.sh	r0,r0[0x0]
80006336:	ca 78       	rjmp	80006484 <get_arg+0x2e4>
80006338:	80 00       	ld.sh	r0,r0[0x0]
8000633a:	c9 b0       	breq	80006270 <get_arg+0xd0>
8000633c:	80 00       	ld.sh	r0,r0[0x0]
8000633e:	c9 44       	brge	80006266 <get_arg+0xc6>
80006340:	80 00       	ld.sh	r0,r0[0x0]
80006342:	c7 a4       	brge	80006436 <get_arg+0x296>
80006344:	80 00       	ld.sh	r0,r0[0x0]
80006346:	c7 c4       	brge	8000643e <get_arg+0x29e>
80006348:	f4 cb ff f8 	sub	r11,r10,-8
8000634c:	8d 0b       	st.w	r6[0x0],r11
8000634e:	f4 ea 00 00 	ld.d	r10,r10[0]
80006352:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80006356:	c0 f8       	rjmp	80006374 <get_arg+0x1d4>
80006358:	f4 cb ff fc 	sub	r11,r10,-4
8000635c:	8d 0b       	st.w	r6[0x0],r11
8000635e:	74 0a       	ld.w	r10,r10[0x0]
80006360:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80006364:	c0 88       	rjmp	80006374 <get_arg+0x1d4>
80006366:	f4 cb ff f8 	sub	r11,r10,-8
8000636a:	8d 0b       	st.w	r6[0x0],r11
8000636c:	f4 ea 00 00 	ld.d	r10,r10[0]
80006370:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80006374:	0e 9b       	mov	r11,r7
80006376:	18 95       	mov	r5,r12
80006378:	c4 e8       	rjmp	80006414 <get_arg+0x274>
8000637a:	62 0a       	ld.w	r10,r1[0x0]
8000637c:	5b fa       	cp.w	r10,-1
8000637e:	c0 b1       	brne	80006394 <get_arg+0x1f4>
80006380:	50 19       	stdsp	sp[0x4],r9
80006382:	50 28       	stdsp	sp[0x8],r8
80006384:	e0 6a 00 80 	mov	r10,128
80006388:	30 0b       	mov	r11,0
8000638a:	02 9c       	mov	r12,r1
8000638c:	e0 a0 1e 30 	rcall	80009fec <memset>
80006390:	40 28       	lddsp	r8,sp[0x8]
80006392:	40 19       	lddsp	r9,sp[0x4]
80006394:	e4 cc 00 01 	sub	r12,r2,1
80006398:	0e 9b       	mov	r11,r7
8000639a:	50 3c       	stdsp	sp[0xc],r12
8000639c:	f2 0c 0c 49 	max	r9,r9,r12
800063a0:	c3 a8       	rjmp	80006414 <get_arg+0x274>
800063a2:	62 0a       	ld.w	r10,r1[0x0]
800063a4:	5b fa       	cp.w	r10,-1
800063a6:	c0 b1       	brne	800063bc <get_arg+0x21c>
800063a8:	50 19       	stdsp	sp[0x4],r9
800063aa:	50 28       	stdsp	sp[0x8],r8
800063ac:	e0 6a 00 80 	mov	r10,128
800063b0:	30 0b       	mov	r11,0
800063b2:	02 9c       	mov	r12,r1
800063b4:	e0 a0 1e 1c 	rcall	80009fec <memset>
800063b8:	40 28       	lddsp	r8,sp[0x8]
800063ba:	40 19       	lddsp	r9,sp[0x4]
800063bc:	20 12       	sub	r2,1
800063be:	30 0a       	mov	r10,0
800063c0:	0e 9b       	mov	r11,r7
800063c2:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800063c6:	f2 02 0c 49 	max	r9,r9,r2
800063ca:	c2 58       	rjmp	80006414 <get_arg+0x274>
800063cc:	16 97       	mov	r7,r11
800063ce:	6c 0a       	ld.w	r10,r6[0x0]
800063d0:	f4 cb ff fc 	sub	r11,r10,-4
800063d4:	8d 0b       	st.w	r6[0x0],r11
800063d6:	74 0a       	ld.w	r10,r10[0x0]
800063d8:	0e 9b       	mov	r11,r7
800063da:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800063de:	2f f5       	sub	r5,-1
800063e0:	c1 a8       	rjmp	80006414 <get_arg+0x274>
800063e2:	f4 c2 00 30 	sub	r2,r10,48
800063e6:	c0 68       	rjmp	800063f2 <get_arg+0x252>
800063e8:	e4 02 00 22 	add	r2,r2,r2<<0x2
800063ec:	2f f7       	sub	r7,-1
800063ee:	f4 02 00 12 	add	r2,r10,r2<<0x1
800063f2:	0f 8a       	ld.ub	r10,r7[0x0]
800063f4:	58 0a       	cp.w	r10,0
800063f6:	c0 e0       	breq	80006412 <get_arg+0x272>
800063f8:	23 0a       	sub	r10,48
800063fa:	58 9a       	cp.w	r10,9
800063fc:	fe 98 ff f6 	brls	800063e8 <get_arg+0x248>
80006400:	c0 98       	rjmp	80006412 <get_arg+0x272>
80006402:	2f f7       	sub	r7,-1
80006404:	0f 8a       	ld.ub	r10,r7[0x0]
80006406:	58 0a       	cp.w	r10,0
80006408:	c0 50       	breq	80006412 <get_arg+0x272>
8000640a:	23 0a       	sub	r10,48
8000640c:	58 9a       	cp.w	r10,9
8000640e:	fe 98 ff fa 	brls	80006402 <get_arg+0x262>
80006412:	0e 9b       	mov	r11,r7
80006414:	40 7c       	lddsp	r12,sp[0x1c]
80006416:	30 ba       	mov	r10,11
80006418:	f4 0c 18 00 	cp.b	r12,r10
8000641c:	fe 91 fe ec 	brne	800061f4 <get_arg+0x54>
80006420:	40 42       	lddsp	r2,sp[0x10]
80006422:	17 8c       	ld.ub	r12,r11[0x0]
80006424:	0a 32       	cp.w	r2,r5
80006426:	5f 4a       	srge	r10
80006428:	f0 0c 18 00 	cp.b	r12,r8
8000642c:	5f 1c       	srne	r12
8000642e:	f9 ea 00 0a 	and	r10,r12,r10
80006432:	f0 0a 18 00 	cp.b	r10,r8
80006436:	fe 91 fe c9 	brne	800061c8 <get_arg+0x28>
8000643a:	30 08       	mov	r8,0
8000643c:	40 4e       	lddsp	lr,sp[0x10]
8000643e:	17 8a       	ld.ub	r10,r11[0x0]
80006440:	e2 05 00 21 	add	r1,r1,r5<<0x2
80006444:	f0 0a 18 00 	cp.b	r10,r8
80006448:	fc 09 17 10 	movne	r9,lr
8000644c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80006450:	06 9e       	mov	lr,r3
80006452:	c2 a8       	rjmp	800064a6 <get_arg+0x306>
80006454:	62 0a       	ld.w	r10,r1[0x0]
80006456:	58 3a       	cp.w	r10,3
80006458:	c1 e0       	breq	80006494 <get_arg+0x2f4>
8000645a:	e0 89 00 07 	brgt	80006468 <get_arg+0x2c8>
8000645e:	58 1a       	cp.w	r10,1
80006460:	c1 a0       	breq	80006494 <get_arg+0x2f4>
80006462:	58 2a       	cp.w	r10,2
80006464:	c1 81       	brne	80006494 <get_arg+0x2f4>
80006466:	c0 58       	rjmp	80006470 <get_arg+0x2d0>
80006468:	58 5a       	cp.w	r10,5
8000646a:	c0 c0       	breq	80006482 <get_arg+0x2e2>
8000646c:	c0 b5       	brlt	80006482 <get_arg+0x2e2>
8000646e:	c1 38       	rjmp	80006494 <get_arg+0x2f4>
80006470:	6c 0a       	ld.w	r10,r6[0x0]
80006472:	f4 cc ff f8 	sub	r12,r10,-8
80006476:	8d 0c       	st.w	r6[0x0],r12
80006478:	f4 e2 00 00 	ld.d	r2,r10[0]
8000647c:	f0 e3 00 00 	st.d	r8[0],r2
80006480:	c1 08       	rjmp	800064a0 <get_arg+0x300>
80006482:	6c 0a       	ld.w	r10,r6[0x0]
80006484:	f4 cc ff f8 	sub	r12,r10,-8
80006488:	8d 0c       	st.w	r6[0x0],r12
8000648a:	f4 e2 00 00 	ld.d	r2,r10[0]
8000648e:	f0 e3 00 00 	st.d	r8[0],r2
80006492:	c0 78       	rjmp	800064a0 <get_arg+0x300>
80006494:	6c 0a       	ld.w	r10,r6[0x0]
80006496:	f4 cc ff fc 	sub	r12,r10,-4
8000649a:	8d 0c       	st.w	r6[0x0],r12
8000649c:	74 0a       	ld.w	r10,r10[0x0]
8000649e:	91 0a       	st.w	r8[0x0],r10
800064a0:	2f f5       	sub	r5,-1
800064a2:	2f 88       	sub	r8,-8
800064a4:	2f c1       	sub	r1,-4
800064a6:	12 35       	cp.w	r5,r9
800064a8:	fe 9a ff d6 	brle	80006454 <get_arg+0x2b4>
800064ac:	1c 93       	mov	r3,lr
800064ae:	40 52       	lddsp	r2,sp[0x14]
800064b0:	40 6e       	lddsp	lr,sp[0x18]
800064b2:	85 05       	st.w	r2[0x0],r5
800064b4:	9d 0b       	st.w	lr[0x0],r11
800064b6:	40 4b       	lddsp	r11,sp[0x10]
800064b8:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800064bc:	2f 8d       	sub	sp,-32
800064be:	d8 32       	popm	r0-r7,pc

800064c0 <__sprint_r>:
800064c0:	d4 21       	pushm	r4-r7,lr
800064c2:	14 97       	mov	r7,r10
800064c4:	74 28       	ld.w	r8,r10[0x8]
800064c6:	58 08       	cp.w	r8,0
800064c8:	c0 41       	brne	800064d0 <__sprint_r+0x10>
800064ca:	95 18       	st.w	r10[0x4],r8
800064cc:	10 9c       	mov	r12,r8
800064ce:	d8 22       	popm	r4-r7,pc
800064d0:	e0 a0 18 ca 	rcall	80009664 <__sfvwrite_r>
800064d4:	30 08       	mov	r8,0
800064d6:	8f 18       	st.w	r7[0x4],r8
800064d8:	8f 28       	st.w	r7[0x8],r8
800064da:	d8 22       	popm	r4-r7,pc

800064dc <_vfprintf_r>:
800064dc:	d4 31       	pushm	r0-r7,lr
800064de:	fa cd 06 bc 	sub	sp,sp,1724
800064e2:	51 09       	stdsp	sp[0x40],r9
800064e4:	16 91       	mov	r1,r11
800064e6:	14 97       	mov	r7,r10
800064e8:	18 95       	mov	r5,r12
800064ea:	e0 a0 1a 33 	rcall	80009950 <_localeconv_r>
800064ee:	78 0c       	ld.w	r12,r12[0x0]
800064f0:	50 cc       	stdsp	sp[0x30],r12
800064f2:	58 05       	cp.w	r5,0
800064f4:	c0 70       	breq	80006502 <_vfprintf_r+0x26>
800064f6:	6a 68       	ld.w	r8,r5[0x18]
800064f8:	58 08       	cp.w	r8,0
800064fa:	c0 41       	brne	80006502 <_vfprintf_r+0x26>
800064fc:	0a 9c       	mov	r12,r5
800064fe:	e0 a0 17 4f 	rcall	8000939c <__sinit>
80006502:	4d 08       	lddpc	r8,80006640 <_vfprintf_r+0x164>
80006504:	10 31       	cp.w	r1,r8
80006506:	c0 31       	brne	8000650c <_vfprintf_r+0x30>
80006508:	6a 01       	ld.w	r1,r5[0x0]
8000650a:	c0 a8       	rjmp	8000651e <_vfprintf_r+0x42>
8000650c:	4c e8       	lddpc	r8,80006644 <_vfprintf_r+0x168>
8000650e:	10 31       	cp.w	r1,r8
80006510:	c0 31       	brne	80006516 <_vfprintf_r+0x3a>
80006512:	6a 11       	ld.w	r1,r5[0x4]
80006514:	c0 58       	rjmp	8000651e <_vfprintf_r+0x42>
80006516:	4c d8       	lddpc	r8,80006648 <_vfprintf_r+0x16c>
80006518:	10 31       	cp.w	r1,r8
8000651a:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000651e:	82 68       	ld.sh	r8,r1[0xc]
80006520:	ed b8 00 03 	bld	r8,0x3
80006524:	c0 41       	brne	8000652c <_vfprintf_r+0x50>
80006526:	62 48       	ld.w	r8,r1[0x10]
80006528:	58 08       	cp.w	r8,0
8000652a:	c0 71       	brne	80006538 <_vfprintf_r+0x5c>
8000652c:	02 9b       	mov	r11,r1
8000652e:	0a 9c       	mov	r12,r5
80006530:	e0 a0 0f 6c 	rcall	80008408 <__swsetup_r>
80006534:	e0 81 0f 63 	brne	800083fa <_vfprintf_r+0x1f1e>
80006538:	82 68       	ld.sh	r8,r1[0xc]
8000653a:	10 99       	mov	r9,r8
8000653c:	e2 19 00 1a 	andl	r9,0x1a,COH
80006540:	58 a9       	cp.w	r9,10
80006542:	c3 c1       	brne	800065ba <_vfprintf_r+0xde>
80006544:	82 79       	ld.sh	r9,r1[0xe]
80006546:	30 0a       	mov	r10,0
80006548:	f4 09 19 00 	cp.h	r9,r10
8000654c:	c3 75       	brlt	800065ba <_vfprintf_r+0xde>
8000654e:	a1 d8       	cbr	r8,0x1
80006550:	fb 58 05 d0 	st.h	sp[1488],r8
80006554:	62 88       	ld.w	r8,r1[0x20]
80006556:	fb 48 05 e4 	st.w	sp[1508],r8
8000655a:	62 a8       	ld.w	r8,r1[0x28]
8000655c:	fb 48 05 ec 	st.w	sp[1516],r8
80006560:	fa c8 ff bc 	sub	r8,sp,-68
80006564:	fb 48 05 d4 	st.w	sp[1492],r8
80006568:	fb 48 05 c4 	st.w	sp[1476],r8
8000656c:	e0 68 04 00 	mov	r8,1024
80006570:	fb 48 05 d8 	st.w	sp[1496],r8
80006574:	fb 48 05 cc 	st.w	sp[1484],r8
80006578:	30 08       	mov	r8,0
8000657a:	fb 59 05 d2 	st.h	sp[1490],r9
8000657e:	0e 9a       	mov	r10,r7
80006580:	41 09       	lddsp	r9,sp[0x40]
80006582:	fa c7 fa 3c 	sub	r7,sp,-1476
80006586:	fb 48 05 dc 	st.w	sp[1500],r8
8000658a:	0a 9c       	mov	r12,r5
8000658c:	0e 9b       	mov	r11,r7
8000658e:	ca 7f       	rcall	800064dc <_vfprintf_r>
80006590:	50 bc       	stdsp	sp[0x2c],r12
80006592:	c0 95       	brlt	800065a4 <_vfprintf_r+0xc8>
80006594:	0e 9b       	mov	r11,r7
80006596:	0a 9c       	mov	r12,r5
80006598:	e0 a0 16 26 	rcall	800091e4 <_fflush_r>
8000659c:	40 be       	lddsp	lr,sp[0x2c]
8000659e:	f9 be 01 ff 	movne	lr,-1
800065a2:	50 be       	stdsp	sp[0x2c],lr
800065a4:	fb 08 05 d0 	ld.sh	r8,sp[1488]
800065a8:	ed b8 00 06 	bld	r8,0x6
800065ac:	e0 81 0f 29 	brne	800083fe <_vfprintf_r+0x1f22>
800065b0:	82 68       	ld.sh	r8,r1[0xc]
800065b2:	a7 a8       	sbr	r8,0x6
800065b4:	a2 68       	st.h	r1[0xc],r8
800065b6:	e0 8f 0f 24 	bral	800083fe <_vfprintf_r+0x1f22>
800065ba:	30 08       	mov	r8,0
800065bc:	fb 48 06 b4 	st.w	sp[1716],r8
800065c0:	fb 48 06 90 	st.w	sp[1680],r8
800065c4:	fb 48 06 8c 	st.w	sp[1676],r8
800065c8:	fb 48 06 b0 	st.w	sp[1712],r8
800065cc:	30 08       	mov	r8,0
800065ce:	30 09       	mov	r9,0
800065d0:	50 a7       	stdsp	sp[0x28],r7
800065d2:	50 78       	stdsp	sp[0x1c],r8
800065d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800065d8:	3f f8       	mov	r8,-1
800065da:	50 59       	stdsp	sp[0x14],r9
800065dc:	fb 43 06 88 	st.w	sp[1672],r3
800065e0:	fb 48 05 44 	st.w	sp[1348],r8
800065e4:	12 9c       	mov	r12,r9
800065e6:	50 69       	stdsp	sp[0x18],r9
800065e8:	50 d9       	stdsp	sp[0x34],r9
800065ea:	50 e9       	stdsp	sp[0x38],r9
800065ec:	50 b9       	stdsp	sp[0x2c],r9
800065ee:	12 97       	mov	r7,r9
800065f0:	0a 94       	mov	r4,r5
800065f2:	40 a2       	lddsp	r2,sp[0x28]
800065f4:	32 5a       	mov	r10,37
800065f6:	30 08       	mov	r8,0
800065f8:	c0 28       	rjmp	800065fc <_vfprintf_r+0x120>
800065fa:	2f f2       	sub	r2,-1
800065fc:	05 89       	ld.ub	r9,r2[0x0]
800065fe:	f0 09 18 00 	cp.b	r9,r8
80006602:	5f 1b       	srne	r11
80006604:	f4 09 18 00 	cp.b	r9,r10
80006608:	5f 19       	srne	r9
8000660a:	f3 eb 00 0b 	and	r11,r9,r11
8000660e:	f0 0b 18 00 	cp.b	r11,r8
80006612:	cf 41       	brne	800065fa <_vfprintf_r+0x11e>
80006614:	40 ab       	lddsp	r11,sp[0x28]
80006616:	e4 0b 01 06 	sub	r6,r2,r11
8000661a:	c2 50       	breq	80006664 <_vfprintf_r+0x188>
8000661c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006620:	0c 08       	add	r8,r6
80006622:	87 0b       	st.w	r3[0x0],r11
80006624:	fb 48 06 90 	st.w	sp[1680],r8
80006628:	87 16       	st.w	r3[0x4],r6
8000662a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000662e:	2f f8       	sub	r8,-1
80006630:	fb 48 06 8c 	st.w	sp[1676],r8
80006634:	58 78       	cp.w	r8,7
80006636:	e0 89 00 0b 	brgt	8000664c <_vfprintf_r+0x170>
8000663a:	2f 83       	sub	r3,-8
8000663c:	c1 18       	rjmp	8000665e <_vfprintf_r+0x182>
8000663e:	d7 03       	nop
80006640:	80 00       	ld.sh	r0,r0[0x0]
80006642:	cb 88       	rjmp	800067b2 <_vfprintf_r+0x2d6>
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	cb a8       	rjmp	800067ba <_vfprintf_r+0x2de>
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	cb c8       	rjmp	800067c2 <_vfprintf_r+0x2e6>
8000664c:	fa ca f9 78 	sub	r10,sp,-1672
80006650:	02 9b       	mov	r11,r1
80006652:	08 9c       	mov	r12,r4
80006654:	c3 6f       	rcall	800064c0 <__sprint_r>
80006656:	e0 81 0e ce 	brne	800083f2 <_vfprintf_r+0x1f16>
8000665a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000665e:	40 ba       	lddsp	r10,sp[0x2c]
80006660:	0c 0a       	add	r10,r6
80006662:	50 ba       	stdsp	sp[0x2c],r10
80006664:	05 89       	ld.ub	r9,r2[0x0]
80006666:	30 08       	mov	r8,0
80006668:	f0 09 18 00 	cp.b	r9,r8
8000666c:	e0 80 0e b2 	breq	800083d0 <_vfprintf_r+0x1ef4>
80006670:	30 09       	mov	r9,0
80006672:	fb 68 06 bb 	st.b	sp[1723],r8
80006676:	0e 96       	mov	r6,r7
80006678:	e4 c8 ff ff 	sub	r8,r2,-1
8000667c:	3f fe       	mov	lr,-1
8000667e:	50 93       	stdsp	sp[0x24],r3
80006680:	50 41       	stdsp	sp[0x10],r1
80006682:	0e 93       	mov	r3,r7
80006684:	04 91       	mov	r1,r2
80006686:	50 89       	stdsp	sp[0x20],r9
80006688:	50 a8       	stdsp	sp[0x28],r8
8000668a:	50 2e       	stdsp	sp[0x8],lr
8000668c:	50 39       	stdsp	sp[0xc],r9
8000668e:	12 95       	mov	r5,r9
80006690:	12 90       	mov	r0,r9
80006692:	10 97       	mov	r7,r8
80006694:	08 92       	mov	r2,r4
80006696:	c0 78       	rjmp	800066a4 <_vfprintf_r+0x1c8>
80006698:	3f fc       	mov	r12,-1
8000669a:	08 97       	mov	r7,r4
8000669c:	50 2c       	stdsp	sp[0x8],r12
8000669e:	c0 38       	rjmp	800066a4 <_vfprintf_r+0x1c8>
800066a0:	30 0b       	mov	r11,0
800066a2:	50 3b       	stdsp	sp[0xc],r11
800066a4:	0f 38       	ld.ub	r8,r7++
800066a6:	c0 28       	rjmp	800066aa <_vfprintf_r+0x1ce>
800066a8:	12 90       	mov	r0,r9
800066aa:	f0 c9 00 20 	sub	r9,r8,32
800066ae:	e0 49 00 58 	cp.w	r9,88
800066b2:	e0 8b 0a 36 	brhi	80007b1e <_vfprintf_r+0x1642>
800066b6:	4d 9a       	lddpc	r10,80006818 <_vfprintf_r+0x33c>
800066b8:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
800066bc:	50 a7       	stdsp	sp[0x28],r7
800066be:	50 80       	stdsp	sp[0x20],r0
800066c0:	0c 97       	mov	r7,r6
800066c2:	04 94       	mov	r4,r2
800066c4:	06 96       	mov	r6,r3
800066c6:	02 92       	mov	r2,r1
800066c8:	4d 59       	lddpc	r9,8000681c <_vfprintf_r+0x340>
800066ca:	40 93       	lddsp	r3,sp[0x24]
800066cc:	10 90       	mov	r0,r8
800066ce:	40 41       	lddsp	r1,sp[0x10]
800066d0:	50 d9       	stdsp	sp[0x34],r9
800066d2:	e0 8f 08 95 	bral	800077fc <_vfprintf_r+0x1320>
800066d6:	30 08       	mov	r8,0
800066d8:	fb 39 06 bb 	ld.ub	r9,sp[1723]
800066dc:	f0 09 18 00 	cp.b	r9,r8
800066e0:	ce 21       	brne	800066a4 <_vfprintf_r+0x1c8>
800066e2:	32 08       	mov	r8,32
800066e4:	c6 e8       	rjmp	800067c0 <_vfprintf_r+0x2e4>
800066e6:	a1 a5       	sbr	r5,0x0
800066e8:	cd eb       	rjmp	800066a4 <_vfprintf_r+0x1c8>
800066ea:	0f 89       	ld.ub	r9,r7[0x0]
800066ec:	f2 c8 00 30 	sub	r8,r9,48
800066f0:	58 98       	cp.w	r8,9
800066f2:	e0 8b 00 1d 	brhi	8000672c <_vfprintf_r+0x250>
800066f6:	ee c8 ff ff 	sub	r8,r7,-1
800066fa:	30 0b       	mov	r11,0
800066fc:	23 09       	sub	r9,48
800066fe:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80006702:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80006706:	11 39       	ld.ub	r9,r8++
80006708:	f2 ca 00 30 	sub	r10,r9,48
8000670c:	58 9a       	cp.w	r10,9
8000670e:	fe 98 ff f7 	brls	800066fc <_vfprintf_r+0x220>
80006712:	e0 49 00 24 	cp.w	r9,36
80006716:	cc 51       	brne	800066a0 <_vfprintf_r+0x1c4>
80006718:	e0 4b 00 20 	cp.w	r11,32
8000671c:	e0 89 0e 6a 	brgt	800083f0 <_vfprintf_r+0x1f14>
80006720:	20 1b       	sub	r11,1
80006722:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006726:	12 3b       	cp.w	r11,r9
80006728:	c0 95       	brlt	8000673a <_vfprintf_r+0x25e>
8000672a:	c1 08       	rjmp	8000674a <_vfprintf_r+0x26e>
8000672c:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006730:	ec ca ff ff 	sub	r10,r6,-1
80006734:	12 36       	cp.w	r6,r9
80006736:	c1 f5       	brlt	80006774 <_vfprintf_r+0x298>
80006738:	c2 68       	rjmp	80006784 <_vfprintf_r+0x2a8>
8000673a:	fa ce f9 44 	sub	lr,sp,-1724
8000673e:	10 97       	mov	r7,r8
80006740:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80006744:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80006748:	c3 58       	rjmp	800067b2 <_vfprintf_r+0x2d6>
8000674a:	10 97       	mov	r7,r8
8000674c:	fa c8 f9 50 	sub	r8,sp,-1712
80006750:	1a d8       	st.w	--sp,r8
80006752:	fa c8 fa b8 	sub	r8,sp,-1352
80006756:	1a d8       	st.w	--sp,r8
80006758:	fa c8 fb b4 	sub	r8,sp,-1100
8000675c:	02 9a       	mov	r10,r1
8000675e:	1a d8       	st.w	--sp,r8
80006760:	04 9c       	mov	r12,r2
80006762:	fa c8 f9 40 	sub	r8,sp,-1728
80006766:	fa c9 ff b4 	sub	r9,sp,-76
8000676a:	fe b0 fd 1b 	rcall	800061a0 <get_arg>
8000676e:	2f dd       	sub	sp,-12
80006770:	78 00       	ld.w	r0,r12[0x0]
80006772:	c2 08       	rjmp	800067b2 <_vfprintf_r+0x2d6>
80006774:	fa cc f9 44 	sub	r12,sp,-1724
80006778:	14 96       	mov	r6,r10
8000677a:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000677e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80006782:	c1 88       	rjmp	800067b2 <_vfprintf_r+0x2d6>
80006784:	41 08       	lddsp	r8,sp[0x40]
80006786:	59 f9       	cp.w	r9,31
80006788:	e0 89 00 11 	brgt	800067aa <_vfprintf_r+0x2ce>
8000678c:	f0 cb ff fc 	sub	r11,r8,-4
80006790:	51 0b       	stdsp	sp[0x40],r11
80006792:	70 00       	ld.w	r0,r8[0x0]
80006794:	fa cb f9 44 	sub	r11,sp,-1724
80006798:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000679c:	f1 40 fd 88 	st.w	r8[-632],r0
800067a0:	2f f9       	sub	r9,-1
800067a2:	14 96       	mov	r6,r10
800067a4:	fb 49 06 b4 	st.w	sp[1716],r9
800067a8:	c0 58       	rjmp	800067b2 <_vfprintf_r+0x2d6>
800067aa:	70 00       	ld.w	r0,r8[0x0]
800067ac:	14 96       	mov	r6,r10
800067ae:	2f c8       	sub	r8,-4
800067b0:	51 08       	stdsp	sp[0x40],r8
800067b2:	58 00       	cp.w	r0,0
800067b4:	fe 94 ff 78 	brge	800066a4 <_vfprintf_r+0x1c8>
800067b8:	5c 30       	neg	r0
800067ba:	a3 a5       	sbr	r5,0x2
800067bc:	c7 4b       	rjmp	800066a4 <_vfprintf_r+0x1c8>
800067be:	32 b8       	mov	r8,43
800067c0:	fb 68 06 bb 	st.b	sp[1723],r8
800067c4:	c7 0b       	rjmp	800066a4 <_vfprintf_r+0x1c8>
800067c6:	0f 38       	ld.ub	r8,r7++
800067c8:	e0 48 00 2a 	cp.w	r8,42
800067cc:	c0 30       	breq	800067d2 <_vfprintf_r+0x2f6>
800067ce:	30 09       	mov	r9,0
800067d0:	c7 d8       	rjmp	800068ca <_vfprintf_r+0x3ee>
800067d2:	0f 88       	ld.ub	r8,r7[0x0]
800067d4:	f0 c9 00 30 	sub	r9,r8,48
800067d8:	58 99       	cp.w	r9,9
800067da:	e0 8b 00 23 	brhi	80006820 <_vfprintf_r+0x344>
800067de:	ee c4 ff ff 	sub	r4,r7,-1
800067e2:	30 0b       	mov	r11,0
800067e4:	23 08       	sub	r8,48
800067e6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800067ea:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
800067ee:	09 38       	ld.ub	r8,r4++
800067f0:	f0 c9 00 30 	sub	r9,r8,48
800067f4:	58 99       	cp.w	r9,9
800067f6:	fe 98 ff f7 	brls	800067e4 <_vfprintf_r+0x308>
800067fa:	e0 48 00 24 	cp.w	r8,36
800067fe:	fe 91 ff 51 	brne	800066a0 <_vfprintf_r+0x1c4>
80006802:	e0 4b 00 20 	cp.w	r11,32
80006806:	e0 89 0d f5 	brgt	800083f0 <_vfprintf_r+0x1f14>
8000680a:	20 1b       	sub	r11,1
8000680c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006810:	10 3b       	cp.w	r11,r8
80006812:	c0 e5       	brlt	8000682e <_vfprintf_r+0x352>
80006814:	c1 58       	rjmp	8000683e <_vfprintf_r+0x362>
80006816:	d7 03       	nop
80006818:	80 00       	ld.sh	r0,r0[0x0]
8000681a:	c7 e0       	breq	80006916 <_vfprintf_r+0x43a>
8000681c:	80 00       	ld.sh	r0,r0[0x0]
8000681e:	ca 1c       	rcall	80006960 <_vfprintf_r+0x484>
80006820:	fa fa 06 b4 	ld.w	r10,sp[1716]
80006824:	ec c9 ff ff 	sub	r9,r6,-1
80006828:	14 36       	cp.w	r6,r10
8000682a:	c1 f5       	brlt	80006868 <_vfprintf_r+0x38c>
8000682c:	c2 88       	rjmp	8000687c <_vfprintf_r+0x3a0>
8000682e:	fa ca f9 44 	sub	r10,sp,-1724
80006832:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80006836:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000683a:	50 2b       	stdsp	sp[0x8],r11
8000683c:	c3 c8       	rjmp	800068b4 <_vfprintf_r+0x3d8>
8000683e:	fa c8 f9 50 	sub	r8,sp,-1712
80006842:	1a d8       	st.w	--sp,r8
80006844:	fa c8 fa b8 	sub	r8,sp,-1352
80006848:	1a d8       	st.w	--sp,r8
8000684a:	fa c8 fb b4 	sub	r8,sp,-1100
8000684e:	02 9a       	mov	r10,r1
80006850:	1a d8       	st.w	--sp,r8
80006852:	04 9c       	mov	r12,r2
80006854:	fa c8 f9 40 	sub	r8,sp,-1728
80006858:	fa c9 ff b4 	sub	r9,sp,-76
8000685c:	fe b0 fc a2 	rcall	800061a0 <get_arg>
80006860:	2f dd       	sub	sp,-12
80006862:	78 0c       	ld.w	r12,r12[0x0]
80006864:	50 2c       	stdsp	sp[0x8],r12
80006866:	c2 78       	rjmp	800068b4 <_vfprintf_r+0x3d8>
80006868:	12 96       	mov	r6,r9
8000686a:	0e 94       	mov	r4,r7
8000686c:	fa c9 f9 44 	sub	r9,sp,-1724
80006870:	f2 03 00 38 	add	r8,r9,r3<<0x3
80006874:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80006878:	50 28       	stdsp	sp[0x8],r8
8000687a:	c1 d8       	rjmp	800068b4 <_vfprintf_r+0x3d8>
8000687c:	41 08       	lddsp	r8,sp[0x40]
8000687e:	59 fa       	cp.w	r10,31
80006880:	e0 89 00 14 	brgt	800068a8 <_vfprintf_r+0x3cc>
80006884:	f0 cb ff fc 	sub	r11,r8,-4
80006888:	70 08       	ld.w	r8,r8[0x0]
8000688a:	51 0b       	stdsp	sp[0x40],r11
8000688c:	50 28       	stdsp	sp[0x8],r8
8000688e:	fa c6 f9 44 	sub	r6,sp,-1724
80006892:	40 2e       	lddsp	lr,sp[0x8]
80006894:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80006898:	f1 4e fd 88 	st.w	r8[-632],lr
8000689c:	2f fa       	sub	r10,-1
8000689e:	0e 94       	mov	r4,r7
800068a0:	fb 4a 06 b4 	st.w	sp[1716],r10
800068a4:	12 96       	mov	r6,r9
800068a6:	c0 78       	rjmp	800068b4 <_vfprintf_r+0x3d8>
800068a8:	70 0c       	ld.w	r12,r8[0x0]
800068aa:	0e 94       	mov	r4,r7
800068ac:	2f c8       	sub	r8,-4
800068ae:	50 2c       	stdsp	sp[0x8],r12
800068b0:	12 96       	mov	r6,r9
800068b2:	51 08       	stdsp	sp[0x40],r8
800068b4:	40 2b       	lddsp	r11,sp[0x8]
800068b6:	58 0b       	cp.w	r11,0
800068b8:	fe 95 fe f0 	brlt	80006698 <_vfprintf_r+0x1bc>
800068bc:	08 97       	mov	r7,r4
800068be:	cf 3a       	rjmp	800066a4 <_vfprintf_r+0x1c8>
800068c0:	f2 09 00 29 	add	r9,r9,r9<<0x2
800068c4:	0f 38       	ld.ub	r8,r7++
800068c6:	f4 09 00 19 	add	r9,r10,r9<<0x1
800068ca:	f0 ca 00 30 	sub	r10,r8,48
800068ce:	58 9a       	cp.w	r10,9
800068d0:	fe 98 ff f8 	brls	800068c0 <_vfprintf_r+0x3e4>
800068d4:	3f fa       	mov	r10,-1
800068d6:	f2 0a 0c 49 	max	r9,r9,r10
800068da:	50 29       	stdsp	sp[0x8],r9
800068dc:	ce 7a       	rjmp	800066aa <_vfprintf_r+0x1ce>
800068de:	a7 b5       	sbr	r5,0x7
800068e0:	ce 2a       	rjmp	800066a4 <_vfprintf_r+0x1c8>
800068e2:	30 09       	mov	r9,0
800068e4:	23 08       	sub	r8,48
800068e6:	f2 09 00 29 	add	r9,r9,r9<<0x2
800068ea:	f0 09 00 19 	add	r9,r8,r9<<0x1
800068ee:	0f 38       	ld.ub	r8,r7++
800068f0:	f0 ca 00 30 	sub	r10,r8,48
800068f4:	58 9a       	cp.w	r10,9
800068f6:	fe 98 ff f7 	brls	800068e4 <_vfprintf_r+0x408>
800068fa:	e0 48 00 24 	cp.w	r8,36
800068fe:	fe 91 fe d5 	brne	800066a8 <_vfprintf_r+0x1cc>
80006902:	e0 49 00 20 	cp.w	r9,32
80006906:	e0 89 0d 75 	brgt	800083f0 <_vfprintf_r+0x1f14>
8000690a:	f2 c3 00 01 	sub	r3,r9,1
8000690e:	30 19       	mov	r9,1
80006910:	50 39       	stdsp	sp[0xc],r9
80006912:	cc 9a       	rjmp	800066a4 <_vfprintf_r+0x1c8>
80006914:	a3 b5       	sbr	r5,0x3
80006916:	cc 7a       	rjmp	800066a4 <_vfprintf_r+0x1c8>
80006918:	a7 a5       	sbr	r5,0x6
8000691a:	cc 5a       	rjmp	800066a4 <_vfprintf_r+0x1c8>
8000691c:	0a 98       	mov	r8,r5
8000691e:	a5 b5       	sbr	r5,0x5
80006920:	a5 a8       	sbr	r8,0x4
80006922:	0f 89       	ld.ub	r9,r7[0x0]
80006924:	36 ce       	mov	lr,108
80006926:	fc 09 18 00 	cp.b	r9,lr
8000692a:	f7 b7 00 ff 	subeq	r7,-1
8000692e:	f0 05 17 10 	movne	r5,r8
80006932:	cb 9a       	rjmp	800066a4 <_vfprintf_r+0x1c8>
80006934:	a5 b5       	sbr	r5,0x5
80006936:	cb 7a       	rjmp	800066a4 <_vfprintf_r+0x1c8>
80006938:	50 a7       	stdsp	sp[0x28],r7
8000693a:	50 80       	stdsp	sp[0x20],r0
8000693c:	0c 97       	mov	r7,r6
8000693e:	10 90       	mov	r0,r8
80006940:	06 96       	mov	r6,r3
80006942:	04 94       	mov	r4,r2
80006944:	40 93       	lddsp	r3,sp[0x24]
80006946:	02 92       	mov	r2,r1
80006948:	0e 99       	mov	r9,r7
8000694a:	40 41       	lddsp	r1,sp[0x10]
8000694c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006950:	40 3c       	lddsp	r12,sp[0xc]
80006952:	58 0c       	cp.w	r12,0
80006954:	c1 d0       	breq	8000698e <_vfprintf_r+0x4b2>
80006956:	10 36       	cp.w	r6,r8
80006958:	c0 64       	brge	80006964 <_vfprintf_r+0x488>
8000695a:	fa cb f9 44 	sub	r11,sp,-1724
8000695e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006962:	c1 d8       	rjmp	8000699c <_vfprintf_r+0x4c0>
80006964:	fa c8 f9 50 	sub	r8,sp,-1712
80006968:	1a d8       	st.w	--sp,r8
8000696a:	fa c8 fa b8 	sub	r8,sp,-1352
8000696e:	1a d8       	st.w	--sp,r8
80006970:	fa c8 fb b4 	sub	r8,sp,-1100
80006974:	1a d8       	st.w	--sp,r8
80006976:	fa c8 f9 40 	sub	r8,sp,-1728
8000697a:	fa c9 ff b4 	sub	r9,sp,-76
8000697e:	04 9a       	mov	r10,r2
80006980:	0c 9b       	mov	r11,r6
80006982:	08 9c       	mov	r12,r4
80006984:	fe b0 fc 0e 	rcall	800061a0 <get_arg>
80006988:	2f dd       	sub	sp,-12
8000698a:	19 b8       	ld.ub	r8,r12[0x3]
8000698c:	c2 28       	rjmp	800069d0 <_vfprintf_r+0x4f4>
8000698e:	2f f7       	sub	r7,-1
80006990:	10 39       	cp.w	r9,r8
80006992:	c0 84       	brge	800069a2 <_vfprintf_r+0x4c6>
80006994:	fa ca f9 44 	sub	r10,sp,-1724
80006998:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000699c:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800069a0:	c1 88       	rjmp	800069d0 <_vfprintf_r+0x4f4>
800069a2:	41 09       	lddsp	r9,sp[0x40]
800069a4:	59 f8       	cp.w	r8,31
800069a6:	e0 89 00 12 	brgt	800069ca <_vfprintf_r+0x4ee>
800069aa:	f2 ca ff fc 	sub	r10,r9,-4
800069ae:	51 0a       	stdsp	sp[0x40],r10
800069b0:	72 09       	ld.w	r9,r9[0x0]
800069b2:	fa c6 f9 44 	sub	r6,sp,-1724
800069b6:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800069ba:	2f f8       	sub	r8,-1
800069bc:	f5 49 fd 88 	st.w	r10[-632],r9
800069c0:	fb 48 06 b4 	st.w	sp[1716],r8
800069c4:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
800069c8:	c0 48       	rjmp	800069d0 <_vfprintf_r+0x4f4>
800069ca:	13 b8       	ld.ub	r8,r9[0x3]
800069cc:	2f c9       	sub	r9,-4
800069ce:	51 09       	stdsp	sp[0x40],r9
800069d0:	fb 68 06 60 	st.b	sp[1632],r8
800069d4:	30 0e       	mov	lr,0
800069d6:	30 08       	mov	r8,0
800069d8:	30 12       	mov	r2,1
800069da:	fb 68 06 bb 	st.b	sp[1723],r8
800069de:	50 2e       	stdsp	sp[0x8],lr
800069e0:	e0 8f 08 b1 	bral	80007b42 <_vfprintf_r+0x1666>
800069e4:	50 a7       	stdsp	sp[0x28],r7
800069e6:	50 80       	stdsp	sp[0x20],r0
800069e8:	0c 97       	mov	r7,r6
800069ea:	04 94       	mov	r4,r2
800069ec:	06 96       	mov	r6,r3
800069ee:	02 92       	mov	r2,r1
800069f0:	40 93       	lddsp	r3,sp[0x24]
800069f2:	10 90       	mov	r0,r8
800069f4:	40 41       	lddsp	r1,sp[0x10]
800069f6:	a5 a5       	sbr	r5,0x4
800069f8:	c0 a8       	rjmp	80006a0c <_vfprintf_r+0x530>
800069fa:	50 a7       	stdsp	sp[0x28],r7
800069fc:	50 80       	stdsp	sp[0x20],r0
800069fe:	0c 97       	mov	r7,r6
80006a00:	04 94       	mov	r4,r2
80006a02:	06 96       	mov	r6,r3
80006a04:	02 92       	mov	r2,r1
80006a06:	40 93       	lddsp	r3,sp[0x24]
80006a08:	10 90       	mov	r0,r8
80006a0a:	40 41       	lddsp	r1,sp[0x10]
80006a0c:	ed b5 00 05 	bld	r5,0x5
80006a10:	c5 11       	brne	80006ab2 <_vfprintf_r+0x5d6>
80006a12:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a16:	40 3c       	lddsp	r12,sp[0xc]
80006a18:	58 0c       	cp.w	r12,0
80006a1a:	c1 e0       	breq	80006a56 <_vfprintf_r+0x57a>
80006a1c:	10 36       	cp.w	r6,r8
80006a1e:	c0 64       	brge	80006a2a <_vfprintf_r+0x54e>
80006a20:	fa cb f9 44 	sub	r11,sp,-1724
80006a24:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006a28:	c2 08       	rjmp	80006a68 <_vfprintf_r+0x58c>
80006a2a:	fa c8 f9 50 	sub	r8,sp,-1712
80006a2e:	1a d8       	st.w	--sp,r8
80006a30:	fa c8 fa b8 	sub	r8,sp,-1352
80006a34:	0c 9b       	mov	r11,r6
80006a36:	1a d8       	st.w	--sp,r8
80006a38:	fa c8 fb b4 	sub	r8,sp,-1100
80006a3c:	1a d8       	st.w	--sp,r8
80006a3e:	fa c9 ff b4 	sub	r9,sp,-76
80006a42:	fa c8 f9 40 	sub	r8,sp,-1728
80006a46:	04 9a       	mov	r10,r2
80006a48:	08 9c       	mov	r12,r4
80006a4a:	fe b0 fb ab 	rcall	800061a0 <get_arg>
80006a4e:	2f dd       	sub	sp,-12
80006a50:	78 1b       	ld.w	r11,r12[0x4]
80006a52:	78 09       	ld.w	r9,r12[0x0]
80006a54:	c2 b8       	rjmp	80006aaa <_vfprintf_r+0x5ce>
80006a56:	ee ca ff ff 	sub	r10,r7,-1
80006a5a:	10 37       	cp.w	r7,r8
80006a5c:	c0 b4       	brge	80006a72 <_vfprintf_r+0x596>
80006a5e:	fa c9 f9 44 	sub	r9,sp,-1724
80006a62:	14 97       	mov	r7,r10
80006a64:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006a68:	ec fb fd 8c 	ld.w	r11,r6[-628]
80006a6c:	ec f9 fd 88 	ld.w	r9,r6[-632]
80006a70:	c1 d8       	rjmp	80006aaa <_vfprintf_r+0x5ce>
80006a72:	41 09       	lddsp	r9,sp[0x40]
80006a74:	59 f8       	cp.w	r8,31
80006a76:	e0 89 00 14 	brgt	80006a9e <_vfprintf_r+0x5c2>
80006a7a:	f2 cb ff f8 	sub	r11,r9,-8
80006a7e:	51 0b       	stdsp	sp[0x40],r11
80006a80:	fa c6 f9 44 	sub	r6,sp,-1724
80006a84:	72 1b       	ld.w	r11,r9[0x4]
80006a86:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80006a8a:	72 09       	ld.w	r9,r9[0x0]
80006a8c:	f9 4b fd 8c 	st.w	r12[-628],r11
80006a90:	f9 49 fd 88 	st.w	r12[-632],r9
80006a94:	2f f8       	sub	r8,-1
80006a96:	14 97       	mov	r7,r10
80006a98:	fb 48 06 b4 	st.w	sp[1716],r8
80006a9c:	c0 78       	rjmp	80006aaa <_vfprintf_r+0x5ce>
80006a9e:	f2 c8 ff f8 	sub	r8,r9,-8
80006aa2:	72 1b       	ld.w	r11,r9[0x4]
80006aa4:	14 97       	mov	r7,r10
80006aa6:	51 08       	stdsp	sp[0x40],r8
80006aa8:	72 09       	ld.w	r9,r9[0x0]
80006aaa:	16 98       	mov	r8,r11
80006aac:	fa e9 00 00 	st.d	sp[0],r8
80006ab0:	ca e8       	rjmp	80006c0c <_vfprintf_r+0x730>
80006ab2:	ed b5 00 04 	bld	r5,0x4
80006ab6:	c1 71       	brne	80006ae4 <_vfprintf_r+0x608>
80006ab8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006abc:	40 3e       	lddsp	lr,sp[0xc]
80006abe:	58 0e       	cp.w	lr,0
80006ac0:	c0 80       	breq	80006ad0 <_vfprintf_r+0x5f4>
80006ac2:	10 36       	cp.w	r6,r8
80006ac4:	c6 94       	brge	80006b96 <_vfprintf_r+0x6ba>
80006ac6:	fa cc f9 44 	sub	r12,sp,-1724
80006aca:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006ace:	c8 28       	rjmp	80006bd2 <_vfprintf_r+0x6f6>
80006ad0:	ee ca ff ff 	sub	r10,r7,-1
80006ad4:	10 37       	cp.w	r7,r8
80006ad6:	e0 84 00 81 	brge	80006bd8 <_vfprintf_r+0x6fc>
80006ada:	fa cb f9 44 	sub	r11,sp,-1724
80006ade:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006ae2:	c7 78       	rjmp	80006bd0 <_vfprintf_r+0x6f4>
80006ae4:	ed b5 00 06 	bld	r5,0x6
80006ae8:	c4 b1       	brne	80006b7e <_vfprintf_r+0x6a2>
80006aea:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006aee:	40 3c       	lddsp	r12,sp[0xc]
80006af0:	58 0c       	cp.w	r12,0
80006af2:	c1 d0       	breq	80006b2c <_vfprintf_r+0x650>
80006af4:	10 36       	cp.w	r6,r8
80006af6:	c0 64       	brge	80006b02 <_vfprintf_r+0x626>
80006af8:	fa cb f9 44 	sub	r11,sp,-1724
80006afc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b00:	c1 f8       	rjmp	80006b3e <_vfprintf_r+0x662>
80006b02:	fa c8 f9 50 	sub	r8,sp,-1712
80006b06:	1a d8       	st.w	--sp,r8
80006b08:	fa c8 fa b8 	sub	r8,sp,-1352
80006b0c:	1a d8       	st.w	--sp,r8
80006b0e:	fa c8 fb b4 	sub	r8,sp,-1100
80006b12:	1a d8       	st.w	--sp,r8
80006b14:	fa c8 f9 40 	sub	r8,sp,-1728
80006b18:	fa c9 ff b4 	sub	r9,sp,-76
80006b1c:	04 9a       	mov	r10,r2
80006b1e:	0c 9b       	mov	r11,r6
80006b20:	08 9c       	mov	r12,r4
80006b22:	fe b0 fb 3f 	rcall	800061a0 <get_arg>
80006b26:	2f dd       	sub	sp,-12
80006b28:	98 18       	ld.sh	r8,r12[0x2]
80006b2a:	c2 68       	rjmp	80006b76 <_vfprintf_r+0x69a>
80006b2c:	ee ca ff ff 	sub	r10,r7,-1
80006b30:	10 37       	cp.w	r7,r8
80006b32:	c0 94       	brge	80006b44 <_vfprintf_r+0x668>
80006b34:	fa c9 f9 44 	sub	r9,sp,-1724
80006b38:	14 97       	mov	r7,r10
80006b3a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006b3e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006b42:	c1 a8       	rjmp	80006b76 <_vfprintf_r+0x69a>
80006b44:	41 09       	lddsp	r9,sp[0x40]
80006b46:	59 f8       	cp.w	r8,31
80006b48:	e0 89 00 13 	brgt	80006b6e <_vfprintf_r+0x692>
80006b4c:	f2 cb ff fc 	sub	r11,r9,-4
80006b50:	51 0b       	stdsp	sp[0x40],r11
80006b52:	72 09       	ld.w	r9,r9[0x0]
80006b54:	fa c6 f9 44 	sub	r6,sp,-1724
80006b58:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006b5c:	2f f8       	sub	r8,-1
80006b5e:	f7 49 fd 88 	st.w	r11[-632],r9
80006b62:	fb 48 06 b4 	st.w	sp[1716],r8
80006b66:	14 97       	mov	r7,r10
80006b68:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006b6c:	c0 58       	rjmp	80006b76 <_vfprintf_r+0x69a>
80006b6e:	92 18       	ld.sh	r8,r9[0x2]
80006b70:	14 97       	mov	r7,r10
80006b72:	2f c9       	sub	r9,-4
80006b74:	51 09       	stdsp	sp[0x40],r9
80006b76:	50 18       	stdsp	sp[0x4],r8
80006b78:	bf 58       	asr	r8,0x1f
80006b7a:	50 08       	stdsp	sp[0x0],r8
80006b7c:	c4 88       	rjmp	80006c0c <_vfprintf_r+0x730>
80006b7e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b82:	40 3c       	lddsp	r12,sp[0xc]
80006b84:	58 0c       	cp.w	r12,0
80006b86:	c1 d0       	breq	80006bc0 <_vfprintf_r+0x6e4>
80006b88:	10 36       	cp.w	r6,r8
80006b8a:	c0 64       	brge	80006b96 <_vfprintf_r+0x6ba>
80006b8c:	fa cb f9 44 	sub	r11,sp,-1724
80006b90:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b94:	c1 f8       	rjmp	80006bd2 <_vfprintf_r+0x6f6>
80006b96:	fa c8 f9 50 	sub	r8,sp,-1712
80006b9a:	1a d8       	st.w	--sp,r8
80006b9c:	fa c8 fa b8 	sub	r8,sp,-1352
80006ba0:	0c 9b       	mov	r11,r6
80006ba2:	1a d8       	st.w	--sp,r8
80006ba4:	fa c8 fb b4 	sub	r8,sp,-1100
80006ba8:	04 9a       	mov	r10,r2
80006baa:	1a d8       	st.w	--sp,r8
80006bac:	08 9c       	mov	r12,r4
80006bae:	fa c8 f9 40 	sub	r8,sp,-1728
80006bb2:	fa c9 ff b4 	sub	r9,sp,-76
80006bb6:	fe b0 fa f5 	rcall	800061a0 <get_arg>
80006bba:	2f dd       	sub	sp,-12
80006bbc:	78 0b       	ld.w	r11,r12[0x0]
80006bbe:	c2 48       	rjmp	80006c06 <_vfprintf_r+0x72a>
80006bc0:	ee ca ff ff 	sub	r10,r7,-1
80006bc4:	10 37       	cp.w	r7,r8
80006bc6:	c0 94       	brge	80006bd8 <_vfprintf_r+0x6fc>
80006bc8:	fa c9 f9 44 	sub	r9,sp,-1724
80006bcc:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006bd0:	14 97       	mov	r7,r10
80006bd2:	ec fb fd 88 	ld.w	r11,r6[-632]
80006bd6:	c1 88       	rjmp	80006c06 <_vfprintf_r+0x72a>
80006bd8:	41 09       	lddsp	r9,sp[0x40]
80006bda:	59 f8       	cp.w	r8,31
80006bdc:	e0 89 00 11 	brgt	80006bfe <_vfprintf_r+0x722>
80006be0:	f2 cb ff fc 	sub	r11,r9,-4
80006be4:	51 0b       	stdsp	sp[0x40],r11
80006be6:	fa c6 f9 44 	sub	r6,sp,-1724
80006bea:	72 0b       	ld.w	r11,r9[0x0]
80006bec:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006bf0:	f3 4b fd 88 	st.w	r9[-632],r11
80006bf4:	2f f8       	sub	r8,-1
80006bf6:	14 97       	mov	r7,r10
80006bf8:	fb 48 06 b4 	st.w	sp[1716],r8
80006bfc:	c0 58       	rjmp	80006c06 <_vfprintf_r+0x72a>
80006bfe:	72 0b       	ld.w	r11,r9[0x0]
80006c00:	14 97       	mov	r7,r10
80006c02:	2f c9       	sub	r9,-4
80006c04:	51 09       	stdsp	sp[0x40],r9
80006c06:	50 1b       	stdsp	sp[0x4],r11
80006c08:	bf 5b       	asr	r11,0x1f
80006c0a:	50 0b       	stdsp	sp[0x0],r11
80006c0c:	fa ea 00 00 	ld.d	r10,sp[0]
80006c10:	58 0a       	cp.w	r10,0
80006c12:	5c 2b       	cpc	r11
80006c14:	c0 e4       	brge	80006c30 <_vfprintf_r+0x754>
80006c16:	30 08       	mov	r8,0
80006c18:	fa ea 00 00 	ld.d	r10,sp[0]
80006c1c:	30 09       	mov	r9,0
80006c1e:	f0 0a 01 0a 	sub	r10,r8,r10
80006c22:	f2 0b 01 4b 	sbc	r11,r9,r11
80006c26:	32 d8       	mov	r8,45
80006c28:	fa eb 00 00 	st.d	sp[0],r10
80006c2c:	fb 68 06 bb 	st.b	sp[1723],r8
80006c30:	30 18       	mov	r8,1
80006c32:	e0 8f 06 fe 	bral	80007a2e <_vfprintf_r+0x1552>
80006c36:	50 a7       	stdsp	sp[0x28],r7
80006c38:	50 80       	stdsp	sp[0x20],r0
80006c3a:	0c 97       	mov	r7,r6
80006c3c:	04 94       	mov	r4,r2
80006c3e:	06 96       	mov	r6,r3
80006c40:	02 92       	mov	r2,r1
80006c42:	40 93       	lddsp	r3,sp[0x24]
80006c44:	10 90       	mov	r0,r8
80006c46:	40 41       	lddsp	r1,sp[0x10]
80006c48:	0e 99       	mov	r9,r7
80006c4a:	ed b5 00 03 	bld	r5,0x3
80006c4e:	c4 11       	brne	80006cd0 <_vfprintf_r+0x7f4>
80006c50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c54:	40 3a       	lddsp	r10,sp[0xc]
80006c56:	58 0a       	cp.w	r10,0
80006c58:	c1 90       	breq	80006c8a <_vfprintf_r+0x7ae>
80006c5a:	10 36       	cp.w	r6,r8
80006c5c:	c6 45       	brlt	80006d24 <_vfprintf_r+0x848>
80006c5e:	fa c8 f9 50 	sub	r8,sp,-1712
80006c62:	1a d8       	st.w	--sp,r8
80006c64:	fa c8 fa b8 	sub	r8,sp,-1352
80006c68:	1a d8       	st.w	--sp,r8
80006c6a:	fa c8 fb b4 	sub	r8,sp,-1100
80006c6e:	0c 9b       	mov	r11,r6
80006c70:	1a d8       	st.w	--sp,r8
80006c72:	04 9a       	mov	r10,r2
80006c74:	fa c8 f9 40 	sub	r8,sp,-1728
80006c78:	fa c9 ff b4 	sub	r9,sp,-76
80006c7c:	08 9c       	mov	r12,r4
80006c7e:	fe b0 fa 91 	rcall	800061a0 <get_arg>
80006c82:	2f dd       	sub	sp,-12
80006c84:	78 16       	ld.w	r6,r12[0x4]
80006c86:	50 76       	stdsp	sp[0x1c],r6
80006c88:	c4 88       	rjmp	80006d18 <_vfprintf_r+0x83c>
80006c8a:	2f f7       	sub	r7,-1
80006c8c:	10 39       	cp.w	r9,r8
80006c8e:	c0 c4       	brge	80006ca6 <_vfprintf_r+0x7ca>
80006c90:	fa ce f9 44 	sub	lr,sp,-1724
80006c94:	fc 06 00 36 	add	r6,lr,r6<<0x3
80006c98:	ec fc fd 8c 	ld.w	r12,r6[-628]
80006c9c:	50 7c       	stdsp	sp[0x1c],r12
80006c9e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006ca2:	50 56       	stdsp	sp[0x14],r6
80006ca4:	c6 68       	rjmp	80006d70 <_vfprintf_r+0x894>
80006ca6:	41 09       	lddsp	r9,sp[0x40]
80006ca8:	59 f8       	cp.w	r8,31
80006caa:	e0 89 00 10 	brgt	80006cca <_vfprintf_r+0x7ee>
80006cae:	f2 ca ff f8 	sub	r10,r9,-8
80006cb2:	72 1b       	ld.w	r11,r9[0x4]
80006cb4:	51 0a       	stdsp	sp[0x40],r10
80006cb6:	72 09       	ld.w	r9,r9[0x0]
80006cb8:	fa ca f9 44 	sub	r10,sp,-1724
80006cbc:	50 7b       	stdsp	sp[0x1c],r11
80006cbe:	50 59       	stdsp	sp[0x14],r9
80006cc0:	f4 08 00 39 	add	r9,r10,r8<<0x3
80006cc4:	40 5b       	lddsp	r11,sp[0x14]
80006cc6:	40 7a       	lddsp	r10,sp[0x1c]
80006cc8:	c4 78       	rjmp	80006d56 <_vfprintf_r+0x87a>
80006cca:	72 18       	ld.w	r8,r9[0x4]
80006ccc:	50 78       	stdsp	sp[0x1c],r8
80006cce:	c4 c8       	rjmp	80006d66 <_vfprintf_r+0x88a>
80006cd0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006cd4:	40 3e       	lddsp	lr,sp[0xc]
80006cd6:	58 0e       	cp.w	lr,0
80006cd8:	c2 30       	breq	80006d1e <_vfprintf_r+0x842>
80006cda:	10 36       	cp.w	r6,r8
80006cdc:	c0 94       	brge	80006cee <_vfprintf_r+0x812>
80006cde:	fa cc f9 44 	sub	r12,sp,-1724
80006ce2:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006ce6:	ec fb fd 8c 	ld.w	r11,r6[-628]
80006cea:	50 7b       	stdsp	sp[0x1c],r11
80006cec:	cd 9b       	rjmp	80006c9e <_vfprintf_r+0x7c2>
80006cee:	fa c8 f9 50 	sub	r8,sp,-1712
80006cf2:	1a d8       	st.w	--sp,r8
80006cf4:	fa c8 fa b8 	sub	r8,sp,-1352
80006cf8:	04 9a       	mov	r10,r2
80006cfa:	1a d8       	st.w	--sp,r8
80006cfc:	fa c8 fb b4 	sub	r8,sp,-1100
80006d00:	0c 9b       	mov	r11,r6
80006d02:	1a d8       	st.w	--sp,r8
80006d04:	08 9c       	mov	r12,r4
80006d06:	fa c8 f9 40 	sub	r8,sp,-1728
80006d0a:	fa c9 ff b4 	sub	r9,sp,-76
80006d0e:	fe b0 fa 49 	rcall	800061a0 <get_arg>
80006d12:	2f dd       	sub	sp,-12
80006d14:	78 1a       	ld.w	r10,r12[0x4]
80006d16:	50 7a       	stdsp	sp[0x1c],r10
80006d18:	78 0c       	ld.w	r12,r12[0x0]
80006d1a:	50 5c       	stdsp	sp[0x14],r12
80006d1c:	c2 a8       	rjmp	80006d70 <_vfprintf_r+0x894>
80006d1e:	2f f7       	sub	r7,-1
80006d20:	10 39       	cp.w	r9,r8
80006d22:	c0 94       	brge	80006d34 <_vfprintf_r+0x858>
80006d24:	fa c9 f9 44 	sub	r9,sp,-1724
80006d28:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006d2c:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80006d30:	50 78       	stdsp	sp[0x1c],r8
80006d32:	cb 6b       	rjmp	80006c9e <_vfprintf_r+0x7c2>
80006d34:	41 09       	lddsp	r9,sp[0x40]
80006d36:	59 f8       	cp.w	r8,31
80006d38:	e0 89 00 15 	brgt	80006d62 <_vfprintf_r+0x886>
80006d3c:	f2 ca ff f8 	sub	r10,r9,-8
80006d40:	72 16       	ld.w	r6,r9[0x4]
80006d42:	72 09       	ld.w	r9,r9[0x0]
80006d44:	51 0a       	stdsp	sp[0x40],r10
80006d46:	50 59       	stdsp	sp[0x14],r9
80006d48:	fa ce f9 44 	sub	lr,sp,-1724
80006d4c:	50 76       	stdsp	sp[0x1c],r6
80006d4e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006d52:	40 5b       	lddsp	r11,sp[0x14]
80006d54:	0c 9a       	mov	r10,r6
80006d56:	f2 eb fd 88 	st.d	r9[-632],r10
80006d5a:	2f f8       	sub	r8,-1
80006d5c:	fb 48 06 b4 	st.w	sp[1716],r8
80006d60:	c0 88       	rjmp	80006d70 <_vfprintf_r+0x894>
80006d62:	72 1c       	ld.w	r12,r9[0x4]
80006d64:	50 7c       	stdsp	sp[0x1c],r12
80006d66:	f2 c8 ff f8 	sub	r8,r9,-8
80006d6a:	51 08       	stdsp	sp[0x40],r8
80006d6c:	72 09       	ld.w	r9,r9[0x0]
80006d6e:	50 59       	stdsp	sp[0x14],r9
80006d70:	40 5b       	lddsp	r11,sp[0x14]
80006d72:	40 7a       	lddsp	r10,sp[0x1c]
80006d74:	e0 a0 1d 94 	rcall	8000a89c <__isinfd>
80006d78:	18 96       	mov	r6,r12
80006d7a:	c1 50       	breq	80006da4 <_vfprintf_r+0x8c8>
80006d7c:	30 08       	mov	r8,0
80006d7e:	30 09       	mov	r9,0
80006d80:	40 5b       	lddsp	r11,sp[0x14]
80006d82:	40 7a       	lddsp	r10,sp[0x1c]
80006d84:	e0 a0 22 98 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80006d88:	c0 40       	breq	80006d90 <_vfprintf_r+0x8b4>
80006d8a:	32 d8       	mov	r8,45
80006d8c:	fb 68 06 bb 	st.b	sp[1723],r8
80006d90:	4d 18       	lddpc	r8,80006ed4 <_vfprintf_r+0x9f8>
80006d92:	4d 26       	lddpc	r6,80006ed8 <_vfprintf_r+0x9fc>
80006d94:	a7 d5       	cbr	r5,0x7
80006d96:	e0 40 00 47 	cp.w	r0,71
80006d9a:	f0 06 17 a0 	movle	r6,r8
80006d9e:	30 32       	mov	r2,3
80006da0:	e0 8f 06 d4 	bral	80007b48 <_vfprintf_r+0x166c>
80006da4:	40 5b       	lddsp	r11,sp[0x14]
80006da6:	40 7a       	lddsp	r10,sp[0x1c]
80006da8:	e0 a0 1d 8f 	rcall	8000a8c6 <__isnand>
80006dac:	c0 c0       	breq	80006dc4 <_vfprintf_r+0x8e8>
80006dae:	50 26       	stdsp	sp[0x8],r6
80006db0:	4c b8       	lddpc	r8,80006edc <_vfprintf_r+0xa00>
80006db2:	4c c6       	lddpc	r6,80006ee0 <_vfprintf_r+0xa04>
80006db4:	a7 d5       	cbr	r5,0x7
80006db6:	e0 40 00 47 	cp.w	r0,71
80006dba:	f0 06 17 a0 	movle	r6,r8
80006dbe:	30 32       	mov	r2,3
80006dc0:	e0 8f 06 ca 	bral	80007b54 <_vfprintf_r+0x1678>
80006dc4:	40 2a       	lddsp	r10,sp[0x8]
80006dc6:	5b fa       	cp.w	r10,-1
80006dc8:	c0 41       	brne	80006dd0 <_vfprintf_r+0x8f4>
80006dca:	30 69       	mov	r9,6
80006dcc:	50 29       	stdsp	sp[0x8],r9
80006dce:	c1 18       	rjmp	80006df0 <_vfprintf_r+0x914>
80006dd0:	e0 40 00 47 	cp.w	r0,71
80006dd4:	5f 09       	sreq	r9
80006dd6:	e0 40 00 67 	cp.w	r0,103
80006dda:	5f 08       	sreq	r8
80006ddc:	f3 e8 10 08 	or	r8,r9,r8
80006de0:	f8 08 18 00 	cp.b	r8,r12
80006de4:	c0 60       	breq	80006df0 <_vfprintf_r+0x914>
80006de6:	40 28       	lddsp	r8,sp[0x8]
80006de8:	58 08       	cp.w	r8,0
80006dea:	f9 b8 00 01 	moveq	r8,1
80006dee:	50 28       	stdsp	sp[0x8],r8
80006df0:	40 78       	lddsp	r8,sp[0x1c]
80006df2:	40 59       	lddsp	r9,sp[0x14]
80006df4:	fa e9 06 94 	st.d	sp[1684],r8
80006df8:	a9 a5       	sbr	r5,0x8
80006dfa:	fa f8 06 94 	ld.w	r8,sp[1684]
80006dfe:	58 08       	cp.w	r8,0
80006e00:	c0 65       	brlt	80006e0c <_vfprintf_r+0x930>
80006e02:	40 5e       	lddsp	lr,sp[0x14]
80006e04:	30 0c       	mov	r12,0
80006e06:	50 6e       	stdsp	sp[0x18],lr
80006e08:	50 9c       	stdsp	sp[0x24],r12
80006e0a:	c0 78       	rjmp	80006e18 <_vfprintf_r+0x93c>
80006e0c:	40 5b       	lddsp	r11,sp[0x14]
80006e0e:	32 da       	mov	r10,45
80006e10:	ee 1b 80 00 	eorh	r11,0x8000
80006e14:	50 9a       	stdsp	sp[0x24],r10
80006e16:	50 6b       	stdsp	sp[0x18],r11
80006e18:	e0 40 00 46 	cp.w	r0,70
80006e1c:	5f 09       	sreq	r9
80006e1e:	e0 40 00 66 	cp.w	r0,102
80006e22:	5f 08       	sreq	r8
80006e24:	f3 e8 10 08 	or	r8,r9,r8
80006e28:	50 48       	stdsp	sp[0x10],r8
80006e2a:	c0 40       	breq	80006e32 <_vfprintf_r+0x956>
80006e2c:	40 22       	lddsp	r2,sp[0x8]
80006e2e:	30 39       	mov	r9,3
80006e30:	c1 08       	rjmp	80006e50 <_vfprintf_r+0x974>
80006e32:	e0 40 00 45 	cp.w	r0,69
80006e36:	5f 09       	sreq	r9
80006e38:	e0 40 00 65 	cp.w	r0,101
80006e3c:	5f 08       	sreq	r8
80006e3e:	40 22       	lddsp	r2,sp[0x8]
80006e40:	10 49       	or	r9,r8
80006e42:	2f f2       	sub	r2,-1
80006e44:	40 46       	lddsp	r6,sp[0x10]
80006e46:	ec 09 18 00 	cp.b	r9,r6
80006e4a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80006e4e:	30 29       	mov	r9,2
80006e50:	fa c8 f9 5c 	sub	r8,sp,-1700
80006e54:	1a d8       	st.w	--sp,r8
80006e56:	fa c8 f9 54 	sub	r8,sp,-1708
80006e5a:	1a d8       	st.w	--sp,r8
80006e5c:	fa c8 f9 4c 	sub	r8,sp,-1716
80006e60:	08 9c       	mov	r12,r4
80006e62:	1a d8       	st.w	--sp,r8
80006e64:	04 98       	mov	r8,r2
80006e66:	40 9b       	lddsp	r11,sp[0x24]
80006e68:	40 aa       	lddsp	r10,sp[0x28]
80006e6a:	e0 a0 0b cd 	rcall	80008604 <_dtoa_r>
80006e6e:	e0 40 00 47 	cp.w	r0,71
80006e72:	5f 19       	srne	r9
80006e74:	e0 40 00 67 	cp.w	r0,103
80006e78:	5f 18       	srne	r8
80006e7a:	18 96       	mov	r6,r12
80006e7c:	2f dd       	sub	sp,-12
80006e7e:	f3 e8 00 08 	and	r8,r9,r8
80006e82:	c0 41       	brne	80006e8a <_vfprintf_r+0x9ae>
80006e84:	ed b5 00 00 	bld	r5,0x0
80006e88:	c3 81       	brne	80006ef8 <_vfprintf_r+0xa1c>
80006e8a:	ec 02 00 0e 	add	lr,r6,r2
80006e8e:	50 3e       	stdsp	sp[0xc],lr
80006e90:	40 4c       	lddsp	r12,sp[0x10]
80006e92:	58 0c       	cp.w	r12,0
80006e94:	c1 50       	breq	80006ebe <_vfprintf_r+0x9e2>
80006e96:	0d 89       	ld.ub	r9,r6[0x0]
80006e98:	33 08       	mov	r8,48
80006e9a:	f0 09 18 00 	cp.b	r9,r8
80006e9e:	c0 b1       	brne	80006eb4 <_vfprintf_r+0x9d8>
80006ea0:	30 08       	mov	r8,0
80006ea2:	30 09       	mov	r9,0
80006ea4:	40 6b       	lddsp	r11,sp[0x18]
80006ea6:	40 7a       	lddsp	r10,sp[0x1c]
80006ea8:	e0 a0 21 bf 	rcall	8000b226 <__avr32_f64_cmp_eq>
80006eac:	fb b2 00 01 	rsubeq	r2,1
80006eb0:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80006eb4:	40 3b       	lddsp	r11,sp[0xc]
80006eb6:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006eba:	10 0b       	add	r11,r8
80006ebc:	50 3b       	stdsp	sp[0xc],r11
80006ebe:	40 6b       	lddsp	r11,sp[0x18]
80006ec0:	30 08       	mov	r8,0
80006ec2:	30 09       	mov	r9,0
80006ec4:	40 7a       	lddsp	r10,sp[0x1c]
80006ec6:	e0 a0 21 b0 	rcall	8000b226 <__avr32_f64_cmp_eq>
80006eca:	c1 10       	breq	80006eec <_vfprintf_r+0xa10>
80006ecc:	40 3a       	lddsp	r10,sp[0xc]
80006ece:	fb 4a 06 a4 	st.w	sp[1700],r10
80006ed2:	c0 d8       	rjmp	80006eec <_vfprintf_r+0xa10>
80006ed4:	80 00       	ld.sh	r0,r0[0x0]
80006ed6:	ca 30       	breq	80006e1c <_vfprintf_r+0x940>
80006ed8:	80 00       	ld.sh	r0,r0[0x0]
80006eda:	ca 34       	brge	80006e20 <_vfprintf_r+0x944>
80006edc:	80 00       	ld.sh	r0,r0[0x0]
80006ede:	ca 38       	rjmp	80007024 <_vfprintf_r+0xb48>
80006ee0:	80 00       	ld.sh	r0,r0[0x0]
80006ee2:	ca 3c       	rcall	80007028 <_vfprintf_r+0xb4c>
80006ee4:	10 c9       	st.b	r8++,r9
80006ee6:	fb 48 06 a4 	st.w	sp[1700],r8
80006eea:	c0 28       	rjmp	80006eee <_vfprintf_r+0xa12>
80006eec:	33 09       	mov	r9,48
80006eee:	fa f8 06 a4 	ld.w	r8,sp[1700]
80006ef2:	40 3e       	lddsp	lr,sp[0xc]
80006ef4:	1c 38       	cp.w	r8,lr
80006ef6:	cf 73       	brcs	80006ee4 <_vfprintf_r+0xa08>
80006ef8:	e0 40 00 47 	cp.w	r0,71
80006efc:	5f 09       	sreq	r9
80006efe:	e0 40 00 67 	cp.w	r0,103
80006f02:	5f 08       	sreq	r8
80006f04:	f3 e8 10 08 	or	r8,r9,r8
80006f08:	fa f9 06 a4 	ld.w	r9,sp[1700]
80006f0c:	0c 19       	sub	r9,r6
80006f0e:	50 69       	stdsp	sp[0x18],r9
80006f10:	58 08       	cp.w	r8,0
80006f12:	c0 b0       	breq	80006f28 <_vfprintf_r+0xa4c>
80006f14:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006f18:	5b d8       	cp.w	r8,-3
80006f1a:	c0 55       	brlt	80006f24 <_vfprintf_r+0xa48>
80006f1c:	40 2c       	lddsp	r12,sp[0x8]
80006f1e:	18 38       	cp.w	r8,r12
80006f20:	e0 8a 00 6a 	brle	80006ff4 <_vfprintf_r+0xb18>
80006f24:	20 20       	sub	r0,2
80006f26:	c0 58       	rjmp	80006f30 <_vfprintf_r+0xa54>
80006f28:	e0 40 00 65 	cp.w	r0,101
80006f2c:	e0 89 00 46 	brgt	80006fb8 <_vfprintf_r+0xadc>
80006f30:	fa fb 06 ac 	ld.w	r11,sp[1708]
80006f34:	fb 60 06 9c 	st.b	sp[1692],r0
80006f38:	20 1b       	sub	r11,1
80006f3a:	fb 4b 06 ac 	st.w	sp[1708],r11
80006f3e:	c0 47       	brpl	80006f46 <_vfprintf_r+0xa6a>
80006f40:	5c 3b       	neg	r11
80006f42:	32 d8       	mov	r8,45
80006f44:	c0 28       	rjmp	80006f48 <_vfprintf_r+0xa6c>
80006f46:	32 b8       	mov	r8,43
80006f48:	fb 68 06 9d 	st.b	sp[1693],r8
80006f4c:	58 9b       	cp.w	r11,9
80006f4e:	e0 8a 00 1d 	brle	80006f88 <_vfprintf_r+0xaac>
80006f52:	fa c9 fa 35 	sub	r9,sp,-1483
80006f56:	30 aa       	mov	r10,10
80006f58:	12 98       	mov	r8,r9
80006f5a:	0e 9c       	mov	r12,r7
80006f5c:	0c 92       	mov	r2,r6
80006f5e:	f6 0a 0c 06 	divs	r6,r11,r10
80006f62:	0e 9b       	mov	r11,r7
80006f64:	2d 0b       	sub	r11,-48
80006f66:	10 fb       	st.b	--r8,r11
80006f68:	0c 9b       	mov	r11,r6
80006f6a:	58 96       	cp.w	r6,9
80006f6c:	fe 99 ff f9 	brgt	80006f5e <_vfprintf_r+0xa82>
80006f70:	2d 0b       	sub	r11,-48
80006f72:	18 97       	mov	r7,r12
80006f74:	04 96       	mov	r6,r2
80006f76:	10 fb       	st.b	--r8,r11
80006f78:	fa ca f9 62 	sub	r10,sp,-1694
80006f7c:	c0 38       	rjmp	80006f82 <_vfprintf_r+0xaa6>
80006f7e:	11 3b       	ld.ub	r11,r8++
80006f80:	14 cb       	st.b	r10++,r11
80006f82:	12 38       	cp.w	r8,r9
80006f84:	cf d3       	brcs	80006f7e <_vfprintf_r+0xaa2>
80006f86:	c0 98       	rjmp	80006f98 <_vfprintf_r+0xabc>
80006f88:	2d 0b       	sub	r11,-48
80006f8a:	33 08       	mov	r8,48
80006f8c:	fb 6b 06 9f 	st.b	sp[1695],r11
80006f90:	fb 68 06 9e 	st.b	sp[1694],r8
80006f94:	fa ca f9 60 	sub	r10,sp,-1696
80006f98:	fa c8 f9 64 	sub	r8,sp,-1692
80006f9c:	f4 08 01 08 	sub	r8,r10,r8
80006fa0:	50 e8       	stdsp	sp[0x38],r8
80006fa2:	10 92       	mov	r2,r8
80006fa4:	40 6b       	lddsp	r11,sp[0x18]
80006fa6:	16 02       	add	r2,r11
80006fa8:	58 1b       	cp.w	r11,1
80006faa:	e0 89 00 05 	brgt	80006fb4 <_vfprintf_r+0xad8>
80006fae:	ed b5 00 00 	bld	r5,0x0
80006fb2:	c3 51       	brne	8000701c <_vfprintf_r+0xb40>
80006fb4:	2f f2       	sub	r2,-1
80006fb6:	c3 38       	rjmp	8000701c <_vfprintf_r+0xb40>
80006fb8:	e0 40 00 66 	cp.w	r0,102
80006fbc:	c1 c1       	brne	80006ff4 <_vfprintf_r+0xb18>
80006fbe:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006fc2:	58 02       	cp.w	r2,0
80006fc4:	e0 8a 00 0c 	brle	80006fdc <_vfprintf_r+0xb00>
80006fc8:	40 2a       	lddsp	r10,sp[0x8]
80006fca:	58 0a       	cp.w	r10,0
80006fcc:	c0 41       	brne	80006fd4 <_vfprintf_r+0xaf8>
80006fce:	ed b5 00 00 	bld	r5,0x0
80006fd2:	c2 51       	brne	8000701c <_vfprintf_r+0xb40>
80006fd4:	2f f2       	sub	r2,-1
80006fd6:	40 29       	lddsp	r9,sp[0x8]
80006fd8:	12 02       	add	r2,r9
80006fda:	c0 b8       	rjmp	80006ff0 <_vfprintf_r+0xb14>
80006fdc:	40 28       	lddsp	r8,sp[0x8]
80006fde:	58 08       	cp.w	r8,0
80006fe0:	c0 61       	brne	80006fec <_vfprintf_r+0xb10>
80006fe2:	ed b5 00 00 	bld	r5,0x0
80006fe6:	c0 30       	breq	80006fec <_vfprintf_r+0xb10>
80006fe8:	30 12       	mov	r2,1
80006fea:	c1 98       	rjmp	8000701c <_vfprintf_r+0xb40>
80006fec:	40 22       	lddsp	r2,sp[0x8]
80006fee:	2f e2       	sub	r2,-2
80006ff0:	36 60       	mov	r0,102
80006ff2:	c1 58       	rjmp	8000701c <_vfprintf_r+0xb40>
80006ff4:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006ff8:	40 6e       	lddsp	lr,sp[0x18]
80006ffa:	1c 32       	cp.w	r2,lr
80006ffc:	c0 65       	brlt	80007008 <_vfprintf_r+0xb2c>
80006ffe:	ed b5 00 00 	bld	r5,0x0
80007002:	f7 b2 00 ff 	subeq	r2,-1
80007006:	c0 a8       	rjmp	8000701a <_vfprintf_r+0xb3e>
80007008:	e4 08 11 02 	rsub	r8,r2,2
8000700c:	40 6c       	lddsp	r12,sp[0x18]
8000700e:	58 02       	cp.w	r2,0
80007010:	f0 02 17 a0 	movle	r2,r8
80007014:	f9 b2 09 01 	movgt	r2,1
80007018:	18 02       	add	r2,r12
8000701a:	36 70       	mov	r0,103
8000701c:	40 9b       	lddsp	r11,sp[0x24]
8000701e:	58 0b       	cp.w	r11,0
80007020:	e0 80 05 94 	breq	80007b48 <_vfprintf_r+0x166c>
80007024:	32 d8       	mov	r8,45
80007026:	fb 68 06 bb 	st.b	sp[1723],r8
8000702a:	e0 8f 05 93 	bral	80007b50 <_vfprintf_r+0x1674>
8000702e:	50 a7       	stdsp	sp[0x28],r7
80007030:	04 94       	mov	r4,r2
80007032:	0c 97       	mov	r7,r6
80007034:	02 92       	mov	r2,r1
80007036:	06 96       	mov	r6,r3
80007038:	40 41       	lddsp	r1,sp[0x10]
8000703a:	40 93       	lddsp	r3,sp[0x24]
8000703c:	0e 99       	mov	r9,r7
8000703e:	ed b5 00 05 	bld	r5,0x5
80007042:	c4 81       	brne	800070d2 <_vfprintf_r+0xbf6>
80007044:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007048:	40 3e       	lddsp	lr,sp[0xc]
8000704a:	58 0e       	cp.w	lr,0
8000704c:	c1 d0       	breq	80007086 <_vfprintf_r+0xbaa>
8000704e:	10 36       	cp.w	r6,r8
80007050:	c0 64       	brge	8000705c <_vfprintf_r+0xb80>
80007052:	fa cc f9 44 	sub	r12,sp,-1724
80007056:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000705a:	c1 d8       	rjmp	80007094 <_vfprintf_r+0xbb8>
8000705c:	fa c8 f9 50 	sub	r8,sp,-1712
80007060:	1a d8       	st.w	--sp,r8
80007062:	fa c8 fa b8 	sub	r8,sp,-1352
80007066:	04 9a       	mov	r10,r2
80007068:	1a d8       	st.w	--sp,r8
8000706a:	fa c8 fb b4 	sub	r8,sp,-1100
8000706e:	0c 9b       	mov	r11,r6
80007070:	1a d8       	st.w	--sp,r8
80007072:	08 9c       	mov	r12,r4
80007074:	fa c8 f9 40 	sub	r8,sp,-1728
80007078:	fa c9 ff b4 	sub	r9,sp,-76
8000707c:	fe b0 f8 92 	rcall	800061a0 <get_arg>
80007080:	2f dd       	sub	sp,-12
80007082:	78 0a       	ld.w	r10,r12[0x0]
80007084:	c2 08       	rjmp	800070c4 <_vfprintf_r+0xbe8>
80007086:	2f f7       	sub	r7,-1
80007088:	10 39       	cp.w	r9,r8
8000708a:	c0 84       	brge	8000709a <_vfprintf_r+0xbbe>
8000708c:	fa cb f9 44 	sub	r11,sp,-1724
80007090:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007094:	ec fa fd 88 	ld.w	r10,r6[-632]
80007098:	c1 68       	rjmp	800070c4 <_vfprintf_r+0xbe8>
8000709a:	41 09       	lddsp	r9,sp[0x40]
8000709c:	59 f8       	cp.w	r8,31
8000709e:	e0 89 00 10 	brgt	800070be <_vfprintf_r+0xbe2>
800070a2:	f2 ca ff fc 	sub	r10,r9,-4
800070a6:	51 0a       	stdsp	sp[0x40],r10
800070a8:	fa c6 f9 44 	sub	r6,sp,-1724
800070ac:	72 0a       	ld.w	r10,r9[0x0]
800070ae:	ec 08 00 39 	add	r9,r6,r8<<0x3
800070b2:	f3 4a fd 88 	st.w	r9[-632],r10
800070b6:	2f f8       	sub	r8,-1
800070b8:	fb 48 06 b4 	st.w	sp[1716],r8
800070bc:	c0 48       	rjmp	800070c4 <_vfprintf_r+0xbe8>
800070be:	72 0a       	ld.w	r10,r9[0x0]
800070c0:	2f c9       	sub	r9,-4
800070c2:	51 09       	stdsp	sp[0x40],r9
800070c4:	40 be       	lddsp	lr,sp[0x2c]
800070c6:	1c 98       	mov	r8,lr
800070c8:	95 1e       	st.w	r10[0x4],lr
800070ca:	bf 58       	asr	r8,0x1f
800070cc:	95 08       	st.w	r10[0x0],r8
800070ce:	fe 9f fa 92 	bral	800065f2 <_vfprintf_r+0x116>
800070d2:	ed b5 00 04 	bld	r5,0x4
800070d6:	c4 80       	breq	80007166 <_vfprintf_r+0xc8a>
800070d8:	e2 15 00 40 	andl	r5,0x40,COH
800070dc:	c4 50       	breq	80007166 <_vfprintf_r+0xc8a>
800070de:	fa f8 06 b4 	ld.w	r8,sp[1716]
800070e2:	40 3c       	lddsp	r12,sp[0xc]
800070e4:	58 0c       	cp.w	r12,0
800070e6:	c1 d0       	breq	80007120 <_vfprintf_r+0xc44>
800070e8:	10 36       	cp.w	r6,r8
800070ea:	c0 64       	brge	800070f6 <_vfprintf_r+0xc1a>
800070ec:	fa cb f9 44 	sub	r11,sp,-1724
800070f0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800070f4:	c1 d8       	rjmp	8000712e <_vfprintf_r+0xc52>
800070f6:	fa c8 f9 50 	sub	r8,sp,-1712
800070fa:	1a d8       	st.w	--sp,r8
800070fc:	fa c8 fa b8 	sub	r8,sp,-1352
80007100:	04 9a       	mov	r10,r2
80007102:	1a d8       	st.w	--sp,r8
80007104:	fa c8 fb b4 	sub	r8,sp,-1100
80007108:	0c 9b       	mov	r11,r6
8000710a:	1a d8       	st.w	--sp,r8
8000710c:	08 9c       	mov	r12,r4
8000710e:	fa c8 f9 40 	sub	r8,sp,-1728
80007112:	fa c9 ff b4 	sub	r9,sp,-76
80007116:	fe b0 f8 45 	rcall	800061a0 <get_arg>
8000711a:	2f dd       	sub	sp,-12
8000711c:	78 0a       	ld.w	r10,r12[0x0]
8000711e:	c2 08       	rjmp	8000715e <_vfprintf_r+0xc82>
80007120:	2f f7       	sub	r7,-1
80007122:	10 39       	cp.w	r9,r8
80007124:	c0 84       	brge	80007134 <_vfprintf_r+0xc58>
80007126:	fa ca f9 44 	sub	r10,sp,-1724
8000712a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000712e:	ec fa fd 88 	ld.w	r10,r6[-632]
80007132:	c1 68       	rjmp	8000715e <_vfprintf_r+0xc82>
80007134:	41 09       	lddsp	r9,sp[0x40]
80007136:	59 f8       	cp.w	r8,31
80007138:	e0 89 00 10 	brgt	80007158 <_vfprintf_r+0xc7c>
8000713c:	f2 ca ff fc 	sub	r10,r9,-4
80007140:	51 0a       	stdsp	sp[0x40],r10
80007142:	fa c6 f9 44 	sub	r6,sp,-1724
80007146:	72 0a       	ld.w	r10,r9[0x0]
80007148:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000714c:	f3 4a fd 88 	st.w	r9[-632],r10
80007150:	2f f8       	sub	r8,-1
80007152:	fb 48 06 b4 	st.w	sp[1716],r8
80007156:	c0 48       	rjmp	8000715e <_vfprintf_r+0xc82>
80007158:	72 0a       	ld.w	r10,r9[0x0]
8000715a:	2f c9       	sub	r9,-4
8000715c:	51 09       	stdsp	sp[0x40],r9
8000715e:	40 be       	lddsp	lr,sp[0x2c]
80007160:	b4 0e       	st.h	r10[0x0],lr
80007162:	fe 9f fa 48 	bral	800065f2 <_vfprintf_r+0x116>
80007166:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000716a:	40 3c       	lddsp	r12,sp[0xc]
8000716c:	58 0c       	cp.w	r12,0
8000716e:	c1 d0       	breq	800071a8 <_vfprintf_r+0xccc>
80007170:	10 36       	cp.w	r6,r8
80007172:	c0 64       	brge	8000717e <_vfprintf_r+0xca2>
80007174:	fa cb f9 44 	sub	r11,sp,-1724
80007178:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000717c:	c1 d8       	rjmp	800071b6 <_vfprintf_r+0xcda>
8000717e:	fa c8 f9 50 	sub	r8,sp,-1712
80007182:	1a d8       	st.w	--sp,r8
80007184:	fa c8 fa b8 	sub	r8,sp,-1352
80007188:	04 9a       	mov	r10,r2
8000718a:	1a d8       	st.w	--sp,r8
8000718c:	fa c8 fb b4 	sub	r8,sp,-1100
80007190:	0c 9b       	mov	r11,r6
80007192:	1a d8       	st.w	--sp,r8
80007194:	08 9c       	mov	r12,r4
80007196:	fa c8 f9 40 	sub	r8,sp,-1728
8000719a:	fa c9 ff b4 	sub	r9,sp,-76
8000719e:	fe b0 f8 01 	rcall	800061a0 <get_arg>
800071a2:	2f dd       	sub	sp,-12
800071a4:	78 0a       	ld.w	r10,r12[0x0]
800071a6:	c2 08       	rjmp	800071e6 <_vfprintf_r+0xd0a>
800071a8:	2f f7       	sub	r7,-1
800071aa:	10 39       	cp.w	r9,r8
800071ac:	c0 84       	brge	800071bc <_vfprintf_r+0xce0>
800071ae:	fa ca f9 44 	sub	r10,sp,-1724
800071b2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800071b6:	ec fa fd 88 	ld.w	r10,r6[-632]
800071ba:	c1 68       	rjmp	800071e6 <_vfprintf_r+0xd0a>
800071bc:	41 09       	lddsp	r9,sp[0x40]
800071be:	59 f8       	cp.w	r8,31
800071c0:	e0 89 00 10 	brgt	800071e0 <_vfprintf_r+0xd04>
800071c4:	f2 ca ff fc 	sub	r10,r9,-4
800071c8:	51 0a       	stdsp	sp[0x40],r10
800071ca:	fa c6 f9 44 	sub	r6,sp,-1724
800071ce:	72 0a       	ld.w	r10,r9[0x0]
800071d0:	ec 08 00 39 	add	r9,r6,r8<<0x3
800071d4:	f3 4a fd 88 	st.w	r9[-632],r10
800071d8:	2f f8       	sub	r8,-1
800071da:	fb 48 06 b4 	st.w	sp[1716],r8
800071de:	c0 48       	rjmp	800071e6 <_vfprintf_r+0xd0a>
800071e0:	72 0a       	ld.w	r10,r9[0x0]
800071e2:	2f c9       	sub	r9,-4
800071e4:	51 09       	stdsp	sp[0x40],r9
800071e6:	40 be       	lddsp	lr,sp[0x2c]
800071e8:	95 0e       	st.w	r10[0x0],lr
800071ea:	fe 9f fa 04 	bral	800065f2 <_vfprintf_r+0x116>
800071ee:	50 a7       	stdsp	sp[0x28],r7
800071f0:	50 80       	stdsp	sp[0x20],r0
800071f2:	0c 97       	mov	r7,r6
800071f4:	04 94       	mov	r4,r2
800071f6:	06 96       	mov	r6,r3
800071f8:	02 92       	mov	r2,r1
800071fa:	40 93       	lddsp	r3,sp[0x24]
800071fc:	10 90       	mov	r0,r8
800071fe:	40 41       	lddsp	r1,sp[0x10]
80007200:	a5 a5       	sbr	r5,0x4
80007202:	c0 a8       	rjmp	80007216 <_vfprintf_r+0xd3a>
80007204:	50 a7       	stdsp	sp[0x28],r7
80007206:	50 80       	stdsp	sp[0x20],r0
80007208:	0c 97       	mov	r7,r6
8000720a:	04 94       	mov	r4,r2
8000720c:	06 96       	mov	r6,r3
8000720e:	02 92       	mov	r2,r1
80007210:	40 93       	lddsp	r3,sp[0x24]
80007212:	10 90       	mov	r0,r8
80007214:	40 41       	lddsp	r1,sp[0x10]
80007216:	ed b5 00 05 	bld	r5,0x5
8000721a:	c5 d1       	brne	800072d4 <_vfprintf_r+0xdf8>
8000721c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007220:	40 3c       	lddsp	r12,sp[0xc]
80007222:	58 0c       	cp.w	r12,0
80007224:	c2 60       	breq	80007270 <_vfprintf_r+0xd94>
80007226:	10 36       	cp.w	r6,r8
80007228:	c0 a4       	brge	8000723c <_vfprintf_r+0xd60>
8000722a:	fa cb f9 44 	sub	r11,sp,-1724
8000722e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007232:	ec e8 fd 88 	ld.d	r8,r6[-632]
80007236:	fa e9 00 00 	st.d	sp[0],r8
8000723a:	c1 88       	rjmp	8000726a <_vfprintf_r+0xd8e>
8000723c:	fa c8 f9 50 	sub	r8,sp,-1712
80007240:	1a d8       	st.w	--sp,r8
80007242:	fa c8 fa b8 	sub	r8,sp,-1352
80007246:	04 9a       	mov	r10,r2
80007248:	1a d8       	st.w	--sp,r8
8000724a:	0c 9b       	mov	r11,r6
8000724c:	fa c8 fb b4 	sub	r8,sp,-1100
80007250:	08 9c       	mov	r12,r4
80007252:	1a d8       	st.w	--sp,r8
80007254:	fa c8 f9 40 	sub	r8,sp,-1728
80007258:	fa c9 ff b4 	sub	r9,sp,-76
8000725c:	fe b0 f7 a2 	rcall	800061a0 <get_arg>
80007260:	2f dd       	sub	sp,-12
80007262:	f8 ea 00 00 	ld.d	r10,r12[0]
80007266:	fa eb 00 00 	st.d	sp[0],r10
8000726a:	30 08       	mov	r8,0
8000726c:	e0 8f 03 de 	bral	80007a28 <_vfprintf_r+0x154c>
80007270:	ee ca ff ff 	sub	r10,r7,-1
80007274:	10 37       	cp.w	r7,r8
80007276:	c0 b4       	brge	8000728c <_vfprintf_r+0xdb0>
80007278:	fa c9 f9 44 	sub	r9,sp,-1724
8000727c:	14 97       	mov	r7,r10
8000727e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007282:	ec ea fd 88 	ld.d	r10,r6[-632]
80007286:	fa eb 00 00 	st.d	sp[0],r10
8000728a:	c1 88       	rjmp	800072ba <_vfprintf_r+0xdde>
8000728c:	41 09       	lddsp	r9,sp[0x40]
8000728e:	59 f8       	cp.w	r8,31
80007290:	e0 89 00 18 	brgt	800072c0 <_vfprintf_r+0xde4>
80007294:	f2 e6 00 00 	ld.d	r6,r9[0]
80007298:	f2 cb ff f8 	sub	r11,r9,-8
8000729c:	fa e7 00 00 	st.d	sp[0],r6
800072a0:	51 0b       	stdsp	sp[0x40],r11
800072a2:	fa c6 f9 44 	sub	r6,sp,-1724
800072a6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800072aa:	fa e6 00 00 	ld.d	r6,sp[0]
800072ae:	f2 e7 fd 88 	st.d	r9[-632],r6
800072b2:	2f f8       	sub	r8,-1
800072b4:	14 97       	mov	r7,r10
800072b6:	fb 48 06 b4 	st.w	sp[1716],r8
800072ba:	40 38       	lddsp	r8,sp[0xc]
800072bc:	e0 8f 03 b6 	bral	80007a28 <_vfprintf_r+0x154c>
800072c0:	f2 e6 00 00 	ld.d	r6,r9[0]
800072c4:	40 38       	lddsp	r8,sp[0xc]
800072c6:	fa e7 00 00 	st.d	sp[0],r6
800072ca:	2f 89       	sub	r9,-8
800072cc:	14 97       	mov	r7,r10
800072ce:	51 09       	stdsp	sp[0x40],r9
800072d0:	e0 8f 03 ac 	bral	80007a28 <_vfprintf_r+0x154c>
800072d4:	ed b5 00 04 	bld	r5,0x4
800072d8:	c1 61       	brne	80007304 <_vfprintf_r+0xe28>
800072da:	fa f8 06 b4 	ld.w	r8,sp[1716]
800072de:	40 3e       	lddsp	lr,sp[0xc]
800072e0:	58 0e       	cp.w	lr,0
800072e2:	c0 80       	breq	800072f2 <_vfprintf_r+0xe16>
800072e4:	10 36       	cp.w	r6,r8
800072e6:	c6 74       	brge	800073b4 <_vfprintf_r+0xed8>
800072e8:	fa cc f9 44 	sub	r12,sp,-1724
800072ec:	f8 06 00 36 	add	r6,r12,r6<<0x3
800072f0:	c8 08       	rjmp	800073f0 <_vfprintf_r+0xf14>
800072f2:	ee ca ff ff 	sub	r10,r7,-1
800072f6:	10 37       	cp.w	r7,r8
800072f8:	c7 f4       	brge	800073f6 <_vfprintf_r+0xf1a>
800072fa:	fa cb f9 44 	sub	r11,sp,-1724
800072fe:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007302:	c7 68       	rjmp	800073ee <_vfprintf_r+0xf12>
80007304:	ed b5 00 06 	bld	r5,0x6
80007308:	c4 a1       	brne	8000739c <_vfprintf_r+0xec0>
8000730a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000730e:	40 3c       	lddsp	r12,sp[0xc]
80007310:	58 0c       	cp.w	r12,0
80007312:	c1 d0       	breq	8000734c <_vfprintf_r+0xe70>
80007314:	10 36       	cp.w	r6,r8
80007316:	c0 64       	brge	80007322 <_vfprintf_r+0xe46>
80007318:	fa cb f9 44 	sub	r11,sp,-1724
8000731c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007320:	c1 f8       	rjmp	8000735e <_vfprintf_r+0xe82>
80007322:	fa c8 f9 50 	sub	r8,sp,-1712
80007326:	1a d8       	st.w	--sp,r8
80007328:	fa c8 fa b8 	sub	r8,sp,-1352
8000732c:	1a d8       	st.w	--sp,r8
8000732e:	fa c8 fb b4 	sub	r8,sp,-1100
80007332:	1a d8       	st.w	--sp,r8
80007334:	fa c8 f9 40 	sub	r8,sp,-1728
80007338:	fa c9 ff b4 	sub	r9,sp,-76
8000733c:	04 9a       	mov	r10,r2
8000733e:	0c 9b       	mov	r11,r6
80007340:	08 9c       	mov	r12,r4
80007342:	fe b0 f7 2f 	rcall	800061a0 <get_arg>
80007346:	2f dd       	sub	sp,-12
80007348:	98 18       	ld.sh	r8,r12[0x2]
8000734a:	c2 68       	rjmp	80007396 <_vfprintf_r+0xeba>
8000734c:	ee ca ff ff 	sub	r10,r7,-1
80007350:	10 37       	cp.w	r7,r8
80007352:	c0 94       	brge	80007364 <_vfprintf_r+0xe88>
80007354:	fa c9 f9 44 	sub	r9,sp,-1724
80007358:	14 97       	mov	r7,r10
8000735a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000735e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007362:	c1 a8       	rjmp	80007396 <_vfprintf_r+0xeba>
80007364:	41 09       	lddsp	r9,sp[0x40]
80007366:	59 f8       	cp.w	r8,31
80007368:	e0 89 00 13 	brgt	8000738e <_vfprintf_r+0xeb2>
8000736c:	f2 cb ff fc 	sub	r11,r9,-4
80007370:	51 0b       	stdsp	sp[0x40],r11
80007372:	72 09       	ld.w	r9,r9[0x0]
80007374:	fa c6 f9 44 	sub	r6,sp,-1724
80007378:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000737c:	2f f8       	sub	r8,-1
8000737e:	f7 49 fd 88 	st.w	r11[-632],r9
80007382:	fb 48 06 b4 	st.w	sp[1716],r8
80007386:	14 97       	mov	r7,r10
80007388:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000738c:	c0 58       	rjmp	80007396 <_vfprintf_r+0xeba>
8000738e:	92 18       	ld.sh	r8,r9[0x2]
80007390:	14 97       	mov	r7,r10
80007392:	2f c9       	sub	r9,-4
80007394:	51 09       	stdsp	sp[0x40],r9
80007396:	5c 78       	castu.h	r8
80007398:	50 18       	stdsp	sp[0x4],r8
8000739a:	c4 68       	rjmp	80007426 <_vfprintf_r+0xf4a>
8000739c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800073a0:	40 3c       	lddsp	r12,sp[0xc]
800073a2:	58 0c       	cp.w	r12,0
800073a4:	c1 d0       	breq	800073de <_vfprintf_r+0xf02>
800073a6:	10 36       	cp.w	r6,r8
800073a8:	c0 64       	brge	800073b4 <_vfprintf_r+0xed8>
800073aa:	fa cb f9 44 	sub	r11,sp,-1724
800073ae:	f6 06 00 36 	add	r6,r11,r6<<0x3
800073b2:	c1 f8       	rjmp	800073f0 <_vfprintf_r+0xf14>
800073b4:	fa c8 f9 50 	sub	r8,sp,-1712
800073b8:	1a d8       	st.w	--sp,r8
800073ba:	fa c8 fa b8 	sub	r8,sp,-1352
800073be:	0c 9b       	mov	r11,r6
800073c0:	1a d8       	st.w	--sp,r8
800073c2:	fa c8 fb b4 	sub	r8,sp,-1100
800073c6:	04 9a       	mov	r10,r2
800073c8:	1a d8       	st.w	--sp,r8
800073ca:	08 9c       	mov	r12,r4
800073cc:	fa c8 f9 40 	sub	r8,sp,-1728
800073d0:	fa c9 ff b4 	sub	r9,sp,-76
800073d4:	fe b0 f6 e6 	rcall	800061a0 <get_arg>
800073d8:	2f dd       	sub	sp,-12
800073da:	78 0b       	ld.w	r11,r12[0x0]
800073dc:	c2 48       	rjmp	80007424 <_vfprintf_r+0xf48>
800073de:	ee ca ff ff 	sub	r10,r7,-1
800073e2:	10 37       	cp.w	r7,r8
800073e4:	c0 94       	brge	800073f6 <_vfprintf_r+0xf1a>
800073e6:	fa c9 f9 44 	sub	r9,sp,-1724
800073ea:	f2 06 00 36 	add	r6,r9,r6<<0x3
800073ee:	14 97       	mov	r7,r10
800073f0:	ec fb fd 88 	ld.w	r11,r6[-632]
800073f4:	c1 88       	rjmp	80007424 <_vfprintf_r+0xf48>
800073f6:	41 09       	lddsp	r9,sp[0x40]
800073f8:	59 f8       	cp.w	r8,31
800073fa:	e0 89 00 11 	brgt	8000741c <_vfprintf_r+0xf40>
800073fe:	f2 cb ff fc 	sub	r11,r9,-4
80007402:	51 0b       	stdsp	sp[0x40],r11
80007404:	fa c6 f9 44 	sub	r6,sp,-1724
80007408:	72 0b       	ld.w	r11,r9[0x0]
8000740a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000740e:	f3 4b fd 88 	st.w	r9[-632],r11
80007412:	2f f8       	sub	r8,-1
80007414:	14 97       	mov	r7,r10
80007416:	fb 48 06 b4 	st.w	sp[1716],r8
8000741a:	c0 58       	rjmp	80007424 <_vfprintf_r+0xf48>
8000741c:	72 0b       	ld.w	r11,r9[0x0]
8000741e:	14 97       	mov	r7,r10
80007420:	2f c9       	sub	r9,-4
80007422:	51 09       	stdsp	sp[0x40],r9
80007424:	50 1b       	stdsp	sp[0x4],r11
80007426:	30 0e       	mov	lr,0
80007428:	50 0e       	stdsp	sp[0x0],lr
8000742a:	1c 98       	mov	r8,lr
8000742c:	e0 8f 02 fe 	bral	80007a28 <_vfprintf_r+0x154c>
80007430:	50 a7       	stdsp	sp[0x28],r7
80007432:	50 80       	stdsp	sp[0x20],r0
80007434:	0c 97       	mov	r7,r6
80007436:	04 94       	mov	r4,r2
80007438:	06 96       	mov	r6,r3
8000743a:	02 92       	mov	r2,r1
8000743c:	40 93       	lddsp	r3,sp[0x24]
8000743e:	40 41       	lddsp	r1,sp[0x10]
80007440:	0e 99       	mov	r9,r7
80007442:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007446:	40 3c       	lddsp	r12,sp[0xc]
80007448:	58 0c       	cp.w	r12,0
8000744a:	c1 d0       	breq	80007484 <_vfprintf_r+0xfa8>
8000744c:	10 36       	cp.w	r6,r8
8000744e:	c0 64       	brge	8000745a <_vfprintf_r+0xf7e>
80007450:	fa cb f9 44 	sub	r11,sp,-1724
80007454:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007458:	c1 d8       	rjmp	80007492 <_vfprintf_r+0xfb6>
8000745a:	fa c8 f9 50 	sub	r8,sp,-1712
8000745e:	1a d8       	st.w	--sp,r8
80007460:	fa c8 fa b8 	sub	r8,sp,-1352
80007464:	1a d8       	st.w	--sp,r8
80007466:	fa c8 fb b4 	sub	r8,sp,-1100
8000746a:	1a d8       	st.w	--sp,r8
8000746c:	fa c9 ff b4 	sub	r9,sp,-76
80007470:	fa c8 f9 40 	sub	r8,sp,-1728
80007474:	04 9a       	mov	r10,r2
80007476:	0c 9b       	mov	r11,r6
80007478:	08 9c       	mov	r12,r4
8000747a:	fe b0 f6 93 	rcall	800061a0 <get_arg>
8000747e:	2f dd       	sub	sp,-12
80007480:	78 09       	ld.w	r9,r12[0x0]
80007482:	c2 18       	rjmp	800074c4 <_vfprintf_r+0xfe8>
80007484:	2f f7       	sub	r7,-1
80007486:	10 39       	cp.w	r9,r8
80007488:	c0 84       	brge	80007498 <_vfprintf_r+0xfbc>
8000748a:	fa ca f9 44 	sub	r10,sp,-1724
8000748e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007492:	ec f9 fd 88 	ld.w	r9,r6[-632]
80007496:	c1 78       	rjmp	800074c4 <_vfprintf_r+0xfe8>
80007498:	41 09       	lddsp	r9,sp[0x40]
8000749a:	59 f8       	cp.w	r8,31
8000749c:	e0 89 00 10 	brgt	800074bc <_vfprintf_r+0xfe0>
800074a0:	f2 ca ff fc 	sub	r10,r9,-4
800074a4:	51 0a       	stdsp	sp[0x40],r10
800074a6:	fa c6 f9 44 	sub	r6,sp,-1724
800074aa:	72 09       	ld.w	r9,r9[0x0]
800074ac:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800074b0:	f5 49 fd 88 	st.w	r10[-632],r9
800074b4:	2f f8       	sub	r8,-1
800074b6:	fb 48 06 b4 	st.w	sp[1716],r8
800074ba:	c0 58       	rjmp	800074c4 <_vfprintf_r+0xfe8>
800074bc:	f2 c8 ff fc 	sub	r8,r9,-4
800074c0:	51 08       	stdsp	sp[0x40],r8
800074c2:	72 09       	ld.w	r9,r9[0x0]
800074c4:	33 08       	mov	r8,48
800074c6:	fb 68 06 b8 	st.b	sp[1720],r8
800074ca:	37 88       	mov	r8,120
800074cc:	30 0e       	mov	lr,0
800074ce:	fb 68 06 b9 	st.b	sp[1721],r8
800074d2:	4c ac       	lddpc	r12,800075f8 <_vfprintf_r+0x111c>
800074d4:	50 19       	stdsp	sp[0x4],r9
800074d6:	a1 b5       	sbr	r5,0x1
800074d8:	50 0e       	stdsp	sp[0x0],lr
800074da:	50 dc       	stdsp	sp[0x34],r12
800074dc:	30 28       	mov	r8,2
800074de:	37 80       	mov	r0,120
800074e0:	e0 8f 02 a4 	bral	80007a28 <_vfprintf_r+0x154c>
800074e4:	50 a7       	stdsp	sp[0x28],r7
800074e6:	50 80       	stdsp	sp[0x20],r0
800074e8:	10 90       	mov	r0,r8
800074ea:	30 08       	mov	r8,0
800074ec:	fb 68 06 bb 	st.b	sp[1723],r8
800074f0:	0c 97       	mov	r7,r6
800074f2:	04 94       	mov	r4,r2
800074f4:	06 96       	mov	r6,r3
800074f6:	02 92       	mov	r2,r1
800074f8:	40 93       	lddsp	r3,sp[0x24]
800074fa:	40 41       	lddsp	r1,sp[0x10]
800074fc:	0e 99       	mov	r9,r7
800074fe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007502:	40 3b       	lddsp	r11,sp[0xc]
80007504:	58 0b       	cp.w	r11,0
80007506:	c1 d0       	breq	80007540 <_vfprintf_r+0x1064>
80007508:	10 36       	cp.w	r6,r8
8000750a:	c0 64       	brge	80007516 <_vfprintf_r+0x103a>
8000750c:	fa ca f9 44 	sub	r10,sp,-1724
80007510:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007514:	c1 d8       	rjmp	8000754e <_vfprintf_r+0x1072>
80007516:	fa c8 f9 50 	sub	r8,sp,-1712
8000751a:	1a d8       	st.w	--sp,r8
8000751c:	fa c8 fa b8 	sub	r8,sp,-1352
80007520:	1a d8       	st.w	--sp,r8
80007522:	fa c8 fb b4 	sub	r8,sp,-1100
80007526:	0c 9b       	mov	r11,r6
80007528:	1a d8       	st.w	--sp,r8
8000752a:	04 9a       	mov	r10,r2
8000752c:	fa c8 f9 40 	sub	r8,sp,-1728
80007530:	fa c9 ff b4 	sub	r9,sp,-76
80007534:	08 9c       	mov	r12,r4
80007536:	fe b0 f6 35 	rcall	800061a0 <get_arg>
8000753a:	2f dd       	sub	sp,-12
8000753c:	78 06       	ld.w	r6,r12[0x0]
8000753e:	c2 08       	rjmp	8000757e <_vfprintf_r+0x10a2>
80007540:	2f f7       	sub	r7,-1
80007542:	10 39       	cp.w	r9,r8
80007544:	c0 84       	brge	80007554 <_vfprintf_r+0x1078>
80007546:	fa c9 f9 44 	sub	r9,sp,-1724
8000754a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000754e:	ec f6 fd 88 	ld.w	r6,r6[-632]
80007552:	c1 68       	rjmp	8000757e <_vfprintf_r+0x10a2>
80007554:	41 09       	lddsp	r9,sp[0x40]
80007556:	59 f8       	cp.w	r8,31
80007558:	e0 89 00 10 	brgt	80007578 <_vfprintf_r+0x109c>
8000755c:	f2 ca ff fc 	sub	r10,r9,-4
80007560:	51 0a       	stdsp	sp[0x40],r10
80007562:	72 06       	ld.w	r6,r9[0x0]
80007564:	fa ce f9 44 	sub	lr,sp,-1724
80007568:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000756c:	f3 46 fd 88 	st.w	r9[-632],r6
80007570:	2f f8       	sub	r8,-1
80007572:	fb 48 06 b4 	st.w	sp[1716],r8
80007576:	c0 48       	rjmp	8000757e <_vfprintf_r+0x10a2>
80007578:	72 06       	ld.w	r6,r9[0x0]
8000757a:	2f c9       	sub	r9,-4
8000757c:	51 09       	stdsp	sp[0x40],r9
8000757e:	40 2c       	lddsp	r12,sp[0x8]
80007580:	58 0c       	cp.w	r12,0
80007582:	c1 05       	brlt	800075a2 <_vfprintf_r+0x10c6>
80007584:	18 9a       	mov	r10,r12
80007586:	30 0b       	mov	r11,0
80007588:	0c 9c       	mov	r12,r6
8000758a:	e0 a0 14 63 	rcall	80009e50 <memchr>
8000758e:	e0 80 02 e0 	breq	80007b4e <_vfprintf_r+0x1672>
80007592:	f8 06 01 02 	sub	r2,r12,r6
80007596:	40 2b       	lddsp	r11,sp[0x8]
80007598:	16 32       	cp.w	r2,r11
8000759a:	e0 89 02 da 	brgt	80007b4e <_vfprintf_r+0x1672>
8000759e:	e0 8f 02 d5 	bral	80007b48 <_vfprintf_r+0x166c>
800075a2:	30 0a       	mov	r10,0
800075a4:	0c 9c       	mov	r12,r6
800075a6:	50 2a       	stdsp	sp[0x8],r10
800075a8:	e0 a0 19 e6 	rcall	8000a974 <strlen>
800075ac:	18 92       	mov	r2,r12
800075ae:	e0 8f 02 d3 	bral	80007b54 <_vfprintf_r+0x1678>
800075b2:	50 a7       	stdsp	sp[0x28],r7
800075b4:	50 80       	stdsp	sp[0x20],r0
800075b6:	0c 97       	mov	r7,r6
800075b8:	04 94       	mov	r4,r2
800075ba:	06 96       	mov	r6,r3
800075bc:	02 92       	mov	r2,r1
800075be:	40 93       	lddsp	r3,sp[0x24]
800075c0:	10 90       	mov	r0,r8
800075c2:	40 41       	lddsp	r1,sp[0x10]
800075c4:	a5 a5       	sbr	r5,0x4
800075c6:	c0 a8       	rjmp	800075da <_vfprintf_r+0x10fe>
800075c8:	50 a7       	stdsp	sp[0x28],r7
800075ca:	50 80       	stdsp	sp[0x20],r0
800075cc:	0c 97       	mov	r7,r6
800075ce:	04 94       	mov	r4,r2
800075d0:	06 96       	mov	r6,r3
800075d2:	02 92       	mov	r2,r1
800075d4:	40 93       	lddsp	r3,sp[0x24]
800075d6:	10 90       	mov	r0,r8
800075d8:	40 41       	lddsp	r1,sp[0x10]
800075da:	ed b5 00 05 	bld	r5,0x5
800075de:	c5 71       	brne	8000768c <_vfprintf_r+0x11b0>
800075e0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800075e4:	40 39       	lddsp	r9,sp[0xc]
800075e6:	58 09       	cp.w	r9,0
800075e8:	c2 20       	breq	8000762c <_vfprintf_r+0x1150>
800075ea:	10 36       	cp.w	r6,r8
800075ec:	c0 84       	brge	800075fc <_vfprintf_r+0x1120>
800075ee:	fa c8 f9 44 	sub	r8,sp,-1724
800075f2:	f0 06 00 36 	add	r6,r8,r6<<0x3
800075f6:	c2 48       	rjmp	8000763e <_vfprintf_r+0x1162>
800075f8:	80 00       	ld.sh	r0,r0[0x0]
800075fa:	ca 40       	breq	80007542 <_vfprintf_r+0x1066>
800075fc:	fa c8 f9 50 	sub	r8,sp,-1712
80007600:	1a d8       	st.w	--sp,r8
80007602:	fa c8 fa b8 	sub	r8,sp,-1352
80007606:	1a d8       	st.w	--sp,r8
80007608:	fa c8 fb b4 	sub	r8,sp,-1100
8000760c:	1a d8       	st.w	--sp,r8
8000760e:	fa c8 f9 40 	sub	r8,sp,-1728
80007612:	fa c9 ff b4 	sub	r9,sp,-76
80007616:	04 9a       	mov	r10,r2
80007618:	0c 9b       	mov	r11,r6
8000761a:	08 9c       	mov	r12,r4
8000761c:	fe b0 f5 c2 	rcall	800061a0 <get_arg>
80007620:	2f dd       	sub	sp,-12
80007622:	f8 e8 00 00 	ld.d	r8,r12[0]
80007626:	fa e9 00 00 	st.d	sp[0],r8
8000762a:	c2 e8       	rjmp	80007686 <_vfprintf_r+0x11aa>
8000762c:	ee ca ff ff 	sub	r10,r7,-1
80007630:	10 37       	cp.w	r7,r8
80007632:	c0 b4       	brge	80007648 <_vfprintf_r+0x116c>
80007634:	fa c8 f9 44 	sub	r8,sp,-1724
80007638:	14 97       	mov	r7,r10
8000763a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000763e:	ec ea fd 88 	ld.d	r10,r6[-632]
80007642:	fa eb 00 00 	st.d	sp[0],r10
80007646:	c2 08       	rjmp	80007686 <_vfprintf_r+0x11aa>
80007648:	41 09       	lddsp	r9,sp[0x40]
8000764a:	59 f8       	cp.w	r8,31
8000764c:	e0 89 00 16 	brgt	80007678 <_vfprintf_r+0x119c>
80007650:	f2 e6 00 00 	ld.d	r6,r9[0]
80007654:	f2 cb ff f8 	sub	r11,r9,-8
80007658:	fa e7 00 00 	st.d	sp[0],r6
8000765c:	51 0b       	stdsp	sp[0x40],r11
8000765e:	fa c6 f9 44 	sub	r6,sp,-1724
80007662:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007666:	fa e6 00 00 	ld.d	r6,sp[0]
8000766a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000766e:	2f f8       	sub	r8,-1
80007670:	14 97       	mov	r7,r10
80007672:	fb 48 06 b4 	st.w	sp[1716],r8
80007676:	c0 88       	rjmp	80007686 <_vfprintf_r+0x11aa>
80007678:	f2 e6 00 00 	ld.d	r6,r9[0]
8000767c:	2f 89       	sub	r9,-8
8000767e:	fa e7 00 00 	st.d	sp[0],r6
80007682:	51 09       	stdsp	sp[0x40],r9
80007684:	14 97       	mov	r7,r10
80007686:	30 18       	mov	r8,1
80007688:	e0 8f 01 d0 	bral	80007a28 <_vfprintf_r+0x154c>
8000768c:	ed b5 00 04 	bld	r5,0x4
80007690:	c1 61       	brne	800076bc <_vfprintf_r+0x11e0>
80007692:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007696:	40 3e       	lddsp	lr,sp[0xc]
80007698:	58 0e       	cp.w	lr,0
8000769a:	c0 80       	breq	800076aa <_vfprintf_r+0x11ce>
8000769c:	10 36       	cp.w	r6,r8
8000769e:	c6 74       	brge	8000776c <_vfprintf_r+0x1290>
800076a0:	fa cc f9 44 	sub	r12,sp,-1724
800076a4:	f8 06 00 36 	add	r6,r12,r6<<0x3
800076a8:	c8 08       	rjmp	800077a8 <_vfprintf_r+0x12cc>
800076aa:	ee ca ff ff 	sub	r10,r7,-1
800076ae:	10 37       	cp.w	r7,r8
800076b0:	c7 f4       	brge	800077ae <_vfprintf_r+0x12d2>
800076b2:	fa cb f9 44 	sub	r11,sp,-1724
800076b6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800076ba:	c7 68       	rjmp	800077a6 <_vfprintf_r+0x12ca>
800076bc:	ed b5 00 06 	bld	r5,0x6
800076c0:	c4 a1       	brne	80007754 <_vfprintf_r+0x1278>
800076c2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800076c6:	40 3c       	lddsp	r12,sp[0xc]
800076c8:	58 0c       	cp.w	r12,0
800076ca:	c1 d0       	breq	80007704 <_vfprintf_r+0x1228>
800076cc:	10 36       	cp.w	r6,r8
800076ce:	c0 64       	brge	800076da <_vfprintf_r+0x11fe>
800076d0:	fa cb f9 44 	sub	r11,sp,-1724
800076d4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800076d8:	c1 f8       	rjmp	80007716 <_vfprintf_r+0x123a>
800076da:	fa c8 f9 50 	sub	r8,sp,-1712
800076de:	1a d8       	st.w	--sp,r8
800076e0:	fa c8 fa b8 	sub	r8,sp,-1352
800076e4:	1a d8       	st.w	--sp,r8
800076e6:	fa c8 fb b4 	sub	r8,sp,-1100
800076ea:	1a d8       	st.w	--sp,r8
800076ec:	fa c8 f9 40 	sub	r8,sp,-1728
800076f0:	fa c9 ff b4 	sub	r9,sp,-76
800076f4:	04 9a       	mov	r10,r2
800076f6:	0c 9b       	mov	r11,r6
800076f8:	08 9c       	mov	r12,r4
800076fa:	fe b0 f5 53 	rcall	800061a0 <get_arg>
800076fe:	2f dd       	sub	sp,-12
80007700:	98 18       	ld.sh	r8,r12[0x2]
80007702:	c2 68       	rjmp	8000774e <_vfprintf_r+0x1272>
80007704:	ee ca ff ff 	sub	r10,r7,-1
80007708:	10 37       	cp.w	r7,r8
8000770a:	c0 94       	brge	8000771c <_vfprintf_r+0x1240>
8000770c:	fa c9 f9 44 	sub	r9,sp,-1724
80007710:	14 97       	mov	r7,r10
80007712:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007716:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000771a:	c1 a8       	rjmp	8000774e <_vfprintf_r+0x1272>
8000771c:	41 09       	lddsp	r9,sp[0x40]
8000771e:	59 f8       	cp.w	r8,31
80007720:	e0 89 00 13 	brgt	80007746 <_vfprintf_r+0x126a>
80007724:	f2 cb ff fc 	sub	r11,r9,-4
80007728:	51 0b       	stdsp	sp[0x40],r11
8000772a:	72 09       	ld.w	r9,r9[0x0]
8000772c:	fa c6 f9 44 	sub	r6,sp,-1724
80007730:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007734:	2f f8       	sub	r8,-1
80007736:	f7 49 fd 88 	st.w	r11[-632],r9
8000773a:	fb 48 06 b4 	st.w	sp[1716],r8
8000773e:	14 97       	mov	r7,r10
80007740:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007744:	c0 58       	rjmp	8000774e <_vfprintf_r+0x1272>
80007746:	92 18       	ld.sh	r8,r9[0x2]
80007748:	14 97       	mov	r7,r10
8000774a:	2f c9       	sub	r9,-4
8000774c:	51 09       	stdsp	sp[0x40],r9
8000774e:	5c 78       	castu.h	r8
80007750:	50 18       	stdsp	sp[0x4],r8
80007752:	c4 68       	rjmp	800077de <_vfprintf_r+0x1302>
80007754:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007758:	40 3c       	lddsp	r12,sp[0xc]
8000775a:	58 0c       	cp.w	r12,0
8000775c:	c1 d0       	breq	80007796 <_vfprintf_r+0x12ba>
8000775e:	10 36       	cp.w	r6,r8
80007760:	c0 64       	brge	8000776c <_vfprintf_r+0x1290>
80007762:	fa cb f9 44 	sub	r11,sp,-1724
80007766:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000776a:	c1 f8       	rjmp	800077a8 <_vfprintf_r+0x12cc>
8000776c:	fa c8 f9 50 	sub	r8,sp,-1712
80007770:	1a d8       	st.w	--sp,r8
80007772:	fa c8 fa b8 	sub	r8,sp,-1352
80007776:	0c 9b       	mov	r11,r6
80007778:	1a d8       	st.w	--sp,r8
8000777a:	fa c8 fb b4 	sub	r8,sp,-1100
8000777e:	04 9a       	mov	r10,r2
80007780:	1a d8       	st.w	--sp,r8
80007782:	08 9c       	mov	r12,r4
80007784:	fa c8 f9 40 	sub	r8,sp,-1728
80007788:	fa c9 ff b4 	sub	r9,sp,-76
8000778c:	fe b0 f5 0a 	rcall	800061a0 <get_arg>
80007790:	2f dd       	sub	sp,-12
80007792:	78 0b       	ld.w	r11,r12[0x0]
80007794:	c2 48       	rjmp	800077dc <_vfprintf_r+0x1300>
80007796:	ee ca ff ff 	sub	r10,r7,-1
8000779a:	10 37       	cp.w	r7,r8
8000779c:	c0 94       	brge	800077ae <_vfprintf_r+0x12d2>
8000779e:	fa c9 f9 44 	sub	r9,sp,-1724
800077a2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800077a6:	14 97       	mov	r7,r10
800077a8:	ec fb fd 88 	ld.w	r11,r6[-632]
800077ac:	c1 88       	rjmp	800077dc <_vfprintf_r+0x1300>
800077ae:	41 09       	lddsp	r9,sp[0x40]
800077b0:	59 f8       	cp.w	r8,31
800077b2:	e0 89 00 11 	brgt	800077d4 <_vfprintf_r+0x12f8>
800077b6:	f2 cb ff fc 	sub	r11,r9,-4
800077ba:	51 0b       	stdsp	sp[0x40],r11
800077bc:	fa c6 f9 44 	sub	r6,sp,-1724
800077c0:	72 0b       	ld.w	r11,r9[0x0]
800077c2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800077c6:	f3 4b fd 88 	st.w	r9[-632],r11
800077ca:	2f f8       	sub	r8,-1
800077cc:	14 97       	mov	r7,r10
800077ce:	fb 48 06 b4 	st.w	sp[1716],r8
800077d2:	c0 58       	rjmp	800077dc <_vfprintf_r+0x1300>
800077d4:	72 0b       	ld.w	r11,r9[0x0]
800077d6:	14 97       	mov	r7,r10
800077d8:	2f c9       	sub	r9,-4
800077da:	51 09       	stdsp	sp[0x40],r9
800077dc:	50 1b       	stdsp	sp[0x4],r11
800077de:	30 0e       	mov	lr,0
800077e0:	30 18       	mov	r8,1
800077e2:	50 0e       	stdsp	sp[0x0],lr
800077e4:	c2 29       	rjmp	80007a28 <_vfprintf_r+0x154c>
800077e6:	50 a7       	stdsp	sp[0x28],r7
800077e8:	50 80       	stdsp	sp[0x20],r0
800077ea:	0c 97       	mov	r7,r6
800077ec:	04 94       	mov	r4,r2
800077ee:	06 96       	mov	r6,r3
800077f0:	02 92       	mov	r2,r1
800077f2:	4d 3c       	lddpc	r12,8000793c <_vfprintf_r+0x1460>
800077f4:	40 93       	lddsp	r3,sp[0x24]
800077f6:	10 90       	mov	r0,r8
800077f8:	40 41       	lddsp	r1,sp[0x10]
800077fa:	50 dc       	stdsp	sp[0x34],r12
800077fc:	ed b5 00 05 	bld	r5,0x5
80007800:	c5 51       	brne	800078aa <_vfprintf_r+0x13ce>
80007802:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007806:	40 3b       	lddsp	r11,sp[0xc]
80007808:	58 0b       	cp.w	r11,0
8000780a:	c2 20       	breq	8000784e <_vfprintf_r+0x1372>
8000780c:	10 36       	cp.w	r6,r8
8000780e:	c0 a4       	brge	80007822 <_vfprintf_r+0x1346>
80007810:	fa ca f9 44 	sub	r10,sp,-1724
80007814:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007818:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000781c:	fa e9 00 00 	st.d	sp[0],r8
80007820:	cf 38       	rjmp	80007a06 <_vfprintf_r+0x152a>
80007822:	fa c8 f9 50 	sub	r8,sp,-1712
80007826:	1a d8       	st.w	--sp,r8
80007828:	fa c8 fa b8 	sub	r8,sp,-1352
8000782c:	04 9a       	mov	r10,r2
8000782e:	1a d8       	st.w	--sp,r8
80007830:	0c 9b       	mov	r11,r6
80007832:	fa c8 fb b4 	sub	r8,sp,-1100
80007836:	08 9c       	mov	r12,r4
80007838:	1a d8       	st.w	--sp,r8
8000783a:	fa c8 f9 40 	sub	r8,sp,-1728
8000783e:	fa c9 ff b4 	sub	r9,sp,-76
80007842:	fe b0 f4 af 	rcall	800061a0 <get_arg>
80007846:	2f dd       	sub	sp,-12
80007848:	f8 ea 00 00 	ld.d	r10,r12[0]
8000784c:	c0 c8       	rjmp	80007864 <_vfprintf_r+0x1388>
8000784e:	ee ca ff ff 	sub	r10,r7,-1
80007852:	10 37       	cp.w	r7,r8
80007854:	c0 b4       	brge	8000786a <_vfprintf_r+0x138e>
80007856:	fa c9 f9 44 	sub	r9,sp,-1724
8000785a:	14 97       	mov	r7,r10
8000785c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007860:	ec ea fd 88 	ld.d	r10,r6[-632]
80007864:	fa eb 00 00 	st.d	sp[0],r10
80007868:	cc f8       	rjmp	80007a06 <_vfprintf_r+0x152a>
8000786a:	41 09       	lddsp	r9,sp[0x40]
8000786c:	59 f8       	cp.w	r8,31
8000786e:	e0 89 00 16 	brgt	8000789a <_vfprintf_r+0x13be>
80007872:	f2 e6 00 00 	ld.d	r6,r9[0]
80007876:	f2 cb ff f8 	sub	r11,r9,-8
8000787a:	fa e7 00 00 	st.d	sp[0],r6
8000787e:	51 0b       	stdsp	sp[0x40],r11
80007880:	fa c6 f9 44 	sub	r6,sp,-1724
80007884:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007888:	fa e6 00 00 	ld.d	r6,sp[0]
8000788c:	f2 e7 fd 88 	st.d	r9[-632],r6
80007890:	2f f8       	sub	r8,-1
80007892:	14 97       	mov	r7,r10
80007894:	fb 48 06 b4 	st.w	sp[1716],r8
80007898:	cb 78       	rjmp	80007a06 <_vfprintf_r+0x152a>
8000789a:	f2 e6 00 00 	ld.d	r6,r9[0]
8000789e:	2f 89       	sub	r9,-8
800078a0:	fa e7 00 00 	st.d	sp[0],r6
800078a4:	51 09       	stdsp	sp[0x40],r9
800078a6:	14 97       	mov	r7,r10
800078a8:	ca f8       	rjmp	80007a06 <_vfprintf_r+0x152a>
800078aa:	ed b5 00 04 	bld	r5,0x4
800078ae:	c1 71       	brne	800078dc <_vfprintf_r+0x1400>
800078b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800078b4:	40 3e       	lddsp	lr,sp[0xc]
800078b6:	58 0e       	cp.w	lr,0
800078b8:	c0 80       	breq	800078c8 <_vfprintf_r+0x13ec>
800078ba:	10 36       	cp.w	r6,r8
800078bc:	c6 a4       	brge	80007990 <_vfprintf_r+0x14b4>
800078be:	fa cc f9 44 	sub	r12,sp,-1724
800078c2:	f8 06 00 36 	add	r6,r12,r6<<0x3
800078c6:	c8 38       	rjmp	800079cc <_vfprintf_r+0x14f0>
800078c8:	ee ca ff ff 	sub	r10,r7,-1
800078cc:	10 37       	cp.w	r7,r8
800078ce:	e0 84 00 82 	brge	800079d2 <_vfprintf_r+0x14f6>
800078d2:	fa cb f9 44 	sub	r11,sp,-1724
800078d6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800078da:	c7 88       	rjmp	800079ca <_vfprintf_r+0x14ee>
800078dc:	ed b5 00 06 	bld	r5,0x6
800078e0:	c4 c1       	brne	80007978 <_vfprintf_r+0x149c>
800078e2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800078e6:	40 3c       	lddsp	r12,sp[0xc]
800078e8:	58 0c       	cp.w	r12,0
800078ea:	c1 d0       	breq	80007924 <_vfprintf_r+0x1448>
800078ec:	10 36       	cp.w	r6,r8
800078ee:	c0 64       	brge	800078fa <_vfprintf_r+0x141e>
800078f0:	fa cb f9 44 	sub	r11,sp,-1724
800078f4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800078f8:	c1 f8       	rjmp	80007936 <_vfprintf_r+0x145a>
800078fa:	fa c8 f9 50 	sub	r8,sp,-1712
800078fe:	1a d8       	st.w	--sp,r8
80007900:	fa c8 fa b8 	sub	r8,sp,-1352
80007904:	1a d8       	st.w	--sp,r8
80007906:	fa c8 fb b4 	sub	r8,sp,-1100
8000790a:	1a d8       	st.w	--sp,r8
8000790c:	fa c8 f9 40 	sub	r8,sp,-1728
80007910:	fa c9 ff b4 	sub	r9,sp,-76
80007914:	04 9a       	mov	r10,r2
80007916:	0c 9b       	mov	r11,r6
80007918:	08 9c       	mov	r12,r4
8000791a:	fe b0 f4 43 	rcall	800061a0 <get_arg>
8000791e:	2f dd       	sub	sp,-12
80007920:	98 18       	ld.sh	r8,r12[0x2]
80007922:	c2 88       	rjmp	80007972 <_vfprintf_r+0x1496>
80007924:	ee ca ff ff 	sub	r10,r7,-1
80007928:	10 37       	cp.w	r7,r8
8000792a:	c0 b4       	brge	80007940 <_vfprintf_r+0x1464>
8000792c:	fa c9 f9 44 	sub	r9,sp,-1724
80007930:	14 97       	mov	r7,r10
80007932:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007936:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000793a:	c1 c8       	rjmp	80007972 <_vfprintf_r+0x1496>
8000793c:	80 00       	ld.sh	r0,r0[0x0]
8000793e:	ca 40       	breq	80007886 <_vfprintf_r+0x13aa>
80007940:	41 09       	lddsp	r9,sp[0x40]
80007942:	59 f8       	cp.w	r8,31
80007944:	e0 89 00 13 	brgt	8000796a <_vfprintf_r+0x148e>
80007948:	f2 cb ff fc 	sub	r11,r9,-4
8000794c:	51 0b       	stdsp	sp[0x40],r11
8000794e:	72 09       	ld.w	r9,r9[0x0]
80007950:	fa c6 f9 44 	sub	r6,sp,-1724
80007954:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007958:	2f f8       	sub	r8,-1
8000795a:	f7 49 fd 88 	st.w	r11[-632],r9
8000795e:	fb 48 06 b4 	st.w	sp[1716],r8
80007962:	14 97       	mov	r7,r10
80007964:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007968:	c0 58       	rjmp	80007972 <_vfprintf_r+0x1496>
8000796a:	92 18       	ld.sh	r8,r9[0x2]
8000796c:	14 97       	mov	r7,r10
8000796e:	2f c9       	sub	r9,-4
80007970:	51 09       	stdsp	sp[0x40],r9
80007972:	5c 78       	castu.h	r8
80007974:	50 18       	stdsp	sp[0x4],r8
80007976:	c4 68       	rjmp	80007a02 <_vfprintf_r+0x1526>
80007978:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000797c:	40 3c       	lddsp	r12,sp[0xc]
8000797e:	58 0c       	cp.w	r12,0
80007980:	c1 d0       	breq	800079ba <_vfprintf_r+0x14de>
80007982:	10 36       	cp.w	r6,r8
80007984:	c0 64       	brge	80007990 <_vfprintf_r+0x14b4>
80007986:	fa cb f9 44 	sub	r11,sp,-1724
8000798a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000798e:	c1 f8       	rjmp	800079cc <_vfprintf_r+0x14f0>
80007990:	fa c8 f9 50 	sub	r8,sp,-1712
80007994:	1a d8       	st.w	--sp,r8
80007996:	fa c8 fa b8 	sub	r8,sp,-1352
8000799a:	0c 9b       	mov	r11,r6
8000799c:	1a d8       	st.w	--sp,r8
8000799e:	fa c8 fb b4 	sub	r8,sp,-1100
800079a2:	04 9a       	mov	r10,r2
800079a4:	1a d8       	st.w	--sp,r8
800079a6:	08 9c       	mov	r12,r4
800079a8:	fa c8 f9 40 	sub	r8,sp,-1728
800079ac:	fa c9 ff b4 	sub	r9,sp,-76
800079b0:	fe b0 f3 f8 	rcall	800061a0 <get_arg>
800079b4:	2f dd       	sub	sp,-12
800079b6:	78 0b       	ld.w	r11,r12[0x0]
800079b8:	c2 48       	rjmp	80007a00 <_vfprintf_r+0x1524>
800079ba:	ee ca ff ff 	sub	r10,r7,-1
800079be:	10 37       	cp.w	r7,r8
800079c0:	c0 94       	brge	800079d2 <_vfprintf_r+0x14f6>
800079c2:	fa c9 f9 44 	sub	r9,sp,-1724
800079c6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800079ca:	14 97       	mov	r7,r10
800079cc:	ec fb fd 88 	ld.w	r11,r6[-632]
800079d0:	c1 88       	rjmp	80007a00 <_vfprintf_r+0x1524>
800079d2:	41 09       	lddsp	r9,sp[0x40]
800079d4:	59 f8       	cp.w	r8,31
800079d6:	e0 89 00 11 	brgt	800079f8 <_vfprintf_r+0x151c>
800079da:	f2 cb ff fc 	sub	r11,r9,-4
800079de:	51 0b       	stdsp	sp[0x40],r11
800079e0:	fa c6 f9 44 	sub	r6,sp,-1724
800079e4:	72 0b       	ld.w	r11,r9[0x0]
800079e6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800079ea:	f3 4b fd 88 	st.w	r9[-632],r11
800079ee:	2f f8       	sub	r8,-1
800079f0:	14 97       	mov	r7,r10
800079f2:	fb 48 06 b4 	st.w	sp[1716],r8
800079f6:	c0 58       	rjmp	80007a00 <_vfprintf_r+0x1524>
800079f8:	72 0b       	ld.w	r11,r9[0x0]
800079fa:	14 97       	mov	r7,r10
800079fc:	2f c9       	sub	r9,-4
800079fe:	51 09       	stdsp	sp[0x40],r9
80007a00:	50 1b       	stdsp	sp[0x4],r11
80007a02:	30 0e       	mov	lr,0
80007a04:	50 0e       	stdsp	sp[0x0],lr
80007a06:	40 08       	lddsp	r8,sp[0x0]
80007a08:	40 1c       	lddsp	r12,sp[0x4]
80007a0a:	18 48       	or	r8,r12
80007a0c:	5f 19       	srne	r9
80007a0e:	0a 98       	mov	r8,r5
80007a10:	eb e9 00 09 	and	r9,r5,r9
80007a14:	a1 b8       	sbr	r8,0x1
80007a16:	58 09       	cp.w	r9,0
80007a18:	c0 70       	breq	80007a26 <_vfprintf_r+0x154a>
80007a1a:	10 95       	mov	r5,r8
80007a1c:	fb 60 06 b9 	st.b	sp[1721],r0
80007a20:	33 08       	mov	r8,48
80007a22:	fb 68 06 b8 	st.b	sp[1720],r8
80007a26:	30 28       	mov	r8,2
80007a28:	30 09       	mov	r9,0
80007a2a:	fb 69 06 bb 	st.b	sp[1723],r9
80007a2e:	0a 99       	mov	r9,r5
80007a30:	a7 d9       	cbr	r9,0x7
80007a32:	40 2b       	lddsp	r11,sp[0x8]
80007a34:	40 16       	lddsp	r6,sp[0x4]
80007a36:	58 0b       	cp.w	r11,0
80007a38:	5f 1a       	srne	r10
80007a3a:	f2 05 17 40 	movge	r5,r9
80007a3e:	fa c2 f9 78 	sub	r2,sp,-1672
80007a42:	40 09       	lddsp	r9,sp[0x0]
80007a44:	0c 49       	or	r9,r6
80007a46:	5f 19       	srne	r9
80007a48:	f5 e9 10 09 	or	r9,r10,r9
80007a4c:	c5 c0       	breq	80007b04 <_vfprintf_r+0x1628>
80007a4e:	30 19       	mov	r9,1
80007a50:	f2 08 18 00 	cp.b	r8,r9
80007a54:	c0 60       	breq	80007a60 <_vfprintf_r+0x1584>
80007a56:	30 29       	mov	r9,2
80007a58:	f2 08 18 00 	cp.b	r8,r9
80007a5c:	c0 41       	brne	80007a64 <_vfprintf_r+0x1588>
80007a5e:	c3 c8       	rjmp	80007ad6 <_vfprintf_r+0x15fa>
80007a60:	04 96       	mov	r6,r2
80007a62:	c3 08       	rjmp	80007ac2 <_vfprintf_r+0x15e6>
80007a64:	04 96       	mov	r6,r2
80007a66:	fa e8 00 00 	ld.d	r8,sp[0]
80007a6a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80007a6e:	2d 0a       	sub	r10,-48
80007a70:	0c fa       	st.b	--r6,r10
80007a72:	f0 0b 16 03 	lsr	r11,r8,0x3
80007a76:	f2 0c 16 03 	lsr	r12,r9,0x3
80007a7a:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80007a7e:	18 99       	mov	r9,r12
80007a80:	16 98       	mov	r8,r11
80007a82:	58 08       	cp.w	r8,0
80007a84:	5c 29       	cpc	r9
80007a86:	cf 21       	brne	80007a6a <_vfprintf_r+0x158e>
80007a88:	fa e9 00 00 	st.d	sp[0],r8
80007a8c:	ed b5 00 00 	bld	r5,0x0
80007a90:	c4 51       	brne	80007b1a <_vfprintf_r+0x163e>
80007a92:	33 09       	mov	r9,48
80007a94:	f2 0a 18 00 	cp.b	r10,r9
80007a98:	c4 10       	breq	80007b1a <_vfprintf_r+0x163e>
80007a9a:	0c f9       	st.b	--r6,r9
80007a9c:	c3 f8       	rjmp	80007b1a <_vfprintf_r+0x163e>
80007a9e:	fa ea 00 00 	ld.d	r10,sp[0]
80007aa2:	30 a8       	mov	r8,10
80007aa4:	30 09       	mov	r9,0
80007aa6:	e0 a0 1d c7 	rcall	8000b634 <__avr32_umod64>
80007aaa:	30 a8       	mov	r8,10
80007aac:	2d 0a       	sub	r10,-48
80007aae:	30 09       	mov	r9,0
80007ab0:	ac 8a       	st.b	r6[0x0],r10
80007ab2:	fa ea 00 00 	ld.d	r10,sp[0]
80007ab6:	fe b0 f2 24 	rcall	80005efe <__avr32_udiv64>
80007aba:	16 99       	mov	r9,r11
80007abc:	14 98       	mov	r8,r10
80007abe:	fa e9 00 00 	st.d	sp[0],r8
80007ac2:	20 16       	sub	r6,1
80007ac4:	fa ea 00 00 	ld.d	r10,sp[0]
80007ac8:	58 9a       	cp.w	r10,9
80007aca:	5c 2b       	cpc	r11
80007acc:	fe 9b ff e9 	brhi	80007a9e <_vfprintf_r+0x15c2>
80007ad0:	1b f8       	ld.ub	r8,sp[0x7]
80007ad2:	2d 08       	sub	r8,-48
80007ad4:	c2 08       	rjmp	80007b14 <_vfprintf_r+0x1638>
80007ad6:	04 96       	mov	r6,r2
80007ad8:	fa e8 00 00 	ld.d	r8,sp[0]
80007adc:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80007ae0:	40 de       	lddsp	lr,sp[0x34]
80007ae2:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80007ae6:	0c fa       	st.b	--r6,r10
80007ae8:	f2 0b 16 04 	lsr	r11,r9,0x4
80007aec:	f0 0a 16 04 	lsr	r10,r8,0x4
80007af0:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80007af4:	16 99       	mov	r9,r11
80007af6:	14 98       	mov	r8,r10
80007af8:	58 08       	cp.w	r8,0
80007afa:	5c 29       	cpc	r9
80007afc:	cf 01       	brne	80007adc <_vfprintf_r+0x1600>
80007afe:	fa e9 00 00 	st.d	sp[0],r8
80007b02:	c0 c8       	rjmp	80007b1a <_vfprintf_r+0x163e>
80007b04:	58 08       	cp.w	r8,0
80007b06:	c0 91       	brne	80007b18 <_vfprintf_r+0x163c>
80007b08:	ed b5 00 00 	bld	r5,0x0
80007b0c:	c0 61       	brne	80007b18 <_vfprintf_r+0x163c>
80007b0e:	fa c6 f9 79 	sub	r6,sp,-1671
80007b12:	33 08       	mov	r8,48
80007b14:	ac 88       	st.b	r6[0x0],r8
80007b16:	c0 28       	rjmp	80007b1a <_vfprintf_r+0x163e>
80007b18:	04 96       	mov	r6,r2
80007b1a:	0c 12       	sub	r2,r6
80007b1c:	c1 c8       	rjmp	80007b54 <_vfprintf_r+0x1678>
80007b1e:	50 a7       	stdsp	sp[0x28],r7
80007b20:	50 80       	stdsp	sp[0x20],r0
80007b22:	40 93       	lddsp	r3,sp[0x24]
80007b24:	0c 97       	mov	r7,r6
80007b26:	10 90       	mov	r0,r8
80007b28:	04 94       	mov	r4,r2
80007b2a:	40 41       	lddsp	r1,sp[0x10]
80007b2c:	58 08       	cp.w	r8,0
80007b2e:	e0 80 04 51 	breq	800083d0 <_vfprintf_r+0x1ef4>
80007b32:	fb 68 06 60 	st.b	sp[1632],r8
80007b36:	30 0c       	mov	r12,0
80007b38:	30 08       	mov	r8,0
80007b3a:	30 12       	mov	r2,1
80007b3c:	fb 68 06 bb 	st.b	sp[1723],r8
80007b40:	50 2c       	stdsp	sp[0x8],r12
80007b42:	fa c6 f9 a0 	sub	r6,sp,-1632
80007b46:	c0 78       	rjmp	80007b54 <_vfprintf_r+0x1678>
80007b48:	30 0b       	mov	r11,0
80007b4a:	50 2b       	stdsp	sp[0x8],r11
80007b4c:	c0 48       	rjmp	80007b54 <_vfprintf_r+0x1678>
80007b4e:	40 22       	lddsp	r2,sp[0x8]
80007b50:	30 0a       	mov	r10,0
80007b52:	50 2a       	stdsp	sp[0x8],r10
80007b54:	40 29       	lddsp	r9,sp[0x8]
80007b56:	e4 09 0c 49 	max	r9,r2,r9
80007b5a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80007b5e:	50 39       	stdsp	sp[0xc],r9
80007b60:	0a 9e       	mov	lr,r5
80007b62:	30 09       	mov	r9,0
80007b64:	e2 1e 00 02 	andl	lr,0x2,COH
80007b68:	f2 08 18 00 	cp.b	r8,r9
80007b6c:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80007b70:	f7 b8 01 ff 	subne	r8,-1
80007b74:	fb f8 1a 03 	st.wne	sp[0xc],r8
80007b78:	0a 9b       	mov	r11,r5
80007b7a:	58 0e       	cp.w	lr,0
80007b7c:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80007b80:	f7 bc 01 fe 	subne	r12,-2
80007b84:	fb fc 1a 03 	st.wne	sp[0xc],r12
80007b88:	e2 1b 00 84 	andl	r11,0x84,COH
80007b8c:	50 fe       	stdsp	sp[0x3c],lr
80007b8e:	50 9b       	stdsp	sp[0x24],r11
80007b90:	c4 51       	brne	80007c1a <_vfprintf_r+0x173e>
80007b92:	40 8a       	lddsp	r10,sp[0x20]
80007b94:	40 39       	lddsp	r9,sp[0xc]
80007b96:	12 1a       	sub	r10,r9
80007b98:	50 4a       	stdsp	sp[0x10],r10
80007b9a:	58 0a       	cp.w	r10,0
80007b9c:	e0 89 00 1f 	brgt	80007bda <_vfprintf_r+0x16fe>
80007ba0:	c3 d8       	rjmp	80007c1a <_vfprintf_r+0x173e>
80007ba2:	2f 09       	sub	r9,-16
80007ba4:	2f f8       	sub	r8,-1
80007ba6:	4c ee       	lddpc	lr,80007cdc <_vfprintf_r+0x1800>
80007ba8:	31 0c       	mov	r12,16
80007baa:	fb 49 06 90 	st.w	sp[1680],r9
80007bae:	87 0e       	st.w	r3[0x0],lr
80007bb0:	87 1c       	st.w	r3[0x4],r12
80007bb2:	fb 48 06 8c 	st.w	sp[1676],r8
80007bb6:	58 78       	cp.w	r8,7
80007bb8:	e0 89 00 04 	brgt	80007bc0 <_vfprintf_r+0x16e4>
80007bbc:	2f 83       	sub	r3,-8
80007bbe:	c0 b8       	rjmp	80007bd4 <_vfprintf_r+0x16f8>
80007bc0:	fa ca f9 78 	sub	r10,sp,-1672
80007bc4:	02 9b       	mov	r11,r1
80007bc6:	08 9c       	mov	r12,r4
80007bc8:	fe b0 f4 7c 	rcall	800064c0 <__sprint_r>
80007bcc:	e0 81 04 13 	brne	800083f2 <_vfprintf_r+0x1f16>
80007bd0:	fa c3 f9 e0 	sub	r3,sp,-1568
80007bd4:	40 4b       	lddsp	r11,sp[0x10]
80007bd6:	21 0b       	sub	r11,16
80007bd8:	50 4b       	stdsp	sp[0x10],r11
80007bda:	fa f9 06 90 	ld.w	r9,sp[1680]
80007bde:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007be2:	4b fa       	lddpc	r10,80007cdc <_vfprintf_r+0x1800>
80007be4:	40 4e       	lddsp	lr,sp[0x10]
80007be6:	59 0e       	cp.w	lr,16
80007be8:	fe 99 ff dd 	brgt	80007ba2 <_vfprintf_r+0x16c6>
80007bec:	1c 09       	add	r9,lr
80007bee:	2f f8       	sub	r8,-1
80007bf0:	87 0a       	st.w	r3[0x0],r10
80007bf2:	fb 49 06 90 	st.w	sp[1680],r9
80007bf6:	87 1e       	st.w	r3[0x4],lr
80007bf8:	fb 48 06 8c 	st.w	sp[1676],r8
80007bfc:	58 78       	cp.w	r8,7
80007bfe:	e0 89 00 04 	brgt	80007c06 <_vfprintf_r+0x172a>
80007c02:	2f 83       	sub	r3,-8
80007c04:	c0 b8       	rjmp	80007c1a <_vfprintf_r+0x173e>
80007c06:	fa ca f9 78 	sub	r10,sp,-1672
80007c0a:	02 9b       	mov	r11,r1
80007c0c:	08 9c       	mov	r12,r4
80007c0e:	fe b0 f4 59 	rcall	800064c0 <__sprint_r>
80007c12:	e0 81 03 f0 	brne	800083f2 <_vfprintf_r+0x1f16>
80007c16:	fa c3 f9 e0 	sub	r3,sp,-1568
80007c1a:	30 09       	mov	r9,0
80007c1c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80007c20:	f2 08 18 00 	cp.b	r8,r9
80007c24:	c1 f0       	breq	80007c62 <_vfprintf_r+0x1786>
80007c26:	fa f8 06 90 	ld.w	r8,sp[1680]
80007c2a:	fa c9 f9 45 	sub	r9,sp,-1723
80007c2e:	2f f8       	sub	r8,-1
80007c30:	87 09       	st.w	r3[0x0],r9
80007c32:	fb 48 06 90 	st.w	sp[1680],r8
80007c36:	30 19       	mov	r9,1
80007c38:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007c3c:	87 19       	st.w	r3[0x4],r9
80007c3e:	2f f8       	sub	r8,-1
80007c40:	fb 48 06 8c 	st.w	sp[1676],r8
80007c44:	58 78       	cp.w	r8,7
80007c46:	e0 89 00 04 	brgt	80007c4e <_vfprintf_r+0x1772>
80007c4a:	2f 83       	sub	r3,-8
80007c4c:	c0 b8       	rjmp	80007c62 <_vfprintf_r+0x1786>
80007c4e:	fa ca f9 78 	sub	r10,sp,-1672
80007c52:	02 9b       	mov	r11,r1
80007c54:	08 9c       	mov	r12,r4
80007c56:	fe b0 f4 35 	rcall	800064c0 <__sprint_r>
80007c5a:	e0 81 03 cc 	brne	800083f2 <_vfprintf_r+0x1f16>
80007c5e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007c62:	40 fc       	lddsp	r12,sp[0x3c]
80007c64:	58 0c       	cp.w	r12,0
80007c66:	c1 f0       	breq	80007ca4 <_vfprintf_r+0x17c8>
80007c68:	fa f8 06 90 	ld.w	r8,sp[1680]
80007c6c:	fa c9 f9 48 	sub	r9,sp,-1720
80007c70:	2f e8       	sub	r8,-2
80007c72:	87 09       	st.w	r3[0x0],r9
80007c74:	fb 48 06 90 	st.w	sp[1680],r8
80007c78:	30 29       	mov	r9,2
80007c7a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007c7e:	87 19       	st.w	r3[0x4],r9
80007c80:	2f f8       	sub	r8,-1
80007c82:	fb 48 06 8c 	st.w	sp[1676],r8
80007c86:	58 78       	cp.w	r8,7
80007c88:	e0 89 00 04 	brgt	80007c90 <_vfprintf_r+0x17b4>
80007c8c:	2f 83       	sub	r3,-8
80007c8e:	c0 b8       	rjmp	80007ca4 <_vfprintf_r+0x17c8>
80007c90:	fa ca f9 78 	sub	r10,sp,-1672
80007c94:	02 9b       	mov	r11,r1
80007c96:	08 9c       	mov	r12,r4
80007c98:	fe b0 f4 14 	rcall	800064c0 <__sprint_r>
80007c9c:	e0 81 03 ab 	brne	800083f2 <_vfprintf_r+0x1f16>
80007ca0:	fa c3 f9 e0 	sub	r3,sp,-1568
80007ca4:	40 9b       	lddsp	r11,sp[0x24]
80007ca6:	e0 4b 00 80 	cp.w	r11,128
80007caa:	c4 a1       	brne	80007d3e <_vfprintf_r+0x1862>
80007cac:	40 8a       	lddsp	r10,sp[0x20]
80007cae:	40 39       	lddsp	r9,sp[0xc]
80007cb0:	12 1a       	sub	r10,r9
80007cb2:	50 4a       	stdsp	sp[0x10],r10
80007cb4:	58 0a       	cp.w	r10,0
80007cb6:	e0 89 00 24 	brgt	80007cfe <_vfprintf_r+0x1822>
80007cba:	c4 28       	rjmp	80007d3e <_vfprintf_r+0x1862>
80007cbc:	2f 09       	sub	r9,-16
80007cbe:	2f f8       	sub	r8,-1
80007cc0:	48 8e       	lddpc	lr,80007ce0 <_vfprintf_r+0x1804>
80007cc2:	31 0c       	mov	r12,16
80007cc4:	fb 49 06 90 	st.w	sp[1680],r9
80007cc8:	87 0e       	st.w	r3[0x0],lr
80007cca:	87 1c       	st.w	r3[0x4],r12
80007ccc:	fb 48 06 8c 	st.w	sp[1676],r8
80007cd0:	58 78       	cp.w	r8,7
80007cd2:	e0 89 00 09 	brgt	80007ce4 <_vfprintf_r+0x1808>
80007cd6:	2f 83       	sub	r3,-8
80007cd8:	c1 08       	rjmp	80007cf8 <_vfprintf_r+0x181c>
80007cda:	d7 03       	nop
80007cdc:	80 00       	ld.sh	r0,r0[0x0]
80007cde:	ca 58       	rjmp	80007e28 <_vfprintf_r+0x194c>
80007ce0:	80 00       	ld.sh	r0,r0[0x0]
80007ce2:	ca 68       	rjmp	80007e2e <_vfprintf_r+0x1952>
80007ce4:	fa ca f9 78 	sub	r10,sp,-1672
80007ce8:	02 9b       	mov	r11,r1
80007cea:	08 9c       	mov	r12,r4
80007cec:	fe b0 f3 ea 	rcall	800064c0 <__sprint_r>
80007cf0:	e0 81 03 81 	brne	800083f2 <_vfprintf_r+0x1f16>
80007cf4:	fa c3 f9 e0 	sub	r3,sp,-1568
80007cf8:	40 4b       	lddsp	r11,sp[0x10]
80007cfa:	21 0b       	sub	r11,16
80007cfc:	50 4b       	stdsp	sp[0x10],r11
80007cfe:	fa f9 06 90 	ld.w	r9,sp[1680]
80007d02:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007d06:	4c 6a       	lddpc	r10,80007e1c <_vfprintf_r+0x1940>
80007d08:	40 4e       	lddsp	lr,sp[0x10]
80007d0a:	59 0e       	cp.w	lr,16
80007d0c:	fe 99 ff d8 	brgt	80007cbc <_vfprintf_r+0x17e0>
80007d10:	1c 09       	add	r9,lr
80007d12:	2f f8       	sub	r8,-1
80007d14:	87 0a       	st.w	r3[0x0],r10
80007d16:	fb 49 06 90 	st.w	sp[1680],r9
80007d1a:	87 1e       	st.w	r3[0x4],lr
80007d1c:	fb 48 06 8c 	st.w	sp[1676],r8
80007d20:	58 78       	cp.w	r8,7
80007d22:	e0 89 00 04 	brgt	80007d2a <_vfprintf_r+0x184e>
80007d26:	2f 83       	sub	r3,-8
80007d28:	c0 b8       	rjmp	80007d3e <_vfprintf_r+0x1862>
80007d2a:	fa ca f9 78 	sub	r10,sp,-1672
80007d2e:	02 9b       	mov	r11,r1
80007d30:	08 9c       	mov	r12,r4
80007d32:	fe b0 f3 c7 	rcall	800064c0 <__sprint_r>
80007d36:	e0 81 03 5e 	brne	800083f2 <_vfprintf_r+0x1f16>
80007d3a:	fa c3 f9 e0 	sub	r3,sp,-1568
80007d3e:	40 2c       	lddsp	r12,sp[0x8]
80007d40:	04 1c       	sub	r12,r2
80007d42:	50 2c       	stdsp	sp[0x8],r12
80007d44:	58 0c       	cp.w	r12,0
80007d46:	e0 89 00 1f 	brgt	80007d84 <_vfprintf_r+0x18a8>
80007d4a:	c3 d8       	rjmp	80007dc4 <_vfprintf_r+0x18e8>
80007d4c:	2f 09       	sub	r9,-16
80007d4e:	2f f8       	sub	r8,-1
80007d50:	4b 3b       	lddpc	r11,80007e1c <_vfprintf_r+0x1940>
80007d52:	31 0a       	mov	r10,16
80007d54:	fb 49 06 90 	st.w	sp[1680],r9
80007d58:	87 0b       	st.w	r3[0x0],r11
80007d5a:	87 1a       	st.w	r3[0x4],r10
80007d5c:	fb 48 06 8c 	st.w	sp[1676],r8
80007d60:	58 78       	cp.w	r8,7
80007d62:	e0 89 00 04 	brgt	80007d6a <_vfprintf_r+0x188e>
80007d66:	2f 83       	sub	r3,-8
80007d68:	c0 b8       	rjmp	80007d7e <_vfprintf_r+0x18a2>
80007d6a:	fa ca f9 78 	sub	r10,sp,-1672
80007d6e:	02 9b       	mov	r11,r1
80007d70:	08 9c       	mov	r12,r4
80007d72:	fe b0 f3 a7 	rcall	800064c0 <__sprint_r>
80007d76:	e0 81 03 3e 	brne	800083f2 <_vfprintf_r+0x1f16>
80007d7a:	fa c3 f9 e0 	sub	r3,sp,-1568
80007d7e:	40 29       	lddsp	r9,sp[0x8]
80007d80:	21 09       	sub	r9,16
80007d82:	50 29       	stdsp	sp[0x8],r9
80007d84:	fa f9 06 90 	ld.w	r9,sp[1680]
80007d88:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007d8c:	4a 4a       	lddpc	r10,80007e1c <_vfprintf_r+0x1940>
80007d8e:	40 2e       	lddsp	lr,sp[0x8]
80007d90:	59 0e       	cp.w	lr,16
80007d92:	fe 99 ff dd 	brgt	80007d4c <_vfprintf_r+0x1870>
80007d96:	1c 09       	add	r9,lr
80007d98:	2f f8       	sub	r8,-1
80007d9a:	87 0a       	st.w	r3[0x0],r10
80007d9c:	fb 49 06 90 	st.w	sp[1680],r9
80007da0:	87 1e       	st.w	r3[0x4],lr
80007da2:	fb 48 06 8c 	st.w	sp[1676],r8
80007da6:	58 78       	cp.w	r8,7
80007da8:	e0 89 00 04 	brgt	80007db0 <_vfprintf_r+0x18d4>
80007dac:	2f 83       	sub	r3,-8
80007dae:	c0 b8       	rjmp	80007dc4 <_vfprintf_r+0x18e8>
80007db0:	fa ca f9 78 	sub	r10,sp,-1672
80007db4:	02 9b       	mov	r11,r1
80007db6:	08 9c       	mov	r12,r4
80007db8:	fe b0 f3 84 	rcall	800064c0 <__sprint_r>
80007dbc:	e0 81 03 1b 	brne	800083f2 <_vfprintf_r+0x1f16>
80007dc0:	fa c3 f9 e0 	sub	r3,sp,-1568
80007dc4:	ed b5 00 08 	bld	r5,0x8
80007dc8:	c0 b0       	breq	80007dde <_vfprintf_r+0x1902>
80007dca:	fa f8 06 90 	ld.w	r8,sp[1680]
80007dce:	87 12       	st.w	r3[0x4],r2
80007dd0:	87 06       	st.w	r3[0x0],r6
80007dd2:	f0 02 00 02 	add	r2,r8,r2
80007dd6:	fb 42 06 90 	st.w	sp[1680],r2
80007dda:	e0 8f 01 d5 	bral	80008184 <_vfprintf_r+0x1ca8>
80007dde:	e0 40 00 65 	cp.w	r0,101
80007de2:	e0 8a 01 d7 	brle	80008190 <_vfprintf_r+0x1cb4>
80007de6:	30 08       	mov	r8,0
80007de8:	30 09       	mov	r9,0
80007dea:	40 5b       	lddsp	r11,sp[0x14]
80007dec:	40 7a       	lddsp	r10,sp[0x1c]
80007dee:	e0 a0 1a 1c 	rcall	8000b226 <__avr32_f64_cmp_eq>
80007df2:	c7 a0       	breq	80007ee6 <_vfprintf_r+0x1a0a>
80007df4:	fa f8 06 90 	ld.w	r8,sp[1680]
80007df8:	48 a9       	lddpc	r9,80007e20 <_vfprintf_r+0x1944>
80007dfa:	2f f8       	sub	r8,-1
80007dfc:	87 09       	st.w	r3[0x0],r9
80007dfe:	fb 48 06 90 	st.w	sp[1680],r8
80007e02:	30 19       	mov	r9,1
80007e04:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007e08:	87 19       	st.w	r3[0x4],r9
80007e0a:	2f f8       	sub	r8,-1
80007e0c:	fb 48 06 8c 	st.w	sp[1676],r8
80007e10:	58 78       	cp.w	r8,7
80007e12:	e0 89 00 09 	brgt	80007e24 <_vfprintf_r+0x1948>
80007e16:	2f 83       	sub	r3,-8
80007e18:	c1 08       	rjmp	80007e38 <_vfprintf_r+0x195c>
80007e1a:	d7 03       	nop
80007e1c:	80 00       	ld.sh	r0,r0[0x0]
80007e1e:	ca 68       	rjmp	80007f6a <_vfprintf_r+0x1a8e>
80007e20:	80 00       	ld.sh	r0,r0[0x0]
80007e22:	ca 54       	brge	80007d6c <_vfprintf_r+0x1890>
80007e24:	fa ca f9 78 	sub	r10,sp,-1672
80007e28:	02 9b       	mov	r11,r1
80007e2a:	08 9c       	mov	r12,r4
80007e2c:	fe b0 f3 4a 	rcall	800064c0 <__sprint_r>
80007e30:	e0 81 02 e1 	brne	800083f2 <_vfprintf_r+0x1f16>
80007e34:	fa c3 f9 e0 	sub	r3,sp,-1568
80007e38:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007e3c:	40 6c       	lddsp	r12,sp[0x18]
80007e3e:	18 38       	cp.w	r8,r12
80007e40:	c0 55       	brlt	80007e4a <_vfprintf_r+0x196e>
80007e42:	ed b5 00 00 	bld	r5,0x0
80007e46:	e0 81 02 69 	brne	80008318 <_vfprintf_r+0x1e3c>
80007e4a:	fa f8 06 90 	ld.w	r8,sp[1680]
80007e4e:	2f f8       	sub	r8,-1
80007e50:	40 cb       	lddsp	r11,sp[0x30]
80007e52:	fb 48 06 90 	st.w	sp[1680],r8
80007e56:	30 19       	mov	r9,1
80007e58:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007e5c:	87 0b       	st.w	r3[0x0],r11
80007e5e:	2f f8       	sub	r8,-1
80007e60:	87 19       	st.w	r3[0x4],r9
80007e62:	fb 48 06 8c 	st.w	sp[1676],r8
80007e66:	58 78       	cp.w	r8,7
80007e68:	e0 89 00 04 	brgt	80007e70 <_vfprintf_r+0x1994>
80007e6c:	2f 83       	sub	r3,-8
80007e6e:	c0 b8       	rjmp	80007e84 <_vfprintf_r+0x19a8>
80007e70:	fa ca f9 78 	sub	r10,sp,-1672
80007e74:	02 9b       	mov	r11,r1
80007e76:	08 9c       	mov	r12,r4
80007e78:	fe b0 f3 24 	rcall	800064c0 <__sprint_r>
80007e7c:	e0 81 02 bb 	brne	800083f2 <_vfprintf_r+0x1f16>
80007e80:	fa c3 f9 e0 	sub	r3,sp,-1568
80007e84:	40 66       	lddsp	r6,sp[0x18]
80007e86:	20 16       	sub	r6,1
80007e88:	58 06       	cp.w	r6,0
80007e8a:	e0 89 00 1d 	brgt	80007ec4 <_vfprintf_r+0x19e8>
80007e8e:	e0 8f 02 45 	bral	80008318 <_vfprintf_r+0x1e3c>
80007e92:	2f 09       	sub	r9,-16
80007e94:	2f f8       	sub	r8,-1
80007e96:	fb 49 06 90 	st.w	sp[1680],r9
80007e9a:	87 02       	st.w	r3[0x0],r2
80007e9c:	87 10       	st.w	r3[0x4],r0
80007e9e:	fb 48 06 8c 	st.w	sp[1676],r8
80007ea2:	58 78       	cp.w	r8,7
80007ea4:	e0 89 00 04 	brgt	80007eac <_vfprintf_r+0x19d0>
80007ea8:	2f 83       	sub	r3,-8
80007eaa:	c0 b8       	rjmp	80007ec0 <_vfprintf_r+0x19e4>
80007eac:	fa ca f9 78 	sub	r10,sp,-1672
80007eb0:	02 9b       	mov	r11,r1
80007eb2:	08 9c       	mov	r12,r4
80007eb4:	fe b0 f3 06 	rcall	800064c0 <__sprint_r>
80007eb8:	e0 81 02 9d 	brne	800083f2 <_vfprintf_r+0x1f16>
80007ebc:	fa c3 f9 e0 	sub	r3,sp,-1568
80007ec0:	21 06       	sub	r6,16
80007ec2:	c0 38       	rjmp	80007ec8 <_vfprintf_r+0x19ec>
80007ec4:	4d 22       	lddpc	r2,8000800c <_vfprintf_r+0x1b30>
80007ec6:	31 00       	mov	r0,16
80007ec8:	fa f9 06 90 	ld.w	r9,sp[1680]
80007ecc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007ed0:	4c fa       	lddpc	r10,8000800c <_vfprintf_r+0x1b30>
80007ed2:	59 06       	cp.w	r6,16
80007ed4:	fe 99 ff df 	brgt	80007e92 <_vfprintf_r+0x19b6>
80007ed8:	0c 09       	add	r9,r6
80007eda:	87 0a       	st.w	r3[0x0],r10
80007edc:	fb 49 06 90 	st.w	sp[1680],r9
80007ee0:	2f f8       	sub	r8,-1
80007ee2:	87 16       	st.w	r3[0x4],r6
80007ee4:	c5 39       	rjmp	8000818a <_vfprintf_r+0x1cae>
80007ee6:	fa fa 06 ac 	ld.w	r10,sp[1708]
80007eea:	58 0a       	cp.w	r10,0
80007eec:	e0 89 00 94 	brgt	80008014 <_vfprintf_r+0x1b38>
80007ef0:	fa f8 06 90 	ld.w	r8,sp[1680]
80007ef4:	4c 79       	lddpc	r9,80008010 <_vfprintf_r+0x1b34>
80007ef6:	2f f8       	sub	r8,-1
80007ef8:	87 09       	st.w	r3[0x0],r9
80007efa:	fb 48 06 90 	st.w	sp[1680],r8
80007efe:	30 19       	mov	r9,1
80007f00:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007f04:	87 19       	st.w	r3[0x4],r9
80007f06:	2f f8       	sub	r8,-1
80007f08:	fb 48 06 8c 	st.w	sp[1676],r8
80007f0c:	58 78       	cp.w	r8,7
80007f0e:	e0 89 00 04 	brgt	80007f16 <_vfprintf_r+0x1a3a>
80007f12:	2f 83       	sub	r3,-8
80007f14:	c0 b8       	rjmp	80007f2a <_vfprintf_r+0x1a4e>
80007f16:	fa ca f9 78 	sub	r10,sp,-1672
80007f1a:	02 9b       	mov	r11,r1
80007f1c:	08 9c       	mov	r12,r4
80007f1e:	fe b0 f2 d1 	rcall	800064c0 <__sprint_r>
80007f22:	e0 81 02 68 	brne	800083f2 <_vfprintf_r+0x1f16>
80007f26:	fa c3 f9 e0 	sub	r3,sp,-1568
80007f2a:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007f2e:	58 08       	cp.w	r8,0
80007f30:	c0 81       	brne	80007f40 <_vfprintf_r+0x1a64>
80007f32:	40 6a       	lddsp	r10,sp[0x18]
80007f34:	58 0a       	cp.w	r10,0
80007f36:	c0 51       	brne	80007f40 <_vfprintf_r+0x1a64>
80007f38:	ed b5 00 00 	bld	r5,0x0
80007f3c:	e0 81 01 ee 	brne	80008318 <_vfprintf_r+0x1e3c>
80007f40:	40 c9       	lddsp	r9,sp[0x30]
80007f42:	fa f8 06 90 	ld.w	r8,sp[1680]
80007f46:	2f f8       	sub	r8,-1
80007f48:	87 09       	st.w	r3[0x0],r9
80007f4a:	fb 48 06 90 	st.w	sp[1680],r8
80007f4e:	30 19       	mov	r9,1
80007f50:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007f54:	87 19       	st.w	r3[0x4],r9
80007f56:	2f f8       	sub	r8,-1
80007f58:	fb 48 06 8c 	st.w	sp[1676],r8
80007f5c:	58 78       	cp.w	r8,7
80007f5e:	e0 89 00 04 	brgt	80007f66 <_vfprintf_r+0x1a8a>
80007f62:	2f 83       	sub	r3,-8
80007f64:	c0 b8       	rjmp	80007f7a <_vfprintf_r+0x1a9e>
80007f66:	fa ca f9 78 	sub	r10,sp,-1672
80007f6a:	02 9b       	mov	r11,r1
80007f6c:	08 9c       	mov	r12,r4
80007f6e:	fe b0 f2 a9 	rcall	800064c0 <__sprint_r>
80007f72:	e0 81 02 40 	brne	800083f2 <_vfprintf_r+0x1f16>
80007f76:	fa c3 f9 e0 	sub	r3,sp,-1568
80007f7a:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007f7e:	5c 32       	neg	r2
80007f80:	58 02       	cp.w	r2,0
80007f82:	e0 89 00 1d 	brgt	80007fbc <_vfprintf_r+0x1ae0>
80007f86:	c3 b8       	rjmp	80007ffc <_vfprintf_r+0x1b20>
80007f88:	2f 09       	sub	r9,-16
80007f8a:	2f f8       	sub	r8,-1
80007f8c:	31 0e       	mov	lr,16
80007f8e:	fb 49 06 90 	st.w	sp[1680],r9
80007f92:	87 00       	st.w	r3[0x0],r0
80007f94:	87 1e       	st.w	r3[0x4],lr
80007f96:	fb 48 06 8c 	st.w	sp[1676],r8
80007f9a:	58 78       	cp.w	r8,7
80007f9c:	e0 89 00 04 	brgt	80007fa4 <_vfprintf_r+0x1ac8>
80007fa0:	2f 83       	sub	r3,-8
80007fa2:	c0 b8       	rjmp	80007fb8 <_vfprintf_r+0x1adc>
80007fa4:	fa ca f9 78 	sub	r10,sp,-1672
80007fa8:	02 9b       	mov	r11,r1
80007faa:	08 9c       	mov	r12,r4
80007fac:	fe b0 f2 8a 	rcall	800064c0 <__sprint_r>
80007fb0:	e0 81 02 21 	brne	800083f2 <_vfprintf_r+0x1f16>
80007fb4:	fa c3 f9 e0 	sub	r3,sp,-1568
80007fb8:	21 02       	sub	r2,16
80007fba:	c0 28       	rjmp	80007fbe <_vfprintf_r+0x1ae2>
80007fbc:	49 40       	lddpc	r0,8000800c <_vfprintf_r+0x1b30>
80007fbe:	fa f9 06 90 	ld.w	r9,sp[1680]
80007fc2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007fc6:	49 2a       	lddpc	r10,8000800c <_vfprintf_r+0x1b30>
80007fc8:	59 02       	cp.w	r2,16
80007fca:	fe 99 ff df 	brgt	80007f88 <_vfprintf_r+0x1aac>
80007fce:	04 09       	add	r9,r2
80007fd0:	2f f8       	sub	r8,-1
80007fd2:	87 0a       	st.w	r3[0x0],r10
80007fd4:	fb 49 06 90 	st.w	sp[1680],r9
80007fd8:	87 12       	st.w	r3[0x4],r2
80007fda:	fb 48 06 8c 	st.w	sp[1676],r8
80007fde:	58 78       	cp.w	r8,7
80007fe0:	e0 89 00 04 	brgt	80007fe8 <_vfprintf_r+0x1b0c>
80007fe4:	2f 83       	sub	r3,-8
80007fe6:	c0 b8       	rjmp	80007ffc <_vfprintf_r+0x1b20>
80007fe8:	fa ca f9 78 	sub	r10,sp,-1672
80007fec:	02 9b       	mov	r11,r1
80007fee:	08 9c       	mov	r12,r4
80007ff0:	fe b0 f2 68 	rcall	800064c0 <__sprint_r>
80007ff4:	e0 81 01 ff 	brne	800083f2 <_vfprintf_r+0x1f16>
80007ff8:	fa c3 f9 e0 	sub	r3,sp,-1568
80007ffc:	40 6c       	lddsp	r12,sp[0x18]
80007ffe:	fa f8 06 90 	ld.w	r8,sp[1680]
80008002:	87 06       	st.w	r3[0x0],r6
80008004:	87 1c       	st.w	r3[0x4],r12
80008006:	18 08       	add	r8,r12
80008008:	cb c8       	rjmp	80008180 <_vfprintf_r+0x1ca4>
8000800a:	d7 03       	nop
8000800c:	80 00       	ld.sh	r0,r0[0x0]
8000800e:	ca 68       	rjmp	8000815a <_vfprintf_r+0x1c7e>
80008010:	80 00       	ld.sh	r0,r0[0x0]
80008012:	ca 54       	brge	80007f5c <_vfprintf_r+0x1a80>
80008014:	fa f9 06 90 	ld.w	r9,sp[1680]
80008018:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000801c:	40 6b       	lddsp	r11,sp[0x18]
8000801e:	16 3a       	cp.w	r10,r11
80008020:	c6 d5       	brlt	800080fa <_vfprintf_r+0x1c1e>
80008022:	16 09       	add	r9,r11
80008024:	2f f8       	sub	r8,-1
80008026:	87 06       	st.w	r3[0x0],r6
80008028:	fb 49 06 90 	st.w	sp[1680],r9
8000802c:	87 1b       	st.w	r3[0x4],r11
8000802e:	fb 48 06 8c 	st.w	sp[1676],r8
80008032:	58 78       	cp.w	r8,7
80008034:	e0 89 00 04 	brgt	8000803c <_vfprintf_r+0x1b60>
80008038:	2f 83       	sub	r3,-8
8000803a:	c0 b8       	rjmp	80008050 <_vfprintf_r+0x1b74>
8000803c:	fa ca f9 78 	sub	r10,sp,-1672
80008040:	02 9b       	mov	r11,r1
80008042:	08 9c       	mov	r12,r4
80008044:	fe b0 f2 3e 	rcall	800064c0 <__sprint_r>
80008048:	e0 81 01 d5 	brne	800083f2 <_vfprintf_r+0x1f16>
8000804c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008050:	fa f6 06 ac 	ld.w	r6,sp[1708]
80008054:	40 6a       	lddsp	r10,sp[0x18]
80008056:	14 16       	sub	r6,r10
80008058:	58 06       	cp.w	r6,0
8000805a:	e0 89 00 1c 	brgt	80008092 <_vfprintf_r+0x1bb6>
8000805e:	c3 b8       	rjmp	800080d4 <_vfprintf_r+0x1bf8>
80008060:	2f 09       	sub	r9,-16
80008062:	2f f8       	sub	r8,-1
80008064:	fb 49 06 90 	st.w	sp[1680],r9
80008068:	87 02       	st.w	r3[0x0],r2
8000806a:	87 10       	st.w	r3[0x4],r0
8000806c:	fb 48 06 8c 	st.w	sp[1676],r8
80008070:	58 78       	cp.w	r8,7
80008072:	e0 89 00 04 	brgt	8000807a <_vfprintf_r+0x1b9e>
80008076:	2f 83       	sub	r3,-8
80008078:	c0 b8       	rjmp	8000808e <_vfprintf_r+0x1bb2>
8000807a:	fa ca f9 78 	sub	r10,sp,-1672
8000807e:	02 9b       	mov	r11,r1
80008080:	08 9c       	mov	r12,r4
80008082:	fe b0 f2 1f 	rcall	800064c0 <__sprint_r>
80008086:	e0 81 01 b6 	brne	800083f2 <_vfprintf_r+0x1f16>
8000808a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000808e:	21 06       	sub	r6,16
80008090:	c0 38       	rjmp	80008096 <_vfprintf_r+0x1bba>
80008092:	4d c2       	lddpc	r2,80008200 <_vfprintf_r+0x1d24>
80008094:	31 00       	mov	r0,16
80008096:	fa f9 06 90 	ld.w	r9,sp[1680]
8000809a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000809e:	4d 9a       	lddpc	r10,80008200 <_vfprintf_r+0x1d24>
800080a0:	59 06       	cp.w	r6,16
800080a2:	fe 99 ff df 	brgt	80008060 <_vfprintf_r+0x1b84>
800080a6:	0c 09       	add	r9,r6
800080a8:	2f f8       	sub	r8,-1
800080aa:	87 0a       	st.w	r3[0x0],r10
800080ac:	fb 49 06 90 	st.w	sp[1680],r9
800080b0:	87 16       	st.w	r3[0x4],r6
800080b2:	fb 48 06 8c 	st.w	sp[1676],r8
800080b6:	58 78       	cp.w	r8,7
800080b8:	e0 89 00 04 	brgt	800080c0 <_vfprintf_r+0x1be4>
800080bc:	2f 83       	sub	r3,-8
800080be:	c0 b8       	rjmp	800080d4 <_vfprintf_r+0x1bf8>
800080c0:	fa ca f9 78 	sub	r10,sp,-1672
800080c4:	02 9b       	mov	r11,r1
800080c6:	08 9c       	mov	r12,r4
800080c8:	fe b0 f1 fc 	rcall	800064c0 <__sprint_r>
800080cc:	e0 81 01 93 	brne	800083f2 <_vfprintf_r+0x1f16>
800080d0:	fa c3 f9 e0 	sub	r3,sp,-1568
800080d4:	ed b5 00 00 	bld	r5,0x0
800080d8:	e0 81 01 20 	brne	80008318 <_vfprintf_r+0x1e3c>
800080dc:	40 c9       	lddsp	r9,sp[0x30]
800080de:	fa f8 06 90 	ld.w	r8,sp[1680]
800080e2:	2f f8       	sub	r8,-1
800080e4:	87 09       	st.w	r3[0x0],r9
800080e6:	fb 48 06 90 	st.w	sp[1680],r8
800080ea:	30 19       	mov	r9,1
800080ec:	fa f8 06 8c 	ld.w	r8,sp[1676]
800080f0:	87 19       	st.w	r3[0x4],r9
800080f2:	2f f8       	sub	r8,-1
800080f4:	fb 48 06 8c 	st.w	sp[1676],r8
800080f8:	c0 29       	rjmp	800082fc <_vfprintf_r+0x1e20>
800080fa:	14 09       	add	r9,r10
800080fc:	2f f8       	sub	r8,-1
800080fe:	fb 49 06 90 	st.w	sp[1680],r9
80008102:	87 06       	st.w	r3[0x0],r6
80008104:	87 1a       	st.w	r3[0x4],r10
80008106:	fb 48 06 8c 	st.w	sp[1676],r8
8000810a:	58 78       	cp.w	r8,7
8000810c:	e0 89 00 04 	brgt	80008114 <_vfprintf_r+0x1c38>
80008110:	2f 83       	sub	r3,-8
80008112:	c0 b8       	rjmp	80008128 <_vfprintf_r+0x1c4c>
80008114:	fa ca f9 78 	sub	r10,sp,-1672
80008118:	02 9b       	mov	r11,r1
8000811a:	08 9c       	mov	r12,r4
8000811c:	fe b0 f1 d2 	rcall	800064c0 <__sprint_r>
80008120:	e0 81 01 69 	brne	800083f2 <_vfprintf_r+0x1f16>
80008124:	fa c3 f9 e0 	sub	r3,sp,-1568
80008128:	40 c8       	lddsp	r8,sp[0x30]
8000812a:	87 08       	st.w	r3[0x0],r8
8000812c:	fa f8 06 90 	ld.w	r8,sp[1680]
80008130:	2f f8       	sub	r8,-1
80008132:	30 19       	mov	r9,1
80008134:	fb 48 06 90 	st.w	sp[1680],r8
80008138:	87 19       	st.w	r3[0x4],r9
8000813a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000813e:	2f f8       	sub	r8,-1
80008140:	fb 48 06 8c 	st.w	sp[1676],r8
80008144:	fa f2 06 ac 	ld.w	r2,sp[1708]
80008148:	58 78       	cp.w	r8,7
8000814a:	e0 89 00 04 	brgt	80008152 <_vfprintf_r+0x1c76>
8000814e:	2f 83       	sub	r3,-8
80008150:	c0 b8       	rjmp	80008166 <_vfprintf_r+0x1c8a>
80008152:	fa ca f9 78 	sub	r10,sp,-1672
80008156:	02 9b       	mov	r11,r1
80008158:	08 9c       	mov	r12,r4
8000815a:	fe b0 f1 b3 	rcall	800064c0 <__sprint_r>
8000815e:	e0 81 01 4a 	brne	800083f2 <_vfprintf_r+0x1f16>
80008162:	fa c3 f9 e0 	sub	r3,sp,-1568
80008166:	04 06       	add	r6,r2
80008168:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000816c:	87 06       	st.w	r3[0x0],r6
8000816e:	fa f9 06 90 	ld.w	r9,sp[1680]
80008172:	40 66       	lddsp	r6,sp[0x18]
80008174:	40 6e       	lddsp	lr,sp[0x18]
80008176:	10 16       	sub	r6,r8
80008178:	f2 08 01 08 	sub	r8,r9,r8
8000817c:	87 16       	st.w	r3[0x4],r6
8000817e:	1c 08       	add	r8,lr
80008180:	fb 48 06 90 	st.w	sp[1680],r8
80008184:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008188:	2f f8       	sub	r8,-1
8000818a:	fb 48 06 8c 	st.w	sp[1676],r8
8000818e:	cb 78       	rjmp	800082fc <_vfprintf_r+0x1e20>
80008190:	40 6c       	lddsp	r12,sp[0x18]
80008192:	58 1c       	cp.w	r12,1
80008194:	e0 89 00 06 	brgt	800081a0 <_vfprintf_r+0x1cc4>
80008198:	ed b5 00 00 	bld	r5,0x0
8000819c:	e0 81 00 85 	brne	800082a6 <_vfprintf_r+0x1dca>
800081a0:	fa f8 06 90 	ld.w	r8,sp[1680]
800081a4:	2f f8       	sub	r8,-1
800081a6:	30 19       	mov	r9,1
800081a8:	fb 48 06 90 	st.w	sp[1680],r8
800081ac:	87 06       	st.w	r3[0x0],r6
800081ae:	fa f8 06 8c 	ld.w	r8,sp[1676]
800081b2:	87 19       	st.w	r3[0x4],r9
800081b4:	2f f8       	sub	r8,-1
800081b6:	fb 48 06 8c 	st.w	sp[1676],r8
800081ba:	58 78       	cp.w	r8,7
800081bc:	e0 89 00 04 	brgt	800081c4 <_vfprintf_r+0x1ce8>
800081c0:	2f 83       	sub	r3,-8
800081c2:	c0 b8       	rjmp	800081d8 <_vfprintf_r+0x1cfc>
800081c4:	fa ca f9 78 	sub	r10,sp,-1672
800081c8:	02 9b       	mov	r11,r1
800081ca:	08 9c       	mov	r12,r4
800081cc:	fe b0 f1 7a 	rcall	800064c0 <__sprint_r>
800081d0:	e0 81 01 11 	brne	800083f2 <_vfprintf_r+0x1f16>
800081d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800081d8:	fa f8 06 90 	ld.w	r8,sp[1680]
800081dc:	2f f8       	sub	r8,-1
800081de:	40 cb       	lddsp	r11,sp[0x30]
800081e0:	fb 48 06 90 	st.w	sp[1680],r8
800081e4:	30 19       	mov	r9,1
800081e6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800081ea:	87 0b       	st.w	r3[0x0],r11
800081ec:	2f f8       	sub	r8,-1
800081ee:	87 19       	st.w	r3[0x4],r9
800081f0:	fb 48 06 8c 	st.w	sp[1676],r8
800081f4:	58 78       	cp.w	r8,7
800081f6:	e0 89 00 07 	brgt	80008204 <_vfprintf_r+0x1d28>
800081fa:	2f 83       	sub	r3,-8
800081fc:	c0 e8       	rjmp	80008218 <_vfprintf_r+0x1d3c>
800081fe:	d7 03       	nop
80008200:	80 00       	ld.sh	r0,r0[0x0]
80008202:	ca 68       	rjmp	8000834e <_vfprintf_r+0x1e72>
80008204:	fa ca f9 78 	sub	r10,sp,-1672
80008208:	02 9b       	mov	r11,r1
8000820a:	08 9c       	mov	r12,r4
8000820c:	fe b0 f1 5a 	rcall	800064c0 <__sprint_r>
80008210:	e0 81 00 f1 	brne	800083f2 <_vfprintf_r+0x1f16>
80008214:	fa c3 f9 e0 	sub	r3,sp,-1568
80008218:	30 08       	mov	r8,0
8000821a:	30 09       	mov	r9,0
8000821c:	40 5b       	lddsp	r11,sp[0x14]
8000821e:	40 7a       	lddsp	r10,sp[0x1c]
80008220:	e0 a0 18 03 	rcall	8000b226 <__avr32_f64_cmp_eq>
80008224:	40 68       	lddsp	r8,sp[0x18]
80008226:	20 18       	sub	r8,1
80008228:	58 0c       	cp.w	r12,0
8000822a:	c0 d1       	brne	80008244 <_vfprintf_r+0x1d68>
8000822c:	2f f6       	sub	r6,-1
8000822e:	87 18       	st.w	r3[0x4],r8
80008230:	87 06       	st.w	r3[0x0],r6
80008232:	fa f6 06 90 	ld.w	r6,sp[1680]
80008236:	10 06       	add	r6,r8
80008238:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000823c:	fb 46 06 90 	st.w	sp[1680],r6
80008240:	2f f8       	sub	r8,-1
80008242:	c2 f8       	rjmp	800082a0 <_vfprintf_r+0x1dc4>
80008244:	10 96       	mov	r6,r8
80008246:	58 08       	cp.w	r8,0
80008248:	e0 89 00 1c 	brgt	80008280 <_vfprintf_r+0x1da4>
8000824c:	c4 98       	rjmp	800082de <_vfprintf_r+0x1e02>
8000824e:	2f 09       	sub	r9,-16
80008250:	2f f8       	sub	r8,-1
80008252:	fb 49 06 90 	st.w	sp[1680],r9
80008256:	87 02       	st.w	r3[0x0],r2
80008258:	87 10       	st.w	r3[0x4],r0
8000825a:	fb 48 06 8c 	st.w	sp[1676],r8
8000825e:	58 78       	cp.w	r8,7
80008260:	e0 89 00 04 	brgt	80008268 <_vfprintf_r+0x1d8c>
80008264:	2f 83       	sub	r3,-8
80008266:	c0 b8       	rjmp	8000827c <_vfprintf_r+0x1da0>
80008268:	fa ca f9 78 	sub	r10,sp,-1672
8000826c:	02 9b       	mov	r11,r1
8000826e:	08 9c       	mov	r12,r4
80008270:	fe b0 f1 28 	rcall	800064c0 <__sprint_r>
80008274:	e0 81 00 bf 	brne	800083f2 <_vfprintf_r+0x1f16>
80008278:	fa c3 f9 e0 	sub	r3,sp,-1568
8000827c:	21 06       	sub	r6,16
8000827e:	c0 38       	rjmp	80008284 <_vfprintf_r+0x1da8>
80008280:	4d 22       	lddpc	r2,800083c8 <_vfprintf_r+0x1eec>
80008282:	31 00       	mov	r0,16
80008284:	fa f9 06 90 	ld.w	r9,sp[1680]
80008288:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000828c:	4c fa       	lddpc	r10,800083c8 <_vfprintf_r+0x1eec>
8000828e:	59 06       	cp.w	r6,16
80008290:	fe 99 ff df 	brgt	8000824e <_vfprintf_r+0x1d72>
80008294:	0c 09       	add	r9,r6
80008296:	87 0a       	st.w	r3[0x0],r10
80008298:	fb 49 06 90 	st.w	sp[1680],r9
8000829c:	2f f8       	sub	r8,-1
8000829e:	87 16       	st.w	r3[0x4],r6
800082a0:	fb 48 06 8c 	st.w	sp[1676],r8
800082a4:	c0 e8       	rjmp	800082c0 <_vfprintf_r+0x1de4>
800082a6:	fa f8 06 90 	ld.w	r8,sp[1680]
800082aa:	2f f8       	sub	r8,-1
800082ac:	30 19       	mov	r9,1
800082ae:	fb 48 06 90 	st.w	sp[1680],r8
800082b2:	87 06       	st.w	r3[0x0],r6
800082b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800082b8:	87 19       	st.w	r3[0x4],r9
800082ba:	2f f8       	sub	r8,-1
800082bc:	fb 48 06 8c 	st.w	sp[1676],r8
800082c0:	58 78       	cp.w	r8,7
800082c2:	e0 89 00 04 	brgt	800082ca <_vfprintf_r+0x1dee>
800082c6:	2f 83       	sub	r3,-8
800082c8:	c0 b8       	rjmp	800082de <_vfprintf_r+0x1e02>
800082ca:	fa ca f9 78 	sub	r10,sp,-1672
800082ce:	02 9b       	mov	r11,r1
800082d0:	08 9c       	mov	r12,r4
800082d2:	fe b0 f0 f7 	rcall	800064c0 <__sprint_r>
800082d6:	e0 81 00 8e 	brne	800083f2 <_vfprintf_r+0x1f16>
800082da:	fa c3 f9 e0 	sub	r3,sp,-1568
800082de:	40 ea       	lddsp	r10,sp[0x38]
800082e0:	fa f8 06 90 	ld.w	r8,sp[1680]
800082e4:	14 08       	add	r8,r10
800082e6:	fa c9 f9 64 	sub	r9,sp,-1692
800082ea:	fb 48 06 90 	st.w	sp[1680],r8
800082ee:	87 1a       	st.w	r3[0x4],r10
800082f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800082f4:	87 09       	st.w	r3[0x0],r9
800082f6:	2f f8       	sub	r8,-1
800082f8:	fb 48 06 8c 	st.w	sp[1676],r8
800082fc:	58 78       	cp.w	r8,7
800082fe:	e0 89 00 04 	brgt	80008306 <_vfprintf_r+0x1e2a>
80008302:	2f 83       	sub	r3,-8
80008304:	c0 a8       	rjmp	80008318 <_vfprintf_r+0x1e3c>
80008306:	fa ca f9 78 	sub	r10,sp,-1672
8000830a:	02 9b       	mov	r11,r1
8000830c:	08 9c       	mov	r12,r4
8000830e:	fe b0 f0 d9 	rcall	800064c0 <__sprint_r>
80008312:	c7 01       	brne	800083f2 <_vfprintf_r+0x1f16>
80008314:	fa c3 f9 e0 	sub	r3,sp,-1568
80008318:	e2 15 00 04 	andl	r5,0x4,COH
8000831c:	c3 d0       	breq	80008396 <_vfprintf_r+0x1eba>
8000831e:	40 86       	lddsp	r6,sp[0x20]
80008320:	40 39       	lddsp	r9,sp[0xc]
80008322:	12 16       	sub	r6,r9
80008324:	58 06       	cp.w	r6,0
80008326:	e0 89 00 1a 	brgt	8000835a <_vfprintf_r+0x1e7e>
8000832a:	c3 68       	rjmp	80008396 <_vfprintf_r+0x1eba>
8000832c:	2f 09       	sub	r9,-16
8000832e:	2f f8       	sub	r8,-1
80008330:	fb 49 06 90 	st.w	sp[1680],r9
80008334:	87 05       	st.w	r3[0x0],r5
80008336:	87 12       	st.w	r3[0x4],r2
80008338:	fb 48 06 8c 	st.w	sp[1676],r8
8000833c:	58 78       	cp.w	r8,7
8000833e:	e0 89 00 04 	brgt	80008346 <_vfprintf_r+0x1e6a>
80008342:	2f 83       	sub	r3,-8
80008344:	c0 98       	rjmp	80008356 <_vfprintf_r+0x1e7a>
80008346:	00 9a       	mov	r10,r0
80008348:	02 9b       	mov	r11,r1
8000834a:	08 9c       	mov	r12,r4
8000834c:	fe b0 f0 ba 	rcall	800064c0 <__sprint_r>
80008350:	c5 11       	brne	800083f2 <_vfprintf_r+0x1f16>
80008352:	fa c3 f9 e0 	sub	r3,sp,-1568
80008356:	21 06       	sub	r6,16
80008358:	c0 58       	rjmp	80008362 <_vfprintf_r+0x1e86>
8000835a:	49 d5       	lddpc	r5,800083cc <_vfprintf_r+0x1ef0>
8000835c:	31 02       	mov	r2,16
8000835e:	fa c0 f9 78 	sub	r0,sp,-1672
80008362:	fa f9 06 90 	ld.w	r9,sp[1680]
80008366:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000836a:	49 9a       	lddpc	r10,800083cc <_vfprintf_r+0x1ef0>
8000836c:	59 06       	cp.w	r6,16
8000836e:	fe 99 ff df 	brgt	8000832c <_vfprintf_r+0x1e50>
80008372:	0c 09       	add	r9,r6
80008374:	2f f8       	sub	r8,-1
80008376:	87 0a       	st.w	r3[0x0],r10
80008378:	87 16       	st.w	r3[0x4],r6
8000837a:	fb 49 06 90 	st.w	sp[1680],r9
8000837e:	fb 48 06 8c 	st.w	sp[1676],r8
80008382:	58 78       	cp.w	r8,7
80008384:	e0 8a 00 09 	brle	80008396 <_vfprintf_r+0x1eba>
80008388:	fa ca f9 78 	sub	r10,sp,-1672
8000838c:	02 9b       	mov	r11,r1
8000838e:	08 9c       	mov	r12,r4
80008390:	fe b0 f0 98 	rcall	800064c0 <__sprint_r>
80008394:	c2 f1       	brne	800083f2 <_vfprintf_r+0x1f16>
80008396:	40 bc       	lddsp	r12,sp[0x2c]
80008398:	40 36       	lddsp	r6,sp[0xc]
8000839a:	40 8e       	lddsp	lr,sp[0x20]
8000839c:	ec 0e 0c 48 	max	r8,r6,lr
800083a0:	10 0c       	add	r12,r8
800083a2:	50 bc       	stdsp	sp[0x2c],r12
800083a4:	fa f8 06 90 	ld.w	r8,sp[1680]
800083a8:	58 08       	cp.w	r8,0
800083aa:	c0 80       	breq	800083ba <_vfprintf_r+0x1ede>
800083ac:	fa ca f9 78 	sub	r10,sp,-1672
800083b0:	02 9b       	mov	r11,r1
800083b2:	08 9c       	mov	r12,r4
800083b4:	fe b0 f0 86 	rcall	800064c0 <__sprint_r>
800083b8:	c1 d1       	brne	800083f2 <_vfprintf_r+0x1f16>
800083ba:	30 0b       	mov	r11,0
800083bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800083c0:	fb 4b 06 8c 	st.w	sp[1676],r11
800083c4:	fe 9f f1 17 	bral	800065f2 <_vfprintf_r+0x116>
800083c8:	80 00       	ld.sh	r0,r0[0x0]
800083ca:	ca 68       	rjmp	80008516 <quorem+0x32>
800083cc:	80 00       	ld.sh	r0,r0[0x0]
800083ce:	ca 58       	rjmp	80008518 <quorem+0x34>
800083d0:	08 95       	mov	r5,r4
800083d2:	fa f8 06 90 	ld.w	r8,sp[1680]
800083d6:	58 08       	cp.w	r8,0
800083d8:	c0 80       	breq	800083e8 <_vfprintf_r+0x1f0c>
800083da:	08 9c       	mov	r12,r4
800083dc:	fa ca f9 78 	sub	r10,sp,-1672
800083e0:	02 9b       	mov	r11,r1
800083e2:	fe b0 f0 6f 	rcall	800064c0 <__sprint_r>
800083e6:	c0 61       	brne	800083f2 <_vfprintf_r+0x1f16>
800083e8:	30 08       	mov	r8,0
800083ea:	fb 48 06 8c 	st.w	sp[1676],r8
800083ee:	c0 28       	rjmp	800083f2 <_vfprintf_r+0x1f16>
800083f0:	40 41       	lddsp	r1,sp[0x10]
800083f2:	82 68       	ld.sh	r8,r1[0xc]
800083f4:	ed b8 00 06 	bld	r8,0x6
800083f8:	c0 31       	brne	800083fe <_vfprintf_r+0x1f22>
800083fa:	3f fa       	mov	r10,-1
800083fc:	50 ba       	stdsp	sp[0x2c],r10
800083fe:	40 bc       	lddsp	r12,sp[0x2c]
80008400:	fe 3d f9 44 	sub	sp,-1724
80008404:	d8 32       	popm	r0-r7,pc
80008406:	d7 03       	nop

80008408 <__swsetup_r>:
80008408:	d4 21       	pushm	r4-r7,lr
8000840a:	4b 38       	lddpc	r8,800084d4 <__swsetup_r+0xcc>
8000840c:	18 96       	mov	r6,r12
8000840e:	16 97       	mov	r7,r11
80008410:	70 0c       	ld.w	r12,r8[0x0]
80008412:	58 0c       	cp.w	r12,0
80008414:	c0 60       	breq	80008420 <__swsetup_r+0x18>
80008416:	78 68       	ld.w	r8,r12[0x18]
80008418:	58 08       	cp.w	r8,0
8000841a:	c0 31       	brne	80008420 <__swsetup_r+0x18>
8000841c:	e0 a0 07 c0 	rcall	8000939c <__sinit>
80008420:	4a e8       	lddpc	r8,800084d8 <__swsetup_r+0xd0>
80008422:	10 37       	cp.w	r7,r8
80008424:	c0 51       	brne	8000842e <__swsetup_r+0x26>
80008426:	4a c8       	lddpc	r8,800084d4 <__swsetup_r+0xcc>
80008428:	70 08       	ld.w	r8,r8[0x0]
8000842a:	70 07       	ld.w	r7,r8[0x0]
8000842c:	c0 e8       	rjmp	80008448 <__swsetup_r+0x40>
8000842e:	4a c8       	lddpc	r8,800084dc <__swsetup_r+0xd4>
80008430:	10 37       	cp.w	r7,r8
80008432:	c0 51       	brne	8000843c <__swsetup_r+0x34>
80008434:	4a 88       	lddpc	r8,800084d4 <__swsetup_r+0xcc>
80008436:	70 08       	ld.w	r8,r8[0x0]
80008438:	70 17       	ld.w	r7,r8[0x4]
8000843a:	c0 78       	rjmp	80008448 <__swsetup_r+0x40>
8000843c:	4a 98       	lddpc	r8,800084e0 <__swsetup_r+0xd8>
8000843e:	10 37       	cp.w	r7,r8
80008440:	c0 41       	brne	80008448 <__swsetup_r+0x40>
80008442:	4a 58       	lddpc	r8,800084d4 <__swsetup_r+0xcc>
80008444:	70 08       	ld.w	r8,r8[0x0]
80008446:	70 27       	ld.w	r7,r8[0x8]
80008448:	8e 68       	ld.sh	r8,r7[0xc]
8000844a:	ed b8 00 03 	bld	r8,0x3
8000844e:	c1 e0       	breq	8000848a <__swsetup_r+0x82>
80008450:	ed b8 00 04 	bld	r8,0x4
80008454:	c3 e1       	brne	800084d0 <__swsetup_r+0xc8>
80008456:	ed b8 00 02 	bld	r8,0x2
8000845a:	c1 51       	brne	80008484 <__swsetup_r+0x7c>
8000845c:	6e db       	ld.w	r11,r7[0x34]
8000845e:	58 0b       	cp.w	r11,0
80008460:	c0 a0       	breq	80008474 <__swsetup_r+0x6c>
80008462:	ee c8 ff bc 	sub	r8,r7,-68
80008466:	10 3b       	cp.w	r11,r8
80008468:	c0 40       	breq	80008470 <__swsetup_r+0x68>
8000846a:	0c 9c       	mov	r12,r6
8000846c:	e0 a0 08 34 	rcall	800094d4 <_free_r>
80008470:	30 08       	mov	r8,0
80008472:	8f d8       	st.w	r7[0x34],r8
80008474:	8e 68       	ld.sh	r8,r7[0xc]
80008476:	e0 18 ff db 	andl	r8,0xffdb
8000847a:	ae 68       	st.h	r7[0xc],r8
8000847c:	30 08       	mov	r8,0
8000847e:	8f 18       	st.w	r7[0x4],r8
80008480:	6e 48       	ld.w	r8,r7[0x10]
80008482:	8f 08       	st.w	r7[0x0],r8
80008484:	8e 68       	ld.sh	r8,r7[0xc]
80008486:	a3 b8       	sbr	r8,0x3
80008488:	ae 68       	st.h	r7[0xc],r8
8000848a:	6e 48       	ld.w	r8,r7[0x10]
8000848c:	58 08       	cp.w	r8,0
8000848e:	c0 b1       	brne	800084a4 <__swsetup_r+0x9c>
80008490:	8e 68       	ld.sh	r8,r7[0xc]
80008492:	e2 18 02 80 	andl	r8,0x280,COH
80008496:	e0 48 02 00 	cp.w	r8,512
8000849a:	c0 50       	breq	800084a4 <__swsetup_r+0x9c>
8000849c:	0c 9c       	mov	r12,r6
8000849e:	0e 9b       	mov	r11,r7
800084a0:	e0 a0 0a 5c 	rcall	80009958 <__smakebuf_r>
800084a4:	8e 69       	ld.sh	r9,r7[0xc]
800084a6:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800084aa:	c0 70       	breq	800084b8 <__swsetup_r+0xb0>
800084ac:	30 08       	mov	r8,0
800084ae:	8f 28       	st.w	r7[0x8],r8
800084b0:	6e 58       	ld.w	r8,r7[0x14]
800084b2:	5c 38       	neg	r8
800084b4:	8f 68       	st.w	r7[0x18],r8
800084b6:	c0 68       	rjmp	800084c2 <__swsetup_r+0xba>
800084b8:	ed b9 00 01 	bld	r9,0x1
800084bc:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800084c0:	8f 28       	st.w	r7[0x8],r8
800084c2:	6e 48       	ld.w	r8,r7[0x10]
800084c4:	58 08       	cp.w	r8,0
800084c6:	c0 61       	brne	800084d2 <__swsetup_r+0xca>
800084c8:	8e 68       	ld.sh	r8,r7[0xc]
800084ca:	ed b8 00 07 	bld	r8,0x7
800084ce:	c0 21       	brne	800084d2 <__swsetup_r+0xca>
800084d0:	dc 2a       	popm	r4-r7,pc,r12=-1
800084d2:	d8 2a       	popm	r4-r7,pc,r12=0
800084d4:	00 00       	add	r0,r0
800084d6:	00 fc       	st.b	--r0,r12
800084d8:	80 00       	ld.sh	r0,r0[0x0]
800084da:	cb 88       	rjmp	8000864a <_dtoa_r+0x46>
800084dc:	80 00       	ld.sh	r0,r0[0x0]
800084de:	cb a8       	rjmp	80008652 <_dtoa_r+0x4e>
800084e0:	80 00       	ld.sh	r0,r0[0x0]
800084e2:	cb c8       	rjmp	8000865a <_dtoa_r+0x56>

800084e4 <quorem>:
800084e4:	d4 31       	pushm	r0-r7,lr
800084e6:	20 2d       	sub	sp,8
800084e8:	18 97       	mov	r7,r12
800084ea:	78 48       	ld.w	r8,r12[0x10]
800084ec:	76 46       	ld.w	r6,r11[0x10]
800084ee:	0c 38       	cp.w	r8,r6
800084f0:	c0 34       	brge	800084f6 <quorem+0x12>
800084f2:	30 0c       	mov	r12,0
800084f4:	c8 58       	rjmp	800085fe <quorem+0x11a>
800084f6:	ec c2 ff fc 	sub	r2,r6,-4
800084fa:	f6 c3 ff ec 	sub	r3,r11,-20
800084fe:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80008502:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80008506:	2f f9       	sub	r9,-1
80008508:	20 16       	sub	r6,1
8000850a:	f8 09 0d 08 	divu	r8,r12,r9
8000850e:	f6 02 00 22 	add	r2,r11,r2<<0x2
80008512:	ee c4 ff ec 	sub	r4,r7,-20
80008516:	10 95       	mov	r5,r8
80008518:	58 08       	cp.w	r8,0
8000851a:	c4 10       	breq	8000859c <quorem+0xb8>
8000851c:	30 09       	mov	r9,0
8000851e:	06 9a       	mov	r10,r3
80008520:	08 98       	mov	r8,r4
80008522:	12 91       	mov	r1,r9
80008524:	50 0b       	stdsp	sp[0x0],r11
80008526:	70 0e       	ld.w	lr,r8[0x0]
80008528:	b1 8e       	lsr	lr,0x10
8000852a:	50 1e       	stdsp	sp[0x4],lr
8000852c:	15 0e       	ld.w	lr,r10++
8000852e:	fc 00 16 10 	lsr	r0,lr,0x10
80008532:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008536:	ea 0e 03 41 	mac	r1,r5,lr
8000853a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000853e:	b1 81       	lsr	r1,0x10
80008540:	40 1b       	lddsp	r11,sp[0x4]
80008542:	ea 00 02 40 	mul	r0,r5,r0
80008546:	e2 00 00 00 	add	r0,r1,r0
8000854a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000854e:	02 1b       	sub	r11,r1
80008550:	50 1b       	stdsp	sp[0x4],r11
80008552:	70 0b       	ld.w	r11,r8[0x0]
80008554:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80008558:	02 09       	add	r9,r1
8000855a:	f2 0e 01 0e 	sub	lr,r9,lr
8000855e:	b0 1e       	st.h	r8[0x2],lr
80008560:	fc 09 14 10 	asr	r9,lr,0x10
80008564:	40 1e       	lddsp	lr,sp[0x4]
80008566:	fc 09 00 09 	add	r9,lr,r9
8000856a:	b0 09       	st.h	r8[0x0],r9
8000856c:	e0 01 16 10 	lsr	r1,r0,0x10
80008570:	2f c8       	sub	r8,-4
80008572:	b1 49       	asr	r9,0x10
80008574:	04 3a       	cp.w	r10,r2
80008576:	fe 98 ff d8 	brls	80008526 <quorem+0x42>
8000857a:	40 0b       	lddsp	r11,sp[0x0]
8000857c:	58 0c       	cp.w	r12,0
8000857e:	c0 f1       	brne	8000859c <quorem+0xb8>
80008580:	ec c8 ff fb 	sub	r8,r6,-5
80008584:	ee 08 00 28 	add	r8,r7,r8<<0x2
80008588:	c0 28       	rjmp	8000858c <quorem+0xa8>
8000858a:	20 16       	sub	r6,1
8000858c:	20 48       	sub	r8,4
8000858e:	08 38       	cp.w	r8,r4
80008590:	e0 88 00 05 	brls	8000859a <quorem+0xb6>
80008594:	70 09       	ld.w	r9,r8[0x0]
80008596:	58 09       	cp.w	r9,0
80008598:	cf 90       	breq	8000858a <quorem+0xa6>
8000859a:	8f 46       	st.w	r7[0x10],r6
8000859c:	0e 9c       	mov	r12,r7
8000859e:	e0 a0 0d a7 	rcall	8000a0ec <__mcmp>
800085a2:	c2 d5       	brlt	800085fc <quorem+0x118>
800085a4:	2f f5       	sub	r5,-1
800085a6:	08 98       	mov	r8,r4
800085a8:	30 09       	mov	r9,0
800085aa:	07 0b       	ld.w	r11,r3++
800085ac:	f6 0a 16 10 	lsr	r10,r11,0x10
800085b0:	70 0c       	ld.w	r12,r8[0x0]
800085b2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800085b6:	f8 0e 16 10 	lsr	lr,r12,0x10
800085ba:	14 1e       	sub	lr,r10
800085bc:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800085c0:	16 1a       	sub	r10,r11
800085c2:	12 0a       	add	r10,r9
800085c4:	b0 1a       	st.h	r8[0x2],r10
800085c6:	b1 4a       	asr	r10,0x10
800085c8:	fc 0a 00 09 	add	r9,lr,r10
800085cc:	b0 09       	st.h	r8[0x0],r9
800085ce:	2f c8       	sub	r8,-4
800085d0:	b1 49       	asr	r9,0x10
800085d2:	04 33       	cp.w	r3,r2
800085d4:	fe 98 ff eb 	brls	800085aa <quorem+0xc6>
800085d8:	ec c8 ff fb 	sub	r8,r6,-5
800085dc:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800085e0:	58 09       	cp.w	r9,0
800085e2:	c0 d1       	brne	800085fc <quorem+0x118>
800085e4:	ee 08 00 28 	add	r8,r7,r8<<0x2
800085e8:	c0 28       	rjmp	800085ec <quorem+0x108>
800085ea:	20 16       	sub	r6,1
800085ec:	20 48       	sub	r8,4
800085ee:	08 38       	cp.w	r8,r4
800085f0:	e0 88 00 05 	brls	800085fa <quorem+0x116>
800085f4:	70 09       	ld.w	r9,r8[0x0]
800085f6:	58 09       	cp.w	r9,0
800085f8:	cf 90       	breq	800085ea <quorem+0x106>
800085fa:	8f 46       	st.w	r7[0x10],r6
800085fc:	0a 9c       	mov	r12,r5
800085fe:	2f ed       	sub	sp,-8
80008600:	d8 32       	popm	r0-r7,pc
80008602:	d7 03       	nop

80008604 <_dtoa_r>:
80008604:	d4 31       	pushm	r0-r7,lr
80008606:	21 ad       	sub	sp,104
80008608:	fa c4 ff 74 	sub	r4,sp,-140
8000860c:	18 97       	mov	r7,r12
8000860e:	16 95       	mov	r5,r11
80008610:	68 2c       	ld.w	r12,r4[0x8]
80008612:	50 c9       	stdsp	sp[0x30],r9
80008614:	68 16       	ld.w	r6,r4[0x4]
80008616:	68 09       	ld.w	r9,r4[0x0]
80008618:	50 e8       	stdsp	sp[0x38],r8
8000861a:	14 94       	mov	r4,r10
8000861c:	51 2c       	stdsp	sp[0x48],r12
8000861e:	fa e5 00 08 	st.d	sp[8],r4
80008622:	51 59       	stdsp	sp[0x54],r9
80008624:	6e 95       	ld.w	r5,r7[0x24]
80008626:	58 05       	cp.w	r5,0
80008628:	c0 91       	brne	8000863a <_dtoa_r+0x36>
8000862a:	31 0c       	mov	r12,16
8000862c:	e0 a0 09 f4 	rcall	80009a14 <malloc>
80008630:	99 35       	st.w	r12[0xc],r5
80008632:	8f 9c       	st.w	r7[0x24],r12
80008634:	99 15       	st.w	r12[0x4],r5
80008636:	99 25       	st.w	r12[0x8],r5
80008638:	99 05       	st.w	r12[0x0],r5
8000863a:	6e 99       	ld.w	r9,r7[0x24]
8000863c:	72 08       	ld.w	r8,r9[0x0]
8000863e:	58 08       	cp.w	r8,0
80008640:	c0 f0       	breq	8000865e <_dtoa_r+0x5a>
80008642:	72 1a       	ld.w	r10,r9[0x4]
80008644:	91 1a       	st.w	r8[0x4],r10
80008646:	30 1a       	mov	r10,1
80008648:	72 19       	ld.w	r9,r9[0x4]
8000864a:	f4 09 09 49 	lsl	r9,r10,r9
8000864e:	10 9b       	mov	r11,r8
80008650:	91 29       	st.w	r8[0x8],r9
80008652:	0e 9c       	mov	r12,r7
80008654:	e0 a0 0d 66 	rcall	8000a120 <_Bfree>
80008658:	6e 98       	ld.w	r8,r7[0x24]
8000865a:	30 09       	mov	r9,0
8000865c:	91 09       	st.w	r8[0x0],r9
8000865e:	40 28       	lddsp	r8,sp[0x8]
80008660:	10 94       	mov	r4,r8
80008662:	58 08       	cp.w	r8,0
80008664:	c0 64       	brge	80008670 <_dtoa_r+0x6c>
80008666:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000866a:	50 28       	stdsp	sp[0x8],r8
8000866c:	30 18       	mov	r8,1
8000866e:	c0 28       	rjmp	80008672 <_dtoa_r+0x6e>
80008670:	30 08       	mov	r8,0
80008672:	8d 08       	st.w	r6[0x0],r8
80008674:	fc 1c 7f f0 	movh	r12,0x7ff0
80008678:	40 26       	lddsp	r6,sp[0x8]
8000867a:	0c 98       	mov	r8,r6
8000867c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008680:	18 38       	cp.w	r8,r12
80008682:	c1 e1       	brne	800086be <_dtoa_r+0xba>
80008684:	e0 68 27 0f 	mov	r8,9999
80008688:	41 5b       	lddsp	r11,sp[0x54]
8000868a:	97 08       	st.w	r11[0x0],r8
8000868c:	40 3a       	lddsp	r10,sp[0xc]
8000868e:	58 0a       	cp.w	r10,0
80008690:	c0 61       	brne	8000869c <_dtoa_r+0x98>
80008692:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80008696:	c0 31       	brne	8000869c <_dtoa_r+0x98>
80008698:	4a cc       	lddpc	r12,80008748 <_dtoa_r+0x144>
8000869a:	c0 28       	rjmp	8000869e <_dtoa_r+0x9a>
8000869c:	4a cc       	lddpc	r12,8000874c <_dtoa_r+0x148>
8000869e:	41 29       	lddsp	r9,sp[0x48]
800086a0:	58 09       	cp.w	r9,0
800086a2:	e0 80 05 9e 	breq	800091de <_dtoa_r+0xbda>
800086a6:	f8 c8 ff fd 	sub	r8,r12,-3
800086aa:	f8 c9 ff f8 	sub	r9,r12,-8
800086ae:	11 8b       	ld.ub	r11,r8[0x0]
800086b0:	30 0a       	mov	r10,0
800086b2:	41 25       	lddsp	r5,sp[0x48]
800086b4:	f4 0b 18 00 	cp.b	r11,r10
800086b8:	f2 08 17 10 	movne	r8,r9
800086bc:	c1 58       	rjmp	800086e6 <_dtoa_r+0xe2>
800086be:	fa ea 00 08 	ld.d	r10,sp[8]
800086c2:	30 08       	mov	r8,0
800086c4:	fa eb 00 3c 	st.d	sp[60],r10
800086c8:	30 09       	mov	r9,0
800086ca:	e0 a0 15 ae 	rcall	8000b226 <__avr32_f64_cmp_eq>
800086ce:	c0 f0       	breq	800086ec <_dtoa_r+0xe8>
800086d0:	30 18       	mov	r8,1
800086d2:	41 5a       	lddsp	r10,sp[0x54]
800086d4:	95 08       	st.w	r10[0x0],r8
800086d6:	49 fc       	lddpc	r12,80008750 <_dtoa_r+0x14c>
800086d8:	41 29       	lddsp	r9,sp[0x48]
800086da:	f8 08 00 08 	add	r8,r12,r8
800086de:	58 09       	cp.w	r9,0
800086e0:	e0 80 05 7f 	breq	800091de <_dtoa_r+0xbda>
800086e4:	12 95       	mov	r5,r9
800086e6:	8b 08       	st.w	r5[0x0],r8
800086e8:	e0 8f 05 7b 	bral	800091de <_dtoa_r+0xbda>
800086ec:	fa c8 ff 9c 	sub	r8,sp,-100
800086f0:	fa c9 ff a0 	sub	r9,sp,-96
800086f4:	fa ea 00 3c 	ld.d	r10,sp[60]
800086f8:	0e 9c       	mov	r12,r7
800086fa:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
800086fe:	e0 a0 0d 63 	rcall	8000a1c4 <__d2b>
80008702:	18 93       	mov	r3,r12
80008704:	58 05       	cp.w	r5,0
80008706:	c0 d0       	breq	80008720 <_dtoa_r+0x11c>
80008708:	fa ea 00 3c 	ld.d	r10,sp[60]
8000870c:	30 04       	mov	r4,0
8000870e:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80008712:	ea c5 03 ff 	sub	r5,r5,1023
80008716:	10 9b       	mov	r11,r8
80008718:	51 74       	stdsp	sp[0x5c],r4
8000871a:	ea 1b 3f f0 	orh	r11,0x3ff0
8000871e:	c2 a8       	rjmp	80008772 <_dtoa_r+0x16e>
80008720:	41 88       	lddsp	r8,sp[0x60]
80008722:	41 9c       	lddsp	r12,sp[0x64]
80008724:	10 0c       	add	r12,r8
80008726:	f8 c5 fb ce 	sub	r5,r12,-1074
8000872a:	e0 45 00 20 	cp.w	r5,32
8000872e:	e0 8a 00 13 	brle	80008754 <_dtoa_r+0x150>
80008732:	f8 cc fb ee 	sub	r12,r12,-1042
80008736:	40 3b       	lddsp	r11,sp[0xc]
80008738:	ea 08 11 40 	rsub	r8,r5,64
8000873c:	f6 0c 0a 4c 	lsr	r12,r11,r12
80008740:	ec 08 09 46 	lsl	r6,r6,r8
80008744:	0c 4c       	or	r12,r6
80008746:	c0 c8       	rjmp	8000875e <_dtoa_r+0x15a>
80008748:	80 00       	ld.sh	r0,r0[0x0]
8000874a:	cb 78       	rjmp	800088b8 <_dtoa_r+0x2b4>
8000874c:	80 00       	ld.sh	r0,r0[0x0]
8000874e:	cb 84       	brge	800086be <_dtoa_r+0xba>
80008750:	80 00       	ld.sh	r0,r0[0x0]
80008752:	ca 54       	brge	8000869c <_dtoa_r+0x98>
80008754:	ea 0c 11 20 	rsub	r12,r5,32
80008758:	40 3a       	lddsp	r10,sp[0xc]
8000875a:	f4 0c 09 4c 	lsl	r12,r10,r12
8000875e:	e0 a0 14 f0 	rcall	8000b13e <__avr32_u32_to_f64>
80008762:	fc 18 fe 10 	movh	r8,0xfe10
80008766:	30 19       	mov	r9,1
80008768:	ea c5 04 33 	sub	r5,r5,1075
8000876c:	f0 0b 00 0b 	add	r11,r8,r11
80008770:	51 79       	stdsp	sp[0x5c],r9
80008772:	30 08       	mov	r8,0
80008774:	fc 19 3f f8 	movh	r9,0x3ff8
80008778:	e0 a0 13 78 	rcall	8000ae68 <__avr32_f64_sub>
8000877c:	e0 68 43 61 	mov	r8,17249
80008780:	ea 18 63 6f 	orh	r8,0x636f
80008784:	e0 69 87 a7 	mov	r9,34727
80008788:	ea 19 3f d2 	orh	r9,0x3fd2
8000878c:	e0 a0 12 82 	rcall	8000ac90 <__avr32_f64_mul>
80008790:	e0 68 c8 b3 	mov	r8,51379
80008794:	ea 18 8b 60 	orh	r8,0x8b60
80008798:	e0 69 8a 28 	mov	r9,35368
8000879c:	ea 19 3f c6 	orh	r9,0x3fc6
800087a0:	e0 a0 14 32 	rcall	8000b004 <__avr32_f64_add>
800087a4:	0a 9c       	mov	r12,r5
800087a6:	14 90       	mov	r0,r10
800087a8:	16 91       	mov	r1,r11
800087aa:	e0 a0 14 ce 	rcall	8000b146 <__avr32_s32_to_f64>
800087ae:	e0 68 79 fb 	mov	r8,31227
800087b2:	ea 18 50 9f 	orh	r8,0x509f
800087b6:	e0 69 44 13 	mov	r9,17427
800087ba:	ea 19 3f d3 	orh	r9,0x3fd3
800087be:	e0 a0 12 69 	rcall	8000ac90 <__avr32_f64_mul>
800087c2:	14 98       	mov	r8,r10
800087c4:	16 99       	mov	r9,r11
800087c6:	00 9a       	mov	r10,r0
800087c8:	02 9b       	mov	r11,r1
800087ca:	e0 a0 14 1d 	rcall	8000b004 <__avr32_f64_add>
800087ce:	14 90       	mov	r0,r10
800087d0:	16 91       	mov	r1,r11
800087d2:	e0 a0 14 a3 	rcall	8000b118 <__avr32_f64_to_s32>
800087d6:	30 08       	mov	r8,0
800087d8:	18 96       	mov	r6,r12
800087da:	30 09       	mov	r9,0
800087dc:	00 9a       	mov	r10,r0
800087de:	02 9b       	mov	r11,r1
800087e0:	e0 a0 15 6a 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
800087e4:	c0 c0       	breq	800087fc <_dtoa_r+0x1f8>
800087e6:	0c 9c       	mov	r12,r6
800087e8:	e0 a0 14 af 	rcall	8000b146 <__avr32_s32_to_f64>
800087ec:	14 98       	mov	r8,r10
800087ee:	16 99       	mov	r9,r11
800087f0:	00 9a       	mov	r10,r0
800087f2:	02 9b       	mov	r11,r1
800087f4:	e0 a0 15 19 	rcall	8000b226 <__avr32_f64_cmp_eq>
800087f8:	f7 b6 00 01 	subeq	r6,1
800087fc:	59 66       	cp.w	r6,22
800087fe:	e0 88 00 05 	brls	80008808 <_dtoa_r+0x204>
80008802:	30 18       	mov	r8,1
80008804:	51 48       	stdsp	sp[0x50],r8
80008806:	c1 28       	rjmp	8000882a <_dtoa_r+0x226>
80008808:	4c 08       	lddpc	r8,80008908 <_dtoa_r+0x304>
8000880a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000880e:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80008812:	e0 a0 15 51 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008816:	f9 b4 00 00 	moveq	r4,0
8000881a:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000881e:	f7 b6 01 01 	subne	r6,1
80008822:	f9 bc 01 00 	movne	r12,0
80008826:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000882a:	41 90       	lddsp	r0,sp[0x64]
8000882c:	20 10       	sub	r0,1
8000882e:	0a 10       	sub	r0,r5
80008830:	c0 46       	brmi	80008838 <_dtoa_r+0x234>
80008832:	50 40       	stdsp	sp[0x10],r0
80008834:	30 00       	mov	r0,0
80008836:	c0 48       	rjmp	8000883e <_dtoa_r+0x23a>
80008838:	30 0b       	mov	r11,0
8000883a:	5c 30       	neg	r0
8000883c:	50 4b       	stdsp	sp[0x10],r11
8000883e:	ec 02 11 00 	rsub	r2,r6,0
80008842:	58 06       	cp.w	r6,0
80008844:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80008848:	f5 d6 e4 0a 	addge	r10,r10,r6
8000884c:	fb fa 4a 04 	st.wge	sp[0x10],r10
80008850:	fb f6 4a 11 	st.wge	sp[0x44],r6
80008854:	f9 b2 04 00 	movge	r2,0
80008858:	e1 d6 e5 10 	sublt	r0,r0,r6
8000885c:	f9 b9 05 00 	movlt	r9,0
80008860:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80008864:	40 c8       	lddsp	r8,sp[0x30]
80008866:	58 98       	cp.w	r8,9
80008868:	e0 8b 00 20 	brhi	800088a8 <_dtoa_r+0x2a4>
8000886c:	58 58       	cp.w	r8,5
8000886e:	f9 b4 0a 01 	movle	r4,1
80008872:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80008876:	f7 b5 09 04 	subgt	r5,4
8000887a:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000887e:	f9 b4 09 00 	movgt	r4,0
80008882:	40 cc       	lddsp	r12,sp[0x30]
80008884:	58 3c       	cp.w	r12,3
80008886:	c2 d0       	breq	800088e0 <_dtoa_r+0x2dc>
80008888:	e0 89 00 05 	brgt	80008892 <_dtoa_r+0x28e>
8000888c:	58 2c       	cp.w	r12,2
8000888e:	c1 01       	brne	800088ae <_dtoa_r+0x2aa>
80008890:	c1 88       	rjmp	800088c0 <_dtoa_r+0x2bc>
80008892:	40 cb       	lddsp	r11,sp[0x30]
80008894:	58 4b       	cp.w	r11,4
80008896:	c0 60       	breq	800088a2 <_dtoa_r+0x29e>
80008898:	58 5b       	cp.w	r11,5
8000889a:	c0 a1       	brne	800088ae <_dtoa_r+0x2aa>
8000889c:	30 1a       	mov	r10,1
8000889e:	50 da       	stdsp	sp[0x34],r10
800088a0:	c2 28       	rjmp	800088e4 <_dtoa_r+0x2e0>
800088a2:	30 19       	mov	r9,1
800088a4:	50 d9       	stdsp	sp[0x34],r9
800088a6:	c0 f8       	rjmp	800088c4 <_dtoa_r+0x2c0>
800088a8:	30 08       	mov	r8,0
800088aa:	30 14       	mov	r4,1
800088ac:	50 c8       	stdsp	sp[0x30],r8
800088ae:	3f f5       	mov	r5,-1
800088b0:	30 1c       	mov	r12,1
800088b2:	30 0b       	mov	r11,0
800088b4:	50 95       	stdsp	sp[0x24],r5
800088b6:	50 dc       	stdsp	sp[0x34],r12
800088b8:	0a 91       	mov	r1,r5
800088ba:	31 28       	mov	r8,18
800088bc:	50 eb       	stdsp	sp[0x38],r11
800088be:	c2 08       	rjmp	800088fe <_dtoa_r+0x2fa>
800088c0:	30 0a       	mov	r10,0
800088c2:	50 da       	stdsp	sp[0x34],r10
800088c4:	40 e9       	lddsp	r9,sp[0x38]
800088c6:	58 09       	cp.w	r9,0
800088c8:	e0 89 00 07 	brgt	800088d6 <_dtoa_r+0x2d2>
800088cc:	30 18       	mov	r8,1
800088ce:	50 98       	stdsp	sp[0x24],r8
800088d0:	10 91       	mov	r1,r8
800088d2:	50 e8       	stdsp	sp[0x38],r8
800088d4:	c1 58       	rjmp	800088fe <_dtoa_r+0x2fa>
800088d6:	40 e5       	lddsp	r5,sp[0x38]
800088d8:	50 95       	stdsp	sp[0x24],r5
800088da:	0a 91       	mov	r1,r5
800088dc:	0a 98       	mov	r8,r5
800088de:	c1 08       	rjmp	800088fe <_dtoa_r+0x2fa>
800088e0:	30 0c       	mov	r12,0
800088e2:	50 dc       	stdsp	sp[0x34],r12
800088e4:	40 eb       	lddsp	r11,sp[0x38]
800088e6:	ec 0b 00 0b 	add	r11,r6,r11
800088ea:	50 9b       	stdsp	sp[0x24],r11
800088ec:	16 98       	mov	r8,r11
800088ee:	2f f8       	sub	r8,-1
800088f0:	58 08       	cp.w	r8,0
800088f2:	e0 89 00 05 	brgt	800088fc <_dtoa_r+0x2f8>
800088f6:	10 91       	mov	r1,r8
800088f8:	30 18       	mov	r8,1
800088fa:	c0 28       	rjmp	800088fe <_dtoa_r+0x2fa>
800088fc:	10 91       	mov	r1,r8
800088fe:	30 09       	mov	r9,0
80008900:	6e 9a       	ld.w	r10,r7[0x24]
80008902:	95 19       	st.w	r10[0x4],r9
80008904:	30 49       	mov	r9,4
80008906:	c0 78       	rjmp	80008914 <_dtoa_r+0x310>
80008908:	80 00       	ld.sh	r0,r0[0x0]
8000890a:	cc 3c       	rcall	80008a90 <_dtoa_r+0x48c>
8000890c:	6a 1a       	ld.w	r10,r5[0x4]
8000890e:	a1 79       	lsl	r9,0x1
80008910:	2f fa       	sub	r10,-1
80008912:	8b 1a       	st.w	r5[0x4],r10
80008914:	6e 95       	ld.w	r5,r7[0x24]
80008916:	f2 ca ff ec 	sub	r10,r9,-20
8000891a:	10 3a       	cp.w	r10,r8
8000891c:	fe 98 ff f8 	brls	8000890c <_dtoa_r+0x308>
80008920:	6a 1b       	ld.w	r11,r5[0x4]
80008922:	0e 9c       	mov	r12,r7
80008924:	e0 a0 0c 18 	rcall	8000a154 <_Balloc>
80008928:	58 e1       	cp.w	r1,14
8000892a:	5f 88       	srls	r8
8000892c:	8b 0c       	st.w	r5[0x0],r12
8000892e:	f1 e4 00 04 	and	r4,r8,r4
80008932:	6e 98       	ld.w	r8,r7[0x24]
80008934:	70 08       	ld.w	r8,r8[0x0]
80008936:	50 88       	stdsp	sp[0x20],r8
80008938:	e0 80 01 82 	breq	80008c3c <_dtoa_r+0x638>
8000893c:	58 06       	cp.w	r6,0
8000893e:	e0 8a 00 40 	brle	800089be <_dtoa_r+0x3ba>
80008942:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80008946:	4c b8       	lddpc	r8,80008a70 <_dtoa_r+0x46c>
80008948:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000894c:	fa e5 00 18 	st.d	sp[24],r4
80008950:	ec 04 14 04 	asr	r4,r6,0x4
80008954:	ed b4 00 04 	bld	r4,0x4
80008958:	c0 30       	breq	8000895e <_dtoa_r+0x35a>
8000895a:	30 25       	mov	r5,2
8000895c:	c0 f8       	rjmp	8000897a <_dtoa_r+0x376>
8000895e:	4c 68       	lddpc	r8,80008a74 <_dtoa_r+0x470>
80008960:	f0 e8 00 20 	ld.d	r8,r8[32]
80008964:	fa ea 00 3c 	ld.d	r10,sp[60]
80008968:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000896c:	e0 a0 14 d8 	rcall	8000b31c <__avr32_f64_div>
80008970:	30 35       	mov	r5,3
80008972:	14 98       	mov	r8,r10
80008974:	16 99       	mov	r9,r11
80008976:	fa e9 00 08 	st.d	sp[8],r8
8000897a:	4b fc       	lddpc	r12,80008a74 <_dtoa_r+0x470>
8000897c:	50 a3       	stdsp	sp[0x28],r3
8000897e:	0c 93       	mov	r3,r6
80008980:	18 96       	mov	r6,r12
80008982:	c0 f8       	rjmp	800089a0 <_dtoa_r+0x39c>
80008984:	fa ea 00 18 	ld.d	r10,sp[24]
80008988:	ed b4 00 00 	bld	r4,0x0
8000898c:	c0 81       	brne	8000899c <_dtoa_r+0x398>
8000898e:	ec e8 00 00 	ld.d	r8,r6[0]
80008992:	2f f5       	sub	r5,-1
80008994:	e0 a0 11 7e 	rcall	8000ac90 <__avr32_f64_mul>
80008998:	fa eb 00 18 	st.d	sp[24],r10
8000899c:	a1 54       	asr	r4,0x1
8000899e:	2f 86       	sub	r6,-8
800089a0:	58 04       	cp.w	r4,0
800089a2:	cf 11       	brne	80008984 <_dtoa_r+0x380>
800089a4:	fa e8 00 18 	ld.d	r8,sp[24]
800089a8:	fa ea 00 08 	ld.d	r10,sp[8]
800089ac:	06 96       	mov	r6,r3
800089ae:	e0 a0 14 b7 	rcall	8000b31c <__avr32_f64_div>
800089b2:	40 a3       	lddsp	r3,sp[0x28]
800089b4:	14 98       	mov	r8,r10
800089b6:	16 99       	mov	r9,r11
800089b8:	fa e9 00 08 	st.d	sp[8],r8
800089bc:	c2 d8       	rjmp	80008a16 <_dtoa_r+0x412>
800089be:	ec 08 11 00 	rsub	r8,r6,0
800089c2:	c0 31       	brne	800089c8 <_dtoa_r+0x3c4>
800089c4:	30 25       	mov	r5,2
800089c6:	c2 88       	rjmp	80008a16 <_dtoa_r+0x412>
800089c8:	4a bc       	lddpc	r12,80008a74 <_dtoa_r+0x470>
800089ca:	f0 04 14 04 	asr	r4,r8,0x4
800089ce:	50 1c       	stdsp	sp[0x4],r12
800089d0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800089d4:	4a 79       	lddpc	r9,80008a70 <_dtoa_r+0x46c>
800089d6:	fa ea 00 3c 	ld.d	r10,sp[60]
800089da:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800089de:	e0 a0 11 59 	rcall	8000ac90 <__avr32_f64_mul>
800089e2:	40 1c       	lddsp	r12,sp[0x4]
800089e4:	50 63       	stdsp	sp[0x18],r3
800089e6:	30 25       	mov	r5,2
800089e8:	0c 93       	mov	r3,r6
800089ea:	fa eb 00 08 	st.d	sp[8],r10
800089ee:	18 96       	mov	r6,r12
800089f0:	c0 f8       	rjmp	80008a0e <_dtoa_r+0x40a>
800089f2:	fa ea 00 08 	ld.d	r10,sp[8]
800089f6:	ed b4 00 00 	bld	r4,0x0
800089fa:	c0 81       	brne	80008a0a <_dtoa_r+0x406>
800089fc:	ec e8 00 00 	ld.d	r8,r6[0]
80008a00:	2f f5       	sub	r5,-1
80008a02:	e0 a0 11 47 	rcall	8000ac90 <__avr32_f64_mul>
80008a06:	fa eb 00 08 	st.d	sp[8],r10
80008a0a:	a1 54       	asr	r4,0x1
80008a0c:	2f 86       	sub	r6,-8
80008a0e:	58 04       	cp.w	r4,0
80008a10:	cf 11       	brne	800089f2 <_dtoa_r+0x3ee>
80008a12:	06 96       	mov	r6,r3
80008a14:	40 63       	lddsp	r3,sp[0x18]
80008a16:	41 4a       	lddsp	r10,sp[0x50]
80008a18:	58 0a       	cp.w	r10,0
80008a1a:	c2 f0       	breq	80008a78 <_dtoa_r+0x474>
80008a1c:	fa e8 00 08 	ld.d	r8,sp[8]
80008a20:	58 01       	cp.w	r1,0
80008a22:	5f 94       	srgt	r4
80008a24:	fa e9 00 18 	st.d	sp[24],r8
80008a28:	30 08       	mov	r8,0
80008a2a:	fc 19 3f f0 	movh	r9,0x3ff0
80008a2e:	fa ea 00 18 	ld.d	r10,sp[24]
80008a32:	e0 a0 14 41 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008a36:	f9 bc 00 00 	moveq	r12,0
80008a3a:	f9 bc 01 01 	movne	r12,1
80008a3e:	e9 ec 00 0c 	and	r12,r4,r12
80008a42:	c1 b0       	breq	80008a78 <_dtoa_r+0x474>
80008a44:	40 98       	lddsp	r8,sp[0x24]
80008a46:	58 08       	cp.w	r8,0
80008a48:	e0 8a 00 f6 	brle	80008c34 <_dtoa_r+0x630>
80008a4c:	30 08       	mov	r8,0
80008a4e:	fc 19 40 24 	movh	r9,0x4024
80008a52:	ec c4 00 01 	sub	r4,r6,1
80008a56:	fa ea 00 18 	ld.d	r10,sp[24]
80008a5a:	2f f5       	sub	r5,-1
80008a5c:	50 64       	stdsp	sp[0x18],r4
80008a5e:	e0 a0 11 19 	rcall	8000ac90 <__avr32_f64_mul>
80008a62:	40 94       	lddsp	r4,sp[0x24]
80008a64:	14 98       	mov	r8,r10
80008a66:	16 99       	mov	r9,r11
80008a68:	fa e9 00 08 	st.d	sp[8],r8
80008a6c:	c0 88       	rjmp	80008a7c <_dtoa_r+0x478>
80008a6e:	d7 03       	nop
80008a70:	80 00       	ld.sh	r0,r0[0x0]
80008a72:	cc 3c       	rcall	80008bf8 <_dtoa_r+0x5f4>
80008a74:	80 00       	ld.sh	r0,r0[0x0]
80008a76:	cd 04       	brge	80008a16 <_dtoa_r+0x412>
80008a78:	50 66       	stdsp	sp[0x18],r6
80008a7a:	02 94       	mov	r4,r1
80008a7c:	0a 9c       	mov	r12,r5
80008a7e:	e0 a0 13 64 	rcall	8000b146 <__avr32_s32_to_f64>
80008a82:	fa e8 00 08 	ld.d	r8,sp[8]
80008a86:	e0 a0 11 05 	rcall	8000ac90 <__avr32_f64_mul>
80008a8a:	30 08       	mov	r8,0
80008a8c:	fc 19 40 1c 	movh	r9,0x401c
80008a90:	e0 a0 12 ba 	rcall	8000b004 <__avr32_f64_add>
80008a94:	14 98       	mov	r8,r10
80008a96:	16 99       	mov	r9,r11
80008a98:	fa e9 00 28 	st.d	sp[40],r8
80008a9c:	fc 18 fc c0 	movh	r8,0xfcc0
80008aa0:	40 a5       	lddsp	r5,sp[0x28]
80008aa2:	10 05       	add	r5,r8
80008aa4:	50 a5       	stdsp	sp[0x28],r5
80008aa6:	58 04       	cp.w	r4,0
80008aa8:	c2 11       	brne	80008aea <_dtoa_r+0x4e6>
80008aaa:	fa ea 00 08 	ld.d	r10,sp[8]
80008aae:	30 08       	mov	r8,0
80008ab0:	fc 19 40 14 	movh	r9,0x4014
80008ab4:	e0 a0 11 da 	rcall	8000ae68 <__avr32_f64_sub>
80008ab8:	40 bc       	lddsp	r12,sp[0x2c]
80008aba:	fa eb 00 08 	st.d	sp[8],r10
80008abe:	14 98       	mov	r8,r10
80008ac0:	16 99       	mov	r9,r11
80008ac2:	18 9a       	mov	r10,r12
80008ac4:	0a 9b       	mov	r11,r5
80008ac6:	e0 a0 13 f7 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008aca:	e0 81 02 54 	brne	80008f72 <_dtoa_r+0x96e>
80008ace:	0a 98       	mov	r8,r5
80008ad0:	40 b9       	lddsp	r9,sp[0x2c]
80008ad2:	ee 18 80 00 	eorh	r8,0x8000
80008ad6:	fa ea 00 08 	ld.d	r10,sp[8]
80008ada:	10 95       	mov	r5,r8
80008adc:	12 98       	mov	r8,r9
80008ade:	0a 99       	mov	r9,r5
80008ae0:	e0 a0 13 ea 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008ae4:	e0 81 02 3e 	brne	80008f60 <_dtoa_r+0x95c>
80008ae8:	ca 68       	rjmp	80008c34 <_dtoa_r+0x630>
80008aea:	4c e9       	lddpc	r9,80008c20 <_dtoa_r+0x61c>
80008aec:	e8 c8 00 01 	sub	r8,r4,1
80008af0:	40 d5       	lddsp	r5,sp[0x34]
80008af2:	58 05       	cp.w	r5,0
80008af4:	c4 f0       	breq	80008b92 <_dtoa_r+0x58e>
80008af6:	30 0c       	mov	r12,0
80008af8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80008afc:	51 3c       	stdsp	sp[0x4c],r12
80008afe:	30 0a       	mov	r10,0
80008b00:	fc 1b 3f e0 	movh	r11,0x3fe0
80008b04:	e0 a0 14 0c 	rcall	8000b31c <__avr32_f64_div>
80008b08:	fa e8 00 28 	ld.d	r8,sp[40]
80008b0c:	40 85       	lddsp	r5,sp[0x20]
80008b0e:	e0 a0 11 ad 	rcall	8000ae68 <__avr32_f64_sub>
80008b12:	fa eb 00 28 	st.d	sp[40],r10
80008b16:	fa ea 00 08 	ld.d	r10,sp[8]
80008b1a:	e0 a0 12 ff 	rcall	8000b118 <__avr32_f64_to_s32>
80008b1e:	51 6c       	stdsp	sp[0x58],r12
80008b20:	e0 a0 13 13 	rcall	8000b146 <__avr32_s32_to_f64>
80008b24:	14 98       	mov	r8,r10
80008b26:	16 99       	mov	r9,r11
80008b28:	fa ea 00 08 	ld.d	r10,sp[8]
80008b2c:	e0 a0 11 9e 	rcall	8000ae68 <__avr32_f64_sub>
80008b30:	fa eb 00 08 	st.d	sp[8],r10
80008b34:	41 68       	lddsp	r8,sp[0x58]
80008b36:	2d 08       	sub	r8,-48
80008b38:	0a c8       	st.b	r5++,r8
80008b3a:	41 39       	lddsp	r9,sp[0x4c]
80008b3c:	2f f9       	sub	r9,-1
80008b3e:	51 39       	stdsp	sp[0x4c],r9
80008b40:	fa e8 00 28 	ld.d	r8,sp[40]
80008b44:	e0 a0 13 b8 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008b48:	e0 81 03 3a 	brne	800091bc <_dtoa_r+0xbb8>
80008b4c:	fa e8 00 08 	ld.d	r8,sp[8]
80008b50:	30 0a       	mov	r10,0
80008b52:	fc 1b 3f f0 	movh	r11,0x3ff0
80008b56:	e0 a0 11 89 	rcall	8000ae68 <__avr32_f64_sub>
80008b5a:	fa e8 00 28 	ld.d	r8,sp[40]
80008b5e:	e0 a0 13 ab 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008b62:	fa ea 00 28 	ld.d	r10,sp[40]
80008b66:	30 08       	mov	r8,0
80008b68:	fc 19 40 24 	movh	r9,0x4024
80008b6c:	e0 81 00 da 	brne	80008d20 <_dtoa_r+0x71c>
80008b70:	41 3c       	lddsp	r12,sp[0x4c]
80008b72:	08 3c       	cp.w	r12,r4
80008b74:	c6 04       	brge	80008c34 <_dtoa_r+0x630>
80008b76:	e0 a0 10 8d 	rcall	8000ac90 <__avr32_f64_mul>
80008b7a:	30 08       	mov	r8,0
80008b7c:	fa eb 00 28 	st.d	sp[40],r10
80008b80:	fc 19 40 24 	movh	r9,0x4024
80008b84:	fa ea 00 08 	ld.d	r10,sp[8]
80008b88:	e0 a0 10 84 	rcall	8000ac90 <__avr32_f64_mul>
80008b8c:	fa eb 00 08 	st.d	sp[8],r10
80008b90:	cc 3b       	rjmp	80008b16 <_dtoa_r+0x512>
80008b92:	40 85       	lddsp	r5,sp[0x20]
80008b94:	08 05       	add	r5,r4
80008b96:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80008b9a:	51 35       	stdsp	sp[0x4c],r5
80008b9c:	fa e8 00 28 	ld.d	r8,sp[40]
80008ba0:	40 85       	lddsp	r5,sp[0x20]
80008ba2:	e0 a0 10 77 	rcall	8000ac90 <__avr32_f64_mul>
80008ba6:	fa eb 00 28 	st.d	sp[40],r10
80008baa:	fa ea 00 08 	ld.d	r10,sp[8]
80008bae:	e0 a0 12 b5 	rcall	8000b118 <__avr32_f64_to_s32>
80008bb2:	51 6c       	stdsp	sp[0x58],r12
80008bb4:	e0 a0 12 c9 	rcall	8000b146 <__avr32_s32_to_f64>
80008bb8:	14 98       	mov	r8,r10
80008bba:	16 99       	mov	r9,r11
80008bbc:	fa ea 00 08 	ld.d	r10,sp[8]
80008bc0:	e0 a0 11 54 	rcall	8000ae68 <__avr32_f64_sub>
80008bc4:	fa eb 00 08 	st.d	sp[8],r10
80008bc8:	41 68       	lddsp	r8,sp[0x58]
80008bca:	2d 08       	sub	r8,-48
80008bcc:	0a c8       	st.b	r5++,r8
80008bce:	41 3c       	lddsp	r12,sp[0x4c]
80008bd0:	18 35       	cp.w	r5,r12
80008bd2:	c2 91       	brne	80008c24 <_dtoa_r+0x620>
80008bd4:	30 08       	mov	r8,0
80008bd6:	fc 19 3f e0 	movh	r9,0x3fe0
80008bda:	fa ea 00 28 	ld.d	r10,sp[40]
80008bde:	e0 a0 12 13 	rcall	8000b004 <__avr32_f64_add>
80008be2:	40 85       	lddsp	r5,sp[0x20]
80008be4:	fa e8 00 08 	ld.d	r8,sp[8]
80008be8:	08 05       	add	r5,r4
80008bea:	e0 a0 13 65 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008bee:	e0 81 00 99 	brne	80008d20 <_dtoa_r+0x71c>
80008bf2:	fa e8 00 28 	ld.d	r8,sp[40]
80008bf6:	30 0a       	mov	r10,0
80008bf8:	fc 1b 3f e0 	movh	r11,0x3fe0
80008bfc:	e0 a0 11 36 	rcall	8000ae68 <__avr32_f64_sub>
80008c00:	14 98       	mov	r8,r10
80008c02:	16 99       	mov	r9,r11
80008c04:	fa ea 00 08 	ld.d	r10,sp[8]
80008c08:	e0 a0 13 56 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008c0c:	c1 40       	breq	80008c34 <_dtoa_r+0x630>
80008c0e:	33 09       	mov	r9,48
80008c10:	0a 98       	mov	r8,r5
80008c12:	11 7a       	ld.ub	r10,--r8
80008c14:	f2 0a 18 00 	cp.b	r10,r9
80008c18:	e0 81 02 d2 	brne	800091bc <_dtoa_r+0xbb8>
80008c1c:	10 95       	mov	r5,r8
80008c1e:	cf 9b       	rjmp	80008c10 <_dtoa_r+0x60c>
80008c20:	80 00       	ld.sh	r0,r0[0x0]
80008c22:	cc 3c       	rcall	80008da8 <_dtoa_r+0x7a4>
80008c24:	30 08       	mov	r8,0
80008c26:	fc 19 40 24 	movh	r9,0x4024
80008c2a:	e0 a0 10 33 	rcall	8000ac90 <__avr32_f64_mul>
80008c2e:	fa eb 00 08 	st.d	sp[8],r10
80008c32:	cb cb       	rjmp	80008baa <_dtoa_r+0x5a6>
80008c34:	fa ea 00 3c 	ld.d	r10,sp[60]
80008c38:	fa eb 00 08 	st.d	sp[8],r10
80008c3c:	58 e6       	cp.w	r6,14
80008c3e:	5f ab       	srle	r11
80008c40:	41 8a       	lddsp	r10,sp[0x60]
80008c42:	30 08       	mov	r8,0
80008c44:	f4 09 11 ff 	rsub	r9,r10,-1
80008c48:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008c4c:	f0 09 18 00 	cp.b	r9,r8
80008c50:	e0 80 00 81 	breq	80008d52 <_dtoa_r+0x74e>
80008c54:	40 ea       	lddsp	r10,sp[0x38]
80008c56:	58 01       	cp.w	r1,0
80008c58:	5f a9       	srle	r9
80008c5a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80008c5e:	4c 9a       	lddpc	r10,80008d80 <_dtoa_r+0x77c>
80008c60:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80008c64:	fa e5 00 10 	st.d	sp[16],r4
80008c68:	f0 09 18 00 	cp.b	r9,r8
80008c6c:	c1 40       	breq	80008c94 <_dtoa_r+0x690>
80008c6e:	58 01       	cp.w	r1,0
80008c70:	e0 81 01 78 	brne	80008f60 <_dtoa_r+0x95c>
80008c74:	30 08       	mov	r8,0
80008c76:	fc 19 40 14 	movh	r9,0x4014
80008c7a:	08 9a       	mov	r10,r4
80008c7c:	0a 9b       	mov	r11,r5
80008c7e:	e0 a0 10 09 	rcall	8000ac90 <__avr32_f64_mul>
80008c82:	fa e8 00 08 	ld.d	r8,sp[8]
80008c86:	e0 a0 12 e3 	rcall	8000b24c <__avr32_f64_cmp_ge>
80008c8a:	e0 81 01 6b 	brne	80008f60 <_dtoa_r+0x95c>
80008c8e:	02 92       	mov	r2,r1
80008c90:	e0 8f 01 73 	bral	80008f76 <_dtoa_r+0x972>
80008c94:	40 85       	lddsp	r5,sp[0x20]
80008c96:	30 14       	mov	r4,1
80008c98:	fa e8 00 10 	ld.d	r8,sp[16]
80008c9c:	fa ea 00 08 	ld.d	r10,sp[8]
80008ca0:	e0 a0 13 3e 	rcall	8000b31c <__avr32_f64_div>
80008ca4:	e0 a0 12 3a 	rcall	8000b118 <__avr32_f64_to_s32>
80008ca8:	18 92       	mov	r2,r12
80008caa:	e0 a0 12 4e 	rcall	8000b146 <__avr32_s32_to_f64>
80008cae:	fa e8 00 10 	ld.d	r8,sp[16]
80008cb2:	e0 a0 0f ef 	rcall	8000ac90 <__avr32_f64_mul>
80008cb6:	14 98       	mov	r8,r10
80008cb8:	16 99       	mov	r9,r11
80008cba:	fa ea 00 08 	ld.d	r10,sp[8]
80008cbe:	e0 a0 10 d5 	rcall	8000ae68 <__avr32_f64_sub>
80008cc2:	fa eb 00 08 	st.d	sp[8],r10
80008cc6:	e4 c8 ff d0 	sub	r8,r2,-48
80008cca:	0a c8       	st.b	r5++,r8
80008ccc:	fc 19 40 24 	movh	r9,0x4024
80008cd0:	30 08       	mov	r8,0
80008cd2:	02 34       	cp.w	r4,r1
80008cd4:	c3 31       	brne	80008d3a <_dtoa_r+0x736>
80008cd6:	fa e8 00 08 	ld.d	r8,sp[8]
80008cda:	e0 a0 11 95 	rcall	8000b004 <__avr32_f64_add>
80008cde:	16 91       	mov	r1,r11
80008ce0:	14 90       	mov	r0,r10
80008ce2:	14 98       	mov	r8,r10
80008ce4:	02 99       	mov	r9,r1
80008ce6:	fa ea 00 10 	ld.d	r10,sp[16]
80008cea:	e0 a0 12 e5 	rcall	8000b2b4 <__avr32_f64_cmp_lt>
80008cee:	c1 a1       	brne	80008d22 <_dtoa_r+0x71e>
80008cf0:	fa e8 00 10 	ld.d	r8,sp[16]
80008cf4:	00 9a       	mov	r10,r0
80008cf6:	02 9b       	mov	r11,r1
80008cf8:	e0 a0 12 97 	rcall	8000b226 <__avr32_f64_cmp_eq>
80008cfc:	e0 80 02 5f 	breq	800091ba <_dtoa_r+0xbb6>
80008d00:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80008d04:	c0 f1       	brne	80008d22 <_dtoa_r+0x71e>
80008d06:	e0 8f 02 5a 	bral	800091ba <_dtoa_r+0xbb6>
80008d0a:	40 8a       	lddsp	r10,sp[0x20]
80008d0c:	14 38       	cp.w	r8,r10
80008d0e:	c0 30       	breq	80008d14 <_dtoa_r+0x710>
80008d10:	10 95       	mov	r5,r8
80008d12:	c0 98       	rjmp	80008d24 <_dtoa_r+0x720>
80008d14:	33 08       	mov	r8,48
80008d16:	40 89       	lddsp	r9,sp[0x20]
80008d18:	2f f6       	sub	r6,-1
80008d1a:	b2 88       	st.b	r9[0x0],r8
80008d1c:	40 88       	lddsp	r8,sp[0x20]
80008d1e:	c0 88       	rjmp	80008d2e <_dtoa_r+0x72a>
80008d20:	40 66       	lddsp	r6,sp[0x18]
80008d22:	33 99       	mov	r9,57
80008d24:	0a 98       	mov	r8,r5
80008d26:	11 7a       	ld.ub	r10,--r8
80008d28:	f2 0a 18 00 	cp.b	r10,r9
80008d2c:	ce f0       	breq	80008d0a <_dtoa_r+0x706>
80008d2e:	50 66       	stdsp	sp[0x18],r6
80008d30:	11 89       	ld.ub	r9,r8[0x0]
80008d32:	2f f9       	sub	r9,-1
80008d34:	b0 89       	st.b	r8[0x0],r9
80008d36:	e0 8f 02 43 	bral	800091bc <_dtoa_r+0xbb8>
80008d3a:	e0 a0 0f ab 	rcall	8000ac90 <__avr32_f64_mul>
80008d3e:	2f f4       	sub	r4,-1
80008d40:	fa eb 00 08 	st.d	sp[8],r10
80008d44:	30 08       	mov	r8,0
80008d46:	30 09       	mov	r9,0
80008d48:	e0 a0 12 6f 	rcall	8000b226 <__avr32_f64_cmp_eq>
80008d4c:	ca 60       	breq	80008c98 <_dtoa_r+0x694>
80008d4e:	e0 8f 02 36 	bral	800091ba <_dtoa_r+0xbb6>
80008d52:	40 d8       	lddsp	r8,sp[0x34]
80008d54:	58 08       	cp.w	r8,0
80008d56:	c0 51       	brne	80008d60 <_dtoa_r+0x75c>
80008d58:	04 98       	mov	r8,r2
80008d5a:	00 95       	mov	r5,r0
80008d5c:	40 d4       	lddsp	r4,sp[0x34]
80008d5e:	c3 88       	rjmp	80008dce <_dtoa_r+0x7ca>
80008d60:	40 c5       	lddsp	r5,sp[0x30]
80008d62:	58 15       	cp.w	r5,1
80008d64:	e0 89 00 10 	brgt	80008d84 <_dtoa_r+0x780>
80008d68:	41 74       	lddsp	r4,sp[0x5c]
80008d6a:	58 04       	cp.w	r4,0
80008d6c:	c0 40       	breq	80008d74 <_dtoa_r+0x770>
80008d6e:	f4 c9 fb cd 	sub	r9,r10,-1075
80008d72:	c0 48       	rjmp	80008d7a <_dtoa_r+0x776>
80008d74:	41 99       	lddsp	r9,sp[0x64]
80008d76:	f2 09 11 36 	rsub	r9,r9,54
80008d7a:	04 98       	mov	r8,r2
80008d7c:	00 95       	mov	r5,r0
80008d7e:	c1 d8       	rjmp	80008db8 <_dtoa_r+0x7b4>
80008d80:	80 00       	ld.sh	r0,r0[0x0]
80008d82:	cc 3c       	rcall	80008f08 <_dtoa_r+0x904>
80008d84:	e2 c8 00 01 	sub	r8,r1,1
80008d88:	58 01       	cp.w	r1,0
80008d8a:	e0 05 17 40 	movge	r5,r0
80008d8e:	e2 09 17 40 	movge	r9,r1
80008d92:	e1 d1 e5 15 	sublt	r5,r0,r1
80008d96:	f9 b9 05 00 	movlt	r9,0
80008d9a:	10 32       	cp.w	r2,r8
80008d9c:	e5 d8 e4 18 	subge	r8,r2,r8
80008da0:	f1 d2 e5 18 	sublt	r8,r8,r2
80008da4:	e5 d8 e5 02 	addlt	r2,r2,r8
80008da8:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80008dac:	f9 d8 e5 0c 	addlt	r12,r12,r8
80008db0:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80008db4:	f9 b8 05 00 	movlt	r8,0
80008db8:	40 4b       	lddsp	r11,sp[0x10]
80008dba:	12 0b       	add	r11,r9
80008dbc:	50 08       	stdsp	sp[0x0],r8
80008dbe:	50 4b       	stdsp	sp[0x10],r11
80008dc0:	12 00       	add	r0,r9
80008dc2:	30 1b       	mov	r11,1
80008dc4:	0e 9c       	mov	r12,r7
80008dc6:	e0 a0 0b 7b 	rcall	8000a4bc <__i2b>
80008dca:	40 08       	lddsp	r8,sp[0x0]
80008dcc:	18 94       	mov	r4,r12
80008dce:	40 4a       	lddsp	r10,sp[0x10]
80008dd0:	58 05       	cp.w	r5,0
80008dd2:	5f 99       	srgt	r9
80008dd4:	58 0a       	cp.w	r10,0
80008dd6:	5f 9a       	srgt	r10
80008dd8:	f5 e9 00 09 	and	r9,r10,r9
80008ddc:	c0 80       	breq	80008dec <_dtoa_r+0x7e8>
80008dde:	40 4c       	lddsp	r12,sp[0x10]
80008de0:	f8 05 0d 49 	min	r9,r12,r5
80008de4:	12 1c       	sub	r12,r9
80008de6:	12 10       	sub	r0,r9
80008de8:	50 4c       	stdsp	sp[0x10],r12
80008dea:	12 15       	sub	r5,r9
80008dec:	58 02       	cp.w	r2,0
80008dee:	e0 8a 00 27 	brle	80008e3c <_dtoa_r+0x838>
80008df2:	40 db       	lddsp	r11,sp[0x34]
80008df4:	58 0b       	cp.w	r11,0
80008df6:	c1 d0       	breq	80008e30 <_dtoa_r+0x82c>
80008df8:	58 08       	cp.w	r8,0
80008dfa:	e0 8a 00 17 	brle	80008e28 <_dtoa_r+0x824>
80008dfe:	10 9a       	mov	r10,r8
80008e00:	50 08       	stdsp	sp[0x0],r8
80008e02:	08 9b       	mov	r11,r4
80008e04:	0e 9c       	mov	r12,r7
80008e06:	e0 a0 0b a1 	rcall	8000a548 <__pow5mult>
80008e0a:	06 9a       	mov	r10,r3
80008e0c:	18 9b       	mov	r11,r12
80008e0e:	18 94       	mov	r4,r12
80008e10:	0e 9c       	mov	r12,r7
80008e12:	e0 a0 0a d5 	rcall	8000a3bc <__multiply>
80008e16:	18 99       	mov	r9,r12
80008e18:	06 9b       	mov	r11,r3
80008e1a:	50 19       	stdsp	sp[0x4],r9
80008e1c:	0e 9c       	mov	r12,r7
80008e1e:	e0 a0 09 81 	rcall	8000a120 <_Bfree>
80008e22:	40 19       	lddsp	r9,sp[0x4]
80008e24:	40 08       	lddsp	r8,sp[0x0]
80008e26:	12 93       	mov	r3,r9
80008e28:	e4 08 01 0a 	sub	r10,r2,r8
80008e2c:	c0 80       	breq	80008e3c <_dtoa_r+0x838>
80008e2e:	c0 28       	rjmp	80008e32 <_dtoa_r+0x82e>
80008e30:	04 9a       	mov	r10,r2
80008e32:	06 9b       	mov	r11,r3
80008e34:	0e 9c       	mov	r12,r7
80008e36:	e0 a0 0b 89 	rcall	8000a548 <__pow5mult>
80008e3a:	18 93       	mov	r3,r12
80008e3c:	30 1b       	mov	r11,1
80008e3e:	0e 9c       	mov	r12,r7
80008e40:	e0 a0 0b 3e 	rcall	8000a4bc <__i2b>
80008e44:	41 1a       	lddsp	r10,sp[0x44]
80008e46:	18 92       	mov	r2,r12
80008e48:	58 0a       	cp.w	r10,0
80008e4a:	e0 8a 00 07 	brle	80008e58 <_dtoa_r+0x854>
80008e4e:	18 9b       	mov	r11,r12
80008e50:	0e 9c       	mov	r12,r7
80008e52:	e0 a0 0b 7b 	rcall	8000a548 <__pow5mult>
80008e56:	18 92       	mov	r2,r12
80008e58:	40 c9       	lddsp	r9,sp[0x30]
80008e5a:	58 19       	cp.w	r9,1
80008e5c:	e0 89 00 14 	brgt	80008e84 <_dtoa_r+0x880>
80008e60:	40 38       	lddsp	r8,sp[0xc]
80008e62:	58 08       	cp.w	r8,0
80008e64:	c1 01       	brne	80008e84 <_dtoa_r+0x880>
80008e66:	40 29       	lddsp	r9,sp[0x8]
80008e68:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80008e6c:	c0 c1       	brne	80008e84 <_dtoa_r+0x880>
80008e6e:	12 98       	mov	r8,r9
80008e70:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008e74:	c0 80       	breq	80008e84 <_dtoa_r+0x880>
80008e76:	40 4c       	lddsp	r12,sp[0x10]
80008e78:	30 1b       	mov	r11,1
80008e7a:	2f fc       	sub	r12,-1
80008e7c:	2f f0       	sub	r0,-1
80008e7e:	50 4c       	stdsp	sp[0x10],r12
80008e80:	50 6b       	stdsp	sp[0x18],r11
80008e82:	c0 38       	rjmp	80008e88 <_dtoa_r+0x884>
80008e84:	30 0a       	mov	r10,0
80008e86:	50 6a       	stdsp	sp[0x18],r10
80008e88:	41 19       	lddsp	r9,sp[0x44]
80008e8a:	58 09       	cp.w	r9,0
80008e8c:	c0 31       	brne	80008e92 <_dtoa_r+0x88e>
80008e8e:	30 1c       	mov	r12,1
80008e90:	c0 98       	rjmp	80008ea2 <_dtoa_r+0x89e>
80008e92:	64 48       	ld.w	r8,r2[0x10]
80008e94:	2f c8       	sub	r8,-4
80008e96:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80008e9a:	e0 a0 08 b2 	rcall	80009ffe <__hi0bits>
80008e9e:	f8 0c 11 20 	rsub	r12,r12,32
80008ea2:	40 4b       	lddsp	r11,sp[0x10]
80008ea4:	f8 0b 00 08 	add	r8,r12,r11
80008ea8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008eac:	c0 c0       	breq	80008ec4 <_dtoa_r+0x8c0>
80008eae:	f0 08 11 20 	rsub	r8,r8,32
80008eb2:	58 48       	cp.w	r8,4
80008eb4:	e0 8a 00 06 	brle	80008ec0 <_dtoa_r+0x8bc>
80008eb8:	20 48       	sub	r8,4
80008eba:	10 0b       	add	r11,r8
80008ebc:	50 4b       	stdsp	sp[0x10],r11
80008ebe:	c0 78       	rjmp	80008ecc <_dtoa_r+0x8c8>
80008ec0:	58 48       	cp.w	r8,4
80008ec2:	c0 70       	breq	80008ed0 <_dtoa_r+0x8cc>
80008ec4:	40 4a       	lddsp	r10,sp[0x10]
80008ec6:	2e 48       	sub	r8,-28
80008ec8:	10 0a       	add	r10,r8
80008eca:	50 4a       	stdsp	sp[0x10],r10
80008ecc:	10 00       	add	r0,r8
80008ece:	10 05       	add	r5,r8
80008ed0:	58 00       	cp.w	r0,0
80008ed2:	e0 8a 00 08 	brle	80008ee2 <_dtoa_r+0x8de>
80008ed6:	06 9b       	mov	r11,r3
80008ed8:	00 9a       	mov	r10,r0
80008eda:	0e 9c       	mov	r12,r7
80008edc:	e0 a0 0a 2c 	rcall	8000a334 <__lshift>
80008ee0:	18 93       	mov	r3,r12
80008ee2:	40 49       	lddsp	r9,sp[0x10]
80008ee4:	58 09       	cp.w	r9,0
80008ee6:	e0 8a 00 08 	brle	80008ef6 <_dtoa_r+0x8f2>
80008eea:	04 9b       	mov	r11,r2
80008eec:	12 9a       	mov	r10,r9
80008eee:	0e 9c       	mov	r12,r7
80008ef0:	e0 a0 0a 22 	rcall	8000a334 <__lshift>
80008ef4:	18 92       	mov	r2,r12
80008ef6:	41 48       	lddsp	r8,sp[0x50]
80008ef8:	58 08       	cp.w	r8,0
80008efa:	c1 b0       	breq	80008f30 <_dtoa_r+0x92c>
80008efc:	04 9b       	mov	r11,r2
80008efe:	06 9c       	mov	r12,r3
80008f00:	e0 a0 08 f6 	rcall	8000a0ec <__mcmp>
80008f04:	c1 64       	brge	80008f30 <_dtoa_r+0x92c>
80008f06:	06 9b       	mov	r11,r3
80008f08:	30 09       	mov	r9,0
80008f0a:	30 aa       	mov	r10,10
80008f0c:	0e 9c       	mov	r12,r7
80008f0e:	e0 a0 0a df 	rcall	8000a4cc <__multadd>
80008f12:	20 16       	sub	r6,1
80008f14:	18 93       	mov	r3,r12
80008f16:	40 dc       	lddsp	r12,sp[0x34]
80008f18:	58 0c       	cp.w	r12,0
80008f1a:	c0 31       	brne	80008f20 <_dtoa_r+0x91c>
80008f1c:	40 91       	lddsp	r1,sp[0x24]
80008f1e:	c0 98       	rjmp	80008f30 <_dtoa_r+0x92c>
80008f20:	08 9b       	mov	r11,r4
80008f22:	40 91       	lddsp	r1,sp[0x24]
80008f24:	30 09       	mov	r9,0
80008f26:	30 aa       	mov	r10,10
80008f28:	0e 9c       	mov	r12,r7
80008f2a:	e0 a0 0a d1 	rcall	8000a4cc <__multadd>
80008f2e:	18 94       	mov	r4,r12
80008f30:	58 01       	cp.w	r1,0
80008f32:	5f a9       	srle	r9
80008f34:	40 cb       	lddsp	r11,sp[0x30]
80008f36:	58 2b       	cp.w	r11,2
80008f38:	5f 98       	srgt	r8
80008f3a:	f3 e8 00 08 	and	r8,r9,r8
80008f3e:	c2 50       	breq	80008f88 <_dtoa_r+0x984>
80008f40:	58 01       	cp.w	r1,0
80008f42:	c1 11       	brne	80008f64 <_dtoa_r+0x960>
80008f44:	04 9b       	mov	r11,r2
80008f46:	02 99       	mov	r9,r1
80008f48:	30 5a       	mov	r10,5
80008f4a:	0e 9c       	mov	r12,r7
80008f4c:	e0 a0 0a c0 	rcall	8000a4cc <__multadd>
80008f50:	18 92       	mov	r2,r12
80008f52:	18 9b       	mov	r11,r12
80008f54:	06 9c       	mov	r12,r3
80008f56:	e0 a0 08 cb 	rcall	8000a0ec <__mcmp>
80008f5a:	e0 89 00 0f 	brgt	80008f78 <_dtoa_r+0x974>
80008f5e:	c0 38       	rjmp	80008f64 <_dtoa_r+0x960>
80008f60:	30 02       	mov	r2,0
80008f62:	04 94       	mov	r4,r2
80008f64:	40 ea       	lddsp	r10,sp[0x38]
80008f66:	30 09       	mov	r9,0
80008f68:	5c da       	com	r10
80008f6a:	40 85       	lddsp	r5,sp[0x20]
80008f6c:	50 6a       	stdsp	sp[0x18],r10
80008f6e:	50 49       	stdsp	sp[0x10],r9
80008f70:	c0 f9       	rjmp	8000918e <_dtoa_r+0xb8a>
80008f72:	08 92       	mov	r2,r4
80008f74:	40 66       	lddsp	r6,sp[0x18]
80008f76:	04 94       	mov	r4,r2
80008f78:	2f f6       	sub	r6,-1
80008f7a:	50 66       	stdsp	sp[0x18],r6
80008f7c:	33 18       	mov	r8,49
80008f7e:	40 85       	lddsp	r5,sp[0x20]
80008f80:	0a c8       	st.b	r5++,r8
80008f82:	30 08       	mov	r8,0
80008f84:	50 48       	stdsp	sp[0x10],r8
80008f86:	c0 49       	rjmp	8000918e <_dtoa_r+0xb8a>
80008f88:	40 dc       	lddsp	r12,sp[0x34]
80008f8a:	58 0c       	cp.w	r12,0
80008f8c:	e0 80 00 b5 	breq	800090f6 <_dtoa_r+0xaf2>
80008f90:	58 05       	cp.w	r5,0
80008f92:	e0 8a 00 08 	brle	80008fa2 <_dtoa_r+0x99e>
80008f96:	08 9b       	mov	r11,r4
80008f98:	0a 9a       	mov	r10,r5
80008f9a:	0e 9c       	mov	r12,r7
80008f9c:	e0 a0 09 cc 	rcall	8000a334 <__lshift>
80008fa0:	18 94       	mov	r4,r12
80008fa2:	40 6b       	lddsp	r11,sp[0x18]
80008fa4:	58 0b       	cp.w	r11,0
80008fa6:	c0 31       	brne	80008fac <_dtoa_r+0x9a8>
80008fa8:	08 9c       	mov	r12,r4
80008faa:	c1 38       	rjmp	80008fd0 <_dtoa_r+0x9cc>
80008fac:	68 1b       	ld.w	r11,r4[0x4]
80008fae:	0e 9c       	mov	r12,r7
80008fb0:	e0 a0 08 d2 	rcall	8000a154 <_Balloc>
80008fb4:	68 4a       	ld.w	r10,r4[0x10]
80008fb6:	18 95       	mov	r5,r12
80008fb8:	e8 cb ff f4 	sub	r11,r4,-12
80008fbc:	2f ea       	sub	r10,-2
80008fbe:	2f 4c       	sub	r12,-12
80008fc0:	a3 6a       	lsl	r10,0x2
80008fc2:	e0 a0 07 52 	rcall	80009e66 <memcpy>
80008fc6:	0a 9b       	mov	r11,r5
80008fc8:	30 1a       	mov	r10,1
80008fca:	0e 9c       	mov	r12,r7
80008fcc:	e0 a0 09 b4 	rcall	8000a334 <__lshift>
80008fd0:	50 44       	stdsp	sp[0x10],r4
80008fd2:	40 3a       	lddsp	r10,sp[0xc]
80008fd4:	30 19       	mov	r9,1
80008fd6:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008fda:	18 94       	mov	r4,r12
80008fdc:	50 da       	stdsp	sp[0x34],r10
80008fde:	40 85       	lddsp	r5,sp[0x20]
80008fe0:	50 99       	stdsp	sp[0x24],r9
80008fe2:	50 26       	stdsp	sp[0x8],r6
80008fe4:	50 e1       	stdsp	sp[0x38],r1
80008fe6:	04 9b       	mov	r11,r2
80008fe8:	06 9c       	mov	r12,r3
80008fea:	fe b0 fa 7d 	rcall	800084e4 <quorem>
80008fee:	40 4b       	lddsp	r11,sp[0x10]
80008ff0:	f8 c0 ff d0 	sub	r0,r12,-48
80008ff4:	06 9c       	mov	r12,r3
80008ff6:	e0 a0 08 7b 	rcall	8000a0ec <__mcmp>
80008ffa:	08 9a       	mov	r10,r4
80008ffc:	50 6c       	stdsp	sp[0x18],r12
80008ffe:	04 9b       	mov	r11,r2
80009000:	0e 9c       	mov	r12,r7
80009002:	e0 a0 09 31 	rcall	8000a264 <__mdiff>
80009006:	18 91       	mov	r1,r12
80009008:	78 38       	ld.w	r8,r12[0xc]
8000900a:	58 08       	cp.w	r8,0
8000900c:	c0 30       	breq	80009012 <_dtoa_r+0xa0e>
8000900e:	30 16       	mov	r6,1
80009010:	c0 68       	rjmp	8000901c <_dtoa_r+0xa18>
80009012:	18 9b       	mov	r11,r12
80009014:	06 9c       	mov	r12,r3
80009016:	e0 a0 08 6b 	rcall	8000a0ec <__mcmp>
8000901a:	18 96       	mov	r6,r12
8000901c:	0e 9c       	mov	r12,r7
8000901e:	02 9b       	mov	r11,r1
80009020:	e0 a0 08 80 	rcall	8000a120 <_Bfree>
80009024:	40 cc       	lddsp	r12,sp[0x30]
80009026:	ed ec 10 08 	or	r8,r6,r12
8000902a:	c0 d1       	brne	80009044 <_dtoa_r+0xa40>
8000902c:	40 db       	lddsp	r11,sp[0x34]
8000902e:	58 0b       	cp.w	r11,0
80009030:	c0 a1       	brne	80009044 <_dtoa_r+0xa40>
80009032:	40 26       	lddsp	r6,sp[0x8]
80009034:	e0 40 00 39 	cp.w	r0,57
80009038:	c3 00       	breq	80009098 <_dtoa_r+0xa94>
8000903a:	40 6a       	lddsp	r10,sp[0x18]
8000903c:	58 0a       	cp.w	r10,0
8000903e:	e0 89 00 24 	brgt	80009086 <_dtoa_r+0xa82>
80009042:	c2 f8       	rjmp	800090a0 <_dtoa_r+0xa9c>
80009044:	40 69       	lddsp	r9,sp[0x18]
80009046:	58 09       	cp.w	r9,0
80009048:	c0 85       	brlt	80009058 <_dtoa_r+0xa54>
8000904a:	12 98       	mov	r8,r9
8000904c:	40 cc       	lddsp	r12,sp[0x30]
8000904e:	18 48       	or	r8,r12
80009050:	c1 d1       	brne	8000908a <_dtoa_r+0xa86>
80009052:	40 db       	lddsp	r11,sp[0x34]
80009054:	58 0b       	cp.w	r11,0
80009056:	c1 a1       	brne	8000908a <_dtoa_r+0xa86>
80009058:	0c 99       	mov	r9,r6
8000905a:	40 26       	lddsp	r6,sp[0x8]
8000905c:	58 09       	cp.w	r9,0
8000905e:	e0 8a 00 21 	brle	800090a0 <_dtoa_r+0xa9c>
80009062:	06 9b       	mov	r11,r3
80009064:	30 1a       	mov	r10,1
80009066:	0e 9c       	mov	r12,r7
80009068:	e0 a0 09 66 	rcall	8000a334 <__lshift>
8000906c:	04 9b       	mov	r11,r2
8000906e:	18 93       	mov	r3,r12
80009070:	e0 a0 08 3e 	rcall	8000a0ec <__mcmp>
80009074:	e0 89 00 06 	brgt	80009080 <_dtoa_r+0xa7c>
80009078:	c1 41       	brne	800090a0 <_dtoa_r+0xa9c>
8000907a:	ed b0 00 00 	bld	r0,0x0
8000907e:	c1 11       	brne	800090a0 <_dtoa_r+0xa9c>
80009080:	e0 40 00 39 	cp.w	r0,57
80009084:	c0 a0       	breq	80009098 <_dtoa_r+0xa94>
80009086:	2f f0       	sub	r0,-1
80009088:	c0 c8       	rjmp	800090a0 <_dtoa_r+0xa9c>
8000908a:	58 06       	cp.w	r6,0
8000908c:	e0 8a 00 0c 	brle	800090a4 <_dtoa_r+0xaa0>
80009090:	40 26       	lddsp	r6,sp[0x8]
80009092:	e0 40 00 39 	cp.w	r0,57
80009096:	c0 41       	brne	8000909e <_dtoa_r+0xa9a>
80009098:	33 98       	mov	r8,57
8000909a:	0a c8       	st.b	r5++,r8
8000909c:	c6 78       	rjmp	8000916a <_dtoa_r+0xb66>
8000909e:	2f f0       	sub	r0,-1
800090a0:	0a c0       	st.b	r5++,r0
800090a2:	c7 58       	rjmp	8000918c <_dtoa_r+0xb88>
800090a4:	0a c0       	st.b	r5++,r0
800090a6:	40 9a       	lddsp	r10,sp[0x24]
800090a8:	40 e9       	lddsp	r9,sp[0x38]
800090aa:	12 3a       	cp.w	r10,r9
800090ac:	c4 30       	breq	80009132 <_dtoa_r+0xb2e>
800090ae:	06 9b       	mov	r11,r3
800090b0:	30 09       	mov	r9,0
800090b2:	30 aa       	mov	r10,10
800090b4:	0e 9c       	mov	r12,r7
800090b6:	e0 a0 0a 0b 	rcall	8000a4cc <__multadd>
800090ba:	40 48       	lddsp	r8,sp[0x10]
800090bc:	18 93       	mov	r3,r12
800090be:	08 38       	cp.w	r8,r4
800090c0:	c0 91       	brne	800090d2 <_dtoa_r+0xace>
800090c2:	10 9b       	mov	r11,r8
800090c4:	30 09       	mov	r9,0
800090c6:	30 aa       	mov	r10,10
800090c8:	0e 9c       	mov	r12,r7
800090ca:	e0 a0 0a 01 	rcall	8000a4cc <__multadd>
800090ce:	50 4c       	stdsp	sp[0x10],r12
800090d0:	c0 e8       	rjmp	800090ec <_dtoa_r+0xae8>
800090d2:	40 4b       	lddsp	r11,sp[0x10]
800090d4:	30 09       	mov	r9,0
800090d6:	30 aa       	mov	r10,10
800090d8:	0e 9c       	mov	r12,r7
800090da:	e0 a0 09 f9 	rcall	8000a4cc <__multadd>
800090de:	08 9b       	mov	r11,r4
800090e0:	50 4c       	stdsp	sp[0x10],r12
800090e2:	30 09       	mov	r9,0
800090e4:	30 aa       	mov	r10,10
800090e6:	0e 9c       	mov	r12,r7
800090e8:	e0 a0 09 f2 	rcall	8000a4cc <__multadd>
800090ec:	18 94       	mov	r4,r12
800090ee:	40 9c       	lddsp	r12,sp[0x24]
800090f0:	2f fc       	sub	r12,-1
800090f2:	50 9c       	stdsp	sp[0x24],r12
800090f4:	c7 9b       	rjmp	80008fe6 <_dtoa_r+0x9e2>
800090f6:	30 18       	mov	r8,1
800090f8:	06 90       	mov	r0,r3
800090fa:	40 85       	lddsp	r5,sp[0x20]
800090fc:	08 93       	mov	r3,r4
800090fe:	0c 94       	mov	r4,r6
80009100:	10 96       	mov	r6,r8
80009102:	04 9b       	mov	r11,r2
80009104:	00 9c       	mov	r12,r0
80009106:	fe b0 f9 ef 	rcall	800084e4 <quorem>
8000910a:	2d 0c       	sub	r12,-48
8000910c:	0a cc       	st.b	r5++,r12
8000910e:	02 36       	cp.w	r6,r1
80009110:	c0 a4       	brge	80009124 <_dtoa_r+0xb20>
80009112:	00 9b       	mov	r11,r0
80009114:	30 09       	mov	r9,0
80009116:	30 aa       	mov	r10,10
80009118:	0e 9c       	mov	r12,r7
8000911a:	2f f6       	sub	r6,-1
8000911c:	e0 a0 09 d8 	rcall	8000a4cc <__multadd>
80009120:	18 90       	mov	r0,r12
80009122:	cf 0b       	rjmp	80009102 <_dtoa_r+0xafe>
80009124:	08 96       	mov	r6,r4
80009126:	30 0b       	mov	r11,0
80009128:	06 94       	mov	r4,r3
8000912a:	50 4b       	stdsp	sp[0x10],r11
8000912c:	00 93       	mov	r3,r0
8000912e:	18 90       	mov	r0,r12
80009130:	c0 28       	rjmp	80009134 <_dtoa_r+0xb30>
80009132:	40 26       	lddsp	r6,sp[0x8]
80009134:	06 9b       	mov	r11,r3
80009136:	30 1a       	mov	r10,1
80009138:	0e 9c       	mov	r12,r7
8000913a:	e0 a0 08 fd 	rcall	8000a334 <__lshift>
8000913e:	04 9b       	mov	r11,r2
80009140:	18 93       	mov	r3,r12
80009142:	e0 a0 07 d5 	rcall	8000a0ec <__mcmp>
80009146:	e0 89 00 12 	brgt	8000916a <_dtoa_r+0xb66>
8000914a:	c1 b1       	brne	80009180 <_dtoa_r+0xb7c>
8000914c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80009150:	c0 d1       	brne	8000916a <_dtoa_r+0xb66>
80009152:	c1 78       	rjmp	80009180 <_dtoa_r+0xb7c>
80009154:	40 89       	lddsp	r9,sp[0x20]
80009156:	12 38       	cp.w	r8,r9
80009158:	c0 30       	breq	8000915e <_dtoa_r+0xb5a>
8000915a:	10 95       	mov	r5,r8
8000915c:	c0 88       	rjmp	8000916c <_dtoa_r+0xb68>
8000915e:	2f f6       	sub	r6,-1
80009160:	50 66       	stdsp	sp[0x18],r6
80009162:	33 18       	mov	r8,49
80009164:	40 8c       	lddsp	r12,sp[0x20]
80009166:	b8 88       	st.b	r12[0x0],r8
80009168:	c1 38       	rjmp	8000918e <_dtoa_r+0xb8a>
8000916a:	33 9a       	mov	r10,57
8000916c:	0a 98       	mov	r8,r5
8000916e:	11 79       	ld.ub	r9,--r8
80009170:	f4 09 18 00 	cp.b	r9,r10
80009174:	cf 00       	breq	80009154 <_dtoa_r+0xb50>
80009176:	2f f9       	sub	r9,-1
80009178:	b0 89       	st.b	r8[0x0],r9
8000917a:	c0 98       	rjmp	8000918c <_dtoa_r+0xb88>
8000917c:	10 95       	mov	r5,r8
8000917e:	c0 28       	rjmp	80009182 <_dtoa_r+0xb7e>
80009180:	33 09       	mov	r9,48
80009182:	0a 98       	mov	r8,r5
80009184:	11 7a       	ld.ub	r10,--r8
80009186:	f2 0a 18 00 	cp.b	r10,r9
8000918a:	cf 90       	breq	8000917c <_dtoa_r+0xb78>
8000918c:	50 66       	stdsp	sp[0x18],r6
8000918e:	04 9b       	mov	r11,r2
80009190:	0e 9c       	mov	r12,r7
80009192:	e0 a0 07 c7 	rcall	8000a120 <_Bfree>
80009196:	58 04       	cp.w	r4,0
80009198:	c1 20       	breq	800091bc <_dtoa_r+0xbb8>
8000919a:	40 4b       	lddsp	r11,sp[0x10]
8000919c:	08 3b       	cp.w	r11,r4
8000919e:	5f 19       	srne	r9
800091a0:	58 0b       	cp.w	r11,0
800091a2:	5f 18       	srne	r8
800091a4:	f3 e8 00 08 	and	r8,r9,r8
800091a8:	c0 40       	breq	800091b0 <_dtoa_r+0xbac>
800091aa:	0e 9c       	mov	r12,r7
800091ac:	e0 a0 07 ba 	rcall	8000a120 <_Bfree>
800091b0:	08 9b       	mov	r11,r4
800091b2:	0e 9c       	mov	r12,r7
800091b4:	e0 a0 07 b6 	rcall	8000a120 <_Bfree>
800091b8:	c0 28       	rjmp	800091bc <_dtoa_r+0xbb8>
800091ba:	50 66       	stdsp	sp[0x18],r6
800091bc:	0e 9c       	mov	r12,r7
800091be:	06 9b       	mov	r11,r3
800091c0:	e0 a0 07 b0 	rcall	8000a120 <_Bfree>
800091c4:	30 08       	mov	r8,0
800091c6:	aa 88       	st.b	r5[0x0],r8
800091c8:	40 68       	lddsp	r8,sp[0x18]
800091ca:	41 5a       	lddsp	r10,sp[0x54]
800091cc:	2f f8       	sub	r8,-1
800091ce:	41 29       	lddsp	r9,sp[0x48]
800091d0:	95 08       	st.w	r10[0x0],r8
800091d2:	40 8c       	lddsp	r12,sp[0x20]
800091d4:	58 09       	cp.w	r9,0
800091d6:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800091da:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800091de:	2e 6d       	sub	sp,-104
800091e0:	d8 32       	popm	r0-r7,pc
800091e2:	d7 03       	nop

800091e4 <_fflush_r>:
800091e4:	d4 21       	pushm	r4-r7,lr
800091e6:	16 97       	mov	r7,r11
800091e8:	18 96       	mov	r6,r12
800091ea:	76 48       	ld.w	r8,r11[0x10]
800091ec:	58 08       	cp.w	r8,0
800091ee:	c7 c0       	breq	800092e6 <_fflush_r+0x102>
800091f0:	58 0c       	cp.w	r12,0
800091f2:	c0 50       	breq	800091fc <_fflush_r+0x18>
800091f4:	78 68       	ld.w	r8,r12[0x18]
800091f6:	58 08       	cp.w	r8,0
800091f8:	c0 21       	brne	800091fc <_fflush_r+0x18>
800091fa:	cd 1c       	rcall	8000939c <__sinit>
800091fc:	4b b8       	lddpc	r8,800092e8 <_fflush_r+0x104>
800091fe:	10 37       	cp.w	r7,r8
80009200:	c0 31       	brne	80009206 <_fflush_r+0x22>
80009202:	6c 07       	ld.w	r7,r6[0x0]
80009204:	c0 a8       	rjmp	80009218 <_fflush_r+0x34>
80009206:	4b a8       	lddpc	r8,800092ec <_fflush_r+0x108>
80009208:	10 37       	cp.w	r7,r8
8000920a:	c0 31       	brne	80009210 <_fflush_r+0x2c>
8000920c:	6c 17       	ld.w	r7,r6[0x4]
8000920e:	c0 58       	rjmp	80009218 <_fflush_r+0x34>
80009210:	4b 88       	lddpc	r8,800092f0 <_fflush_r+0x10c>
80009212:	10 37       	cp.w	r7,r8
80009214:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80009218:	8e 6a       	ld.sh	r10,r7[0xc]
8000921a:	14 98       	mov	r8,r10
8000921c:	ed ba 00 03 	bld	r10,0x3
80009220:	c4 20       	breq	800092a4 <_fflush_r+0xc0>
80009222:	ab ba       	sbr	r10,0xb
80009224:	ae 6a       	st.h	r7[0xc],r10
80009226:	6e 18       	ld.w	r8,r7[0x4]
80009228:	58 08       	cp.w	r8,0
8000922a:	e0 89 00 06 	brgt	80009236 <_fflush_r+0x52>
8000922e:	6f 08       	ld.w	r8,r7[0x40]
80009230:	58 08       	cp.w	r8,0
80009232:	e0 8a 00 5a 	brle	800092e6 <_fflush_r+0x102>
80009236:	6e b8       	ld.w	r8,r7[0x2c]
80009238:	58 08       	cp.w	r8,0
8000923a:	c5 60       	breq	800092e6 <_fflush_r+0x102>
8000923c:	e2 1a 10 00 	andl	r10,0x1000,COH
80009240:	c0 30       	breq	80009246 <_fflush_r+0x62>
80009242:	6f 55       	ld.w	r5,r7[0x54]
80009244:	c0 f8       	rjmp	80009262 <_fflush_r+0x7e>
80009246:	30 19       	mov	r9,1
80009248:	6e 8b       	ld.w	r11,r7[0x20]
8000924a:	0c 9c       	mov	r12,r6
8000924c:	5d 18       	icall	r8
8000924e:	18 95       	mov	r5,r12
80009250:	5b fc       	cp.w	r12,-1
80009252:	c0 81       	brne	80009262 <_fflush_r+0x7e>
80009254:	6c 38       	ld.w	r8,r6[0xc]
80009256:	59 d8       	cp.w	r8,29
80009258:	c4 70       	breq	800092e6 <_fflush_r+0x102>
8000925a:	8e 68       	ld.sh	r8,r7[0xc]
8000925c:	a7 a8       	sbr	r8,0x6
8000925e:	ae 68       	st.h	r7[0xc],r8
80009260:	d8 22       	popm	r4-r7,pc
80009262:	8e 68       	ld.sh	r8,r7[0xc]
80009264:	ed b8 00 02 	bld	r8,0x2
80009268:	c0 91       	brne	8000927a <_fflush_r+0x96>
8000926a:	6e 18       	ld.w	r8,r7[0x4]
8000926c:	10 15       	sub	r5,r8
8000926e:	6e d8       	ld.w	r8,r7[0x34]
80009270:	58 08       	cp.w	r8,0
80009272:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80009276:	eb d8 e1 15 	subne	r5,r5,r8
8000927a:	6e b8       	ld.w	r8,r7[0x2c]
8000927c:	0c 9c       	mov	r12,r6
8000927e:	30 09       	mov	r9,0
80009280:	0a 9a       	mov	r10,r5
80009282:	6e 8b       	ld.w	r11,r7[0x20]
80009284:	5d 18       	icall	r8
80009286:	8e 68       	ld.sh	r8,r7[0xc]
80009288:	0a 3c       	cp.w	r12,r5
8000928a:	c2 61       	brne	800092d6 <_fflush_r+0xf2>
8000928c:	ab d8       	cbr	r8,0xb
8000928e:	30 0c       	mov	r12,0
80009290:	6e 49       	ld.w	r9,r7[0x10]
80009292:	ae 68       	st.h	r7[0xc],r8
80009294:	8f 1c       	st.w	r7[0x4],r12
80009296:	8f 09       	st.w	r7[0x0],r9
80009298:	ed b8 00 0c 	bld	r8,0xc
8000929c:	c2 51       	brne	800092e6 <_fflush_r+0x102>
8000929e:	ef 45 00 54 	st.w	r7[84],r5
800092a2:	d8 22       	popm	r4-r7,pc
800092a4:	6e 45       	ld.w	r5,r7[0x10]
800092a6:	58 05       	cp.w	r5,0
800092a8:	c1 f0       	breq	800092e6 <_fflush_r+0x102>
800092aa:	6e 04       	ld.w	r4,r7[0x0]
800092ac:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800092b0:	8f 05       	st.w	r7[0x0],r5
800092b2:	f9 b8 01 00 	movne	r8,0
800092b6:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800092ba:	0a 14       	sub	r4,r5
800092bc:	8f 28       	st.w	r7[0x8],r8
800092be:	c1 18       	rjmp	800092e0 <_fflush_r+0xfc>
800092c0:	08 99       	mov	r9,r4
800092c2:	0a 9a       	mov	r10,r5
800092c4:	6e a8       	ld.w	r8,r7[0x28]
800092c6:	6e 8b       	ld.w	r11,r7[0x20]
800092c8:	0c 9c       	mov	r12,r6
800092ca:	5d 18       	icall	r8
800092cc:	18 14       	sub	r4,r12
800092ce:	58 0c       	cp.w	r12,0
800092d0:	e0 89 00 07 	brgt	800092de <_fflush_r+0xfa>
800092d4:	8e 68       	ld.sh	r8,r7[0xc]
800092d6:	a7 a8       	sbr	r8,0x6
800092d8:	3f fc       	mov	r12,-1
800092da:	ae 68       	st.h	r7[0xc],r8
800092dc:	d8 22       	popm	r4-r7,pc
800092de:	18 05       	add	r5,r12
800092e0:	58 04       	cp.w	r4,0
800092e2:	fe 99 ff ef 	brgt	800092c0 <_fflush_r+0xdc>
800092e6:	d8 2a       	popm	r4-r7,pc,r12=0
800092e8:	80 00       	ld.sh	r0,r0[0x0]
800092ea:	cb 88       	rjmp	8000945a <_malloc_trim_r+0x22>
800092ec:	80 00       	ld.sh	r0,r0[0x0]
800092ee:	cb a8       	rjmp	80009462 <_malloc_trim_r+0x2a>
800092f0:	80 00       	ld.sh	r0,r0[0x0]
800092f2:	cb c8       	rjmp	8000946a <_malloc_trim_r+0x32>

800092f4 <__sfp_lock_acquire>:
800092f4:	5e fc       	retal	r12

800092f6 <__sfp_lock_release>:
800092f6:	5e fc       	retal	r12

800092f8 <_cleanup_r>:
800092f8:	d4 01       	pushm	lr
800092fa:	fe cb e6 ee 	sub	r11,pc,-6418
800092fe:	e0 a0 03 03 	rcall	80009904 <_fwalk>
80009302:	d8 02       	popm	pc

80009304 <__sfmoreglue>:
80009304:	d4 21       	pushm	r4-r7,lr
80009306:	16 95       	mov	r5,r11
80009308:	f6 06 10 5c 	mul	r6,r11,92
8000930c:	ec cb ff f4 	sub	r11,r6,-12
80009310:	e0 a0 03 8a 	rcall	80009a24 <_malloc_r>
80009314:	18 97       	mov	r7,r12
80009316:	c0 90       	breq	80009328 <__sfmoreglue+0x24>
80009318:	99 15       	st.w	r12[0x4],r5
8000931a:	30 0b       	mov	r11,0
8000931c:	2f 4c       	sub	r12,-12
8000931e:	0c 9a       	mov	r10,r6
80009320:	8f 2c       	st.w	r7[0x8],r12
80009322:	8f 0b       	st.w	r7[0x0],r11
80009324:	e0 a0 06 64 	rcall	80009fec <memset>
80009328:	0e 9c       	mov	r12,r7
8000932a:	d8 22       	popm	r4-r7,pc

8000932c <__sfp>:
8000932c:	d4 21       	pushm	r4-r7,lr
8000932e:	49 b8       	lddpc	r8,80009398 <__sfp+0x6c>
80009330:	18 96       	mov	r6,r12
80009332:	70 07       	ld.w	r7,r8[0x0]
80009334:	6e 68       	ld.w	r8,r7[0x18]
80009336:	58 08       	cp.w	r8,0
80009338:	c0 31       	brne	8000933e <__sfp+0x12>
8000933a:	0e 9c       	mov	r12,r7
8000933c:	c3 0c       	rcall	8000939c <__sinit>
8000933e:	ee c7 ff 28 	sub	r7,r7,-216
80009342:	30 05       	mov	r5,0
80009344:	6e 2c       	ld.w	r12,r7[0x8]
80009346:	6e 18       	ld.w	r8,r7[0x4]
80009348:	c0 68       	rjmp	80009354 <__sfp+0x28>
8000934a:	98 69       	ld.sh	r9,r12[0xc]
8000934c:	ea 09 19 00 	cp.h	r9,r5
80009350:	c1 10       	breq	80009372 <__sfp+0x46>
80009352:	2a 4c       	sub	r12,-92
80009354:	20 18       	sub	r8,1
80009356:	cf a7       	brpl	8000934a <__sfp+0x1e>
80009358:	6e 08       	ld.w	r8,r7[0x0]
8000935a:	58 08       	cp.w	r8,0
8000935c:	c0 61       	brne	80009368 <__sfp+0x3c>
8000935e:	30 4b       	mov	r11,4
80009360:	0c 9c       	mov	r12,r6
80009362:	cd 1f       	rcall	80009304 <__sfmoreglue>
80009364:	8f 0c       	st.w	r7[0x0],r12
80009366:	c0 30       	breq	8000936c <__sfp+0x40>
80009368:	6e 07       	ld.w	r7,r7[0x0]
8000936a:	ce db       	rjmp	80009344 <__sfp+0x18>
8000936c:	30 c8       	mov	r8,12
8000936e:	8d 38       	st.w	r6[0xc],r8
80009370:	d8 22       	popm	r4-r7,pc
80009372:	30 08       	mov	r8,0
80009374:	f9 48 00 4c 	st.w	r12[76],r8
80009378:	99 08       	st.w	r12[0x0],r8
8000937a:	99 28       	st.w	r12[0x8],r8
8000937c:	99 18       	st.w	r12[0x4],r8
8000937e:	99 48       	st.w	r12[0x10],r8
80009380:	99 58       	st.w	r12[0x14],r8
80009382:	99 68       	st.w	r12[0x18],r8
80009384:	99 d8       	st.w	r12[0x34],r8
80009386:	99 e8       	st.w	r12[0x38],r8
80009388:	f9 48 00 48 	st.w	r12[72],r8
8000938c:	3f f8       	mov	r8,-1
8000938e:	b8 78       	st.h	r12[0xe],r8
80009390:	30 18       	mov	r8,1
80009392:	b8 68       	st.h	r12[0xc],r8
80009394:	d8 22       	popm	r4-r7,pc
80009396:	d7 03       	nop
80009398:	80 00       	ld.sh	r0,r0[0x0]
8000939a:	cb ec       	rcall	80009516 <_free_r+0x42>

8000939c <__sinit>:
8000939c:	d4 21       	pushm	r4-r7,lr
8000939e:	18 96       	mov	r6,r12
800093a0:	78 67       	ld.w	r7,r12[0x18]
800093a2:	58 07       	cp.w	r7,0
800093a4:	c4 91       	brne	80009436 <__sinit+0x9a>
800093a6:	fe c8 00 ae 	sub	r8,pc,174
800093aa:	30 15       	mov	r5,1
800093ac:	99 a8       	st.w	r12[0x28],r8
800093ae:	f9 47 00 d8 	st.w	r12[216],r7
800093b2:	f9 47 00 dc 	st.w	r12[220],r7
800093b6:	f9 47 00 e0 	st.w	r12[224],r7
800093ba:	99 65       	st.w	r12[0x18],r5
800093bc:	cb 8f       	rcall	8000932c <__sfp>
800093be:	8d 0c       	st.w	r6[0x0],r12
800093c0:	0c 9c       	mov	r12,r6
800093c2:	cb 5f       	rcall	8000932c <__sfp>
800093c4:	8d 1c       	st.w	r6[0x4],r12
800093c6:	0c 9c       	mov	r12,r6
800093c8:	cb 2f       	rcall	8000932c <__sfp>
800093ca:	6c 09       	ld.w	r9,r6[0x0]
800093cc:	30 48       	mov	r8,4
800093ce:	93 07       	st.w	r9[0x0],r7
800093d0:	b2 68       	st.h	r9[0xc],r8
800093d2:	93 17       	st.w	r9[0x4],r7
800093d4:	93 27       	st.w	r9[0x8],r7
800093d6:	6c 18       	ld.w	r8,r6[0x4]
800093d8:	b2 77       	st.h	r9[0xe],r7
800093da:	93 47       	st.w	r9[0x10],r7
800093dc:	93 57       	st.w	r9[0x14],r7
800093de:	93 67       	st.w	r9[0x18],r7
800093e0:	93 89       	st.w	r9[0x20],r9
800093e2:	91 07       	st.w	r8[0x0],r7
800093e4:	91 17       	st.w	r8[0x4],r7
800093e6:	91 27       	st.w	r8[0x8],r7
800093e8:	fe ce ea 90 	sub	lr,pc,-5488
800093ec:	fe cb ea c0 	sub	r11,pc,-5440
800093f0:	93 9e       	st.w	r9[0x24],lr
800093f2:	93 ab       	st.w	r9[0x28],r11
800093f4:	fe ca ea e8 	sub	r10,pc,-5400
800093f8:	fe c4 ea f4 	sub	r4,pc,-5388
800093fc:	93 ba       	st.w	r9[0x2c],r10
800093fe:	93 c4       	st.w	r9[0x30],r4
80009400:	30 99       	mov	r9,9
80009402:	b0 69       	st.h	r8[0xc],r9
80009404:	b0 75       	st.h	r8[0xe],r5
80009406:	91 c4       	st.w	r8[0x30],r4
80009408:	91 47       	st.w	r8[0x10],r7
8000940a:	91 57       	st.w	r8[0x14],r7
8000940c:	91 67       	st.w	r8[0x18],r7
8000940e:	91 88       	st.w	r8[0x20],r8
80009410:	91 9e       	st.w	r8[0x24],lr
80009412:	91 ab       	st.w	r8[0x28],r11
80009414:	91 ba       	st.w	r8[0x2c],r10
80009416:	8d 2c       	st.w	r6[0x8],r12
80009418:	31 28       	mov	r8,18
8000941a:	99 07       	st.w	r12[0x0],r7
8000941c:	b8 68       	st.h	r12[0xc],r8
8000941e:	99 17       	st.w	r12[0x4],r7
80009420:	99 27       	st.w	r12[0x8],r7
80009422:	30 28       	mov	r8,2
80009424:	b8 78       	st.h	r12[0xe],r8
80009426:	99 c4       	st.w	r12[0x30],r4
80009428:	99 67       	st.w	r12[0x18],r7
8000942a:	99 9e       	st.w	r12[0x24],lr
8000942c:	99 ab       	st.w	r12[0x28],r11
8000942e:	99 ba       	st.w	r12[0x2c],r10
80009430:	99 47       	st.w	r12[0x10],r7
80009432:	99 57       	st.w	r12[0x14],r7
80009434:	99 8c       	st.w	r12[0x20],r12
80009436:	d8 22       	popm	r4-r7,pc

80009438 <_malloc_trim_r>:
80009438:	d4 21       	pushm	r4-r7,lr
8000943a:	16 95       	mov	r5,r11
8000943c:	18 97       	mov	r7,r12
8000943e:	e0 a0 05 de 	rcall	80009ffa <__malloc_lock>
80009442:	4a 24       	lddpc	r4,800094c8 <_malloc_trim_r+0x90>
80009444:	68 28       	ld.w	r8,r4[0x8]
80009446:	70 16       	ld.w	r6,r8[0x4]
80009448:	e0 16 ff fc 	andl	r6,0xfffc
8000944c:	ec c8 ff 91 	sub	r8,r6,-111
80009450:	f0 05 01 05 	sub	r5,r8,r5
80009454:	e0 15 ff 80 	andl	r5,0xff80
80009458:	ea c5 00 80 	sub	r5,r5,128
8000945c:	e0 45 00 7f 	cp.w	r5,127
80009460:	e0 8a 00 23 	brle	800094a6 <_malloc_trim_r+0x6e>
80009464:	30 0b       	mov	r11,0
80009466:	0e 9c       	mov	r12,r7
80009468:	e0 a0 0a 3e 	rcall	8000a8e4 <_sbrk_r>
8000946c:	68 28       	ld.w	r8,r4[0x8]
8000946e:	0c 08       	add	r8,r6
80009470:	10 3c       	cp.w	r12,r8
80009472:	c1 a1       	brne	800094a6 <_malloc_trim_r+0x6e>
80009474:	ea 0b 11 00 	rsub	r11,r5,0
80009478:	0e 9c       	mov	r12,r7
8000947a:	e0 a0 0a 35 	rcall	8000a8e4 <_sbrk_r>
8000947e:	5b fc       	cp.w	r12,-1
80009480:	c1 71       	brne	800094ae <_malloc_trim_r+0x76>
80009482:	30 0b       	mov	r11,0
80009484:	0e 9c       	mov	r12,r7
80009486:	e0 a0 0a 2f 	rcall	8000a8e4 <_sbrk_r>
8000948a:	68 28       	ld.w	r8,r4[0x8]
8000948c:	f8 08 01 09 	sub	r9,r12,r8
80009490:	58 f9       	cp.w	r9,15
80009492:	e0 8a 00 0a 	brle	800094a6 <_malloc_trim_r+0x6e>
80009496:	a1 a9       	sbr	r9,0x0
80009498:	91 19       	st.w	r8[0x4],r9
8000949a:	48 d8       	lddpc	r8,800094cc <_malloc_trim_r+0x94>
8000949c:	70 09       	ld.w	r9,r8[0x0]
8000949e:	48 d8       	lddpc	r8,800094d0 <_malloc_trim_r+0x98>
800094a0:	f8 09 01 09 	sub	r9,r12,r9
800094a4:	91 09       	st.w	r8[0x0],r9
800094a6:	0e 9c       	mov	r12,r7
800094a8:	e0 a0 05 aa 	rcall	80009ffc <__malloc_unlock>
800094ac:	d8 2a       	popm	r4-r7,pc,r12=0
800094ae:	68 28       	ld.w	r8,r4[0x8]
800094b0:	0a 16       	sub	r6,r5
800094b2:	a1 a6       	sbr	r6,0x0
800094b4:	91 16       	st.w	r8[0x4],r6
800094b6:	48 78       	lddpc	r8,800094d0 <_malloc_trim_r+0x98>
800094b8:	70 09       	ld.w	r9,r8[0x0]
800094ba:	0a 19       	sub	r9,r5
800094bc:	0e 9c       	mov	r12,r7
800094be:	91 09       	st.w	r8[0x0],r9
800094c0:	e0 a0 05 9e 	rcall	80009ffc <__malloc_unlock>
800094c4:	da 2a       	popm	r4-r7,pc,r12=1
800094c6:	d7 03       	nop
800094c8:	00 00       	add	r0,r0
800094ca:	01 00       	ld.w	r0,r0++
800094cc:	00 00       	add	r0,r0
800094ce:	05 0c       	ld.w	r12,r2++
800094d0:	00 00       	add	r0,r0
800094d2:	06 24       	rsub	r4,r3

800094d4 <_free_r>:
800094d4:	d4 21       	pushm	r4-r7,lr
800094d6:	16 96       	mov	r6,r11
800094d8:	18 97       	mov	r7,r12
800094da:	58 0b       	cp.w	r11,0
800094dc:	e0 80 00 c2 	breq	80009660 <_free_r+0x18c>
800094e0:	e0 a0 05 8d 	rcall	80009ffa <__malloc_lock>
800094e4:	20 86       	sub	r6,8
800094e6:	4c ba       	lddpc	r10,80009610 <_free_r+0x13c>
800094e8:	6c 18       	ld.w	r8,r6[0x4]
800094ea:	74 2e       	ld.w	lr,r10[0x8]
800094ec:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800094f0:	a1 c8       	cbr	r8,0x0
800094f2:	ec 08 00 09 	add	r9,r6,r8
800094f6:	72 1b       	ld.w	r11,r9[0x4]
800094f8:	e0 1b ff fc 	andl	r11,0xfffc
800094fc:	1c 39       	cp.w	r9,lr
800094fe:	c1 c1       	brne	80009536 <_free_r+0x62>
80009500:	f6 08 00 08 	add	r8,r11,r8
80009504:	58 0c       	cp.w	r12,0
80009506:	c0 81       	brne	80009516 <_free_r+0x42>
80009508:	6c 09       	ld.w	r9,r6[0x0]
8000950a:	12 16       	sub	r6,r9
8000950c:	12 08       	add	r8,r9
8000950e:	6c 3b       	ld.w	r11,r6[0xc]
80009510:	6c 29       	ld.w	r9,r6[0x8]
80009512:	97 29       	st.w	r11[0x8],r9
80009514:	93 3b       	st.w	r9[0xc],r11
80009516:	10 99       	mov	r9,r8
80009518:	95 26       	st.w	r10[0x8],r6
8000951a:	a1 a9       	sbr	r9,0x0
8000951c:	8d 19       	st.w	r6[0x4],r9
8000951e:	4b e9       	lddpc	r9,80009614 <_free_r+0x140>
80009520:	72 09       	ld.w	r9,r9[0x0]
80009522:	12 38       	cp.w	r8,r9
80009524:	c0 53       	brcs	8000952e <_free_r+0x5a>
80009526:	4b d8       	lddpc	r8,80009618 <_free_r+0x144>
80009528:	0e 9c       	mov	r12,r7
8000952a:	70 0b       	ld.w	r11,r8[0x0]
8000952c:	c8 6f       	rcall	80009438 <_malloc_trim_r>
8000952e:	0e 9c       	mov	r12,r7
80009530:	e0 a0 05 66 	rcall	80009ffc <__malloc_unlock>
80009534:	d8 22       	popm	r4-r7,pc
80009536:	93 1b       	st.w	r9[0x4],r11
80009538:	58 0c       	cp.w	r12,0
8000953a:	c0 30       	breq	80009540 <_free_r+0x6c>
8000953c:	30 0c       	mov	r12,0
8000953e:	c1 08       	rjmp	8000955e <_free_r+0x8a>
80009540:	6c 0e       	ld.w	lr,r6[0x0]
80009542:	f4 c5 ff f8 	sub	r5,r10,-8
80009546:	1c 16       	sub	r6,lr
80009548:	1c 08       	add	r8,lr
8000954a:	6c 2e       	ld.w	lr,r6[0x8]
8000954c:	0a 3e       	cp.w	lr,r5
8000954e:	f9 bc 00 01 	moveq	r12,1
80009552:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80009556:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000955a:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000955e:	f2 0b 00 0e 	add	lr,r9,r11
80009562:	7c 1e       	ld.w	lr,lr[0x4]
80009564:	ed be 00 00 	bld	lr,0x0
80009568:	c1 30       	breq	8000958e <_free_r+0xba>
8000956a:	16 08       	add	r8,r11
8000956c:	58 0c       	cp.w	r12,0
8000956e:	c0 c1       	brne	80009586 <_free_r+0xb2>
80009570:	4a 8e       	lddpc	lr,80009610 <_free_r+0x13c>
80009572:	72 2b       	ld.w	r11,r9[0x8]
80009574:	2f 8e       	sub	lr,-8
80009576:	1c 3b       	cp.w	r11,lr
80009578:	c0 71       	brne	80009586 <_free_r+0xb2>
8000957a:	97 36       	st.w	r11[0xc],r6
8000957c:	97 26       	st.w	r11[0x8],r6
8000957e:	8d 2b       	st.w	r6[0x8],r11
80009580:	8d 3b       	st.w	r6[0xc],r11
80009582:	30 1c       	mov	r12,1
80009584:	c0 58       	rjmp	8000958e <_free_r+0xba>
80009586:	72 2b       	ld.w	r11,r9[0x8]
80009588:	72 39       	ld.w	r9,r9[0xc]
8000958a:	93 2b       	st.w	r9[0x8],r11
8000958c:	97 39       	st.w	r11[0xc],r9
8000958e:	10 99       	mov	r9,r8
80009590:	ec 08 09 08 	st.w	r6[r8],r8
80009594:	a1 a9       	sbr	r9,0x0
80009596:	8d 19       	st.w	r6[0x4],r9
80009598:	58 0c       	cp.w	r12,0
8000959a:	c6 01       	brne	8000965a <_free_r+0x186>
8000959c:	e0 48 01 ff 	cp.w	r8,511
800095a0:	e0 8b 00 13 	brhi	800095c6 <_free_r+0xf2>
800095a4:	a3 98       	lsr	r8,0x3
800095a6:	f4 08 00 39 	add	r9,r10,r8<<0x3
800095aa:	72 2b       	ld.w	r11,r9[0x8]
800095ac:	8d 39       	st.w	r6[0xc],r9
800095ae:	8d 2b       	st.w	r6[0x8],r11
800095b0:	97 36       	st.w	r11[0xc],r6
800095b2:	93 26       	st.w	r9[0x8],r6
800095b4:	a3 48       	asr	r8,0x2
800095b6:	74 19       	ld.w	r9,r10[0x4]
800095b8:	30 1b       	mov	r11,1
800095ba:	f6 08 09 48 	lsl	r8,r11,r8
800095be:	f3 e8 10 08 	or	r8,r9,r8
800095c2:	95 18       	st.w	r10[0x4],r8
800095c4:	c4 b8       	rjmp	8000965a <_free_r+0x186>
800095c6:	f0 0b 16 09 	lsr	r11,r8,0x9
800095ca:	58 4b       	cp.w	r11,4
800095cc:	e0 8b 00 06 	brhi	800095d8 <_free_r+0x104>
800095d0:	f0 0b 16 06 	lsr	r11,r8,0x6
800095d4:	2c 8b       	sub	r11,-56
800095d6:	c2 68       	rjmp	80009622 <_free_r+0x14e>
800095d8:	59 4b       	cp.w	r11,20
800095da:	e0 8b 00 04 	brhi	800095e2 <_free_r+0x10e>
800095de:	2a 5b       	sub	r11,-91
800095e0:	c2 18       	rjmp	80009622 <_free_r+0x14e>
800095e2:	e0 4b 00 54 	cp.w	r11,84
800095e6:	e0 8b 00 06 	brhi	800095f2 <_free_r+0x11e>
800095ea:	f0 0b 16 0c 	lsr	r11,r8,0xc
800095ee:	29 2b       	sub	r11,-110
800095f0:	c1 98       	rjmp	80009622 <_free_r+0x14e>
800095f2:	e0 4b 01 54 	cp.w	r11,340
800095f6:	e0 8b 00 06 	brhi	80009602 <_free_r+0x12e>
800095fa:	f0 0b 16 0f 	lsr	r11,r8,0xf
800095fe:	28 9b       	sub	r11,-119
80009600:	c1 18       	rjmp	80009622 <_free_r+0x14e>
80009602:	e0 4b 05 54 	cp.w	r11,1364
80009606:	e0 88 00 0b 	brls	8000961c <_free_r+0x148>
8000960a:	37 eb       	mov	r11,126
8000960c:	c0 b8       	rjmp	80009622 <_free_r+0x14e>
8000960e:	d7 03       	nop
80009610:	00 00       	add	r0,r0
80009612:	01 00       	ld.w	r0,r0++
80009614:	00 00       	add	r0,r0
80009616:	05 08       	ld.w	r8,r2++
80009618:	00 00       	add	r0,r0
8000961a:	06 20       	rsub	r0,r3
8000961c:	f0 0b 16 12 	lsr	r11,r8,0x12
80009620:	28 4b       	sub	r11,-124
80009622:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009626:	78 29       	ld.w	r9,r12[0x8]
80009628:	18 39       	cp.w	r9,r12
8000962a:	c0 e1       	brne	80009646 <_free_r+0x172>
8000962c:	74 18       	ld.w	r8,r10[0x4]
8000962e:	a3 4b       	asr	r11,0x2
80009630:	30 1c       	mov	r12,1
80009632:	f8 0b 09 4b 	lsl	r11,r12,r11
80009636:	f1 eb 10 0b 	or	r11,r8,r11
8000963a:	12 98       	mov	r8,r9
8000963c:	95 1b       	st.w	r10[0x4],r11
8000963e:	c0 a8       	rjmp	80009652 <_free_r+0x17e>
80009640:	72 29       	ld.w	r9,r9[0x8]
80009642:	18 39       	cp.w	r9,r12
80009644:	c0 60       	breq	80009650 <_free_r+0x17c>
80009646:	72 1a       	ld.w	r10,r9[0x4]
80009648:	e0 1a ff fc 	andl	r10,0xfffc
8000964c:	14 38       	cp.w	r8,r10
8000964e:	cf 93       	brcs	80009640 <_free_r+0x16c>
80009650:	72 38       	ld.w	r8,r9[0xc]
80009652:	8d 38       	st.w	r6[0xc],r8
80009654:	8d 29       	st.w	r6[0x8],r9
80009656:	93 36       	st.w	r9[0xc],r6
80009658:	91 26       	st.w	r8[0x8],r6
8000965a:	0e 9c       	mov	r12,r7
8000965c:	e0 a0 04 d0 	rcall	80009ffc <__malloc_unlock>
80009660:	d8 22       	popm	r4-r7,pc
80009662:	d7 03       	nop

80009664 <__sfvwrite_r>:
80009664:	d4 31       	pushm	r0-r7,lr
80009666:	20 3d       	sub	sp,12
80009668:	14 94       	mov	r4,r10
8000966a:	18 95       	mov	r5,r12
8000966c:	16 97       	mov	r7,r11
8000966e:	74 28       	ld.w	r8,r10[0x8]
80009670:	58 08       	cp.w	r8,0
80009672:	e0 80 01 45 	breq	800098fc <__sfvwrite_r+0x298>
80009676:	96 68       	ld.sh	r8,r11[0xc]
80009678:	ed b8 00 03 	bld	r8,0x3
8000967c:	c0 41       	brne	80009684 <__sfvwrite_r+0x20>
8000967e:	76 48       	ld.w	r8,r11[0x10]
80009680:	58 08       	cp.w	r8,0
80009682:	c0 c1       	brne	8000969a <__sfvwrite_r+0x36>
80009684:	0e 9b       	mov	r11,r7
80009686:	0a 9c       	mov	r12,r5
80009688:	fe b0 f6 c0 	rcall	80008408 <__swsetup_r>
8000968c:	c0 70       	breq	8000969a <__sfvwrite_r+0x36>
8000968e:	8e 68       	ld.sh	r8,r7[0xc]
80009690:	a7 a8       	sbr	r8,0x6
80009692:	ae 68       	st.h	r7[0xc],r8
80009694:	30 98       	mov	r8,9
80009696:	8b 38       	st.w	r5[0xc],r8
80009698:	c3 09       	rjmp	800098f8 <__sfvwrite_r+0x294>
8000969a:	8e 63       	ld.sh	r3,r7[0xc]
8000969c:	68 00       	ld.w	r0,r4[0x0]
8000969e:	06 96       	mov	r6,r3
800096a0:	e2 16 00 02 	andl	r6,0x2,COH
800096a4:	c2 10       	breq	800096e6 <__sfvwrite_r+0x82>
800096a6:	30 03       	mov	r3,0
800096a8:	e0 62 04 00 	mov	r2,1024
800096ac:	06 96       	mov	r6,r3
800096ae:	c0 48       	rjmp	800096b6 <__sfvwrite_r+0x52>
800096b0:	60 03       	ld.w	r3,r0[0x0]
800096b2:	60 16       	ld.w	r6,r0[0x4]
800096b4:	2f 80       	sub	r0,-8
800096b6:	58 06       	cp.w	r6,0
800096b8:	cf c0       	breq	800096b0 <__sfvwrite_r+0x4c>
800096ba:	e0 46 04 00 	cp.w	r6,1024
800096be:	ec 09 17 80 	movls	r9,r6
800096c2:	e4 09 17 b0 	movhi	r9,r2
800096c6:	06 9a       	mov	r10,r3
800096c8:	6e a8       	ld.w	r8,r7[0x28]
800096ca:	6e 8b       	ld.w	r11,r7[0x20]
800096cc:	0a 9c       	mov	r12,r5
800096ce:	5d 18       	icall	r8
800096d0:	18 16       	sub	r6,r12
800096d2:	58 0c       	cp.w	r12,0
800096d4:	e0 8a 01 0f 	brle	800098f2 <__sfvwrite_r+0x28e>
800096d8:	68 28       	ld.w	r8,r4[0x8]
800096da:	18 18       	sub	r8,r12
800096dc:	89 28       	st.w	r4[0x8],r8
800096de:	e0 80 01 0f 	breq	800098fc <__sfvwrite_r+0x298>
800096e2:	18 03       	add	r3,r12
800096e4:	ce 9b       	rjmp	800096b6 <__sfvwrite_r+0x52>
800096e6:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800096ea:	c0 70       	breq	800096f8 <__sfvwrite_r+0x94>
800096ec:	50 06       	stdsp	sp[0x0],r6
800096ee:	0c 93       	mov	r3,r6
800096f0:	0c 91       	mov	r1,r6
800096f2:	50 15       	stdsp	sp[0x4],r5
800096f4:	08 92       	mov	r2,r4
800096f6:	c9 e8       	rjmp	80009832 <__sfvwrite_r+0x1ce>
800096f8:	06 96       	mov	r6,r3
800096fa:	08 91       	mov	r1,r4
800096fc:	c0 48       	rjmp	80009704 <__sfvwrite_r+0xa0>
800096fe:	60 03       	ld.w	r3,r0[0x0]
80009700:	60 16       	ld.w	r6,r0[0x4]
80009702:	2f 80       	sub	r0,-8
80009704:	58 06       	cp.w	r6,0
80009706:	cf c0       	breq	800096fe <__sfvwrite_r+0x9a>
80009708:	8e 68       	ld.sh	r8,r7[0xc]
8000970a:	6e 24       	ld.w	r4,r7[0x8]
8000970c:	10 99       	mov	r9,r8
8000970e:	e2 19 02 00 	andl	r9,0x200,COH
80009712:	c5 50       	breq	800097bc <__sfvwrite_r+0x158>
80009714:	08 36       	cp.w	r6,r4
80009716:	c4 33       	brcs	8000979c <__sfvwrite_r+0x138>
80009718:	10 99       	mov	r9,r8
8000971a:	e2 19 04 80 	andl	r9,0x480,COH
8000971e:	c3 f0       	breq	8000979c <__sfvwrite_r+0x138>
80009720:	6e 4b       	ld.w	r11,r7[0x10]
80009722:	6e 09       	ld.w	r9,r7[0x0]
80009724:	16 19       	sub	r9,r11
80009726:	50 09       	stdsp	sp[0x0],r9
80009728:	6e 59       	ld.w	r9,r7[0x14]
8000972a:	10 9c       	mov	r12,r8
8000972c:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80009730:	30 28       	mov	r8,2
80009732:	f4 08 0c 08 	divs	r8,r10,r8
80009736:	fa e9 00 04 	st.d	sp[4],r8
8000973a:	10 94       	mov	r4,r8
8000973c:	40 09       	lddsp	r9,sp[0x0]
8000973e:	e2 1c 04 00 	andl	r12,0x400,COH
80009742:	2f f9       	sub	r9,-1
80009744:	0c 09       	add	r9,r6
80009746:	12 38       	cp.w	r8,r9
80009748:	f2 04 17 30 	movlo	r4,r9
8000974c:	58 0c       	cp.w	r12,0
8000974e:	c1 00       	breq	8000976e <__sfvwrite_r+0x10a>
80009750:	08 9b       	mov	r11,r4
80009752:	0a 9c       	mov	r12,r5
80009754:	c6 8d       	rcall	80009a24 <_malloc_r>
80009756:	18 92       	mov	r2,r12
80009758:	c1 40       	breq	80009780 <__sfvwrite_r+0x11c>
8000975a:	40 0a       	lddsp	r10,sp[0x0]
8000975c:	6e 4b       	ld.w	r11,r7[0x10]
8000975e:	e0 a0 03 84 	rcall	80009e66 <memcpy>
80009762:	8e 68       	ld.sh	r8,r7[0xc]
80009764:	e0 18 fb 7f 	andl	r8,0xfb7f
80009768:	a7 b8       	sbr	r8,0x7
8000976a:	ae 68       	st.h	r7[0xc],r8
8000976c:	c0 d8       	rjmp	80009786 <__sfvwrite_r+0x122>
8000976e:	08 9a       	mov	r10,r4
80009770:	0a 9c       	mov	r12,r5
80009772:	e0 a0 07 33 	rcall	8000a5d8 <_realloc_r>
80009776:	18 92       	mov	r2,r12
80009778:	c0 71       	brne	80009786 <__sfvwrite_r+0x122>
8000977a:	6e 4b       	ld.w	r11,r7[0x10]
8000977c:	0a 9c       	mov	r12,r5
8000977e:	ca be       	rcall	800094d4 <_free_r>
80009780:	30 c8       	mov	r8,12
80009782:	8b 38       	st.w	r5[0xc],r8
80009784:	cb 78       	rjmp	800098f2 <__sfvwrite_r+0x28e>
80009786:	40 0a       	lddsp	r10,sp[0x0]
80009788:	40 09       	lddsp	r9,sp[0x0]
8000978a:	e8 0a 01 0a 	sub	r10,r4,r10
8000978e:	e4 09 00 08 	add	r8,r2,r9
80009792:	8f 54       	st.w	r7[0x14],r4
80009794:	8f 2a       	st.w	r7[0x8],r10
80009796:	8f 08       	st.w	r7[0x0],r8
80009798:	8f 42       	st.w	r7[0x10],r2
8000979a:	0c 94       	mov	r4,r6
8000979c:	08 36       	cp.w	r6,r4
8000979e:	ec 04 17 30 	movlo	r4,r6
800097a2:	06 9b       	mov	r11,r3
800097a4:	08 9a       	mov	r10,r4
800097a6:	6e 0c       	ld.w	r12,r7[0x0]
800097a8:	e0 a0 04 03 	rcall	80009fae <memmove>
800097ac:	6e 08       	ld.w	r8,r7[0x0]
800097ae:	08 08       	add	r8,r4
800097b0:	8f 08       	st.w	r7[0x0],r8
800097b2:	6e 28       	ld.w	r8,r7[0x8]
800097b4:	08 18       	sub	r8,r4
800097b6:	0c 94       	mov	r4,r6
800097b8:	8f 28       	st.w	r7[0x8],r8
800097ba:	c3 08       	rjmp	8000981a <__sfvwrite_r+0x1b6>
800097bc:	08 36       	cp.w	r6,r4
800097be:	5f ba       	srhi	r10
800097c0:	6e 0c       	ld.w	r12,r7[0x0]
800097c2:	6e 48       	ld.w	r8,r7[0x10]
800097c4:	10 3c       	cp.w	r12,r8
800097c6:	5f b8       	srhi	r8
800097c8:	f5 e8 00 08 	and	r8,r10,r8
800097cc:	f2 08 18 00 	cp.b	r8,r9
800097d0:	c0 e0       	breq	800097ec <__sfvwrite_r+0x188>
800097d2:	06 9b       	mov	r11,r3
800097d4:	08 9a       	mov	r10,r4
800097d6:	e0 a0 03 ec 	rcall	80009fae <memmove>
800097da:	6e 08       	ld.w	r8,r7[0x0]
800097dc:	08 08       	add	r8,r4
800097de:	0e 9b       	mov	r11,r7
800097e0:	8f 08       	st.w	r7[0x0],r8
800097e2:	0a 9c       	mov	r12,r5
800097e4:	fe b0 fd 00 	rcall	800091e4 <_fflush_r>
800097e8:	c1 90       	breq	8000981a <__sfvwrite_r+0x1b6>
800097ea:	c8 48       	rjmp	800098f2 <__sfvwrite_r+0x28e>
800097ec:	6e 59       	ld.w	r9,r7[0x14]
800097ee:	12 36       	cp.w	r6,r9
800097f0:	c0 a3       	brcs	80009804 <__sfvwrite_r+0x1a0>
800097f2:	6e a8       	ld.w	r8,r7[0x28]
800097f4:	06 9a       	mov	r10,r3
800097f6:	6e 8b       	ld.w	r11,r7[0x20]
800097f8:	0a 9c       	mov	r12,r5
800097fa:	5d 18       	icall	r8
800097fc:	18 94       	mov	r4,r12
800097fe:	e0 89 00 0e 	brgt	8000981a <__sfvwrite_r+0x1b6>
80009802:	c7 88       	rjmp	800098f2 <__sfvwrite_r+0x28e>
80009804:	0c 9a       	mov	r10,r6
80009806:	06 9b       	mov	r11,r3
80009808:	e0 a0 03 d3 	rcall	80009fae <memmove>
8000980c:	6e 08       	ld.w	r8,r7[0x0]
8000980e:	0c 08       	add	r8,r6
80009810:	0c 94       	mov	r4,r6
80009812:	8f 08       	st.w	r7[0x0],r8
80009814:	6e 28       	ld.w	r8,r7[0x8]
80009816:	0c 18       	sub	r8,r6
80009818:	8f 28       	st.w	r7[0x8],r8
8000981a:	62 28       	ld.w	r8,r1[0x8]
8000981c:	08 18       	sub	r8,r4
8000981e:	83 28       	st.w	r1[0x8],r8
80009820:	c6 e0       	breq	800098fc <__sfvwrite_r+0x298>
80009822:	08 16       	sub	r6,r4
80009824:	08 03       	add	r3,r4
80009826:	c6 fb       	rjmp	80009704 <__sfvwrite_r+0xa0>
80009828:	60 03       	ld.w	r3,r0[0x0]
8000982a:	60 11       	ld.w	r1,r0[0x4]
8000982c:	30 08       	mov	r8,0
8000982e:	2f 80       	sub	r0,-8
80009830:	50 08       	stdsp	sp[0x0],r8
80009832:	58 01       	cp.w	r1,0
80009834:	cf a0       	breq	80009828 <__sfvwrite_r+0x1c4>
80009836:	40 0a       	lddsp	r10,sp[0x0]
80009838:	58 0a       	cp.w	r10,0
8000983a:	c1 51       	brne	80009864 <__sfvwrite_r+0x200>
8000983c:	e2 c6 ff ff 	sub	r6,r1,-1
80009840:	02 9a       	mov	r10,r1
80009842:	30 ab       	mov	r11,10
80009844:	06 9c       	mov	r12,r3
80009846:	e0 a0 03 05 	rcall	80009e50 <memchr>
8000984a:	f8 c8 ff ff 	sub	r8,r12,-1
8000984e:	58 0c       	cp.w	r12,0
80009850:	f1 d3 e1 16 	subne	r6,r8,r3
80009854:	f9 b9 01 01 	movne	r9,1
80009858:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000985c:	f9 b8 00 01 	moveq	r8,1
80009860:	fb f8 0a 00 	st.weq	sp[0x0],r8
80009864:	02 36       	cp.w	r6,r1
80009866:	ec 04 17 80 	movls	r4,r6
8000986a:	e2 04 17 b0 	movhi	r4,r1
8000986e:	6e 59       	ld.w	r9,r7[0x14]
80009870:	6e 25       	ld.w	r5,r7[0x8]
80009872:	f2 05 00 05 	add	r5,r9,r5
80009876:	0a 34       	cp.w	r4,r5
80009878:	5f 9a       	srgt	r10
8000987a:	6e 0c       	ld.w	r12,r7[0x0]
8000987c:	6e 48       	ld.w	r8,r7[0x10]
8000987e:	10 3c       	cp.w	r12,r8
80009880:	5f b8       	srhi	r8
80009882:	f5 e8 00 08 	and	r8,r10,r8
80009886:	30 0a       	mov	r10,0
80009888:	f4 08 18 00 	cp.b	r8,r10
8000988c:	c0 e0       	breq	800098a8 <__sfvwrite_r+0x244>
8000988e:	06 9b       	mov	r11,r3
80009890:	0a 9a       	mov	r10,r5
80009892:	e0 a0 03 8e 	rcall	80009fae <memmove>
80009896:	6e 08       	ld.w	r8,r7[0x0]
80009898:	0a 08       	add	r8,r5
8000989a:	0e 9b       	mov	r11,r7
8000989c:	8f 08       	st.w	r7[0x0],r8
8000989e:	40 1c       	lddsp	r12,sp[0x4]
800098a0:	fe b0 fc a2 	rcall	800091e4 <_fflush_r>
800098a4:	c1 80       	breq	800098d4 <__sfvwrite_r+0x270>
800098a6:	c2 68       	rjmp	800098f2 <__sfvwrite_r+0x28e>
800098a8:	12 34       	cp.w	r4,r9
800098aa:	c0 a5       	brlt	800098be <__sfvwrite_r+0x25a>
800098ac:	6e a8       	ld.w	r8,r7[0x28]
800098ae:	06 9a       	mov	r10,r3
800098b0:	6e 8b       	ld.w	r11,r7[0x20]
800098b2:	40 1c       	lddsp	r12,sp[0x4]
800098b4:	5d 18       	icall	r8
800098b6:	18 95       	mov	r5,r12
800098b8:	e0 89 00 0e 	brgt	800098d4 <__sfvwrite_r+0x270>
800098bc:	c1 b8       	rjmp	800098f2 <__sfvwrite_r+0x28e>
800098be:	08 9a       	mov	r10,r4
800098c0:	06 9b       	mov	r11,r3
800098c2:	e0 a0 03 76 	rcall	80009fae <memmove>
800098c6:	6e 08       	ld.w	r8,r7[0x0]
800098c8:	08 08       	add	r8,r4
800098ca:	08 95       	mov	r5,r4
800098cc:	8f 08       	st.w	r7[0x0],r8
800098ce:	6e 28       	ld.w	r8,r7[0x8]
800098d0:	08 18       	sub	r8,r4
800098d2:	8f 28       	st.w	r7[0x8],r8
800098d4:	0a 16       	sub	r6,r5
800098d6:	c0 71       	brne	800098e4 <__sfvwrite_r+0x280>
800098d8:	0e 9b       	mov	r11,r7
800098da:	40 1c       	lddsp	r12,sp[0x4]
800098dc:	fe b0 fc 84 	rcall	800091e4 <_fflush_r>
800098e0:	c0 91       	brne	800098f2 <__sfvwrite_r+0x28e>
800098e2:	50 06       	stdsp	sp[0x0],r6
800098e4:	64 28       	ld.w	r8,r2[0x8]
800098e6:	0a 18       	sub	r8,r5
800098e8:	85 28       	st.w	r2[0x8],r8
800098ea:	c0 90       	breq	800098fc <__sfvwrite_r+0x298>
800098ec:	0a 11       	sub	r1,r5
800098ee:	0a 03       	add	r3,r5
800098f0:	ca 1b       	rjmp	80009832 <__sfvwrite_r+0x1ce>
800098f2:	8e 68       	ld.sh	r8,r7[0xc]
800098f4:	a7 a8       	sbr	r8,0x6
800098f6:	ae 68       	st.h	r7[0xc],r8
800098f8:	3f fc       	mov	r12,-1
800098fa:	c0 28       	rjmp	800098fe <__sfvwrite_r+0x29a>
800098fc:	30 0c       	mov	r12,0
800098fe:	2f dd       	sub	sp,-12
80009900:	d8 32       	popm	r0-r7,pc
80009902:	d7 03       	nop

80009904 <_fwalk>:
80009904:	d4 31       	pushm	r0-r7,lr
80009906:	30 05       	mov	r5,0
80009908:	16 91       	mov	r1,r11
8000990a:	f8 c7 ff 28 	sub	r7,r12,-216
8000990e:	0a 92       	mov	r2,r5
80009910:	fe b0 fc f2 	rcall	800092f4 <__sfp_lock_acquire>
80009914:	3f f3       	mov	r3,-1
80009916:	c1 68       	rjmp	80009942 <_fwalk+0x3e>
80009918:	6e 26       	ld.w	r6,r7[0x8]
8000991a:	6e 14       	ld.w	r4,r7[0x4]
8000991c:	2f 46       	sub	r6,-12
8000991e:	c0 c8       	rjmp	80009936 <_fwalk+0x32>
80009920:	8c 08       	ld.sh	r8,r6[0x0]
80009922:	e4 08 19 00 	cp.h	r8,r2
80009926:	c0 70       	breq	80009934 <_fwalk+0x30>
80009928:	8c 18       	ld.sh	r8,r6[0x2]
8000992a:	e6 08 19 00 	cp.h	r8,r3
8000992e:	c0 30       	breq	80009934 <_fwalk+0x30>
80009930:	5d 11       	icall	r1
80009932:	18 45       	or	r5,r12
80009934:	2a 46       	sub	r6,-92
80009936:	20 14       	sub	r4,1
80009938:	ec cc 00 0c 	sub	r12,r6,12
8000993c:	58 04       	cp.w	r4,0
8000993e:	cf 14       	brge	80009920 <_fwalk+0x1c>
80009940:	6e 07       	ld.w	r7,r7[0x0]
80009942:	58 07       	cp.w	r7,0
80009944:	ce a1       	brne	80009918 <_fwalk+0x14>
80009946:	fe b0 fc d8 	rcall	800092f6 <__sfp_lock_release>
8000994a:	0a 9c       	mov	r12,r5
8000994c:	d8 32       	popm	r0-r7,pc
8000994e:	d7 03       	nop

80009950 <_localeconv_r>:
80009950:	48 1c       	lddpc	r12,80009954 <_localeconv_r+0x4>
80009952:	5e fc       	retal	r12
80009954:	80 00       	ld.sh	r0,r0[0x0]
80009956:	cb f0       	breq	800098d4 <__sfvwrite_r+0x270>

80009958 <__smakebuf_r>:
80009958:	d4 21       	pushm	r4-r7,lr
8000995a:	20 fd       	sub	sp,60
8000995c:	96 68       	ld.sh	r8,r11[0xc]
8000995e:	16 97       	mov	r7,r11
80009960:	18 96       	mov	r6,r12
80009962:	e2 18 00 02 	andl	r8,0x2,COH
80009966:	c3 c1       	brne	800099de <__smakebuf_r+0x86>
80009968:	96 7b       	ld.sh	r11,r11[0xe]
8000996a:	f0 0b 19 00 	cp.h	r11,r8
8000996e:	c0 55       	brlt	80009978 <__smakebuf_r+0x20>
80009970:	1a 9a       	mov	r10,sp
80009972:	e0 a0 09 55 	rcall	8000ac1c <_fstat_r>
80009976:	c0 f4       	brge	80009994 <__smakebuf_r+0x3c>
80009978:	8e 65       	ld.sh	r5,r7[0xc]
8000997a:	0a 98       	mov	r8,r5
8000997c:	ab b8       	sbr	r8,0xb
8000997e:	e2 15 00 80 	andl	r5,0x80,COH
80009982:	ae 68       	st.h	r7[0xc],r8
80009984:	30 04       	mov	r4,0
80009986:	e0 68 04 00 	mov	r8,1024
8000998a:	f9 b5 01 40 	movne	r5,64
8000998e:	f0 05 17 00 	moveq	r5,r8
80009992:	c1 c8       	rjmp	800099ca <__smakebuf_r+0x72>
80009994:	40 18       	lddsp	r8,sp[0x4]
80009996:	e2 18 f0 00 	andl	r8,0xf000,COH
8000999a:	e0 48 20 00 	cp.w	r8,8192
8000999e:	5f 04       	sreq	r4
800099a0:	e0 48 80 00 	cp.w	r8,32768
800099a4:	c0 e1       	brne	800099c0 <__smakebuf_r+0x68>
800099a6:	6e b9       	ld.w	r9,r7[0x2c]
800099a8:	fe c8 f0 9c 	sub	r8,pc,-3940
800099ac:	10 39       	cp.w	r9,r8
800099ae:	c0 91       	brne	800099c0 <__smakebuf_r+0x68>
800099b0:	8e 68       	ld.sh	r8,r7[0xc]
800099b2:	e0 65 04 00 	mov	r5,1024
800099b6:	ab a8       	sbr	r8,0xa
800099b8:	ef 45 00 50 	st.w	r7[80],r5
800099bc:	ae 68       	st.h	r7[0xc],r8
800099be:	c0 68       	rjmp	800099ca <__smakebuf_r+0x72>
800099c0:	8e 68       	ld.sh	r8,r7[0xc]
800099c2:	e0 65 04 00 	mov	r5,1024
800099c6:	ab b8       	sbr	r8,0xb
800099c8:	ae 68       	st.h	r7[0xc],r8
800099ca:	0a 9b       	mov	r11,r5
800099cc:	0c 9c       	mov	r12,r6
800099ce:	c2 bc       	rcall	80009a24 <_malloc_r>
800099d0:	8e 68       	ld.sh	r8,r7[0xc]
800099d2:	c0 d1       	brne	800099ec <__smakebuf_r+0x94>
800099d4:	ed b8 00 09 	bld	r8,0x9
800099d8:	c1 b0       	breq	80009a0e <__smakebuf_r+0xb6>
800099da:	a1 b8       	sbr	r8,0x1
800099dc:	ae 68       	st.h	r7[0xc],r8
800099de:	ee c8 ff b9 	sub	r8,r7,-71
800099e2:	8f 48       	st.w	r7[0x10],r8
800099e4:	8f 08       	st.w	r7[0x0],r8
800099e6:	30 18       	mov	r8,1
800099e8:	8f 58       	st.w	r7[0x14],r8
800099ea:	c1 28       	rjmp	80009a0e <__smakebuf_r+0xb6>
800099ec:	a7 b8       	sbr	r8,0x7
800099ee:	8f 4c       	st.w	r7[0x10],r12
800099f0:	ae 68       	st.h	r7[0xc],r8
800099f2:	8f 55       	st.w	r7[0x14],r5
800099f4:	fe c8 06 fc 	sub	r8,pc,1788
800099f8:	8f 0c       	st.w	r7[0x0],r12
800099fa:	8d a8       	st.w	r6[0x28],r8
800099fc:	58 04       	cp.w	r4,0
800099fe:	c0 80       	breq	80009a0e <__smakebuf_r+0xb6>
80009a00:	8e 7c       	ld.sh	r12,r7[0xe]
80009a02:	e0 a0 07 f5 	rcall	8000a9ec <isatty>
80009a06:	c0 40       	breq	80009a0e <__smakebuf_r+0xb6>
80009a08:	8e 68       	ld.sh	r8,r7[0xc]
80009a0a:	a1 a8       	sbr	r8,0x0
80009a0c:	ae 68       	st.h	r7[0xc],r8
80009a0e:	2f 1d       	sub	sp,-60
80009a10:	d8 22       	popm	r4-r7,pc
80009a12:	d7 03       	nop

80009a14 <malloc>:
80009a14:	d4 01       	pushm	lr
80009a16:	48 38       	lddpc	r8,80009a20 <malloc+0xc>
80009a18:	18 9b       	mov	r11,r12
80009a1a:	70 0c       	ld.w	r12,r8[0x0]
80009a1c:	c0 4c       	rcall	80009a24 <_malloc_r>
80009a1e:	d8 02       	popm	pc
80009a20:	00 00       	add	r0,r0
80009a22:	00 fc       	st.b	--r0,r12

80009a24 <_malloc_r>:
80009a24:	d4 31       	pushm	r0-r7,lr
80009a26:	f6 c8 ff f5 	sub	r8,r11,-11
80009a2a:	18 95       	mov	r5,r12
80009a2c:	10 97       	mov	r7,r8
80009a2e:	e0 17 ff f8 	andl	r7,0xfff8
80009a32:	59 68       	cp.w	r8,22
80009a34:	f9 b7 08 10 	movls	r7,16
80009a38:	16 37       	cp.w	r7,r11
80009a3a:	5f 38       	srlo	r8
80009a3c:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80009a40:	c0 50       	breq	80009a4a <_malloc_r+0x26>
80009a42:	30 c8       	mov	r8,12
80009a44:	99 38       	st.w	r12[0xc],r8
80009a46:	e0 8f 01 ec 	bral	80009e1e <_malloc_r+0x3fa>
80009a4a:	e0 a0 02 d8 	rcall	80009ffa <__malloc_lock>
80009a4e:	e0 47 01 f7 	cp.w	r7,503
80009a52:	e0 8b 00 1c 	brhi	80009a8a <_malloc_r+0x66>
80009a56:	ee 03 16 03 	lsr	r3,r7,0x3
80009a5a:	4c c8       	lddpc	r8,80009b88 <_malloc_r+0x164>
80009a5c:	f0 03 00 38 	add	r8,r8,r3<<0x3
80009a60:	70 36       	ld.w	r6,r8[0xc]
80009a62:	10 36       	cp.w	r6,r8
80009a64:	c0 61       	brne	80009a70 <_malloc_r+0x4c>
80009a66:	ec c8 ff f8 	sub	r8,r6,-8
80009a6a:	70 36       	ld.w	r6,r8[0xc]
80009a6c:	10 36       	cp.w	r6,r8
80009a6e:	c0 c0       	breq	80009a86 <_malloc_r+0x62>
80009a70:	6c 18       	ld.w	r8,r6[0x4]
80009a72:	e0 18 ff fc 	andl	r8,0xfffc
80009a76:	6c 3a       	ld.w	r10,r6[0xc]
80009a78:	ec 08 00 09 	add	r9,r6,r8
80009a7c:	0a 9c       	mov	r12,r5
80009a7e:	6c 28       	ld.w	r8,r6[0x8]
80009a80:	95 28       	st.w	r10[0x8],r8
80009a82:	91 3a       	st.w	r8[0xc],r10
80009a84:	c4 68       	rjmp	80009b10 <_malloc_r+0xec>
80009a86:	2f e3       	sub	r3,-2
80009a88:	c4 c8       	rjmp	80009b20 <_malloc_r+0xfc>
80009a8a:	ee 03 16 09 	lsr	r3,r7,0x9
80009a8e:	c0 41       	brne	80009a96 <_malloc_r+0x72>
80009a90:	ee 03 16 03 	lsr	r3,r7,0x3
80009a94:	c2 68       	rjmp	80009ae0 <_malloc_r+0xbc>
80009a96:	58 43       	cp.w	r3,4
80009a98:	e0 8b 00 06 	brhi	80009aa4 <_malloc_r+0x80>
80009a9c:	ee 03 16 06 	lsr	r3,r7,0x6
80009aa0:	2c 83       	sub	r3,-56
80009aa2:	c1 f8       	rjmp	80009ae0 <_malloc_r+0xbc>
80009aa4:	59 43       	cp.w	r3,20
80009aa6:	e0 8b 00 04 	brhi	80009aae <_malloc_r+0x8a>
80009aaa:	2a 53       	sub	r3,-91
80009aac:	c1 a8       	rjmp	80009ae0 <_malloc_r+0xbc>
80009aae:	e0 43 00 54 	cp.w	r3,84
80009ab2:	e0 8b 00 06 	brhi	80009abe <_malloc_r+0x9a>
80009ab6:	ee 03 16 0c 	lsr	r3,r7,0xc
80009aba:	29 23       	sub	r3,-110
80009abc:	c1 28       	rjmp	80009ae0 <_malloc_r+0xbc>
80009abe:	e0 43 01 54 	cp.w	r3,340
80009ac2:	e0 8b 00 06 	brhi	80009ace <_malloc_r+0xaa>
80009ac6:	ee 03 16 0f 	lsr	r3,r7,0xf
80009aca:	28 93       	sub	r3,-119
80009acc:	c0 a8       	rjmp	80009ae0 <_malloc_r+0xbc>
80009ace:	e0 43 05 54 	cp.w	r3,1364
80009ad2:	e0 88 00 04 	brls	80009ada <_malloc_r+0xb6>
80009ad6:	37 e3       	mov	r3,126
80009ad8:	c0 48       	rjmp	80009ae0 <_malloc_r+0xbc>
80009ada:	ee 03 16 12 	lsr	r3,r7,0x12
80009ade:	28 43       	sub	r3,-124
80009ae0:	4a aa       	lddpc	r10,80009b88 <_malloc_r+0x164>
80009ae2:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80009ae6:	74 36       	ld.w	r6,r10[0xc]
80009ae8:	c1 98       	rjmp	80009b1a <_malloc_r+0xf6>
80009aea:	6c 19       	ld.w	r9,r6[0x4]
80009aec:	e0 19 ff fc 	andl	r9,0xfffc
80009af0:	f2 07 01 0b 	sub	r11,r9,r7
80009af4:	58 fb       	cp.w	r11,15
80009af6:	e0 8a 00 04 	brle	80009afe <_malloc_r+0xda>
80009afa:	20 13       	sub	r3,1
80009afc:	c1 18       	rjmp	80009b1e <_malloc_r+0xfa>
80009afe:	6c 38       	ld.w	r8,r6[0xc]
80009b00:	58 0b       	cp.w	r11,0
80009b02:	c0 b5       	brlt	80009b18 <_malloc_r+0xf4>
80009b04:	6c 2a       	ld.w	r10,r6[0x8]
80009b06:	ec 09 00 09 	add	r9,r6,r9
80009b0a:	0a 9c       	mov	r12,r5
80009b0c:	91 2a       	st.w	r8[0x8],r10
80009b0e:	95 38       	st.w	r10[0xc],r8
80009b10:	72 18       	ld.w	r8,r9[0x4]
80009b12:	a1 a8       	sbr	r8,0x0
80009b14:	93 18       	st.w	r9[0x4],r8
80009b16:	cb a8       	rjmp	80009c8a <_malloc_r+0x266>
80009b18:	10 96       	mov	r6,r8
80009b1a:	14 36       	cp.w	r6,r10
80009b1c:	ce 71       	brne	80009aea <_malloc_r+0xc6>
80009b1e:	2f f3       	sub	r3,-1
80009b20:	49 aa       	lddpc	r10,80009b88 <_malloc_r+0x164>
80009b22:	f4 cc ff f8 	sub	r12,r10,-8
80009b26:	78 26       	ld.w	r6,r12[0x8]
80009b28:	18 36       	cp.w	r6,r12
80009b2a:	c6 c0       	breq	80009c02 <_malloc_r+0x1de>
80009b2c:	6c 19       	ld.w	r9,r6[0x4]
80009b2e:	e0 19 ff fc 	andl	r9,0xfffc
80009b32:	f2 07 01 08 	sub	r8,r9,r7
80009b36:	58 f8       	cp.w	r8,15
80009b38:	e0 89 00 8e 	brgt	80009c54 <_malloc_r+0x230>
80009b3c:	99 3c       	st.w	r12[0xc],r12
80009b3e:	99 2c       	st.w	r12[0x8],r12
80009b40:	58 08       	cp.w	r8,0
80009b42:	c0 55       	brlt	80009b4c <_malloc_r+0x128>
80009b44:	ec 09 00 09 	add	r9,r6,r9
80009b48:	0a 9c       	mov	r12,r5
80009b4a:	ce 3b       	rjmp	80009b10 <_malloc_r+0xec>
80009b4c:	e0 49 01 ff 	cp.w	r9,511
80009b50:	e0 8b 00 13 	brhi	80009b76 <_malloc_r+0x152>
80009b54:	a3 99       	lsr	r9,0x3
80009b56:	f4 09 00 38 	add	r8,r10,r9<<0x3
80009b5a:	70 2b       	ld.w	r11,r8[0x8]
80009b5c:	8d 38       	st.w	r6[0xc],r8
80009b5e:	8d 2b       	st.w	r6[0x8],r11
80009b60:	97 36       	st.w	r11[0xc],r6
80009b62:	91 26       	st.w	r8[0x8],r6
80009b64:	a3 49       	asr	r9,0x2
80009b66:	74 18       	ld.w	r8,r10[0x4]
80009b68:	30 1b       	mov	r11,1
80009b6a:	f6 09 09 49 	lsl	r9,r11,r9
80009b6e:	f1 e9 10 09 	or	r9,r8,r9
80009b72:	95 19       	st.w	r10[0x4],r9
80009b74:	c4 78       	rjmp	80009c02 <_malloc_r+0x1de>
80009b76:	f2 0a 16 09 	lsr	r10,r9,0x9
80009b7a:	58 4a       	cp.w	r10,4
80009b7c:	e0 8b 00 08 	brhi	80009b8c <_malloc_r+0x168>
80009b80:	f2 0a 16 06 	lsr	r10,r9,0x6
80009b84:	2c 8a       	sub	r10,-56
80009b86:	c2 18       	rjmp	80009bc8 <_malloc_r+0x1a4>
80009b88:	00 00       	add	r0,r0
80009b8a:	01 00       	ld.w	r0,r0++
80009b8c:	59 4a       	cp.w	r10,20
80009b8e:	e0 8b 00 04 	brhi	80009b96 <_malloc_r+0x172>
80009b92:	2a 5a       	sub	r10,-91
80009b94:	c1 a8       	rjmp	80009bc8 <_malloc_r+0x1a4>
80009b96:	e0 4a 00 54 	cp.w	r10,84
80009b9a:	e0 8b 00 06 	brhi	80009ba6 <_malloc_r+0x182>
80009b9e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80009ba2:	29 2a       	sub	r10,-110
80009ba4:	c1 28       	rjmp	80009bc8 <_malloc_r+0x1a4>
80009ba6:	e0 4a 01 54 	cp.w	r10,340
80009baa:	e0 8b 00 06 	brhi	80009bb6 <_malloc_r+0x192>
80009bae:	f2 0a 16 0f 	lsr	r10,r9,0xf
80009bb2:	28 9a       	sub	r10,-119
80009bb4:	c0 a8       	rjmp	80009bc8 <_malloc_r+0x1a4>
80009bb6:	e0 4a 05 54 	cp.w	r10,1364
80009bba:	e0 88 00 04 	brls	80009bc2 <_malloc_r+0x19e>
80009bbe:	37 ea       	mov	r10,126
80009bc0:	c0 48       	rjmp	80009bc8 <_malloc_r+0x1a4>
80009bc2:	f2 0a 16 12 	lsr	r10,r9,0x12
80009bc6:	28 4a       	sub	r10,-124
80009bc8:	4c 7b       	lddpc	r11,80009ce4 <_malloc_r+0x2c0>
80009bca:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80009bce:	68 28       	ld.w	r8,r4[0x8]
80009bd0:	08 38       	cp.w	r8,r4
80009bd2:	c0 e1       	brne	80009bee <_malloc_r+0x1ca>
80009bd4:	76 19       	ld.w	r9,r11[0x4]
80009bd6:	a3 4a       	asr	r10,0x2
80009bd8:	30 1e       	mov	lr,1
80009bda:	fc 0a 09 4a 	lsl	r10,lr,r10
80009bde:	f3 ea 10 0a 	or	r10,r9,r10
80009be2:	10 99       	mov	r9,r8
80009be4:	97 1a       	st.w	r11[0x4],r10
80009be6:	c0 a8       	rjmp	80009bfa <_malloc_r+0x1d6>
80009be8:	70 28       	ld.w	r8,r8[0x8]
80009bea:	08 38       	cp.w	r8,r4
80009bec:	c0 60       	breq	80009bf8 <_malloc_r+0x1d4>
80009bee:	70 1a       	ld.w	r10,r8[0x4]
80009bf0:	e0 1a ff fc 	andl	r10,0xfffc
80009bf4:	14 39       	cp.w	r9,r10
80009bf6:	cf 93       	brcs	80009be8 <_malloc_r+0x1c4>
80009bf8:	70 39       	ld.w	r9,r8[0xc]
80009bfa:	8d 39       	st.w	r6[0xc],r9
80009bfc:	8d 28       	st.w	r6[0x8],r8
80009bfe:	91 36       	st.w	r8[0xc],r6
80009c00:	93 26       	st.w	r9[0x8],r6
80009c02:	e6 08 14 02 	asr	r8,r3,0x2
80009c06:	30 1b       	mov	r11,1
80009c08:	4b 74       	lddpc	r4,80009ce4 <_malloc_r+0x2c0>
80009c0a:	f6 08 09 4b 	lsl	r11,r11,r8
80009c0e:	68 18       	ld.w	r8,r4[0x4]
80009c10:	10 3b       	cp.w	r11,r8
80009c12:	e0 8b 00 6b 	brhi	80009ce8 <_malloc_r+0x2c4>
80009c16:	f7 e8 00 09 	and	r9,r11,r8
80009c1a:	c0 b1       	brne	80009c30 <_malloc_r+0x20c>
80009c1c:	e0 13 ff fc 	andl	r3,0xfffc
80009c20:	a1 7b       	lsl	r11,0x1
80009c22:	2f c3       	sub	r3,-4
80009c24:	c0 38       	rjmp	80009c2a <_malloc_r+0x206>
80009c26:	2f c3       	sub	r3,-4
80009c28:	a1 7b       	lsl	r11,0x1
80009c2a:	f7 e8 00 09 	and	r9,r11,r8
80009c2e:	cf c0       	breq	80009c26 <_malloc_r+0x202>
80009c30:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80009c34:	06 92       	mov	r2,r3
80009c36:	1c 91       	mov	r1,lr
80009c38:	62 36       	ld.w	r6,r1[0xc]
80009c3a:	c2 d8       	rjmp	80009c94 <_malloc_r+0x270>
80009c3c:	6c 1a       	ld.w	r10,r6[0x4]
80009c3e:	e0 1a ff fc 	andl	r10,0xfffc
80009c42:	f4 07 01 08 	sub	r8,r10,r7
80009c46:	58 f8       	cp.w	r8,15
80009c48:	e0 8a 00 15 	brle	80009c72 <_malloc_r+0x24e>
80009c4c:	6c 3a       	ld.w	r10,r6[0xc]
80009c4e:	6c 29       	ld.w	r9,r6[0x8]
80009c50:	95 29       	st.w	r10[0x8],r9
80009c52:	93 3a       	st.w	r9[0xc],r10
80009c54:	0e 99       	mov	r9,r7
80009c56:	ec 07 00 07 	add	r7,r6,r7
80009c5a:	a1 a9       	sbr	r9,0x0
80009c5c:	99 37       	st.w	r12[0xc],r7
80009c5e:	99 27       	st.w	r12[0x8],r7
80009c60:	8d 19       	st.w	r6[0x4],r9
80009c62:	ee 08 09 08 	st.w	r7[r8],r8
80009c66:	8f 2c       	st.w	r7[0x8],r12
80009c68:	8f 3c       	st.w	r7[0xc],r12
80009c6a:	a1 a8       	sbr	r8,0x0
80009c6c:	0a 9c       	mov	r12,r5
80009c6e:	8f 18       	st.w	r7[0x4],r8
80009c70:	c0 d8       	rjmp	80009c8a <_malloc_r+0x266>
80009c72:	6c 39       	ld.w	r9,r6[0xc]
80009c74:	58 08       	cp.w	r8,0
80009c76:	c0 e5       	brlt	80009c92 <_malloc_r+0x26e>
80009c78:	ec 0a 00 0a 	add	r10,r6,r10
80009c7c:	74 18       	ld.w	r8,r10[0x4]
80009c7e:	a1 a8       	sbr	r8,0x0
80009c80:	0a 9c       	mov	r12,r5
80009c82:	95 18       	st.w	r10[0x4],r8
80009c84:	6c 28       	ld.w	r8,r6[0x8]
80009c86:	93 28       	st.w	r9[0x8],r8
80009c88:	91 39       	st.w	r8[0xc],r9
80009c8a:	cb 9d       	rcall	80009ffc <__malloc_unlock>
80009c8c:	ec cc ff f8 	sub	r12,r6,-8
80009c90:	d8 32       	popm	r0-r7,pc
80009c92:	12 96       	mov	r6,r9
80009c94:	02 36       	cp.w	r6,r1
80009c96:	cd 31       	brne	80009c3c <_malloc_r+0x218>
80009c98:	2f f2       	sub	r2,-1
80009c9a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80009c9e:	c0 30       	breq	80009ca4 <_malloc_r+0x280>
80009ca0:	2f 81       	sub	r1,-8
80009ca2:	cc bb       	rjmp	80009c38 <_malloc_r+0x214>
80009ca4:	1c 98       	mov	r8,lr
80009ca6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80009caa:	c0 81       	brne	80009cba <_malloc_r+0x296>
80009cac:	68 19       	ld.w	r9,r4[0x4]
80009cae:	f6 08 11 ff 	rsub	r8,r11,-1
80009cb2:	f3 e8 00 08 	and	r8,r9,r8
80009cb6:	89 18       	st.w	r4[0x4],r8
80009cb8:	c0 78       	rjmp	80009cc6 <_malloc_r+0x2a2>
80009cba:	f0 c9 00 08 	sub	r9,r8,8
80009cbe:	20 13       	sub	r3,1
80009cc0:	70 08       	ld.w	r8,r8[0x0]
80009cc2:	12 38       	cp.w	r8,r9
80009cc4:	cf 10       	breq	80009ca6 <_malloc_r+0x282>
80009cc6:	a1 7b       	lsl	r11,0x1
80009cc8:	68 18       	ld.w	r8,r4[0x4]
80009cca:	10 3b       	cp.w	r11,r8
80009ccc:	e0 8b 00 0e 	brhi	80009ce8 <_malloc_r+0x2c4>
80009cd0:	58 0b       	cp.w	r11,0
80009cd2:	c0 b0       	breq	80009ce8 <_malloc_r+0x2c4>
80009cd4:	04 93       	mov	r3,r2
80009cd6:	c0 38       	rjmp	80009cdc <_malloc_r+0x2b8>
80009cd8:	2f c3       	sub	r3,-4
80009cda:	a1 7b       	lsl	r11,0x1
80009cdc:	f7 e8 00 09 	and	r9,r11,r8
80009ce0:	ca 81       	brne	80009c30 <_malloc_r+0x20c>
80009ce2:	cf bb       	rjmp	80009cd8 <_malloc_r+0x2b4>
80009ce4:	00 00       	add	r0,r0
80009ce6:	01 00       	ld.w	r0,r0++
80009ce8:	68 23       	ld.w	r3,r4[0x8]
80009cea:	66 12       	ld.w	r2,r3[0x4]
80009cec:	e0 12 ff fc 	andl	r2,0xfffc
80009cf0:	0e 32       	cp.w	r2,r7
80009cf2:	5f 39       	srlo	r9
80009cf4:	e4 07 01 08 	sub	r8,r2,r7
80009cf8:	58 f8       	cp.w	r8,15
80009cfa:	5f aa       	srle	r10
80009cfc:	f5 e9 10 09 	or	r9,r10,r9
80009d00:	e0 80 00 9a 	breq	80009e34 <_malloc_r+0x410>
80009d04:	4c 78       	lddpc	r8,80009e20 <_malloc_r+0x3fc>
80009d06:	70 01       	ld.w	r1,r8[0x0]
80009d08:	4c 78       	lddpc	r8,80009e24 <_malloc_r+0x400>
80009d0a:	2f 01       	sub	r1,-16
80009d0c:	70 08       	ld.w	r8,r8[0x0]
80009d0e:	0e 01       	add	r1,r7
80009d10:	5b f8       	cp.w	r8,-1
80009d12:	c0 40       	breq	80009d1a <_malloc_r+0x2f6>
80009d14:	28 11       	sub	r1,-127
80009d16:	e0 11 ff 80 	andl	r1,0xff80
80009d1a:	02 9b       	mov	r11,r1
80009d1c:	0a 9c       	mov	r12,r5
80009d1e:	e0 a0 05 e3 	rcall	8000a8e4 <_sbrk_r>
80009d22:	18 96       	mov	r6,r12
80009d24:	5b fc       	cp.w	r12,-1
80009d26:	c6 e0       	breq	80009e02 <_malloc_r+0x3de>
80009d28:	e6 02 00 08 	add	r8,r3,r2
80009d2c:	10 3c       	cp.w	r12,r8
80009d2e:	c0 32       	brcc	80009d34 <_malloc_r+0x310>
80009d30:	08 33       	cp.w	r3,r4
80009d32:	c6 81       	brne	80009e02 <_malloc_r+0x3de>
80009d34:	4b da       	lddpc	r10,80009e28 <_malloc_r+0x404>
80009d36:	74 09       	ld.w	r9,r10[0x0]
80009d38:	e2 09 00 09 	add	r9,r1,r9
80009d3c:	95 09       	st.w	r10[0x0],r9
80009d3e:	10 36       	cp.w	r6,r8
80009d40:	c0 a1       	brne	80009d54 <_malloc_r+0x330>
80009d42:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80009d46:	c0 71       	brne	80009d54 <_malloc_r+0x330>
80009d48:	e2 02 00 02 	add	r2,r1,r2
80009d4c:	68 28       	ld.w	r8,r4[0x8]
80009d4e:	a1 a2       	sbr	r2,0x0
80009d50:	91 12       	st.w	r8[0x4],r2
80009d52:	c4 c8       	rjmp	80009dea <_malloc_r+0x3c6>
80009d54:	4b 4a       	lddpc	r10,80009e24 <_malloc_r+0x400>
80009d56:	74 0b       	ld.w	r11,r10[0x0]
80009d58:	5b fb       	cp.w	r11,-1
80009d5a:	c0 31       	brne	80009d60 <_malloc_r+0x33c>
80009d5c:	95 06       	st.w	r10[0x0],r6
80009d5e:	c0 68       	rjmp	80009d6a <_malloc_r+0x346>
80009d60:	ec 09 00 09 	add	r9,r6,r9
80009d64:	4b 1a       	lddpc	r10,80009e28 <_malloc_r+0x404>
80009d66:	10 19       	sub	r9,r8
80009d68:	95 09       	st.w	r10[0x0],r9
80009d6a:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80009d6e:	f0 09 11 08 	rsub	r9,r8,8
80009d72:	58 08       	cp.w	r8,0
80009d74:	f2 08 17 10 	movne	r8,r9
80009d78:	ed d8 e1 06 	addne	r6,r6,r8
80009d7c:	28 08       	sub	r8,-128
80009d7e:	ec 01 00 01 	add	r1,r6,r1
80009d82:	0a 9c       	mov	r12,r5
80009d84:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80009d88:	f0 01 01 01 	sub	r1,r8,r1
80009d8c:	02 9b       	mov	r11,r1
80009d8e:	e0 a0 05 ab 	rcall	8000a8e4 <_sbrk_r>
80009d92:	4a 68       	lddpc	r8,80009e28 <_malloc_r+0x404>
80009d94:	5b fc       	cp.w	r12,-1
80009d96:	ec 0c 17 00 	moveq	r12,r6
80009d9a:	f9 b1 00 00 	moveq	r1,0
80009d9e:	70 09       	ld.w	r9,r8[0x0]
80009da0:	0c 1c       	sub	r12,r6
80009da2:	89 26       	st.w	r4[0x8],r6
80009da4:	02 0c       	add	r12,r1
80009da6:	12 01       	add	r1,r9
80009da8:	a1 ac       	sbr	r12,0x0
80009daa:	91 01       	st.w	r8[0x0],r1
80009dac:	8d 1c       	st.w	r6[0x4],r12
80009dae:	08 33       	cp.w	r3,r4
80009db0:	c1 d0       	breq	80009dea <_malloc_r+0x3c6>
80009db2:	58 f2       	cp.w	r2,15
80009db4:	e0 8b 00 05 	brhi	80009dbe <_malloc_r+0x39a>
80009db8:	30 18       	mov	r8,1
80009dba:	8d 18       	st.w	r6[0x4],r8
80009dbc:	c2 38       	rjmp	80009e02 <_malloc_r+0x3de>
80009dbe:	30 59       	mov	r9,5
80009dc0:	20 c2       	sub	r2,12
80009dc2:	e0 12 ff f8 	andl	r2,0xfff8
80009dc6:	e6 02 00 08 	add	r8,r3,r2
80009dca:	91 29       	st.w	r8[0x8],r9
80009dcc:	91 19       	st.w	r8[0x4],r9
80009dce:	66 18       	ld.w	r8,r3[0x4]
80009dd0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009dd4:	e5 e8 10 08 	or	r8,r2,r8
80009dd8:	87 18       	st.w	r3[0x4],r8
80009dda:	58 f2       	cp.w	r2,15
80009ddc:	e0 88 00 07 	brls	80009dea <_malloc_r+0x3c6>
80009de0:	e6 cb ff f8 	sub	r11,r3,-8
80009de4:	0a 9c       	mov	r12,r5
80009de6:	fe b0 fb 77 	rcall	800094d4 <_free_r>
80009dea:	49 19       	lddpc	r9,80009e2c <_malloc_r+0x408>
80009dec:	72 0a       	ld.w	r10,r9[0x0]
80009dee:	48 f8       	lddpc	r8,80009e28 <_malloc_r+0x404>
80009df0:	70 08       	ld.w	r8,r8[0x0]
80009df2:	14 38       	cp.w	r8,r10
80009df4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80009df8:	48 e9       	lddpc	r9,80009e30 <_malloc_r+0x40c>
80009dfa:	72 0a       	ld.w	r10,r9[0x0]
80009dfc:	14 38       	cp.w	r8,r10
80009dfe:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80009e02:	68 28       	ld.w	r8,r4[0x8]
80009e04:	70 18       	ld.w	r8,r8[0x4]
80009e06:	e0 18 ff fc 	andl	r8,0xfffc
80009e0a:	0e 38       	cp.w	r8,r7
80009e0c:	5f 39       	srlo	r9
80009e0e:	0e 18       	sub	r8,r7
80009e10:	58 f8       	cp.w	r8,15
80009e12:	5f aa       	srle	r10
80009e14:	f5 e9 10 09 	or	r9,r10,r9
80009e18:	c0 e0       	breq	80009e34 <_malloc_r+0x410>
80009e1a:	0a 9c       	mov	r12,r5
80009e1c:	cf 0c       	rcall	80009ffc <__malloc_unlock>
80009e1e:	d8 3a       	popm	r0-r7,pc,r12=0
80009e20:	00 00       	add	r0,r0
80009e22:	06 20       	rsub	r0,r3
80009e24:	00 00       	add	r0,r0
80009e26:	05 0c       	ld.w	r12,r2++
80009e28:	00 00       	add	r0,r0
80009e2a:	06 24       	rsub	r4,r3
80009e2c:	00 00       	add	r0,r0
80009e2e:	06 1c       	sub	r12,r3
80009e30:	00 00       	add	r0,r0
80009e32:	06 18       	sub	r8,r3
80009e34:	68 26       	ld.w	r6,r4[0x8]
80009e36:	a1 a8       	sbr	r8,0x0
80009e38:	0e 99       	mov	r9,r7
80009e3a:	a1 a9       	sbr	r9,0x0
80009e3c:	8d 19       	st.w	r6[0x4],r9
80009e3e:	ec 07 00 07 	add	r7,r6,r7
80009e42:	0a 9c       	mov	r12,r5
80009e44:	89 27       	st.w	r4[0x8],r7
80009e46:	8f 18       	st.w	r7[0x4],r8
80009e48:	cd ac       	rcall	80009ffc <__malloc_unlock>
80009e4a:	ec cc ff f8 	sub	r12,r6,-8
80009e4e:	d8 32       	popm	r0-r7,pc

80009e50 <memchr>:
80009e50:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80009e54:	c0 68       	rjmp	80009e60 <memchr+0x10>
80009e56:	20 1a       	sub	r10,1
80009e58:	19 88       	ld.ub	r8,r12[0x0]
80009e5a:	16 38       	cp.w	r8,r11
80009e5c:	5e 0c       	reteq	r12
80009e5e:	2f fc       	sub	r12,-1
80009e60:	58 0a       	cp.w	r10,0
80009e62:	cf a1       	brne	80009e56 <memchr+0x6>
80009e64:	5e fa       	retal	r10

80009e66 <memcpy>:
80009e66:	58 8a       	cp.w	r10,8
80009e68:	c2 f5       	brlt	80009ec6 <memcpy+0x60>
80009e6a:	f9 eb 10 09 	or	r9,r12,r11
80009e6e:	e2 19 00 03 	andl	r9,0x3,COH
80009e72:	e0 81 00 97 	brne	80009fa0 <memcpy+0x13a>
80009e76:	e0 4a 00 20 	cp.w	r10,32
80009e7a:	c3 b4       	brge	80009ef0 <memcpy+0x8a>
80009e7c:	f4 08 14 02 	asr	r8,r10,0x2
80009e80:	f0 09 11 08 	rsub	r9,r8,8
80009e84:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80009e88:	76 69       	ld.w	r9,r11[0x18]
80009e8a:	99 69       	st.w	r12[0x18],r9
80009e8c:	76 59       	ld.w	r9,r11[0x14]
80009e8e:	99 59       	st.w	r12[0x14],r9
80009e90:	76 49       	ld.w	r9,r11[0x10]
80009e92:	99 49       	st.w	r12[0x10],r9
80009e94:	76 39       	ld.w	r9,r11[0xc]
80009e96:	99 39       	st.w	r12[0xc],r9
80009e98:	76 29       	ld.w	r9,r11[0x8]
80009e9a:	99 29       	st.w	r12[0x8],r9
80009e9c:	76 19       	ld.w	r9,r11[0x4]
80009e9e:	99 19       	st.w	r12[0x4],r9
80009ea0:	76 09       	ld.w	r9,r11[0x0]
80009ea2:	99 09       	st.w	r12[0x0],r9
80009ea4:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80009ea8:	f8 08 00 28 	add	r8,r12,r8<<0x2
80009eac:	e0 1a 00 03 	andl	r10,0x3
80009eb0:	f4 0a 11 04 	rsub	r10,r10,4
80009eb4:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009eb8:	17 a9       	ld.ub	r9,r11[0x2]
80009eba:	b0 a9       	st.b	r8[0x2],r9
80009ebc:	17 99       	ld.ub	r9,r11[0x1]
80009ebe:	b0 99       	st.b	r8[0x1],r9
80009ec0:	17 89       	ld.ub	r9,r11[0x0]
80009ec2:	b0 89       	st.b	r8[0x0],r9
80009ec4:	5e fc       	retal	r12
80009ec6:	f4 0a 11 09 	rsub	r10,r10,9
80009eca:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009ece:	17 f9       	ld.ub	r9,r11[0x7]
80009ed0:	b8 f9       	st.b	r12[0x7],r9
80009ed2:	17 e9       	ld.ub	r9,r11[0x6]
80009ed4:	b8 e9       	st.b	r12[0x6],r9
80009ed6:	17 d9       	ld.ub	r9,r11[0x5]
80009ed8:	b8 d9       	st.b	r12[0x5],r9
80009eda:	17 c9       	ld.ub	r9,r11[0x4]
80009edc:	b8 c9       	st.b	r12[0x4],r9
80009ede:	17 b9       	ld.ub	r9,r11[0x3]
80009ee0:	b8 b9       	st.b	r12[0x3],r9
80009ee2:	17 a9       	ld.ub	r9,r11[0x2]
80009ee4:	b8 a9       	st.b	r12[0x2],r9
80009ee6:	17 99       	ld.ub	r9,r11[0x1]
80009ee8:	b8 99       	st.b	r12[0x1],r9
80009eea:	17 89       	ld.ub	r9,r11[0x0]
80009eec:	b8 89       	st.b	r12[0x0],r9
80009eee:	5e fc       	retal	r12
80009ef0:	eb cd 40 c0 	pushm	r6-r7,lr
80009ef4:	18 99       	mov	r9,r12
80009ef6:	22 0a       	sub	r10,32
80009ef8:	b7 07       	ld.d	r6,r11++
80009efa:	b3 26       	st.d	r9++,r6
80009efc:	b7 07       	ld.d	r6,r11++
80009efe:	b3 26       	st.d	r9++,r6
80009f00:	b7 07       	ld.d	r6,r11++
80009f02:	b3 26       	st.d	r9++,r6
80009f04:	b7 07       	ld.d	r6,r11++
80009f06:	b3 26       	st.d	r9++,r6
80009f08:	22 0a       	sub	r10,32
80009f0a:	cf 74       	brge	80009ef8 <memcpy+0x92>
80009f0c:	2f 0a       	sub	r10,-16
80009f0e:	c0 65       	brlt	80009f1a <memcpy+0xb4>
80009f10:	b7 07       	ld.d	r6,r11++
80009f12:	b3 26       	st.d	r9++,r6
80009f14:	b7 07       	ld.d	r6,r11++
80009f16:	b3 26       	st.d	r9++,r6
80009f18:	21 0a       	sub	r10,16
80009f1a:	5c 3a       	neg	r10
80009f1c:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80009f20:	d7 03       	nop
80009f22:	d7 03       	nop
80009f24:	f7 36 00 0e 	ld.ub	r6,r11[14]
80009f28:	f3 66 00 0e 	st.b	r9[14],r6
80009f2c:	f7 36 00 0d 	ld.ub	r6,r11[13]
80009f30:	f3 66 00 0d 	st.b	r9[13],r6
80009f34:	f7 36 00 0c 	ld.ub	r6,r11[12]
80009f38:	f3 66 00 0c 	st.b	r9[12],r6
80009f3c:	f7 36 00 0b 	ld.ub	r6,r11[11]
80009f40:	f3 66 00 0b 	st.b	r9[11],r6
80009f44:	f7 36 00 0a 	ld.ub	r6,r11[10]
80009f48:	f3 66 00 0a 	st.b	r9[10],r6
80009f4c:	f7 36 00 09 	ld.ub	r6,r11[9]
80009f50:	f3 66 00 09 	st.b	r9[9],r6
80009f54:	f7 36 00 08 	ld.ub	r6,r11[8]
80009f58:	f3 66 00 08 	st.b	r9[8],r6
80009f5c:	f7 36 00 07 	ld.ub	r6,r11[7]
80009f60:	f3 66 00 07 	st.b	r9[7],r6
80009f64:	f7 36 00 06 	ld.ub	r6,r11[6]
80009f68:	f3 66 00 06 	st.b	r9[6],r6
80009f6c:	f7 36 00 05 	ld.ub	r6,r11[5]
80009f70:	f3 66 00 05 	st.b	r9[5],r6
80009f74:	f7 36 00 04 	ld.ub	r6,r11[4]
80009f78:	f3 66 00 04 	st.b	r9[4],r6
80009f7c:	f7 36 00 03 	ld.ub	r6,r11[3]
80009f80:	f3 66 00 03 	st.b	r9[3],r6
80009f84:	f7 36 00 02 	ld.ub	r6,r11[2]
80009f88:	f3 66 00 02 	st.b	r9[2],r6
80009f8c:	f7 36 00 01 	ld.ub	r6,r11[1]
80009f90:	f3 66 00 01 	st.b	r9[1],r6
80009f94:	f7 36 00 00 	ld.ub	r6,r11[0]
80009f98:	f3 66 00 00 	st.b	r9[0],r6
80009f9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009fa0:	20 1a       	sub	r10,1
80009fa2:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80009fa6:	f8 0a 0b 09 	st.b	r12[r10],r9
80009faa:	cf b1       	brne	80009fa0 <memcpy+0x13a>
80009fac:	5e fc       	retal	r12

80009fae <memmove>:
80009fae:	d4 01       	pushm	lr
80009fb0:	18 3b       	cp.w	r11,r12
80009fb2:	c1 92       	brcc	80009fe4 <memmove+0x36>
80009fb4:	f6 0a 00 09 	add	r9,r11,r10
80009fb8:	12 3c       	cp.w	r12,r9
80009fba:	c1 52       	brcc	80009fe4 <memmove+0x36>
80009fbc:	f8 0a 00 0b 	add	r11,r12,r10
80009fc0:	30 08       	mov	r8,0
80009fc2:	c0 68       	rjmp	80009fce <memmove+0x20>
80009fc4:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80009fc8:	20 1a       	sub	r10,1
80009fca:	f6 08 0b 0e 	st.b	r11[r8],lr
80009fce:	20 18       	sub	r8,1
80009fd0:	58 0a       	cp.w	r10,0
80009fd2:	cf 91       	brne	80009fc4 <memmove+0x16>
80009fd4:	d8 02       	popm	pc
80009fd6:	f6 08 07 09 	ld.ub	r9,r11[r8]
80009fda:	20 1a       	sub	r10,1
80009fdc:	f8 08 0b 09 	st.b	r12[r8],r9
80009fe0:	2f f8       	sub	r8,-1
80009fe2:	c0 28       	rjmp	80009fe6 <memmove+0x38>
80009fe4:	30 08       	mov	r8,0
80009fe6:	58 0a       	cp.w	r10,0
80009fe8:	cf 71       	brne	80009fd6 <memmove+0x28>
80009fea:	d8 02       	popm	pc

80009fec <memset>:
80009fec:	18 98       	mov	r8,r12
80009fee:	c0 38       	rjmp	80009ff4 <memset+0x8>
80009ff0:	10 cb       	st.b	r8++,r11
80009ff2:	20 1a       	sub	r10,1
80009ff4:	58 0a       	cp.w	r10,0
80009ff6:	cf d1       	brne	80009ff0 <memset+0x4>
80009ff8:	5e fc       	retal	r12

80009ffa <__malloc_lock>:
80009ffa:	5e fc       	retal	r12

80009ffc <__malloc_unlock>:
80009ffc:	5e fc       	retal	r12

80009ffe <__hi0bits>:
80009ffe:	18 98       	mov	r8,r12
8000a000:	e0 1c 00 00 	andl	r12,0x0
8000a004:	f0 09 15 10 	lsl	r9,r8,0x10
8000a008:	58 0c       	cp.w	r12,0
8000a00a:	f2 08 17 00 	moveq	r8,r9
8000a00e:	f9 bc 00 10 	moveq	r12,16
8000a012:	f9 bc 01 00 	movne	r12,0
8000a016:	10 9a       	mov	r10,r8
8000a018:	f0 09 15 08 	lsl	r9,r8,0x8
8000a01c:	e6 1a ff 00 	andh	r10,0xff00,COH
8000a020:	f7 bc 00 f8 	subeq	r12,-8
8000a024:	f2 08 17 00 	moveq	r8,r9
8000a028:	10 9a       	mov	r10,r8
8000a02a:	f0 09 15 04 	lsl	r9,r8,0x4
8000a02e:	e6 1a f0 00 	andh	r10,0xf000,COH
8000a032:	f7 bc 00 fc 	subeq	r12,-4
8000a036:	f2 08 17 00 	moveq	r8,r9
8000a03a:	10 9a       	mov	r10,r8
8000a03c:	f0 09 15 02 	lsl	r9,r8,0x2
8000a040:	e6 1a c0 00 	andh	r10,0xc000,COH
8000a044:	f7 bc 00 fe 	subeq	r12,-2
8000a048:	f2 08 17 00 	moveq	r8,r9
8000a04c:	58 08       	cp.w	r8,0
8000a04e:	5e 5c       	retlt	r12
8000a050:	ed b8 00 1e 	bld	r8,0x1e
8000a054:	f9 bc 01 20 	movne	r12,32
8000a058:	f7 bc 00 ff 	subeq	r12,-1
8000a05c:	5e fc       	retal	r12

8000a05e <__lo0bits>:
8000a05e:	18 99       	mov	r9,r12
8000a060:	78 08       	ld.w	r8,r12[0x0]
8000a062:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000a066:	c1 50       	breq	8000a090 <__lo0bits+0x32>
8000a068:	ed b8 00 00 	bld	r8,0x0
8000a06c:	c0 21       	brne	8000a070 <__lo0bits+0x12>
8000a06e:	5e fd       	retal	0
8000a070:	10 9b       	mov	r11,r8
8000a072:	f0 0a 16 01 	lsr	r10,r8,0x1
8000a076:	e2 1b 00 02 	andl	r11,0x2,COH
8000a07a:	a3 88       	lsr	r8,0x2
8000a07c:	58 0b       	cp.w	r11,0
8000a07e:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000a082:	f9 bc 01 01 	movne	r12,1
8000a086:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000a08a:	f9 bc 00 02 	moveq	r12,2
8000a08e:	5e fc       	retal	r12
8000a090:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000a094:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a098:	58 0a       	cp.w	r10,0
8000a09a:	f6 08 17 00 	moveq	r8,r11
8000a09e:	f9 bc 00 10 	moveq	r12,16
8000a0a2:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000a0a6:	f0 0a 16 08 	lsr	r10,r8,0x8
8000a0aa:	58 0b       	cp.w	r11,0
8000a0ac:	f7 bc 00 f8 	subeq	r12,-8
8000a0b0:	f4 08 17 00 	moveq	r8,r10
8000a0b4:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000a0b8:	f0 0a 16 04 	lsr	r10,r8,0x4
8000a0bc:	58 0b       	cp.w	r11,0
8000a0be:	f7 bc 00 fc 	subeq	r12,-4
8000a0c2:	f4 08 17 00 	moveq	r8,r10
8000a0c6:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000a0ca:	f0 0a 16 02 	lsr	r10,r8,0x2
8000a0ce:	58 0b       	cp.w	r11,0
8000a0d0:	f7 bc 00 fe 	subeq	r12,-2
8000a0d4:	f4 08 17 00 	moveq	r8,r10
8000a0d8:	ed b8 00 00 	bld	r8,0x0
8000a0dc:	c0 60       	breq	8000a0e8 <__lo0bits+0x8a>
8000a0de:	a1 98       	lsr	r8,0x1
8000a0e0:	c0 31       	brne	8000a0e6 <__lo0bits+0x88>
8000a0e2:	32 0c       	mov	r12,32
8000a0e4:	5e fc       	retal	r12
8000a0e6:	2f fc       	sub	r12,-1
8000a0e8:	93 08       	st.w	r9[0x0],r8
8000a0ea:	5e fc       	retal	r12

8000a0ec <__mcmp>:
8000a0ec:	d4 01       	pushm	lr
8000a0ee:	18 98       	mov	r8,r12
8000a0f0:	76 49       	ld.w	r9,r11[0x10]
8000a0f2:	78 4c       	ld.w	r12,r12[0x10]
8000a0f4:	12 1c       	sub	r12,r9
8000a0f6:	c1 31       	brne	8000a11c <__mcmp+0x30>
8000a0f8:	2f b9       	sub	r9,-5
8000a0fa:	a3 69       	lsl	r9,0x2
8000a0fc:	12 0b       	add	r11,r9
8000a0fe:	f0 09 00 09 	add	r9,r8,r9
8000a102:	2e c8       	sub	r8,-20
8000a104:	13 4e       	ld.w	lr,--r9
8000a106:	17 4a       	ld.w	r10,--r11
8000a108:	14 3e       	cp.w	lr,r10
8000a10a:	c0 60       	breq	8000a116 <__mcmp+0x2a>
8000a10c:	f9 bc 03 ff 	movlo	r12,-1
8000a110:	f9 bc 02 01 	movhs	r12,1
8000a114:	d8 02       	popm	pc
8000a116:	10 39       	cp.w	r9,r8
8000a118:	fe 9b ff f6 	brhi	8000a104 <__mcmp+0x18>
8000a11c:	d8 02       	popm	pc
8000a11e:	d7 03       	nop

8000a120 <_Bfree>:
8000a120:	d4 21       	pushm	r4-r7,lr
8000a122:	18 97       	mov	r7,r12
8000a124:	16 95       	mov	r5,r11
8000a126:	78 96       	ld.w	r6,r12[0x24]
8000a128:	58 06       	cp.w	r6,0
8000a12a:	c0 91       	brne	8000a13c <_Bfree+0x1c>
8000a12c:	31 0c       	mov	r12,16
8000a12e:	fe b0 fc 73 	rcall	80009a14 <malloc>
8000a132:	99 36       	st.w	r12[0xc],r6
8000a134:	8f 9c       	st.w	r7[0x24],r12
8000a136:	99 16       	st.w	r12[0x4],r6
8000a138:	99 26       	st.w	r12[0x8],r6
8000a13a:	99 06       	st.w	r12[0x0],r6
8000a13c:	58 05       	cp.w	r5,0
8000a13e:	c0 90       	breq	8000a150 <_Bfree+0x30>
8000a140:	6a 19       	ld.w	r9,r5[0x4]
8000a142:	6e 98       	ld.w	r8,r7[0x24]
8000a144:	70 38       	ld.w	r8,r8[0xc]
8000a146:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000a14a:	8b 0a       	st.w	r5[0x0],r10
8000a14c:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000a150:	d8 22       	popm	r4-r7,pc
8000a152:	d7 03       	nop

8000a154 <_Balloc>:
8000a154:	d4 21       	pushm	r4-r7,lr
8000a156:	18 97       	mov	r7,r12
8000a158:	16 96       	mov	r6,r11
8000a15a:	78 95       	ld.w	r5,r12[0x24]
8000a15c:	58 05       	cp.w	r5,0
8000a15e:	c0 91       	brne	8000a170 <_Balloc+0x1c>
8000a160:	31 0c       	mov	r12,16
8000a162:	fe b0 fc 59 	rcall	80009a14 <malloc>
8000a166:	99 35       	st.w	r12[0xc],r5
8000a168:	8f 9c       	st.w	r7[0x24],r12
8000a16a:	99 15       	st.w	r12[0x4],r5
8000a16c:	99 25       	st.w	r12[0x8],r5
8000a16e:	99 05       	st.w	r12[0x0],r5
8000a170:	6e 95       	ld.w	r5,r7[0x24]
8000a172:	6a 38       	ld.w	r8,r5[0xc]
8000a174:	58 08       	cp.w	r8,0
8000a176:	c0 b1       	brne	8000a18c <_Balloc+0x38>
8000a178:	31 0a       	mov	r10,16
8000a17a:	30 4b       	mov	r11,4
8000a17c:	0e 9c       	mov	r12,r7
8000a17e:	e0 a0 04 a7 	rcall	8000aacc <_calloc_r>
8000a182:	8b 3c       	st.w	r5[0xc],r12
8000a184:	6e 98       	ld.w	r8,r7[0x24]
8000a186:	70 3c       	ld.w	r12,r8[0xc]
8000a188:	58 0c       	cp.w	r12,0
8000a18a:	c1 b0       	breq	8000a1c0 <_Balloc+0x6c>
8000a18c:	6e 98       	ld.w	r8,r7[0x24]
8000a18e:	70 38       	ld.w	r8,r8[0xc]
8000a190:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000a194:	70 0c       	ld.w	r12,r8[0x0]
8000a196:	58 0c       	cp.w	r12,0
8000a198:	c0 40       	breq	8000a1a0 <_Balloc+0x4c>
8000a19a:	78 09       	ld.w	r9,r12[0x0]
8000a19c:	91 09       	st.w	r8[0x0],r9
8000a19e:	c0 e8       	rjmp	8000a1ba <_Balloc+0x66>
8000a1a0:	0e 9c       	mov	r12,r7
8000a1a2:	30 17       	mov	r7,1
8000a1a4:	0e 9b       	mov	r11,r7
8000a1a6:	ee 06 09 47 	lsl	r7,r7,r6
8000a1aa:	ee ca ff fb 	sub	r10,r7,-5
8000a1ae:	a3 6a       	lsl	r10,0x2
8000a1b0:	e0 a0 04 8e 	rcall	8000aacc <_calloc_r>
8000a1b4:	c0 60       	breq	8000a1c0 <_Balloc+0x6c>
8000a1b6:	99 16       	st.w	r12[0x4],r6
8000a1b8:	99 27       	st.w	r12[0x8],r7
8000a1ba:	30 08       	mov	r8,0
8000a1bc:	99 38       	st.w	r12[0xc],r8
8000a1be:	99 48       	st.w	r12[0x10],r8
8000a1c0:	d8 22       	popm	r4-r7,pc
8000a1c2:	d7 03       	nop

8000a1c4 <__d2b>:
8000a1c4:	d4 31       	pushm	r0-r7,lr
8000a1c6:	20 2d       	sub	sp,8
8000a1c8:	16 93       	mov	r3,r11
8000a1ca:	12 96       	mov	r6,r9
8000a1cc:	10 95       	mov	r5,r8
8000a1ce:	14 92       	mov	r2,r10
8000a1d0:	30 1b       	mov	r11,1
8000a1d2:	cc 1f       	rcall	8000a154 <_Balloc>
8000a1d4:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000a1d8:	50 09       	stdsp	sp[0x0],r9
8000a1da:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000a1de:	b5 a9       	sbr	r9,0x14
8000a1e0:	f0 01 16 14 	lsr	r1,r8,0x14
8000a1e4:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000a1e8:	18 94       	mov	r4,r12
8000a1ea:	58 02       	cp.w	r2,0
8000a1ec:	c1 d0       	breq	8000a226 <__d2b+0x62>
8000a1ee:	fa cc ff f8 	sub	r12,sp,-8
8000a1f2:	18 d2       	st.w	--r12,r2
8000a1f4:	c3 5f       	rcall	8000a05e <__lo0bits>
8000a1f6:	40 18       	lddsp	r8,sp[0x4]
8000a1f8:	c0 d0       	breq	8000a212 <__d2b+0x4e>
8000a1fa:	40 09       	lddsp	r9,sp[0x0]
8000a1fc:	f8 0a 11 20 	rsub	r10,r12,32
8000a200:	f2 0a 09 4a 	lsl	r10,r9,r10
8000a204:	f5 e8 10 08 	or	r8,r10,r8
8000a208:	89 58       	st.w	r4[0x14],r8
8000a20a:	f2 0c 0a 49 	lsr	r9,r9,r12
8000a20e:	50 09       	stdsp	sp[0x0],r9
8000a210:	c0 28       	rjmp	8000a214 <__d2b+0x50>
8000a212:	89 58       	st.w	r4[0x14],r8
8000a214:	40 08       	lddsp	r8,sp[0x0]
8000a216:	58 08       	cp.w	r8,0
8000a218:	f9 b3 01 02 	movne	r3,2
8000a21c:	f9 b3 00 01 	moveq	r3,1
8000a220:	89 68       	st.w	r4[0x18],r8
8000a222:	89 43       	st.w	r4[0x10],r3
8000a224:	c0 88       	rjmp	8000a234 <__d2b+0x70>
8000a226:	1a 9c       	mov	r12,sp
8000a228:	c1 bf       	rcall	8000a05e <__lo0bits>
8000a22a:	30 13       	mov	r3,1
8000a22c:	40 08       	lddsp	r8,sp[0x0]
8000a22e:	2e 0c       	sub	r12,-32
8000a230:	89 43       	st.w	r4[0x10],r3
8000a232:	89 58       	st.w	r4[0x14],r8
8000a234:	58 01       	cp.w	r1,0
8000a236:	c0 90       	breq	8000a248 <__d2b+0x84>
8000a238:	e2 c1 04 33 	sub	r1,r1,1075
8000a23c:	18 01       	add	r1,r12
8000a23e:	8d 01       	st.w	r6[0x0],r1
8000a240:	f8 0c 11 35 	rsub	r12,r12,53
8000a244:	8b 0c       	st.w	r5[0x0],r12
8000a246:	c0 c8       	rjmp	8000a25e <__d2b+0x9a>
8000a248:	e6 c8 ff fc 	sub	r8,r3,-4
8000a24c:	f8 cc 04 32 	sub	r12,r12,1074
8000a250:	a5 73       	lsl	r3,0x5
8000a252:	8d 0c       	st.w	r6[0x0],r12
8000a254:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000a258:	cd 3e       	rcall	80009ffe <__hi0bits>
8000a25a:	18 13       	sub	r3,r12
8000a25c:	8b 03       	st.w	r5[0x0],r3
8000a25e:	08 9c       	mov	r12,r4
8000a260:	2f ed       	sub	sp,-8
8000a262:	d8 32       	popm	r0-r7,pc

8000a264 <__mdiff>:
8000a264:	d4 31       	pushm	r0-r7,lr
8000a266:	74 48       	ld.w	r8,r10[0x10]
8000a268:	76 45       	ld.w	r5,r11[0x10]
8000a26a:	16 97       	mov	r7,r11
8000a26c:	14 96       	mov	r6,r10
8000a26e:	10 15       	sub	r5,r8
8000a270:	c1 31       	brne	8000a296 <__mdiff+0x32>
8000a272:	2f b8       	sub	r8,-5
8000a274:	ee ce ff ec 	sub	lr,r7,-20
8000a278:	a3 68       	lsl	r8,0x2
8000a27a:	f4 08 00 0b 	add	r11,r10,r8
8000a27e:	ee 08 00 08 	add	r8,r7,r8
8000a282:	11 4a       	ld.w	r10,--r8
8000a284:	17 49       	ld.w	r9,--r11
8000a286:	12 3a       	cp.w	r10,r9
8000a288:	c0 30       	breq	8000a28e <__mdiff+0x2a>
8000a28a:	c0 e2       	brcc	8000a2a6 <__mdiff+0x42>
8000a28c:	c0 78       	rjmp	8000a29a <__mdiff+0x36>
8000a28e:	1c 38       	cp.w	r8,lr
8000a290:	fe 9b ff f9 	brhi	8000a282 <__mdiff+0x1e>
8000a294:	c4 98       	rjmp	8000a326 <__mdiff+0xc2>
8000a296:	58 05       	cp.w	r5,0
8000a298:	c0 64       	brge	8000a2a4 <__mdiff+0x40>
8000a29a:	0e 98       	mov	r8,r7
8000a29c:	30 15       	mov	r5,1
8000a29e:	0c 97       	mov	r7,r6
8000a2a0:	10 96       	mov	r6,r8
8000a2a2:	c0 28       	rjmp	8000a2a6 <__mdiff+0x42>
8000a2a4:	30 05       	mov	r5,0
8000a2a6:	6e 1b       	ld.w	r11,r7[0x4]
8000a2a8:	c5 6f       	rcall	8000a154 <_Balloc>
8000a2aa:	6e 49       	ld.w	r9,r7[0x10]
8000a2ac:	6c 44       	ld.w	r4,r6[0x10]
8000a2ae:	99 35       	st.w	r12[0xc],r5
8000a2b0:	2f b4       	sub	r4,-5
8000a2b2:	f2 c5 ff fb 	sub	r5,r9,-5
8000a2b6:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000a2ba:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000a2be:	2e c6       	sub	r6,-20
8000a2c0:	2e c7       	sub	r7,-20
8000a2c2:	f8 c8 ff ec 	sub	r8,r12,-20
8000a2c6:	30 0a       	mov	r10,0
8000a2c8:	0f 0e       	ld.w	lr,r7++
8000a2ca:	0d 0b       	ld.w	r11,r6++
8000a2cc:	fc 02 16 10 	lsr	r2,lr,0x10
8000a2d0:	f6 03 16 10 	lsr	r3,r11,0x10
8000a2d4:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a2d8:	e4 03 01 03 	sub	r3,r2,r3
8000a2dc:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a2e0:	fc 0b 01 0b 	sub	r11,lr,r11
8000a2e4:	f6 0a 00 0a 	add	r10,r11,r10
8000a2e8:	b0 1a       	st.h	r8[0x2],r10
8000a2ea:	b1 4a       	asr	r10,0x10
8000a2ec:	e6 0a 00 0a 	add	r10,r3,r10
8000a2f0:	b0 0a       	st.h	r8[0x0],r10
8000a2f2:	2f c8       	sub	r8,-4
8000a2f4:	b1 4a       	asr	r10,0x10
8000a2f6:	08 36       	cp.w	r6,r4
8000a2f8:	ce 83       	brcs	8000a2c8 <__mdiff+0x64>
8000a2fa:	c0 d8       	rjmp	8000a314 <__mdiff+0xb0>
8000a2fc:	0f 0b       	ld.w	r11,r7++
8000a2fe:	f6 0e 16 10 	lsr	lr,r11,0x10
8000a302:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a306:	16 0a       	add	r10,r11
8000a308:	b0 1a       	st.h	r8[0x2],r10
8000a30a:	b1 4a       	asr	r10,0x10
8000a30c:	1c 0a       	add	r10,lr
8000a30e:	b0 0a       	st.h	r8[0x0],r10
8000a310:	2f c8       	sub	r8,-4
8000a312:	b1 4a       	asr	r10,0x10
8000a314:	0a 37       	cp.w	r7,r5
8000a316:	cf 33       	brcs	8000a2fc <__mdiff+0x98>
8000a318:	c0 28       	rjmp	8000a31c <__mdiff+0xb8>
8000a31a:	20 19       	sub	r9,1
8000a31c:	11 4a       	ld.w	r10,--r8
8000a31e:	58 0a       	cp.w	r10,0
8000a320:	cf d0       	breq	8000a31a <__mdiff+0xb6>
8000a322:	99 49       	st.w	r12[0x10],r9
8000a324:	d8 32       	popm	r0-r7,pc
8000a326:	30 0b       	mov	r11,0
8000a328:	c1 6f       	rcall	8000a154 <_Balloc>
8000a32a:	30 18       	mov	r8,1
8000a32c:	99 48       	st.w	r12[0x10],r8
8000a32e:	30 08       	mov	r8,0
8000a330:	99 58       	st.w	r12[0x14],r8
8000a332:	d8 32       	popm	r0-r7,pc

8000a334 <__lshift>:
8000a334:	d4 31       	pushm	r0-r7,lr
8000a336:	16 97       	mov	r7,r11
8000a338:	76 46       	ld.w	r6,r11[0x10]
8000a33a:	f4 02 14 05 	asr	r2,r10,0x5
8000a33e:	2f f6       	sub	r6,-1
8000a340:	14 93       	mov	r3,r10
8000a342:	18 94       	mov	r4,r12
8000a344:	04 06       	add	r6,r2
8000a346:	76 1b       	ld.w	r11,r11[0x4]
8000a348:	6e 28       	ld.w	r8,r7[0x8]
8000a34a:	c0 38       	rjmp	8000a350 <__lshift+0x1c>
8000a34c:	2f fb       	sub	r11,-1
8000a34e:	a1 78       	lsl	r8,0x1
8000a350:	10 36       	cp.w	r6,r8
8000a352:	fe 99 ff fd 	brgt	8000a34c <__lshift+0x18>
8000a356:	08 9c       	mov	r12,r4
8000a358:	cf ee       	rcall	8000a154 <_Balloc>
8000a35a:	30 09       	mov	r9,0
8000a35c:	18 95       	mov	r5,r12
8000a35e:	f8 c8 ff ec 	sub	r8,r12,-20
8000a362:	12 9a       	mov	r10,r9
8000a364:	c0 38       	rjmp	8000a36a <__lshift+0x36>
8000a366:	10 aa       	st.w	r8++,r10
8000a368:	2f f9       	sub	r9,-1
8000a36a:	04 39       	cp.w	r9,r2
8000a36c:	cf d5       	brlt	8000a366 <__lshift+0x32>
8000a36e:	6e 4b       	ld.w	r11,r7[0x10]
8000a370:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000a374:	2f bb       	sub	r11,-5
8000a376:	ee c9 ff ec 	sub	r9,r7,-20
8000a37a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000a37e:	58 03       	cp.w	r3,0
8000a380:	c1 30       	breq	8000a3a6 <__lshift+0x72>
8000a382:	e6 0c 11 20 	rsub	r12,r3,32
8000a386:	30 0a       	mov	r10,0
8000a388:	72 02       	ld.w	r2,r9[0x0]
8000a38a:	e4 03 09 42 	lsl	r2,r2,r3
8000a38e:	04 4a       	or	r10,r2
8000a390:	10 aa       	st.w	r8++,r10
8000a392:	13 0a       	ld.w	r10,r9++
8000a394:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a398:	16 39       	cp.w	r9,r11
8000a39a:	cf 73       	brcs	8000a388 <__lshift+0x54>
8000a39c:	91 0a       	st.w	r8[0x0],r10
8000a39e:	58 0a       	cp.w	r10,0
8000a3a0:	c0 70       	breq	8000a3ae <__lshift+0x7a>
8000a3a2:	2f f6       	sub	r6,-1
8000a3a4:	c0 58       	rjmp	8000a3ae <__lshift+0x7a>
8000a3a6:	13 0a       	ld.w	r10,r9++
8000a3a8:	10 aa       	st.w	r8++,r10
8000a3aa:	16 39       	cp.w	r9,r11
8000a3ac:	cf d3       	brcs	8000a3a6 <__lshift+0x72>
8000a3ae:	08 9c       	mov	r12,r4
8000a3b0:	20 16       	sub	r6,1
8000a3b2:	0e 9b       	mov	r11,r7
8000a3b4:	8b 46       	st.w	r5[0x10],r6
8000a3b6:	cb 5e       	rcall	8000a120 <_Bfree>
8000a3b8:	0a 9c       	mov	r12,r5
8000a3ba:	d8 32       	popm	r0-r7,pc

8000a3bc <__multiply>:
8000a3bc:	d4 31       	pushm	r0-r7,lr
8000a3be:	20 2d       	sub	sp,8
8000a3c0:	76 49       	ld.w	r9,r11[0x10]
8000a3c2:	74 48       	ld.w	r8,r10[0x10]
8000a3c4:	16 96       	mov	r6,r11
8000a3c6:	14 95       	mov	r5,r10
8000a3c8:	10 39       	cp.w	r9,r8
8000a3ca:	ec 08 17 50 	movlt	r8,r6
8000a3ce:	ea 06 17 50 	movlt	r6,r5
8000a3d2:	f0 05 17 50 	movlt	r5,r8
8000a3d6:	6c 28       	ld.w	r8,r6[0x8]
8000a3d8:	76 43       	ld.w	r3,r11[0x10]
8000a3da:	74 42       	ld.w	r2,r10[0x10]
8000a3dc:	76 1b       	ld.w	r11,r11[0x4]
8000a3de:	e4 03 00 07 	add	r7,r2,r3
8000a3e2:	10 37       	cp.w	r7,r8
8000a3e4:	f7 bb 09 ff 	subgt	r11,-1
8000a3e8:	cb 6e       	rcall	8000a154 <_Balloc>
8000a3ea:	ee c4 ff fb 	sub	r4,r7,-5
8000a3ee:	f8 c9 ff ec 	sub	r9,r12,-20
8000a3f2:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000a3f6:	30 0a       	mov	r10,0
8000a3f8:	12 98       	mov	r8,r9
8000a3fa:	c0 28       	rjmp	8000a3fe <__multiply+0x42>
8000a3fc:	10 aa       	st.w	r8++,r10
8000a3fe:	08 38       	cp.w	r8,r4
8000a400:	cf e3       	brcs	8000a3fc <__multiply+0x40>
8000a402:	2f b3       	sub	r3,-5
8000a404:	2f b2       	sub	r2,-5
8000a406:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000a40a:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000a40e:	ec cb ff ec 	sub	r11,r6,-20
8000a412:	50 12       	stdsp	sp[0x4],r2
8000a414:	ea ca ff ec 	sub	r10,r5,-20
8000a418:	c4 48       	rjmp	8000a4a0 <__multiply+0xe4>
8000a41a:	94 95       	ld.uh	r5,r10[0x2]
8000a41c:	58 05       	cp.w	r5,0
8000a41e:	c2 00       	breq	8000a45e <__multiply+0xa2>
8000a420:	12 98       	mov	r8,r9
8000a422:	16 96       	mov	r6,r11
8000a424:	30 0e       	mov	lr,0
8000a426:	50 09       	stdsp	sp[0x0],r9
8000a428:	0d 02       	ld.w	r2,r6++
8000a42a:	e4 00 16 10 	lsr	r0,r2,0x10
8000a42e:	70 01       	ld.w	r1,r8[0x0]
8000a430:	70 09       	ld.w	r9,r8[0x0]
8000a432:	b1 81       	lsr	r1,0x10
8000a434:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000a438:	e0 05 03 41 	mac	r1,r0,r5
8000a43c:	ab 32       	mul	r2,r5
8000a43e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000a442:	00 02       	add	r2,r0
8000a444:	e4 0e 00 0e 	add	lr,r2,lr
8000a448:	b0 1e       	st.h	r8[0x2],lr
8000a44a:	b1 8e       	lsr	lr,0x10
8000a44c:	1c 01       	add	r1,lr
8000a44e:	b0 01       	st.h	r8[0x0],r1
8000a450:	e2 0e 16 10 	lsr	lr,r1,0x10
8000a454:	2f c8       	sub	r8,-4
8000a456:	06 36       	cp.w	r6,r3
8000a458:	ce 83       	brcs	8000a428 <__multiply+0x6c>
8000a45a:	40 09       	lddsp	r9,sp[0x0]
8000a45c:	91 0e       	st.w	r8[0x0],lr
8000a45e:	94 86       	ld.uh	r6,r10[0x0]
8000a460:	58 06       	cp.w	r6,0
8000a462:	c1 d0       	breq	8000a49c <__multiply+0xe0>
8000a464:	72 02       	ld.w	r2,r9[0x0]
8000a466:	12 98       	mov	r8,r9
8000a468:	16 9e       	mov	lr,r11
8000a46a:	30 05       	mov	r5,0
8000a46c:	b0 12       	st.h	r8[0x2],r2
8000a46e:	1d 01       	ld.w	r1,lr++
8000a470:	90 82       	ld.uh	r2,r8[0x0]
8000a472:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000a476:	ad 30       	mul	r0,r6
8000a478:	e0 02 00 02 	add	r2,r0,r2
8000a47c:	e4 05 00 05 	add	r5,r2,r5
8000a480:	b0 05       	st.h	r8[0x0],r5
8000a482:	b1 85       	lsr	r5,0x10
8000a484:	b1 81       	lsr	r1,0x10
8000a486:	2f c8       	sub	r8,-4
8000a488:	ad 31       	mul	r1,r6
8000a48a:	90 92       	ld.uh	r2,r8[0x2]
8000a48c:	e2 02 00 02 	add	r2,r1,r2
8000a490:	0a 02       	add	r2,r5
8000a492:	e4 05 16 10 	lsr	r5,r2,0x10
8000a496:	06 3e       	cp.w	lr,r3
8000a498:	ce a3       	brcs	8000a46c <__multiply+0xb0>
8000a49a:	91 02       	st.w	r8[0x0],r2
8000a49c:	2f ca       	sub	r10,-4
8000a49e:	2f c9       	sub	r9,-4
8000a4a0:	40 18       	lddsp	r8,sp[0x4]
8000a4a2:	10 3a       	cp.w	r10,r8
8000a4a4:	cb b3       	brcs	8000a41a <__multiply+0x5e>
8000a4a6:	c0 28       	rjmp	8000a4aa <__multiply+0xee>
8000a4a8:	20 17       	sub	r7,1
8000a4aa:	58 07       	cp.w	r7,0
8000a4ac:	e0 8a 00 05 	brle	8000a4b6 <__multiply+0xfa>
8000a4b0:	09 48       	ld.w	r8,--r4
8000a4b2:	58 08       	cp.w	r8,0
8000a4b4:	cf a0       	breq	8000a4a8 <__multiply+0xec>
8000a4b6:	99 47       	st.w	r12[0x10],r7
8000a4b8:	2f ed       	sub	sp,-8
8000a4ba:	d8 32       	popm	r0-r7,pc

8000a4bc <__i2b>:
8000a4bc:	d4 21       	pushm	r4-r7,lr
8000a4be:	16 97       	mov	r7,r11
8000a4c0:	30 1b       	mov	r11,1
8000a4c2:	c4 9e       	rcall	8000a154 <_Balloc>
8000a4c4:	30 19       	mov	r9,1
8000a4c6:	99 57       	st.w	r12[0x14],r7
8000a4c8:	99 49       	st.w	r12[0x10],r9
8000a4ca:	d8 22       	popm	r4-r7,pc

8000a4cc <__multadd>:
8000a4cc:	d4 31       	pushm	r0-r7,lr
8000a4ce:	30 08       	mov	r8,0
8000a4d0:	12 95       	mov	r5,r9
8000a4d2:	16 97       	mov	r7,r11
8000a4d4:	18 96       	mov	r6,r12
8000a4d6:	76 44       	ld.w	r4,r11[0x10]
8000a4d8:	f6 c9 ff ec 	sub	r9,r11,-20
8000a4dc:	72 0b       	ld.w	r11,r9[0x0]
8000a4de:	f6 0c 16 10 	lsr	r12,r11,0x10
8000a4e2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a4e6:	f4 0c 02 4c 	mul	r12,r10,r12
8000a4ea:	f4 0b 03 45 	mac	r5,r10,r11
8000a4ee:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000a4f2:	b1 85       	lsr	r5,0x10
8000a4f4:	18 05       	add	r5,r12
8000a4f6:	ea 0c 15 10 	lsl	r12,r5,0x10
8000a4fa:	f8 0b 00 0b 	add	r11,r12,r11
8000a4fe:	12 ab       	st.w	r9++,r11
8000a500:	2f f8       	sub	r8,-1
8000a502:	b1 85       	lsr	r5,0x10
8000a504:	08 38       	cp.w	r8,r4
8000a506:	ce b5       	brlt	8000a4dc <__multadd+0x10>
8000a508:	58 05       	cp.w	r5,0
8000a50a:	c1 c0       	breq	8000a542 <__multadd+0x76>
8000a50c:	6e 28       	ld.w	r8,r7[0x8]
8000a50e:	10 34       	cp.w	r4,r8
8000a510:	c1 35       	brlt	8000a536 <__multadd+0x6a>
8000a512:	6e 1b       	ld.w	r11,r7[0x4]
8000a514:	0c 9c       	mov	r12,r6
8000a516:	2f fb       	sub	r11,-1
8000a518:	c1 ee       	rcall	8000a154 <_Balloc>
8000a51a:	6e 4a       	ld.w	r10,r7[0x10]
8000a51c:	ee cb ff f4 	sub	r11,r7,-12
8000a520:	18 93       	mov	r3,r12
8000a522:	2f ea       	sub	r10,-2
8000a524:	2f 4c       	sub	r12,-12
8000a526:	a3 6a       	lsl	r10,0x2
8000a528:	fe b0 fc 9f 	rcall	80009e66 <memcpy>
8000a52c:	0e 9b       	mov	r11,r7
8000a52e:	0c 9c       	mov	r12,r6
8000a530:	fe b0 fd f8 	rcall	8000a120 <_Bfree>
8000a534:	06 97       	mov	r7,r3
8000a536:	e8 c8 ff ff 	sub	r8,r4,-1
8000a53a:	2f b4       	sub	r4,-5
8000a53c:	8f 48       	st.w	r7[0x10],r8
8000a53e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000a542:	0e 9c       	mov	r12,r7
8000a544:	d8 32       	popm	r0-r7,pc
8000a546:	d7 03       	nop

8000a548 <__pow5mult>:
8000a548:	d4 31       	pushm	r0-r7,lr
8000a54a:	14 96       	mov	r6,r10
8000a54c:	18 97       	mov	r7,r12
8000a54e:	16 94       	mov	r4,r11
8000a550:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000a554:	c0 80       	breq	8000a564 <__pow5mult+0x1c>
8000a556:	20 18       	sub	r8,1
8000a558:	49 f9       	lddpc	r9,8000a5d4 <__pow5mult+0x8c>
8000a55a:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000a55e:	30 09       	mov	r9,0
8000a560:	cb 6f       	rcall	8000a4cc <__multadd>
8000a562:	18 94       	mov	r4,r12
8000a564:	a3 46       	asr	r6,0x2
8000a566:	c3 40       	breq	8000a5ce <__pow5mult+0x86>
8000a568:	6e 95       	ld.w	r5,r7[0x24]
8000a56a:	58 05       	cp.w	r5,0
8000a56c:	c0 91       	brne	8000a57e <__pow5mult+0x36>
8000a56e:	31 0c       	mov	r12,16
8000a570:	fe b0 fa 52 	rcall	80009a14 <malloc>
8000a574:	99 35       	st.w	r12[0xc],r5
8000a576:	8f 9c       	st.w	r7[0x24],r12
8000a578:	99 15       	st.w	r12[0x4],r5
8000a57a:	99 25       	st.w	r12[0x8],r5
8000a57c:	99 05       	st.w	r12[0x0],r5
8000a57e:	6e 93       	ld.w	r3,r7[0x24]
8000a580:	66 25       	ld.w	r5,r3[0x8]
8000a582:	58 05       	cp.w	r5,0
8000a584:	c0 c1       	brne	8000a59c <__pow5mult+0x54>
8000a586:	e0 6b 02 71 	mov	r11,625
8000a58a:	0e 9c       	mov	r12,r7
8000a58c:	c9 8f       	rcall	8000a4bc <__i2b>
8000a58e:	87 2c       	st.w	r3[0x8],r12
8000a590:	30 08       	mov	r8,0
8000a592:	18 95       	mov	r5,r12
8000a594:	99 08       	st.w	r12[0x0],r8
8000a596:	c0 38       	rjmp	8000a59c <__pow5mult+0x54>
8000a598:	06 9c       	mov	r12,r3
8000a59a:	18 95       	mov	r5,r12
8000a59c:	ed b6 00 00 	bld	r6,0x0
8000a5a0:	c0 b1       	brne	8000a5b6 <__pow5mult+0x6e>
8000a5a2:	08 9b       	mov	r11,r4
8000a5a4:	0a 9a       	mov	r10,r5
8000a5a6:	0e 9c       	mov	r12,r7
8000a5a8:	c0 af       	rcall	8000a3bc <__multiply>
8000a5aa:	08 9b       	mov	r11,r4
8000a5ac:	18 93       	mov	r3,r12
8000a5ae:	0e 9c       	mov	r12,r7
8000a5b0:	06 94       	mov	r4,r3
8000a5b2:	fe b0 fd b7 	rcall	8000a120 <_Bfree>
8000a5b6:	a1 56       	asr	r6,0x1
8000a5b8:	c0 b0       	breq	8000a5ce <__pow5mult+0x86>
8000a5ba:	6a 03       	ld.w	r3,r5[0x0]
8000a5bc:	58 03       	cp.w	r3,0
8000a5be:	ce d1       	brne	8000a598 <__pow5mult+0x50>
8000a5c0:	0a 9a       	mov	r10,r5
8000a5c2:	0a 9b       	mov	r11,r5
8000a5c4:	0e 9c       	mov	r12,r7
8000a5c6:	cf be       	rcall	8000a3bc <__multiply>
8000a5c8:	8b 0c       	st.w	r5[0x0],r12
8000a5ca:	99 03       	st.w	r12[0x0],r3
8000a5cc:	ce 7b       	rjmp	8000a59a <__pow5mult+0x52>
8000a5ce:	08 9c       	mov	r12,r4
8000a5d0:	d8 32       	popm	r0-r7,pc
8000a5d2:	d7 03       	nop
8000a5d4:	80 00       	ld.sh	r0,r0[0x0]
8000a5d6:	cc 30       	breq	8000a55c <__pow5mult+0x14>

8000a5d8 <_realloc_r>:
8000a5d8:	d4 31       	pushm	r0-r7,lr
8000a5da:	20 1d       	sub	sp,4
8000a5dc:	16 94       	mov	r4,r11
8000a5de:	18 92       	mov	r2,r12
8000a5e0:	14 9b       	mov	r11,r10
8000a5e2:	58 04       	cp.w	r4,0
8000a5e4:	c0 51       	brne	8000a5ee <_realloc_r+0x16>
8000a5e6:	fe b0 fa 1f 	rcall	80009a24 <_malloc_r>
8000a5ea:	18 95       	mov	r5,r12
8000a5ec:	c5 59       	rjmp	8000a896 <_realloc_r+0x2be>
8000a5ee:	50 0a       	stdsp	sp[0x0],r10
8000a5f0:	fe b0 fd 05 	rcall	80009ffa <__malloc_lock>
8000a5f4:	40 0b       	lddsp	r11,sp[0x0]
8000a5f6:	f6 c8 ff f5 	sub	r8,r11,-11
8000a5fa:	e8 c1 00 08 	sub	r1,r4,8
8000a5fe:	10 96       	mov	r6,r8
8000a600:	62 1c       	ld.w	r12,r1[0x4]
8000a602:	e0 16 ff f8 	andl	r6,0xfff8
8000a606:	59 68       	cp.w	r8,22
8000a608:	f9 b6 08 10 	movls	r6,16
8000a60c:	16 36       	cp.w	r6,r11
8000a60e:	5f 38       	srlo	r8
8000a610:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000a614:	c0 50       	breq	8000a61e <_realloc_r+0x46>
8000a616:	30 c8       	mov	r8,12
8000a618:	30 05       	mov	r5,0
8000a61a:	85 38       	st.w	r2[0xc],r8
8000a61c:	c3 d9       	rjmp	8000a896 <_realloc_r+0x2be>
8000a61e:	18 90       	mov	r0,r12
8000a620:	e0 10 ff fc 	andl	r0,0xfffc
8000a624:	0c 30       	cp.w	r0,r6
8000a626:	e0 84 01 0d 	brge	8000a840 <_realloc_r+0x268>
8000a62a:	4c a8       	lddpc	r8,8000a750 <_realloc_r+0x178>
8000a62c:	e2 00 00 09 	add	r9,r1,r0
8000a630:	70 25       	ld.w	r5,r8[0x8]
8000a632:	0a 39       	cp.w	r9,r5
8000a634:	c0 90       	breq	8000a646 <_realloc_r+0x6e>
8000a636:	72 1a       	ld.w	r10,r9[0x4]
8000a638:	a1 ca       	cbr	r10,0x0
8000a63a:	f2 0a 00 0a 	add	r10,r9,r10
8000a63e:	74 1a       	ld.w	r10,r10[0x4]
8000a640:	ed ba 00 00 	bld	r10,0x0
8000a644:	c2 20       	breq	8000a688 <_realloc_r+0xb0>
8000a646:	72 1a       	ld.w	r10,r9[0x4]
8000a648:	e0 1a ff fc 	andl	r10,0xfffc
8000a64c:	f4 00 00 03 	add	r3,r10,r0
8000a650:	0a 39       	cp.w	r9,r5
8000a652:	c1 31       	brne	8000a678 <_realloc_r+0xa0>
8000a654:	ec c7 ff f0 	sub	r7,r6,-16
8000a658:	0e 33       	cp.w	r3,r7
8000a65a:	c1 95       	brlt	8000a68c <_realloc_r+0xb4>
8000a65c:	e2 06 00 09 	add	r9,r1,r6
8000a660:	0c 13       	sub	r3,r6
8000a662:	a1 a3       	sbr	r3,0x0
8000a664:	93 13       	st.w	r9[0x4],r3
8000a666:	91 29       	st.w	r8[0x8],r9
8000a668:	04 9c       	mov	r12,r2
8000a66a:	62 18       	ld.w	r8,r1[0x4]
8000a66c:	08 95       	mov	r5,r4
8000a66e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a672:	10 46       	or	r6,r8
8000a674:	83 16       	st.w	r1[0x4],r6
8000a676:	c0 e9       	rjmp	8000a892 <_realloc_r+0x2ba>
8000a678:	0c 33       	cp.w	r3,r6
8000a67a:	c0 95       	brlt	8000a68c <_realloc_r+0xb4>
8000a67c:	72 28       	ld.w	r8,r9[0x8]
8000a67e:	02 97       	mov	r7,r1
8000a680:	72 39       	ld.w	r9,r9[0xc]
8000a682:	93 28       	st.w	r9[0x8],r8
8000a684:	91 39       	st.w	r8[0xc],r9
8000a686:	cd f8       	rjmp	8000a844 <_realloc_r+0x26c>
8000a688:	30 0a       	mov	r10,0
8000a68a:	14 99       	mov	r9,r10
8000a68c:	ed bc 00 00 	bld	r12,0x0
8000a690:	e0 80 00 98 	breq	8000a7c0 <_realloc_r+0x1e8>
8000a694:	62 07       	ld.w	r7,r1[0x0]
8000a696:	e2 07 01 07 	sub	r7,r1,r7
8000a69a:	6e 1c       	ld.w	r12,r7[0x4]
8000a69c:	e0 1c ff fc 	andl	r12,0xfffc
8000a6a0:	58 09       	cp.w	r9,0
8000a6a2:	c5 90       	breq	8000a754 <_realloc_r+0x17c>
8000a6a4:	f8 00 00 03 	add	r3,r12,r0
8000a6a8:	0a 39       	cp.w	r9,r5
8000a6aa:	c4 81       	brne	8000a73a <_realloc_r+0x162>
8000a6ac:	14 03       	add	r3,r10
8000a6ae:	ec c9 ff f0 	sub	r9,r6,-16
8000a6b2:	12 33       	cp.w	r3,r9
8000a6b4:	c5 05       	brlt	8000a754 <_realloc_r+0x17c>
8000a6b6:	6e 3a       	ld.w	r10,r7[0xc]
8000a6b8:	6e 29       	ld.w	r9,r7[0x8]
8000a6ba:	95 29       	st.w	r10[0x8],r9
8000a6bc:	93 3a       	st.w	r9[0xc],r10
8000a6be:	ee c5 ff f8 	sub	r5,r7,-8
8000a6c2:	e0 ca 00 04 	sub	r10,r0,4
8000a6c6:	e0 4a 00 24 	cp.w	r10,36
8000a6ca:	e0 8b 00 25 	brhi	8000a714 <_realloc_r+0x13c>
8000a6ce:	0a 99       	mov	r9,r5
8000a6d0:	59 3a       	cp.w	r10,19
8000a6d2:	e0 88 00 1a 	brls	8000a706 <_realloc_r+0x12e>
8000a6d6:	09 09       	ld.w	r9,r4++
8000a6d8:	8b 09       	st.w	r5[0x0],r9
8000a6da:	09 09       	ld.w	r9,r4++
8000a6dc:	8f 39       	st.w	r7[0xc],r9
8000a6de:	ee c9 ff f0 	sub	r9,r7,-16
8000a6e2:	59 ba       	cp.w	r10,27
8000a6e4:	e0 88 00 11 	brls	8000a706 <_realloc_r+0x12e>
8000a6e8:	09 0b       	ld.w	r11,r4++
8000a6ea:	93 0b       	st.w	r9[0x0],r11
8000a6ec:	09 09       	ld.w	r9,r4++
8000a6ee:	8f 59       	st.w	r7[0x14],r9
8000a6f0:	ee c9 ff e8 	sub	r9,r7,-24
8000a6f4:	e0 4a 00 24 	cp.w	r10,36
8000a6f8:	c0 71       	brne	8000a706 <_realloc_r+0x12e>
8000a6fa:	09 0a       	ld.w	r10,r4++
8000a6fc:	93 0a       	st.w	r9[0x0],r10
8000a6fe:	ee c9 ff e0 	sub	r9,r7,-32
8000a702:	09 0a       	ld.w	r10,r4++
8000a704:	8f 7a       	st.w	r7[0x1c],r10
8000a706:	09 0a       	ld.w	r10,r4++
8000a708:	12 aa       	st.w	r9++,r10
8000a70a:	68 0a       	ld.w	r10,r4[0x0]
8000a70c:	93 0a       	st.w	r9[0x0],r10
8000a70e:	68 1a       	ld.w	r10,r4[0x4]
8000a710:	93 1a       	st.w	r9[0x4],r10
8000a712:	c0 78       	rjmp	8000a720 <_realloc_r+0x148>
8000a714:	50 08       	stdsp	sp[0x0],r8
8000a716:	08 9b       	mov	r11,r4
8000a718:	0a 9c       	mov	r12,r5
8000a71a:	fe b0 fc 4a 	rcall	80009fae <memmove>
8000a71e:	40 08       	lddsp	r8,sp[0x0]
8000a720:	ee 06 00 09 	add	r9,r7,r6
8000a724:	0c 13       	sub	r3,r6
8000a726:	a1 a3       	sbr	r3,0x0
8000a728:	93 13       	st.w	r9[0x4],r3
8000a72a:	91 29       	st.w	r8[0x8],r9
8000a72c:	04 9c       	mov	r12,r2
8000a72e:	6e 18       	ld.w	r8,r7[0x4]
8000a730:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a734:	10 46       	or	r6,r8
8000a736:	8f 16       	st.w	r7[0x4],r6
8000a738:	ca d8       	rjmp	8000a892 <_realloc_r+0x2ba>
8000a73a:	14 03       	add	r3,r10
8000a73c:	0c 33       	cp.w	r3,r6
8000a73e:	c0 b5       	brlt	8000a754 <_realloc_r+0x17c>
8000a740:	72 28       	ld.w	r8,r9[0x8]
8000a742:	72 39       	ld.w	r9,r9[0xc]
8000a744:	93 28       	st.w	r9[0x8],r8
8000a746:	91 39       	st.w	r8[0xc],r9
8000a748:	6e 28       	ld.w	r8,r7[0x8]
8000a74a:	6e 39       	ld.w	r9,r7[0xc]
8000a74c:	c0 a8       	rjmp	8000a760 <_realloc_r+0x188>
8000a74e:	d7 03       	nop
8000a750:	00 00       	add	r0,r0
8000a752:	01 00       	ld.w	r0,r0++
8000a754:	f8 00 00 03 	add	r3,r12,r0
8000a758:	0c 33       	cp.w	r3,r6
8000a75a:	c3 35       	brlt	8000a7c0 <_realloc_r+0x1e8>
8000a75c:	6e 39       	ld.w	r9,r7[0xc]
8000a75e:	6e 28       	ld.w	r8,r7[0x8]
8000a760:	93 28       	st.w	r9[0x8],r8
8000a762:	91 39       	st.w	r8[0xc],r9
8000a764:	e0 ca 00 04 	sub	r10,r0,4
8000a768:	ee cc ff f8 	sub	r12,r7,-8
8000a76c:	e0 4a 00 24 	cp.w	r10,36
8000a770:	e0 8b 00 24 	brhi	8000a7b8 <_realloc_r+0x1e0>
8000a774:	59 3a       	cp.w	r10,19
8000a776:	e0 88 00 1a 	brls	8000a7aa <_realloc_r+0x1d2>
8000a77a:	09 08       	ld.w	r8,r4++
8000a77c:	99 08       	st.w	r12[0x0],r8
8000a77e:	09 08       	ld.w	r8,r4++
8000a780:	8f 38       	st.w	r7[0xc],r8
8000a782:	ee cc ff f0 	sub	r12,r7,-16
8000a786:	59 ba       	cp.w	r10,27
8000a788:	e0 88 00 11 	brls	8000a7aa <_realloc_r+0x1d2>
8000a78c:	09 08       	ld.w	r8,r4++
8000a78e:	99 08       	st.w	r12[0x0],r8
8000a790:	09 08       	ld.w	r8,r4++
8000a792:	8f 58       	st.w	r7[0x14],r8
8000a794:	ee cc ff e8 	sub	r12,r7,-24
8000a798:	e0 4a 00 24 	cp.w	r10,36
8000a79c:	c0 71       	brne	8000a7aa <_realloc_r+0x1d2>
8000a79e:	09 08       	ld.w	r8,r4++
8000a7a0:	99 08       	st.w	r12[0x0],r8
8000a7a2:	ee cc ff e0 	sub	r12,r7,-32
8000a7a6:	09 08       	ld.w	r8,r4++
8000a7a8:	8f 78       	st.w	r7[0x1c],r8
8000a7aa:	09 08       	ld.w	r8,r4++
8000a7ac:	18 a8       	st.w	r12++,r8
8000a7ae:	68 08       	ld.w	r8,r4[0x0]
8000a7b0:	99 08       	st.w	r12[0x0],r8
8000a7b2:	68 18       	ld.w	r8,r4[0x4]
8000a7b4:	99 18       	st.w	r12[0x4],r8
8000a7b6:	c4 78       	rjmp	8000a844 <_realloc_r+0x26c>
8000a7b8:	08 9b       	mov	r11,r4
8000a7ba:	fe b0 fb fa 	rcall	80009fae <memmove>
8000a7be:	c4 38       	rjmp	8000a844 <_realloc_r+0x26c>
8000a7c0:	04 9c       	mov	r12,r2
8000a7c2:	fe b0 f9 31 	rcall	80009a24 <_malloc_r>
8000a7c6:	18 95       	mov	r5,r12
8000a7c8:	c3 a0       	breq	8000a83c <_realloc_r+0x264>
8000a7ca:	62 18       	ld.w	r8,r1[0x4]
8000a7cc:	f8 c9 00 08 	sub	r9,r12,8
8000a7d0:	a1 c8       	cbr	r8,0x0
8000a7d2:	e2 08 00 08 	add	r8,r1,r8
8000a7d6:	10 39       	cp.w	r9,r8
8000a7d8:	c0 71       	brne	8000a7e6 <_realloc_r+0x20e>
8000a7da:	72 13       	ld.w	r3,r9[0x4]
8000a7dc:	02 97       	mov	r7,r1
8000a7de:	e0 13 ff fc 	andl	r3,0xfffc
8000a7e2:	00 03       	add	r3,r0
8000a7e4:	c3 08       	rjmp	8000a844 <_realloc_r+0x26c>
8000a7e6:	e0 ca 00 04 	sub	r10,r0,4
8000a7ea:	e0 4a 00 24 	cp.w	r10,36
8000a7ee:	e0 8b 00 20 	brhi	8000a82e <_realloc_r+0x256>
8000a7f2:	08 99       	mov	r9,r4
8000a7f4:	18 98       	mov	r8,r12
8000a7f6:	59 3a       	cp.w	r10,19
8000a7f8:	e0 88 00 14 	brls	8000a820 <_realloc_r+0x248>
8000a7fc:	13 0b       	ld.w	r11,r9++
8000a7fe:	10 ab       	st.w	r8++,r11
8000a800:	13 0b       	ld.w	r11,r9++
8000a802:	10 ab       	st.w	r8++,r11
8000a804:	59 ba       	cp.w	r10,27
8000a806:	e0 88 00 0d 	brls	8000a820 <_realloc_r+0x248>
8000a80a:	13 0b       	ld.w	r11,r9++
8000a80c:	10 ab       	st.w	r8++,r11
8000a80e:	13 0b       	ld.w	r11,r9++
8000a810:	10 ab       	st.w	r8++,r11
8000a812:	e0 4a 00 24 	cp.w	r10,36
8000a816:	c0 51       	brne	8000a820 <_realloc_r+0x248>
8000a818:	13 0a       	ld.w	r10,r9++
8000a81a:	10 aa       	st.w	r8++,r10
8000a81c:	13 0a       	ld.w	r10,r9++
8000a81e:	10 aa       	st.w	r8++,r10
8000a820:	13 0a       	ld.w	r10,r9++
8000a822:	10 aa       	st.w	r8++,r10
8000a824:	72 0a       	ld.w	r10,r9[0x0]
8000a826:	91 0a       	st.w	r8[0x0],r10
8000a828:	72 19       	ld.w	r9,r9[0x4]
8000a82a:	91 19       	st.w	r8[0x4],r9
8000a82c:	c0 48       	rjmp	8000a834 <_realloc_r+0x25c>
8000a82e:	08 9b       	mov	r11,r4
8000a830:	fe b0 fb bf 	rcall	80009fae <memmove>
8000a834:	08 9b       	mov	r11,r4
8000a836:	04 9c       	mov	r12,r2
8000a838:	fe b0 f6 4e 	rcall	800094d4 <_free_r>
8000a83c:	04 9c       	mov	r12,r2
8000a83e:	c2 a8       	rjmp	8000a892 <_realloc_r+0x2ba>
8000a840:	00 93       	mov	r3,r0
8000a842:	02 97       	mov	r7,r1
8000a844:	e6 06 01 09 	sub	r9,r3,r6
8000a848:	6e 18       	ld.w	r8,r7[0x4]
8000a84a:	58 f9       	cp.w	r9,15
8000a84c:	e0 88 00 16 	brls	8000a878 <_realloc_r+0x2a0>
8000a850:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a854:	ed e8 10 08 	or	r8,r6,r8
8000a858:	8f 18       	st.w	r7[0x4],r8
8000a85a:	12 98       	mov	r8,r9
8000a85c:	a1 a8       	sbr	r8,0x0
8000a85e:	ee 06 00 0b 	add	r11,r7,r6
8000a862:	f6 09 00 09 	add	r9,r11,r9
8000a866:	97 18       	st.w	r11[0x4],r8
8000a868:	72 18       	ld.w	r8,r9[0x4]
8000a86a:	a1 a8       	sbr	r8,0x0
8000a86c:	2f 8b       	sub	r11,-8
8000a86e:	93 18       	st.w	r9[0x4],r8
8000a870:	04 9c       	mov	r12,r2
8000a872:	fe b0 f6 31 	rcall	800094d4 <_free_r>
8000a876:	c0 b8       	rjmp	8000a88c <_realloc_r+0x2b4>
8000a878:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a87c:	e7 e8 10 08 	or	r8,r3,r8
8000a880:	8f 18       	st.w	r7[0x4],r8
8000a882:	ee 03 00 03 	add	r3,r7,r3
8000a886:	66 18       	ld.w	r8,r3[0x4]
8000a888:	a1 a8       	sbr	r8,0x0
8000a88a:	87 18       	st.w	r3[0x4],r8
8000a88c:	04 9c       	mov	r12,r2
8000a88e:	ee c5 ff f8 	sub	r5,r7,-8
8000a892:	fe b0 fb b5 	rcall	80009ffc <__malloc_unlock>
8000a896:	0a 9c       	mov	r12,r5
8000a898:	2f fd       	sub	sp,-4
8000a89a:	d8 32       	popm	r0-r7,pc

8000a89c <__isinfd>:
8000a89c:	14 98       	mov	r8,r10
8000a89e:	fc 19 7f f0 	movh	r9,0x7ff0
8000a8a2:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a8a6:	f0 0b 11 00 	rsub	r11,r8,0
8000a8aa:	f7 e8 10 08 	or	r8,r11,r8
8000a8ae:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000a8b2:	f2 08 01 08 	sub	r8,r9,r8
8000a8b6:	f0 0c 11 00 	rsub	r12,r8,0
8000a8ba:	f9 e8 10 08 	or	r8,r12,r8
8000a8be:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000a8c2:	2f fc       	sub	r12,-1
8000a8c4:	5e fc       	retal	r12

8000a8c6 <__isnand>:
8000a8c6:	14 98       	mov	r8,r10
8000a8c8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a8cc:	f0 0c 11 00 	rsub	r12,r8,0
8000a8d0:	10 4c       	or	r12,r8
8000a8d2:	fc 18 7f f0 	movh	r8,0x7ff0
8000a8d6:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000a8da:	f0 0c 01 0c 	sub	r12,r8,r12
8000a8de:	bf 9c       	lsr	r12,0x1f
8000a8e0:	5e fc       	retal	r12
8000a8e2:	d7 03       	nop

8000a8e4 <_sbrk_r>:
8000a8e4:	d4 21       	pushm	r4-r7,lr
8000a8e6:	30 08       	mov	r8,0
8000a8e8:	18 97       	mov	r7,r12
8000a8ea:	48 66       	lddpc	r6,8000a900 <_sbrk_r+0x1c>
8000a8ec:	16 9c       	mov	r12,r11
8000a8ee:	8d 08       	st.w	r6[0x0],r8
8000a8f0:	cb cc       	rcall	8000aa68 <_sbrk>
8000a8f2:	5b fc       	cp.w	r12,-1
8000a8f4:	c0 51       	brne	8000a8fe <_sbrk_r+0x1a>
8000a8f6:	6c 08       	ld.w	r8,r6[0x0]
8000a8f8:	58 08       	cp.w	r8,0
8000a8fa:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a8fe:	d8 22       	popm	r4-r7,pc
8000a900:	00 00       	add	r0,r0
8000a902:	09 24       	ld.uh	r4,r4++

8000a904 <__sclose>:
8000a904:	d4 01       	pushm	lr
8000a906:	96 7b       	ld.sh	r11,r11[0xe]
8000a908:	c0 ed       	rcall	8000ab24 <_close_r>
8000a90a:	d8 02       	popm	pc

8000a90c <__sseek>:
8000a90c:	d4 21       	pushm	r4-r7,lr
8000a90e:	16 97       	mov	r7,r11
8000a910:	96 7b       	ld.sh	r11,r11[0xe]
8000a912:	c9 7d       	rcall	8000ac40 <_lseek_r>
8000a914:	8e 68       	ld.sh	r8,r7[0xc]
8000a916:	10 99       	mov	r9,r8
8000a918:	ad c8       	cbr	r8,0xc
8000a91a:	ad a9       	sbr	r9,0xc
8000a91c:	5b fc       	cp.w	r12,-1
8000a91e:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000a922:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000a926:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000a92a:	d8 22       	popm	r4-r7,pc

8000a92c <__swrite>:
8000a92c:	d4 21       	pushm	r4-r7,lr
8000a92e:	96 68       	ld.sh	r8,r11[0xc]
8000a930:	16 97       	mov	r7,r11
8000a932:	14 95       	mov	r5,r10
8000a934:	12 94       	mov	r4,r9
8000a936:	e2 18 01 00 	andl	r8,0x100,COH
8000a93a:	18 96       	mov	r6,r12
8000a93c:	c0 50       	breq	8000a946 <__swrite+0x1a>
8000a93e:	30 29       	mov	r9,2
8000a940:	30 0a       	mov	r10,0
8000a942:	96 7b       	ld.sh	r11,r11[0xe]
8000a944:	c7 ed       	rcall	8000ac40 <_lseek_r>
8000a946:	8e 68       	ld.sh	r8,r7[0xc]
8000a948:	ad c8       	cbr	r8,0xc
8000a94a:	08 99       	mov	r9,r4
8000a94c:	0a 9a       	mov	r10,r5
8000a94e:	8e 7b       	ld.sh	r11,r7[0xe]
8000a950:	0c 9c       	mov	r12,r6
8000a952:	ae 68       	st.h	r7[0xc],r8
8000a954:	ca 8c       	rcall	8000aaa4 <_write_r>
8000a956:	d8 22       	popm	r4-r7,pc

8000a958 <__sread>:
8000a958:	d4 21       	pushm	r4-r7,lr
8000a95a:	16 97       	mov	r7,r11
8000a95c:	96 7b       	ld.sh	r11,r11[0xe]
8000a95e:	c8 5d       	rcall	8000ac68 <_read_r>
8000a960:	c0 65       	brlt	8000a96c <__sread+0x14>
8000a962:	6f 58       	ld.w	r8,r7[0x54]
8000a964:	18 08       	add	r8,r12
8000a966:	ef 48 00 54 	st.w	r7[84],r8
8000a96a:	d8 22       	popm	r4-r7,pc
8000a96c:	8e 68       	ld.sh	r8,r7[0xc]
8000a96e:	ad c8       	cbr	r8,0xc
8000a970:	ae 68       	st.h	r7[0xc],r8
8000a972:	d8 22       	popm	r4-r7,pc

8000a974 <strlen>:
8000a974:	30 09       	mov	r9,0
8000a976:	18 98       	mov	r8,r12
8000a978:	c0 28       	rjmp	8000a97c <strlen+0x8>
8000a97a:	2f f8       	sub	r8,-1
8000a97c:	11 8a       	ld.ub	r10,r8[0x0]
8000a97e:	f2 0a 18 00 	cp.b	r10,r9
8000a982:	cf c1       	brne	8000a97a <strlen+0x6>
8000a984:	f0 0c 01 0c 	sub	r12,r8,r12
8000a988:	5e fc       	retal	r12
8000a98a:	d7 03       	nop

8000a98c <_close>:
8000a98c:	30 28       	mov	r8,2
8000a98e:	d6 73       	breakpoint
8000a990:	3f fc       	mov	r12,-1
8000a992:	35 8b       	mov	r11,88
8000a994:	58 0c       	cp.w	r12,0
8000a996:	5e 4c       	retge	r12
8000a998:	48 2a       	lddpc	r10,8000a9a0 <_close+0x14>
8000a99a:	95 0b       	st.w	r10[0x0],r11
8000a99c:	5e fc       	retal	r12
8000a99e:	d7 03       	nop
8000a9a0:	00 00       	add	r0,r0
8000a9a2:	09 24       	ld.uh	r4,r4++

8000a9a4 <_lseek>:
8000a9a4:	30 58       	mov	r8,5
8000a9a6:	d6 73       	breakpoint
8000a9a8:	3f fc       	mov	r12,-1
8000a9aa:	35 8b       	mov	r11,88
8000a9ac:	58 0c       	cp.w	r12,0
8000a9ae:	5e 4c       	retge	r12
8000a9b0:	48 2a       	lddpc	r10,8000a9b8 <_lseek+0x14>
8000a9b2:	95 0b       	st.w	r10[0x0],r11
8000a9b4:	5e fc       	retal	r12
8000a9b6:	d7 03       	nop
8000a9b8:	00 00       	add	r0,r0
8000a9ba:	09 24       	ld.uh	r4,r4++

8000a9bc <_read>:
8000a9bc:	30 38       	mov	r8,3
8000a9be:	d6 73       	breakpoint
8000a9c0:	3f fc       	mov	r12,-1
8000a9c2:	35 8b       	mov	r11,88
8000a9c4:	58 0c       	cp.w	r12,0
8000a9c6:	5e 4c       	retge	r12
8000a9c8:	48 2a       	lddpc	r10,8000a9d0 <_read+0x14>
8000a9ca:	95 0b       	st.w	r10[0x0],r11
8000a9cc:	5e fc       	retal	r12
8000a9ce:	d7 03       	nop
8000a9d0:	00 00       	add	r0,r0
8000a9d2:	09 24       	ld.uh	r4,r4++

8000a9d4 <_write>:
8000a9d4:	30 48       	mov	r8,4
8000a9d6:	d6 73       	breakpoint
8000a9d8:	3f fc       	mov	r12,-1
8000a9da:	35 8b       	mov	r11,88
8000a9dc:	58 0c       	cp.w	r12,0
8000a9de:	5e 4c       	retge	r12
8000a9e0:	48 2a       	lddpc	r10,8000a9e8 <_write+0x14>
8000a9e2:	95 0b       	st.w	r10[0x0],r11
8000a9e4:	5e fc       	retal	r12
8000a9e6:	d7 03       	nop
8000a9e8:	00 00       	add	r0,r0
8000a9ea:	09 24       	ld.uh	r4,r4++

8000a9ec <isatty>:
8000a9ec:	30 b8       	mov	r8,11
8000a9ee:	d6 73       	breakpoint
8000a9f0:	3f fc       	mov	r12,-1
8000a9f2:	35 8b       	mov	r11,88
8000a9f4:	58 0c       	cp.w	r12,0
8000a9f6:	5e 4c       	retge	r12
8000a9f8:	48 2a       	lddpc	r10,8000aa00 <isatty+0x14>
8000a9fa:	95 0b       	st.w	r10[0x0],r11
8000a9fc:	5e fc       	retal	r12
8000a9fe:	d7 03       	nop
8000aa00:	00 00       	add	r0,r0
8000aa02:	09 24       	ld.uh	r4,r4++

8000aa04 <_fstat_host>:
8000aa04:	30 98       	mov	r8,9
8000aa06:	d6 73       	breakpoint
8000aa08:	3f fc       	mov	r12,-1
8000aa0a:	35 8b       	mov	r11,88
8000aa0c:	58 0c       	cp.w	r12,0
8000aa0e:	5e 4c       	retge	r12
8000aa10:	48 2a       	lddpc	r10,8000aa18 <_fstat_host+0x14>
8000aa12:	95 0b       	st.w	r10[0x0],r11
8000aa14:	5e fc       	retal	r12
8000aa16:	d7 03       	nop
8000aa18:	00 00       	add	r0,r0
8000aa1a:	09 24       	ld.uh	r4,r4++

8000aa1c <_fstat>:
8000aa1c:	d4 21       	pushm	r4-r7,lr
8000aa1e:	21 0d       	sub	sp,64
8000aa20:	16 97       	mov	r7,r11
8000aa22:	1a 9b       	mov	r11,sp
8000aa24:	cf 0f       	rcall	8000aa04 <_fstat_host>
8000aa26:	c0 34       	brge	8000aa2c <_fstat+0x10>
8000aa28:	3f fc       	mov	r12,-1
8000aa2a:	c1 c8       	rjmp	8000aa62 <_fstat+0x46>
8000aa2c:	40 08       	lddsp	r8,sp[0x0]
8000aa2e:	ae 08       	st.h	r7[0x0],r8
8000aa30:	40 18       	lddsp	r8,sp[0x4]
8000aa32:	ae 18       	st.h	r7[0x2],r8
8000aa34:	40 28       	lddsp	r8,sp[0x8]
8000aa36:	8f 18       	st.w	r7[0x4],r8
8000aa38:	40 38       	lddsp	r8,sp[0xc]
8000aa3a:	ae 48       	st.h	r7[0x8],r8
8000aa3c:	40 48       	lddsp	r8,sp[0x10]
8000aa3e:	ae 58       	st.h	r7[0xa],r8
8000aa40:	40 58       	lddsp	r8,sp[0x14]
8000aa42:	ae 68       	st.h	r7[0xc],r8
8000aa44:	40 68       	lddsp	r8,sp[0x18]
8000aa46:	ae 78       	st.h	r7[0xe],r8
8000aa48:	40 88       	lddsp	r8,sp[0x20]
8000aa4a:	8f 48       	st.w	r7[0x10],r8
8000aa4c:	40 a8       	lddsp	r8,sp[0x28]
8000aa4e:	8f b8       	st.w	r7[0x2c],r8
8000aa50:	40 c8       	lddsp	r8,sp[0x30]
8000aa52:	8f c8       	st.w	r7[0x30],r8
8000aa54:	40 d8       	lddsp	r8,sp[0x34]
8000aa56:	8f 58       	st.w	r7[0x14],r8
8000aa58:	40 e8       	lddsp	r8,sp[0x38]
8000aa5a:	30 0c       	mov	r12,0
8000aa5c:	8f 78       	st.w	r7[0x1c],r8
8000aa5e:	40 f8       	lddsp	r8,sp[0x3c]
8000aa60:	8f 98       	st.w	r7[0x24],r8
8000aa62:	2f 0d       	sub	sp,-64
8000aa64:	d8 22       	popm	r4-r7,pc
8000aa66:	d7 03       	nop

8000aa68 <_sbrk>:
8000aa68:	d4 01       	pushm	lr
8000aa6a:	48 c8       	lddpc	r8,8000aa98 <_sbrk+0x30>
8000aa6c:	70 09       	ld.w	r9,r8[0x0]
8000aa6e:	58 09       	cp.w	r9,0
8000aa70:	c0 31       	brne	8000aa76 <_sbrk+0xe>
8000aa72:	48 b9       	lddpc	r9,8000aa9c <_sbrk+0x34>
8000aa74:	91 09       	st.w	r8[0x0],r9
8000aa76:	48 99       	lddpc	r9,8000aa98 <_sbrk+0x30>
8000aa78:	48 aa       	lddpc	r10,8000aaa0 <_sbrk+0x38>
8000aa7a:	72 08       	ld.w	r8,r9[0x0]
8000aa7c:	f0 0c 00 0c 	add	r12,r8,r12
8000aa80:	14 3c       	cp.w	r12,r10
8000aa82:	e0 8b 00 04 	brhi	8000aa8a <_sbrk+0x22>
8000aa86:	93 0c       	st.w	r9[0x0],r12
8000aa88:	c0 58       	rjmp	8000aa92 <_sbrk+0x2a>
8000aa8a:	c5 dc       	rcall	8000ab44 <__errno>
8000aa8c:	30 c8       	mov	r8,12
8000aa8e:	99 08       	st.w	r12[0x0],r8
8000aa90:	3f f8       	mov	r8,-1
8000aa92:	10 9c       	mov	r12,r8
8000aa94:	d8 02       	popm	pc
8000aa96:	d7 03       	nop
8000aa98:	00 00       	add	r0,r0
8000aa9a:	06 4c       	or	r12,r3
8000aa9c:	00 00       	add	r0,r0
8000aa9e:	09 28       	ld.uh	r8,r4++
8000aaa0:	00 00       	add	r0,r0
8000aaa2:	70 00       	ld.w	r0,r8[0x0]

8000aaa4 <_write_r>:
8000aaa4:	d4 21       	pushm	r4-r7,lr
8000aaa6:	16 98       	mov	r8,r11
8000aaa8:	18 97       	mov	r7,r12
8000aaaa:	10 9c       	mov	r12,r8
8000aaac:	30 08       	mov	r8,0
8000aaae:	14 9b       	mov	r11,r10
8000aab0:	48 66       	lddpc	r6,8000aac8 <_write_r+0x24>
8000aab2:	12 9a       	mov	r10,r9
8000aab4:	8d 08       	st.w	r6[0x0],r8
8000aab6:	c8 ff       	rcall	8000a9d4 <_write>
8000aab8:	5b fc       	cp.w	r12,-1
8000aaba:	c0 51       	brne	8000aac4 <_write_r+0x20>
8000aabc:	6c 08       	ld.w	r8,r6[0x0]
8000aabe:	58 08       	cp.w	r8,0
8000aac0:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000aac4:	d8 22       	popm	r4-r7,pc
8000aac6:	d7 03       	nop
8000aac8:	00 00       	add	r0,r0
8000aaca:	09 24       	ld.uh	r4,r4++

8000aacc <_calloc_r>:
8000aacc:	d4 21       	pushm	r4-r7,lr
8000aace:	f4 0b 02 4b 	mul	r11,r10,r11
8000aad2:	fe b0 f7 a9 	rcall	80009a24 <_malloc_r>
8000aad6:	18 97       	mov	r7,r12
8000aad8:	c2 30       	breq	8000ab1e <_calloc_r+0x52>
8000aada:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000aade:	e0 1a ff fc 	andl	r10,0xfffc
8000aae2:	20 4a       	sub	r10,4
8000aae4:	e0 4a 00 24 	cp.w	r10,36
8000aae8:	e0 8b 00 18 	brhi	8000ab18 <_calloc_r+0x4c>
8000aaec:	18 98       	mov	r8,r12
8000aaee:	59 3a       	cp.w	r10,19
8000aaf0:	e0 88 00 0f 	brls	8000ab0e <_calloc_r+0x42>
8000aaf4:	30 09       	mov	r9,0
8000aaf6:	10 a9       	st.w	r8++,r9
8000aaf8:	10 a9       	st.w	r8++,r9
8000aafa:	59 ba       	cp.w	r10,27
8000aafc:	e0 88 00 09 	brls	8000ab0e <_calloc_r+0x42>
8000ab00:	10 a9       	st.w	r8++,r9
8000ab02:	10 a9       	st.w	r8++,r9
8000ab04:	e0 4a 00 24 	cp.w	r10,36
8000ab08:	c0 31       	brne	8000ab0e <_calloc_r+0x42>
8000ab0a:	10 a9       	st.w	r8++,r9
8000ab0c:	10 a9       	st.w	r8++,r9
8000ab0e:	30 09       	mov	r9,0
8000ab10:	10 a9       	st.w	r8++,r9
8000ab12:	91 19       	st.w	r8[0x4],r9
8000ab14:	91 09       	st.w	r8[0x0],r9
8000ab16:	c0 48       	rjmp	8000ab1e <_calloc_r+0x52>
8000ab18:	30 0b       	mov	r11,0
8000ab1a:	fe b0 fa 69 	rcall	80009fec <memset>
8000ab1e:	0e 9c       	mov	r12,r7
8000ab20:	d8 22       	popm	r4-r7,pc
8000ab22:	d7 03       	nop

8000ab24 <_close_r>:
8000ab24:	d4 21       	pushm	r4-r7,lr
8000ab26:	30 08       	mov	r8,0
8000ab28:	18 97       	mov	r7,r12
8000ab2a:	48 66       	lddpc	r6,8000ab40 <_close_r+0x1c>
8000ab2c:	16 9c       	mov	r12,r11
8000ab2e:	8d 08       	st.w	r6[0x0],r8
8000ab30:	c2 ef       	rcall	8000a98c <_close>
8000ab32:	5b fc       	cp.w	r12,-1
8000ab34:	c0 51       	brne	8000ab3e <_close_r+0x1a>
8000ab36:	6c 08       	ld.w	r8,r6[0x0]
8000ab38:	58 08       	cp.w	r8,0
8000ab3a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ab3e:	d8 22       	popm	r4-r7,pc
8000ab40:	00 00       	add	r0,r0
8000ab42:	09 24       	ld.uh	r4,r4++

8000ab44 <__errno>:
8000ab44:	48 28       	lddpc	r8,8000ab4c <__errno+0x8>
8000ab46:	70 0c       	ld.w	r12,r8[0x0]
8000ab48:	2f 4c       	sub	r12,-12
8000ab4a:	5e fc       	retal	r12
8000ab4c:	00 00       	add	r0,r0
8000ab4e:	00 fc       	st.b	--r0,r12

8000ab50 <_fclose_r>:
8000ab50:	d4 21       	pushm	r4-r7,lr
8000ab52:	18 96       	mov	r6,r12
8000ab54:	16 97       	mov	r7,r11
8000ab56:	58 0b       	cp.w	r11,0
8000ab58:	c0 31       	brne	8000ab5e <_fclose_r+0xe>
8000ab5a:	16 95       	mov	r5,r11
8000ab5c:	c5 08       	rjmp	8000abfc <_fclose_r+0xac>
8000ab5e:	fe b0 f3 cb 	rcall	800092f4 <__sfp_lock_acquire>
8000ab62:	58 06       	cp.w	r6,0
8000ab64:	c0 70       	breq	8000ab72 <_fclose_r+0x22>
8000ab66:	6c 68       	ld.w	r8,r6[0x18]
8000ab68:	58 08       	cp.w	r8,0
8000ab6a:	c0 41       	brne	8000ab72 <_fclose_r+0x22>
8000ab6c:	0c 9c       	mov	r12,r6
8000ab6e:	fe b0 f4 17 	rcall	8000939c <__sinit>
8000ab72:	4a 48       	lddpc	r8,8000ac00 <_fclose_r+0xb0>
8000ab74:	10 37       	cp.w	r7,r8
8000ab76:	c0 31       	brne	8000ab7c <_fclose_r+0x2c>
8000ab78:	6c 07       	ld.w	r7,r6[0x0]
8000ab7a:	c0 a8       	rjmp	8000ab8e <_fclose_r+0x3e>
8000ab7c:	4a 28       	lddpc	r8,8000ac04 <_fclose_r+0xb4>
8000ab7e:	10 37       	cp.w	r7,r8
8000ab80:	c0 31       	brne	8000ab86 <_fclose_r+0x36>
8000ab82:	6c 17       	ld.w	r7,r6[0x4]
8000ab84:	c0 58       	rjmp	8000ab8e <_fclose_r+0x3e>
8000ab86:	4a 18       	lddpc	r8,8000ac08 <_fclose_r+0xb8>
8000ab88:	10 37       	cp.w	r7,r8
8000ab8a:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000ab8e:	8e 69       	ld.sh	r9,r7[0xc]
8000ab90:	30 08       	mov	r8,0
8000ab92:	f0 09 19 00 	cp.h	r9,r8
8000ab96:	c0 51       	brne	8000aba0 <_fclose_r+0x50>
8000ab98:	fe b0 f3 af 	rcall	800092f6 <__sfp_lock_release>
8000ab9c:	30 05       	mov	r5,0
8000ab9e:	c2 f8       	rjmp	8000abfc <_fclose_r+0xac>
8000aba0:	0e 9b       	mov	r11,r7
8000aba2:	0c 9c       	mov	r12,r6
8000aba4:	fe b0 f3 20 	rcall	800091e4 <_fflush_r>
8000aba8:	6e c8       	ld.w	r8,r7[0x30]
8000abaa:	18 95       	mov	r5,r12
8000abac:	58 08       	cp.w	r8,0
8000abae:	c0 60       	breq	8000abba <_fclose_r+0x6a>
8000abb0:	6e 8b       	ld.w	r11,r7[0x20]
8000abb2:	0c 9c       	mov	r12,r6
8000abb4:	5d 18       	icall	r8
8000abb6:	f9 b5 05 ff 	movlt	r5,-1
8000abba:	8e 68       	ld.sh	r8,r7[0xc]
8000abbc:	ed b8 00 07 	bld	r8,0x7
8000abc0:	c0 51       	brne	8000abca <_fclose_r+0x7a>
8000abc2:	6e 4b       	ld.w	r11,r7[0x10]
8000abc4:	0c 9c       	mov	r12,r6
8000abc6:	fe b0 f4 87 	rcall	800094d4 <_free_r>
8000abca:	6e db       	ld.w	r11,r7[0x34]
8000abcc:	58 0b       	cp.w	r11,0
8000abce:	c0 a0       	breq	8000abe2 <_fclose_r+0x92>
8000abd0:	ee c8 ff bc 	sub	r8,r7,-68
8000abd4:	10 3b       	cp.w	r11,r8
8000abd6:	c0 40       	breq	8000abde <_fclose_r+0x8e>
8000abd8:	0c 9c       	mov	r12,r6
8000abda:	fe b0 f4 7d 	rcall	800094d4 <_free_r>
8000abde:	30 08       	mov	r8,0
8000abe0:	8f d8       	st.w	r7[0x34],r8
8000abe2:	6f 2b       	ld.w	r11,r7[0x48]
8000abe4:	58 0b       	cp.w	r11,0
8000abe6:	c0 70       	breq	8000abf4 <_fclose_r+0xa4>
8000abe8:	0c 9c       	mov	r12,r6
8000abea:	fe b0 f4 75 	rcall	800094d4 <_free_r>
8000abee:	30 08       	mov	r8,0
8000abf0:	ef 48 00 48 	st.w	r7[72],r8
8000abf4:	30 08       	mov	r8,0
8000abf6:	ae 68       	st.h	r7[0xc],r8
8000abf8:	fe b0 f3 7f 	rcall	800092f6 <__sfp_lock_release>
8000abfc:	0a 9c       	mov	r12,r5
8000abfe:	d8 22       	popm	r4-r7,pc
8000ac00:	80 00       	ld.sh	r0,r0[0x0]
8000ac02:	cb 88       	rjmp	8000ad72 <__avr32_f64_mul_op2_subnormal+0x4>
8000ac04:	80 00       	ld.sh	r0,r0[0x0]
8000ac06:	cb a8       	rjmp	8000ad7a <__avr32_f64_mul_op2_subnormal+0xc>
8000ac08:	80 00       	ld.sh	r0,r0[0x0]
8000ac0a:	cb c8       	rjmp	8000ad82 <__avr32_f64_mul_op2_subnormal+0x14>

8000ac0c <fclose>:
8000ac0c:	d4 01       	pushm	lr
8000ac0e:	48 38       	lddpc	r8,8000ac18 <fclose+0xc>
8000ac10:	18 9b       	mov	r11,r12
8000ac12:	70 0c       	ld.w	r12,r8[0x0]
8000ac14:	c9 ef       	rcall	8000ab50 <_fclose_r>
8000ac16:	d8 02       	popm	pc
8000ac18:	00 00       	add	r0,r0
8000ac1a:	00 fc       	st.b	--r0,r12

8000ac1c <_fstat_r>:
8000ac1c:	d4 21       	pushm	r4-r7,lr
8000ac1e:	16 98       	mov	r8,r11
8000ac20:	18 97       	mov	r7,r12
8000ac22:	10 9c       	mov	r12,r8
8000ac24:	30 08       	mov	r8,0
8000ac26:	48 66       	lddpc	r6,8000ac3c <_fstat_r+0x20>
8000ac28:	14 9b       	mov	r11,r10
8000ac2a:	8d 08       	st.w	r6[0x0],r8
8000ac2c:	cf 8e       	rcall	8000aa1c <_fstat>
8000ac2e:	5b fc       	cp.w	r12,-1
8000ac30:	c0 51       	brne	8000ac3a <_fstat_r+0x1e>
8000ac32:	6c 08       	ld.w	r8,r6[0x0]
8000ac34:	58 08       	cp.w	r8,0
8000ac36:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ac3a:	d8 22       	popm	r4-r7,pc
8000ac3c:	00 00       	add	r0,r0
8000ac3e:	09 24       	ld.uh	r4,r4++

8000ac40 <_lseek_r>:
8000ac40:	d4 21       	pushm	r4-r7,lr
8000ac42:	16 98       	mov	r8,r11
8000ac44:	18 97       	mov	r7,r12
8000ac46:	10 9c       	mov	r12,r8
8000ac48:	30 08       	mov	r8,0
8000ac4a:	14 9b       	mov	r11,r10
8000ac4c:	48 66       	lddpc	r6,8000ac64 <_lseek_r+0x24>
8000ac4e:	12 9a       	mov	r10,r9
8000ac50:	8d 08       	st.w	r6[0x0],r8
8000ac52:	ca 9e       	rcall	8000a9a4 <_lseek>
8000ac54:	5b fc       	cp.w	r12,-1
8000ac56:	c0 51       	brne	8000ac60 <_lseek_r+0x20>
8000ac58:	6c 08       	ld.w	r8,r6[0x0]
8000ac5a:	58 08       	cp.w	r8,0
8000ac5c:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ac60:	d8 22       	popm	r4-r7,pc
8000ac62:	d7 03       	nop
8000ac64:	00 00       	add	r0,r0
8000ac66:	09 24       	ld.uh	r4,r4++

8000ac68 <_read_r>:
8000ac68:	d4 21       	pushm	r4-r7,lr
8000ac6a:	16 98       	mov	r8,r11
8000ac6c:	18 97       	mov	r7,r12
8000ac6e:	10 9c       	mov	r12,r8
8000ac70:	30 08       	mov	r8,0
8000ac72:	14 9b       	mov	r11,r10
8000ac74:	48 66       	lddpc	r6,8000ac8c <_read_r+0x24>
8000ac76:	12 9a       	mov	r10,r9
8000ac78:	8d 08       	st.w	r6[0x0],r8
8000ac7a:	ca 1e       	rcall	8000a9bc <_read>
8000ac7c:	5b fc       	cp.w	r12,-1
8000ac7e:	c0 51       	brne	8000ac88 <_read_r+0x20>
8000ac80:	6c 08       	ld.w	r8,r6[0x0]
8000ac82:	58 08       	cp.w	r8,0
8000ac84:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000ac88:	d8 22       	popm	r4-r7,pc
8000ac8a:	d7 03       	nop
8000ac8c:	00 00       	add	r0,r0
8000ac8e:	09 24       	ld.uh	r4,r4++

8000ac90 <__avr32_f64_mul>:
8000ac90:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000ac94:	e0 80 00 dc 	breq	8000ae4c <__avr32_f64_mul_op1_zero>
8000ac98:	d4 21       	pushm	r4-r7,lr
8000ac9a:	f7 e9 20 0e 	eor	lr,r11,r9
8000ac9e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000aca2:	30 15       	mov	r5,1
8000aca4:	c4 30       	breq	8000ad2a <__avr32_f64_mul_op1_subnormal>
8000aca6:	ab 6b       	lsl	r11,0xa
8000aca8:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000acac:	ab 6a       	lsl	r10,0xa
8000acae:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000acb2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000acb6:	c5 c0       	breq	8000ad6e <__avr32_f64_mul_op2_subnormal>
8000acb8:	a1 78       	lsl	r8,0x1
8000acba:	5c f9       	rol	r9
8000acbc:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000acc0:	e0 47 07 ff 	cp.w	r7,2047
8000acc4:	c7 70       	breq	8000adb2 <__avr32_f64_mul_op_nan_or_inf>
8000acc6:	e0 46 07 ff 	cp.w	r6,2047
8000acca:	c7 40       	breq	8000adb2 <__avr32_f64_mul_op_nan_or_inf>
8000accc:	ee 06 00 0c 	add	r12,r7,r6
8000acd0:	e0 2c 03 fe 	sub	r12,1022
8000acd4:	f6 08 06 44 	mulu.d	r4,r11,r8
8000acd8:	f4 09 07 44 	macu.d	r4,r10,r9
8000acdc:	f4 08 06 46 	mulu.d	r6,r10,r8
8000ace0:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000ace4:	08 07       	add	r7,r4
8000ace6:	f4 05 00 4a 	adc	r10,r10,r5
8000acea:	5c 0b       	acr	r11
8000acec:	ed bb 00 14 	bld	r11,0x14
8000acf0:	c0 50       	breq	8000acfa <__avr32_f64_mul+0x6a>
8000acf2:	a1 77       	lsl	r7,0x1
8000acf4:	5c fa       	rol	r10
8000acf6:	5c fb       	rol	r11
8000acf8:	20 1c       	sub	r12,1
8000acfa:	58 0c       	cp.w	r12,0
8000acfc:	e0 8a 00 6f 	brle	8000adda <__avr32_f64_mul_res_subnormal>
8000ad00:	e0 4c 07 ff 	cp.w	r12,2047
8000ad04:	e0 84 00 9c 	brge	8000ae3c <__avr32_f64_mul_res_inf>
8000ad08:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000ad0c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000ad10:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000ad14:	ee 17 80 00 	eorh	r7,0x8000
8000ad18:	f1 b7 04 20 	satu	r7,0x1
8000ad1c:	0e 0a       	add	r10,r7
8000ad1e:	5c 0b       	acr	r11
8000ad20:	ed be 00 1f 	bld	lr,0x1f
8000ad24:	ef bb 00 1f 	bst	r11,0x1f
8000ad28:	d8 22       	popm	r4-r7,pc

8000ad2a <__avr32_f64_mul_op1_subnormal>:
8000ad2a:	e4 1b 00 0f 	andh	r11,0xf
8000ad2e:	f4 0c 12 00 	clz	r12,r10
8000ad32:	f6 06 12 00 	clz	r6,r11
8000ad36:	f7 bc 03 e1 	sublo	r12,-31
8000ad3a:	f8 06 17 30 	movlo	r6,r12
8000ad3e:	f7 b6 02 01 	subhs	r6,1
8000ad42:	e0 46 00 20 	cp.w	r6,32
8000ad46:	c0 d4       	brge	8000ad60 <__avr32_f64_mul_op1_subnormal+0x36>
8000ad48:	ec 0c 11 20 	rsub	r12,r6,32
8000ad4c:	f6 06 09 4b 	lsl	r11,r11,r6
8000ad50:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000ad54:	18 4b       	or	r11,r12
8000ad56:	f4 06 09 4a 	lsl	r10,r10,r6
8000ad5a:	20 b6       	sub	r6,11
8000ad5c:	0c 17       	sub	r7,r6
8000ad5e:	ca ab       	rjmp	8000acb2 <__avr32_f64_mul+0x22>
8000ad60:	f4 06 09 4b 	lsl	r11,r10,r6
8000ad64:	c6 40       	breq	8000ae2c <__avr32_f64_mul_res_zero>
8000ad66:	30 0a       	mov	r10,0
8000ad68:	20 b6       	sub	r6,11
8000ad6a:	0c 17       	sub	r7,r6
8000ad6c:	ca 3b       	rjmp	8000acb2 <__avr32_f64_mul+0x22>

8000ad6e <__avr32_f64_mul_op2_subnormal>:
8000ad6e:	e4 19 00 0f 	andh	r9,0xf
8000ad72:	f0 0c 12 00 	clz	r12,r8
8000ad76:	f2 05 12 00 	clz	r5,r9
8000ad7a:	f7 bc 03 ea 	sublo	r12,-22
8000ad7e:	f8 05 17 30 	movlo	r5,r12
8000ad82:	f7 b5 02 0a 	subhs	r5,10
8000ad86:	e0 45 00 20 	cp.w	r5,32
8000ad8a:	c0 d4       	brge	8000ada4 <__avr32_f64_mul_op2_subnormal+0x36>
8000ad8c:	ea 0c 11 20 	rsub	r12,r5,32
8000ad90:	f2 05 09 49 	lsl	r9,r9,r5
8000ad94:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000ad98:	18 49       	or	r9,r12
8000ad9a:	f0 05 09 48 	lsl	r8,r8,r5
8000ad9e:	20 25       	sub	r5,2
8000ada0:	0a 16       	sub	r6,r5
8000ada2:	c8 fb       	rjmp	8000acc0 <__avr32_f64_mul+0x30>
8000ada4:	f0 05 09 49 	lsl	r9,r8,r5
8000ada8:	c4 20       	breq	8000ae2c <__avr32_f64_mul_res_zero>
8000adaa:	30 08       	mov	r8,0
8000adac:	20 25       	sub	r5,2
8000adae:	0a 16       	sub	r6,r5
8000adb0:	c8 8b       	rjmp	8000acc0 <__avr32_f64_mul+0x30>

8000adb2 <__avr32_f64_mul_op_nan_or_inf>:
8000adb2:	e4 19 00 0f 	andh	r9,0xf
8000adb6:	e4 1b 00 0f 	andh	r11,0xf
8000adba:	14 4b       	or	r11,r10
8000adbc:	10 49       	or	r9,r8
8000adbe:	e0 47 07 ff 	cp.w	r7,2047
8000adc2:	c0 91       	brne	8000add4 <__avr32_f64_mul_op1_not_naninf>
8000adc4:	58 0b       	cp.w	r11,0
8000adc6:	c3 81       	brne	8000ae36 <__avr32_f64_mul_res_nan>
8000adc8:	e0 46 07 ff 	cp.w	r6,2047
8000adcc:	c3 81       	brne	8000ae3c <__avr32_f64_mul_res_inf>
8000adce:	58 09       	cp.w	r9,0
8000add0:	c3 60       	breq	8000ae3c <__avr32_f64_mul_res_inf>
8000add2:	c3 28       	rjmp	8000ae36 <__avr32_f64_mul_res_nan>

8000add4 <__avr32_f64_mul_op1_not_naninf>:
8000add4:	58 09       	cp.w	r9,0
8000add6:	c3 30       	breq	8000ae3c <__avr32_f64_mul_res_inf>
8000add8:	c2 f8       	rjmp	8000ae36 <__avr32_f64_mul_res_nan>

8000adda <__avr32_f64_mul_res_subnormal>:
8000adda:	5c 3c       	neg	r12
8000addc:	2f fc       	sub	r12,-1
8000adde:	f1 bc 04 c0 	satu	r12,0x6
8000ade2:	e0 4c 00 20 	cp.w	r12,32
8000ade6:	c1 14       	brge	8000ae08 <__avr32_f64_mul_res_subnormal+0x2e>
8000ade8:	f8 08 11 20 	rsub	r8,r12,32
8000adec:	0e 46       	or	r6,r7
8000adee:	ee 0c 0a 47 	lsr	r7,r7,r12
8000adf2:	f4 08 09 49 	lsl	r9,r10,r8
8000adf6:	12 47       	or	r7,r9
8000adf8:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000adfc:	f6 08 09 49 	lsl	r9,r11,r8
8000ae00:	12 4a       	or	r10,r9
8000ae02:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000ae06:	c8 3b       	rjmp	8000ad0c <__avr32_f64_mul+0x7c>
8000ae08:	f8 08 11 20 	rsub	r8,r12,32
8000ae0c:	f9 b9 00 00 	moveq	r9,0
8000ae10:	c0 30       	breq	8000ae16 <__avr32_f64_mul_res_subnormal+0x3c>
8000ae12:	f6 08 09 49 	lsl	r9,r11,r8
8000ae16:	0e 46       	or	r6,r7
8000ae18:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000ae1c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000ae20:	f3 ea 10 07 	or	r7,r9,r10
8000ae24:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000ae28:	30 0b       	mov	r11,0
8000ae2a:	c7 1b       	rjmp	8000ad0c <__avr32_f64_mul+0x7c>

8000ae2c <__avr32_f64_mul_res_zero>:
8000ae2c:	1c 9b       	mov	r11,lr
8000ae2e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000ae32:	30 0a       	mov	r10,0
8000ae34:	d8 22       	popm	r4-r7,pc

8000ae36 <__avr32_f64_mul_res_nan>:
8000ae36:	3f fb       	mov	r11,-1
8000ae38:	3f fa       	mov	r10,-1
8000ae3a:	d8 22       	popm	r4-r7,pc

8000ae3c <__avr32_f64_mul_res_inf>:
8000ae3c:	f0 6b 00 00 	mov	r11,-1048576
8000ae40:	ed be 00 1f 	bld	lr,0x1f
8000ae44:	ef bb 00 1f 	bst	r11,0x1f
8000ae48:	30 0a       	mov	r10,0
8000ae4a:	d8 22       	popm	r4-r7,pc

8000ae4c <__avr32_f64_mul_op1_zero>:
8000ae4c:	f7 e9 20 0b 	eor	r11,r11,r9
8000ae50:	e6 1b 80 00 	andh	r11,0x8000,COH
8000ae54:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000ae58:	e0 4c 07 ff 	cp.w	r12,2047
8000ae5c:	5e 1c       	retne	r12
8000ae5e:	3f fa       	mov	r10,-1
8000ae60:	3f fb       	mov	r11,-1
8000ae62:	5e fc       	retal	r12

8000ae64 <__avr32_f64_sub_from_add>:
8000ae64:	ee 19 80 00 	eorh	r9,0x8000

8000ae68 <__avr32_f64_sub>:
8000ae68:	f7 e9 20 0c 	eor	r12,r11,r9
8000ae6c:	e0 86 00 ca 	brmi	8000b000 <__avr32_f64_add_from_sub>
8000ae70:	eb cd 40 e0 	pushm	r5-r7,lr
8000ae74:	16 9c       	mov	r12,r11
8000ae76:	e6 1c 80 00 	andh	r12,0x8000,COH
8000ae7a:	bf db       	cbr	r11,0x1f
8000ae7c:	bf d9       	cbr	r9,0x1f
8000ae7e:	10 3a       	cp.w	r10,r8
8000ae80:	f2 0b 13 00 	cpc	r11,r9
8000ae84:	c0 92       	brcc	8000ae96 <__avr32_f64_sub+0x2e>
8000ae86:	16 97       	mov	r7,r11
8000ae88:	12 9b       	mov	r11,r9
8000ae8a:	0e 99       	mov	r9,r7
8000ae8c:	14 97       	mov	r7,r10
8000ae8e:	10 9a       	mov	r10,r8
8000ae90:	0e 98       	mov	r8,r7
8000ae92:	ee 1c 80 00 	eorh	r12,0x8000
8000ae96:	f6 07 16 14 	lsr	r7,r11,0x14
8000ae9a:	ab 7b       	lsl	r11,0xb
8000ae9c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000aea0:	ab 7a       	lsl	r10,0xb
8000aea2:	bf bb       	sbr	r11,0x1f
8000aea4:	f2 06 16 14 	lsr	r6,r9,0x14
8000aea8:	c4 40       	breq	8000af30 <__avr32_f64_sub_opL_subnormal>
8000aeaa:	ab 79       	lsl	r9,0xb
8000aeac:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000aeb0:	ab 78       	lsl	r8,0xb
8000aeb2:	bf b9       	sbr	r9,0x1f

8000aeb4 <__avr32_f64_sub_opL_subnormal_done>:
8000aeb4:	e0 47 07 ff 	cp.w	r7,2047
8000aeb8:	c4 f0       	breq	8000af56 <__avr32_f64_sub_opH_nan_or_inf>
8000aeba:	0e 26       	rsub	r6,r7
8000aebc:	c1 20       	breq	8000aee0 <__avr32_f64_sub_shift_done>
8000aebe:	ec 05 11 20 	rsub	r5,r6,32
8000aec2:	e0 46 00 20 	cp.w	r6,32
8000aec6:	c7 c2       	brcc	8000afbe <__avr32_f64_sub_longshift>
8000aec8:	f0 05 09 4e 	lsl	lr,r8,r5
8000aecc:	f2 05 09 45 	lsl	r5,r9,r5
8000aed0:	f0 06 0a 48 	lsr	r8,r8,r6
8000aed4:	f2 06 0a 49 	lsr	r9,r9,r6
8000aed8:	0a 48       	or	r8,r5
8000aeda:	58 0e       	cp.w	lr,0
8000aedc:	5f 1e       	srne	lr
8000aede:	1c 48       	or	r8,lr

8000aee0 <__avr32_f64_sub_shift_done>:
8000aee0:	10 1a       	sub	r10,r8
8000aee2:	f6 09 01 4b 	sbc	r11,r11,r9
8000aee6:	f6 06 12 00 	clz	r6,r11
8000aeea:	c0 e0       	breq	8000af06 <__avr32_f64_sub_longnormalize_done>
8000aeec:	c7 83       	brcs	8000afdc <__avr32_f64_sub_longnormalize>
8000aeee:	ec 0e 11 20 	rsub	lr,r6,32
8000aef2:	f6 06 09 4b 	lsl	r11,r11,r6
8000aef6:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000aefa:	1c 4b       	or	r11,lr
8000aefc:	f4 06 09 4a 	lsl	r10,r10,r6
8000af00:	0c 17       	sub	r7,r6
8000af02:	e0 8a 00 39 	brle	8000af74 <__avr32_f64_sub_subnormal_result>

8000af06 <__avr32_f64_sub_longnormalize_done>:
8000af06:	f4 09 15 15 	lsl	r9,r10,0x15
8000af0a:	ab 9a       	lsr	r10,0xb
8000af0c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000af10:	ab 9b       	lsr	r11,0xb
8000af12:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000af16:	18 4b       	or	r11,r12

8000af18 <__avr32_f64_sub_round>:
8000af18:	fc 17 80 00 	movh	r7,0x8000
8000af1c:	ed ba 00 00 	bld	r10,0x0
8000af20:	f7 b7 01 ff 	subne	r7,-1
8000af24:	0e 39       	cp.w	r9,r7
8000af26:	5f 29       	srhs	r9
8000af28:	12 0a       	add	r10,r9
8000af2a:	5c 0b       	acr	r11
8000af2c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000af30 <__avr32_f64_sub_opL_subnormal>:
8000af30:	ab 79       	lsl	r9,0xb
8000af32:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000af36:	ab 78       	lsl	r8,0xb
8000af38:	f3 e8 10 0e 	or	lr,r9,r8
8000af3c:	f9 b6 01 01 	movne	r6,1
8000af40:	ee 0e 11 00 	rsub	lr,r7,0
8000af44:	f9 b7 00 01 	moveq	r7,1
8000af48:	ef bb 00 1f 	bst	r11,0x1f
8000af4c:	f7 ea 10 0e 	or	lr,r11,r10
8000af50:	f9 b7 00 00 	moveq	r7,0
8000af54:	cb 0b       	rjmp	8000aeb4 <__avr32_f64_sub_opL_subnormal_done>

8000af56 <__avr32_f64_sub_opH_nan_or_inf>:
8000af56:	bf db       	cbr	r11,0x1f
8000af58:	f7 ea 10 0e 	or	lr,r11,r10
8000af5c:	c0 81       	brne	8000af6c <__avr32_f64_sub_return_nan>
8000af5e:	e0 46 07 ff 	cp.w	r6,2047
8000af62:	c0 50       	breq	8000af6c <__avr32_f64_sub_return_nan>
8000af64:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000af68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000af6c <__avr32_f64_sub_return_nan>:
8000af6c:	3f fa       	mov	r10,-1
8000af6e:	3f fb       	mov	r11,-1
8000af70:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000af74 <__avr32_f64_sub_subnormal_result>:
8000af74:	5c 37       	neg	r7
8000af76:	2f f7       	sub	r7,-1
8000af78:	f1 b7 04 c0 	satu	r7,0x6
8000af7c:	e0 47 00 20 	cp.w	r7,32
8000af80:	c1 14       	brge	8000afa2 <__avr32_f64_sub_subnormal_result+0x2e>
8000af82:	ee 08 11 20 	rsub	r8,r7,32
8000af86:	f4 08 09 49 	lsl	r9,r10,r8
8000af8a:	5f 16       	srne	r6
8000af8c:	f4 07 0a 4a 	lsr	r10,r10,r7
8000af90:	0c 4a       	or	r10,r6
8000af92:	f6 08 09 49 	lsl	r9,r11,r8
8000af96:	f5 e9 10 0a 	or	r10,r10,r9
8000af9a:	f4 07 0a 4b 	lsr	r11,r10,r7
8000af9e:	30 07       	mov	r7,0
8000afa0:	cb 3b       	rjmp	8000af06 <__avr32_f64_sub_longnormalize_done>
8000afa2:	ee 08 11 40 	rsub	r8,r7,64
8000afa6:	f6 08 09 49 	lsl	r9,r11,r8
8000afaa:	14 49       	or	r9,r10
8000afac:	5f 16       	srne	r6
8000afae:	f6 07 0a 4a 	lsr	r10,r11,r7
8000afb2:	0c 4a       	or	r10,r6
8000afb4:	30 0b       	mov	r11,0
8000afb6:	30 07       	mov	r7,0
8000afb8:	ca 7b       	rjmp	8000af06 <__avr32_f64_sub_longnormalize_done>
8000afba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000afbe <__avr32_f64_sub_longshift>:
8000afbe:	f1 b6 04 c0 	satu	r6,0x6
8000afc2:	f0 0e 17 00 	moveq	lr,r8
8000afc6:	c0 40       	breq	8000afce <__avr32_f64_sub_longshift+0x10>
8000afc8:	f2 05 09 4e 	lsl	lr,r9,r5
8000afcc:	10 4e       	or	lr,r8
8000afce:	f2 06 0a 48 	lsr	r8,r9,r6
8000afd2:	30 09       	mov	r9,0
8000afd4:	58 0e       	cp.w	lr,0
8000afd6:	5f 1e       	srne	lr
8000afd8:	1c 48       	or	r8,lr
8000afda:	c8 3b       	rjmp	8000aee0 <__avr32_f64_sub_shift_done>

8000afdc <__avr32_f64_sub_longnormalize>:
8000afdc:	f4 06 12 00 	clz	r6,r10
8000afe0:	f9 b7 03 00 	movlo	r7,0
8000afe4:	f9 b6 03 00 	movlo	r6,0
8000afe8:	f9 bc 03 00 	movlo	r12,0
8000afec:	f7 b6 02 e0 	subhs	r6,-32
8000aff0:	f4 06 09 4b 	lsl	r11,r10,r6
8000aff4:	30 0a       	mov	r10,0
8000aff6:	0c 17       	sub	r7,r6
8000aff8:	fe 9a ff be 	brle	8000af74 <__avr32_f64_sub_subnormal_result>
8000affc:	c8 5b       	rjmp	8000af06 <__avr32_f64_sub_longnormalize_done>
8000affe:	d7 03       	nop

8000b000 <__avr32_f64_add_from_sub>:
8000b000:	ee 19 80 00 	eorh	r9,0x8000

8000b004 <__avr32_f64_add>:
8000b004:	f7 e9 20 0c 	eor	r12,r11,r9
8000b008:	fe 96 ff 2e 	brmi	8000ae64 <__avr32_f64_sub_from_add>
8000b00c:	eb cd 40 e0 	pushm	r5-r7,lr
8000b010:	16 9c       	mov	r12,r11
8000b012:	e6 1c 80 00 	andh	r12,0x8000,COH
8000b016:	bf db       	cbr	r11,0x1f
8000b018:	bf d9       	cbr	r9,0x1f
8000b01a:	12 3b       	cp.w	r11,r9
8000b01c:	c0 72       	brcc	8000b02a <__avr32_f64_add+0x26>
8000b01e:	16 97       	mov	r7,r11
8000b020:	12 9b       	mov	r11,r9
8000b022:	0e 99       	mov	r9,r7
8000b024:	14 97       	mov	r7,r10
8000b026:	10 9a       	mov	r10,r8
8000b028:	0e 98       	mov	r8,r7
8000b02a:	30 0e       	mov	lr,0
8000b02c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000b030:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000b034:	b5 ab       	sbr	r11,0x14
8000b036:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000b03a:	c6 20       	breq	8000b0fe <__avr32_f64_add_op2_subnormal>
8000b03c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000b040:	b5 a9       	sbr	r9,0x14
8000b042:	e0 47 07 ff 	cp.w	r7,2047
8000b046:	c2 80       	breq	8000b096 <__avr32_f64_add_opH_nan_or_inf>
8000b048:	0e 26       	rsub	r6,r7
8000b04a:	c1 20       	breq	8000b06e <__avr32_f64_add_shift_done>
8000b04c:	e0 46 00 36 	cp.w	r6,54
8000b050:	c1 52       	brcc	8000b07a <__avr32_f64_add_res_of_done>
8000b052:	ec 05 11 20 	rsub	r5,r6,32
8000b056:	e0 46 00 20 	cp.w	r6,32
8000b05a:	c3 52       	brcc	8000b0c4 <__avr32_f64_add_longshift>
8000b05c:	f0 05 09 4e 	lsl	lr,r8,r5
8000b060:	f2 05 09 45 	lsl	r5,r9,r5
8000b064:	f0 06 0a 48 	lsr	r8,r8,r6
8000b068:	f2 06 0a 49 	lsr	r9,r9,r6
8000b06c:	0a 48       	or	r8,r5

8000b06e <__avr32_f64_add_shift_done>:
8000b06e:	10 0a       	add	r10,r8
8000b070:	f6 09 00 4b 	adc	r11,r11,r9
8000b074:	ed bb 00 15 	bld	r11,0x15
8000b078:	c3 40       	breq	8000b0e0 <__avr32_f64_add_res_of>

8000b07a <__avr32_f64_add_res_of_done>:
8000b07a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b07e:	18 4b       	or	r11,r12

8000b080 <__avr32_f64_add_round>:
8000b080:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000b084:	18 4e       	or	lr,r12
8000b086:	ee 1e 80 00 	eorh	lr,0x8000
8000b08a:	f1 be 04 20 	satu	lr,0x1
8000b08e:	1c 0a       	add	r10,lr
8000b090:	5c 0b       	acr	r11
8000b092:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b096 <__avr32_f64_add_opH_nan_or_inf>:
8000b096:	b5 cb       	cbr	r11,0x14
8000b098:	f7 ea 10 0e 	or	lr,r11,r10
8000b09c:	c1 01       	brne	8000b0bc <__avr32_f64_add_return_nan>
8000b09e:	e0 46 07 ff 	cp.w	r6,2047
8000b0a2:	c0 30       	breq	8000b0a8 <__avr32_f64_add_opL_nan_or_inf>
8000b0a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b0a8 <__avr32_f64_add_opL_nan_or_inf>:
8000b0a8:	b5 c9       	cbr	r9,0x14
8000b0aa:	f3 e8 10 0e 	or	lr,r9,r8
8000b0ae:	c0 71       	brne	8000b0bc <__avr32_f64_add_return_nan>
8000b0b0:	30 0a       	mov	r10,0
8000b0b2:	fc 1b 7f f0 	movh	r11,0x7ff0
8000b0b6:	18 4b       	or	r11,r12
8000b0b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b0bc <__avr32_f64_add_return_nan>:
8000b0bc:	3f fa       	mov	r10,-1
8000b0be:	3f fb       	mov	r11,-1
8000b0c0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b0c4 <__avr32_f64_add_longshift>:
8000b0c4:	f1 b6 04 c0 	satu	r6,0x6
8000b0c8:	f0 0e 17 00 	moveq	lr,r8
8000b0cc:	c0 60       	breq	8000b0d8 <__avr32_f64_add_longshift+0x14>
8000b0ce:	f2 05 09 4e 	lsl	lr,r9,r5
8000b0d2:	58 08       	cp.w	r8,0
8000b0d4:	5f 18       	srne	r8
8000b0d6:	10 4e       	or	lr,r8
8000b0d8:	f2 06 0a 48 	lsr	r8,r9,r6
8000b0dc:	30 09       	mov	r9,0
8000b0de:	cc 8b       	rjmp	8000b06e <__avr32_f64_add_shift_done>

8000b0e0 <__avr32_f64_add_res_of>:
8000b0e0:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000b0e4:	a1 9b       	lsr	r11,0x1
8000b0e6:	5d 0a       	ror	r10
8000b0e8:	5d 0e       	ror	lr
8000b0ea:	2f f7       	sub	r7,-1
8000b0ec:	e0 47 07 ff 	cp.w	r7,2047
8000b0f0:	f9 ba 00 00 	moveq	r10,0
8000b0f4:	f9 bb 00 00 	moveq	r11,0
8000b0f8:	f9 be 00 00 	moveq	lr,0
8000b0fc:	cb fb       	rjmp	8000b07a <__avr32_f64_add_res_of_done>

8000b0fe <__avr32_f64_add_op2_subnormal>:
8000b0fe:	30 16       	mov	r6,1
8000b100:	58 07       	cp.w	r7,0
8000b102:	ca 01       	brne	8000b042 <__avr32_f64_add+0x3e>
8000b104:	b5 cb       	cbr	r11,0x14
8000b106:	10 0a       	add	r10,r8
8000b108:	f6 09 00 4b 	adc	r11,r11,r9
8000b10c:	18 4b       	or	r11,r12
8000b10e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000b112:	d7 03       	nop

8000b114 <__avr32_f64_to_u32>:
8000b114:	58 0b       	cp.w	r11,0
8000b116:	5e 6d       	retmi	0

8000b118 <__avr32_f64_to_s32>:
8000b118:	f6 0c 15 01 	lsl	r12,r11,0x1
8000b11c:	b5 9c       	lsr	r12,0x15
8000b11e:	e0 2c 03 ff 	sub	r12,1023
8000b122:	5e 3d       	retlo	0
8000b124:	f8 0c 11 1f 	rsub	r12,r12,31
8000b128:	16 99       	mov	r9,r11
8000b12a:	ab 7b       	lsl	r11,0xb
8000b12c:	bf bb       	sbr	r11,0x1f
8000b12e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000b132:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000b136:	a1 79       	lsl	r9,0x1
8000b138:	5e 2b       	reths	r11
8000b13a:	5c 3b       	neg	r11
8000b13c:	5e fb       	retal	r11

8000b13e <__avr32_u32_to_f64>:
8000b13e:	f8 cb 00 00 	sub	r11,r12,0
8000b142:	30 0c       	mov	r12,0
8000b144:	c0 38       	rjmp	8000b14a <__avr32_s32_to_f64+0x4>

8000b146 <__avr32_s32_to_f64>:
8000b146:	18 9b       	mov	r11,r12
8000b148:	5c 4b       	abs	r11
8000b14a:	30 0a       	mov	r10,0
8000b14c:	5e 0b       	reteq	r11
8000b14e:	d4 01       	pushm	lr
8000b150:	e0 69 04 1e 	mov	r9,1054
8000b154:	f6 08 12 00 	clz	r8,r11
8000b158:	c1 70       	breq	8000b186 <__avr32_s32_to_f64+0x40>
8000b15a:	c0 c3       	brcs	8000b172 <__avr32_s32_to_f64+0x2c>
8000b15c:	f0 0e 11 20 	rsub	lr,r8,32
8000b160:	f6 08 09 4b 	lsl	r11,r11,r8
8000b164:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000b168:	1c 4b       	or	r11,lr
8000b16a:	f4 08 09 4a 	lsl	r10,r10,r8
8000b16e:	10 19       	sub	r9,r8
8000b170:	c0 b8       	rjmp	8000b186 <__avr32_s32_to_f64+0x40>
8000b172:	f4 08 12 00 	clz	r8,r10
8000b176:	f9 b8 03 00 	movlo	r8,0
8000b17a:	f7 b8 02 e0 	subhs	r8,-32
8000b17e:	f4 08 09 4b 	lsl	r11,r10,r8
8000b182:	30 0a       	mov	r10,0
8000b184:	10 19       	sub	r9,r8
8000b186:	58 09       	cp.w	r9,0
8000b188:	e0 89 00 30 	brgt	8000b1e8 <__avr32_s32_to_f64+0xa2>
8000b18c:	5c 39       	neg	r9
8000b18e:	2f f9       	sub	r9,-1
8000b190:	e0 49 00 36 	cp.w	r9,54
8000b194:	c0 43       	brcs	8000b19c <__avr32_s32_to_f64+0x56>
8000b196:	30 0b       	mov	r11,0
8000b198:	30 0a       	mov	r10,0
8000b19a:	c2 68       	rjmp	8000b1e6 <__avr32_s32_to_f64+0xa0>
8000b19c:	2f 69       	sub	r9,-10
8000b19e:	f2 08 11 20 	rsub	r8,r9,32
8000b1a2:	e0 49 00 20 	cp.w	r9,32
8000b1a6:	c0 b2       	brcc	8000b1bc <__avr32_s32_to_f64+0x76>
8000b1a8:	f4 08 09 4e 	lsl	lr,r10,r8
8000b1ac:	f6 08 09 48 	lsl	r8,r11,r8
8000b1b0:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b1b4:	f6 09 0a 4b 	lsr	r11,r11,r9
8000b1b8:	10 4b       	or	r11,r8
8000b1ba:	c0 88       	rjmp	8000b1ca <__avr32_s32_to_f64+0x84>
8000b1bc:	f6 08 09 4e 	lsl	lr,r11,r8
8000b1c0:	14 4e       	or	lr,r10
8000b1c2:	16 9a       	mov	r10,r11
8000b1c4:	30 0b       	mov	r11,0
8000b1c6:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b1ca:	ed ba 00 00 	bld	r10,0x0
8000b1ce:	c0 92       	brcc	8000b1e0 <__avr32_s32_to_f64+0x9a>
8000b1d0:	1c 7e       	tst	lr,lr
8000b1d2:	c0 41       	brne	8000b1da <__avr32_s32_to_f64+0x94>
8000b1d4:	ed ba 00 01 	bld	r10,0x1
8000b1d8:	c0 42       	brcc	8000b1e0 <__avr32_s32_to_f64+0x9a>
8000b1da:	2f fa       	sub	r10,-1
8000b1dc:	f7 bb 02 ff 	subhs	r11,-1
8000b1e0:	5c fc       	rol	r12
8000b1e2:	5d 0b       	ror	r11
8000b1e4:	5d 0a       	ror	r10
8000b1e6:	d8 02       	popm	pc
8000b1e8:	e0 68 03 ff 	mov	r8,1023
8000b1ec:	ed ba 00 0b 	bld	r10,0xb
8000b1f0:	f7 b8 00 ff 	subeq	r8,-1
8000b1f4:	10 0a       	add	r10,r8
8000b1f6:	5c 0b       	acr	r11
8000b1f8:	f7 b9 03 fe 	sublo	r9,-2
8000b1fc:	e0 49 07 ff 	cp.w	r9,2047
8000b200:	c0 55       	brlt	8000b20a <__avr32_s32_to_f64+0xc4>
8000b202:	30 0a       	mov	r10,0
8000b204:	fc 1b ff e0 	movh	r11,0xffe0
8000b208:	c0 c8       	rjmp	8000b220 <__floatsidf_return_op1>
8000b20a:	ed bb 00 1f 	bld	r11,0x1f
8000b20e:	f7 b9 01 01 	subne	r9,1
8000b212:	ab 9a       	lsr	r10,0xb
8000b214:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000b218:	a1 7b       	lsl	r11,0x1
8000b21a:	ab 9b       	lsr	r11,0xb
8000b21c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000b220 <__floatsidf_return_op1>:
8000b220:	a1 7c       	lsl	r12,0x1
8000b222:	5d 0b       	ror	r11
8000b224:	d8 02       	popm	pc

8000b226 <__avr32_f64_cmp_eq>:
8000b226:	10 3a       	cp.w	r10,r8
8000b228:	f2 0b 13 00 	cpc	r11,r9
8000b22c:	c0 80       	breq	8000b23c <__avr32_f64_cmp_eq+0x16>
8000b22e:	a1 7b       	lsl	r11,0x1
8000b230:	a1 79       	lsl	r9,0x1
8000b232:	14 4b       	or	r11,r10
8000b234:	12 4b       	or	r11,r9
8000b236:	10 4b       	or	r11,r8
8000b238:	5e 0f       	reteq	1
8000b23a:	5e fd       	retal	0
8000b23c:	a1 7b       	lsl	r11,0x1
8000b23e:	fc 1c ff e0 	movh	r12,0xffe0
8000b242:	58 0a       	cp.w	r10,0
8000b244:	f8 0b 13 00 	cpc	r11,r12
8000b248:	5e 8f       	retls	1
8000b24a:	5e fd       	retal	0

8000b24c <__avr32_f64_cmp_ge>:
8000b24c:	1a de       	st.w	--sp,lr
8000b24e:	1a d7       	st.w	--sp,r7
8000b250:	a1 7b       	lsl	r11,0x1
8000b252:	5f 3c       	srlo	r12
8000b254:	a1 79       	lsl	r9,0x1
8000b256:	5f 37       	srlo	r7
8000b258:	5c fc       	rol	r12
8000b25a:	fc 1e ff e0 	movh	lr,0xffe0
8000b25e:	58 0a       	cp.w	r10,0
8000b260:	fc 0b 13 00 	cpc	r11,lr
8000b264:	e0 8b 00 1d 	brhi	8000b29e <__avr32_f64_cmp_ge+0x52>
8000b268:	58 08       	cp.w	r8,0
8000b26a:	fc 09 13 00 	cpc	r9,lr
8000b26e:	e0 8b 00 18 	brhi	8000b29e <__avr32_f64_cmp_ge+0x52>
8000b272:	58 0b       	cp.w	r11,0
8000b274:	f5 ba 00 00 	subfeq	r10,0
8000b278:	c1 50       	breq	8000b2a2 <__avr32_f64_cmp_ge+0x56>
8000b27a:	1b 07       	ld.w	r7,sp++
8000b27c:	1b 0e       	ld.w	lr,sp++
8000b27e:	58 3c       	cp.w	r12,3
8000b280:	c0 a0       	breq	8000b294 <__avr32_f64_cmp_ge+0x48>
8000b282:	58 1c       	cp.w	r12,1
8000b284:	c0 33       	brcs	8000b28a <__avr32_f64_cmp_ge+0x3e>
8000b286:	5e 0f       	reteq	1
8000b288:	5e 1d       	retne	0
8000b28a:	10 3a       	cp.w	r10,r8
8000b28c:	f2 0b 13 00 	cpc	r11,r9
8000b290:	5e 2f       	reths	1
8000b292:	5e 3d       	retlo	0
8000b294:	14 38       	cp.w	r8,r10
8000b296:	f6 09 13 00 	cpc	r9,r11
8000b29a:	5e 2f       	reths	1
8000b29c:	5e 3d       	retlo	0
8000b29e:	1b 07       	ld.w	r7,sp++
8000b2a0:	d8 0a       	popm	pc,r12=0
8000b2a2:	58 17       	cp.w	r7,1
8000b2a4:	5f 0c       	sreq	r12
8000b2a6:	58 09       	cp.w	r9,0
8000b2a8:	f5 b8 00 00 	subfeq	r8,0
8000b2ac:	1b 07       	ld.w	r7,sp++
8000b2ae:	1b 0e       	ld.w	lr,sp++
8000b2b0:	5e 0f       	reteq	1
8000b2b2:	5e fc       	retal	r12

8000b2b4 <__avr32_f64_cmp_lt>:
8000b2b4:	1a de       	st.w	--sp,lr
8000b2b6:	1a d7       	st.w	--sp,r7
8000b2b8:	a1 7b       	lsl	r11,0x1
8000b2ba:	5f 3c       	srlo	r12
8000b2bc:	a1 79       	lsl	r9,0x1
8000b2be:	5f 37       	srlo	r7
8000b2c0:	5c fc       	rol	r12
8000b2c2:	fc 1e ff e0 	movh	lr,0xffe0
8000b2c6:	58 0a       	cp.w	r10,0
8000b2c8:	fc 0b 13 00 	cpc	r11,lr
8000b2cc:	e0 8b 00 1d 	brhi	8000b306 <__avr32_f64_cmp_lt+0x52>
8000b2d0:	58 08       	cp.w	r8,0
8000b2d2:	fc 09 13 00 	cpc	r9,lr
8000b2d6:	e0 8b 00 18 	brhi	8000b306 <__avr32_f64_cmp_lt+0x52>
8000b2da:	58 0b       	cp.w	r11,0
8000b2dc:	f5 ba 00 00 	subfeq	r10,0
8000b2e0:	c1 50       	breq	8000b30a <__avr32_f64_cmp_lt+0x56>
8000b2e2:	1b 07       	ld.w	r7,sp++
8000b2e4:	1b 0e       	ld.w	lr,sp++
8000b2e6:	58 3c       	cp.w	r12,3
8000b2e8:	c0 a0       	breq	8000b2fc <__avr32_f64_cmp_lt+0x48>
8000b2ea:	58 1c       	cp.w	r12,1
8000b2ec:	c0 33       	brcs	8000b2f2 <__avr32_f64_cmp_lt+0x3e>
8000b2ee:	5e 0d       	reteq	0
8000b2f0:	5e 1f       	retne	1
8000b2f2:	10 3a       	cp.w	r10,r8
8000b2f4:	f2 0b 13 00 	cpc	r11,r9
8000b2f8:	5e 2d       	reths	0
8000b2fa:	5e 3f       	retlo	1
8000b2fc:	14 38       	cp.w	r8,r10
8000b2fe:	f6 09 13 00 	cpc	r9,r11
8000b302:	5e 2d       	reths	0
8000b304:	5e 3f       	retlo	1
8000b306:	1b 07       	ld.w	r7,sp++
8000b308:	d8 0a       	popm	pc,r12=0
8000b30a:	58 17       	cp.w	r7,1
8000b30c:	5f 1c       	srne	r12
8000b30e:	58 09       	cp.w	r9,0
8000b310:	f5 b8 00 00 	subfeq	r8,0
8000b314:	1b 07       	ld.w	r7,sp++
8000b316:	1b 0e       	ld.w	lr,sp++
8000b318:	5e 0d       	reteq	0
8000b31a:	5e fc       	retal	r12

8000b31c <__avr32_f64_div>:
8000b31c:	eb cd 40 ff 	pushm	r0-r7,lr
8000b320:	f7 e9 20 0e 	eor	lr,r11,r9
8000b324:	f6 07 16 14 	lsr	r7,r11,0x14
8000b328:	a9 7b       	lsl	r11,0x9
8000b32a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000b32e:	a9 7a       	lsl	r10,0x9
8000b330:	bd bb       	sbr	r11,0x1d
8000b332:	e4 1b 3f ff 	andh	r11,0x3fff
8000b336:	ab d7       	cbr	r7,0xb
8000b338:	e0 80 00 cc 	breq	8000b4d0 <__avr32_f64_div_round_subnormal+0x54>
8000b33c:	e0 47 07 ff 	cp.w	r7,2047
8000b340:	e0 84 00 b5 	brge	8000b4aa <__avr32_f64_div_round_subnormal+0x2e>
8000b344:	f2 06 16 14 	lsr	r6,r9,0x14
8000b348:	a9 79       	lsl	r9,0x9
8000b34a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000b34e:	a9 78       	lsl	r8,0x9
8000b350:	bd b9       	sbr	r9,0x1d
8000b352:	e4 19 3f ff 	andh	r9,0x3fff
8000b356:	ab d6       	cbr	r6,0xb
8000b358:	e0 80 00 e2 	breq	8000b51c <__avr32_f64_div_round_subnormal+0xa0>
8000b35c:	e0 46 07 ff 	cp.w	r6,2047
8000b360:	e0 84 00 b2 	brge	8000b4c4 <__avr32_f64_div_round_subnormal+0x48>
8000b364:	0c 17       	sub	r7,r6
8000b366:	fe 37 fc 01 	sub	r7,-1023
8000b36a:	fc 1c 80 00 	movh	r12,0x8000
8000b36e:	f8 03 16 01 	lsr	r3,r12,0x1
8000b372:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000b376:	5c d4       	com	r4
8000b378:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000b37c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b380:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b384:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b388:	ea 03 15 02 	lsl	r3,r5,0x2
8000b38c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b390:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b394:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b398:	ea 03 15 02 	lsl	r3,r5,0x2
8000b39c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b3a0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b3a4:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b3a8:	ea 03 15 02 	lsl	r3,r5,0x2
8000b3ac:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b3b0:	e4 09 07 40 	macu.d	r0,r2,r9
8000b3b4:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b3b8:	02 04       	add	r4,r1
8000b3ba:	5c 05       	acr	r5
8000b3bc:	a3 65       	lsl	r5,0x2
8000b3be:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000b3c2:	a3 64       	lsl	r4,0x2
8000b3c4:	5c 34       	neg	r4
8000b3c6:	f8 05 01 45 	sbc	r5,r12,r5
8000b3ca:	e6 04 06 40 	mulu.d	r0,r3,r4
8000b3ce:	e4 05 07 40 	macu.d	r0,r2,r5
8000b3d2:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b3d6:	02 04       	add	r4,r1
8000b3d8:	5c 05       	acr	r5
8000b3da:	ea 03 15 02 	lsl	r3,r5,0x2
8000b3de:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000b3e2:	e8 02 15 02 	lsl	r2,r4,0x2
8000b3e6:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b3ea:	e4 09 07 40 	macu.d	r0,r2,r9
8000b3ee:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b3f2:	02 04       	add	r4,r1
8000b3f4:	5c 05       	acr	r5
8000b3f6:	a3 65       	lsl	r5,0x2
8000b3f8:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000b3fc:	a3 64       	lsl	r4,0x2
8000b3fe:	5c 34       	neg	r4
8000b400:	f8 05 01 45 	sbc	r5,r12,r5
8000b404:	e6 04 06 40 	mulu.d	r0,r3,r4
8000b408:	e4 05 07 40 	macu.d	r0,r2,r5
8000b40c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b410:	02 04       	add	r4,r1
8000b412:	5c 05       	acr	r5
8000b414:	ea 03 15 02 	lsl	r3,r5,0x2
8000b418:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000b41c:	e8 02 15 02 	lsl	r2,r4,0x2
8000b420:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000b424:	e4 0b 07 40 	macu.d	r0,r2,r11
8000b428:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000b42c:	02 02       	add	r2,r1
8000b42e:	5c 03       	acr	r3
8000b430:	ed b3 00 1c 	bld	r3,0x1c
8000b434:	c0 90       	breq	8000b446 <__avr32_f64_div+0x12a>
8000b436:	a1 72       	lsl	r2,0x1
8000b438:	5c f3       	rol	r3
8000b43a:	20 17       	sub	r7,1
8000b43c:	a3 9a       	lsr	r10,0x3
8000b43e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000b442:	a3 9b       	lsr	r11,0x3
8000b444:	c0 58       	rjmp	8000b44e <__avr32_f64_div+0x132>
8000b446:	a5 8a       	lsr	r10,0x4
8000b448:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000b44c:	a5 8b       	lsr	r11,0x4
8000b44e:	58 07       	cp.w	r7,0
8000b450:	e0 8a 00 8b 	brle	8000b566 <__avr32_f64_div_res_subnormal>
8000b454:	e0 12 ff 00 	andl	r2,0xff00
8000b458:	e8 12 00 80 	orl	r2,0x80
8000b45c:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b460:	e4 09 07 40 	macu.d	r0,r2,r9
8000b464:	e4 08 06 44 	mulu.d	r4,r2,r8
8000b468:	e6 09 06 48 	mulu.d	r8,r3,r9
8000b46c:	00 05       	add	r5,r0
8000b46e:	f0 01 00 48 	adc	r8,r8,r1
8000b472:	5c 09       	acr	r9
8000b474:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000b478:	58 04       	cp.w	r4,0
8000b47a:	5c 25       	cpc	r5

8000b47c <__avr32_f64_div_round_subnormal>:
8000b47c:	f4 08 13 00 	cpc	r8,r10
8000b480:	f6 09 13 00 	cpc	r9,r11
8000b484:	5f 36       	srlo	r6
8000b486:	f8 06 17 00 	moveq	r6,r12
8000b48a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000b48e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000b492:	e6 0b 16 08 	lsr	r11,r3,0x8
8000b496:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b49a:	ed be 00 1f 	bld	lr,0x1f
8000b49e:	ef bb 00 1f 	bst	r11,0x1f
8000b4a2:	0c 0a       	add	r10,r6
8000b4a4:	5c 0b       	acr	r11
8000b4a6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b4aa:	e4 1b 00 0f 	andh	r11,0xf
8000b4ae:	14 4b       	or	r11,r10
8000b4b0:	e0 81 00 a7 	brne	8000b5fe <__avr32_f64_div_res_subnormal+0x98>
8000b4b4:	f2 06 16 14 	lsr	r6,r9,0x14
8000b4b8:	ab d6       	cbr	r6,0xb
8000b4ba:	e0 46 07 ff 	cp.w	r6,2047
8000b4be:	e0 81 00 a4 	brne	8000b606 <__avr32_f64_div_res_subnormal+0xa0>
8000b4c2:	c9 e8       	rjmp	8000b5fe <__avr32_f64_div_res_subnormal+0x98>
8000b4c4:	e4 19 00 0f 	andh	r9,0xf
8000b4c8:	10 49       	or	r9,r8
8000b4ca:	e0 81 00 9a 	brne	8000b5fe <__avr32_f64_div_res_subnormal+0x98>
8000b4ce:	c9 28       	rjmp	8000b5f2 <__avr32_f64_div_res_subnormal+0x8c>
8000b4d0:	a3 7b       	lsl	r11,0x3
8000b4d2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000b4d6:	a3 7a       	lsl	r10,0x3
8000b4d8:	f5 eb 10 04 	or	r4,r10,r11
8000b4dc:	e0 80 00 a0 	breq	8000b61c <__avr32_f64_div_op1_zero>
8000b4e0:	f6 04 12 00 	clz	r4,r11
8000b4e4:	c1 70       	breq	8000b512 <__avr32_f64_div_round_subnormal+0x96>
8000b4e6:	c0 c3       	brcs	8000b4fe <__avr32_f64_div_round_subnormal+0x82>
8000b4e8:	e8 05 11 20 	rsub	r5,r4,32
8000b4ec:	f6 04 09 4b 	lsl	r11,r11,r4
8000b4f0:	f4 05 0a 45 	lsr	r5,r10,r5
8000b4f4:	0a 4b       	or	r11,r5
8000b4f6:	f4 04 09 4a 	lsl	r10,r10,r4
8000b4fa:	08 17       	sub	r7,r4
8000b4fc:	c0 b8       	rjmp	8000b512 <__avr32_f64_div_round_subnormal+0x96>
8000b4fe:	f4 04 12 00 	clz	r4,r10
8000b502:	f9 b4 03 00 	movlo	r4,0
8000b506:	f7 b4 02 e0 	subhs	r4,-32
8000b50a:	f4 04 09 4b 	lsl	r11,r10,r4
8000b50e:	30 0a       	mov	r10,0
8000b510:	08 17       	sub	r7,r4
8000b512:	a3 8a       	lsr	r10,0x2
8000b514:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000b518:	a3 8b       	lsr	r11,0x2
8000b51a:	c1 1b       	rjmp	8000b33c <__avr32_f64_div+0x20>
8000b51c:	a3 79       	lsl	r9,0x3
8000b51e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000b522:	a3 78       	lsl	r8,0x3
8000b524:	f3 e8 10 04 	or	r4,r9,r8
8000b528:	c6 f0       	breq	8000b606 <__avr32_f64_div_res_subnormal+0xa0>
8000b52a:	f2 04 12 00 	clz	r4,r9
8000b52e:	c1 70       	breq	8000b55c <__avr32_f64_div_round_subnormal+0xe0>
8000b530:	c0 c3       	brcs	8000b548 <__avr32_f64_div_round_subnormal+0xcc>
8000b532:	e8 05 11 20 	rsub	r5,r4,32
8000b536:	f2 04 09 49 	lsl	r9,r9,r4
8000b53a:	f0 05 0a 45 	lsr	r5,r8,r5
8000b53e:	0a 49       	or	r9,r5
8000b540:	f0 04 09 48 	lsl	r8,r8,r4
8000b544:	08 16       	sub	r6,r4
8000b546:	c0 b8       	rjmp	8000b55c <__avr32_f64_div_round_subnormal+0xe0>
8000b548:	f0 04 12 00 	clz	r4,r8
8000b54c:	f9 b4 03 00 	movlo	r4,0
8000b550:	f7 b4 02 e0 	subhs	r4,-32
8000b554:	f0 04 09 49 	lsl	r9,r8,r4
8000b558:	30 08       	mov	r8,0
8000b55a:	08 16       	sub	r6,r4
8000b55c:	a3 88       	lsr	r8,0x2
8000b55e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000b562:	a3 89       	lsr	r9,0x2
8000b564:	cf ca       	rjmp	8000b35c <__avr32_f64_div+0x40>

8000b566 <__avr32_f64_div_res_subnormal>:
8000b566:	5c 37       	neg	r7
8000b568:	2f f7       	sub	r7,-1
8000b56a:	f1 b7 04 c0 	satu	r7,0x6
8000b56e:	e0 47 00 20 	cp.w	r7,32
8000b572:	c1 54       	brge	8000b59c <__avr32_f64_div_res_subnormal+0x36>
8000b574:	ee 06 11 20 	rsub	r6,r7,32
8000b578:	e4 07 0a 42 	lsr	r2,r2,r7
8000b57c:	e6 06 09 4c 	lsl	r12,r3,r6
8000b580:	18 42       	or	r2,r12
8000b582:	e6 07 0a 43 	lsr	r3,r3,r7
8000b586:	f4 06 09 41 	lsl	r1,r10,r6
8000b58a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000b58e:	f6 06 09 4c 	lsl	r12,r11,r6
8000b592:	18 4a       	or	r10,r12
8000b594:	f6 07 0a 4b 	lsr	r11,r11,r7
8000b598:	30 00       	mov	r0,0
8000b59a:	c1 58       	rjmp	8000b5c4 <__avr32_f64_div_res_subnormal+0x5e>
8000b59c:	ee 06 11 20 	rsub	r6,r7,32
8000b5a0:	f9 b0 00 00 	moveq	r0,0
8000b5a4:	f9 bc 00 00 	moveq	r12,0
8000b5a8:	c0 50       	breq	8000b5b2 <__avr32_f64_div_res_subnormal+0x4c>
8000b5aa:	f4 06 09 40 	lsl	r0,r10,r6
8000b5ae:	f6 06 09 4c 	lsl	r12,r11,r6
8000b5b2:	e6 07 0a 42 	lsr	r2,r3,r7
8000b5b6:	30 03       	mov	r3,0
8000b5b8:	f4 07 0a 41 	lsr	r1,r10,r7
8000b5bc:	18 41       	or	r1,r12
8000b5be:	f6 07 0a 4a 	lsr	r10,r11,r7
8000b5c2:	30 0b       	mov	r11,0
8000b5c4:	e0 12 ff 00 	andl	r2,0xff00
8000b5c8:	e8 12 00 80 	orl	r2,0x80
8000b5cc:	e6 08 06 46 	mulu.d	r6,r3,r8
8000b5d0:	e4 09 07 46 	macu.d	r6,r2,r9
8000b5d4:	e4 08 06 44 	mulu.d	r4,r2,r8
8000b5d8:	e6 09 06 48 	mulu.d	r8,r3,r9
8000b5dc:	0c 05       	add	r5,r6
8000b5de:	f0 07 00 48 	adc	r8,r8,r7
8000b5e2:	5c 09       	acr	r9
8000b5e4:	30 07       	mov	r7,0
8000b5e6:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000b5ea:	00 34       	cp.w	r4,r0
8000b5ec:	e2 05 13 00 	cpc	r5,r1
8000b5f0:	c4 6b       	rjmp	8000b47c <__avr32_f64_div_round_subnormal>
8000b5f2:	1c 9b       	mov	r11,lr
8000b5f4:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b5f8:	30 0a       	mov	r10,0
8000b5fa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b5fe:	3f fb       	mov	r11,-1
8000b600:	30 0a       	mov	r10,0
8000b602:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b606:	f5 eb 10 04 	or	r4,r10,r11
8000b60a:	c0 90       	breq	8000b61c <__avr32_f64_div_op1_zero>
8000b60c:	1c 9b       	mov	r11,lr
8000b60e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b612:	ea 1b 7f f0 	orh	r11,0x7ff0
8000b616:	30 0a       	mov	r10,0
8000b618:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000b61c <__avr32_f64_div_op1_zero>:
8000b61c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000b620:	ce f0       	breq	8000b5fe <__avr32_f64_div_res_subnormal+0x98>
8000b622:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000b626:	e0 44 07 ff 	cp.w	r4,2047
8000b62a:	ce 41       	brne	8000b5f2 <__avr32_f64_div_res_subnormal+0x8c>
8000b62c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000b630:	ce 10       	breq	8000b5f2 <__avr32_f64_div_res_subnormal+0x8c>
8000b632:	ce 6b       	rjmp	8000b5fe <__avr32_f64_div_res_subnormal+0x98>

8000b634 <__avr32_umod64>:
8000b634:	d4 31       	pushm	r0-r7,lr
8000b636:	1a 97       	mov	r7,sp
8000b638:	20 3d       	sub	sp,12
8000b63a:	10 9c       	mov	r12,r8
8000b63c:	12 95       	mov	r5,r9
8000b63e:	14 9e       	mov	lr,r10
8000b640:	16 91       	mov	r1,r11
8000b642:	16 96       	mov	r6,r11
8000b644:	58 09       	cp.w	r9,0
8000b646:	e0 81 00 81 	brne	8000b748 <__avr32_umod64+0x114>
8000b64a:	16 38       	cp.w	r8,r11
8000b64c:	e0 88 00 12 	brls	8000b670 <__avr32_umod64+0x3c>
8000b650:	f0 08 12 00 	clz	r8,r8
8000b654:	c4 e0       	breq	8000b6f0 <__avr32_umod64+0xbc>
8000b656:	f6 08 09 46 	lsl	r6,r11,r8
8000b65a:	f8 08 09 4c 	lsl	r12,r12,r8
8000b65e:	f0 0b 11 20 	rsub	r11,r8,32
8000b662:	f4 08 09 4e 	lsl	lr,r10,r8
8000b666:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000b66a:	f7 e6 10 06 	or	r6,r11,r6
8000b66e:	c4 18       	rjmp	8000b6f0 <__avr32_umod64+0xbc>
8000b670:	58 08       	cp.w	r8,0
8000b672:	c0 51       	brne	8000b67c <__avr32_umod64+0x48>
8000b674:	30 19       	mov	r9,1
8000b676:	f2 08 0d 08 	divu	r8,r9,r8
8000b67a:	10 9c       	mov	r12,r8
8000b67c:	f8 08 12 00 	clz	r8,r12
8000b680:	c0 31       	brne	8000b686 <__avr32_umod64+0x52>
8000b682:	18 16       	sub	r6,r12
8000b684:	c3 68       	rjmp	8000b6f0 <__avr32_umod64+0xbc>
8000b686:	f0 03 11 20 	rsub	r3,r8,32
8000b68a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000b68e:	f8 08 09 4c 	lsl	r12,r12,r8
8000b692:	ec 08 09 49 	lsl	r9,r6,r8
8000b696:	ec 03 0a 43 	lsr	r3,r6,r3
8000b69a:	f7 e9 10 09 	or	r9,r11,r9
8000b69e:	f8 05 16 10 	lsr	r5,r12,0x10
8000b6a2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000b6a6:	e6 05 0d 02 	divu	r2,r3,r5
8000b6aa:	f2 0e 16 10 	lsr	lr,r9,0x10
8000b6ae:	ec 02 02 4b 	mul	r11,r6,r2
8000b6b2:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000b6b6:	16 3e       	cp.w	lr,r11
8000b6b8:	c0 72       	brcc	8000b6c6 <__avr32_umod64+0x92>
8000b6ba:	18 0e       	add	lr,r12
8000b6bc:	18 3e       	cp.w	lr,r12
8000b6be:	c0 43       	brcs	8000b6c6 <__avr32_umod64+0x92>
8000b6c0:	16 3e       	cp.w	lr,r11
8000b6c2:	fd dc e3 0e 	addcs	lr,lr,r12
8000b6c6:	fc 0b 01 03 	sub	r3,lr,r11
8000b6ca:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000b6ce:	e6 05 0d 02 	divu	r2,r3,r5
8000b6d2:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b6d6:	a5 36       	mul	r6,r2
8000b6d8:	0c 39       	cp.w	r9,r6
8000b6da:	c0 72       	brcc	8000b6e8 <__avr32_umod64+0xb4>
8000b6dc:	18 09       	add	r9,r12
8000b6de:	18 39       	cp.w	r9,r12
8000b6e0:	c0 43       	brcs	8000b6e8 <__avr32_umod64+0xb4>
8000b6e2:	0c 39       	cp.w	r9,r6
8000b6e4:	f3 dc e3 09 	addcs	r9,r9,r12
8000b6e8:	f2 06 01 06 	sub	r6,r9,r6
8000b6ec:	f4 08 09 4e 	lsl	lr,r10,r8
8000b6f0:	f8 0a 16 10 	lsr	r10,r12,0x10
8000b6f4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000b6f8:	ec 0a 0d 02 	divu	r2,r6,r10
8000b6fc:	fc 09 16 10 	lsr	r9,lr,0x10
8000b700:	ea 02 02 4b 	mul	r11,r5,r2
8000b704:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b708:	16 39       	cp.w	r9,r11
8000b70a:	c0 72       	brcc	8000b718 <__avr32_umod64+0xe4>
8000b70c:	18 09       	add	r9,r12
8000b70e:	18 39       	cp.w	r9,r12
8000b710:	c0 43       	brcs	8000b718 <__avr32_umod64+0xe4>
8000b712:	16 39       	cp.w	r9,r11
8000b714:	f3 dc e3 09 	addcs	r9,r9,r12
8000b718:	f2 0b 01 0b 	sub	r11,r9,r11
8000b71c:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000b720:	f6 0a 0d 0a 	divu	r10,r11,r10
8000b724:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000b728:	ea 0a 02 4a 	mul	r10,r5,r10
8000b72c:	14 3e       	cp.w	lr,r10
8000b72e:	c0 72       	brcc	8000b73c <__avr32_umod64+0x108>
8000b730:	18 0e       	add	lr,r12
8000b732:	18 3e       	cp.w	lr,r12
8000b734:	c0 43       	brcs	8000b73c <__avr32_umod64+0x108>
8000b736:	14 3e       	cp.w	lr,r10
8000b738:	fd dc e3 0e 	addcs	lr,lr,r12
8000b73c:	fc 0a 01 0a 	sub	r10,lr,r10
8000b740:	30 0b       	mov	r11,0
8000b742:	f4 08 0a 4a 	lsr	r10,r10,r8
8000b746:	c7 b8       	rjmp	8000b83c <__avr32_umod64+0x208>
8000b748:	16 39       	cp.w	r9,r11
8000b74a:	e0 8b 00 79 	brhi	8000b83c <__avr32_umod64+0x208>
8000b74e:	f2 09 12 00 	clz	r9,r9
8000b752:	c1 21       	brne	8000b776 <__avr32_umod64+0x142>
8000b754:	10 3a       	cp.w	r10,r8
8000b756:	5f 2b       	srhs	r11
8000b758:	0a 31       	cp.w	r1,r5
8000b75a:	5f ba       	srhi	r10
8000b75c:	f7 ea 10 0a 	or	r10,r11,r10
8000b760:	f2 0a 18 00 	cp.b	r10,r9
8000b764:	c0 60       	breq	8000b770 <__avr32_umod64+0x13c>
8000b766:	fc 08 01 0c 	sub	r12,lr,r8
8000b76a:	e2 05 01 46 	sbc	r6,r1,r5
8000b76e:	18 9e       	mov	lr,r12
8000b770:	0c 9b       	mov	r11,r6
8000b772:	1c 9a       	mov	r10,lr
8000b774:	c6 48       	rjmp	8000b83c <__avr32_umod64+0x208>
8000b776:	ea 09 09 4c 	lsl	r12,r5,r9
8000b77a:	f2 06 11 20 	rsub	r6,r9,32
8000b77e:	f6 09 09 4b 	lsl	r11,r11,r9
8000b782:	f0 09 09 42 	lsl	r2,r8,r9
8000b786:	ef 46 ff f4 	st.w	r7[-12],r6
8000b78a:	f0 06 0a 48 	lsr	r8,r8,r6
8000b78e:	18 48       	or	r8,r12
8000b790:	e2 06 0a 4c 	lsr	r12,r1,r6
8000b794:	f4 09 09 43 	lsl	r3,r10,r9
8000b798:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000b79c:	f4 06 0a 4a 	lsr	r10,r10,r6
8000b7a0:	16 4a       	or	r10,r11
8000b7a2:	f0 0b 16 10 	lsr	r11,r8,0x10
8000b7a6:	f8 0b 0d 04 	divu	r4,r12,r11
8000b7aa:	f4 0c 16 10 	lsr	r12,r10,0x10
8000b7ae:	08 91       	mov	r1,r4
8000b7b0:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000b7b4:	e8 0e 02 46 	mul	r6,r4,lr
8000b7b8:	0c 3c       	cp.w	r12,r6
8000b7ba:	c0 a2       	brcc	8000b7ce <__avr32_umod64+0x19a>
8000b7bc:	20 11       	sub	r1,1
8000b7be:	10 0c       	add	r12,r8
8000b7c0:	10 3c       	cp.w	r12,r8
8000b7c2:	c0 63       	brcs	8000b7ce <__avr32_umod64+0x19a>
8000b7c4:	0c 3c       	cp.w	r12,r6
8000b7c6:	f7 b1 03 01 	sublo	r1,1
8000b7ca:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000b7ce:	0c 1c       	sub	r12,r6
8000b7d0:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000b7d4:	f8 0b 0d 04 	divu	r4,r12,r11
8000b7d8:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000b7dc:	08 96       	mov	r6,r4
8000b7de:	e8 0e 02 4e 	mul	lr,r4,lr
8000b7e2:	1c 3b       	cp.w	r11,lr
8000b7e4:	c0 a2       	brcc	8000b7f8 <__avr32_umod64+0x1c4>
8000b7e6:	20 16       	sub	r6,1
8000b7e8:	10 0b       	add	r11,r8
8000b7ea:	10 3b       	cp.w	r11,r8
8000b7ec:	c0 63       	brcs	8000b7f8 <__avr32_umod64+0x1c4>
8000b7ee:	1c 3b       	cp.w	r11,lr
8000b7f0:	f7 b6 03 01 	sublo	r6,1
8000b7f4:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000b7f8:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000b7fc:	1c 1b       	sub	r11,lr
8000b7fe:	e2 02 06 40 	mulu.d	r0,r1,r2
8000b802:	00 9e       	mov	lr,r0
8000b804:	02 9c       	mov	r12,r1
8000b806:	16 3c       	cp.w	r12,r11
8000b808:	e0 8b 00 08 	brhi	8000b818 <__avr32_umod64+0x1e4>
8000b80c:	5f 06       	sreq	r6
8000b80e:	06 30       	cp.w	r0,r3
8000b810:	5f ba       	srhi	r10
8000b812:	ed ea 00 0a 	and	r10,r6,r10
8000b816:	c0 60       	breq	8000b822 <__avr32_umod64+0x1ee>
8000b818:	fc 02 01 04 	sub	r4,lr,r2
8000b81c:	f8 08 01 4c 	sbc	r12,r12,r8
8000b820:	08 9e       	mov	lr,r4
8000b822:	e6 0e 01 0a 	sub	r10,r3,lr
8000b826:	f6 0c 01 4c 	sbc	r12,r11,r12
8000b82a:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000b82e:	f8 09 0a 4b 	lsr	r11,r12,r9
8000b832:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b836:	f8 01 09 4c 	lsl	r12,r12,r1
8000b83a:	18 4a       	or	r10,r12
8000b83c:	2f dd       	sub	sp,-12
8000b83e:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000ba00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000ba00:	c0 08       	rjmp	8000ba00 <_evba>
	...

8000ba04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000ba04:	c0 08       	rjmp	8000ba04 <_handle_TLB_Multiple_Hit>
	...

8000ba08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000ba08:	c0 08       	rjmp	8000ba08 <_handle_Bus_Error_Data_Fetch>
	...

8000ba0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000ba0c:	c0 08       	rjmp	8000ba0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000ba10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000ba10:	c0 08       	rjmp	8000ba10 <_handle_NMI>
	...

8000ba14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000ba14:	c0 08       	rjmp	8000ba14 <_handle_Instruction_Address>
	...

8000ba18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000ba18:	c0 08       	rjmp	8000ba18 <_handle_ITLB_Protection>
	...

8000ba1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000ba1c:	c0 08       	rjmp	8000ba1c <_handle_Breakpoint>
	...

8000ba20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000ba20:	c0 08       	rjmp	8000ba20 <_handle_Illegal_Opcode>
	...

8000ba24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000ba24:	c0 08       	rjmp	8000ba24 <_handle_Unimplemented_Instruction>
	...

8000ba28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000ba28:	c0 08       	rjmp	8000ba28 <_handle_Privilege_Violation>
	...

8000ba2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000ba2c:	c0 08       	rjmp	8000ba2c <_handle_Floating_Point>
	...

8000ba30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000ba30:	c0 08       	rjmp	8000ba30 <_handle_Coprocessor_Absent>
	...

8000ba34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000ba34:	c0 08       	rjmp	8000ba34 <_handle_Data_Address_Read>
	...

8000ba38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000ba38:	c0 08       	rjmp	8000ba38 <_handle_Data_Address_Write>
	...

8000ba3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000ba3c:	c0 08       	rjmp	8000ba3c <_handle_DTLB_Protection_Read>
	...

8000ba40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000ba40:	c0 08       	rjmp	8000ba40 <_handle_DTLB_Protection_Write>
	...

8000ba44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000ba44:	c0 08       	rjmp	8000ba44 <_handle_DTLB_Modified>
	...

8000ba50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000ba50:	c0 08       	rjmp	8000ba50 <_handle_ITLB_Miss>
	...

8000ba60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000ba60:	c0 08       	rjmp	8000ba60 <_handle_DTLB_Miss_Read>
	...

8000ba70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000ba70:	c0 08       	rjmp	8000ba70 <_handle_DTLB_Miss_Write>
	...

8000bb00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000bb00:	c0 08       	rjmp	8000bb00 <_handle_Supervisor_Call>
8000bb02:	d7 03       	nop

8000bb04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000bb04:	30 0c       	mov	r12,0
8000bb06:	fe b0 b4 e5 	rcall	800024d0 <_get_interrupt_handler>
8000bb0a:	58 0c       	cp.w	r12,0
8000bb0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000bb10:	d6 03       	rete

8000bb12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000bb12:	30 1c       	mov	r12,1
8000bb14:	fe b0 b4 de 	rcall	800024d0 <_get_interrupt_handler>
8000bb18:	58 0c       	cp.w	r12,0
8000bb1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000bb1e:	d6 03       	rete

8000bb20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000bb20:	30 2c       	mov	r12,2
8000bb22:	fe b0 b4 d7 	rcall	800024d0 <_get_interrupt_handler>
8000bb26:	58 0c       	cp.w	r12,0
8000bb28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000bb2c:	d6 03       	rete

8000bb2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000bb2e:	30 3c       	mov	r12,3
8000bb30:	fe b0 b4 d0 	rcall	800024d0 <_get_interrupt_handler>
8000bb34:	58 0c       	cp.w	r12,0
8000bb36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000bb3a:	d6 03       	rete
8000bb3c:	d7 03       	nop
8000bb3e:	d7 03       	nop
8000bb40:	d7 03       	nop
8000bb42:	d7 03       	nop
8000bb44:	d7 03       	nop
8000bb46:	d7 03       	nop
8000bb48:	d7 03       	nop
8000bb4a:	d7 03       	nop
8000bb4c:	d7 03       	nop
8000bb4e:	d7 03       	nop
8000bb50:	d7 03       	nop
8000bb52:	d7 03       	nop
8000bb54:	d7 03       	nop
8000bb56:	d7 03       	nop
8000bb58:	d7 03       	nop
8000bb5a:	d7 03       	nop
8000bb5c:	d7 03       	nop
8000bb5e:	d7 03       	nop
8000bb60:	d7 03       	nop
8000bb62:	d7 03       	nop
8000bb64:	d7 03       	nop
8000bb66:	d7 03       	nop
8000bb68:	d7 03       	nop
8000bb6a:	d7 03       	nop
8000bb6c:	d7 03       	nop
8000bb6e:	d7 03       	nop
8000bb70:	d7 03       	nop
8000bb72:	d7 03       	nop
8000bb74:	d7 03       	nop
8000bb76:	d7 03       	nop
8000bb78:	d7 03       	nop
8000bb7a:	d7 03       	nop
8000bb7c:	d7 03       	nop
8000bb7e:	d7 03       	nop
8000bb80:	d7 03       	nop
8000bb82:	d7 03       	nop
8000bb84:	d7 03       	nop
8000bb86:	d7 03       	nop
8000bb88:	d7 03       	nop
8000bb8a:	d7 03       	nop
8000bb8c:	d7 03       	nop
8000bb8e:	d7 03       	nop
8000bb90:	d7 03       	nop
8000bb92:	d7 03       	nop
8000bb94:	d7 03       	nop
8000bb96:	d7 03       	nop
8000bb98:	d7 03       	nop
8000bb9a:	d7 03       	nop
8000bb9c:	d7 03       	nop
8000bb9e:	d7 03       	nop
8000bba0:	d7 03       	nop
8000bba2:	d7 03       	nop
8000bba4:	d7 03       	nop
8000bba6:	d7 03       	nop
8000bba8:	d7 03       	nop
8000bbaa:	d7 03       	nop
8000bbac:	d7 03       	nop
8000bbae:	d7 03       	nop
8000bbb0:	d7 03       	nop
8000bbb2:	d7 03       	nop
8000bbb4:	d7 03       	nop
8000bbb6:	d7 03       	nop
8000bbb8:	d7 03       	nop
8000bbba:	d7 03       	nop
8000bbbc:	d7 03       	nop
8000bbbe:	d7 03       	nop
8000bbc0:	d7 03       	nop
8000bbc2:	d7 03       	nop
8000bbc4:	d7 03       	nop
8000bbc6:	d7 03       	nop
8000bbc8:	d7 03       	nop
8000bbca:	d7 03       	nop
8000bbcc:	d7 03       	nop
8000bbce:	d7 03       	nop
8000bbd0:	d7 03       	nop
8000bbd2:	d7 03       	nop
8000bbd4:	d7 03       	nop
8000bbd6:	d7 03       	nop
8000bbd8:	d7 03       	nop
8000bbda:	d7 03       	nop
8000bbdc:	d7 03       	nop
8000bbde:	d7 03       	nop
8000bbe0:	d7 03       	nop
8000bbe2:	d7 03       	nop
8000bbe4:	d7 03       	nop
8000bbe6:	d7 03       	nop
8000bbe8:	d7 03       	nop
8000bbea:	d7 03       	nop
8000bbec:	d7 03       	nop
8000bbee:	d7 03       	nop
8000bbf0:	d7 03       	nop
8000bbf2:	d7 03       	nop
8000bbf4:	d7 03       	nop
8000bbf6:	d7 03       	nop
8000bbf8:	d7 03       	nop
8000bbfa:	d7 03       	nop
8000bbfc:	d7 03       	nop
8000bbfe:	d7 03       	nop
