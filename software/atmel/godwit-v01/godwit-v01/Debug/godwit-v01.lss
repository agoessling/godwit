
godwit-v01.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009270  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000b400  8000b400  0000b800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00001120  8000b600  8000b600  0000ba00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000050c  00000004  8000c720  0000cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000410  00000510  8000cc2c  0000d110  2**2
                  ALLOC
  7 .comment      00000030  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001058  00000000  00000000  0000d140  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00002394  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026532  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005397  00000000  00000000  00036a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fd1d  00000000  00000000  0003bdf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002d44  00000000  00000000  0004bb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006963  00000000  00000000  0004e858  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000a680  00000000  00000000  000551bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 00cde2a1  00000000  00000000  0005f83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  00007000  00007000  00000400  2**0
                  ALLOC
 18 .debug_ranges 000010d8  00000000  00000000  00d3dae0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf e7 50 	sub	pc,pc,-6320

Disassembly of section .text:

80002004 <flashcdw_set_wait_state>:
80002004:	eb cd 40 80 	pushm	r7,lr
	return (AVR32_FLASHCDW.fcr & AVR32_FLASHCDW_FCR_FWS_MASK) >> AVR32_FLASHCDW_FCR_FWS_OFFSET;
}


void flashcdw_set_wait_state(unsigned int wait_state)
{
80002008:	1a 97       	mov	r7,sp
8000200a:	20 2d       	sub	sp,8
8000200c:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashcdw_fcr_t u_avr32_flashcdw_fcr = {AVR32_FLASHCDW.fcr};
80002010:	fe 68 00 00 	mov	r8,-131072
80002014:	70 08       	ld.w	r8,r8[0x0]
80002016:	30 09       	mov	r9,0
80002018:	ef 49 ff fc 	st.w	r7[-4],r9
8000201c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcr.FCR.fws = wait_state;
80002020:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002024:	5c 58       	castu.b	r8
80002026:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000202a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000202e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002032:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80002036:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHCDW.fcr = u_avr32_flashcdw_fcr.fcr;
8000203a:	fe 68 00 00 	mov	r8,-131072
8000203e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002042:	91 09       	st.w	r8[0x0],r9
}
80002044:	2f ed       	sub	sp,-8
80002046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000204a:	d7 03       	nop

8000204c <flashcdw_set_flash_waitstate_and_readmode>:


void flashcdw_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
8000204c:	eb cd 40 80 	pushm	r7,lr
80002050:	1a 97       	mov	r7,sp
80002052:	20 1d       	sub	sp,4
80002054:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz > AVR32_FLASHCDW_FWS_0_MAX_FREQ) { // > 15MHz
80002058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205c:	e0 69 e1 c0 	mov	r9,57792
80002060:	ea 19 00 e4 	orh	r9,0xe4
80002064:	12 38       	cp.w	r8,r9
80002066:	e0 88 00 1b 	brls	8000209c <flashcdw_set_flash_waitstate_and_readmode+0x50>
		if (cpu_f_hz <= AVR32_FLASHCDW_FWS_1_MAX_FREQ) { // <= 30MHz
8000206a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000206e:	e0 69 c3 80 	mov	r9,50048
80002072:	ea 19 01 c9 	orh	r9,0x1c9
80002076:	12 38       	cp.w	r8,r9
80002078:	e0 8b 00 0a 	brhi	8000208c <flashcdw_set_flash_waitstate_and_readmode+0x40>
			// Set a wait-state, disable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000207c:	30 1c       	mov	r12,1
8000207e:	f0 1f 00 0d 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
80002082:	3f fb       	mov	r11,-1
80002084:	31 1c       	mov	r12,17
80002086:	f0 1f 00 0c 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000208a:	c1 08       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		} else {
			// Set a wait-state, enable the high-speed read mode.
			flashcdw_set_wait_state(1);
8000208c:	30 1c       	mov	r12,1
8000208e:	f0 1f 00 09 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
			flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSEN, -1);
80002092:	3f fb       	mov	r11,-1
80002094:	31 0c       	mov	r12,16
80002096:	f0 1f 00 08 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
8000209a:	c0 88       	rjmp	800020aa <flashcdw_set_flash_waitstate_and_readmode+0x5e>
		}
	} else { // <= 15MHz
		// No wait-state, disable the high-speed read mode
		flashcdw_set_wait_state(0);
8000209c:	30 0c       	mov	r12,0
8000209e:	f0 1f 00 05 	mcall	800020b0 <flashcdw_set_flash_waitstate_and_readmode+0x64>
		flashcdw_issue_command(AVR32_FLASHCDW_FCMD_CMD_HSDIS, -1);
800020a2:	3f fb       	mov	r11,-1
800020a4:	31 1c       	mov	r12,17
800020a6:	f0 1f 00 04 	mcall	800020b4 <flashcdw_set_flash_waitstate_and_readmode+0x68>
	}
}
800020aa:	2f fd       	sub	sp,-4
800020ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800020b0:	80 00       	ld.sh	r0,r0[0x0]
800020b2:	20 04       	sub	r4,0
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	21 04       	sub	r4,16

800020b8 <flashcdw_is_ready>:
 */
//! @{


bool flashcdw_is_ready(void)
{
800020b8:	eb cd 40 80 	pushm	r7,lr
800020bc:	1a 97       	mov	r7,sp
	return ((AVR32_FLASHCDW.fsr & AVR32_FLASHCDW_FSR_FRDY_MASK) != 0);
800020be:	fe 68 00 00 	mov	r8,-131072
800020c2:	70 28       	ld.w	r8,r8[0x8]
800020c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020c8:	5c 58       	castu.b	r8
}
800020ca:	10 9c       	mov	r12,r8
800020cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800020d0 <flashcdw_default_wait_until_ready>:


void flashcdw_default_wait_until_ready(void)
{
800020d0:	eb cd 40 80 	pushm	r7,lr
800020d4:	1a 97       	mov	r7,sp
	while (!flashcdw_is_ready());
800020d6:	f0 1f 00 05 	mcall	800020e8 <flashcdw_default_wait_until_ready+0x18>
800020da:	18 98       	mov	r8,r12
800020dc:	ec 18 00 01 	eorl	r8,0x1
800020e0:	5c 58       	castu.b	r8
800020e2:	cf a1       	brne	800020d6 <flashcdw_default_wait_until_ready+0x6>
}
800020e4:	e3 cd 80 80 	ldm	sp++,r7,pc
800020e8:	80 00       	ld.sh	r0,r0[0x0]
800020ea:	20 b8       	sub	r8,11

800020ec <flashcdw_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashcdw_is_lock_error
 *          and \ref flashcdw_is_programming_error.
 */
static unsigned int flashcdw_get_error_status(void)
{
800020ec:	eb cd 40 80 	pushm	r7,lr
800020f0:	1a 97       	mov	r7,sp
	return AVR32_FLASHCDW.fsr & (AVR32_FLASHCDW_FSR_LOCKE_MASK |
800020f2:	fe 68 00 00 	mov	r8,-131072
800020f6:	70 28       	ld.w	r8,r8[0x8]
800020f8:	e2 18 00 0c 	andl	r8,0xc,COH
			AVR32_FLASHCDW_FSR_PROGE_MASK);
}
800020fc:	10 9c       	mov	r12,r8
800020fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002102:	d7 03       	nop

80002104 <flashcdw_issue_command>:
	return (AVR32_FLASHCDW.fcmd & AVR32_FLASHCDW_FCMD_PAGEN_MASK) >> AVR32_FLASHCDW_FCMD_PAGEN_OFFSET;
}


void flashcdw_issue_command(unsigned int command, int page_number)
{
80002104:	eb cd 40 80 	pushm	r7,lr
80002108:	1a 97       	mov	r7,sp
8000210a:	20 3d       	sub	sp,12
8000210c:	ef 4c ff f8 	st.w	r7[-8],r12
80002110:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_flashcdw_fcmd_t u_avr32_flashcdw_fcmd;

	flashcdw_wait_until_ready();
80002114:	49 b8       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002116:	70 08       	ld.w	r8,r8[0x0]
80002118:	5d 18       	icall	r8
	u_avr32_flashcdw_fcmd.fcmd = AVR32_FLASHCDW.fcmd;
8000211a:	fe 68 00 00 	mov	r8,-131072
8000211e:	70 18       	ld.w	r8,r8[0x4]
80002120:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashcdw_fcmd.FCMD.cmd = command;
80002124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002128:	5c 58       	castu.b	r8
8000212a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8000212e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002136:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8000213a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (page_number >= 0) {
8000213e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002142:	58 08       	cp.w	r8,0
80002144:	c0 b5       	brlt	8000215a <flashcdw_issue_command+0x56>
		u_avr32_flashcdw_fcmd.FCMD.pagen = page_number;
80002146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000214a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000214e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002152:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80002156:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	u_avr32_flashcdw_fcmd.FCMD.key = AVR32_FLASHCDW_FCMD_KEY_KEY;
8000215a:	3a 58       	mov	r8,-91
8000215c:	ef 68 ff fc 	st.b	r7[-4],r8
	AVR32_FLASHCDW.fcmd = u_avr32_flashcdw_fcmd.fcmd;
80002160:	fe 68 00 00 	mov	r8,-131072
80002164:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002168:	91 19       	st.w	r8[0x4],r9
	flashcdw_error_status = flashcdw_get_error_status();
8000216a:	f0 1f 00 07 	mcall	80002184 <flashcdw_issue_command+0x80>
8000216e:	18 99       	mov	r9,r12
80002170:	48 68       	lddpc	r8,80002188 <flashcdw_issue_command+0x84>
80002172:	91 09       	st.w	r8[0x0],r9
	flashcdw_wait_until_ready();
80002174:	48 38       	lddpc	r8,80002180 <flashcdw_issue_command+0x7c>
80002176:	70 08       	ld.w	r8,r8[0x0]
80002178:	5d 18       	icall	r8
}
8000217a:	2f dd       	sub	sp,-12
8000217c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002180:	00 00       	add	r0,r0
80002182:	00 04       	add	r4,r0
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	20 ec       	sub	r12,14
80002188:	00 00       	add	r0,r0
8000218a:	05 10       	ld.sh	r0,r2++

8000218c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000218c:	eb cd 40 80 	pushm	r7,lr
80002190:	1a 97       	mov	r7,sp
80002192:	20 4d       	sub	sp,16
80002194:	ef 4c ff f4 	st.w	r7[-12],r12
80002198:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000219c:	30 08       	mov	r8,0
8000219e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800021a2:	30 08       	mov	r8,0
800021a4:	ef 48 ff fc 	st.w	r7[-4],r8
800021a8:	c1 c8       	rjmp	800021e0 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800021aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021ae:	70 19       	ld.w	r9,r8[0x4]
800021b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021b4:	70 08       	ld.w	r8,r8[0x0]
800021b6:	12 9b       	mov	r11,r9
800021b8:	10 9c       	mov	r12,r8
800021ba:	f0 1f 00 10 	mcall	800021f8 <gpio_enable_module+0x6c>
800021be:	18 98       	mov	r8,r12
800021c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021c4:	f3 e8 10 08 	or	r8,r9,r8
800021c8:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
800021cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021d0:	2f 88       	sub	r8,-8
800021d2:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800021d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021da:	2f f8       	sub	r8,-1
800021dc:	ef 48 ff fc 	st.w	r7[-4],r8
800021e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800021e8:	10 39       	cp.w	r9,r8
800021ea:	ce 03       	brcs	800021aa <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
800021ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800021f0:	10 9c       	mov	r12,r8
800021f2:	2f cd       	sub	sp,-16
800021f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021f8:	80 00       	ld.sh	r0,r0[0x0]
800021fa:	21 fc       	sub	r12,31

800021fc <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800021fc:	eb cd 40 80 	pushm	r7,lr
80002200:	1a 97       	mov	r7,sp
80002202:	20 3d       	sub	sp,12
80002204:	ef 4c ff f8 	st.w	r7[-8],r12
80002208:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000220c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002210:	a5 98       	lsr	r8,0x5
80002212:	a9 78       	lsl	r8,0x9
80002214:	e0 28 d4 00 	sub	r8,54272
80002218:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000221c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002220:	58 78       	cp.w	r8,7
80002222:	e0 8b 01 16 	brhi	8000244e <gpio_enable_module_pin+0x252>
80002226:	fe f9 02 4e 	ld.w	r9,pc[590]
8000222a:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000222e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002232:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002236:	30 19       	mov	r9,1
80002238:	f2 08 09 48 	lsl	r8,r9,r8
8000223c:	10 99       	mov	r9,r8
8000223e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002242:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002248:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000224c:	30 19       	mov	r9,1
8000224e:	f2 08 09 48 	lsl	r8,r9,r8
80002252:	10 99       	mov	r9,r8
80002254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002258:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000225a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000225e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002262:	30 19       	mov	r9,1
80002264:	f2 08 09 48 	lsl	r8,r9,r8
80002268:	10 99       	mov	r9,r8
8000226a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000226e:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
80002270:	cf 18       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002276:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000227a:	30 19       	mov	r9,1
8000227c:	f2 08 09 48 	lsl	r8,r9,r8
80002280:	10 99       	mov	r9,r8
80002282:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002286:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000228c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002290:	30 19       	mov	r9,1
80002292:	f2 08 09 48 	lsl	r8,r9,r8
80002296:	10 99       	mov	r9,r8
80002298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000229c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
8000229e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022a6:	30 19       	mov	r9,1
800022a8:	f2 08 09 48 	lsl	r8,r9,r8
800022ac:	10 99       	mov	r9,r8
800022ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022b2:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022b4:	cc f8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800022b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022be:	30 19       	mov	r9,1
800022c0:	f2 08 09 48 	lsl	r8,r9,r8
800022c4:	10 99       	mov	r9,r8
800022c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ca:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800022cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022d4:	30 19       	mov	r9,1
800022d6:	f2 08 09 48 	lsl	r8,r9,r8
800022da:	10 99       	mov	r9,r8
800022dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022e0:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
800022e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022ea:	30 19       	mov	r9,1
800022ec:	f2 08 09 48 	lsl	r8,r9,r8
800022f0:	10 99       	mov	r9,r8
800022f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022f6:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
800022f8:	ca d8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800022fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002302:	30 19       	mov	r9,1
80002304:	f2 08 09 48 	lsl	r8,r9,r8
80002308:	10 99       	mov	r9,r8
8000230a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000230e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002314:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002318:	30 19       	mov	r9,1
8000231a:	f2 08 09 48 	lsl	r8,r9,r8
8000231e:	10 99       	mov	r9,r8
80002320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002324:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
80002326:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000232a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000232e:	30 19       	mov	r9,1
80002330:	f2 08 09 48 	lsl	r8,r9,r8
80002334:	10 99       	mov	r9,r8
80002336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000233a:	91 e9       	st.w	r8[0x38],r9
#endif
		break;
8000233c:	c8 b8       	rjmp	80002452 <gpio_enable_module_pin+0x256>

#if (AVR32_GPIO_H_VERSION >= 210)
	case 4: /* E function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000233e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002342:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002346:	30 19       	mov	r9,1
80002348:	f2 08 09 48 	lsl	r8,r9,r8
8000234c:	10 99       	mov	r9,r8
8000234e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002352:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002358:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000235c:	30 19       	mov	r9,1
8000235e:	f2 08 09 48 	lsl	r8,r9,r8
80002362:	10 99       	mov	r9,r8
80002364:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002368:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
8000236a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002372:	30 19       	mov	r9,1
80002374:	f2 08 09 48 	lsl	r8,r9,r8
80002378:	10 99       	mov	r9,r8
8000237a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000237e:	91 d9       	st.w	r8[0x34],r9
		break;
80002380:	c6 98       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 5: /* F function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002386:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000238a:	30 19       	mov	r9,1
8000238c:	f2 08 09 48 	lsl	r8,r9,r8
80002390:	10 99       	mov	r9,r8
80002392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002396:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023a0:	30 19       	mov	r9,1
800023a2:	f2 08 09 48 	lsl	r8,r9,r8
800023a6:	10 99       	mov	r9,r8
800023a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023ac:	91 a9       	st.w	r8[0x28],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023b6:	30 19       	mov	r9,1
800023b8:	f2 08 09 48 	lsl	r8,r9,r8
800023bc:	10 99       	mov	r9,r8
800023be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023c2:	91 d9       	st.w	r8[0x34],r9
		break;
800023c4:	c4 78       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 6: /* G function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800023c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023ca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023ce:	30 19       	mov	r9,1
800023d0:	f2 08 09 48 	lsl	r8,r9,r8
800023d4:	10 99       	mov	r9,r8
800023d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023da:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800023dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023e4:	30 19       	mov	r9,1
800023e6:	f2 08 09 48 	lsl	r8,r9,r8
800023ea:	10 99       	mov	r9,r8
800023ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023f0:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
800023f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800023fa:	30 19       	mov	r9,1
800023fc:	f2 08 09 48 	lsl	r8,r9,r8
80002400:	10 99       	mov	r9,r8
80002402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002406:	91 d9       	st.w	r8[0x34],r9
		break;
80002408:	c2 58       	rjmp	80002452 <gpio_enable_module_pin+0x256>

	case 7: /* H function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000240a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000240e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002412:	30 19       	mov	r9,1
80002414:	f2 08 09 48 	lsl	r8,r9,r8
80002418:	10 99       	mov	r9,r8
8000241a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000241e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002424:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002428:	30 19       	mov	r9,1
8000242a:	f2 08 09 48 	lsl	r8,r9,r8
8000242e:	10 99       	mov	r9,r8
80002430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002434:	91 99       	st.w	r8[0x24],r9
		gpio_port->pmr2s = 1 << (pin & 0x1F);
80002436:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000243a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000243e:	30 19       	mov	r9,1
80002440:	f2 08 09 48 	lsl	r8,r9,r8
80002444:	10 99       	mov	r9,r8
80002446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244a:	91 d9       	st.w	r8[0x34],r9
		break;
8000244c:	c0 38       	rjmp	80002452 <gpio_enable_module_pin+0x256>
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
8000244e:	30 18       	mov	r8,1
80002450:	c0 d8       	rjmp	8000246a <gpio_enable_module_pin+0x26e>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002456:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000245a:	30 19       	mov	r9,1
8000245c:	f2 08 09 48 	lsl	r8,r9,r8
80002460:	10 99       	mov	r9,r8
80002462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002466:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80002468:	30 08       	mov	r8,0
}
8000246a:	10 9c       	mov	r12,r8
8000246c:	2f dd       	sub	sp,-12
8000246e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002472:	00 00       	add	r0,r0
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	b6 00       	st.h	r11[0x0],r0

80002478 <gpio_enable_gpio_pin>:
 *            GPIO mode of PX21, AVR32_PIN_PX21 can be used. Module pins such as
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
80002478:	eb cd 40 80 	pushm	r7,lr
8000247c:	1a 97       	mov	r7,sp
8000247e:	20 2d       	sub	sp,8
80002480:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002488:	a5 98       	lsr	r8,0x5
8000248a:	a9 78       	lsl	r8,0x9
8000248c:	e0 28 d4 00 	sub	r8,54272
80002490:	ef 48 ff fc 	st.w	r7[-4],r8
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002494:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002498:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000249c:	30 19       	mov	r9,1
8000249e:	f2 08 09 48 	lsl	r8,r9,r8
800024a2:	10 99       	mov	r9,r8
800024a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024a8:	f1 49 00 48 	st.w	r8[72],r9
	gpio_port->gpers = 1 << (pin & 0x1F);
800024ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800024b4:	30 19       	mov	r9,1
800024b6:	f2 08 09 48 	lsl	r8,r9,r8
800024ba:	10 99       	mov	r9,r8
800024bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024c0:	91 19       	st.w	r8[0x4],r9
}
800024c2:	2f ed       	sub	sp,-8
800024c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800024c8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800024c8:	eb cd 40 80 	pushm	r7,lr
800024cc:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
800024ce:	c0 08       	rjmp	800024ce <_unhandled_interrupt+0x6>

800024d0 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
800024d0:	eb cd 40 80 	pushm	r7,lr
800024d4:	1a 97       	mov	r7,sp
800024d6:	20 3d       	sub	sp,12
800024d8:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800024dc:	fe 78 10 00 	mov	r8,-61440
800024e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800024e4:	f2 09 11 03 	rsub	r9,r9,3
800024e8:	28 09       	sub	r9,-128
800024ea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800024ee:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800024f2:	fe 78 10 00 	mov	r8,-61440
800024f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800024fa:	2c 09       	sub	r9,-64
800024fc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002500:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	58 08       	cp.w	r8,0
8000250a:	c1 30       	breq	80002530 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000250c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002510:	48 b8       	lddpc	r8,8000253c <_get_interrupt_handler+0x6c>
80002512:	a1 79       	lsl	r9,0x1
80002514:	2f f9       	sub	r9,-1
80002516:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000251a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000251e:	f0 08 12 00 	clz	r8,r8
80002522:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80002526:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002528:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000252c:	70 08       	ld.w	r8,r8[0x0]
8000252e:	c0 28       	rjmp	80002532 <_get_interrupt_handler+0x62>
80002530:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002532:	10 9c       	mov	r12,r8
80002534:	2f dd       	sub	sp,-12
80002536:	e3 cd 80 80 	ldm	sp++,r7,pc
8000253a:	00 00       	add	r0,r0
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	b6 20       	st.h	r11[0x4],r0

80002540 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80002540:	eb cd 40 80 	pushm	r7,lr
80002544:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002546:	48 38       	lddpc	r8,80002550 <INTC_init_evba+0x10>
80002548:	e3 b8 00 01 	mtsr	0x4,r8
}
8000254c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002550:	80 00       	ld.sh	r0,r0[0x0]
80002552:	b4 00       	st.h	r10[0x0],r0

80002554 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002554:	eb cd 40 80 	pushm	r7,lr
80002558:	1a 97       	mov	r7,sp
8000255a:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
8000255c:	f0 1f 00 20 	mcall	800025dc <INTC_init_interrupts+0x88>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002560:	30 08       	mov	r8,0
80002562:	ef 48 ff f8 	st.w	r7[-8],r8
80002566:	c3 18       	rjmp	800025c8 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002568:	30 08       	mov	r8,0
8000256a:	ef 48 ff fc 	st.w	r7[-4],r8
8000256e:	c1 48       	rjmp	80002596 <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002570:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002574:	49 b8       	lddpc	r8,800025e0 <INTC_init_interrupts+0x8c>
80002576:	a1 79       	lsl	r9,0x1
80002578:	2f f9       	sub	r9,-1
8000257a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000257e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002582:	a3 68       	lsl	r8,0x2
80002584:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002588:	49 79       	lddpc	r9,800025e4 <INTC_init_interrupts+0x90>
8000258a:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000258c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002590:	2f f8       	sub	r8,-1
80002592:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
80002596:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000259a:	49 28       	lddpc	r8,800025e0 <INTC_init_interrupts+0x8c>
8000259c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025a4:	10 39       	cp.w	r9,r8
800025a6:	fe 9b ff e5 	brhi	80002570 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025aa:	fe 78 10 00 	mov	r8,-61440
800025ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800025b2:	48 eb       	lddpc	r11,800025e8 <INTC_init_interrupts+0x94>
800025b4:	48 ea       	lddpc	r10,800025ec <INTC_init_interrupts+0x98>
800025b6:	f6 0a 01 0a 	sub	r10,r11,r10
800025ba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800025be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025c2:	2f f8       	sub	r8,-1
800025c4:	ef 48 ff f8 	st.w	r7[-8],r8
800025c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025cc:	e0 48 00 21 	cp.w	r8,33
800025d0:	fe 98 ff cc 	brls	80002568 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
800025d4:	2f ed       	sub	sp,-8
800025d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800025da:	00 00       	add	r0,r0
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	25 40       	sub	r0,84
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	b6 20       	st.h	r11[0x4],r0
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	24 c8       	sub	r8,76
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	b5 04       	ld.d	r4,r10
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	b4 00       	st.h	r10[0x0],r0

800025f0 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800025f0:	eb cd 40 80 	pushm	r7,lr
800025f4:	1a 97       	mov	r7,sp
800025f6:	20 4d       	sub	sp,16
800025f8:	ef 4c ff f8 	st.w	r7[-8],r12
800025fc:	ef 4b ff f4 	st.w	r7[-12],r11
80002600:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002604:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002608:	a5 98       	lsr	r8,0x5
8000260a:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000260e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002612:	4a 78       	lddpc	r8,800026ac <INTC_register_interrupt+0xbc>
80002614:	a1 79       	lsl	r9,0x1
80002616:	2f f9       	sub	r9,-1
80002618:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000261c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002620:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002624:	a3 68       	lsl	r8,0x2
80002626:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000262a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000262e:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002634:	58 08       	cp.w	r8,0
80002636:	c0 c1       	brne	8000264e <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002638:	fe 78 10 00 	mov	r8,-61440
8000263c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002640:	49 cb       	lddpc	r11,800026b0 <INTC_register_interrupt+0xc0>
80002642:	49 da       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002644:	f6 0a 01 0a 	sub	r10,r11,r10
80002648:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000264c:	c2 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000264e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002652:	58 18       	cp.w	r8,1
80002654:	c0 d1       	brne	8000266e <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002656:	fe 78 10 00 	mov	r8,-61440
8000265a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000265e:	49 7b       	lddpc	r11,800026b8 <INTC_register_interrupt+0xc8>
80002660:	49 5a       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002662:	f6 0a 01 0a 	sub	r10,r11,r10
80002666:	bf aa       	sbr	r10,0x1e
80002668:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000266c:	c1 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000266e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002672:	58 28       	cp.w	r8,2
80002674:	c0 d1       	brne	8000268e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002676:	fe 78 10 00 	mov	r8,-61440
8000267a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000267e:	49 0b       	lddpc	r11,800026bc <INTC_register_interrupt+0xcc>
80002680:	48 da       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
80002682:	f6 0a 01 0a 	sub	r10,r11,r10
80002686:	bf ba       	sbr	r10,0x1f
80002688:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000268c:	c0 d8       	rjmp	800026a6 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000268e:	fe 78 10 00 	mov	r8,-61440
80002692:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002696:	48 bb       	lddpc	r11,800026c0 <INTC_register_interrupt+0xd0>
80002698:	48 7a       	lddpc	r10,800026b4 <INTC_register_interrupt+0xc4>
8000269a:	f6 0a 01 0a 	sub	r10,r11,r10
8000269e:	ea 1a c0 00 	orh	r10,0xc000
800026a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800026a6:	2f cd       	sub	sp,-16
800026a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ac:	80 00       	ld.sh	r0,r0[0x0]
800026ae:	b6 20       	st.h	r11[0x4],r0
800026b0:	80 00       	ld.sh	r0,r0[0x0]
800026b2:	b5 04       	ld.d	r4,r10
800026b4:	80 00       	ld.sh	r0,r0[0x0]
800026b6:	b4 00       	st.h	r10[0x0],r0
800026b8:	80 00       	ld.sh	r0,r0[0x0]
800026ba:	b5 12       	ld.d	r2,--r10
800026bc:	80 00       	ld.sh	r0,r0[0x0]
800026be:	b5 20       	st.d	r10++,r0
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	b5 2e       	st.d	r10++,lr

800026c4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800026c4:	eb cd 40 80 	pushm	r7,lr
800026c8:	1a 97       	mov	r7,sp
800026ca:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026cc:	e1 b8 00 00 	mfsr	r8,0x0
800026d0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800026d4:	d3 03       	ssrf	0x10

	return flags;
800026d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800026da:	10 9c       	mov	r12,r8
800026dc:	2f fd       	sub	sp,-4
800026de:	e3 cd 80 80 	ldm	sp++,r7,pc

800026e2 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800026e2:	eb cd 40 80 	pushm	r7,lr
800026e6:	1a 97       	mov	r7,sp
800026e8:	20 1d       	sub	sp,4
800026ea:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800026ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026f2:	e6 18 00 01 	andh	r8,0x1,COH
800026f6:	5f 08       	sreq	r8
800026f8:	5c 58       	castu.b	r8
}
800026fa:	10 9c       	mov	r12,r8
800026fc:	2f fd       	sub	sp,-4
800026fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002702:	d7 03       	nop

80002704 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80002704:	eb cd 40 80 	pushm	r7,lr
80002708:	1a 97       	mov	r7,sp
8000270a:	20 1d       	sub	sp,4
8000270c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002710:	ee fc ff fc 	ld.w	r12,r7[-4]
80002714:	f0 1f 00 05 	mcall	80002728 <cpu_irq_restore+0x24>
80002718:	18 98       	mov	r8,r12
8000271a:	58 08       	cp.w	r8,0
8000271c:	c0 20       	breq	80002720 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000271e:	d5 03       	csrf	0x10
   }

	barrier();
}
80002720:	2f fd       	sub	sp,-4
80002722:	e3 cd 80 80 	ldm	sp++,r7,pc
80002726:	00 00       	add	r0,r0
80002728:	80 00       	ld.sh	r0,r0[0x0]
8000272a:	26 e2       	sub	r2,110

8000272c <pdca_get_handler>:

#include "compiler.h"
#include "pdca.h"

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
8000272c:	eb cd 40 80 	pushm	r7,lr
80002730:	1a 97       	mov	r7,sp
80002732:	20 2d       	sub	sp,8
80002734:	18 98       	mov	r8,r12
80002736:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
8000273a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000273e:	a7 68       	lsl	r8,0x6
80002740:	e0 38 00 00 	sub	r8,65536
80002744:	ef 48 ff fc 	st.w	r7[-4],r8

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80002748:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000274c:	30 f8       	mov	r8,15
8000274e:	f0 09 18 00 	cp.b	r9,r8
80002752:	e0 88 00 04 	brls	8000275a <pdca_get_handler+0x2e>
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80002756:	3f f8       	mov	r8,-1
80002758:	c0 38       	rjmp	8000275e <pdca_get_handler+0x32>
	}

	return pdca_channel;
8000275a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000275e:	10 9c       	mov	r12,r8
80002760:	2f ed       	sub	sp,-8
80002762:	e3 cd 80 80 	ldm	sp++,r7,pc
80002766:	d7 03       	nop

80002768 <pdca_init_channel>:

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
80002768:	eb cd 40 80 	pushm	r7,lr
8000276c:	1a 97       	mov	r7,sp
8000276e:	20 4d       	sub	sp,16
80002770:	18 98       	mov	r8,r12
80002772:	ef 4b ff f0 	st.w	r7[-16],r11
80002776:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
8000277a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000277e:	10 9c       	mov	r12,r8
80002780:	f0 1f 00 29 	mcall	80002824 <pdca_init_channel+0xbc>
80002784:	18 98       	mov	r8,r12
			pdca_ch_number);
80002786:	ef 48 ff f8 	st.w	r7[-8],r8

	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
8000278a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000278e:	10 9c       	mov	r12,r8
80002790:	f0 1f 00 26 	mcall	80002828 <pdca_init_channel+0xc0>
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
80002794:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002798:	10 9c       	mov	r12,r8
8000279a:	f0 1f 00 25 	mcall	8000282c <pdca_init_channel+0xc4>
	
	irqflags_t flags = cpu_irq_save();
8000279e:	f0 1f 00 25 	mcall	80002830 <pdca_init_channel+0xc8>
800027a2:	18 98       	mov	r8,r12
800027a4:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)opt->addr;
800027a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ac:	70 08       	ld.w	r8,r8[0x0]
800027ae:	10 99       	mov	r9,r8
800027b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027b4:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = opt->size;
800027b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ba:	70 19       	ld.w	r9,r8[0x4]
800027bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027c0:	91 29       	st.w	r8[0x8],r9
	pdca_channel->psr = opt->pid;
800027c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027c6:	70 49       	ld.w	r9,r8[0x10]
800027c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027cc:	91 19       	st.w	r8[0x4],r9
	pdca_channel->marr = (uint32_t)opt->r_addr;
800027ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027d2:	70 28       	ld.w	r8,r8[0x8]
800027d4:	10 99       	mov	r9,r8
800027d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027da:	91 39       	st.w	r8[0xc],r9
	pdca_channel->tcrr = opt->r_size;
800027dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027e0:	70 39       	ld.w	r9,r8[0xc]
800027e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027e6:	91 49       	st.w	r8[0x10],r9
	pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
800027e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027ec:	f1 38 00 18 	ld.ub	r8,r8[24]
800027f0:	a3 68       	lsl	r8,0x2
800027f2:	10 99       	mov	r9,r8
800027f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027f8:	70 58       	ld.w	r8,r8[0x14]
800027fa:	10 49       	or	r9,r8
	pdca_channel->mar = (uint32_t)opt->addr;
	pdca_channel->tcr = opt->size;
	pdca_channel->psr = opt->pid;
	pdca_channel->marr = (uint32_t)opt->r_addr;
	pdca_channel->tcrr = opt->r_size;
	pdca_channel->mr =
800027fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002800:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80002802:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002806:	e0 69 01 00 	mov	r9,256
8000280a:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
8000280c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002810:	70 b8       	ld.w	r8,r8[0x2c]
	
	cpu_irq_restore(flags);
80002812:	ee fc ff fc 	ld.w	r12,r7[-4]
80002816:	f0 1f 00 08 	mcall	80002834 <pdca_init_channel+0xcc>

	return PDCA_SUCCESS;
8000281a:	30 08       	mov	r8,0
}
8000281c:	10 9c       	mov	r12,r8
8000281e:	2f cd       	sub	sp,-16
80002820:	e3 cd 80 80 	ldm	sp++,r7,pc
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	27 2c       	sub	r12,114
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	29 08       	sub	r8,-112
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	29 88       	sub	r8,-104
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	26 c4       	sub	r4,108
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	27 04       	sub	r4,112

80002838 <pdca_disable>:

	return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
}

void pdca_disable(uint8_t pdca_ch_number)
{
80002838:	eb cd 40 80 	pushm	r7,lr
8000283c:	1a 97       	mov	r7,sp
8000283e:	20 2d       	sub	sp,8
80002840:	18 98       	mov	r8,r12
80002842:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002846:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000284a:	10 9c       	mov	r12,r8
8000284c:	f0 1f 00 06 	mcall	80002864 <pdca_disable+0x2c>
80002850:	18 98       	mov	r8,r12
			pdca_ch_number);
80002852:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80002856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000285a:	30 29       	mov	r9,2
8000285c:	91 59       	st.w	r8[0x14],r9
}
8000285e:	2f ed       	sub	sp,-8
80002860:	e3 cd 80 80 	ldm	sp++,r7,pc
80002864:	80 00       	ld.sh	r0,r0[0x0]
80002866:	27 2c       	sub	r12,114

80002868 <pdca_enable>:

void pdca_enable(uint8_t pdca_ch_number)
{
80002868:	eb cd 40 80 	pushm	r7,lr
8000286c:	1a 97       	mov	r7,sp
8000286e:	20 2d       	sub	sp,8
80002870:	18 98       	mov	r8,r12
80002872:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002876:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000287a:	10 9c       	mov	r12,r8
8000287c:	f0 1f 00 06 	mcall	80002894 <pdca_enable+0x2c>
80002880:	18 98       	mov	r8,r12
			pdca_ch_number);
80002882:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable transfer */
	pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80002886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000288a:	30 19       	mov	r9,1
8000288c:	91 59       	st.w	r8[0x14],r9
}
8000288e:	2f ed       	sub	sp,-8
80002890:	e3 cd 80 80 	ldm	sp++,r7,pc
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	27 2c       	sub	r12,114

80002898 <pdca_load_channel>:
	return pdca_channel->tcr;
}

void pdca_load_channel(uint8_t pdca_ch_number, volatile void *addr,
		uint32_t size)
{
80002898:	eb cd 40 80 	pushm	r7,lr
8000289c:	1a 97       	mov	r7,sp
8000289e:	20 5d       	sub	sp,20
800028a0:	18 98       	mov	r8,r12
800028a2:	ef 4b ff f0 	st.w	r7[-16],r11
800028a6:	ef 4a ff ec 	st.w	r7[-20],r10
800028aa:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
800028ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800028b2:	10 9c       	mov	r12,r8
800028b4:	f0 1f 00 12 	mcall	800028fc <pdca_load_channel+0x64>
800028b8:	18 98       	mov	r8,r12
			pdca_ch_number);
800028ba:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800028be:	f0 1f 00 11 	mcall	80002900 <pdca_load_channel+0x68>
800028c2:	18 98       	mov	r8,r12
800028c4:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->mar = (uint32_t)addr;
800028c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800028cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028d0:	91 09       	st.w	r8[0x0],r9
	pdca_channel->tcr = size;
800028d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800028da:	91 29       	st.w	r8[0x8],r9
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800028dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e0:	e0 69 01 00 	mov	r9,256
800028e4:	91 59       	st.w	r8[0x14],r9
	pdca_channel->isr;
800028e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028ea:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
800028ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800028f0:	f0 1f 00 05 	mcall	80002904 <pdca_load_channel+0x6c>
}
800028f4:	2f bd       	sub	sp,-20
800028f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800028fa:	00 00       	add	r0,r0
800028fc:	80 00       	ld.sh	r0,r0[0x0]
800028fe:	27 2c       	sub	r12,114
80002900:	80 00       	ld.sh	r0,r0[0x0]
80002902:	26 c4       	sub	r4,108
80002904:	80 00       	ld.sh	r0,r0[0x0]
80002906:	27 04       	sub	r4,112

80002908 <pdca_disable_interrupt_transfer_complete>:

	pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}

void pdca_disable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002908:	eb cd 40 80 	pushm	r7,lr
8000290c:	1a 97       	mov	r7,sp
8000290e:	20 3d       	sub	sp,12
80002910:	18 98       	mov	r8,r12
80002912:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002916:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000291a:	10 9c       	mov	r12,r8
8000291c:	f0 1f 00 0c 	mcall	8000294c <pdca_disable_interrupt_transfer_complete+0x44>
80002920:	18 98       	mov	r8,r12
			pdca_ch_number);
80002922:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
80002926:	f0 1f 00 0b 	mcall	80002950 <pdca_disable_interrupt_transfer_complete+0x48>
8000292a:	18 98       	mov	r8,r12
8000292c:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80002930:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002934:	30 29       	mov	r9,2
80002936:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
80002938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000293c:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
8000293e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002942:	f0 1f 00 05 	mcall	80002954 <pdca_disable_interrupt_transfer_complete+0x4c>
}
80002946:	2f dd       	sub	sp,-12
80002948:	e3 cd 80 80 	ldm	sp++,r7,pc
8000294c:	80 00       	ld.sh	r0,r0[0x0]
8000294e:	27 2c       	sub	r12,114
80002950:	80 00       	ld.sh	r0,r0[0x0]
80002952:	26 c4       	sub	r4,108
80002954:	80 00       	ld.sh	r0,r0[0x0]
80002956:	27 04       	sub	r4,112

80002958 <pdca_enable_interrupt_transfer_complete>:

void pdca_enable_interrupt_transfer_complete(uint8_t pdca_ch_number)
{
80002958:	eb cd 40 80 	pushm	r7,lr
8000295c:	1a 97       	mov	r7,sp
8000295e:	20 2d       	sub	sp,8
80002960:	18 98       	mov	r8,r12
80002962:	ef 68 ff f8 	st.b	r7[-8],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002966:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000296a:	10 9c       	mov	r12,r8
8000296c:	f0 1f 00 06 	mcall	80002984 <pdca_enable_interrupt_transfer_complete+0x2c>
80002970:	18 98       	mov	r8,r12
			pdca_ch_number);
80002972:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80002976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000297a:	30 29       	mov	r9,2
8000297c:	91 89       	st.w	r8[0x20],r9
}
8000297e:	2f ed       	sub	sp,-8
80002980:	e3 cd 80 80 	ldm	sp++,r7,pc
80002984:	80 00       	ld.sh	r0,r0[0x0]
80002986:	27 2c       	sub	r12,114

80002988 <pdca_disable_interrupt_reload_counter_zero>:

void pdca_disable_interrupt_reload_counter_zero(uint8_t pdca_ch_number)
{
80002988:	eb cd 40 80 	pushm	r7,lr
8000298c:	1a 97       	mov	r7,sp
8000298e:	20 3d       	sub	sp,12
80002990:	18 98       	mov	r8,r12
80002992:	ef 68 ff f4 	st.b	r7[-12],r8
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
80002996:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000299a:	10 9c       	mov	r12,r8
8000299c:	f0 1f 00 0c 	mcall	800029cc <pdca_disable_interrupt_reload_counter_zero+0x44>
800029a0:	18 98       	mov	r8,r12
			pdca_ch_number);
800029a2:	ef 48 ff f8 	st.w	r7[-8],r8

	irqflags_t flags = cpu_irq_save();
800029a6:	f0 1f 00 0b 	mcall	800029d0 <pdca_disable_interrupt_reload_counter_zero+0x48>
800029aa:	18 98       	mov	r8,r12
800029ac:	ef 48 ff fc 	st.w	r7[-4],r8

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800029b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029b4:	30 19       	mov	r9,1
800029b6:	91 99       	st.w	r8[0x24],r9
	pdca_channel->isr;
800029b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029bc:	70 b8       	ld.w	r8,r8[0x2c]

	cpu_irq_restore(flags);
800029be:	ee fc ff fc 	ld.w	r12,r7[-4]
800029c2:	f0 1f 00 05 	mcall	800029d4 <pdca_disable_interrupt_reload_counter_zero+0x4c>
}
800029c6:	2f dd       	sub	sp,-12
800029c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800029cc:	80 00       	ld.sh	r0,r0[0x0]
800029ce:	27 2c       	sub	r12,114
800029d0:	80 00       	ld.sh	r0,r0[0x0]
800029d2:	26 c4       	sub	r4,108
800029d4:	80 00       	ld.sh	r0,r0[0x0]
800029d6:	27 04       	sub	r4,112

800029d8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800029d8:	eb cd 40 80 	pushm	r7,lr
800029dc:	1a 97       	mov	r7,sp
800029de:	20 1d       	sub	sp,4
800029e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800029e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029e8:	e6 18 00 01 	andh	r8,0x1,COH
800029ec:	5f 08       	sreq	r8
800029ee:	5c 58       	castu.b	r8
}
800029f0:	10 9c       	mov	r12,r8
800029f2:	2f fd       	sub	sp,-4
800029f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800029f8 <pm_set_mclk_source>:
/**
 ** Clock Functions
 **/

long pm_set_mclk_source(pm_clk_src_t src)
{
800029f8:	eb cd 40 80 	pushm	r7,lr
800029fc:	1a 97       	mov	r7,sp
800029fe:	20 2d       	sub	sp,8
80002a00:	ef 4c ff f8 	st.w	r7[-8],r12
  AVR32_ENTER_CRITICAL_REGION( );
80002a04:	e1 b8 00 00 	mfsr	r8,0x0
80002a08:	10 9c       	mov	r12,r8
80002a0a:	f0 1f 00 0f 	mcall	80002a44 <pm_set_mclk_source+0x4c>
80002a0e:	18 98       	mov	r8,r12
80002a10:	ef 68 ff ff 	st.b	r7[-1],r8
80002a14:	d3 03       	ssrf	0x10
  // Unlock the write-protected MCCTRL register
  PM_UNLOCK(AVR32_PM_MCCTRL);
80002a16:	fe 78 14 00 	mov	r8,-60416
80002a1a:	fc 19 aa 00 	movh	r9,0xaa00
80002a1e:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.mcctrl = src;
80002a22:	fe 78 14 00 	mov	r8,-60416
80002a26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a2a:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002a2c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a30:	30 08       	mov	r8,0
80002a32:	f0 09 18 00 	cp.b	r9,r8
80002a36:	c0 20       	breq	80002a3a <pm_set_mclk_source+0x42>
80002a38:	d5 03       	csrf	0x10

  return PASS;
80002a3a:	30 08       	mov	r8,0
}
80002a3c:	10 9c       	mov	r12,r8
80002a3e:	2f ed       	sub	sp,-8
80002a40:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a44:	80 00       	ld.sh	r0,r0[0x0]
80002a46:	29 d8       	sub	r8,-99

80002a48 <pm_set_clk_domain_div>:

  return PASS;
}

long pm_set_clk_domain_div(pm_clk_domain_t clock_domain, pm_divratio_t divratio)
{
80002a48:	eb cd 40 80 	pushm	r7,lr
80002a4c:	1a 97       	mov	r7,sp
80002a4e:	20 4d       	sub	sp,16
80002a50:	ef 4c ff f4 	st.w	r7[-12],r12
80002a54:	ef 4b ff f0 	st.w	r7[-16],r11
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002a58:	fe 78 14 00 	mov	r8,-60416
80002a5c:	70 18       	ld.w	r8,r8[0x4]
80002a5e:	30 09       	mov	r9,0
80002a60:	ef 49 ff f8 	st.w	r7[-8],r9
80002a64:	ef 48 ff f8 	st.w	r7[-8],r8
  if((divratio > PM_CPUSEL_DIVRATIO_MAX)||(divratio < 0))
    return -1;
#endif

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002a68:	fe 78 14 00 	mov	r8,-60416
80002a6c:	f0 f8 00 d4 	ld.w	r8,r8[212]
80002a70:	e2 18 00 20 	andl	r8,0x20,COH
80002a74:	cf a0       	breq	80002a68 <pm_set_clk_domain_div+0x20>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= 1;
80002a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a7a:	30 19       	mov	r9,1
80002a7c:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002a80:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_pm_cpusel.CPUSEL.cpusel = divratio;
80002a84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a88:	5c 58       	castu.b	r8
80002a8a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a8e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a96:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002a9a:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002a9e:	e1 b8 00 00 	mfsr	r8,0x0
80002aa2:	10 9c       	mov	r12,r8
80002aa4:	f0 1f 00 12 	mcall	80002aec <pm_set_clk_domain_div+0xa4>
80002aa8:	18 98       	mov	r8,r12
80002aaa:	ef 68 ff ff 	st.b	r7[-1],r8
80002aae:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002ab0:	fe 78 14 00 	mov	r8,-60416
80002ab4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002ab8:	2f f9       	sub	r9,-1
80002aba:	a3 69       	lsl	r9,0x2
80002abc:	ea 19 aa 00 	orh	r9,0xaa00
80002ac0:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ac8:	a3 68       	lsl	r8,0x2
80002aca:	e0 28 eb fc 	sub	r8,60412
80002ace:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ad2:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002ad4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002ad8:	30 08       	mov	r8,0
80002ada:	f0 09 18 00 	cp.b	r9,r8
80002ade:	c0 20       	breq	80002ae2 <pm_set_clk_domain_div+0x9a>
80002ae0:	d5 03       	csrf	0x10

  return PASS;
80002ae2:	30 08       	mov	r8,0
}
80002ae4:	10 9c       	mov	r12,r8
80002ae6:	2f cd       	sub	sp,-16
80002ae8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	29 d8       	sub	r8,-99

80002af0 <pm_disable_clk_domain_div>:

long pm_disable_clk_domain_div(pm_clk_domain_t clock_domain)
{
80002af0:	eb cd 40 80 	pushm	r7,lr
80002af4:	1a 97       	mov	r7,sp
80002af6:	20 3d       	sub	sp,12
80002af8:	ef 4c ff f4 	st.w	r7[-12],r12
  u_avr32_pm_cpusel_t u_avr32_pm_cpusel = {AVR32_PM.cpusel};
80002afc:	fe 78 14 00 	mov	r8,-60416
80002b00:	70 18       	ld.w	r8,r8[0x4]
80002b02:	30 09       	mov	r9,0
80002b04:	ef 49 ff f8 	st.w	r7[-8],r9
80002b08:	ef 48 ff f8 	st.w	r7[-8],r8

//# Implementation note: the ckSEL registers are contiguous and memory-mapped in
//# that order: CPUSEL, HSBSEL, PBASEL, PBBSEL.

  // ckSEL must not be written while SR.CKRDY is 0.
  while(!(AVR32_PM.sr & AVR32_PM_SR_CKRDY_MASK));
80002b0c:	fe 78 14 00 	mov	r8,-60416
80002b10:	f0 f8 00 d4 	ld.w	r8,r8[212]
80002b14:	e2 18 00 20 	andl	r8,0x20,COH
80002b18:	cf a0       	breq	80002b0c <pm_disable_clk_domain_div+0x1c>

  // Modify
  u_avr32_pm_cpusel.CPUSEL.cpudiv= DISABLE;
80002b1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b1e:	30 09       	mov	r9,0
80002b20:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80002b24:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002b28:	e1 b8 00 00 	mfsr	r8,0x0
80002b2c:	10 9c       	mov	r12,r8
80002b2e:	f0 1f 00 13 	mcall	80002b78 <pm_disable_clk_domain_div+0x88>
80002b32:	18 98       	mov	r8,r12
80002b34:	ef 68 ff ff 	st.b	r7[-1],r8
80002b38:	d3 03       	ssrf	0x10
  // Unlock the write-protected ckSEL register
  PM_UNLOCK(AVR32_PM_CPUSEL + clock_domain*sizeof(avr32_pm_cpusel_t));
80002b3a:	fe 78 14 00 	mov	r8,-60416
80002b3e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b42:	2f f9       	sub	r9,-1
80002b44:	a3 69       	lsl	r9,0x2
80002b46:	ea 19 aa 00 	orh	r9,0xaa00
80002b4a:	f1 49 00 58 	st.w	r8[88],r9
  // Update
  *(&(AVR32_PM.cpusel) + clock_domain)= u_avr32_pm_cpusel.cpusel;
80002b4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b52:	a3 68       	lsl	r8,0x2
80002b54:	e0 28 eb fc 	sub	r8,60412
80002b58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b5c:	91 09       	st.w	r8[0x0],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002b5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002b62:	30 08       	mov	r8,0
80002b64:	f0 09 18 00 	cp.b	r9,r8
80002b68:	c0 20       	breq	80002b6c <pm_disable_clk_domain_div+0x7c>
80002b6a:	d5 03       	csrf	0x10

  return PASS;
80002b6c:	30 08       	mov	r8,0
}
80002b6e:	10 9c       	mov	r12,r8
80002b70:	2f dd       	sub	sp,-12
80002b72:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b76:	00 00       	add	r0,r0
80002b78:	80 00       	ld.sh	r0,r0[0x0]
80002b7a:	29 d8       	sub	r8,-99

80002b7c <pm_set_all_cksel>:

void pm_set_all_cksel(unsigned long main_clock_f_hz, unsigned long cpu_f_hz,
                      unsigned long pba_f_hz, unsigned long pbb_f_hz)
{
80002b7c:	eb cd 40 80 	pushm	r7,lr
80002b80:	1a 97       	mov	r7,sp
80002b82:	20 5d       	sub	sp,20
80002b84:	ef 4c ff f8 	st.w	r7[-8],r12
80002b88:	ef 4b ff f4 	st.w	r7[-12],r11
80002b8c:	ef 4a ff f0 	st.w	r7[-16],r10
80002b90:	ef 49 ff ec 	st.w	r7[-20],r9
  pm_divratio_t div_ratio;


  // Find the divratio to apply to reach the target cpu_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, cpu_f_hz);
80002b94:	ee fb ff f4 	ld.w	r11,r7[-12]
80002b98:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b9c:	f0 1f 00 21 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002ba0:	18 98       	mov	r8,r12
80002ba2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the CPU clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002baa:	58 88       	cp.w	r8,8
80002bac:	c0 51       	brne	80002bb6 <pm_set_all_cksel+0x3a>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU);
80002bae:	30 0c       	mov	r12,0
80002bb0:	f0 1f 00 1d 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002bb4:	c0 68       	rjmp	80002bc0 <pm_set_all_cksel+0x44>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_CPU, div_ratio);
80002bb6:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bba:	30 0c       	mov	r12,0
80002bbc:	f0 1f 00 1b 	mcall	80002c28 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pba_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pba_f_hz);
80002bc0:	ee fb ff f0 	ld.w	r11,r7[-16]
80002bc4:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bc8:	f0 1f 00 16 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002bcc:	18 98       	mov	r8,r12
80002bce:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBA clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002bd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bd6:	58 88       	cp.w	r8,8
80002bd8:	c0 51       	brne	80002be2 <pm_set_all_cksel+0x66>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA);
80002bda:	30 2c       	mov	r12,2
80002bdc:	f0 1f 00 12 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002be0:	c0 68       	rjmp	80002bec <pm_set_all_cksel+0x70>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBA, div_ratio);
80002be2:	ee fb ff fc 	ld.w	r11,r7[-4]
80002be6:	30 2c       	mov	r12,2
80002be8:	f0 1f 00 10 	mcall	80002c28 <pm_set_all_cksel+0xac>

  // Find the divratio to apply to reach the target pbb_f frequency.
  div_ratio = pm_find_divratio(main_clock_f_hz, pbb_f_hz);
80002bec:	ee fb ff ec 	ld.w	r11,r7[-20]
80002bf0:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bf4:	f0 1f 00 0b 	mcall	80002c20 <pm_set_all_cksel+0xa4>
80002bf8:	18 98       	mov	r8,r12
80002bfa:	ef 48 ff fc 	st.w	r7[-4],r8
  // Apply the division ratio for the PBB clock domain.
  if(PM_CKSEL_DIVRATIO_ERROR == div_ratio)
80002bfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c02:	58 88       	cp.w	r8,8
80002c04:	c0 51       	brne	80002c0e <pm_set_all_cksel+0x92>
    pm_disable_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB);
80002c06:	30 3c       	mov	r12,3
80002c08:	f0 1f 00 07 	mcall	80002c24 <pm_set_all_cksel+0xa8>
80002c0c:	c0 68       	rjmp	80002c18 <pm_set_all_cksel+0x9c>
  else
    pm_set_clk_domain_div((pm_clk_domain_t)AVR32_PM_CLK_GRP_PBB, div_ratio);
80002c0e:	ee fb ff fc 	ld.w	r11,r7[-4]
80002c12:	30 3c       	mov	r12,3
80002c14:	f0 1f 00 05 	mcall	80002c28 <pm_set_all_cksel+0xac>
}
80002c18:	2f bd       	sub	sp,-20
80002c1a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c1e:	00 00       	add	r0,r0
80002c20:	80 00       	ld.sh	r0,r0[0x0]
80002c22:	2c 2c       	sub	r12,-62
80002c24:	80 00       	ld.sh	r0,r0[0x0]
80002c26:	2a f0       	sub	r0,-81
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	2a 48       	sub	r8,-92

80002c2c <pm_find_divratio>:
 * \return the division ratio CPUSEL
 *   \retval PM_CKSEL_DIVRATIO_ERROR  no div ratio to apply
 *   \retval the div ratio enum value
 */
static pm_divratio_t pm_find_divratio(unsigned long ref_freq_hz, unsigned long target_freq_hz)
{
80002c2c:	eb cd 40 80 	pushm	r7,lr
80002c30:	1a 97       	mov	r7,sp
80002c32:	20 3d       	sub	sp,12
80002c34:	ef 4c ff f8 	st.w	r7[-8],r12
80002c38:	ef 4b ff f4 	st.w	r7[-12],r11
  int div_ratio;

  div_ratio = ref_freq_hz/target_freq_hz;
80002c3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002c44:	f0 09 0d 08 	divu	r8,r8,r9
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
  if(div_ratio == 1)
80002c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c50:	58 18       	cp.w	r8,1
80002c52:	c0 31       	brne	80002c58 <pm_find_divratio+0x2c>
    return(PM_CKSEL_DIVRATIO_ERROR);
80002c54:	30 88       	mov	r8,8
80002c56:	c0 78       	rjmp	80002c64 <pm_find_divratio+0x38>
  else
  {
    // div ratio field value so that rel_freq_hz = target_freq_hz*2pow(divratio+1)
    return((pm_divratio_t)(ctz(div_ratio)-1));
80002c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c5c:	5c 98       	brev	r8
80002c5e:	f0 08 12 00 	clz	r8,r8
80002c62:	20 18       	sub	r8,1
  }
}
80002c64:	10 9c       	mov	r12,r8
80002c66:	2f dd       	sub	sp,-12
80002c68:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c6c <pcl_configure_clocks>:
#if UC3D
static long int pcl_configure_clocks_uc3d(pcl_freq_param_t *param); // FORWARD declaration
#endif

long int pcl_configure_clocks(pcl_freq_param_t *param)
{
80002c6c:	eb cd 40 80 	pushm	r7,lr
80002c70:	1a 97       	mov	r7,sp
80002c72:	20 1d       	sub	sp,4
80002c74:	ef 4c ff fc 	st.w	r7[-4],r12
		// Implementation for UC3C parts.
		return(pcl_configure_clocks_uc3c(param));
	#endif
  #else
    // Implementation for UC3L parts.
    return(pcl_configure_clocks_uc3l(param));
80002c78:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c7c:	f0 1f 00 04 	mcall	80002c8c <pcl_configure_clocks+0x20>
80002c80:	18 98       	mov	r8,r12
  #endif
#endif
}
80002c82:	10 9c       	mov	r12,r8
80002c84:	2f fd       	sub	sp,-4
80002c86:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c8a:	00 00       	add	r0,r0
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	2d 90       	sub	r0,-39

80002c90 <pcl_configure_clocks_rcsys>:
static long int pcl_configure_synchronous_clocks( pm_clk_src_t main_clk_src,
                                                  unsigned long main_clock_freq_hz,
                                                  pcl_freq_param_t *param);

long int pcl_configure_clocks_rcsys(pcl_freq_param_t *param)
{
80002c90:	eb cd 40 80 	pushm	r7,lr
80002c94:	1a 97       	mov	r7,sp
80002c96:	20 1d       	sub	sp,4
80002c98:	ef 4c ff fc 	st.w	r7[-4],r12
    if((param->cpu_f > SCIF_SLOWCLOCK_FREQ_HZ) || (param->pba_f > SCIF_SLOWCLOCK_FREQ_HZ)
      || (param->pbb_f > SCIF_SLOWCLOCK_FREQ_HZ))
      return(-1);
#endif

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_SLOW, SCIF_SLOWCLOCK_FREQ_HZ, param));
80002c9c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ca0:	e0 7b c2 00 	mov	r11,115200
80002ca4:	30 0c       	mov	r12,0
80002ca6:	f0 1f 00 04 	mcall	80002cb4 <pcl_configure_clocks_rcsys+0x24>
80002caa:	18 98       	mov	r8,r12
}
80002cac:	10 9c       	mov	r12,r8
80002cae:	2f fd       	sub	sp,-4
80002cb0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2e 00       	sub	r0,-32

80002cb8 <pcl_configure_clocks_rc120m>:


long int pcl_configure_clocks_rc120m(pcl_freq_param_t *param)
{
80002cb8:	eb cd 40 80 	pushm	r7,lr
80002cbc:	1a 97       	mov	r7,sp
80002cbe:	20 1d       	sub	sp,4
80002cc0:	ef 4c ff fc 	st.w	r7[-4],r12
    || (param->pbb_f > SCIF_RC120M_FREQ_HZ))
    return(-1);
#endif

  // Start the 120MHz internal RCosc (RC120M) clock
  scif_start_rc120M();
80002cc4:	f0 1f 00 08 	mcall	80002ce4 <pcl_configure_clocks_rc120m+0x2c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_RC120M, SCIF_RC120M_FREQ_HZ, param));
80002cc8:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ccc:	e0 6b 0e 00 	mov	r11,3584
80002cd0:	ea 1b 07 27 	orh	r11,0x727
80002cd4:	30 3c       	mov	r12,3
80002cd6:	f0 1f 00 05 	mcall	80002ce8 <pcl_configure_clocks_rc120m+0x30>
80002cda:	18 98       	mov	r8,r12
}
80002cdc:	10 9c       	mov	r12,r8
80002cde:	2f fd       	sub	sp,-4
80002ce0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ce4:	80 00       	ld.sh	r0,r0[0x0]
80002ce6:	33 dc       	mov	r12,61
80002ce8:	80 00       	ld.sh	r0,r0[0x0]
80002cea:	2e 00       	sub	r0,-32

80002cec <pcl_configure_clocks_osc0>:


long int pcl_configure_clocks_osc0(pcl_freq_param_t *param)
{
80002cec:	eb cd 40 80 	pushm	r7,lr
80002cf0:	1a 97       	mov	r7,sp
80002cf2:	20 2d       	sub	sp,8
80002cf4:	ef 4c ff f8 	st.w	r7[-8],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->osc0_f;
80002cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfc:	70 58       	ld.w	r8,r8[0x14]
80002cfe:	ef 48 ff fc 	st.w	r7[-4],r8
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  // Configure OSC0 in crystal mode, external crystal with a fcrystal Hz frequency.
  scif_configure_osc_crystalmode(SCIF_OSC0, main_clock_freq);
80002d02:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d06:	30 0c       	mov	r12,0
80002d08:	f0 1f 00 0b 	mcall	80002d34 <pcl_configure_clocks_osc0+0x48>
  // Enable the OSC0
  scif_enable_osc(SCIF_OSC0, param->osc0_startup, true);
80002d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d10:	70 68       	ld.w	r8,r8[0x18]
80002d12:	30 1a       	mov	r10,1
80002d14:	10 9b       	mov	r11,r8
80002d16:	30 0c       	mov	r12,0
80002d18:	f0 1f 00 08 	mcall	80002d38 <pcl_configure_clocks_osc0+0x4c>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_OSC0, main_clock_freq, param));
80002d1c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d20:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d24:	30 1c       	mov	r12,1
80002d26:	f0 1f 00 06 	mcall	80002d3c <pcl_configure_clocks_osc0+0x50>
80002d2a:	18 98       	mov	r8,r12
}
80002d2c:	10 9c       	mov	r12,r8
80002d2e:	2f ed       	sub	sp,-8
80002d30:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	2e 7c       	sub	r12,-25
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	2f 2c       	sub	r12,-14
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	2e 00       	sub	r0,-32

80002d40 <pcl_configure_clocks_dfll0>:


long int pcl_configure_clocks_dfll0(pcl_freq_param_t *param)
{
80002d40:	eb cd 40 80 	pushm	r7,lr
80002d44:	1a 97       	mov	r7,sp
80002d46:	20 3d       	sub	sp,12
80002d48:	ef 4c ff f4 	st.w	r7[-12],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  main_clock_freq = param->dfll_f;
80002d4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d50:	70 78       	ld.w	r8,r8[0x1c]
80002d52:	ef 48 ff f8 	st.w	r7[-8],r8
  // Verify that the target frequencies are reachable.
  if((param->cpu_f > main_clock_freq) || (param->pba_f > main_clock_freq)
    || (param->pbb_f > main_clock_freq))
    return(-1);
#endif
  pgc_dfllif_ref_opt = (scif_gclk_opt_t *)param->pextra_params;
80002d56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d5a:	70 88       	ld.w	r8,r8[0x20]
80002d5c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Implementation note: this implementation configures the DFLL in closed-loop
  // mode (because it gives the best accuracy) which enables the generic clock CLK_DFLLIF_REF
  // as a reference (RCSYS being used as the generic clock source, undivided).
  scif_dfll0_closedloop_configure_and_start(pgc_dfllif_ref_opt, main_clock_freq, true);
80002d60:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d64:	30 0b       	mov	r11,0
80002d66:	30 19       	mov	r9,1
80002d68:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d6c:	f0 1f 00 07 	mcall	80002d88 <pcl_configure_clocks_dfll0+0x48>

  return(pcl_configure_synchronous_clocks(PM_CLK_SRC_DFLL0, main_clock_freq, param));
80002d70:	ee fa ff f4 	ld.w	r10,r7[-12]
80002d74:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d78:	30 2c       	mov	r12,2
80002d7a:	f0 1f 00 05 	mcall	80002d8c <pcl_configure_clocks_dfll0+0x4c>
80002d7e:	18 98       	mov	r8,r12
}
80002d80:	10 9c       	mov	r12,r8
80002d82:	2f dd       	sub	sp,-12
80002d84:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	31 a8       	mov	r8,26
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2e 00       	sub	r0,-32

80002d90 <pcl_configure_clocks_uc3l>:


static long int pcl_configure_clocks_uc3l(pcl_freq_param_t *param)
{
80002d90:	eb cd 40 80 	pushm	r7,lr
80002d94:	1a 97       	mov	r7,sp
80002d96:	20 1d       	sub	sp,4
80002d98:	ef 4c ff fc 	st.w	r7[-4],r12
  // Verify that fCPU >= fPBx
  if((param->cpu_f < param->pba_f) || (param->cpu_f < param->pbb_f))
    return(-1);
#endif

  if(PCL_MC_RCSYS == param->main_clk_src)
80002d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002da0:	70 08       	ld.w	r8,r8[0x0]
80002da2:	58 08       	cp.w	r8,0
80002da4:	c0 71       	brne	80002db2 <pcl_configure_clocks_uc3l+0x22>
  {
    return(pcl_configure_clocks_rcsys(param));
80002da6:	ee fc ff fc 	ld.w	r12,r7[-4]
80002daa:	f0 1f 00 12 	mcall	80002df0 <pcl_configure_clocks_uc3l+0x60>
80002dae:	18 98       	mov	r8,r12
80002db0:	c1 c8       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_RC120M == param->main_clk_src)
80002db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002db6:	70 08       	ld.w	r8,r8[0x0]
80002db8:	58 98       	cp.w	r8,9
80002dba:	c0 71       	brne	80002dc8 <pcl_configure_clocks_uc3l+0x38>
  {
    return(pcl_configure_clocks_rc120m(param));
80002dbc:	ee fc ff fc 	ld.w	r12,r7[-4]
80002dc0:	f0 1f 00 0d 	mcall	80002df4 <pcl_configure_clocks_uc3l+0x64>
80002dc4:	18 98       	mov	r8,r12
80002dc6:	c1 18       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else if(PCL_MC_OSC0 == param->main_clk_src)
80002dc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002dcc:	70 08       	ld.w	r8,r8[0x0]
80002dce:	58 18       	cp.w	r8,1
80002dd0:	c0 71       	brne	80002dde <pcl_configure_clocks_uc3l+0x4e>
  {
    return(pcl_configure_clocks_osc0(param));
80002dd2:	ee fc ff fc 	ld.w	r12,r7[-4]
80002dd6:	f0 1f 00 09 	mcall	80002df8 <pcl_configure_clocks_uc3l+0x68>
80002dda:	18 98       	mov	r8,r12
80002ddc:	c0 68       	rjmp	80002de8 <pcl_configure_clocks_uc3l+0x58>
  }
  else // PCL_MC_DFLL0 == param->main_clk_src
  {
    return(pcl_configure_clocks_dfll0(param));
80002dde:	ee fc ff fc 	ld.w	r12,r7[-4]
80002de2:	f0 1f 00 07 	mcall	80002dfc <pcl_configure_clocks_uc3l+0x6c>
80002de6:	18 98       	mov	r8,r12
  }
}
80002de8:	10 9c       	mov	r12,r8
80002dea:	2f fd       	sub	sp,-4
80002dec:	e3 cd 80 80 	ldm	sp++,r7,pc
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	2c 90       	sub	r0,-55
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	2c b8       	sub	r8,-53
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	2c ec       	sub	r12,-50
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	2d 40       	sub	r0,-44

80002e00 <pcl_configure_synchronous_clocks>:

static long int pcl_configure_synchronous_clocks(pm_clk_src_t main_clk_src, unsigned long main_clock_freq_hz, pcl_freq_param_t *param)
{
80002e00:	eb cd 40 80 	pushm	r7,lr
80002e04:	1a 97       	mov	r7,sp
80002e06:	20 3d       	sub	sp,12
80002e08:	ef 4c ff fc 	st.w	r7[-4],r12
80002e0c:	ef 4b ff f8 	st.w	r7[-8],r11
80002e10:	ef 4a ff f4 	st.w	r7[-12],r10
  //#
  //# Set the Synchronous clock division ratio for each clock domain
  //#
  pm_set_all_cksel(main_clock_freq_hz, param->cpu_f, param->pba_f, param->pbb_f);
80002e14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e18:	70 39       	ld.w	r9,r8[0xc]
80002e1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e1e:	70 2a       	ld.w	r10,r8[0x8]
80002e20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e24:	70 18       	ld.w	r8,r8[0x4]
80002e26:	10 9b       	mov	r11,r8
80002e28:	ee fc ff f8 	ld.w	r12,r7[-8]
80002e2c:	f0 1f 00 09 	mcall	80002e50 <pcl_configure_synchronous_clocks+0x50>

  //#
  //# Set the Flash wait state and the speed read mode (depending on the target CPU frequency).
  //#
#if UC3L
    flashcdw_set_flash_waitstate_and_readmode(param->cpu_f);
80002e30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e34:	70 18       	ld.w	r8,r8[0x4]
80002e36:	10 9c       	mov	r12,r8
80002e38:	f0 1f 00 07 	mcall	80002e54 <pcl_configure_synchronous_clocks+0x54>


  //#
  //# Switch the main clock source to the selected clock.
  //#
  pm_set_mclk_source(main_clk_src);
80002e3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002e40:	f0 1f 00 06 	mcall	80002e58 <pcl_configure_synchronous_clocks+0x58>

  return PASS;
80002e44:	30 08       	mov	r8,0
}
80002e46:	10 9c       	mov	r12,r8
80002e48:	2f dd       	sub	sp,-12
80002e4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e4e:	00 00       	add	r0,r0
80002e50:	80 00       	ld.sh	r0,r0[0x0]
80002e52:	2b 7c       	sub	r12,-73
80002e54:	80 00       	ld.sh	r0,r0[0x0]
80002e56:	20 4c       	sub	r12,4
80002e58:	80 00       	ld.sh	r0,r0[0x0]
80002e5a:	29 f8       	sub	r8,-97

80002e5c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002e5c:	eb cd 40 80 	pushm	r7,lr
80002e60:	1a 97       	mov	r7,sp
80002e62:	20 1d       	sub	sp,4
80002e64:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80002e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e6c:	e6 18 00 01 	andh	r8,0x1,COH
80002e70:	5f 08       	sreq	r8
80002e72:	5c 58       	castu.b	r8
}
80002e74:	10 9c       	mov	r12,r8
80002e76:	2f fd       	sub	sp,-4
80002e78:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e7c <scif_configure_osc_crystalmode>:
  return PASS;
}


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80002e7c:	eb cd 40 80 	pushm	r7,lr
80002e80:	1a 97       	mov	r7,sp
80002e82:	20 4d       	sub	sp,16
80002e84:	ef 4c ff f4 	st.w	r7[-12],r12
80002e88:	ef 4b ff f0 	st.w	r7[-16],r11
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80002e8c:	fe 78 18 00 	mov	r8,-59392
80002e90:	70 78       	ld.w	r8,r8[0x1c]
80002e92:	30 09       	mov	r9,0
80002e94:	ef 49 ff f8 	st.w	r7[-8],r9
80002e98:	ef 48 ff f8 	st.w	r7[-8],r8

  // Configure the oscillator mode to crystal and set the gain according to the
  // crystal frequency. Gain G3 (for power optimization) is unused and if 
  // required will need to be set manually.
  u_avr32_scif_oscctrl0.OSCCTRL0.mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80002e9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ea0:	30 19       	mov	r9,1
80002ea2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002ea6:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.gain = (fcrystal < 12000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80002eaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002eae:	e0 69 1a ff 	mov	r9,6911
80002eb2:	ea 19 00 b7 	orh	r9,0xb7
80002eb6:	12 38       	cp.w	r8,r9
80002eb8:	e0 88 00 10 	brls	80002ed8 <scif_configure_osc_crystalmode+0x5c>
80002ebc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ec0:	e0 69 23 ff 	mov	r9,9215
80002ec4:	ea 19 00 f4 	orh	r9,0xf4
80002ec8:	12 38       	cp.w	r8,r9
80002eca:	e0 8b 00 04 	brhi	80002ed2 <scif_configure_osc_crystalmode+0x56>
80002ece:	30 18       	mov	r8,1
80002ed0:	c0 28       	rjmp	80002ed4 <scif_configure_osc_crystalmode+0x58>
80002ed2:	30 28       	mov	r8,2
80002ed4:	10 99       	mov	r9,r8
80002ed6:	c0 28       	rjmp	80002eda <scif_configure_osc_crystalmode+0x5e>
80002ed8:	30 09       	mov	r9,0
80002eda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ede:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80002ee2:	ef 48 ff f8 	st.w	r7[-8],r8
                                        (fcrystal < 16000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                        AVR32_SCIF_OSCCTRL0_GAIN_G2;
  AVR32_ENTER_CRITICAL_REGION( );
80002ee6:	e1 b8 00 00 	mfsr	r8,0x0
80002eea:	10 9c       	mov	r12,r8
80002eec:	f0 1f 00 0f 	mcall	80002f28 <scif_configure_osc_crystalmode+0xac>
80002ef0:	18 98       	mov	r8,r12
80002ef2:	ef 68 ff ff 	st.b	r7[-1],r8
80002ef6:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80002ef8:	fe 78 18 00 	mov	r8,-59392
80002efc:	31 c9       	mov	r9,28
80002efe:	ea 19 aa 00 	orh	r9,0xaa00
80002f02:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80002f04:	fe 78 18 00 	mov	r8,-59392
80002f08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002f0c:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002f0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002f12:	30 08       	mov	r8,0
80002f14:	f0 09 18 00 	cp.b	r9,r8
80002f18:	c0 20       	breq	80002f1c <scif_configure_osc_crystalmode+0xa0>
80002f1a:	d5 03       	csrf	0x10
  // Add here after support for OSC1 for devices that implement OSC1.

  return PASS;
80002f1c:	30 08       	mov	r8,0
}
80002f1e:	10 9c       	mov	r12,r8
80002f20:	2f cd       	sub	sp,-16
80002f22:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f26:	00 00       	add	r0,r0
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2e 5c       	sub	r12,-27

80002f2c <scif_enable_osc>:

  return PASS;
}

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80002f2c:	eb cd 40 80 	pushm	r7,lr
80002f30:	1a 97       	mov	r7,sp
80002f32:	20 5d       	sub	sp,20
80002f34:	ef 4c ff f4 	st.w	r7[-12],r12
80002f38:	ef 4b ff f0 	st.w	r7[-16],r11
80002f3c:	14 98       	mov	r8,r10
80002f3e:	ef 68 ff ec 	st.b	r7[-20],r8
//# Implementation note: this code doesn't consider the osc input parameter
//# because UC3L devices only implement OSC0.
  u_avr32_scif_oscctrl0_t   u_avr32_scif_oscctrl0 = {AVR32_SCIF.oscctrl0};
80002f42:	fe 78 18 00 	mov	r8,-59392
80002f46:	70 78       	ld.w	r8,r8[0x1c]
80002f48:	30 09       	mov	r9,0
80002f4a:	ef 49 ff f8 	st.w	r7[-8],r9
80002f4e:	ef 48 ff f8 	st.w	r7[-8],r8


  // Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl0.OSCCTRL0.startup = startup;
80002f52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f56:	5c 58       	castu.b	r8
80002f58:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002f5c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002f60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f64:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80002f68:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl0.OSCCTRL0.oscen = ENABLE;
80002f6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f70:	30 19       	mov	r9,1
80002f72:	f1 d9 d2 01 	bfins	r8,r9,0x10,0x1
80002f76:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80002f7a:	e1 b8 00 00 	mfsr	r8,0x0
80002f7e:	10 9c       	mov	r12,r8
80002f80:	f0 1f 00 16 	mcall	80002fd8 <scif_enable_osc+0xac>
80002f84:	18 98       	mov	r8,r12
80002f86:	ef 68 ff ff 	st.b	r7[-1],r8
80002f8a:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL0);
80002f8c:	fe 78 18 00 	mov	r8,-59392
80002f90:	31 c9       	mov	r9,28
80002f92:	ea 19 aa 00 	orh	r9,0xaa00
80002f96:	91 69       	st.w	r8[0x18],r9
  // Write
  AVR32_SCIF.oscctrl0 = u_avr32_scif_oscctrl0.oscctrl0;
80002f98:	fe 78 18 00 	mov	r8,-59392
80002f9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002fa0:	91 79       	st.w	r8[0x1c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80002fa2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002fa6:	30 08       	mov	r8,0
80002fa8:	f0 09 18 00 	cp.b	r9,r8
80002fac:	c0 20       	breq	80002fb0 <scif_enable_osc+0x84>
80002fae:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80002fb0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80002fb4:	30 08       	mov	r8,0
80002fb6:	f0 09 18 00 	cp.b	r9,r8
80002fba:	c0 90       	breq	80002fcc <scif_enable_osc+0xa0>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80002fbc:	30 2c       	mov	r12,2
80002fbe:	f0 1f 00 08 	mcall	80002fdc <scif_enable_osc+0xb0>
80002fc2:	18 98       	mov	r8,r12
80002fc4:	58 08       	cp.w	r8,0
80002fc6:	c0 30       	breq	80002fcc <scif_enable_osc+0xa0>
      return -1;
80002fc8:	3f f8       	mov	r8,-1
80002fca:	c0 28       	rjmp	80002fce <scif_enable_osc+0xa2>
  }

  return PASS;
80002fcc:	30 08       	mov	r8,0
}
80002fce:	10 9c       	mov	r12,r8
80002fd0:	2f bd       	sub	sp,-20
80002fd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fd6:	00 00       	add	r0,r0
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	2e 5c       	sub	r12,-27
80002fdc:	80 00       	ld.sh	r0,r0[0x0]
80002fde:	34 ec       	mov	r12,78

80002fe0 <scif_dfll0_closedloop_start>:
  return PASS;
}


long int scif_dfll0_closedloop_start(const scif_dfll_closedloop_conf_t *pdfllconfig)
{
80002fe0:	eb cd 40 80 	pushm	r7,lr
80002fe4:	1a 97       	mov	r7,sp
80002fe6:	20 4d       	sub	sp,16
80002fe8:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_dfll0conf_t  u_avr32_scif_dfll0conf = {AVR32_SCIF.dfll0conf};
80002fec:	fe 78 18 00 	mov	r8,-59392
80002ff0:	70 98       	ld.w	r8,r8[0x24]
80002ff2:	30 09       	mov	r9,0
80002ff4:	ef 49 ff f8 	st.w	r7[-8],r9
80002ff8:	ef 48 ff f8 	st.w	r7[-8],r8
   || (pdfllconfig->coarsemaxstep >> AVR32_SCIF_DFLL0STEP_CSTEP_SIZE) )
    return -1;
#endif

  // Enable the DFLL0: DFLL0CONF.EN=1
  u_avr32_scif_dfll0conf.DFLL0CONF.en = ENABLE;
80002ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003000:	30 19       	mov	r9,1
80003002:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003006:	ef 48 ff f8 	st.w	r7[-8],r8
#if (UC3L0128 || UC3L0256 || UC3L3_L4)
  u_avr32_scif_dfll0conf.DFLL0CONF.ccen = ENABLE;
8000300a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000300e:	30 19       	mov	r9,1
80003010:	f1 d9 d0 a1 	bfins	r8,r9,0x5,0x1
80003014:	ef 48 ff f8 	st.w	r7[-8],r8
#endif
  AVR32_ENTER_CRITICAL_REGION( );
80003018:	e1 b8 00 00 	mfsr	r8,0x0
8000301c:	10 9c       	mov	r12,r8
8000301e:	f0 1f 00 61 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
80003022:	18 98       	mov	r8,r12
80003024:	ef 68 ff fc 	st.b	r7[-4],r8
80003028:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
8000302a:	fe 78 18 00 	mov	r8,-59392
8000302e:	32 49       	mov	r9,36
80003030:	ea 19 aa 00 	orh	r9,0xaa00
80003034:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80003036:	fe 78 18 00 	mov	r8,-59392
8000303a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000303e:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003040:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80003044:	30 08       	mov	r8,0
80003046:	f0 09 18 00 	cp.b	r9,r8
8000304a:	c0 20       	breq	8000304e <scif_dfll0_closedloop_start+0x6e>
8000304c:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000304e:	e0 6c 40 00 	mov	r12,16384
80003052:	f0 1f 00 55 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
80003056:	18 98       	mov	r8,r12
80003058:	58 08       	cp.w	r8,0
8000305a:	c0 30       	breq	80003060 <scif_dfll0_closedloop_start+0x80>
    return -1;
8000305c:	3f f8       	mov	r8,-1
8000305e:	c9 c8       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80003060:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003064:	70 48       	ld.w	r8,r8[0x10]
80003066:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
8000306a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000306e:	70 38       	ld.w	r8,r8[0xc]
80003070:	b1 68       	lsl	r8,0x10
80003072:	e6 18 01 ff 	andh	r8,0x1ff,COH
  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
    return -1;

  // Set the maxstep values
  tempo = ((pdfllconfig->coarsemaxstep << AVR32_SCIF_DFLL0STEP_CSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_CSTEP_MASK)
80003076:	f3 e8 10 08 	or	r8,r9,r8
8000307a:	ef 48 ff f4 	st.w	r7[-12],r8
          | ((pdfllconfig->finemaxstep << AVR32_SCIF_DFLL0STEP_FSTEP_OFFSET)&AVR32_SCIF_DFLL0STEP_FSTEP_MASK);
  AVR32_ENTER_CRITICAL_REGION( );
8000307e:	e1 b8 00 00 	mfsr	r8,0x0
80003082:	10 9c       	mov	r12,r8
80003084:	f0 1f 00 47 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
80003088:	18 98       	mov	r8,r12
8000308a:	ef 68 ff fd 	st.b	r7[-3],r8
8000308e:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0STEP);
80003090:	fe 78 18 00 	mov	r8,-59392
80003094:	32 c9       	mov	r9,44
80003096:	ea 19 aa 00 	orh	r9,0xaa00
8000309a:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0step = tempo;
8000309c:	fe 78 18 00 	mov	r8,-59392
800030a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800030a4:	91 b9       	st.w	r8[0x2c],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800030a6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800030aa:	30 08       	mov	r8,0
800030ac:	f0 09 18 00 	cp.b	r9,r8
800030b0:	c0 20       	breq	800030b4 <scif_dfll0_closedloop_start+0xd4>
800030b2:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
800030b4:	e0 6c 40 00 	mov	r12,16384
800030b8:	f0 1f 00 3b 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
800030bc:	18 98       	mov	r8,r12
800030be:	58 08       	cp.w	r8,0
800030c0:	c0 30       	breq	800030c6 <scif_dfll0_closedloop_start+0xe6>
    return -1;
800030c2:	3f f8       	mov	r8,-1
800030c4:	c6 98       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Set the fmul
  AVR32_ENTER_CRITICAL_REGION( );
800030c6:	e1 b8 00 00 	mfsr	r8,0x0
800030ca:	10 9c       	mov	r12,r8
800030cc:	f0 1f 00 35 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
800030d0:	18 98       	mov	r8,r12
800030d2:	ef 68 ff fe 	st.b	r7[-2],r8
800030d6:	d3 03       	ssrf	0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
800030d8:	fe 78 18 00 	mov	r8,-59392
800030dc:	32 89       	mov	r9,40
800030de:	ea 19 aa 00 	orh	r9,0xaa00
800030e2:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
800030e4:	fe 78 18 00 	mov	r8,-59392
800030e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800030ec:	72 19       	ld.w	r9,r9[0x4]
800030ee:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
800030f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800030f6:	72 29       	ld.w	r9,r9[0x8]
800030f8:	b1 69       	lsl	r9,0x10
#if AVR32_SCIF_H_VERSION < 110
  SCIF_UNLOCK(AVR32_SCIF_DFLL0FMUL);
  AVR32_SCIF.dfll0fmul = (pdfllconfig->imul << AVR32_SCIF_DFLL0FMUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0FMUL_FMUL_MASK;
#else
  SCIF_UNLOCK(AVR32_SCIF_DFLL0MUL);
  AVR32_SCIF.dfll0mul = ((pdfllconfig->fmul << AVR32_SCIF_DFLL0MUL_FMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_FMUL_MASK)
800030fa:	f5 e9 10 09 	or	r9,r10,r9
800030fe:	91 a9       	st.w	r8[0x28],r9
    | ((pdfllconfig->imul << AVR32_SCIF_DFLL0MUL_IMUL_OFFSET)&AVR32_SCIF_DFLL0MUL_IMUL_MASK);
#endif
  AVR32_LEAVE_CRITICAL_REGION( );
80003100:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80003104:	30 08       	mov	r8,0
80003106:	f0 09 18 00 	cp.b	r9,r8
8000310a:	c0 20       	breq	8000310e <scif_dfll0_closedloop_start+0x12e>
8000310c:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
8000310e:	e0 6c 40 00 	mov	r12,16384
80003112:	f0 1f 00 25 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
80003116:	18 98       	mov	r8,r12
80003118:	58 08       	cp.w	r8,0
8000311a:	c0 30       	breq	80003120 <scif_dfll0_closedloop_start+0x140>
    return -1;
8000311c:	3f f8       	mov	r8,-1
8000311e:	c3 c8       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Set the DFLL0 to operate in closed-loop mode: DFLL0CONF.MODE=1
  u_avr32_scif_dfll0conf.DFLL0CONF.mode = SCIF_DFLL0_MODE_CLOSEDLOOP;
80003120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003124:	30 19       	mov	r9,1
80003126:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000312a:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_dfll0conf.DFLL0CONF.coarse = pdfllconfig->coarse;
8000312e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003132:	70 08       	ld.w	r8,r8[0x0]
80003134:	5c 58       	castu.b	r8
80003136:	ef 68 ff f8 	st.b	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8000313a:	e1 b8 00 00 	mfsr	r8,0x0
8000313e:	10 9c       	mov	r12,r8
80003140:	f0 1f 00 18 	mcall	800031a0 <scif_dfll0_closedloop_start+0x1c0>
80003144:	18 98       	mov	r8,r12
80003146:	ef 68 ff ff 	st.b	r7[-1],r8
8000314a:	d3 03       	ssrf	0x10
  SCIF_UNLOCK(AVR32_SCIF_DFLL0CONF);
8000314c:	fe 78 18 00 	mov	r8,-59392
80003150:	32 49       	mov	r9,36
80003152:	ea 19 aa 00 	orh	r9,0xaa00
80003156:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.dfll0conf = u_avr32_scif_dfll0conf.dfll0conf;
80003158:	fe 78 18 00 	mov	r8,-59392
8000315c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003160:	91 99       	st.w	r8[0x24],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003162:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003166:	30 08       	mov	r8,0
80003168:	f0 09 18 00 	cp.b	r9,r8
8000316c:	c0 20       	breq	80003170 <scif_dfll0_closedloop_start+0x190>
8000316e:	d5 03       	csrf	0x10

  // Wait for PCLKSR.DFLL0RDY is high
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0RDY_MASK))
80003170:	e0 6c 40 00 	mov	r12,16384
80003174:	f0 1f 00 0c 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
80003178:	18 98       	mov	r8,r12
8000317a:	58 08       	cp.w	r8,0
8000317c:	c0 30       	breq	80003182 <scif_dfll0_closedloop_start+0x1a2>
    return -1;
8000317e:	3f f8       	mov	r8,-1
80003180:	c0 b8       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  // Wait until the DFLL is locked on Fine value, and is ready to be selected as
  // clock source with a highly accurate output clock.
  if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_DFLL0LOCKF_MASK))
80003182:	e0 6c 02 00 	mov	r12,512
80003186:	f0 1f 00 08 	mcall	800031a4 <scif_dfll0_closedloop_start+0x1c4>
8000318a:	18 98       	mov	r8,r12
8000318c:	58 08       	cp.w	r8,0
8000318e:	c0 30       	breq	80003194 <scif_dfll0_closedloop_start+0x1b4>
    return -1;
80003190:	3f f8       	mov	r8,-1
80003192:	c0 28       	rjmp	80003196 <scif_dfll0_closedloop_start+0x1b6>

  return PASS;
80003194:	30 08       	mov	r8,0
}
80003196:	10 9c       	mov	r12,r8
80003198:	2f cd       	sub	sp,-16
8000319a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000319e:	00 00       	add	r0,r0
800031a0:	80 00       	ld.sh	r0,r0[0x0]
800031a2:	2e 5c       	sub	r12,-27
800031a4:	80 00       	ld.sh	r0,r0[0x0]
800031a6:	34 ec       	mov	r12,78

800031a8 <scif_dfll0_closedloop_configure_and_start>:


long int scif_dfll0_closedloop_configure_and_start( const scif_gclk_opt_t *gc_dfllif_ref_opt,
                                                    unsigned long long target_freq_hz,
                                                    bool enable_ssg)
{
800031a8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800031ac:	1a 97       	mov	r7,sp
800031ae:	21 6d       	sub	sp,88
800031b0:	ef 4c ff e4 	st.w	r7[-28],r12
800031b4:	ee eb ff dc 	st.d	r7[-36],r10
800031b8:	12 98       	mov	r8,r9
800031ba:	ef 68 ff d8 	st.b	r7[-40],r8
  int gc_source_clock_freq_hz;

  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
800031be:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031c2:	70 08       	ld.w	r8,r8[0x0]
800031c4:	58 08       	cp.w	r8,0
800031c6:	c0 61       	brne	800031d2 <scif_dfll0_closedloop_configure_and_start+0x2a>
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
800031c8:	e0 78 c2 00 	mov	r8,115200
800031cc:	ef 48 ff fc 	st.w	r7[-4],r8
800031d0:	c3 38       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
800031d2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031d6:	70 08       	ld.w	r8,r8[0x0]
800031d8:	58 18       	cp.w	r8,1
800031da:	c0 60       	breq	800031e6 <scif_dfll0_closedloop_configure_and_start+0x3e>
800031dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031e0:	70 08       	ld.w	r8,r8[0x0]
800031e2:	58 98       	cp.w	r8,9
800031e4:	c0 61       	brne	800031f0 <scif_dfll0_closedloop_configure_and_start+0x48>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
800031e6:	e0 68 80 00 	mov	r8,32768
800031ea:	ef 48 ff fc 	st.w	r7[-4],r8
  // This function only supports the following source clocks for the CLK_DFLLIF_REF generic clock:
  // SCIF_GCCTRL_SLOWCLOCK (aka RCSYS), SCIF_GCCTRL_OSC32K, SCIF_GCCTRL_RC32K,
  // SCIF_GCCTRL_OSC0, SCIF_GCCTRL_RC120M, SCIF_GCCTRL_CLK1K.
  if(SCIF_GCCTRL_SLOWCLOCK == gc_dfllif_ref_opt->clock_source)
    gc_source_clock_freq_hz = SCIF_SLOWCLOCK_FREQ_HZ;
  else if((SCIF_GCCTRL_OSC32K == gc_dfllif_ref_opt->clock_source) || (SCIF_GCCTRL_RC32K == gc_dfllif_ref_opt->clock_source))
800031ee:	c2 48       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
    gc_source_clock_freq_hz = SCIF_RC32K_FREQ_HZ;
  else if(SCIF_GCCTRL_OSC0 == gc_dfllif_ref_opt->clock_source)
800031f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031f4:	70 08       	ld.w	r8,r8[0x0]
800031f6:	58 38       	cp.w	r8,3
800031f8:	c0 71       	brne	80003206 <scif_dfll0_closedloop_configure_and_start+0x5e>
    gc_source_clock_freq_hz = gc_dfllif_ref_opt->extosc_f;
800031fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031fe:	70 38       	ld.w	r8,r8[0xc]
80003200:	ef 48 ff fc 	st.w	r7[-4],r8
80003204:	c1 98       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_RC120M == gc_dfllif_ref_opt->clock_source)
80003206:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000320a:	70 08       	ld.w	r8,r8[0x0]
8000320c:	58 48       	cp.w	r8,4
8000320e:	c0 81       	brne	8000321e <scif_dfll0_closedloop_configure_and_start+0x76>
    gc_source_clock_freq_hz = SCIF_RC120M_FREQ_HZ;
80003210:	e0 68 0e 00 	mov	r8,3584
80003214:	ea 18 07 27 	orh	r8,0x727
80003218:	ef 48 ff fc 	st.w	r7[-4],r8
8000321c:	c0 d8       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else if(SCIF_GCCTRL_CLK1K == gc_dfllif_ref_opt->clock_source)
8000321e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003222:	70 08       	ld.w	r8,r8[0x0]
80003224:	58 b8       	cp.w	r8,11
80003226:	c0 61       	brne	80003232 <scif_dfll0_closedloop_configure_and_start+0x8a>
    gc_source_clock_freq_hz = 1000;
80003228:	e0 68 03 e8 	mov	r8,1000
8000322c:	ef 48 ff fc 	st.w	r7[-4],r8
80003230:	c0 38       	rjmp	80003236 <scif_dfll0_closedloop_configure_and_start+0x8e>
  else
    return -1;
80003232:	3f f8       	mov	r8,-1
80003234:	cc 98       	rjmp	800033c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure and start the DFLL main reference generic clock (CLK_DFLLIF_REF).
  if(scif_dfll0_closedloop_mainref_gc_enable(gc_dfllif_ref_opt))
80003236:	ee fb ff e4 	ld.w	r11,r7[-28]
8000323a:	30 0c       	mov	r12,0
8000323c:	f0 1f 00 65 	mcall	800033d0 <scif_dfll0_closedloop_configure_and_start+0x228>
80003240:	18 98       	mov	r8,r12
80003242:	58 08       	cp.w	r8,0
80003244:	c0 30       	breq	8000324a <scif_dfll0_closedloop_configure_and_start+0xa2>
    return(-1);
80003246:	3f f8       	mov	r8,-1
80003248:	cb f8       	rjmp	800033c6 <scif_dfll0_closedloop_configure_and_start+0x21e>

  // Configure the DFLL.
  // The coarse value (= (dfll_f - SCIF_DFLL_MINFREQ_KHZ)*255/(SCIF_DFLL_MAXFREQ_KHZ - SCIF_DFLL_MINFREQ_KHZ))
  DfllConfig.coarse = ((unsigned long long)(target_freq_hz - SCIF_DFLL_MINFREQ_HZ)*255)/(SCIF_DFLL_MAXFREQ_HZ - SCIF_DFLL_MINFREQ_HZ);
8000324a:	ee ea ff dc 	ld.d	r10,r7[-36]
8000324e:	14 98       	mov	r8,r10
80003250:	16 99       	mov	r9,r11
80003252:	f0 0c 16 18 	lsr	r12,r8,0x18
80003256:	f2 03 15 08 	lsl	r3,r9,0x8
8000325a:	f9 e3 10 03 	or	r3,r12,r3
8000325e:	f0 02 15 08 	lsl	r2,r8,0x8
80003262:	e4 0a 01 0a 	sub	r10,r2,r10
80003266:	e6 0b 01 4b 	sbc	r11,r3,r11
8000326a:	e0 68 5a 00 	mov	r8,23040
8000326e:	ea 18 a0 08 	orh	r8,0xa008
80003272:	3f d9       	mov	r9,-3
80003274:	10 0a       	add	r10,r8
80003276:	f6 09 00 4b 	adc	r11,r11,r9
8000327a:	e0 68 77 80 	mov	r8,30592
8000327e:	ea 18 06 8e 	orh	r8,0x68e
80003282:	30 09       	mov	r9,0
80003284:	f0 1f 00 54 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80003288:	14 98       	mov	r8,r10
8000328a:	16 99       	mov	r9,r11
8000328c:	ef 48 ff e8 	st.w	r7[-24],r8

  // imul = (fDFLL)/fref,
  // fmul = (fDFLL*2^16)/fref - imul*2^16,
  // with fref being the frequency of the DFLL main reference generic clock
  // and fDFLL being the target frequency of the DFLL
  DfllConfig.imul = ((unsigned long long)target_freq_hz)/gc_source_clock_freq_hz;
80003290:	ee fa ff fc 	ld.w	r10,r7[-4]
80003294:	ef 4a ff ac 	st.w	r7[-84],r10
80003298:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000329c:	bf 58       	asr	r8,0x1f
8000329e:	ef 48 ff a8 	st.w	r7[-88],r8
800032a2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800032a6:	ee ea ff dc 	ld.d	r10,r7[-36]
800032aa:	f0 1f 00 4b 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
800032ae:	14 98       	mov	r8,r10
800032b0:	16 99       	mov	r9,r11
800032b2:	ef 48 ff f0 	st.w	r7[-16],r8
  if(0 == gc_dfllif_ref_opt->diven)
800032b6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800032ba:	70 28       	ld.w	r8,r8[0x8]
800032bc:	58 08       	cp.w	r8,0
800032be:	c2 e1       	brne	8000331a <scif_dfll0_closedloop_configure_and_start+0x172>
  {
    DfllConfig.fmul = ((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16);
800032c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800032c4:	b1 88       	lsr	r8,0x10
800032c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800032ca:	b1 69       	lsl	r9,0x10
800032cc:	ef 49 ff b0 	st.w	r7[-80],r9
800032d0:	ee f9 ff b0 	ld.w	r9,r7[-80]
800032d4:	f1 e9 10 09 	or	r9,r8,r9
800032d8:	ef 49 ff b0 	st.w	r7[-80],r9
800032dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800032e0:	b1 68       	lsl	r8,0x10
800032e2:	ef 48 ff b4 	st.w	r7[-76],r8
800032e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032ea:	ef 48 ff bc 	st.w	r7[-68],r8
800032ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f2:	bf 58       	asr	r8,0x1f
800032f4:	ef 48 ff b8 	st.w	r7[-72],r8
800032f8:	ee e8 ff b8 	ld.d	r8,r7[-72]
800032fc:	ee ea ff b0 	ld.d	r10,r7[-80]
80003300:	f0 1f 00 35 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
80003304:	14 98       	mov	r8,r10
80003306:	16 99       	mov	r9,r11
80003308:	10 99       	mov	r9,r8
8000330a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000330e:	b1 68       	lsl	r8,0x10
80003310:	f2 08 01 08 	sub	r8,r9,r8
80003314:	ef 48 ff ec 	st.w	r7[-20],r8
80003318:	c4 68       	rjmp	800033a4 <scif_dfll0_closedloop_configure_and_start+0x1fc>
  }
  else
    DfllConfig.fmul = ((((unsigned long long)target_freq_hz<<16)/gc_source_clock_freq_hz - ((unsigned long long)(DfllConfig.imul)<<16))<<1)*(1+gc_dfllif_ref_opt->divider);
8000331a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000331e:	b1 88       	lsr	r8,0x10
80003320:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003324:	b1 69       	lsl	r9,0x10
80003326:	ef 49 ff c0 	st.w	r7[-64],r9
8000332a:	ee fa ff c0 	ld.w	r10,r7[-64]
8000332e:	f1 ea 10 0a 	or	r10,r8,r10
80003332:	ef 4a ff c0 	st.w	r7[-64],r10
80003336:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000333a:	b1 68       	lsl	r8,0x10
8000333c:	ef 48 ff c4 	st.w	r7[-60],r8
80003340:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003344:	ef 49 ff cc 	st.w	r7[-52],r9
80003348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000334c:	bf 58       	asr	r8,0x1f
8000334e:	ef 48 ff c8 	st.w	r7[-56],r8
80003352:	ee e8 ff c8 	ld.d	r8,r7[-56]
80003356:	ee ea ff c0 	ld.d	r10,r7[-64]
8000335a:	f0 1f 00 1f 	mcall	800033d4 <scif_dfll0_closedloop_configure_and_start+0x22c>
8000335e:	14 98       	mov	r8,r10
80003360:	16 99       	mov	r9,r11
80003362:	ee fa ff f0 	ld.w	r10,r7[-16]
80003366:	ef 4a ff d4 	st.w	r7[-44],r10
8000336a:	30 0a       	mov	r10,0
8000336c:	ef 4a ff d0 	st.w	r7[-48],r10
80003370:	ee fa ff d4 	ld.w	r10,r7[-44]
80003374:	b1 8a       	lsr	r10,0x10
80003376:	ee f1 ff d0 	ld.w	r1,r7[-48]
8000337a:	b1 61       	lsl	r1,0x10
8000337c:	f5 e1 10 01 	or	r1,r10,r1
80003380:	ee f0 ff d4 	ld.w	r0,r7[-44]
80003384:	b1 60       	lsl	r0,0x10
80003386:	00 18       	sub	r8,r0
80003388:	f2 01 01 49 	sbc	r9,r9,r1
8000338c:	10 08       	add	r8,r8
8000338e:	f2 09 00 49 	adc	r9,r9,r9
80003392:	10 99       	mov	r9,r8
80003394:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003398:	70 18       	ld.w	r8,r8[0x4]
8000339a:	2f f8       	sub	r8,-1
8000339c:	f2 08 02 48 	mul	r8,r9,r8
800033a0:	ef 48 ff ec 	st.w	r7[-20],r8

  // The fine and coarse maxstep values
  DfllConfig.finemaxstep = 0x0000004;
800033a4:	30 48       	mov	r8,4
800033a6:	ef 48 ff f4 	st.w	r7[-12],r8
  DfllConfig.coarsemaxstep = 0x0000004;
800033aa:	30 48       	mov	r8,4
800033ac:	ef 48 ff f8 	st.w	r7[-8],r8

  // Dithering disabled.

  // Configure and start the DFLL0 in closed loop mode.
  if(scif_dfll0_closedloop_start(&DfllConfig))
800033b0:	ee c8 00 18 	sub	r8,r7,24
800033b4:	10 9c       	mov	r12,r8
800033b6:	f0 1f 00 09 	mcall	800033d8 <scif_dfll0_closedloop_configure_and_start+0x230>
800033ba:	18 98       	mov	r8,r12
800033bc:	58 08       	cp.w	r8,0
800033be:	c0 30       	breq	800033c4 <scif_dfll0_closedloop_configure_and_start+0x21c>
    return -1;
800033c0:	3f f8       	mov	r8,-1
800033c2:	c0 28       	rjmp	800033c6 <scif_dfll0_closedloop_configure_and_start+0x21e>
  // as a reference for the SSG feature.
  if(true == enable_ssg)
  {
  ;
  }
  return PASS;
800033c4:	30 08       	mov	r8,0
}
800033c6:	10 9c       	mov	r12,r8
800033c8:	2e ad       	sub	sp,-88
800033ca:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800033ce:	00 00       	add	r0,r0
800033d0:	80 00       	ld.sh	r0,r0[0x0]
800033d2:	34 80       	mov	r0,72
800033d4:	80 00       	ld.sh	r0,r0[0x0]
800033d6:	59 32       	cp.w	r2,19
800033d8:	80 00       	ld.sh	r0,r0[0x0]
800033da:	2f e0       	sub	r0,-2

800033dc <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
800033dc:	eb cd 40 80 	pushm	r7,lr
800033e0:	1a 97       	mov	r7,sp
800033e2:	20 1d       	sub	sp,4
  AVR32_ENTER_CRITICAL_REGION( );
800033e4:	e1 b8 00 00 	mfsr	r8,0x0
800033e8:	10 9c       	mov	r12,r8
800033ea:	f0 1f 00 0e 	mcall	80003420 <scif_start_rc120M+0x44>
800033ee:	18 98       	mov	r8,r12
800033f0:	ef 68 ff ff 	st.b	r7[-1],r8
800033f4:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
800033f6:	fe 78 18 00 	mov	r8,-59392
800033fa:	35 89       	mov	r9,88
800033fc:	ea 19 aa 00 	orh	r9,0xaa00
80003400:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
80003402:	fe 78 18 00 	mov	r8,-59392
80003406:	30 19       	mov	r9,1
80003408:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8000340c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003410:	30 08       	mov	r8,0
80003412:	f0 09 18 00 	cp.b	r9,r8
80003416:	c0 20       	breq	8000341a <scif_start_rc120M+0x3e>
80003418:	d5 03       	csrf	0x10
}
8000341a:	2f fd       	sub	sp,-4
8000341c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	2e 5c       	sub	r12,-27

80003424 <scif_disable_rc32out>:
  AVR32_SCIF.rc32kcr = temp;
  AVR32_LEAVE_CRITICAL_REGION( );
}

void scif_disable_rc32out(void)
{
80003424:	eb cd 40 80 	pushm	r7,lr
80003428:	1a 97       	mov	r7,sp
8000342a:	20 2d       	sub	sp,8
  unsigned long temp;
  AVR32_ENTER_CRITICAL_REGION( );
8000342c:	e1 b8 00 00 	mfsr	r8,0x0
80003430:	10 9c       	mov	r12,r8
80003432:	f0 1f 00 13 	mcall	8000347c <scif_disable_rc32out+0x58>
80003436:	18 98       	mov	r8,r12
80003438:	ef 68 ff ff 	st.b	r7[-1],r8
8000343c:	d3 03       	ssrf	0x10
  temp = AVR32_PM.ppcr & (~AVR32_PM_PPCR_FRC32_MASK);
8000343e:	fe 78 14 00 	mov	r8,-60416
80003442:	f0 f8 01 60 	ld.w	r8,r8[352]
80003446:	a1 d8       	cbr	r8,0x1
80003448:	ef 48 ff f8 	st.w	r7[-8],r8
  // Un-force the RC32 signal from being output on the dedicated pin (PA20).
  AVR32_PM.unlock = 0xAA000000 | AVR32_PM_PPCR;
8000344c:	fe 78 14 00 	mov	r8,-60416
80003450:	e0 69 01 60 	mov	r9,352
80003454:	ea 19 aa 00 	orh	r9,0xaa00
80003458:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_PM.ppcr = temp;
8000345c:	fe 78 14 00 	mov	r8,-60416
80003460:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003464:	f1 49 01 60 	st.w	r8[352],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80003468:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000346c:	30 08       	mov	r8,0
8000346e:	f0 09 18 00 	cp.b	r9,r8
80003472:	c0 20       	breq	80003476 <scif_disable_rc32out+0x52>
80003474:	d5 03       	csrf	0x10
}
80003476:	2f ed       	sub	sp,-8
80003478:	e3 cd 80 80 	ldm	sp++,r7,pc
8000347c:	80 00       	ld.sh	r0,r0[0x0]
8000347e:	2e 5c       	sub	r12,-27

80003480 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80003480:	eb cd 40 80 	pushm	r7,lr
80003484:	1a 97       	mov	r7,sp
80003486:	20 2d       	sub	sp,8
80003488:	ef 4c ff fc 	st.w	r7[-4],r12
8000348c:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80003490:	fe 78 18 00 	mov	r8,-59392
80003494:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003498:	2e 49       	sub	r9,-28
8000349a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000349e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034a2:	5c 58       	castu.b	r8
800034a4:	c0 30       	breq	800034aa <scif_start_gclk+0x2a>
    return -1;
800034a6:	3f f8       	mov	r8,-1
800034a8:	c1 e8       	rjmp	800034e4 <scif_start_gclk+0x64>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800034aa:	fe 78 18 00 	mov	r8,-59392
800034ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800034b2:	ee fa ff f8 	ld.w	r10,r7[-8]
800034b6:	74 1a       	ld.w	r10,r10[0x4]
800034b8:	f4 0b 15 10 	lsl	r11,r10,0x10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
800034bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800034c0:	74 2a       	ld.w	r10,r10[0x8]
800034c2:	a1 7a       	lsl	r10,0x1
800034c4:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800034c8:	14 4b       	or	r11,r10
800034ca:	ee fa ff f8 	ld.w	r10,r7[-8]
800034ce:	74 0a       	ld.w	r10,r10[0x0]
800034d0:	a9 6a       	lsl	r10,0x8
800034d2:	e2 1a 1f 00 	andl	r10,0x1f00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
800034d6:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800034da:	a1 aa       	sbr	r10,0x0
800034dc:	2e 49       	sub	r9,-28
800034de:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
800034e2:	30 08       	mov	r8,0
}
800034e4:	10 9c       	mov	r12,r8
800034e6:	2f ed       	sub	sp,-8
800034e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800034ec <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
800034ec:	eb cd 40 80 	pushm	r7,lr
800034f0:	1a 97       	mov	r7,sp
800034f2:	20 2d       	sub	sp,8
800034f4:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
800034f8:	e0 78 86 a0 	mov	r8,100000
800034fc:	ef 48 ff fc 	st.w	r7[-4],r8

  while(!(AVR32_SCIF.pclksr & statusMask))
80003500:	c0 c8       	rjmp	80003518 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
80003502:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003506:	20 18       	sub	r8,1
80003508:	ef 48 ff fc 	st.w	r7[-4],r8
8000350c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003510:	58 08       	cp.w	r8,0
80003512:	c0 31       	brne	80003518 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80003514:	3f f8       	mov	r8,-1
80003516:	c0 a8       	rjmp	8000352a <scif_pclksr_statushigh_wait+0x3e>
 */
long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;

  while(!(AVR32_SCIF.pclksr & statusMask))
80003518:	fe 78 18 00 	mov	r8,-59392
8000351c:	70 59       	ld.w	r9,r8[0x14]
8000351e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003522:	f3 e8 00 08 	and	r8,r9,r8
80003526:	ce e0       	breq	80003502 <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80003528:	30 08       	mov	r8,0
}
8000352a:	10 9c       	mov	r12,r8
8000352c:	2f ed       	sub	sp,-8
8000352e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003532 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80003532:	eb cd 40 80 	pushm	r7,lr
80003536:	1a 97       	mov	r7,sp
80003538:	20 5d       	sub	sp,20
8000353a:	ef 4c ff f4 	st.w	r7[-12],r12
8000353e:	ef 4b ff f0 	st.w	r7[-16],r11
80003542:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80003546:	30 08       	mov	r8,0
80003548:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
8000354c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003550:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003554:	f0 09 0d 08 	divu	r8,r8,r9
80003558:	a1 98       	lsr	r8,0x1
8000355a:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8000355e:	c0 b8       	rjmp	80003574 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80003560:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003564:	2f f8       	sub	r8,-1
80003566:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
8000356a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000356e:	a1 98       	lsr	r8,0x1
80003570:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80003574:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003578:	e0 48 00 ff 	cp.w	r8,255
8000357c:	e0 88 00 09 	brls	8000358e <twim_set_speed+0x5c>
80003580:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003584:	30 78       	mov	r8,7
80003586:	f0 09 18 00 	cp.b	r9,r8
8000358a:	fe 98 ff eb 	brls	80003560 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8000358e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003592:	30 78       	mov	r8,7
80003594:	f0 09 18 00 	cp.b	r9,r8
80003598:	e0 88 00 04 	brls	800035a0 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
8000359c:	3f 88       	mov	r8,-8
8000359e:	c1 a8       	rjmp	800035d2 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800035a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035a4:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
800035a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ac:	a1 98       	lsr	r8,0x1
800035ae:	ee fa ff f8 	ld.w	r10,r7[-8]
800035b2:	f4 08 01 08 	sub	r8,r10,r8
800035b6:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
800035b8:	10 49       	or	r9,r8
800035ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800035be:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
800035c0:	10 49       	or	r9,r8
800035c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035c6:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
800035c8:	10 49       	or	r9,r8
800035ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800035ce:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
800035d0:	30 08       	mov	r8,0
}
800035d2:	10 9c       	mov	r12,r8
800035d4:	2f bd       	sub	sp,-20
800035d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800035da <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800035da:	eb cd 40 80 	pushm	r7,lr
800035de:	1a 97       	mov	r7,sp
800035e0:	20 1d       	sub	sp,4
800035e2:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800035e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035ea:	e6 18 00 01 	andh	r8,0x1,COH
800035ee:	5f 08       	sreq	r8
800035f0:	5c 58       	castu.b	r8
}
800035f2:	10 9c       	mov	r12,r8
800035f4:	2f fd       	sub	sp,-4
800035f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800035fa <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800035fa:	eb cd 40 80 	pushm	r7,lr
800035fe:	1a 97       	mov	r7,sp
80003600:	20 7d       	sub	sp,28
80003602:	ef 4c ff ec 	st.w	r7[-20],r12
80003606:	ef 4b ff e8 	st.w	r7[-24],r11
8000360a:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000360e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003612:	f0 09 15 04 	lsl	r9,r8,0x4
80003616:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000361a:	10 39       	cp.w	r9,r8
8000361c:	e0 8b 00 04 	brhi	80003624 <usart_set_async_baudrate+0x2a>
80003620:	31 08       	mov	r8,16
80003622:	c0 28       	rjmp	80003626 <usart_set_async_baudrate+0x2c>
80003624:	30 88       	mov	r8,8
80003626:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8000362a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000362e:	f0 09 15 03 	lsl	r9,r8,0x3
80003632:	ee fa ff f0 	ld.w	r10,r7[-16]
80003636:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000363a:	f4 08 02 48 	mul	r8,r10,r8
8000363e:	a1 98       	lsr	r8,0x1
80003640:	f2 08 00 08 	add	r8,r9,r8
80003644:	ee fa ff f0 	ld.w	r10,r7[-16]
80003648:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000364c:	f4 09 02 49 	mul	r9,r10,r9
80003650:	f0 09 0d 08 	divu	r8,r8,r9
80003654:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80003658:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000365c:	a3 98       	lsr	r8,0x3
8000365e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80003662:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003666:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000366a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000366e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003672:	58 08       	cp.w	r8,0
80003674:	c0 70       	breq	80003682 <usart_set_async_baudrate+0x88>
80003676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000367a:	e0 48 ff ff 	cp.w	r8,65535
8000367e:	e0 88 00 04 	brls	80003686 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80003682:	30 18       	mov	r8,1
80003684:	c2 08       	rjmp	800036c4 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80003686:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000368a:	70 18       	ld.w	r8,r8[0x4]
8000368c:	10 99       	mov	r9,r8
8000368e:	e4 19 ff f7 	andh	r9,0xfff7
80003692:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80003696:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000369a:	59 08       	cp.w	r8,16
8000369c:	c0 40       	breq	800036a4 <usart_set_async_baudrate+0xaa>
8000369e:	e8 68 00 00 	mov	r8,524288
800036a2:	c0 28       	rjmp	800036a6 <usart_set_async_baudrate+0xac>
800036a4:	30 08       	mov	r8,0
800036a6:	10 49       	or	r9,r8
800036a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800036ac:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800036ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036b2:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800036b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036ba:	10 49       	or	r9,r8
800036bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800036c0:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800036c2:	30 08       	mov	r8,0
}
800036c4:	10 9c       	mov	r12,r8
800036c6:	2f 9d       	sub	sp,-28
800036c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800036cc <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800036cc:	eb cd 40 80 	pushm	r7,lr
800036d0:	1a 97       	mov	r7,sp
800036d2:	20 2d       	sub	sp,8
800036d4:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800036d8:	e1 b8 00 00 	mfsr	r8,0x0
800036dc:	10 9c       	mov	r12,r8
800036de:	f0 1f 00 18 	mcall	8000373c <usart_reset+0x70>
800036e2:	18 98       	mov	r8,r12
800036e4:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800036e8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036ec:	30 08       	mov	r8,0
800036ee:	f0 09 18 00 	cp.b	r9,r8
800036f2:	c0 20       	breq	800036f6 <usart_reset+0x2a>
800036f4:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800036f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036fa:	3f f9       	mov	r9,-1
800036fc:	91 39       	st.w	r8[0xc],r9
  usart->csr;
800036fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003702:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80003704:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003708:	30 08       	mov	r8,0
8000370a:	f0 09 18 00 	cp.b	r9,r8
8000370e:	c0 20       	breq	80003712 <usart_reset+0x46>
80003710:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80003712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003716:	30 09       	mov	r9,0
80003718:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8000371a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000371e:	30 09       	mov	r9,0
80003720:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80003722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003726:	30 09       	mov	r9,0
80003728:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000372a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000372e:	e8 69 61 0c 	mov	r9,549132
80003732:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80003734:	2f ed       	sub	sp,-8
80003736:	e3 cd 80 80 	ldm	sp++,r7,pc
8000373a:	00 00       	add	r0,r0
8000373c:	80 00       	ld.sh	r0,r0[0x0]
8000373e:	35 da       	mov	r10,93

80003740 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80003740:	eb cd 40 80 	pushm	r7,lr
80003744:	1a 97       	mov	r7,sp
80003746:	20 3d       	sub	sp,12
80003748:	ef 4c ff fc 	st.w	r7[-4],r12
8000374c:	ef 4b ff f8 	st.w	r7[-8],r11
80003750:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80003754:	ee fc ff fc 	ld.w	r12,r7[-4]
80003758:	f0 1f 00 54 	mcall	800038a8 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
8000375c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003760:	58 08       	cp.w	r8,0
80003762:	c3 90       	breq	800037d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80003764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003768:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000376a:	30 48       	mov	r8,4
8000376c:	f0 09 18 00 	cp.b	r9,r8
80003770:	e0 88 00 32 	brls	800037d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80003774:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003778:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000377a:	30 98       	mov	r8,9
8000377c:	f0 09 18 00 	cp.b	r9,r8
80003780:	e0 8b 00 2a 	brhi	800037d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80003784:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003788:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000378a:	30 78       	mov	r8,7
8000378c:	f0 09 18 00 	cp.b	r9,r8
80003790:	e0 8b 00 22 	brhi	800037d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80003794:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003798:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000379a:	e0 68 01 01 	mov	r8,257
8000379e:	f0 09 19 00 	cp.h	r9,r8
800037a2:	e0 8b 00 19 	brhi	800037d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
800037a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037aa:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800037ae:	30 38       	mov	r8,3
800037b0:	f0 09 18 00 	cp.b	r9,r8
800037b4:	e0 8b 00 10 	brhi	800037d4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
800037b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800037bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037c0:	70 08       	ld.w	r8,r8[0x0]
800037c2:	12 9a       	mov	r10,r9
800037c4:	10 9b       	mov	r11,r8
800037c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800037ca:	f0 1f 00 39 	mcall	800038ac <usart_init_rs232+0x16c>
800037ce:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800037d0:	58 18       	cp.w	r8,1
800037d2:	c0 31       	brne	800037d8 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800037d4:	30 18       	mov	r8,1
800037d6:	c6 48       	rjmp	8000389e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
800037d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037dc:	11 c9       	ld.ub	r9,r8[0x4]
800037de:	30 98       	mov	r8,9
800037e0:	f0 09 18 00 	cp.b	r9,r8
800037e4:	c0 a1       	brne	800037f8 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800037e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037ea:	70 18       	ld.w	r8,r8[0x4]
800037ec:	10 99       	mov	r9,r8
800037ee:	b1 b9       	sbr	r9,0x11
800037f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037f4:	91 19       	st.w	r8[0x4],r9
800037f6:	c0 d8       	rjmp	80003810 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800037f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037fc:	70 19       	ld.w	r9,r8[0x4]
800037fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003802:	11 c8       	ld.ub	r8,r8[0x4]
80003804:	20 58       	sub	r8,5
80003806:	a7 68       	lsl	r8,0x6
80003808:	10 49       	or	r9,r8
8000380a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000380e:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80003810:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003814:	70 19       	ld.w	r9,r8[0x4]
80003816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000381a:	11 d8       	ld.ub	r8,r8[0x5]
8000381c:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80003820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003824:	f1 38 00 08 	ld.ub	r8,r8[8]
80003828:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000382a:	f5 e8 10 08 	or	r8,r10,r8
8000382e:	10 49       	or	r9,r8
80003830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003834:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80003836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000383a:	90 39       	ld.sh	r9,r8[0x6]
8000383c:	30 28       	mov	r8,2
8000383e:	f0 09 19 00 	cp.h	r9,r8
80003842:	e0 88 00 14 	brls	8000386a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80003846:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000384a:	70 18       	ld.w	r8,r8[0x4]
8000384c:	10 99       	mov	r9,r8
8000384e:	ad b9       	sbr	r9,0xd
80003850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003854:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80003856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000385a:	90 38       	ld.sh	r8,r8[0x6]
8000385c:	5c 78       	castu.h	r8
8000385e:	20 28       	sub	r8,2
80003860:	10 99       	mov	r9,r8
80003862:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003866:	91 a9       	st.w	r8[0x28],r9
80003868:	c0 d8       	rjmp	80003882 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000386a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000386e:	70 19       	ld.w	r9,r8[0x4]
80003870:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003874:	90 38       	ld.sh	r8,r8[0x6]
80003876:	5c 78       	castu.h	r8
80003878:	ad 68       	lsl	r8,0xc
8000387a:	10 49       	or	r9,r8
8000387c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003880:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80003882:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003886:	70 18       	ld.w	r8,r8[0x4]
80003888:	10 99       	mov	r9,r8
8000388a:	e0 19 ff f0 	andl	r9,0xfff0
8000388e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003892:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80003894:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003898:	35 09       	mov	r9,80
8000389a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000389c:	30 08       	mov	r8,0
}
8000389e:	10 9c       	mov	r12,r8
800038a0:	2f dd       	sub	sp,-12
800038a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800038a6:	00 00       	add	r0,r0
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	36 cc       	mov	r12,108
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	35 fa       	mov	r10,95

800038b0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800038b0:	48 dd       	lddpc	sp,800038e4 <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
800038b2:	fe c0 84 b2 	sub	r0,pc,-31566
  mtsr    AVR32_EVBA, r0
800038b6:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
800038ba:	d5 53       	csrf	0x15
  lda.w   r1, _edata
800038bc:	48 b0       	lddpc	r0,800038e8 <udata_clear_loop_end+0x8>
  cp      r0, r1
800038be:	48 c1       	lddpc	r1,800038ec <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
800038c0:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
800038c2:	c0 62       	brcc	800038ce <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
800038c4:	48 b2       	lddpc	r2,800038f0 <udata_clear_loop_end+0x10>

800038c6 <idata_load_loop>:
  st.d    r0++, r4
800038c6:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
800038c8:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
800038ca:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800038cc:	cf d3       	brcs	800038c6 <idata_load_loop>

800038ce <idata_load_loop_end>:
  lda.w   r1, _end
800038ce:	48 a0       	lddpc	r0,800038f4 <udata_clear_loop_end+0x14>
  cp      r0, r1
800038d0:	48 a1       	lddpc	r1,800038f8 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
800038d2:	02 30       	cp.w	r0,r1
  mov     r2, 0
800038d4:	c0 62       	brcc	800038e0 <udata_clear_loop_end>
  mov     r3, 0
800038d6:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
800038d8:	30 03       	mov	r3,0

800038da <udata_clear_loop>:
  cp      r0, r1
800038da:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
800038dc:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800038de:	cf e3       	brcs	800038da <udata_clear_loop>

800038e0 <udata_clear_loop_end>:
800038e0:	fe cf ea 70 	sub	pc,pc,-5520
800038e4:	00 00       	add	r0,r0
800038e6:	80 00       	ld.sh	r0,r0[0x0]
800038e8:	00 00       	add	r0,r0
800038ea:	00 04       	add	r4,r0
800038ec:	00 00       	add	r0,r0
800038ee:	05 10       	ld.sh	r0,r2++
800038f0:	80 00       	ld.sh	r0,r0[0x0]
800038f2:	c7 20       	breq	800039d6 <str2float+0x4a>
800038f4:	00 00       	add	r0,r0
800038f6:	05 10       	ld.sh	r0,r2++
800038f8:	00 00       	add	r0,r0
800038fa:	09 20       	ld.uh	r0,r4++

800038fc <str2int>:
#include <math.h>

static void find_data(const char *c, int data_i[50]);

static int str2int(char* pStr, unsigned int len)
{
800038fc:	eb cd 40 80 	pushm	r7,lr
80003900:	1a 97       	mov	r7,sp
80003902:	20 4d       	sub	sp,16
80003904:	ef 4c ff f4 	st.w	r7[-12],r12
80003908:	ef 4b ff f0 	st.w	r7[-16],r11
	int iRetVal = 0;
8000390c:	30 08       	mov	r8,0
8000390e:	ef 48 ff f8 	st.w	r7[-8],r8
	int cnt = 0;
80003912:	30 08       	mov	r8,0
80003914:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(pStr){
80003918:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000391c:	58 08       	cp.w	r8,0
8000391e:	c3 10       	breq	80003980 <str2int+0x84>
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
80003920:	c1 a8       	rjmp	80003954 <str2int+0x58>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
80003922:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003926:	12 98       	mov	r8,r9
80003928:	a3 68       	lsl	r8,0x2
8000392a:	12 08       	add	r8,r9
8000392c:	a1 78       	lsl	r8,0x1
8000392e:	10 99       	mov	r9,r8
80003930:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003934:	11 88       	ld.ub	r8,r8[0x0]
80003936:	23 08       	sub	r8,48
80003938:	f2 08 00 08 	add	r8,r9,r8
8000393c:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
80003940:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003944:	2f f8       	sub	r8,-1
80003946:	ef 48 ff f4 	st.w	r7[-12],r8
			cnt++;
8000394a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000394e:	2f f8       	sub	r8,-1
80003950:	ef 48 ff fc 	st.w	r7[-4],r8
{
	int iRetVal = 0;
	int cnt = 0;
	
	if(pStr){
		while((cnt < len) && (*pStr <= '9') && (*pStr >= '0')){
80003954:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003958:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000395c:	10 39       	cp.w	r9,r8
8000395e:	c1 12       	brcc	80003980 <str2int+0x84>
80003960:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003964:	11 89       	ld.ub	r9,r8[0x0]
80003966:	33 98       	mov	r8,57
80003968:	f0 09 18 00 	cp.b	r9,r8
8000396c:	e0 8b 00 0a 	brhi	80003980 <str2int+0x84>
80003970:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003974:	11 89       	ld.ub	r9,r8[0x0]
80003976:	32 f8       	mov	r8,47
80003978:	f0 09 18 00 	cp.b	r9,r8
8000397c:	fe 9b ff d3 	brhi	80003922 <str2int+0x26>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
			cnt++;
		}
	}
	return iRetVal;
80003980:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003984:	10 9c       	mov	r12,r8
80003986:	2f cd       	sub	sp,-16
80003988:	e3 cd 80 80 	ldm	sp++,r7,pc

8000398c <str2float>:

static float str2float(char* pStr){
8000398c:	eb cd 40 c0 	pushm	r6-r7,lr
80003990:	1a 97       	mov	r7,sp
80003992:	20 3d       	sub	sp,12
80003994:	ef 4c ff f4 	st.w	r7[-12],r12
	float iRetVal = 0;
80003998:	30 08       	mov	r8,0
8000399a:	ef 48 ff f8 	st.w	r7[-8],r8
	char *decP;
	
	if(pStr){
8000399e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039a2:	58 08       	cp.w	r8,0
800039a4:	e0 80 00 8c 	breq	80003abc <str2float+0x130>
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
800039a8:	c1 d8       	rjmp	800039e2 <str2float+0x56>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
800039aa:	fc 1b 41 20 	movh	r11,0x4120
800039ae:	ee fc ff f8 	ld.w	r12,r7[-8]
800039b2:	f0 1f 00 46 	mcall	80003ac8 <str2float+0x13c>
800039b6:	18 98       	mov	r8,r12
800039b8:	10 96       	mov	r6,r8
800039ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039be:	11 88       	ld.ub	r8,r8[0x0]
800039c0:	23 08       	sub	r8,48
800039c2:	10 9c       	mov	r12,r8
800039c4:	f0 1f 00 42 	mcall	80003acc <str2float+0x140>
800039c8:	18 98       	mov	r8,r12
800039ca:	10 9b       	mov	r11,r8
800039cc:	0c 9c       	mov	r12,r6
800039ce:	f0 1f 00 41 	mcall	80003ad0 <str2float+0x144>
800039d2:	18 98       	mov	r8,r12
800039d4:	ef 48 ff f8 	st.w	r7[-8],r8
			pStr++;
800039d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039dc:	2f f8       	sub	r8,-1
800039de:	ef 48 ff f4 	st.w	r7[-12],r8
static float str2float(char* pStr){
	float iRetVal = 0;
	char *decP;
	
	if(pStr){
		while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
800039e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039e6:	11 88       	ld.ub	r8,r8[0x0]
800039e8:	58 08       	cp.w	r8,0
800039ea:	c1 10       	breq	80003a0c <str2float+0x80>
800039ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039f0:	11 89       	ld.ub	r9,r8[0x0]
800039f2:	33 98       	mov	r8,57
800039f4:	f0 09 18 00 	cp.b	r9,r8
800039f8:	e0 8b 00 0a 	brhi	80003a0c <str2float+0x80>
800039fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a00:	11 89       	ld.ub	r9,r8[0x0]
80003a02:	32 f8       	mov	r8,47
80003a04:	f0 09 18 00 	cp.b	r9,r8
80003a08:	fe 9b ff d1 	brhi	800039aa <str2float+0x1e>
			iRetVal = (iRetVal * 10) + (*pStr - '0');
			pStr++;
		}
	
		if(*pStr == '.'){
80003a0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a10:	11 89       	ld.ub	r9,r8[0x0]
80003a12:	32 e8       	mov	r8,46
80003a14:	f0 09 18 00 	cp.b	r9,r8
80003a18:	c5 21       	brne	80003abc <str2float+0x130>
			decP = pStr++;
80003a1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a1e:	ef 48 ff fc 	st.w	r7[-4],r8
80003a22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a26:	2f f8       	sub	r8,-1
80003a28:	ef 48 ff f4 	st.w	r7[-12],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80003a2c:	c1 d8       	rjmp	80003a66 <str2float+0xda>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
80003a2e:	fc 1b 41 20 	movh	r11,0x4120
80003a32:	ee fc ff f8 	ld.w	r12,r7[-8]
80003a36:	f0 1f 00 25 	mcall	80003ac8 <str2float+0x13c>
80003a3a:	18 98       	mov	r8,r12
80003a3c:	10 96       	mov	r6,r8
80003a3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a42:	11 88       	ld.ub	r8,r8[0x0]
80003a44:	23 08       	sub	r8,48
80003a46:	10 9c       	mov	r12,r8
80003a48:	f0 1f 00 21 	mcall	80003acc <str2float+0x140>
80003a4c:	18 98       	mov	r8,r12
80003a4e:	10 9b       	mov	r11,r8
80003a50:	0c 9c       	mov	r12,r6
80003a52:	f0 1f 00 20 	mcall	80003ad0 <str2float+0x144>
80003a56:	18 98       	mov	r8,r12
80003a58:	ef 48 ff f8 	st.w	r7[-8],r8
				pStr++;
80003a5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a60:	2f f8       	sub	r8,-1
80003a62:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	
		if(*pStr == '.'){
			decP = pStr++;
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
80003a66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a6a:	11 88       	ld.ub	r8,r8[0x0]
80003a6c:	58 08       	cp.w	r8,0
80003a6e:	c1 b0       	breq	80003aa4 <str2float+0x118>
80003a70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a74:	11 89       	ld.ub	r9,r8[0x0]
80003a76:	33 98       	mov	r8,57
80003a78:	f0 09 18 00 	cp.b	r9,r8
80003a7c:	e0 8b 00 14 	brhi	80003aa4 <str2float+0x118>
80003a80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a84:	11 89       	ld.ub	r9,r8[0x0]
80003a86:	32 f8       	mov	r8,47
80003a88:	f0 09 18 00 	cp.b	r9,r8
80003a8c:	fe 9b ff d1 	brhi	80003a2e <str2float+0xa2>
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
80003a90:	c0 a8       	rjmp	80003aa4 <str2float+0x118>
				iRetVal = iRetVal/10;
80003a92:	fc 1b 41 20 	movh	r11,0x4120
80003a96:	ee fc ff f8 	ld.w	r12,r7[-8]
80003a9a:	f0 1f 00 0f 	mcall	80003ad4 <str2float+0x148>
80003a9e:	18 98       	mov	r8,r12
80003aa0:	ef 48 ff f8 	st.w	r7[-8],r8
			
			while (*pStr && (*pStr <= '9') && (*pStr >= '0')){
				iRetVal = (iRetVal * 10) + (*pStr - '0');
				pStr++;
			}
			while(--pStr > decP){
80003aa4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003aa8:	20 18       	sub	r8,1
80003aaa:	ef 48 ff f4 	st.w	r7[-12],r8
80003aae:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ab6:	10 39       	cp.w	r9,r8
80003ab8:	fe 9b ff ed 	brhi	80003a92 <str2float+0x106>
				iRetVal = iRetVal/10;
			}
		}
	}
	
	return iRetVal;
80003abc:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003ac0:	10 9c       	mov	r12,r8
80003ac2:	2f dd       	sub	sp,-12
80003ac4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ac8:	80 00       	ld.sh	r0,r0[0x0]
80003aca:	57 7c       	stdsp	sp[0x1dc],r12
80003acc:	80 00       	ld.sh	r0,r0[0x0]
80003ace:	58 5e       	cp.w	lr,5
80003ad0:	80 00       	ld.sh	r0,r0[0x0]
80003ad2:	56 d0       	stdsp	sp[0x1b4],r0
80003ad4:	80 00       	ld.sh	r0,r0[0x0]
80003ad6:	54 9c       	stdsp	sp[0x124],r12

80003ad8 <uc530_parse_default>:

int uc530_parse_default(char *str, unsigned int len, uc530_data_t *gps_data){
80003ad8:	eb cd 40 80 	pushm	r7,lr
80003adc:	1a 97       	mov	r7,sp
80003ade:	fa cd 00 dc 	sub	sp,sp,220
80003ae2:	ef 4c ff 2c 	st.w	r7[-212],r12
80003ae6:	ef 4b ff 28 	st.w	r7[-216],r11
80003aea:	ef 4a ff 24 	st.w	r7[-220],r10
	char *nmea = str;
80003aee:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80003af2:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
80003af6:	30 08       	mov	r8,0
80003af8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
80003afc:	e0 8f 02 36 	bral	80003f68 <uc530_parse_default+0x490>
		if(found_start){
80003b00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b04:	58 08       	cp.w	r8,0
80003b06:	e0 80 02 22 	breq	80003f4a <uc530_parse_default+0x472>
			// Ignore standard 'GP'
			nmea += 2;
80003b0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b0e:	2f e8       	sub	r8,-2
80003b10:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// Find Data Indices
			find_data(nmea, data_i);
80003b14:	ee c8 00 d0 	sub	r8,r7,208
80003b18:	10 9b       	mov	r11,r8
80003b1a:	ee fc ff f8 	ld.w	r12,r7[-8]
80003b1e:	f0 1f 01 1c 	mcall	80003f8c <uc530_parse_default+0x4b4>
			gps_data->valid = 1;
80003b22:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003b26:	30 19       	mov	r9,1
80003b28:	f1 49 00 40 	st.w	r8[64],r9
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80003b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b30:	11 89       	ld.ub	r9,r8[0x0]
80003b32:	34 78       	mov	r8,71
80003b34:	f0 09 18 00 	cp.b	r9,r8
80003b38:	c5 f1       	brne	80003bf6 <uc530_parse_default+0x11e>
80003b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b3e:	2f f8       	sub	r8,-1
80003b40:	11 89       	ld.ub	r9,r8[0x0]
80003b42:	34 78       	mov	r8,71
80003b44:	f0 09 18 00 	cp.b	r9,r8
80003b48:	c5 71       	brne	80003bf6 <uc530_parse_default+0x11e>
80003b4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b4e:	2f e8       	sub	r8,-2
80003b50:	11 89       	ld.ub	r9,r8[0x0]
80003b52:	34 18       	mov	r8,65
80003b54:	f0 09 18 00 	cp.b	r9,r8
80003b58:	c4 f1       	brne	80003bf6 <uc530_parse_default+0x11e>
				// Fix Indicator
				if(data_i[5] != -1){
80003b5a:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003b5e:	5b f8       	cp.w	r8,-1
80003b60:	c1 20       	breq	80003b84 <uc530_parse_default+0xac>
					gps_data->fix_status = str2int(nmea+data_i[5],10);
80003b62:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003b66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b6a:	f2 08 00 08 	add	r8,r9,r8
80003b6e:	30 ab       	mov	r11,10
80003b70:	10 9c       	mov	r12,r8
80003b72:	f0 1f 01 08 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003b76:	18 98       	mov	r8,r12
80003b78:	5c 58       	castu.b	r8
80003b7a:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003b7e:	f3 68 00 30 	st.b	r9[48],r8
80003b82:	c0 68       	rjmp	80003b8e <uc530_parse_default+0xb6>
				}
				else
					gps_data->valid = 0;
80003b84:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003b88:	30 09       	mov	r9,0
80003b8a:	f1 49 00 40 	st.w	r8[64],r9
				
				// Number of Satellites
				if(data_i[6] != -1){
80003b8e:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003b92:	5b f8       	cp.w	r8,-1
80003b94:	c1 20       	breq	80003bb8 <uc530_parse_default+0xe0>
					gps_data->num_sats = str2int(nmea+data_i[6],10);
80003b96:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003b9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b9e:	f2 08 00 08 	add	r8,r9,r8
80003ba2:	30 ab       	mov	r11,10
80003ba4:	10 9c       	mov	r12,r8
80003ba6:	f0 1f 00 fb 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003baa:	18 98       	mov	r8,r12
80003bac:	5c 58       	castu.b	r8
80003bae:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003bb2:	f3 68 00 31 	st.b	r9[49],r8
80003bb6:	c0 68       	rjmp	80003bc2 <uc530_parse_default+0xea>
				}
				else
					gps_data->valid = 0;
80003bb8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003bbc:	30 09       	mov	r9,0
80003bbe:	f1 49 00 40 	st.w	r8[64],r9
					
				// Altitude
				if(data_i[8] != -1){
80003bc2:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003bc6:	5b f8       	cp.w	r8,-1
80003bc8:	c1 00       	breq	80003be8 <uc530_parse_default+0x110>
					gps_data->alt = str2float(nmea+data_i[8]);
80003bca:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003bce:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003bd2:	f2 08 00 08 	add	r8,r9,r8
80003bd6:	10 9c       	mov	r12,r8
80003bd8:	f0 1f 00 ef 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003bdc:	18 99       	mov	r9,r12
80003bde:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003be2:	91 99       	st.w	r8[0x24],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80003be4:	e0 8f 01 af 	bral	80003f42 <uc530_parse_default+0x46a>
				// Altitude
				if(data_i[8] != -1){
					gps_data->alt = str2float(nmea+data_i[8]);
				}
				else
					gps_data->valid = 0;
80003be8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003bec:	30 09       	mov	r9,0
80003bee:	f1 49 00 40 	st.w	r8[64],r9
			// Find Data Indices
			find_data(nmea, data_i);
			gps_data->valid = 1;
			
			//GGA
			if((*nmea=='G')&&(*(nmea+1)=='G')&&(*(nmea+2)=='A')){
80003bf2:	e0 8f 01 a8 	bral	80003f42 <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
80003bf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bfa:	11 89       	ld.ub	r9,r8[0x0]
80003bfc:	35 28       	mov	r8,82
80003bfe:	f0 09 18 00 	cp.b	r9,r8
80003c02:	e0 81 01 2d 	brne	80003e5c <uc530_parse_default+0x384>
80003c06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c0a:	2f f8       	sub	r8,-1
80003c0c:	11 89       	ld.ub	r9,r8[0x0]
80003c0e:	34 d8       	mov	r8,77
80003c10:	f0 09 18 00 	cp.b	r9,r8
80003c14:	e0 81 01 24 	brne	80003e5c <uc530_parse_default+0x384>
80003c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c1c:	2f e8       	sub	r8,-2
80003c1e:	11 89       	ld.ub	r9,r8[0x0]
80003c20:	34 38       	mov	r8,67
80003c22:	f0 09 18 00 	cp.b	r9,r8
80003c26:	e0 81 01 1b 	brne	80003e5c <uc530_parse_default+0x384>
				// Time
				if(data_i[0] != -1){
80003c2a:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003c2e:	5b f8       	cp.w	r8,-1
80003c30:	c2 f0       	breq	80003c8e <uc530_parse_default+0x1b6>
					// Hours
					gps_data->hour = str2int(nmea+data_i[0], 2);
80003c32:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003c36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c3a:	f2 08 00 08 	add	r8,r9,r8
80003c3e:	30 2b       	mov	r11,2
80003c40:	10 9c       	mov	r12,r8
80003c42:	f0 1f 00 d4 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003c46:	18 98       	mov	r8,r12
80003c48:	5c 58       	castu.b	r8
80003c4a:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003c4e:	b2 b8       	st.b	r9[0x3],r8
					
					// Minutes
					gps_data->minute = str2int(nmea+data_i[0]+2, 2);
80003c50:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003c54:	2f e8       	sub	r8,-2
80003c56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c5a:	f2 08 00 08 	add	r8,r9,r8
80003c5e:	30 2b       	mov	r11,2
80003c60:	10 9c       	mov	r12,r8
80003c62:	f0 1f 00 cc 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003c66:	18 98       	mov	r8,r12
80003c68:	5c 58       	castu.b	r8
80003c6a:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003c6e:	b2 c8       	st.b	r9[0x4],r8
					
					// Seconds
					gps_data->second = str2float(nmea+data_i[0]+4);
80003c70:	ee f8 ff 30 	ld.w	r8,r7[-208]
80003c74:	2f c8       	sub	r8,-4
80003c76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c7a:	f2 08 00 08 	add	r8,r9,r8
80003c7e:	10 9c       	mov	r12,r8
80003c80:	f0 1f 00 c5 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003c84:	18 99       	mov	r9,r12
80003c86:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c8a:	91 29       	st.w	r8[0x8],r9
80003c8c:	c0 68       	rjmp	80003c98 <uc530_parse_default+0x1c0>
				}
				else
					gps_data->valid = 0;
80003c8e:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003c92:	30 09       	mov	r9,0
80003c94:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude
				if(data_i[2] != -1){
80003c98:	ee f8 ff 38 	ld.w	r8,r7[-200]
80003c9c:	5b f8       	cp.w	r8,-1
80003c9e:	c2 00       	breq	80003cde <uc530_parse_default+0x206>
					// Degrees
					gps_data->lat.deg = str2int(nmea+data_i[2], 2);
80003ca0:	ee f8 ff 38 	ld.w	r8,r7[-200]
80003ca4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ca8:	f2 08 00 08 	add	r8,r9,r8
80003cac:	30 2b       	mov	r11,2
80003cae:	10 9c       	mov	r12,r8
80003cb0:	f0 1f 00 b8 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003cb4:	18 98       	mov	r8,r12
80003cb6:	5c 58       	castu.b	r8
80003cb8:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003cbc:	f3 68 00 0c 	st.b	r9[12],r8
					
					// Minutes
					gps_data->lat.min = str2float(nmea+data_i[2]+2);
80003cc0:	ee f8 ff 38 	ld.w	r8,r7[-200]
80003cc4:	2f e8       	sub	r8,-2
80003cc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003cca:	f2 08 00 08 	add	r8,r9,r8
80003cce:	10 9c       	mov	r12,r8
80003cd0:	f0 1f 00 b1 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003cd4:	18 99       	mov	r9,r12
80003cd6:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003cda:	91 49       	st.w	r8[0x10],r9
80003cdc:	c0 68       	rjmp	80003ce8 <uc530_parse_default+0x210>
				}
				else
					gps_data->valid = 0;
80003cde:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003ce2:	30 09       	mov	r9,0
80003ce4:	f1 49 00 40 	st.w	r8[64],r9
					
				// Latitude Hemi
				if(data_i[3] != -1){
80003ce8:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80003cec:	5b f8       	cp.w	r8,-1
80003cee:	c0 d0       	breq	80003d08 <uc530_parse_default+0x230>
					gps_data->lat.hemi = *(nmea+data_i[3]);
80003cf0:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80003cf4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003cf8:	f2 08 00 08 	add	r8,r9,r8
80003cfc:	11 88       	ld.ub	r8,r8[0x0]
80003cfe:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003d02:	f3 68 00 14 	st.b	r9[20],r8
80003d06:	c0 68       	rjmp	80003d12 <uc530_parse_default+0x23a>
				}
				else
					gps_data->valid = 0;
80003d08:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003d0c:	30 09       	mov	r9,0
80003d0e:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude
				if(data_i[4] != -1){
80003d12:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003d16:	5b f8       	cp.w	r8,-1
80003d18:	c2 00       	breq	80003d58 <uc530_parse_default+0x280>
					// Degrees
					gps_data->longi.deg = str2int(nmea+data_i[4], 3);
80003d1a:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003d1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d22:	f2 08 00 08 	add	r8,r9,r8
80003d26:	30 3b       	mov	r11,3
80003d28:	10 9c       	mov	r12,r8
80003d2a:	f0 1f 00 9a 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003d2e:	18 98       	mov	r8,r12
80003d30:	5c 58       	castu.b	r8
80003d32:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003d36:	f3 68 00 18 	st.b	r9[24],r8
					
					// Minutes
					gps_data->longi.min = str2float(nmea+data_i[4]+3);
80003d3a:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003d3e:	2f d8       	sub	r8,-3
80003d40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d44:	f2 08 00 08 	add	r8,r9,r8
80003d48:	10 9c       	mov	r12,r8
80003d4a:	f0 1f 00 93 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003d4e:	18 99       	mov	r9,r12
80003d50:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003d54:	91 79       	st.w	r8[0x1c],r9
80003d56:	c0 68       	rjmp	80003d62 <uc530_parse_default+0x28a>
				}
				else
					gps_data->valid = 0;
80003d58:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003d5c:	30 09       	mov	r9,0
80003d5e:	f1 49 00 40 	st.w	r8[64],r9
					
				// Longitude Hemi
				if(data_i[5] != -1){
80003d62:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003d66:	5b f8       	cp.w	r8,-1
80003d68:	c0 d0       	breq	80003d82 <uc530_parse_default+0x2aa>
					gps_data->longi.hemi = *(nmea+data_i[5]);
80003d6a:	ee f8 ff 44 	ld.w	r8,r7[-188]
80003d6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d72:	f2 08 00 08 	add	r8,r9,r8
80003d76:	11 88       	ld.ub	r8,r8[0x0]
80003d78:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003d7c:	f3 68 00 20 	st.b	r9[32],r8
80003d80:	c0 68       	rjmp	80003d8c <uc530_parse_default+0x2b4>
				}
				else
					gps_data->valid = 0;
80003d82:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003d86:	30 09       	mov	r9,0
80003d88:	f1 49 00 40 	st.w	r8[64],r9
					
				// Speed
				if(data_i[6] != -1){
80003d8c:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003d90:	5b f8       	cp.w	r8,-1
80003d92:	c0 f0       	breq	80003db0 <uc530_parse_default+0x2d8>
					gps_data->spd = str2float(nmea+data_i[6]);
80003d94:	ee f8 ff 48 	ld.w	r8,r7[-184]
80003d98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d9c:	f2 08 00 08 	add	r8,r9,r8
80003da0:	10 9c       	mov	r12,r8
80003da2:	f0 1f 00 7d 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003da6:	18 99       	mov	r9,r12
80003da8:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003dac:	91 a9       	st.w	r8[0x28],r9
80003dae:	c0 68       	rjmp	80003dba <uc530_parse_default+0x2e2>
				}
				else
					gps_data->valid = 0;
80003db0:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003db4:	30 09       	mov	r9,0
80003db6:	f1 49 00 40 	st.w	r8[64],r9
					
				// Heading
				if(data_i[7] != -1){
80003dba:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80003dbe:	5b f8       	cp.w	r8,-1
80003dc0:	c0 f0       	breq	80003dde <uc530_parse_default+0x306>
					gps_data->hdg = str2float(nmea+data_i[7]);
80003dc2:	ee f8 ff 4c 	ld.w	r8,r7[-180]
80003dc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003dca:	f2 08 00 08 	add	r8,r9,r8
80003dce:	10 9c       	mov	r12,r8
80003dd0:	f0 1f 00 71 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003dd4:	18 99       	mov	r9,r12
80003dd6:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003dda:	91 b9       	st.w	r8[0x2c],r9
80003ddc:	c0 68       	rjmp	80003de8 <uc530_parse_default+0x310>
				}
				else
					gps_data->valid = 0;
80003dde:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003de2:	30 09       	mov	r9,0
80003de4:	f1 49 00 40 	st.w	r8[64],r9
					
				// Date
				if(data_i[8] != -1){
80003de8:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003dec:	5b f8       	cp.w	r8,-1
80003dee:	c3 10       	breq	80003e50 <uc530_parse_default+0x378>
					// Day
					gps_data->day = str2int(nmea+data_i[8], 2);
80003df0:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003df4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003df8:	f2 08 00 08 	add	r8,r9,r8
80003dfc:	30 2b       	mov	r11,2
80003dfe:	10 9c       	mov	r12,r8
80003e00:	f0 1f 00 64 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003e04:	18 98       	mov	r8,r12
80003e06:	5c 58       	castu.b	r8
80003e08:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003e0c:	b2 a8       	st.b	r9[0x2],r8
					
					// Month
					gps_data->month = str2int(nmea+data_i[8]+2, 2);
80003e0e:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003e12:	2f e8       	sub	r8,-2
80003e14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e18:	f2 08 00 08 	add	r8,r9,r8
80003e1c:	30 2b       	mov	r11,2
80003e1e:	10 9c       	mov	r12,r8
80003e20:	f0 1f 00 5c 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003e24:	18 98       	mov	r8,r12
80003e26:	5c 58       	castu.b	r8
80003e28:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003e2c:	b2 98       	st.b	r9[0x1],r8
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
80003e2e:	ee f8 ff 50 	ld.w	r8,r7[-176]
80003e32:	2f c8       	sub	r8,-4
80003e34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e38:	f2 08 00 08 	add	r8,r9,r8
80003e3c:	30 ab       	mov	r11,10
80003e3e:	10 9c       	mov	r12,r8
80003e40:	f0 1f 00 54 	mcall	80003f90 <uc530_parse_default+0x4b8>
80003e44:	18 98       	mov	r8,r12
80003e46:	5c 58       	castu.b	r8
80003e48:	ee f9 ff 24 	ld.w	r9,r7[-220]
80003e4c:	b2 88       	st.b	r9[0x0],r8
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
80003e4e:	c7 a8       	rjmp	80003f42 <uc530_parse_default+0x46a>
					
					// Year
					gps_data->year = str2int(nmea+data_i[8]+4, 10);
				}
				else
					gps_data->valid = 0;
80003e50:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003e54:	30 09       	mov	r9,0
80003e56:	f1 49 00 40 	st.w	r8[64],r9
				}
				else
					gps_data->valid = 0;
			}
			//RMC
			else if((*nmea=='R')&&(*(nmea+1)=='M')&&(*(nmea+2)=='C')){
80003e5a:	c7 48       	rjmp	80003f42 <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
			}
			//GSV
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='V')){
80003e5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e60:	11 89       	ld.ub	r9,r8[0x0]
80003e62:	34 78       	mov	r8,71
80003e64:	f0 09 18 00 	cp.b	r9,r8
80003e68:	c1 11       	brne	80003e8a <uc530_parse_default+0x3b2>
80003e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e6e:	2f f8       	sub	r8,-1
80003e70:	11 89       	ld.ub	r9,r8[0x0]
80003e72:	35 38       	mov	r8,83
80003e74:	f0 09 18 00 	cp.b	r9,r8
80003e78:	c0 91       	brne	80003e8a <uc530_parse_default+0x3b2>
80003e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e7e:	2f e8       	sub	r8,-2
80003e80:	11 89       	ld.ub	r9,r8[0x0]
80003e82:	35 68       	mov	r8,86
80003e84:	f0 09 18 00 	cp.b	r9,r8
80003e88:	c5 d0       	breq	80003f42 <uc530_parse_default+0x46a>
				
			}
			//GSA
			else if((*nmea=='G')&&(*(nmea+1)=='S')&&(*(nmea+2)=='A')){
80003e8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e8e:	11 89       	ld.ub	r9,r8[0x0]
80003e90:	34 78       	mov	r8,71
80003e92:	f0 09 18 00 	cp.b	r9,r8
80003e96:	c5 61       	brne	80003f42 <uc530_parse_default+0x46a>
80003e98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e9c:	2f f8       	sub	r8,-1
80003e9e:	11 89       	ld.ub	r9,r8[0x0]
80003ea0:	35 38       	mov	r8,83
80003ea2:	f0 09 18 00 	cp.b	r9,r8
80003ea6:	c4 e1       	brne	80003f42 <uc530_parse_default+0x46a>
80003ea8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003eac:	2f e8       	sub	r8,-2
80003eae:	11 89       	ld.ub	r9,r8[0x0]
80003eb0:	34 18       	mov	r8,65
80003eb2:	f0 09 18 00 	cp.b	r9,r8
80003eb6:	c4 61       	brne	80003f42 <uc530_parse_default+0x46a>
				// PDOP
				if(data_i[14] != -1){
80003eb8:	ee f8 ff 68 	ld.w	r8,r7[-152]
80003ebc:	5b f8       	cp.w	r8,-1
80003ebe:	c0 f0       	breq	80003edc <uc530_parse_default+0x404>
					gps_data->pdop = str2float(nmea+data_i[14]);
80003ec0:	ee f8 ff 68 	ld.w	r8,r7[-152]
80003ec4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ec8:	f2 08 00 08 	add	r8,r9,r8
80003ecc:	10 9c       	mov	r12,r8
80003ece:	f0 1f 00 32 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003ed2:	18 99       	mov	r9,r12
80003ed4:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003ed8:	91 d9       	st.w	r8[0x34],r9
80003eda:	c0 68       	rjmp	80003ee6 <uc530_parse_default+0x40e>
				}
				else
					gps_data->valid = 0;
80003edc:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003ee0:	30 09       	mov	r9,0
80003ee2:	f1 49 00 40 	st.w	r8[64],r9
					
				// HDOP
				if(data_i[15] != -1){
80003ee6:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80003eea:	5b f8       	cp.w	r8,-1
80003eec:	c0 f0       	breq	80003f0a <uc530_parse_default+0x432>
					gps_data->hdop = str2float(nmea+data_i[15]);
80003eee:	ee f8 ff 6c 	ld.w	r8,r7[-148]
80003ef2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ef6:	f2 08 00 08 	add	r8,r9,r8
80003efa:	10 9c       	mov	r12,r8
80003efc:	f0 1f 00 26 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003f00:	18 99       	mov	r9,r12
80003f02:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003f06:	91 e9       	st.w	r8[0x38],r9
80003f08:	c0 68       	rjmp	80003f14 <uc530_parse_default+0x43c>
				}
				else
					gps_data->valid = 0;
80003f0a:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003f0e:	30 09       	mov	r9,0
80003f10:	f1 49 00 40 	st.w	r8[64],r9
					
				// VDOP
				if(data_i[16] != -1){
80003f14:	ee f8 ff 70 	ld.w	r8,r7[-144]
80003f18:	5b f8       	cp.w	r8,-1
80003f1a:	c0 f0       	breq	80003f38 <uc530_parse_default+0x460>
					gps_data->vdop = str2float(nmea+data_i[16]);
80003f1c:	ee f8 ff 70 	ld.w	r8,r7[-144]
80003f20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f24:	f2 08 00 08 	add	r8,r9,r8
80003f28:	10 9c       	mov	r12,r8
80003f2a:	f0 1f 00 1b 	mcall	80003f94 <uc530_parse_default+0x4bc>
80003f2e:	18 99       	mov	r9,r12
80003f30:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003f34:	91 f9       	st.w	r8[0x3c],r9
80003f36:	c0 68       	rjmp	80003f42 <uc530_parse_default+0x46a>
				}
				else
					gps_data->valid = 0;
80003f38:	ee f8 ff 24 	ld.w	r8,r7[-220]
80003f3c:	30 09       	mov	r9,0
80003f3e:	f1 49 00 40 	st.w	r8[64],r9
			}
			
			found_start = 0;
80003f42:	30 08       	mov	r8,0
80003f44:	ef 48 ff fc 	st.w	r7[-4],r8
80003f48:	c0 b8       	rjmp	80003f5e <uc530_parse_default+0x486>
		}
		else if(*nmea == '$')
80003f4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f4e:	11 89       	ld.ub	r9,r8[0x0]
80003f50:	32 48       	mov	r8,36
80003f52:	f0 09 18 00 	cp.b	r9,r8
80003f56:	c0 41       	brne	80003f5e <uc530_parse_default+0x486>
			found_start = 1;
80003f58:	30 18       	mov	r8,1
80003f5a:	ef 48 ff fc 	st.w	r7[-4],r8
		
		// Increment to next character
		nmea++;
80003f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f62:	2f f8       	sub	r8,-1
80003f64:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int found_start = 0;
	
	int data_i[50];
	
	// Make sure we are in bounds
	while((nmea-str) < len){
80003f68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003f6c:	ee f8 ff 2c 	ld.w	r8,r7[-212]
80003f70:	f2 08 01 08 	sub	r8,r9,r8
80003f74:	10 99       	mov	r9,r8
80003f76:	ee f8 ff 28 	ld.w	r8,r7[-216]
80003f7a:	10 39       	cp.w	r9,r8
80003f7c:	fe 93 fd c2 	brlo	80003b00 <uc530_parse_default+0x28>
		
		// Increment to next character
		nmea++;
	}
	
	return UC530_SUCCESS;
80003f80:	30 18       	mov	r8,1
}
80003f82:	10 9c       	mov	r12,r8
80003f84:	2c 9d       	sub	sp,-220
80003f86:	e3 cd 80 80 	ldm	sp++,r7,pc
80003f8a:	00 00       	add	r0,r0
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	3f 98       	mov	r8,-7
80003f90:	80 00       	ld.sh	r0,r0[0x0]
80003f92:	38 fc       	mov	r12,-113
80003f94:	80 00       	ld.sh	r0,r0[0x0]
80003f96:	39 8c       	mov	r12,-104

80003f98 <find_data>:

// Finds indices of data fields between commas
// will list up to 50 indices or scan 200 characters
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
80003f98:	eb cd 40 80 	pushm	r7,lr
80003f9c:	1a 97       	mov	r7,sp
80003f9e:	20 4d       	sub	sp,16
80003fa0:	ef 4c ff f4 	st.w	r7[-12],r12
80003fa4:	ef 4b ff f0 	st.w	r7[-16],r11
	unsigned int str_cnt = 0;
80003fa8:	30 08       	mov	r8,0
80003faa:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int data_cnt = 0;
80003fae:	30 08       	mov	r8,0
80003fb0:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while((str_cnt < 200) && (data_cnt < 50)){
80003fb4:	c4 68       	rjmp	80004040 <find_data+0xa8>
		if(str[str_cnt] == ','){
80003fb6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003fba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fbe:	f2 08 00 08 	add	r8,r9,r8
80003fc2:	11 89       	ld.ub	r9,r8[0x0]
80003fc4:	32 c8       	mov	r8,44
80003fc6:	f0 09 18 00 	cp.b	r9,r8
80003fca:	c2 b1       	brne	80004020 <find_data+0x88>
			str_cnt++;
80003fcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fd0:	2f f8       	sub	r8,-1
80003fd2:	ef 48 ff f8 	st.w	r7[-8],r8
			
			// No Data
			if(str[str_cnt] == ',')
80003fd6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003fda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fde:	f2 08 00 08 	add	r8,r9,r8
80003fe2:	11 89       	ld.ub	r9,r8[0x0]
80003fe4:	32 c8       	mov	r8,44
80003fe6:	f0 09 18 00 	cp.b	r9,r8
80003fea:	c0 b1       	brne	80004000 <find_data+0x68>
				data_i[data_cnt] = -1;
80003fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ff0:	a3 68       	lsl	r8,0x2
80003ff2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003ff6:	f2 08 00 08 	add	r8,r9,r8
80003ffa:	3f f9       	mov	r9,-1
80003ffc:	91 09       	st.w	r8[0x0],r9
80003ffe:	c0 b8       	rjmp	80004014 <find_data+0x7c>
			// Mark index
			else
				data_i[data_cnt] = str_cnt;
80004000:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004004:	a3 68       	lsl	r8,0x2
80004006:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000400a:	f2 08 00 08 	add	r8,r9,r8
8000400e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004012:	91 09       	st.w	r8[0x0],r9
				
			data_cnt++;
80004014:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004018:	2f f8       	sub	r8,-1
8000401a:	ef 48 ff fc 	st.w	r7[-4],r8
8000401e:	c1 18       	rjmp	80004040 <find_data+0xa8>
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
80004020:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004028:	f2 08 00 08 	add	r8,r9,r8
8000402c:	11 89       	ld.ub	r9,r8[0x0]
8000402e:	30 d8       	mov	r8,13
80004030:	f0 09 18 00 	cp.b	r9,r8
80004034:	c1 30       	breq	8000405a <find_data+0xc2>
			return;
		
		else
			str_cnt++;
80004036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000403a:	2f f8       	sub	r8,-1
8000403c:	ef 48 ff f8 	st.w	r7[-8],r8
// If empty will have -1.
static void find_data(const char *str, int data_i[50]){
	unsigned int str_cnt = 0;
	unsigned int data_cnt = 0;
	
	while((str_cnt < 200) && (data_cnt < 50)){
80004040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004044:	e0 48 00 c7 	cp.w	r8,199
80004048:	e0 8b 00 0a 	brhi	8000405c <find_data+0xc4>
8000404c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004050:	e0 48 00 31 	cp.w	r8,49
80004054:	fe 98 ff b1 	brls	80003fb6 <find_data+0x1e>
80004058:	c0 28       	rjmp	8000405c <find_data+0xc4>
			data_cnt++;
		}
		
		// End of NMEA Sentence
		else if(str[str_cnt] == '\r')
			return;
8000405a:	d7 03       	nop
		
		else
			str_cnt++;
	}
8000405c:	2f cd       	sub	sp,-16
8000405e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004062:	d7 03       	nop

80004064 <st7529_D07_WRITE>:

// LCD OFFSETS
#define ST7529_XOFFSET	16
#define ST7529_YOFFSET	0

inline static void st7529_D07_WRITE(uint8_t data){
80004064:	eb cd 40 80 	pushm	r7,lr
80004068:	1a 97       	mov	r7,sp
8000406a:	20 1d       	sub	sp,4
8000406c:	18 98       	mov	r8,r12
8000406e:	ef 68 ff fc 	st.b	r7[-4],r8
    // Clear Old Values
    AVR32_GPIO_LOCAL.port[0].ovrc = ST7529_D07_PORTA_PINS;
80004072:	fc 18 40 00 	movh	r8,0x4000
80004076:	e0 69 17 09 	mov	r9,5897
8000407a:	ea 19 00 40 	orh	r9,0x40
8000407e:	f1 49 00 58 	st.w	r8[88],r9
    AVR32_GPIO_LOCAL.port[1].ovrc = ST7529_D07_PORTB_PINS;
80004082:	fc 18 40 00 	movh	r8,0x4000
80004086:	e0 69 10 00 	mov	r9,4096
8000408a:	f1 49 01 58 	st.w	r8[344],r9

    // Set Value
    AVR32_GPIO_LOCAL.port[0].ovrs = st7529_pin_map_lut[data].porta;
8000408e:	fc 18 40 00 	movh	r8,0x4000
80004092:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80004096:	48 a9       	lddpc	r9,800040bc <st7529_D07_WRITE+0x58>
80004098:	f2 0a 03 39 	ld.w	r9,r9[r10<<0x3]
8000409c:	f1 49 00 54 	st.w	r8[84],r9
    AVR32_GPIO_LOCAL.port[1].ovrs = st7529_pin_map_lut[data].portb;
800040a0:	fc 18 40 00 	movh	r8,0x4000
800040a4:	ef 3a ff fc 	ld.ub	r10,r7[-4]
800040a8:	48 59       	lddpc	r9,800040bc <st7529_D07_WRITE+0x58>
800040aa:	a1 7a       	lsl	r10,0x1
800040ac:	2f fa       	sub	r10,-1
800040ae:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800040b2:	f1 49 01 54 	st.w	r8[340],r9
}
800040b6:	2f fd       	sub	sp,-4
800040b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800040bc:	80 00       	ld.sh	r0,r0[0x0]
800040be:	b7 30       	mul	r0,r11

800040c0 <st7529_delay_write>:

/********* HELPER FUNCTIONS ***********/
#define st7529_delay_us(delay)      cpu_delay_us(delay, ST7529_FCPU)
#define st7529_delay_ms(delay)      cpu_delay_ms(delay, ST7529_FCPU)

inline static void st7529_delay_write(void){
800040c0:	eb cd 40 80 	pushm	r7,lr
800040c4:	1a 97       	mov	r7,sp
	asm volatile("nop");
800040c6:	d7 03       	nop
	asm volatile("nop");
800040c8:	d7 03       	nop
	asm volatile("nop");
800040ca:	d7 03       	nop
	asm volatile("nop");
800040cc:	d7 03       	nop
}
800040ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800040d2:	d7 03       	nop

800040d4 <st7529_init>:
static inline void st7529_write_cmd(uint8_t);
static inline void st7529_write_data(uint8_t);
static inline uint8_t st7529_read_data(void);

// Initializes ST7529
void st7529_init(void){
800040d4:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800040d8:	1a 97       	mov	r7,sp
800040da:	fa cd 00 dc 	sub	sp,sp,220
800040de:	30 28       	mov	r8,2
800040e0:	ef 48 ff 6c 	st.w	r7[-148],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800040e4:	fc 1b 40 00 	movh	r11,0x4000
800040e8:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800040ec:	f0 0a 16 05 	lsr	r10,r8,0x5
800040f0:	ee f8 ff 6c 	ld.w	r8,r7[-148]
800040f4:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800040f8:	30 18       	mov	r8,1
800040fa:	f0 09 09 48 	lsl	r8,r8,r9
800040fe:	10 99       	mov	r9,r8
80004100:	f4 08 15 08 	lsl	r8,r10,0x8
80004104:	f6 08 00 08 	add	r8,r11,r8
80004108:	2b c8       	sub	r8,-68
8000410a:	91 09       	st.w	r8[0x0],r9
8000410c:	30 28       	mov	r8,2
8000410e:	ef 48 ff 70 	st.w	r7[-144],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004112:	fc 1b 40 00 	movh	r11,0x4000
80004116:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000411a:	f0 0a 16 05 	lsr	r10,r8,0x5
8000411e:	ee f8 ff 70 	ld.w	r8,r7[-144]
80004122:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004126:	30 18       	mov	r8,1
80004128:	f0 09 09 48 	lsl	r8,r8,r9
8000412c:	10 99       	mov	r9,r8
8000412e:	f4 08 15 08 	lsl	r8,r10,0x8
80004132:	f6 08 00 08 	add	r8,r11,r8
80004136:	2a 88       	sub	r8,-88
80004138:	91 09       	st.w	r8[0x0],r9
8000413a:	30 18       	mov	r8,1
8000413c:	ef 48 ff 74 	st.w	r7[-140],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004140:	fc 1b 40 00 	movh	r11,0x4000
80004144:	ee f8 ff 74 	ld.w	r8,r7[-140]
80004148:	f0 0a 16 05 	lsr	r10,r8,0x5
8000414c:	ee f8 ff 74 	ld.w	r8,r7[-140]
80004150:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004154:	30 18       	mov	r8,1
80004156:	f0 09 09 48 	lsl	r8,r8,r9
8000415a:	10 99       	mov	r9,r8
8000415c:	f4 08 15 08 	lsl	r8,r10,0x8
80004160:	f6 08 00 08 	add	r8,r11,r8
80004164:	2b c8       	sub	r8,-68
80004166:	91 09       	st.w	r8[0x0],r9
80004168:	30 18       	mov	r8,1
8000416a:	ef 48 ff 78 	st.w	r7[-136],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000416e:	fc 1b 40 00 	movh	r11,0x4000
80004172:	ee f8 ff 78 	ld.w	r8,r7[-136]
80004176:	f0 0a 16 05 	lsr	r10,r8,0x5
8000417a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000417e:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004182:	30 18       	mov	r8,1
80004184:	f0 09 09 48 	lsl	r8,r8,r9
80004188:	10 99       	mov	r9,r8
8000418a:	f4 08 15 08 	lsl	r8,r10,0x8
8000418e:	f6 08 00 08 	add	r8,r11,r8
80004192:	2a c8       	sub	r8,-84
80004194:	91 09       	st.w	r8[0x0],r9
80004196:	31 28       	mov	r8,18
80004198:	ef 48 ff 7c 	st.w	r7[-132],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
8000419c:	fc 1b 40 00 	movh	r11,0x4000
800041a0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800041a4:	f0 0a 16 05 	lsr	r10,r8,0x5
800041a8:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800041ac:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800041b0:	30 18       	mov	r8,1
800041b2:	f0 09 09 48 	lsl	r8,r8,r9
800041b6:	10 99       	mov	r9,r8
800041b8:	f4 08 15 08 	lsl	r8,r10,0x8
800041bc:	f6 08 00 08 	add	r8,r11,r8
800041c0:	2b c8       	sub	r8,-68
800041c2:	91 09       	st.w	r8[0x0],r9
800041c4:	31 28       	mov	r8,18
800041c6:	ef 48 ff 80 	st.w	r7[-128],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800041ca:	fc 1b 40 00 	movh	r11,0x4000
800041ce:	ee f8 ff 80 	ld.w	r8,r7[-128]
800041d2:	f0 0a 16 05 	lsr	r10,r8,0x5
800041d6:	ee f8 ff 80 	ld.w	r8,r7[-128]
800041da:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800041de:	30 18       	mov	r8,1
800041e0:	f0 09 09 48 	lsl	r8,r8,r9
800041e4:	10 99       	mov	r9,r8
800041e6:	f4 08 15 08 	lsl	r8,r10,0x8
800041ea:	f6 08 00 08 	add	r8,r11,r8
800041ee:	2a c8       	sub	r8,-84
800041f0:	91 09       	st.w	r8[0x0],r9
800041f2:	30 58       	mov	r8,5
800041f4:	ef 48 ff 84 	st.w	r7[-124],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
800041f8:	fc 1b 40 00 	movh	r11,0x4000
800041fc:	ee f8 ff 84 	ld.w	r8,r7[-124]
80004200:	f0 0a 16 05 	lsr	r10,r8,0x5
80004204:	ee f8 ff 84 	ld.w	r8,r7[-124]
80004208:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000420c:	30 18       	mov	r8,1
8000420e:	f0 09 09 48 	lsl	r8,r8,r9
80004212:	10 99       	mov	r9,r8
80004214:	f4 08 15 08 	lsl	r8,r10,0x8
80004218:	f6 08 00 08 	add	r8,r11,r8
8000421c:	2b c8       	sub	r8,-68
8000421e:	91 09       	st.w	r8[0x0],r9
80004220:	30 58       	mov	r8,5
80004222:	ef 48 ff 88 	st.w	r7[-120],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004226:	fc 1b 40 00 	movh	r11,0x4000
8000422a:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000422e:	f0 0a 16 05 	lsr	r10,r8,0x5
80004232:	ee f8 ff 88 	ld.w	r8,r7[-120]
80004236:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
8000423a:	30 18       	mov	r8,1
8000423c:	f0 09 09 48 	lsl	r8,r8,r9
80004240:	10 99       	mov	r9,r8
80004242:	f4 08 15 08 	lsl	r8,r10,0x8
80004246:	f6 08 00 08 	add	r8,r11,r8
8000424a:	2a c8       	sub	r8,-84
8000424c:	91 09       	st.w	r8[0x0],r9
8000424e:	32 b8       	mov	r8,43
80004250:	ef 48 ff 8c 	st.w	r7[-116],r8
 * \note This function does not enable the GPIO mode of the pin.
 *       \ref gpio_enable_gpio_pin can be called for this purpose.
 */
__always_inline static void gpio_local_enable_pin_output_driver(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].oders = 1 << (pin & 0x1F);
80004254:	fc 1b 40 00 	movh	r11,0x4000
80004258:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000425c:	f0 0a 16 05 	lsr	r10,r8,0x5
80004260:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80004264:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004268:	30 18       	mov	r8,1
8000426a:	f0 09 09 48 	lsl	r8,r8,r9
8000426e:	10 99       	mov	r9,r8
80004270:	f4 08 15 08 	lsl	r8,r10,0x8
80004274:	f6 08 00 08 	add	r8,r11,r8
80004278:	2b c8       	sub	r8,-68
8000427a:	91 09       	st.w	r8[0x0],r9
8000427c:	32 b8       	mov	r8,43
8000427e:	ef 48 ff 90 	st.w	r7[-112],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004282:	fc 1b 40 00 	movh	r11,0x4000
80004286:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000428a:	f0 0a 16 05 	lsr	r10,r8,0x5
8000428e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80004292:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004296:	30 18       	mov	r8,1
80004298:	f0 09 09 48 	lsl	r8,r8,r9
8000429c:	10 99       	mov	r9,r8
8000429e:	f4 08 15 08 	lsl	r8,r10,0x8
800042a2:	f6 08 00 08 	add	r8,r11,r8
800042a6:	2a c8       	sub	r8,-84
800042a8:	91 09       	st.w	r8[0x0],r9
    st7529_RD_DIR_OUT();
    st7529_RD_SET();
    st7529_WR_DIR_OUT();
    st7529_WR_SET();

    st7529_D07_DIR_OUT();   // Idles as output
800042aa:	fc 18 40 00 	movh	r8,0x4000
800042ae:	e0 69 17 09 	mov	r9,5897
800042b2:	ea 19 00 40 	orh	r9,0x40
800042b6:	f1 49 00 44 	st.w	r8[68],r9
800042ba:	fc 18 40 00 	movh	r8,0x4000
800042be:	e0 69 10 00 	mov	r9,4096
800042c2:	f1 49 01 44 	st.w	r8[324],r9
800042c6:	30 18       	mov	r8,1
800042c8:	ef 48 ff 94 	st.w	r7[-108],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800042cc:	fc 1b 40 00 	movh	r11,0x4000
800042d0:	ee f8 ff 94 	ld.w	r8,r7[-108]
800042d4:	f0 0a 16 05 	lsr	r10,r8,0x5
800042d8:	ee f8 ff 94 	ld.w	r8,r7[-108]
800042dc:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
800042e0:	30 18       	mov	r8,1
800042e2:	f0 09 09 48 	lsl	r8,r8,r9
800042e6:	10 99       	mov	r9,r8
800042e8:	f4 08 15 08 	lsl	r8,r10,0x8
800042ec:	f6 08 00 08 	add	r8,r11,r8
800042f0:	2a 88       	sub	r8,-88
800042f2:	91 09       	st.w	r8[0x0],r9
800042f4:	30 18       	mov	r8,1
800042f6:	ef 48 ff 9c 	st.w	r7[-100],r8
800042fa:	e0 68 78 40 	mov	r8,30784
800042fe:	ea 18 01 7d 	orh	r8,0x17d
80004302:	ef 48 ff 98 	st.w	r7[-104],r8
80004306:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000430a:	ef 48 ff a4 	st.w	r7[-92],r8
8000430e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80004312:	ef 48 ff a0 	st.w	r7[-96],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004316:	ee fc ff a4 	ld.w	r12,r7[-92]
8000431a:	ef 4c ff 30 	st.w	r7[-208],r12
8000431e:	30 0b       	mov	r11,0
80004320:	ef 4b ff 2c 	st.w	r7[-212],r11
80004324:	ee f9 ff a0 	ld.w	r9,r7[-96]
80004328:	ef 49 ff 28 	st.w	r7[-216],r9
8000432c:	30 08       	mov	r8,0
8000432e:	ef 48 ff 24 	st.w	r7[-220],r8
80004332:	ee fa ff 2c 	ld.w	r10,r7[-212]
80004336:	ee fc ff 28 	ld.w	r12,r7[-216]
8000433a:	b9 3a       	mul	r10,r12
8000433c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80004340:	ee fb ff 30 	ld.w	r11,r7[-208]
80004344:	b7 38       	mul	r8,r11
80004346:	10 0a       	add	r10,r8
80004348:	ee fc ff 30 	ld.w	r12,r7[-208]
8000434c:	ee fb ff 28 	ld.w	r11,r7[-216]
80004350:	f8 0b 06 48 	mulu.d	r8,r12,r11
80004354:	12 0a       	add	r10,r9
80004356:	14 99       	mov	r9,r10
80004358:	e0 6a 03 e7 	mov	r10,999
8000435c:	30 0b       	mov	r11,0
8000435e:	f0 0a 00 0a 	add	r10,r8,r10
80004362:	f2 0b 00 4b 	adc	r11,r9,r11
80004366:	e0 68 03 e8 	mov	r8,1000
8000436a:	30 09       	mov	r9,0
8000436c:	f0 1f 01 3a 	mcall	80004854 <st7529_init+0x780>
80004370:	14 98       	mov	r8,r10
80004372:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80004374:	ef 48 ff ac 	st.w	r7[-84],r8
80004378:	ee c8 00 bc 	sub	r8,r7,188
8000437c:	ef 48 ff a8 	st.w	r7[-88],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004380:	e1 b8 00 42 	mfsr	r8,0x108
80004384:	10 99       	mov	r9,r8
80004386:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000438a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000438c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80004390:	70 09       	ld.w	r9,r8[0x0]
80004392:	ee f8 ff ac 	ld.w	r8,r7[-84]
80004396:	10 09       	add	r9,r8
80004398:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000439c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000439e:	ee f9 ff a8 	ld.w	r9,r7[-88]
800043a2:	30 08       	mov	r8,0
800043a4:	f3 68 00 08 	st.b	r9[8],r8
800043a8:	ee c8 00 bc 	sub	r8,r7,188
800043ac:	ef 48 ff b0 	st.w	r7[-80],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800043b0:	e1 b8 00 42 	mfsr	r8,0x108
800043b4:	ef 48 ff b4 	st.w	r7[-76],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800043b8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800043bc:	f1 39 00 08 	ld.ub	r9,r8[8]
800043c0:	30 28       	mov	r8,2
800043c2:	f0 09 18 00 	cp.b	r9,r8
800043c6:	c0 31       	brne	800043cc <st7529_init+0x2f8>
    return false;
800043c8:	30 08       	mov	r8,0
800043ca:	c4 38       	rjmp	80004450 <st7529_init+0x37c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800043cc:	ee f8 ff b0 	ld.w	r8,r7[-80]
800043d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800043d4:	30 18       	mov	r8,1
800043d6:	f0 09 18 00 	cp.b	r9,r8
800043da:	c0 31       	brne	800043e0 <st7529_init+0x30c>
    return true;
800043dc:	30 18       	mov	r8,1
800043de:	c3 98       	rjmp	80004450 <st7529_init+0x37c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800043e0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800043e4:	70 09       	ld.w	r9,r8[0x0]
800043e6:	ee f8 ff b0 	ld.w	r8,r7[-80]
800043ea:	70 18       	ld.w	r8,r8[0x4]
800043ec:	10 39       	cp.w	r9,r8
800043ee:	e0 88 00 1a 	brls	80004422 <st7529_init+0x34e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800043f2:	ee f8 ff b0 	ld.w	r8,r7[-80]
800043f6:	70 08       	ld.w	r8,r8[0x0]
800043f8:	ee f9 ff b4 	ld.w	r9,r7[-76]
800043fc:	10 39       	cp.w	r9,r8
800043fe:	c1 02       	brcc	8000441e <st7529_init+0x34a>
80004400:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004404:	70 18       	ld.w	r8,r8[0x4]
80004406:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000440a:	10 39       	cp.w	r9,r8
8000440c:	e0 88 00 09 	brls	8000441e <st7529_init+0x34a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004410:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004414:	30 18       	mov	r8,1
80004416:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000441a:	30 18       	mov	r8,1
8000441c:	c1 a8       	rjmp	80004450 <st7529_init+0x37c>
    }
    return false;
8000441e:	30 08       	mov	r8,0
80004420:	c1 88       	rjmp	80004450 <st7529_init+0x37c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004422:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004426:	70 08       	ld.w	r8,r8[0x0]
80004428:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000442c:	10 39       	cp.w	r9,r8
8000442e:	c0 93       	brcs	80004440 <st7529_init+0x36c>
80004430:	ee f8 ff b0 	ld.w	r8,r7[-80]
80004434:	70 18       	ld.w	r8,r8[0x4]
80004436:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000443a:	10 39       	cp.w	r9,r8
8000443c:	e0 88 00 09 	brls	8000444e <st7529_init+0x37a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004440:	ee f9 ff b0 	ld.w	r9,r7[-80]
80004444:	30 18       	mov	r8,1
80004446:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000444a:	30 18       	mov	r8,1
8000444c:	c0 28       	rjmp	80004450 <st7529_init+0x37c>
    }
    return false;
8000444e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004450:	58 08       	cp.w	r8,0
80004452:	ca b0       	breq	800043a8 <st7529_init+0x2d4>
80004454:	30 28       	mov	r8,2
80004456:	ef 48 ff b8 	st.w	r7[-72],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000445a:	fc 1a 40 00 	movh	r10,0x4000
8000445e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80004462:	a5 98       	lsr	r8,0x5
80004464:	ee f9 ff b8 	ld.w	r9,r7[-72]
80004468:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000446c:	30 1b       	mov	r11,1
8000446e:	f6 09 09 49 	lsl	r9,r11,r9
80004472:	a9 68       	lsl	r8,0x8
80004474:	f4 08 00 08 	add	r8,r10,r8
80004478:	2a c8       	sub	r8,-84
8000447a:	91 09       	st.w	r8[0x0],r9
8000447c:	30 a8       	mov	r8,10
8000447e:	ef 48 ff c0 	st.w	r7[-64],r8
80004482:	e0 68 78 40 	mov	r8,30784
80004486:	ea 18 01 7d 	orh	r8,0x17d
8000448a:	ef 48 ff bc 	st.w	r7[-68],r8
8000448e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80004492:	ef 48 ff c8 	st.w	r7[-56],r8
80004496:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000449a:	ef 48 ff c4 	st.w	r7[-60],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000449e:	ee f9 ff c8 	ld.w	r9,r7[-56]
800044a2:	ef 49 ff 40 	st.w	r7[-192],r9
800044a6:	30 08       	mov	r8,0
800044a8:	ef 48 ff 3c 	st.w	r7[-196],r8
800044ac:	ee fc ff c4 	ld.w	r12,r7[-60]
800044b0:	ef 4c ff 38 	st.w	r7[-200],r12
800044b4:	30 0b       	mov	r11,0
800044b6:	ef 4b ff 34 	st.w	r7[-204],r11
800044ba:	ee fa ff 3c 	ld.w	r10,r7[-196]
800044be:	ee f9 ff 38 	ld.w	r9,r7[-200]
800044c2:	b3 3a       	mul	r10,r9
800044c4:	ee f8 ff 34 	ld.w	r8,r7[-204]
800044c8:	ee fc ff 40 	ld.w	r12,r7[-192]
800044cc:	b9 38       	mul	r8,r12
800044ce:	10 0a       	add	r10,r8
800044d0:	ee fb ff 40 	ld.w	r11,r7[-192]
800044d4:	ee fc ff 38 	ld.w	r12,r7[-200]
800044d8:	f6 0c 06 48 	mulu.d	r8,r11,r12
800044dc:	12 0a       	add	r10,r9
800044de:	14 99       	mov	r9,r10
800044e0:	e0 6a 03 e7 	mov	r10,999
800044e4:	30 0b       	mov	r11,0
800044e6:	f0 0a 00 0a 	add	r10,r8,r10
800044ea:	f2 0b 00 4b 	adc	r11,r9,r11
800044ee:	e0 68 03 e8 	mov	r8,1000
800044f2:	30 09       	mov	r9,0
800044f4:	f0 1f 00 d8 	mcall	80004854 <st7529_init+0x780>
800044f8:	14 98       	mov	r8,r10
800044fa:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800044fc:	ef 48 ff d0 	st.w	r7[-48],r8
80004500:	ee c8 00 b0 	sub	r8,r7,176
80004504:	ef 48 ff cc 	st.w	r7[-52],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004508:	e1 b8 00 42 	mfsr	r8,0x108
8000450c:	10 99       	mov	r9,r8
8000450e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004512:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004514:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004518:	70 09       	ld.w	r9,r8[0x0]
8000451a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000451e:	10 09       	add	r9,r8
80004520:	ee f8 ff cc 	ld.w	r8,r7[-52]
80004524:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004526:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000452a:	30 08       	mov	r8,0
8000452c:	f3 68 00 08 	st.b	r9[8],r8
80004530:	ee c8 00 b0 	sub	r8,r7,176
80004534:	ef 48 ff d4 	st.w	r7[-44],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004538:	e1 b8 00 42 	mfsr	r8,0x108
8000453c:	ef 48 ff d8 	st.w	r7[-40],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80004540:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004544:	f1 39 00 08 	ld.ub	r9,r8[8]
80004548:	30 28       	mov	r8,2
8000454a:	f0 09 18 00 	cp.b	r9,r8
8000454e:	c0 31       	brne	80004554 <st7529_init+0x480>
    return false;
80004550:	30 08       	mov	r8,0
80004552:	c4 38       	rjmp	800045d8 <st7529_init+0x504>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80004554:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004558:	f1 39 00 08 	ld.ub	r9,r8[8]
8000455c:	30 18       	mov	r8,1
8000455e:	f0 09 18 00 	cp.b	r9,r8
80004562:	c0 31       	brne	80004568 <st7529_init+0x494>
    return true;
80004564:	30 18       	mov	r8,1
80004566:	c3 98       	rjmp	800045d8 <st7529_init+0x504>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004568:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000456c:	70 09       	ld.w	r9,r8[0x0]
8000456e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80004572:	70 18       	ld.w	r8,r8[0x4]
80004574:	10 39       	cp.w	r9,r8
80004576:	e0 88 00 1a 	brls	800045aa <st7529_init+0x4d6>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000457a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000457e:	70 08       	ld.w	r8,r8[0x0]
80004580:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004584:	10 39       	cp.w	r9,r8
80004586:	c1 02       	brcc	800045a6 <st7529_init+0x4d2>
80004588:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000458c:	70 18       	ld.w	r8,r8[0x4]
8000458e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004592:	10 39       	cp.w	r9,r8
80004594:	e0 88 00 09 	brls	800045a6 <st7529_init+0x4d2>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004598:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000459c:	30 18       	mov	r8,1
8000459e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800045a2:	30 18       	mov	r8,1
800045a4:	c1 a8       	rjmp	800045d8 <st7529_init+0x504>
    }
    return false;
800045a6:	30 08       	mov	r8,0
800045a8:	c1 88       	rjmp	800045d8 <st7529_init+0x504>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800045aa:	ee f8 ff d4 	ld.w	r8,r7[-44]
800045ae:	70 08       	ld.w	r8,r8[0x0]
800045b0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800045b4:	10 39       	cp.w	r9,r8
800045b6:	c0 93       	brcs	800045c8 <st7529_init+0x4f4>
800045b8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800045bc:	70 18       	ld.w	r8,r8[0x4]
800045be:	ee f9 ff d8 	ld.w	r9,r7[-40]
800045c2:	10 39       	cp.w	r9,r8
800045c4:	e0 88 00 09 	brls	800045d6 <st7529_init+0x502>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800045c8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800045cc:	30 18       	mov	r8,1
800045ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800045d2:	30 18       	mov	r8,1
800045d4:	c0 28       	rjmp	800045d8 <st7529_init+0x504>
    }
    return false;
800045d6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800045d8:	58 08       	cp.w	r8,0
800045da:	ca b0       	breq	80004530 <st7529_init+0x45c>
	st7529_delay_ms(1);
	
    st7529_RST_SET();       // Release reset
	st7529_delay_ms(10);
	
    st7529_write_cmd(ST7529_EXTIN);
800045dc:	33 0c       	mov	r12,48
800045de:	f0 1f 00 9f 	mcall	80004858 <st7529_init+0x784>
    st7529_write_cmd(ST7529_SLPOUT);
800045e2:	e0 6c 00 94 	mov	r12,148
800045e6:	f0 1f 00 9d 	mcall	80004858 <st7529_init+0x784>
    st7529_write_cmd(ST7529_OSCON);
800045ea:	e0 6c 00 d1 	mov	r12,209
800045ee:	f0 1f 00 9b 	mcall	80004858 <st7529_init+0x784>
    st7529_write_cmd(ST7529_PWRCTRL);
800045f2:	32 0c       	mov	r12,32
800045f4:	f0 1f 00 99 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_BOOSTER);  // Booster First
800045f8:	30 8c       	mov	r12,8
800045fa:	f0 1f 00 99 	mcall	8000485c <st7529_init+0x788>
800045fe:	36 48       	mov	r8,100
80004600:	ef 48 ff e0 	st.w	r7[-32],r8
80004604:	e0 68 78 40 	mov	r8,30784
80004608:	ea 18 01 7d 	orh	r8,0x17d
8000460c:	ef 48 ff dc 	st.w	r7[-36],r8
80004610:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004614:	ef 48 ff e8 	st.w	r7[-24],r8
80004618:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000461c:	ef 48 ff e4 	st.w	r7[-28],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004620:	ee f0 ff e8 	ld.w	r0,r7[-24]
80004624:	30 01       	mov	r1,0
80004626:	ee f2 ff e4 	ld.w	r2,r7[-28]
8000462a:	30 03       	mov	r3,0
8000462c:	e2 02 02 4a 	mul	r10,r1,r2
80004630:	e6 00 02 48 	mul	r8,r3,r0
80004634:	10 0a       	add	r10,r8
80004636:	e0 02 06 48 	mulu.d	r8,r0,r2
8000463a:	12 0a       	add	r10,r9
8000463c:	14 99       	mov	r9,r10
8000463e:	e0 6a 03 e7 	mov	r10,999
80004642:	30 0b       	mov	r11,0
80004644:	f0 0a 00 0a 	add	r10,r8,r10
80004648:	f2 0b 00 4b 	adc	r11,r9,r11
8000464c:	e0 68 03 e8 	mov	r8,1000
80004650:	30 09       	mov	r9,0
80004652:	f0 1f 00 81 	mcall	80004854 <st7529_init+0x780>
80004656:	14 98       	mov	r8,r10
80004658:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000465a:	ef 48 ff f0 	st.w	r7[-16],r8
8000465e:	ee c8 00 a4 	sub	r8,r7,164
80004662:	ef 48 ff ec 	st.w	r7[-20],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004666:	e1 b8 00 42 	mfsr	r8,0x108
8000466a:	10 99       	mov	r9,r8
8000466c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004670:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004672:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004676:	70 09       	ld.w	r9,r8[0x0]
80004678:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000467c:	10 09       	add	r9,r8
8000467e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004682:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80004684:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004688:	30 08       	mov	r8,0
8000468a:	f3 68 00 08 	st.b	r9[8],r8
8000468e:	ee c8 00 a4 	sub	r8,r7,164
80004692:	ef 48 ff f4 	st.w	r7[-12],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004696:	e1 b8 00 42 	mfsr	r8,0x108
8000469a:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000469e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046a2:	f1 39 00 08 	ld.ub	r9,r8[8]
800046a6:	30 28       	mov	r8,2
800046a8:	f0 09 18 00 	cp.b	r9,r8
800046ac:	c0 31       	brne	800046b2 <st7529_init+0x5de>
    return false;
800046ae:	30 08       	mov	r8,0
800046b0:	c4 38       	rjmp	80004736 <st7529_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800046b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046b6:	f1 39 00 08 	ld.ub	r9,r8[8]
800046ba:	30 18       	mov	r8,1
800046bc:	f0 09 18 00 	cp.b	r9,r8
800046c0:	c0 31       	brne	800046c6 <st7529_init+0x5f2>
    return true;
800046c2:	30 18       	mov	r8,1
800046c4:	c3 98       	rjmp	80004736 <st7529_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800046c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046ca:	70 09       	ld.w	r9,r8[0x0]
800046cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046d0:	70 18       	ld.w	r8,r8[0x4]
800046d2:	10 39       	cp.w	r9,r8
800046d4:	e0 88 00 1a 	brls	80004708 <st7529_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800046d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046dc:	70 08       	ld.w	r8,r8[0x0]
800046de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800046e2:	10 39       	cp.w	r9,r8
800046e4:	c1 02       	brcc	80004704 <st7529_init+0x630>
800046e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046ea:	70 18       	ld.w	r8,r8[0x4]
800046ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800046f0:	10 39       	cp.w	r9,r8
800046f2:	e0 88 00 09 	brls	80004704 <st7529_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800046f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800046fa:	30 18       	mov	r8,1
800046fc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004700:	30 18       	mov	r8,1
80004702:	c1 a8       	rjmp	80004736 <st7529_init+0x662>
    }
    return false;
80004704:	30 08       	mov	r8,0
80004706:	c1 88       	rjmp	80004736 <st7529_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004708:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000470c:	70 08       	ld.w	r8,r8[0x0]
8000470e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004712:	10 39       	cp.w	r9,r8
80004714:	c0 93       	brcs	80004726 <st7529_init+0x652>
80004716:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000471a:	70 18       	ld.w	r8,r8[0x4]
8000471c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004720:	10 39       	cp.w	r9,r8
80004722:	e0 88 00 09 	brls	80004734 <st7529_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80004726:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000472a:	30 18       	mov	r8,1
8000472c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80004730:	30 18       	mov	r8,1
80004732:	c0 28       	rjmp	80004736 <st7529_init+0x662>
    }
    return false;
80004734:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80004736:	58 08       	cp.w	r8,0
80004738:	ca b0       	breq	8000468e <st7529_init+0x5ba>
	st7529_delay_ms(100);
    st7529_write_cmd(ST7529_PWRCTRL);
8000473a:	32 0c       	mov	r12,32
8000473c:	f0 1f 00 47 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_PWRCTRL_PARAM0);
80004740:	30 bc       	mov	r12,11
80004742:	f0 1f 00 47 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_VOLCTRL);
80004746:	e0 6c 00 81 	mov	r12,129
8000474a:	f0 1f 00 44 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_VOLCTRL_PARAM0);
8000474e:	32 ac       	mov	r12,42
80004750:	f0 1f 00 43 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_VOLCTRL_PARAM1);
80004754:	30 4c       	mov	r12,4
80004756:	f0 1f 00 42 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISCTRL);
8000475a:	e0 6c 00 ca 	mov	r12,202
8000475e:	f0 1f 00 3f 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_DISCTRL_PARAM0);
80004762:	30 0c       	mov	r12,0
80004764:	f0 1f 00 3e 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM1);
80004768:	32 3c       	mov	r12,35
8000476a:	f0 1f 00 3d 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_DISCTRL_PARAM2);
8000476e:	30 0c       	mov	r12,0
80004770:	f0 1f 00 3b 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_DISINV);
80004774:	e0 6c 00 a7 	mov	r12,167
80004778:	f0 1f 00 38 	mcall	80004858 <st7529_init+0x784>
    st7529_write_cmd(ST7529_COMSCN);
8000477c:	e0 6c 00 bb 	mov	r12,187
80004780:	f0 1f 00 36 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_COMSCN_PARAM0);
80004784:	30 2c       	mov	r12,2
80004786:	f0 1f 00 36 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_DATSDR);
8000478a:	e0 6c 00 bc 	mov	r12,188
8000478e:	f0 1f 00 33 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_DATSDR_PARAM0);
80004792:	30 4c       	mov	r12,4
80004794:	f0 1f 00 32 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM1);
80004798:	30 0c       	mov	r12,0
8000479a:	f0 1f 00 31 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_DATSDR_PARAM2);
8000479e:	30 2c       	mov	r12,2
800047a0:	f0 1f 00 2f 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_LASET);
800047a4:	37 5c       	mov	r12,117
800047a6:	f0 1f 00 2d 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_LASET_PARAM0);
800047aa:	30 0c       	mov	r12,0
800047ac:	f0 1f 00 2c 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_LASET_PARAM1);
800047b0:	e0 6c 00 9f 	mov	r12,159
800047b4:	f0 1f 00 2a 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_CASET);
800047b8:	31 5c       	mov	r12,21
800047ba:	f0 1f 00 28 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_CASET_PARAM0);
800047be:	30 0c       	mov	r12,0
800047c0:	f0 1f 00 27 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_CASET_PARAM1);
800047c4:	35 4c       	mov	r12,84
800047c6:	f0 1f 00 26 	mcall	8000485c <st7529_init+0x788>

    st7529_write_cmd(ST7529_EXTOUT);
800047ca:	33 1c       	mov	r12,49
800047cc:	f0 1f 00 23 	mcall	80004858 <st7529_init+0x784>
    st7529_write_cmd(ST7529_ANASET);
800047d0:	33 2c       	mov	r12,50
800047d2:	f0 1f 00 22 	mcall	80004858 <st7529_init+0x784>
    st7529_write_data(ST7529_ANASET_PARAM0);
800047d6:	30 1c       	mov	r12,1
800047d8:	f0 1f 00 21 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM1);
800047dc:	30 0c       	mov	r12,0
800047de:	f0 1f 00 20 	mcall	8000485c <st7529_init+0x788>
    st7529_write_data(ST7529_ANASET_PARAM2);
800047e2:	30 2c       	mov	r12,2
800047e4:	f0 1f 00 1e 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_SWINT);
800047e8:	33 4c       	mov	r12,52
800047ea:	f0 1f 00 1c 	mcall	80004858 <st7529_init+0x784>

    st7529_write_cmd(ST7529_EXTIN);
800047ee:	33 0c       	mov	r12,48
800047f0:	f0 1f 00 1a 	mcall	80004858 <st7529_init+0x784>
	
	st7529_write_cmd(ST7529_RAMWR);
800047f4:	35 cc       	mov	r12,92
800047f6:	f0 1f 00 19 	mcall	80004858 <st7529_init+0x784>
	
	// Clear Display
	for(int i=0; i<41000; i++){
800047fa:	30 08       	mov	r8,0
800047fc:	ef 48 ff 68 	st.w	r7[-152],r8
80004800:	c0 98       	rjmp	80004812 <st7529_init+0x73e>
		st7529_write_data(0x00);
80004802:	30 0c       	mov	r12,0
80004804:	f0 1f 00 16 	mcall	8000485c <st7529_init+0x788>
    st7529_write_cmd(ST7529_EXTIN);
	
	st7529_write_cmd(ST7529_RAMWR);
	
	// Clear Display
	for(int i=0; i<41000; i++){
80004808:	ee f8 ff 68 	ld.w	r8,r7[-152]
8000480c:	2f f8       	sub	r8,-1
8000480e:	ef 48 ff 68 	st.w	r7[-152],r8
80004812:	ee f8 ff 68 	ld.w	r8,r7[-152]
80004816:	e0 48 a0 27 	cp.w	r8,40999
8000481a:	fe 9a ff f4 	brle	80004802 <st7529_init+0x72e>
		st7529_write_data(0x00);
	}
	
	st7529_write_cmd(ST7529_DISON);
8000481e:	e0 6c 00 af 	mov	r12,175
80004822:	f0 1f 00 0e 	mcall	80004858 <st7529_init+0x784>
80004826:	30 18       	mov	r8,1
80004828:	ef 48 ff fc 	st.w	r7[-4],r8
8000482c:	fc 1a 40 00 	movh	r10,0x4000
80004830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004834:	a5 98       	lsr	r8,0x5
80004836:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000483a:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000483e:	30 1b       	mov	r11,1
80004840:	f6 09 09 49 	lsl	r9,r11,r9
80004844:	a9 68       	lsl	r8,0x8
80004846:	f4 08 00 08 	add	r8,r10,r8
8000484a:	2a c8       	sub	r8,-84
8000484c:	91 09       	st.w	r8[0x0],r9
	
    st7529_CS_SET();
}
8000484e:	2c 9d       	sub	sp,-220
80004850:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80004854:	80 00       	ld.sh	r0,r0[0x0]
80004856:	59 32       	cp.w	r2,19
80004858:	80 00       	ld.sh	r0,r0[0x0]
8000485a:	48 60       	lddpc	r0,80004870 <st7529_write_cmd+0x10>
8000485c:	80 00       	ld.sh	r0,r0[0x0]
8000485e:	49 30       	lddpc	r0,800048a8 <st7529_write_cmd+0x48>

80004860 <st7529_write_cmd>:

static inline void st7529_write_cmd(uint8_t data){
80004860:	eb cd 40 80 	pushm	r7,lr
80004864:	1a 97       	mov	r7,sp
80004866:	20 5d       	sub	sp,20
80004868:	18 98       	mov	r8,r12
8000486a:	ef 68 ff ec 	st.b	r7[-20],r8
8000486e:	31 28       	mov	r8,18
80004870:	ef 48 ff f0 	st.w	r7[-16],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004874:	fc 1a 40 00 	movh	r10,0x4000
80004878:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000487c:	a5 98       	lsr	r8,0x5
8000487e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004882:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004886:	30 1b       	mov	r11,1
80004888:	f6 09 09 49 	lsl	r9,r11,r9
8000488c:	a9 68       	lsl	r8,0x8
8000488e:	f4 08 00 08 	add	r8,r10,r8
80004892:	2a 88       	sub	r8,-88
80004894:	91 09       	st.w	r8[0x0],r9
80004896:	32 b8       	mov	r8,43
80004898:	ef 48 ff f4 	st.w	r7[-12],r8
8000489c:	fc 1a 40 00 	movh	r10,0x4000
800048a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048a4:	a5 98       	lsr	r8,0x5
800048a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800048aa:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800048ae:	30 1b       	mov	r11,1
800048b0:	f6 09 09 49 	lsl	r9,r11,r9
800048b4:	a9 68       	lsl	r8,0x8
800048b6:	f4 08 00 08 	add	r8,r10,r8
800048ba:	2a 88       	sub	r8,-88
800048bc:	91 09       	st.w	r8[0x0],r9
    st7529_A0_CLR();
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
800048be:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800048c2:	10 9c       	mov	r12,r8
800048c4:	f0 1f 00 19 	mcall	80004928 <st7529_write_cmd+0xc8>
	
	st7529_delay_write();
800048c8:	f0 1f 00 19 	mcall	8000492c <st7529_write_cmd+0xcc>
800048cc:	32 b8       	mov	r8,43
800048ce:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
800048d2:	fc 1a 40 00 	movh	r10,0x4000
800048d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048da:	a5 98       	lsr	r8,0x5
800048dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800048e0:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800048e4:	30 1b       	mov	r11,1
800048e6:	f6 09 09 49 	lsl	r9,r11,r9
800048ea:	a9 68       	lsl	r8,0x8
800048ec:	f4 08 00 08 	add	r8,r10,r8
800048f0:	2a c8       	sub	r8,-84
800048f2:	91 09       	st.w	r8[0x0],r9
800048f4:	31 28       	mov	r8,18
800048f6:	ef 48 ff fc 	st.w	r7[-4],r8
800048fa:	fc 1a 40 00 	movh	r10,0x4000
800048fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004902:	a5 98       	lsr	r8,0x5
80004904:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004908:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000490c:	30 1b       	mov	r11,1
8000490e:	f6 09 09 49 	lsl	r9,r11,r9
80004912:	a9 68       	lsl	r8,0x8
80004914:	f4 08 00 08 	add	r8,r10,r8
80004918:	2a c8       	sub	r8,-84
8000491a:	91 09       	st.w	r8[0x0],r9
	
    st7529_WR_SET();
    st7529_A0_SET();
	
	st7529_delay_write();
8000491c:	f0 1f 00 04 	mcall	8000492c <st7529_write_cmd+0xcc>
}
80004920:	2f bd       	sub	sp,-20
80004922:	e3 cd 80 80 	ldm	sp++,r7,pc
80004926:	00 00       	add	r0,r0
80004928:	80 00       	ld.sh	r0,r0[0x0]
8000492a:	40 64       	lddsp	r4,sp[0x18]
8000492c:	80 00       	ld.sh	r0,r0[0x0]
8000492e:	40 c0       	lddsp	r0,sp[0x30]

80004930 <st7529_write_data>:

static inline void st7529_write_data(uint8_t data){
80004930:	eb cd 40 80 	pushm	r7,lr
80004934:	1a 97       	mov	r7,sp
80004936:	20 3d       	sub	sp,12
80004938:	18 98       	mov	r8,r12
8000493a:	ef 68 ff f4 	st.b	r7[-12],r8
8000493e:	32 b8       	mov	r8,43
80004940:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
80004944:	fc 1a 40 00 	movh	r10,0x4000
80004948:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000494c:	a5 98       	lsr	r8,0x5
8000494e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004952:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004956:	30 1b       	mov	r11,1
80004958:	f6 09 09 49 	lsl	r9,r11,r9
8000495c:	a9 68       	lsl	r8,0x8
8000495e:	f4 08 00 08 	add	r8,r10,r8
80004962:	2a 88       	sub	r8,-88
80004964:	91 09       	st.w	r8[0x0],r9
    st7529_WR_CLR();
	
    st7529_D07_WRITE(data);
80004966:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000496a:	10 9c       	mov	r12,r8
8000496c:	f0 1f 00 0f 	mcall	800049a8 <st7529_write_data+0x78>
	
	st7529_delay_write();
80004970:	f0 1f 00 0f 	mcall	800049ac <st7529_write_data+0x7c>
80004974:	32 b8       	mov	r8,43
80004976:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
8000497a:	fc 1a 40 00 	movh	r10,0x4000
8000497e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004982:	a5 98       	lsr	r8,0x5
80004984:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004988:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
8000498c:	30 1b       	mov	r11,1
8000498e:	f6 09 09 49 	lsl	r9,r11,r9
80004992:	a9 68       	lsl	r8,0x8
80004994:	f4 08 00 08 	add	r8,r10,r8
80004998:	2a c8       	sub	r8,-84
8000499a:	91 09       	st.w	r8[0x0],r9

    st7529_WR_SET(); 
	
	st7529_delay_write();
8000499c:	f0 1f 00 04 	mcall	800049ac <st7529_write_data+0x7c>
}
800049a0:	2f dd       	sub	sp,-12
800049a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800049a6:	00 00       	add	r0,r0
800049a8:	80 00       	ld.sh	r0,r0[0x0]
800049aa:	40 64       	lddsp	r4,sp[0x18]
800049ac:	80 00       	ld.sh	r0,r0[0x0]
800049ae:	40 c0       	lddsp	r0,sp[0x30]

800049b0 <st7529_put_5x7_text>:
// len: length of character string (not including null termination)
// NOTES:
// To avoid reads, this function assumes two rows of cleared pixels above
// each character.

void st7529_put_5x7_text(uint8_t x, uint8_t y, char *str, uint32_t len){
800049b0:	eb cd 40 80 	pushm	r7,lr
800049b4:	1a 97       	mov	r7,sp
800049b6:	20 ad       	sub	sp,40
800049b8:	16 98       	mov	r8,r11
800049ba:	ef 4a ff dc 	st.w	r7[-36],r10
800049be:	ef 49 ff d8 	st.w	r7[-40],r9
800049c2:	18 99       	mov	r9,r12
800049c4:	ef 69 ff e4 	st.b	r7[-28],r9
800049c8:	ef 68 ff e0 	st.b	r7[-32],r8
800049cc:	30 18       	mov	r8,1
800049ce:	ef 48 ff f8 	st.w	r7[-8],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_clr_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrc = 1 << (pin & 0x1F);
800049d2:	fc 1a 40 00 	movh	r10,0x4000
800049d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049da:	a5 98       	lsr	r8,0x5
800049dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800049e0:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
800049e4:	30 1b       	mov	r11,1
800049e6:	f6 09 09 49 	lsl	r9,r11,r9
800049ea:	a9 68       	lsl	r8,0x8
800049ec:	f4 08 00 08 	add	r8,r10,r8
800049f0:	2a 88       	sub	r8,-88
800049f2:	91 09       	st.w	r8[0x0],r9

    st7529_CS_CLR();
	
	x = x + ST7529_XOFFSET;
800049f4:	ef 38 ff e4 	ld.ub	r8,r7[-28]
800049f8:	2f 08       	sub	r8,-16
800049fa:	ef 68 ff e4 	st.b	r7[-28],r8
	y = y + ST7529_YOFFSET;
	
    // Set Start and End Lines/Columns
    uint32_t end_line = x+6*len-1;
800049fe:	ef 3a ff e4 	ld.ub	r10,r7[-28]
80004a02:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004a06:	12 98       	mov	r8,r9
80004a08:	a1 78       	lsl	r8,0x1
80004a0a:	12 08       	add	r8,r9
80004a0c:	a1 78       	lsl	r8,0x1
80004a0e:	f4 08 00 08 	add	r8,r10,r8
80004a12:	20 18       	sub	r8,1
80004a14:	ef 48 ff e8 	st.w	r7[-24],r8
    uint32_t end_col = y/3+2;
80004a18:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80004a1c:	e0 68 aa ab 	mov	r8,43691
80004a20:	ea 18 aa aa 	orh	r8,0xaaaa
80004a24:	f2 08 06 48 	mulu.d	r8,r9,r8
80004a28:	f2 08 16 01 	lsr	r8,r9,0x1
80004a2c:	5c 58       	castu.b	r8
80004a2e:	2f e8       	sub	r8,-2
80004a30:	ef 48 ff ec 	st.w	r7[-20],r8

    st7529_write_cmd(ST7529_LASET);
80004a34:	37 5c       	mov	r12,117
80004a36:	f0 1f 00 db 	mcall	80004da0 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(x);
80004a3a:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80004a3e:	10 9c       	mov	r12,r8
80004a40:	f0 1f 00 d9 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_line);
80004a44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004a48:	5c 58       	castu.b	r8
80004a4a:	10 9c       	mov	r12,r8
80004a4c:	f0 1f 00 d6 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>

    st7529_write_cmd(ST7529_CASET);
80004a50:	31 5c       	mov	r12,21
80004a52:	f0 1f 00 d4 	mcall	80004da0 <st7529_put_5x7_text+0x3f0>
    st7529_write_data(y/3);
80004a56:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80004a5a:	e0 68 aa ab 	mov	r8,43691
80004a5e:	ea 18 aa aa 	orh	r8,0xaaaa
80004a62:	f2 08 06 48 	mulu.d	r8,r9,r8
80004a66:	f2 08 16 01 	lsr	r8,r9,0x1
80004a6a:	5c 58       	castu.b	r8
80004a6c:	10 9c       	mov	r12,r8
80004a6e:	f0 1f 00 ce 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
    st7529_write_data(end_col);
80004a72:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004a76:	5c 58       	castu.b	r8
80004a78:	10 9c       	mov	r12,r8
80004a7a:	f0 1f 00 cb 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>

    // Write Text Data
    st7529_write_cmd(ST7529_RAMWR);
80004a7e:	35 cc       	mov	r12,92
80004a80:	f0 1f 00 c8 	mcall	80004da0 <st7529_put_5x7_text+0x3f0>

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
80004a84:	30 08       	mov	r8,0
80004a86:	ef 48 ff f0 	st.w	r7[-16],r8
80004a8a:	c7 58       	rjmp	80004b74 <st7529_put_5x7_text+0x1c4>
        if((iline % 6) == 5){
80004a8c:	ee fa ff f0 	ld.w	r10,r7[-16]
80004a90:	e0 68 aa ab 	mov	r8,43691
80004a94:	ea 18 aa aa 	orh	r8,0xaaaa
80004a98:	f4 08 06 48 	mulu.d	r8,r10,r8
80004a9c:	a3 89       	lsr	r9,0x2
80004a9e:	12 98       	mov	r8,r9
80004aa0:	a1 78       	lsl	r8,0x1
80004aa2:	12 08       	add	r8,r9
80004aa4:	a1 78       	lsl	r8,0x1
80004aa6:	f4 08 01 09 	sub	r9,r10,r8
80004aaa:	58 59       	cp.w	r9,5
80004aac:	c0 b1       	brne	80004ac2 <st7529_put_5x7_text+0x112>
            st7529_write_data(0x00);
80004aae:	30 0c       	mov	r12,0
80004ab0:	f0 1f 00 bd 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004ab4:	30 0c       	mov	r12,0
80004ab6:	f0 1f 00 bc 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004aba:	30 0c       	mov	r12,0
80004abc:	f0 1f 00 ba 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004ac0:	c5 58       	rjmp	80004b6a <st7529_put_5x7_text+0x1ba>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80004ac2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004ac6:	e0 68 aa ab 	mov	r8,43691
80004aca:	ea 18 aa aa 	orh	r8,0xaaaa
80004ace:	f2 08 06 48 	mulu.d	r8,r9,r8
80004ad2:	f2 08 16 02 	lsr	r8,r9,0x2
80004ad6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004ada:	f2 08 00 08 	add	r8,r9,r8
80004ade:	11 88       	ld.ub	r8,r8[0x0]
80004ae0:	10 99       	mov	r9,r8
80004ae2:	12 98       	mov	r8,r9
80004ae4:	a3 68       	lsl	r8,0x2
80004ae6:	12 08       	add	r8,r9
80004ae8:	10 9b       	mov	r11,r8
80004aea:	ee fa ff f0 	ld.w	r10,r7[-16]
80004aee:	e0 68 aa ab 	mov	r8,43691
80004af2:	ea 18 aa aa 	orh	r8,0xaaaa
80004af6:	f4 08 06 48 	mulu.d	r8,r10,r8
80004afa:	a3 89       	lsr	r9,0x2
80004afc:	12 98       	mov	r8,r9
80004afe:	a1 78       	lsl	r8,0x1
80004b00:	12 08       	add	r8,r9
80004b02:	a1 78       	lsl	r8,0x1
80004b04:	f4 08 01 09 	sub	r9,r10,r8
80004b08:	f6 09 00 08 	add	r8,r11,r9
80004b0c:	f0 c8 00 a0 	sub	r8,r8,160
80004b10:	fe f9 02 98 	ld.w	r9,pc[664]
80004b14:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004b18:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<6))
80004b1c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004b20:	e2 18 00 40 	andl	r8,0x40,COH
80004b24:	c0 60       	breq	80004b30 <st7529_put_5x7_text+0x180>
                st7529_write_data(0xFF);
80004b26:	e0 6c 00 ff 	mov	r12,255
80004b2a:	f0 1f 00 9f 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004b2e:	c0 48       	rjmp	80004b36 <st7529_put_5x7_text+0x186>
            else
                st7529_write_data(0x00);
80004b30:	30 0c       	mov	r12,0
80004b32:	f0 1f 00 9d 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<5))
80004b36:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004b3a:	e2 18 00 20 	andl	r8,0x20,COH
80004b3e:	c0 60       	breq	80004b4a <st7529_put_5x7_text+0x19a>
                st7529_write_data(0xFF);
80004b40:	e0 6c 00 ff 	mov	r12,255
80004b44:	f0 1f 00 98 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004b48:	c0 48       	rjmp	80004b50 <st7529_put_5x7_text+0x1a0>
            else
                st7529_write_data(0x00);
80004b4a:	30 0c       	mov	r12,0
80004b4c:	f0 1f 00 96 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<4))
80004b50:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004b54:	e2 18 00 10 	andl	r8,0x10,COH
80004b58:	c0 60       	breq	80004b64 <st7529_put_5x7_text+0x1b4>
                st7529_write_data(0xFF);
80004b5a:	e0 6c 00 ff 	mov	r12,255
80004b5e:	f0 1f 00 92 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004b62:	c0 48       	rjmp	80004b6a <st7529_put_5x7_text+0x1ba>
            else
                st7529_write_data(0x00);
80004b64:	30 0c       	mov	r12,0
80004b66:	f0 1f 00 90 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
    st7529_write_cmd(ST7529_RAMWR);

    uint32_t iline;  
    uint8_t char_byte;

    for(iline=0; iline<6*len; iline++){
80004b6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b6e:	2f f8       	sub	r8,-1
80004b70:	ef 48 ff f0 	st.w	r7[-16],r8
80004b74:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004b78:	12 98       	mov	r8,r9
80004b7a:	a1 78       	lsl	r8,0x1
80004b7c:	12 08       	add	r8,r9
80004b7e:	a1 78       	lsl	r8,0x1
80004b80:	10 99       	mov	r9,r8
80004b82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b86:	10 39       	cp.w	r9,r8
80004b88:	fe 9b ff 82 	brhi	80004a8c <st7529_put_5x7_text+0xdc>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004b8c:	30 08       	mov	r8,0
80004b8e:	ef 48 ff f0 	st.w	r7[-16],r8
80004b92:	c7 48       	rjmp	80004c7a <st7529_put_5x7_text+0x2ca>
        if((iline % 6) == 5){
80004b94:	ee fa ff f0 	ld.w	r10,r7[-16]
80004b98:	e0 68 aa ab 	mov	r8,43691
80004b9c:	ea 18 aa aa 	orh	r8,0xaaaa
80004ba0:	f4 08 06 48 	mulu.d	r8,r10,r8
80004ba4:	a3 89       	lsr	r9,0x2
80004ba6:	12 98       	mov	r8,r9
80004ba8:	a1 78       	lsl	r8,0x1
80004baa:	12 08       	add	r8,r9
80004bac:	a1 78       	lsl	r8,0x1
80004bae:	f4 08 01 09 	sub	r9,r10,r8
80004bb2:	58 59       	cp.w	r9,5
80004bb4:	c0 b1       	brne	80004bca <st7529_put_5x7_text+0x21a>
            st7529_write_data(0x00);
80004bb6:	30 0c       	mov	r12,0
80004bb8:	f0 1f 00 7b 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004bbc:	30 0c       	mov	r12,0
80004bbe:	f0 1f 00 7a 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004bc2:	30 0c       	mov	r12,0
80004bc4:	f0 1f 00 78 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004bc8:	c5 48       	rjmp	80004c70 <st7529_put_5x7_text+0x2c0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80004bca:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004bce:	e0 68 aa ab 	mov	r8,43691
80004bd2:	ea 18 aa aa 	orh	r8,0xaaaa
80004bd6:	f2 08 06 48 	mulu.d	r8,r9,r8
80004bda:	f2 08 16 02 	lsr	r8,r9,0x2
80004bde:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004be2:	f2 08 00 08 	add	r8,r9,r8
80004be6:	11 88       	ld.ub	r8,r8[0x0]
80004be8:	10 99       	mov	r9,r8
80004bea:	12 98       	mov	r8,r9
80004bec:	a3 68       	lsl	r8,0x2
80004bee:	12 08       	add	r8,r9
80004bf0:	10 9b       	mov	r11,r8
80004bf2:	ee fa ff f0 	ld.w	r10,r7[-16]
80004bf6:	e0 68 aa ab 	mov	r8,43691
80004bfa:	ea 18 aa aa 	orh	r8,0xaaaa
80004bfe:	f4 08 06 48 	mulu.d	r8,r10,r8
80004c02:	a3 89       	lsr	r9,0x2
80004c04:	12 98       	mov	r8,r9
80004c06:	a1 78       	lsl	r8,0x1
80004c08:	12 08       	add	r8,r9
80004c0a:	a1 78       	lsl	r8,0x1
80004c0c:	f4 08 01 09 	sub	r9,r10,r8
80004c10:	f6 09 00 08 	add	r8,r11,r9
80004c14:	f0 c8 00 a0 	sub	r8,r8,160
80004c18:	4e 49       	lddpc	r9,80004da8 <st7529_put_5x7_text+0x3f8>
80004c1a:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004c1e:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<3))
80004c22:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004c26:	e2 18 00 08 	andl	r8,0x8,COH
80004c2a:	c0 60       	breq	80004c36 <st7529_put_5x7_text+0x286>
                st7529_write_data(0xFF);
80004c2c:	e0 6c 00 ff 	mov	r12,255
80004c30:	f0 1f 00 5d 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004c34:	c0 48       	rjmp	80004c3c <st7529_put_5x7_text+0x28c>
            else
                st7529_write_data(0x00);
80004c36:	30 0c       	mov	r12,0
80004c38:	f0 1f 00 5b 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<2))
80004c3c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004c40:	e2 18 00 04 	andl	r8,0x4,COH
80004c44:	c0 60       	breq	80004c50 <st7529_put_5x7_text+0x2a0>
                st7529_write_data(0xFF);
80004c46:	e0 6c 00 ff 	mov	r12,255
80004c4a:	f0 1f 00 57 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004c4e:	c0 48       	rjmp	80004c56 <st7529_put_5x7_text+0x2a6>
            else
                st7529_write_data(0x00);
80004c50:	30 0c       	mov	r12,0
80004c52:	f0 1f 00 55 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>

            if(char_byte & (1<<1))
80004c56:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004c5a:	e2 18 00 02 	andl	r8,0x2,COH
80004c5e:	c0 60       	breq	80004c6a <st7529_put_5x7_text+0x2ba>
                st7529_write_data(0xFF);
80004c60:	e0 6c 00 ff 	mov	r12,255
80004c64:	f0 1f 00 50 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004c68:	c0 48       	rjmp	80004c70 <st7529_put_5x7_text+0x2c0>
            else
                st7529_write_data(0x00);
80004c6a:	30 0c       	mov	r12,0
80004c6c:	f0 1f 00 4e 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004c70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c74:	2f f8       	sub	r8,-1
80004c76:	ef 48 ff f0 	st.w	r7[-16],r8
80004c7a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004c7e:	12 98       	mov	r8,r9
80004c80:	a1 78       	lsl	r8,0x1
80004c82:	12 08       	add	r8,r9
80004c84:	a1 78       	lsl	r8,0x1
80004c86:	10 99       	mov	r9,r8
80004c88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c8c:	10 39       	cp.w	r9,r8
80004c8e:	fe 9b ff 83 	brhi	80004b94 <st7529_put_5x7_text+0x1e4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004c92:	30 08       	mov	r8,0
80004c94:	ef 48 ff f0 	st.w	r7[-16],r8
80004c98:	c6 18       	rjmp	80004d5a <st7529_put_5x7_text+0x3aa>
        if((iline % 6) == 5){
80004c9a:	ee fa ff f0 	ld.w	r10,r7[-16]
80004c9e:	e0 68 aa ab 	mov	r8,43691
80004ca2:	ea 18 aa aa 	orh	r8,0xaaaa
80004ca6:	f4 08 06 48 	mulu.d	r8,r10,r8
80004caa:	a3 89       	lsr	r9,0x2
80004cac:	12 98       	mov	r8,r9
80004cae:	a1 78       	lsl	r8,0x1
80004cb0:	12 08       	add	r8,r9
80004cb2:	a1 78       	lsl	r8,0x1
80004cb4:	f4 08 01 09 	sub	r9,r10,r8
80004cb8:	58 59       	cp.w	r9,5
80004cba:	c0 b1       	brne	80004cd0 <st7529_put_5x7_text+0x320>
            st7529_write_data(0x00);
80004cbc:	30 0c       	mov	r12,0
80004cbe:	f0 1f 00 3a 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004cc2:	30 0c       	mov	r12,0
80004cc4:	f0 1f 00 38 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004cc8:	30 0c       	mov	r12,0
80004cca:	f0 1f 00 37 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004cce:	c4 18       	rjmp	80004d50 <st7529_put_5x7_text+0x3a0>
        }
        else{
            char_byte = st7529_5x7_font[(*(str+iline/6)-0x20)*5+iline%6];
80004cd0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004cd4:	e0 68 aa ab 	mov	r8,43691
80004cd8:	ea 18 aa aa 	orh	r8,0xaaaa
80004cdc:	f2 08 06 48 	mulu.d	r8,r9,r8
80004ce0:	f2 08 16 02 	lsr	r8,r9,0x2
80004ce4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004ce8:	f2 08 00 08 	add	r8,r9,r8
80004cec:	11 88       	ld.ub	r8,r8[0x0]
80004cee:	10 99       	mov	r9,r8
80004cf0:	12 98       	mov	r8,r9
80004cf2:	a3 68       	lsl	r8,0x2
80004cf4:	12 08       	add	r8,r9
80004cf6:	10 9b       	mov	r11,r8
80004cf8:	ee fa ff f0 	ld.w	r10,r7[-16]
80004cfc:	e0 68 aa ab 	mov	r8,43691
80004d00:	ea 18 aa aa 	orh	r8,0xaaaa
80004d04:	f4 08 06 48 	mulu.d	r8,r10,r8
80004d08:	a3 89       	lsr	r9,0x2
80004d0a:	12 98       	mov	r8,r9
80004d0c:	a1 78       	lsl	r8,0x1
80004d0e:	12 08       	add	r8,r9
80004d10:	a1 78       	lsl	r8,0x1
80004d12:	f4 08 01 09 	sub	r9,r10,r8
80004d16:	f6 09 00 08 	add	r8,r11,r9
80004d1a:	f0 c8 00 a0 	sub	r8,r8,160
80004d1e:	4a 39       	lddpc	r9,80004da8 <st7529_put_5x7_text+0x3f8>
80004d20:	f2 08 07 08 	ld.ub	r8,r9[r8]
80004d24:	ef 68 ff f7 	st.b	r7[-9],r8

            if(char_byte & (1<<0))
80004d28:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004d2c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004d30:	5c 58       	castu.b	r8
80004d32:	c0 60       	breq	80004d3e <st7529_put_5x7_text+0x38e>
                st7529_write_data(0xFF);
80004d34:	e0 6c 00 ff 	mov	r12,255
80004d38:	f0 1f 00 1b 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
80004d3c:	c0 48       	rjmp	80004d44 <st7529_put_5x7_text+0x394>
            else
                st7529_write_data(0x00);
80004d3e:	30 0c       	mov	r12,0
80004d40:	f0 1f 00 19 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>

            st7529_write_data(0x00);
80004d44:	30 0c       	mov	r12,0
80004d46:	f0 1f 00 18 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            st7529_write_data(0x00);
80004d4a:	30 0c       	mov	r12,0
80004d4c:	f0 1f 00 16 	mcall	80004da4 <st7529_put_5x7_text+0x3f4>
            else
                st7529_write_data(0x00);
        }
    }

    for(iline=0; iline<6*len; iline++){
80004d50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d54:	2f f8       	sub	r8,-1
80004d56:	ef 48 ff f0 	st.w	r7[-16],r8
80004d5a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004d5e:	12 98       	mov	r8,r9
80004d60:	a1 78       	lsl	r8,0x1
80004d62:	12 08       	add	r8,r9
80004d64:	a1 78       	lsl	r8,0x1
80004d66:	10 99       	mov	r9,r8
80004d68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004d6c:	10 39       	cp.w	r9,r8
80004d6e:	fe 9b ff 96 	brhi	80004c9a <st7529_put_5x7_text+0x2ea>
80004d72:	30 18       	mov	r8,1
80004d74:	ef 48 ff fc 	st.w	r7[-4],r8
 *       \ref gpio_local_enable_pin_output_driver can be called for this
 *       purpose.
 */
__always_inline static void gpio_local_set_gpio_pin(uint32_t pin)
{
	AVR32_GPIO_LOCAL.port[pin >> 5].ovrs = 1 << (pin & 0x1F);
80004d78:	fc 1a 40 00 	movh	r10,0x4000
80004d7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d80:	a5 98       	lsr	r8,0x5
80004d82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d86:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5
80004d8a:	30 1b       	mov	r11,1
80004d8c:	f6 09 09 49 	lsl	r9,r11,r9
80004d90:	a9 68       	lsl	r8,0x8
80004d92:	f4 08 00 08 	add	r8,r10,r8
80004d96:	2a c8       	sub	r8,-84
80004d98:	91 09       	st.w	r8[0x0],r9
            st7529_write_data(0x00);
        }
    }

    st7529_CS_SET();
}
80004d9a:	2f 6d       	sub	sp,-40
80004d9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004da0:	80 00       	ld.sh	r0,r0[0x0]
80004da2:	48 60       	lddpc	r0,80004db8 <st7529_put_5x7_text+0x408>
80004da4:	80 00       	ld.sh	r0,r0[0x0]
80004da6:	49 30       	lddpc	r0,80004df0 <usart_timeout_handler+0x24>
80004da8:	80 00       	ld.sh	r0,r0[0x0]
80004daa:	bf 30       	mul	r0,pc
80004dac:	54 69       	stdsp	sp[0x118],r9
80004dae:	6d 65       	ld.w	r5,r6[0x58]
80004db0:	3a 20       	mov	r0,-94
80004db2:	25 64       	sub	r4,86
80004db4:	3a 25       	mov	r5,-94
80004db6:	64 3a       	ld.w	r10,r2[0xc]
80004db8:	25 66       	sub	r6,86
80004dba:	00 00       	add	r0,r0
80004dbc:	4e 75       	lddpc	r5,80004f58 <main+0xe8>
80004dbe:	6d 20       	ld.w	r0,r6[0x48]
80004dc0:	53 61       	stdsp	sp[0xd8],r1
80004dc2:	74 73       	ld.w	r3,r10[0x1c]
80004dc4:	3a 20       	mov	r0,-94
80004dc6:	25 64       	sub	r4,86
80004dc8:	00 00       	add	r0,r0
	...

80004dcc <usart_timeout_handler>:
volatile uint8_t sens_rx_buffer[6];
volatile uint32_t sens_rx_flag = 0;
volatile uint32_t sens_rx_state = SENS_STATE_PRESSURE;

// GPS USART TIMEOUT INTERRUPT
ISR(usart_timeout_handler, AVR32_USART3_IRQ, 0){
80004dcc:	eb cd 40 80 	pushm	r7,lr
80004dd0:	1a 97       	mov	r7,sp
	// Reset Timeout Flag
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
80004dd2:	fe 78 3c 00 	mov	r8,-50176
80004dd6:	fe 79 3c 00 	mov	r9,-50176
80004dda:	72 09       	ld.w	r9,r9[0x0]
80004ddc:	ab b9       	sbr	r9,0xb
80004dde:	91 09       	st.w	r8[0x0],r9
	
	usart_timeout_flag = 1;
80004de0:	48 98       	lddpc	r8,80004e04 <usart_timeout_handler+0x38>
80004de2:	30 19       	mov	r9,1
80004de4:	91 09       	st.w	r8[0x0],r9
	
	// Parse GPS Data
	uc530_parse_default(usart_rx_buffer,
80004de6:	48 9a       	lddpc	r10,80004e08 <usart_timeout_handler+0x3c>
80004de8:	e0 6b 02 58 	mov	r11,600
80004dec:	48 8c       	lddpc	r12,80004e0c <usart_timeout_handler+0x40>
80004dee:	f0 1f 00 09 	mcall	80004e10 <usart_timeout_handler+0x44>
						sizeof(usart_rx_buffer),
						&gps_data);
	
	// Reload DMA Address					
	pdca_load_channel(0,
80004df2:	e0 6a 02 58 	mov	r10,600
80004df6:	48 6b       	lddpc	r11,80004e0c <usart_timeout_handler+0x40>
80004df8:	30 0c       	mov	r12,0
80004dfa:	f0 1f 00 07 	mcall	80004e14 <usart_timeout_handler+0x48>
					  (void *)usart_rx_buffer,
					  sizeof(usart_rx_buffer));
}
80004dfe:	e3 cd 40 80 	ldm	sp++,r7,lr
80004e02:	d6 03       	rete
80004e04:	00 00       	add	r0,r0
80004e06:	06 08       	add	r8,r3
80004e08:	00 00       	add	r0,r0
80004e0a:	06 60       	and	r0,r3
80004e0c:	00 00       	add	r0,r0
80004e0e:	06 bc       	st.h	r3++,r12
80004e10:	80 00       	ld.sh	r0,r0[0x0]
80004e12:	3a d8       	mov	r8,-83
80004e14:	80 00       	ld.sh	r0,r0[0x0]
80004e16:	28 98       	sub	r8,-119

80004e18 <sens_rx_complete_handler>:

ISR(sens_rx_complete_handler, AVR32_PDCA_IRQ_1, 0){
80004e18:	eb cd 40 80 	pushm	r7,lr
80004e1c:	1a 97       	mov	r7,sp

	
	switch(sens_rx_state){
80004e1e:	49 18       	lddpc	r8,80004e60 <sens_rx_complete_handler+0x48>
80004e20:	70 08       	ld.w	r8,r8[0x0]
80004e22:	58 08       	cp.w	r8,0
80004e24:	c0 40       	breq	80004e2c <sens_rx_complete_handler+0x14>
80004e26:	58 18       	cp.w	r8,1
80004e28:	c1 00       	breq	80004e48 <sens_rx_complete_handler+0x30>
80004e2a:	c1 28       	rjmp	80004e4e <sens_rx_complete_handler+0x36>
		case SENS_STATE_PRESSURE:
			// Start Next Calculation
			twim_write_dma(&AVR32_TWIM0, 2, 0x77, sens_tx_buffer, 2);
80004e2c:	30 28       	mov	r8,2
80004e2e:	48 e9       	lddpc	r9,80004e64 <sens_rx_complete_handler+0x4c>
80004e30:	37 7a       	mov	r10,119
80004e32:	30 2b       	mov	r11,2
80004e34:	fe 7c 44 00 	mov	r12,-48128
80004e38:	f0 1f 00 0c 	mcall	80004e68 <sens_rx_complete_handler+0x50>
		
			// Do stuff with Pressure Data
			
			// Initiate Mag Transfer
			sens_rx_state = SENS_STATE_MAG;
80004e3c:	48 98       	lddpc	r8,80004e60 <sens_rx_complete_handler+0x48>
80004e3e:	30 19       	mov	r9,1
80004e40:	91 09       	st.w	r8[0x0],r9
			sens_rx_start();
80004e42:	f0 1f 00 0b 	mcall	80004e6c <sens_rx_complete_handler+0x54>
			break;
80004e46:	c0 48       	rjmp	80004e4e <sens_rx_complete_handler+0x36>
			
		case SENS_STATE_MAG:
			// Do Stuff With Data
			sens_rx_state = SENS_STATE_PRESSURE;
80004e48:	48 68       	lddpc	r8,80004e60 <sens_rx_complete_handler+0x48>
80004e4a:	30 09       	mov	r9,0
80004e4c:	91 09       	st.w	r8[0x0],r9
		default:
			break;			
	}	
	
	// Disable Interrupt By Writing To TCR
	AVR32_PDCA.channel[1].tcr = sizeof(sens_rx_buffer);
80004e4e:	fe 78 00 00 	mov	r8,-65536
80004e52:	30 69       	mov	r9,6
80004e54:	f1 49 00 48 	st.w	r8[72],r9
}
80004e58:	e3 cd 40 80 	ldm	sp++,r7,lr
80004e5c:	d6 03       	rete
80004e5e:	00 00       	add	r0,r0
80004e60:	00 00       	add	r0,r0
80004e62:	06 0c       	add	r12,r3
80004e64:	00 00       	add	r0,r0
80004e66:	00 08       	add	r8,r0
80004e68:	80 00       	ld.sh	r0,r0[0x0]
80004e6a:	51 10       	stdsp	sp[0x44],r0
80004e6c:	80 00       	ld.sh	r0,r0[0x0]
80004e6e:	53 a4       	stdsp	sp[0xe8],r4

80004e70 <main>:

int main (void)
{
80004e70:	eb cd 40 80 	pushm	r7,lr
80004e74:	1a 97       	mov	r7,sp
80004e76:	20 dd       	sub	sp,52
	char text[50];
	
	board_init();
80004e78:	f0 1f 00 2d 	mcall	80004f2c <main+0xbc>
	setup_clocks();
80004e7c:	f0 1f 00 2d 	mcall	80004f30 <main+0xc0>
 * \note This function must have been called at least once before using other
 *       functions in this interface.
 */
__always_inline static void gpio_local_init(void)
{
	Set_system_register(AVR32_CPUCR,
80004e80:	e1 b8 00 03 	mfsr	r8,0xc
80004e84:	b1 a8       	sbr	r8,0x10
80004e86:	e3 b8 00 03 	mtsr	0xc,r8
	
	gpio_local_init();
	st7529_init();
80004e8a:	f0 1f 00 2b 	mcall	80004f34 <main+0xc4>
	setup_gps_uart();
80004e8e:	f0 1f 00 2b 	mcall	80004f38 <main+0xc8>
	setup_uart_dma();
80004e92:	f0 1f 00 2b 	mcall	80004f3c <main+0xcc>
	setup_sens_twi();
80004e96:	f0 1f 00 2b 	mcall	80004f40 <main+0xd0>
	
	setup_magnetometer();
80004e9a:	f0 1f 00 2b 	mcall	80004f44 <main+0xd4>
	setup_barometer();
80004e9e:	f0 1f 00 2b 	mcall	80004f48 <main+0xd8>
	
	setup_interrupts();
80004ea2:	f0 1f 00 2b 	mcall	80004f4c <main+0xdc>
80004ea6:	c0 28       	rjmp	80004eaa <main+0x3a>
			
			st7529_put_5x7_text(0,9,text,12);
			
			sens_rx_start();
		}
	}
80004ea8:	d7 03       	nop
	setup_barometer();
	
	setup_interrupts();
	
	while(1){
		if(usart_timeout_flag){
80004eaa:	4a a8       	lddpc	r8,80004f50 <main+0xe0>
80004eac:	70 08       	ld.w	r8,r8[0x0]
80004eae:	58 08       	cp.w	r8,0
80004eb0:	cf c0       	breq	80004ea8 <main+0x38>
			usart_timeout_flag = 0;
80004eb2:	4a 88       	lddpc	r8,80004f50 <main+0xe0>
80004eb4:	30 09       	mov	r9,0
80004eb6:	91 09       	st.w	r8[0x0],r9
			
			sprintf(text,"Time: %d:%d:%f",
					gps_data.hour,gps_data.minute,gps_data.second);
80004eb8:	4a 78       	lddpc	r8,80004f54 <main+0xe4>
80004eba:	70 28       	ld.w	r8,r8[0x8]
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80004ebc:	10 9c       	mov	r12,r8
80004ebe:	f0 1f 00 27 	mcall	80004f58 <main+0xe8>
80004ec2:	14 98       	mov	r8,r10
80004ec4:	16 99       	mov	r9,r11
					gps_data.hour,gps_data.minute,gps_data.second);
80004ec6:	4a 4a       	lddpc	r10,80004f54 <main+0xe4>
80004ec8:	15 ca       	ld.ub	r10,r10[0x4]
80004eca:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80004ecc:	14 9c       	mov	r12,r10
					gps_data.hour,gps_data.minute,gps_data.second);
80004ece:	4a 2a       	lddpc	r10,80004f54 <main+0xe4>
80004ed0:	15 ba       	ld.ub	r10,r10[0x3]
80004ed2:	5c 5a       	castu.b	r10
	
	while(1){
		if(usart_timeout_flag){
			usart_timeout_flag = 0;
			
			sprintf(text,"Time: %d:%d:%f",
80004ed4:	14 9b       	mov	r11,r10
80004ed6:	ee ca 00 34 	sub	r10,r7,52
80004eda:	bb 29       	st.d	--sp,r8
80004edc:	1a dc       	st.w	--sp,r12
80004ede:	1a db       	st.w	--sp,r11
80004ee0:	49 fb       	lddpc	r11,80004f5c <main+0xec>
80004ee2:	14 9c       	mov	r12,r10
80004ee4:	f0 1f 00 1f 	mcall	80004f60 <main+0xf0>
80004ee8:	2f cd       	sub	sp,-16
					gps_data.hour,gps_data.minute,gps_data.second);
					
			st7529_put_5x7_text(0,0,text,17);
80004eea:	ee c8 00 34 	sub	r8,r7,52
80004eee:	31 19       	mov	r9,17
80004ef0:	10 9a       	mov	r10,r8
80004ef2:	30 0b       	mov	r11,0
80004ef4:	30 0c       	mov	r12,0
80004ef6:	f0 1f 00 1c 	mcall	80004f64 <main+0xf4>
			
			sprintf(text,"Num Sats: %d", gps_data.num_sats);
80004efa:	49 78       	lddpc	r8,80004f54 <main+0xe4>
80004efc:	f1 38 00 31 	ld.ub	r8,r8[49]
80004f00:	5c 58       	castu.b	r8
80004f02:	10 99       	mov	r9,r8
80004f04:	ee c8 00 34 	sub	r8,r7,52
80004f08:	1a d9       	st.w	--sp,r9
80004f0a:	49 8b       	lddpc	r11,80004f68 <main+0xf8>
80004f0c:	10 9c       	mov	r12,r8
80004f0e:	f0 1f 00 15 	mcall	80004f60 <main+0xf0>
80004f12:	2f fd       	sub	sp,-4
			
			st7529_put_5x7_text(0,9,text,12);
80004f14:	ee c8 00 34 	sub	r8,r7,52
80004f18:	30 c9       	mov	r9,12
80004f1a:	10 9a       	mov	r10,r8
80004f1c:	30 9b       	mov	r11,9
80004f1e:	30 0c       	mov	r12,0
80004f20:	f0 1f 00 11 	mcall	80004f64 <main+0xf4>
			
			sens_rx_start();
80004f24:	f0 1f 00 12 	mcall	80004f6c <main+0xfc>
		}
	}
80004f28:	cc 1b       	rjmp	80004eaa <main+0x3a>
80004f2a:	00 00       	add	r0,r0
80004f2c:	80 00       	ld.sh	r0,r0[0x0]
80004f2e:	54 90       	stdsp	sp[0x124],r0
80004f30:	80 00       	ld.sh	r0,r0[0x0]
80004f32:	4f 70       	lddpc	r0,8000510c <setup_sens_twi+0xa8>
80004f34:	80 00       	ld.sh	r0,r0[0x0]
80004f36:	40 d4       	lddsp	r4,sp[0x34]
80004f38:	80 00       	ld.sh	r0,r0[0x0]
80004f3a:	4f ec       	lddpc	r12,80005130 <twim_write_dma+0x20>
80004f3c:	80 00       	ld.sh	r0,r0[0x0]
80004f3e:	50 40       	stdsp	sp[0x10],r0
80004f40:	80 00       	ld.sh	r0,r0[0x0]
80004f42:	50 64       	stdsp	sp[0x18],r4
80004f44:	80 00       	ld.sh	r0,r0[0x0]
80004f46:	52 bc       	stdsp	sp[0xac],r12
80004f48:	80 00       	ld.sh	r0,r0[0x0]
80004f4a:	52 f0       	stdsp	sp[0xbc],r0
80004f4c:	80 00       	ld.sh	r0,r0[0x0]
80004f4e:	54 54       	stdsp	sp[0x114],r4
80004f50:	00 00       	add	r0,r0
80004f52:	06 08       	add	r8,r3
80004f54:	00 00       	add	r0,r0
80004f56:	06 60       	and	r0,r3
80004f58:	80 00       	ld.sh	r0,r0[0x0]
80004f5a:	58 d2       	cp.w	r2,13
80004f5c:	80 00       	ld.sh	r0,r0[0x0]
80004f5e:	4d ac       	lddpc	r12,800050c4 <setup_sens_twi+0x60>
80004f60:	80 00       	ld.sh	r0,r0[0x0]
80004f62:	5b 98       	cp.w	r8,-7
80004f64:	80 00       	ld.sh	r0,r0[0x0]
80004f66:	49 b0       	lddpc	r0,80004fd0 <setup_clocks+0x60>
80004f68:	80 00       	ld.sh	r0,r0[0x0]
80004f6a:	4d bc       	lddpc	r12,800050d4 <setup_sens_twi+0x70>
80004f6c:	80 00       	ld.sh	r0,r0[0x0]
80004f6e:	53 a4       	stdsp	sp[0xe8],r4

80004f70 <setup_clocks>:
}

void setup_clocks(void){
80004f70:	eb cd 40 80 	pushm	r7,lr
80004f74:	1a 97       	mov	r7,sp
80004f76:	20 dd       	sub	sp,52
	scif_disable_rc32out();
80004f78:	f0 1f 00 1b 	mcall	80004fe4 <setup_clocks+0x74>
	
	pcl_freq_param_t pcl_params;
	scif_gclk_opt_t gclk_opts;
	
	pcl_params.main_clk_src = PCL_MC_DFLL0;
80004f7c:	30 78       	mov	r8,7
80004f7e:	ef 48 ff dc 	st.w	r7[-36],r8
	pcl_params.cpu_f = CPU_FREQ;
80004f82:	e0 68 78 40 	mov	r8,30784
80004f86:	ea 18 01 7d 	orh	r8,0x17d
80004f8a:	ef 48 ff e0 	st.w	r7[-32],r8
	pcl_params.pba_f = CPU_FREQ;
80004f8e:	e0 68 78 40 	mov	r8,30784
80004f92:	ea 18 01 7d 	orh	r8,0x17d
80004f96:	ef 48 ff e4 	st.w	r7[-28],r8
	pcl_params.pbb_f = CPU_FREQ;
80004f9a:	e0 68 78 40 	mov	r8,30784
80004f9e:	ea 18 01 7d 	orh	r8,0x17d
80004fa2:	ef 48 ff e8 	st.w	r7[-24],r8
	pcl_params.pbc_f = CPU_FREQ;
80004fa6:	e0 68 78 40 	mov	r8,30784
80004faa:	ea 18 01 7d 	orh	r8,0x17d
80004fae:	ef 48 ff ec 	st.w	r7[-20],r8
	pcl_params.dfll_f = DFLL_FREQ;
80004fb2:	e0 68 e1 00 	mov	r8,57600
80004fb6:	ea 18 05 f5 	orh	r8,0x5f5
80004fba:	ef 48 ff f8 	st.w	r7[-8],r8
	
	gclk_opts.clock_source = SCIF_GCCTRL_SLOWCLOCK;
80004fbe:	30 08       	mov	r8,0
80004fc0:	ef 48 ff cc 	st.w	r7[-52],r8
	gclk_opts.diven = false;
80004fc4:	30 08       	mov	r8,0
80004fc6:	ef 48 ff d4 	st.w	r7[-44],r8
	
	pcl_params.pextra_params = &gclk_opts;
80004fca:	ee c8 00 34 	sub	r8,r7,52
80004fce:	ef 48 ff fc 	st.w	r7[-4],r8
	
	pcl_configure_clocks(&pcl_params);
80004fd2:	ee c8 00 24 	sub	r8,r7,36
80004fd6:	10 9c       	mov	r12,r8
80004fd8:	f0 1f 00 04 	mcall	80004fe8 <setup_clocks+0x78>
}
80004fdc:	2f 3d       	sub	sp,-52
80004fde:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fe2:	00 00       	add	r0,r0
80004fe4:	80 00       	ld.sh	r0,r0[0x0]
80004fe6:	34 24       	mov	r4,66
80004fe8:	80 00       	ld.sh	r0,r0[0x0]
80004fea:	2c 6c       	sub	r12,-58

80004fec <setup_gps_uart>:

void setup_gps_uart(void){
80004fec:	eb cd 40 80 	pushm	r7,lr
80004ff0:	1a 97       	mov	r7,sp
		.paritytype		= USART_NO_PARITY,
		.stopbits		= USART_1_STOPBIT,
		.channelmode	= USART_NORMAL_CHMODE
	};
	
	gpio_enable_module(USART_GPIO_MAP, 2);
80004ff2:	30 2b       	mov	r11,2
80004ff4:	48 fc       	lddpc	r12,80005030 <setup_gps_uart+0x44>
80004ff6:	f0 1f 00 10 	mcall	80005034 <setup_gps_uart+0x48>
	
	usart_init_rs232(&AVR32_USART3, &USART_OPTIONS, CPU_FREQ);
80004ffa:	e0 6a 78 40 	mov	r10,30784
80004ffe:	ea 1a 01 7d 	orh	r10,0x17d
80005002:	48 eb       	lddpc	r11,80005038 <setup_gps_uart+0x4c>
80005004:	fe 7c 3c 00 	mov	r12,-50176
80005008:	f0 1f 00 0d 	mcall	8000503c <setup_gps_uart+0x50>
	
	(&AVR32_USART3)->ier = AVR32_USART_IER_TIMEOUT_MASK;
8000500c:	fe 78 3c 00 	mov	r8,-50176
80005010:	e0 69 01 00 	mov	r9,256
80005014:	91 29       	st.w	r8[0x8],r9
	(&AVR32_USART3)->rtor = 100;
80005016:	fe 78 3c 00 	mov	r8,-50176
8000501a:	36 49       	mov	r9,100
8000501c:	91 99       	st.w	r8[0x24],r9
	(&AVR32_USART3)->cr |= AVR32_USART_CR_STTTO_MASK;
8000501e:	fe 78 3c 00 	mov	r8,-50176
80005022:	fe 79 3c 00 	mov	r9,-50176
80005026:	72 09       	ld.w	r9,r9[0x0]
80005028:	ab b9       	sbr	r9,0xb
8000502a:	91 09       	st.w	r8[0x0],r9
}
8000502c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005030:	80 00       	ld.sh	r0,r0[0x0]
80005032:	c1 7c       	rcall	80005060 <setup_uart_dma+0x20>
80005034:	80 00       	ld.sh	r0,r0[0x0]
80005036:	21 8c       	sub	r12,24
80005038:	80 00       	ld.sh	r0,r0[0x0]
8000503a:	c1 8c       	rcall	8000506a <setup_sens_twi+0x6>
8000503c:	80 00       	ld.sh	r0,r0[0x0]
8000503e:	37 40       	mov	r0,116

80005040 <setup_uart_dma>:

void setup_uart_dma(void){
80005040:	eb cd 40 80 	pushm	r7,lr
80005044:	1a 97       	mov	r7,sp
		.size = sizeof(usart_rx_buffer),
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(0, &PDCA_OPTIONS);
80005046:	48 5b       	lddpc	r11,80005058 <setup_uart_dma+0x18>
80005048:	30 0c       	mov	r12,0
8000504a:	f0 1f 00 05 	mcall	8000505c <setup_uart_dma+0x1c>
	pdca_enable(0);
8000504e:	30 0c       	mov	r12,0
80005050:	f0 1f 00 04 	mcall	80005060 <setup_uart_dma+0x20>
}
80005054:	e3 cd 80 80 	ldm	sp++,r7,pc
80005058:	80 00       	ld.sh	r0,r0[0x0]
8000505a:	c1 60       	breq	80005086 <setup_sens_twi+0x22>
8000505c:	80 00       	ld.sh	r0,r0[0x0]
8000505e:	27 68       	sub	r8,118
80005060:	80 00       	ld.sh	r0,r0[0x0]
80005062:	28 68       	sub	r8,-122

80005064 <setup_sens_twi>:

void setup_sens_twi(void){
80005064:	eb cd 40 80 	pushm	r7,lr
80005068:	1a 97       	mov	r7,sp
8000506a:	20 4d       	sub	sp,16
	// Setup Pins
	gpio_enable_gpio_pin(AVR32_PIN_PA21);
8000506c:	31 5c       	mov	r12,21
8000506e:	f0 1f 00 20 	mcall	800050ec <setup_sens_twi+0x88>
	gpio_enable_gpio_pin(AVR32_PIN_PB05);
80005072:	32 5c       	mov	r12,37
80005074:	f0 1f 00 1e 	mcall	800050ec <setup_sens_twi+0x88>
	
	const gpio_map_t TWIM_PIN_MAP = {
		{AVR32_TWIMS0_TWD_0_1_PIN, AVR32_TWIMS0_TWD_0_1_FUNCTION},
		{AVR32_TWIMS0_TWCK_0_3_PIN, AVR32_TWIMS0_TWCK_0_3_FUNCTION}
	};
80005078:	49 e9       	lddpc	r9,800050f0 <setup_sens_twi+0x8c>
8000507a:	ee c8 00 10 	sub	r8,r7,16
8000507e:	20 08       	sub	r8,0
80005080:	20 09       	sub	r9,0
80005082:	72 0a       	ld.w	r10,r9[0x0]
80005084:	91 0a       	st.w	r8[0x0],r10
80005086:	72 1a       	ld.w	r10,r9[0x4]
80005088:	91 1a       	st.w	r8[0x4],r10
8000508a:	72 2a       	ld.w	r10,r9[0x8]
8000508c:	91 2a       	st.w	r8[0x8],r10
8000508e:	72 39       	ld.w	r9,r9[0xc]
80005090:	91 39       	st.w	r8[0xc],r9
	
	gpio_enable_module(TWIM_PIN_MAP, 2);
80005092:	ee c8 00 10 	sub	r8,r7,16
80005096:	30 2b       	mov	r11,2
80005098:	10 9c       	mov	r12,r8
8000509a:	f0 1f 00 17 	mcall	800050f4 <setup_sens_twi+0x90>
	
	// Setup TWI
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MEN_MASK;	// Enable Master
8000509e:	fe 78 44 00 	mov	r8,-48128
800050a2:	30 19       	mov	r9,1
800050a4:	91 09       	st.w	r8[0x0],r9
	AVR32_TWIM0.scr = ~0UL;	// Clear all Status
800050a6:	fe 78 44 00 	mov	r8,-48128
800050aa:	3f f9       	mov	r9,-1
800050ac:	91 b9       	st.w	r8[0x2c],r9
	
	twim_set_speed(&AVR32_TWIM0, 200000UL, PBA_FREQ);	// Set to 200kHz
800050ae:	e0 6a 78 40 	mov	r10,30784
800050b2:	ea 1a 01 7d 	orh	r10,0x17d
800050b6:	e2 7b 0d 40 	mov	r11,200000
800050ba:	fe 7c 44 00 	mov	r12,-48128
800050be:	f0 1f 00 0f 	mcall	800050f8 <setup_sens_twi+0x94>
		.size = 6,
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(1, &PDCA_OPTIONS1);
800050c2:	48 fb       	lddpc	r11,800050fc <setup_sens_twi+0x98>
800050c4:	30 1c       	mov	r12,1
800050c6:	f0 1f 00 0f 	mcall	80005100 <setup_sens_twi+0x9c>
	pdca_enable_interrupt_transfer_complete(1);
800050ca:	30 1c       	mov	r12,1
800050cc:	f0 1f 00 0e 	mcall	80005104 <setup_sens_twi+0xa0>
	pdca_enable(1);
800050d0:	30 1c       	mov	r12,1
800050d2:	f0 1f 00 0e 	mcall	80005108 <setup_sens_twi+0xa4>
		.size = 0,
		.r_addr = NULL,
		.r_size = 0
	};
	
	pdca_init_channel(2, &PDCA_OPTIONS2);
800050d6:	48 eb       	lddpc	r11,8000510c <setup_sens_twi+0xa8>
800050d8:	30 2c       	mov	r12,2
800050da:	f0 1f 00 0a 	mcall	80005100 <setup_sens_twi+0x9c>
	pdca_enable(2);
800050de:	30 2c       	mov	r12,2
800050e0:	f0 1f 00 0a 	mcall	80005108 <setup_sens_twi+0xa4>
}
800050e4:	2f cd       	sub	sp,-16
800050e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800050ea:	00 00       	add	r0,r0
800050ec:	80 00       	ld.sh	r0,r0[0x0]
800050ee:	24 78       	sub	r8,71
800050f0:	80 00       	ld.sh	r0,r0[0x0]
800050f2:	c1 18       	rjmp	80005114 <twim_write_dma+0x4>
800050f4:	80 00       	ld.sh	r0,r0[0x0]
800050f6:	21 8c       	sub	r12,24
800050f8:	80 00       	ld.sh	r0,r0[0x0]
800050fa:	35 32       	mov	r2,83
800050fc:	80 00       	ld.sh	r0,r0[0x0]
800050fe:	c1 28       	rjmp	80005122 <twim_write_dma+0x12>
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	27 68       	sub	r8,118
80005104:	80 00       	ld.sh	r0,r0[0x0]
80005106:	29 58       	sub	r8,-107
80005108:	80 00       	ld.sh	r0,r0[0x0]
8000510a:	28 68       	sub	r8,-122
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	c1 44       	brge	80005136 <twim_write_dma+0x26>

80005110 <twim_write_dma>:

void twim_write_dma(volatile avr32_twim_t *twim, uint8_t dma_ch, uint8_t saddr, uint8_t *bytes, uint8_t len){
80005110:	eb cd 40 80 	pushm	r7,lr
80005114:	1a 97       	mov	r7,sp
80005116:	20 5d       	sub	sp,20
80005118:	ef 4c ff fc 	st.w	r7[-4],r12
8000511c:	ef 49 ff f0 	st.w	r7[-16],r9
80005120:	16 99       	mov	r9,r11
80005122:	ef 69 ff f8 	st.b	r7[-8],r9
80005126:	14 99       	mov	r9,r10
80005128:	ef 69 ff f4 	st.b	r7[-12],r9
8000512c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Load DMA
	pdca_load_channel(dma_ch, (void *)bytes, len);
80005130:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80005134:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005138:	12 9a       	mov	r10,r9
8000513a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000513e:	10 9c       	mov	r12,r8
80005140:	f0 1f 00 0f 	mcall	8000517c <twim_write_dma+0x6c>
	
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005144:	c0 38       	rjmp	8000514a <twim_write_dma+0x3a>
		cpu_relax();
80005146:	fe cf ff fc 	sub	pc,pc,-4
void twim_write_dma(volatile avr32_twim_t *twim, uint8_t dma_ch, uint8_t saddr, uint8_t *bytes, uint8_t len){
	// Load DMA
	pdca_load_channel(dma_ch, (void *)bytes, len);
	
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
8000514a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000514e:	70 78       	ld.w	r8,r8[0x1c]
80005150:	e2 18 00 10 	andl	r8,0x10,COH
80005154:	cf 90       	breq	80005146 <twim_write_dma+0x36>
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005156:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000515a:	f0 09 15 01 	lsl	r9,r8,0x1
	| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
8000515e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005162:	b1 68       	lsl	r8,0x10
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
80005164:	f3 e8 10 08 	or	r8,r9,r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005168:	e8 18 e0 00 	orl	r8,0xe000
8000516c:	10 99       	mov	r9,r8
8000516e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005172:	91 39       	st.w	r8[0xc],r9
	| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop after NBYTES
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
}
80005174:	2f bd       	sub	sp,-20
80005176:	e3 cd 80 80 	ldm	sp++,r7,pc
8000517a:	00 00       	add	r0,r0
8000517c:	80 00       	ld.sh	r0,r0[0x0]
8000517e:	28 98       	sub	r8,-119

80005180 <twim_write_blocking>:

void twim_write_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t *bytes, uint8_t len){
80005180:	eb cd 40 80 	pushm	r7,lr
80005184:	1a 97       	mov	r7,sp
80005186:	20 5d       	sub	sp,20
80005188:	ef 4c ff f8 	st.w	r7[-8],r12
8000518c:	ef 4a ff f0 	st.w	r7[-16],r10
80005190:	12 98       	mov	r8,r9
80005192:	16 99       	mov	r9,r11
80005194:	ef 69 ff f4 	st.b	r7[-12],r9
80005198:	ef 68 ff ec 	st.b	r7[-20],r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
8000519c:	c0 38       	rjmp	800051a2 <twim_write_blocking+0x22>
		cpu_relax();
8000519e:	fe cf ff fc 	sub	pc,pc,-4
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
}

void twim_write_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t *bytes, uint8_t len){
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
800051a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051a6:	70 78       	ld.w	r8,r8[0x1c]
800051a8:	e2 18 00 10 	andl	r8,0x10,COH
800051ac:	cf 90       	breq	8000519e <twim_write_blocking+0x1e>
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
800051ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800051b2:	f0 09 15 01 	lsl	r9,r8,0x1
			| (len << AVR32_TWIM_CMDR_NBYTES_OFFSET)	// Length
800051b6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800051ba:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
800051bc:	f3 e8 10 08 	or	r8,r9,r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
		cpu_relax();
	}
	
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
800051c0:	e8 18 e0 00 	orl	r8,0xe000
800051c4:	10 99       	mov	r9,r8
800051c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051ca:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
			| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
			| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop after NBYTES
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	twim->thr = *bytes++;	// Load data
800051cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051d0:	11 88       	ld.ub	r8,r8[0x0]
800051d2:	10 99       	mov	r9,r8
800051d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051d8:	91 69       	st.w	r8[0x18],r9
800051da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051de:	2f f8       	sub	r8,-1
800051e0:	ef 48 ff f0 	st.w	r7[-16],r8
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
800051e4:	30 08       	mov	r8,0
800051e6:	ef 48 ff fc 	st.w	r7[-4],r8
800051ea:	c1 c8       	rjmp	80005222 <twim_write_blocking+0xa2>
		// Wait for TXRDY
		while(!(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)){
			cpu_relax();
800051ec:	fe cf ff fc 	sub	pc,pc,-4
800051f0:	c0 28       	rjmp	800051f4 <twim_write_blocking+0x74>
	twim->thr = *bytes++;	// Load data
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
		// Wait for TXRDY
		while(!(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)){
800051f2:	d7 03       	nop
800051f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051f8:	70 78       	ld.w	r8,r8[0x1c]
800051fa:	e2 18 00 02 	andl	r8,0x2,COH
800051fe:	cf 70       	breq	800051ec <twim_write_blocking+0x6c>
			cpu_relax();
		}
		
		twim->thr = *bytes++;
80005200:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005204:	11 88       	ld.ub	r8,r8[0x0]
80005206:	10 99       	mov	r9,r8
80005208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000520c:	91 69       	st.w	r8[0x18],r9
8000520e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005212:	2f f8       	sub	r8,-1
80005214:	ef 48 ff f0 	st.w	r7[-16],r8
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	twim->thr = *bytes++;	// Load data
	
	// Transmit len-1 more bytes		
	for(uint32_t i=0; i<(len-1); i++){
80005218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000521c:	2f f8       	sub	r8,-1
8000521e:	ef 48 ff fc 	st.w	r7[-4],r8
80005222:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005226:	20 18       	sub	r8,1
80005228:	10 99       	mov	r9,r8
8000522a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000522e:	10 39       	cp.w	r9,r8
80005230:	fe 9b ff e1 	brhi	800051f2 <twim_write_blocking+0x72>
			cpu_relax();
		}
		
		twim->thr = *bytes++;
	}
}
80005234:	2f bd       	sub	sp,-20
80005236:	e3 cd 80 80 	ldm	sp++,r7,pc

8000523a <twim_read_blocking>:

uint8_t twim_read_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t raddr){
8000523a:	eb cd 40 80 	pushm	r7,lr
8000523e:	1a 97       	mov	r7,sp
80005240:	20 3d       	sub	sp,12
80005242:	ef 4c ff fc 	st.w	r7[-4],r12
80005246:	16 99       	mov	r9,r11
80005248:	14 98       	mov	r8,r10
8000524a:	ef 69 ff f8 	st.b	r7[-8],r9
8000524e:	ef 68 ff f4 	st.b	r7[-12],r8
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005252:	c0 38       	rjmp	80005258 <twim_read_blocking+0x1e>
		cpu_relax();
80005254:	fe cf ff fc 	sub	pc,pc,-4
	}
}

uint8_t twim_read_blocking(volatile avr32_twim_t *twim, uint8_t saddr, uint8_t raddr){
	// Wait For TWIM Idle
	while(!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)){
80005258:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000525c:	70 78       	ld.w	r8,r8[0x1c]
8000525e:	e2 18 00 10 	andl	r8,0x10,COH
80005262:	cf 90       	breq	80005254 <twim_read_blocking+0x1a>
		cpu_relax();
	}
	
	// Write Read Address
	twim->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005264:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005268:	a1 78       	lsl	r8,0x1
8000526a:	ea 18 00 01 	orh	r8,0x1
8000526e:	e8 18 a0 00 	orl	r8,0xa000
80005272:	10 99       	mov	r9,r8
80005274:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005278:	91 39       	st.w	r8[0xc],r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Byte
	twim->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
8000527a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000527e:	a1 78       	lsl	r8,0x1
80005280:	ea 18 00 01 	orh	r8,0x1
80005284:	e8 18 e0 01 	orl	r8,0xe001
80005288:	10 99       	mov	r9,r8
8000528a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000528e:	91 49       	st.w	r8[0x10],r9
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
		
	// Start Read Address Write
	twim->thr = raddr;
80005290:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80005294:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005298:	91 69       	st.w	r8[0x18],r9
	
	// Wait For Read Byte
	while(!(twim->sr & AVR32_TWIM_SR_RXRDY_MASK)){
8000529a:	c0 38       	rjmp	800052a0 <twim_read_blocking+0x66>
		cpu_relax();
8000529c:	fe cf ff fc 	sub	pc,pc,-4
		
	// Start Read Address Write
	twim->thr = raddr;
	
	// Wait For Read Byte
	while(!(twim->sr & AVR32_TWIM_SR_RXRDY_MASK)){
800052a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052a4:	70 78       	ld.w	r8,r8[0x1c]
800052a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800052aa:	cf 90       	breq	8000529c <twim_read_blocking+0x62>
		cpu_relax();
	}
	
	return twim->rhr;
800052ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052b0:	70 58       	ld.w	r8,r8[0x14]
800052b2:	5c 58       	castu.b	r8
}
800052b4:	10 9c       	mov	r12,r8
800052b6:	2f dd       	sub	sp,-12
800052b8:	e3 cd 80 80 	ldm	sp++,r7,pc

800052bc <setup_magnetometer>:

void setup_magnetometer(void){
800052bc:	eb cd 40 80 	pushm	r7,lr
800052c0:	1a 97       	mov	r7,sp
	// Device Address = 0x0E
	// CTRL_REG1 = 0x10
	// ODR = 5Hz, OSR = 64, Enable => 0x51
	static const uint8_t bytes1[] = {0x10, 0x51};
	twim_write_blocking(&AVR32_TWIM0,0x0E,bytes1,2);
800052c2:	30 29       	mov	r9,2
800052c4:	48 8a       	lddpc	r10,800052e4 <setup_magnetometer+0x28>
800052c6:	30 eb       	mov	r11,14
800052c8:	fe 7c 44 00 	mov	r12,-48128
800052cc:	f0 1f 00 07 	mcall	800052e8 <setup_magnetometer+0x2c>
	
	// CTRL_REG2 = 0x11
	// AUTO_MRST_EN = 1 => 0x80
	static const uint8_t bytes2[] = {0x11, 0x80};
	twim_write_blocking(&AVR32_TWIM0,0x0E,bytes2,2);
800052d0:	30 29       	mov	r9,2
800052d2:	48 7a       	lddpc	r10,800052ec <setup_magnetometer+0x30>
800052d4:	30 eb       	mov	r11,14
800052d6:	fe 7c 44 00 	mov	r12,-48128
800052da:	f0 1f 00 04 	mcall	800052e8 <setup_magnetometer+0x2c>
}
800052de:	e3 cd 80 80 	ldm	sp++,r7,pc
800052e2:	00 00       	add	r0,r0
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	c1 10       	breq	80005308 <setup_barometer+0x18>
800052e8:	80 00       	ld.sh	r0,r0[0x0]
800052ea:	51 80       	stdsp	sp[0x60],r0
800052ec:	80 00       	ld.sh	r0,r0[0x0]
800052ee:	c1 14       	brge	80005310 <setup_barometer+0x20>

800052f0 <setup_barometer>:

void setup_barometer(void){
800052f0:	eb cd 40 c0 	pushm	r6-r7,lr
800052f4:	1a 97       	mov	r7,sp
800052f6:	20 3d       	sub	sp,12
	// Disable DMA
	pdca_disable(1);
800052f8:	30 1c       	mov	r12,1
800052fa:	f0 1f 00 27 	mcall	80005394 <setup_barometer+0xa4>
	
	uint32_t data = 0;
800052fe:	30 08       	mov	r8,0
80005300:	ef 48 ff f4 	st.w	r7[-12],r8
	volatile avr32_twim_t *twim = &AVR32_TWIM0;
80005304:	fe 78 44 00 	mov	r8,-48128
80005308:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// Get Calibration Data	
	for(uint32_t i=0; i<11; i++){
8000530c:	30 08       	mov	r8,0
8000530e:	ef 48 ff fc 	st.w	r7[-4],r8
80005312:	c3 68       	rjmp	8000537e <setup_barometer+0x8e>
		// Get MSB
		data = twim_read_blocking(twim, 0x77, (0xAA+2*i));
80005314:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005318:	2a b8       	sub	r8,-85
8000531a:	5c 58       	castu.b	r8
8000531c:	a1 78       	lsl	r8,0x1
8000531e:	5c 58       	castu.b	r8
80005320:	10 9a       	mov	r10,r8
80005322:	37 7b       	mov	r11,119
80005324:	ee fc ff f8 	ld.w	r12,r7[-8]
80005328:	f0 1f 00 1c 	mcall	80005398 <setup_barometer+0xa8>
8000532c:	18 98       	mov	r8,r12
8000532e:	ef 48 ff f4 	st.w	r7[-12],r8
		// Get LSB
		data = (data<<8)|twim_read_blocking(twim, 0x77, 0xAA+2*i+1);
80005332:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005336:	f0 06 15 08 	lsl	r6,r8,0x8
8000533a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000533e:	2a b8       	sub	r8,-85
80005340:	5c 58       	castu.b	r8
80005342:	a1 78       	lsl	r8,0x1
80005344:	5c 58       	castu.b	r8
80005346:	2f f8       	sub	r8,-1
80005348:	5c 58       	castu.b	r8
8000534a:	10 9a       	mov	r10,r8
8000534c:	37 7b       	mov	r11,119
8000534e:	ee fc ff f8 	ld.w	r12,r7[-8]
80005352:	f0 1f 00 12 	mcall	80005398 <setup_barometer+0xa8>
80005356:	18 98       	mov	r8,r12
80005358:	ed e8 10 08 	or	r8,r6,r8
8000535c:	ef 48 ff f4 	st.w	r7[-12],r8
		
		*((uint16_t *)&bmp180_cal_data+i) = data;
80005360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005364:	f0 09 15 01 	lsl	r9,r8,0x1
80005368:	48 d8       	lddpc	r8,8000539c <setup_barometer+0xac>
8000536a:	10 09       	add	r9,r8
8000536c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005370:	5c 88       	casts.h	r8
80005372:	b2 08       	st.h	r9[0x0],r8
	
	uint32_t data = 0;
	volatile avr32_twim_t *twim = &AVR32_TWIM0;
	
	// Get Calibration Data	
	for(uint32_t i=0; i<11; i++){
80005374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005378:	2f f8       	sub	r8,-1
8000537a:	ef 48 ff fc 	st.w	r7[-4],r8
8000537e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005382:	58 a8       	cp.w	r8,10
80005384:	fe 98 ff c8 	brls	80005314 <setup_barometer+0x24>
		data = (data<<8)|twim_read_blocking(twim, 0x77, 0xAA+2*i+1);
		
		*((uint16_t *)&bmp180_cal_data+i) = data;
	}
	
	pdca_enable(1);
80005388:	30 1c       	mov	r12,1
8000538a:	f0 1f 00 06 	mcall	800053a0 <setup_barometer+0xb0>
}
8000538e:	2f dd       	sub	sp,-12
80005390:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005394:	80 00       	ld.sh	r0,r0[0x0]
80005396:	28 38       	sub	r8,-125
80005398:	80 00       	ld.sh	r0,r0[0x0]
8000539a:	52 3a       	stdsp	sp[0x8c],r10
8000539c:	00 00       	add	r0,r0
8000539e:	06 48       	or	r8,r3
800053a0:	80 00       	ld.sh	r0,r0[0x0]
800053a2:	28 68       	sub	r8,-122

800053a4 <sens_rx_start>:

void sens_rx_start(void){
800053a4:	eb cd 40 80 	pushm	r7,lr
800053a8:	1a 97       	mov	r7,sp
800053aa:	20 1d       	sub	sp,4
	uint8_t length;
	uint8_t saddr;
	uint8_t raddr;
	
	switch(sens_rx_state){
800053ac:	4a 78       	lddpc	r8,80005448 <sens_rx_start+0xa4>
800053ae:	70 08       	ld.w	r8,r8[0x0]
800053b0:	58 18       	cp.w	r8,1
800053b2:	c0 e0       	breq	800053ce <sens_rx_start+0x2a>
800053b4:	c0 33       	brcs	800053ba <sens_rx_start+0x16>
800053b6:	58 28       	cp.w	r8,2
800053b8:	c4 31       	brne	8000543e <sens_rx_start+0x9a>
		case SENS_STATE_PRESSURE:
		case SENS_STATE_TEMP:
			length = 3;
800053ba:	30 38       	mov	r8,3
800053bc:	ef 68 ff fd 	st.b	r7[-3],r8
			saddr = 0x77;
800053c0:	37 78       	mov	r8,119
800053c2:	ef 68 ff fe 	st.b	r7[-2],r8
			raddr = 0xF6;
800053c6:	3f 68       	mov	r8,-10
800053c8:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
800053cc:	c0 b8       	rjmp	800053e2 <sens_rx_start+0x3e>
			
		case SENS_STATE_MAG:
			length = 6;
800053ce:	30 68       	mov	r8,6
800053d0:	ef 68 ff fd 	st.b	r7[-3],r8
			saddr = 0x0E;
800053d4:	30 e8       	mov	r8,14
800053d6:	ef 68 ff fe 	st.b	r7[-2],r8
			raddr = 0x01;
800053da:	30 18       	mov	r8,1
800053dc:	ef 68 ff ff 	st.b	r7[-1],r8
			break;
800053e0:	d7 03       	nop
		default:
			return;
	}
	
	// Setup DMA
	pdca_load_channel(1,(void *)sens_rx_buffer,length);
800053e2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800053e6:	10 9a       	mov	r10,r8
800053e8:	49 9b       	lddpc	r11,8000544c <sens_rx_start+0xa8>
800053ea:	30 1c       	mov	r12,1
800053ec:	f0 1f 00 19 	mcall	80005450 <sens_rx_start+0xac>
	
	// Wait For TWIM Idle
	while(!(AVR32_TWIM0.sr & AVR32_TWIM_SR_IDLE_MASK)){
800053f0:	c0 38       	rjmp	800053f6 <sens_rx_start+0x52>
		cpu_relax();
800053f2:	fe cf ff fc 	sub	pc,pc,-4
	
	// Setup DMA
	pdca_load_channel(1,(void *)sens_rx_buffer,length);
	
	// Wait For TWIM Idle
	while(!(AVR32_TWIM0.sr & AVR32_TWIM_SR_IDLE_MASK)){
800053f6:	fe 78 44 00 	mov	r8,-48128
800053fa:	70 78       	ld.w	r8,r8[0x1c]
800053fc:	e2 18 00 10 	andl	r8,0x10,COH
80005400:	cf 90       	breq	800053f2 <sens_rx_start+0x4e>
		cpu_relax();
	}
	
	// Read Address write
	AVR32_TWIM0.cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005402:	fe 78 44 00 	mov	r8,-48128
80005406:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000540a:	a1 79       	lsl	r9,0x1
8000540c:	ea 19 00 01 	orh	r9,0x1
80005410:	e8 19 a0 00 	orl	r9,0xa000
80005414:	91 39       	st.w	r8[0xc],r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Bytes
	AVR32_TWIM0.ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
80005416:	fe 78 44 00 	mov	r8,-48128
8000541a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000541e:	f2 0a 15 01 	lsl	r10,r9,0x1
	| (length << AVR32_TWIM_CMDR_NBYTES_OFFSET)		// Num Bytes
80005422:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005426:	b1 69       	lsl	r9,0x10
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
80005428:	f5 e9 10 09 	or	r9,r10,r9
	| (AVR32_TWIM_CMDR_VALID_MASK)				// Valid Command
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (0 << AVR32_TWIM_CMDR_READ_OFFSET);		// Write Operation
	
	// Read Bytes
	AVR32_TWIM0.ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)	// Slave Address
8000542c:	e8 19 e0 01 	orl	r9,0xe001
80005430:	91 49       	st.w	r8[0x10],r9
	| (AVR32_TWIM_CMDR_START_MASK)				// Start Transmission
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
	
	// Initial Read Address Write
	AVR32_TWIM0.thr = raddr;
80005432:	fe 78 44 00 	mov	r8,-48128
80005436:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000543a:	91 69       	st.w	r8[0x18],r9
8000543c:	c0 28       	rjmp	80005440 <sens_rx_start+0x9c>
			saddr = 0x0E;
			raddr = 0x01;
			break;
			
		default:
			return;
8000543e:	d7 03       	nop
	| (AVR32_TWIM_CMDR_STOP_MASK)				// Stop At Last Byte
	| (1 << AVR32_TWIM_CMDR_READ_OFFSET);		// Read Operation
	
	// Initial Read Address Write
	AVR32_TWIM0.thr = raddr;
}
80005440:	2f fd       	sub	sp,-4
80005442:	e3 cd 80 80 	ldm	sp++,r7,pc
80005446:	00 00       	add	r0,r0
80005448:	00 00       	add	r0,r0
8000544a:	06 0c       	add	r12,r3
8000544c:	00 00       	add	r0,r0
8000544e:	09 14       	ld.sh	r4,r4++
80005450:	80 00       	ld.sh	r0,r0[0x0]
80005452:	28 98       	sub	r8,-119

80005454 <setup_interrupts>:

void setup_interrupts(void){
80005454:	eb cd 40 80 	pushm	r7,lr
80005458:	1a 97       	mov	r7,sp
	Disable_global_interrupt();
8000545a:	d3 03       	ssrf	0x10
	
	INTC_init_interrupts();
8000545c:	f0 1f 00 09 	mcall	80005480 <setup_interrupts+0x2c>
	INTC_register_interrupt(&usart_timeout_handler, AVR32_USART3_IRQ, AVR32_INTC_INT0);
80005460:	30 0a       	mov	r10,0
80005462:	e0 6b 02 40 	mov	r11,576
80005466:	48 8c       	lddpc	r12,80005484 <setup_interrupts+0x30>
80005468:	f0 1f 00 08 	mcall	80005488 <setup_interrupts+0x34>
	INTC_register_interrupt(&sens_rx_complete_handler, AVR32_PDCA_IRQ_1, AVR32_INTC_INT0);
8000546c:	30 0a       	mov	r10,0
8000546e:	e0 6b 00 81 	mov	r11,129
80005472:	48 7c       	lddpc	r12,8000548c <setup_interrupts+0x38>
80005474:	f0 1f 00 05 	mcall	80005488 <setup_interrupts+0x34>
	
	Enable_global_interrupt();
80005478:	d5 03       	csrf	0x10
8000547a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000547e:	00 00       	add	r0,r0
80005480:	80 00       	ld.sh	r0,r0[0x0]
80005482:	25 54       	sub	r4,85
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	4d cc       	lddpc	r12,800055f4 <__avr32_f32_div_res_subnormal+0x26>
80005488:	80 00       	ld.sh	r0,r0[0x0]
8000548a:	25 f0       	sub	r0,95
8000548c:	80 00       	ld.sh	r0,r0[0x0]
8000548e:	4e 18       	lddpc	r8,80005610 <__avr32_f32_sub+0x10>

80005490 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
80005490:	eb cd 40 80 	pushm	r7,lr
80005494:	1a 97       	mov	r7,sp
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
80005496:	e3 cd 80 80 	ldm	sp++,r7,pc
8000549a:	d7 03       	nop

8000549c <__avr32_f32_div>:
8000549c:	f7 ec 20 08 	eor	r8,r11,r12
800054a0:	a1 7c       	lsl	r12,0x1
800054a2:	a1 7b       	lsl	r11,0x1
800054a4:	c7 a0       	breq	80005598 <__divsf_return_op1+0x16>
800054a6:	18 7c       	tst	r12,r12
800054a8:	f9 b9 00 00 	moveq	r9,0
800054ac:	c0 90       	breq	800054be <__avr32_f32_div+0x22>
800054ae:	f8 09 16 18 	lsr	r9,r12,0x18
800054b2:	c7 e0       	breq	800055ae <__divsf_return_op1+0x2c>
800054b4:	e0 49 00 ff 	cp.w	r9,255
800054b8:	c6 82       	brcc	80005588 <__divsf_return_op1+0x6>
800054ba:	a7 7c       	lsl	r12,0x7
800054bc:	bf bc       	sbr	r12,0x1f
800054be:	f6 0a 16 18 	lsr	r10,r11,0x18
800054c2:	c7 e0       	breq	800055be <__divsf_return_op1+0x3c>
800054c4:	e0 4a 00 ff 	cp.w	r10,255
800054c8:	c6 62       	brcc	80005594 <__divsf_return_op1+0x12>
800054ca:	a7 7b       	lsl	r11,0x7
800054cc:	bf bb       	sbr	r11,0x1f
800054ce:	58 09       	cp.w	r9,0
800054d0:	f5 bc 00 00 	subfeq	r12,0
800054d4:	5e 0d       	reteq	0
800054d6:	1a d5       	st.w	--sp,r5
800054d8:	bb 27       	st.d	--sp,r6
800054da:	14 19       	sub	r9,r10
800054dc:	28 19       	sub	r9,-127
800054de:	fc 1a 80 00 	movh	r10,0x8000
800054e2:	a3 8c       	lsr	r12,0x2
800054e4:	f6 05 16 02 	lsr	r5,r11,0x2
800054e8:	f4 0b 16 01 	lsr	r11,r10,0x1
800054ec:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
800054f0:	5c d6       	com	r6
800054f2:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
800054f6:	f6 05 06 46 	mulu.d	r6,r11,r5
800054fa:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800054fe:	f6 07 06 46 	mulu.d	r6,r11,r7
80005502:	ee 0b 15 02 	lsl	r11,r7,0x2
80005506:	f6 05 06 46 	mulu.d	r6,r11,r5
8000550a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000550e:	f6 07 06 46 	mulu.d	r6,r11,r7
80005512:	ee 0b 15 02 	lsl	r11,r7,0x2
80005516:	f6 05 06 46 	mulu.d	r6,r11,r5
8000551a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000551e:	f6 07 06 46 	mulu.d	r6,r11,r7
80005522:	ee 0b 15 02 	lsl	r11,r7,0x2
80005526:	f6 05 06 46 	mulu.d	r6,r11,r5
8000552a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000552e:	f6 07 06 46 	mulu.d	r6,r11,r7
80005532:	ee 0b 15 02 	lsl	r11,r7,0x2
80005536:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000553a:	a5 8c       	lsr	r12,0x4
8000553c:	ed b7 00 1c 	bld	r7,0x1c
80005540:	c0 40       	breq	80005548 <__avr32_f32_div+0xac>
80005542:	a1 77       	lsl	r7,0x1
80005544:	20 19       	sub	r9,1
80005546:	a1 7c       	lsl	r12,0x1
80005548:	58 09       	cp.w	r9,0
8000554a:	e0 8a 00 42 	brle	800055ce <__avr32_f32_div_res_subnormal>
8000554e:	e0 17 ff e0 	andl	r7,0xffe0
80005552:	e8 17 00 10 	orl	r7,0x10
80005556:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000555a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000555e:	58 0a       	cp.w	r10,0

80005560 <__avr32_f32_div_round_subnormal>:
80005560:	f8 0b 13 00 	cpc	r11,r12
80005564:	5f 3b       	srlo	r11
80005566:	ea 0b 17 00 	moveq	r11,r5
8000556a:	ee 0c 16 05 	lsr	r12,r7,0x5
8000556e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80005572:	bb 07       	ld.d	r6,sp++
80005574:	1b 05       	ld.w	r5,sp++
80005576:	ed b8 00 1f 	bld	r8,0x1f
8000557a:	ef bc 00 1f 	bst	r12,0x1f
8000557e:	16 0c       	add	r12,r11
80005580:	5e fc       	retal	r12

80005582 <__divsf_return_op1>:
80005582:	a1 78       	lsl	r8,0x1
80005584:	5d 0c       	ror	r12
80005586:	5e fc       	retal	r12
80005588:	5e 1e       	retne	-1
8000558a:	fc 19 ff 00 	movh	r9,0xff00
8000558e:	12 3b       	cp.w	r11,r9
80005590:	cf 93       	brcs	80005582 <__divsf_return_op1>
80005592:	5e fe       	retal	-1
80005594:	5e 0d       	reteq	0
80005596:	5e fe       	retal	-1
80005598:	18 7c       	tst	r12,r12
8000559a:	5e 0e       	reteq	-1
8000559c:	f8 09 16 18 	lsr	r9,r12,0x18
800055a0:	c0 70       	breq	800055ae <__divsf_return_op1+0x2c>
800055a2:	e0 49 00 ff 	cp.w	r9,255
800055a6:	cf 12       	brcc	80005588 <__divsf_return_op1+0x6>
800055a8:	fc 1c ff 00 	movh	r12,0xff00
800055ac:	ce bb       	rjmp	80005582 <__divsf_return_op1>
800055ae:	a7 7c       	lsl	r12,0x7
800055b0:	f8 09 12 00 	clz	r9,r12
800055b4:	f8 09 09 4c 	lsl	r12,r12,r9
800055b8:	f2 09 11 01 	rsub	r9,r9,1
800055bc:	c8 1b       	rjmp	800054be <__avr32_f32_div+0x22>
800055be:	a7 7b       	lsl	r11,0x7
800055c0:	f6 0a 12 00 	clz	r10,r11
800055c4:	f6 0a 09 4b 	lsl	r11,r11,r10
800055c8:	f4 0a 11 01 	rsub	r10,r10,1
800055cc:	c8 5b       	rjmp	800054d6 <__avr32_f32_div+0x3a>

800055ce <__avr32_f32_div_res_subnormal>:
800055ce:	5c 39       	neg	r9
800055d0:	2f f9       	sub	r9,-1
800055d2:	f1 b9 04 a0 	satu	r9,0x5
800055d6:	f2 0a 11 20 	rsub	r10,r9,32
800055da:	ee 09 0a 47 	lsr	r7,r7,r9
800055de:	f8 0a 09 46 	lsl	r6,r12,r10
800055e2:	f8 09 0a 4c 	lsr	r12,r12,r9
800055e6:	e0 17 ff e0 	andl	r7,0xffe0
800055ea:	e8 17 00 10 	orl	r7,0x10
800055ee:	ea 07 06 4a 	mulu.d	r10,r5,r7
800055f2:	30 09       	mov	r9,0
800055f4:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
800055f8:	0c 3a       	cp.w	r10,r6
800055fa:	cb 3b       	rjmp	80005560 <__avr32_f32_div_round_subnormal>

800055fc <__avr32_f32_sub_from_add>:
800055fc:	ee 1b 80 00 	eorh	r11,0x8000

80005600 <__avr32_f32_sub>:
80005600:	f7 ec 20 08 	eor	r8,r11,r12
80005604:	c6 46       	brmi	800056cc <__avr32_f32_add_from_sub>
80005606:	18 98       	mov	r8,r12
80005608:	e6 1c 80 00 	andh	r12,0x8000,COH
8000560c:	bf db       	cbr	r11,0x1f
8000560e:	bf d8       	cbr	r8,0x1f
80005610:	f0 0b 0c 4a 	max	r10,r8,r11
80005614:	f0 0b 0d 49 	min	r9,r8,r11
80005618:	10 3a       	cp.w	r10,r8
8000561a:	f7 bc 01 01 	subne	r12,1
8000561e:	e6 1c 80 00 	andh	r12,0x8000,COH
80005622:	f4 08 15 08 	lsl	r8,r10,0x8
80005626:	bf b8       	sbr	r8,0x1f
80005628:	b7 9a       	lsr	r10,0x17
8000562a:	e0 4a 00 ff 	cp.w	r10,255
8000562e:	c3 80       	breq	8000569e <__avr32_f32_sub_op1_nan_or_inf>
80005630:	f2 0b 15 08 	lsl	r11,r9,0x8
80005634:	bf bb       	sbr	r11,0x1f
80005636:	b7 99       	lsr	r9,0x17
80005638:	1a dc       	st.w	--sp,r12
8000563a:	c2 90       	breq	8000568c <__avr32_f32_sub_op2_subnormal>
8000563c:	f4 09 01 0c 	sub	r12,r10,r9
80005640:	c0 c0       	breq	80005658 <__avr32_f32_sub_shift_done>
80005642:	f1 bc 04 a0 	satu	r12,0x5
80005646:	f8 09 11 20 	rsub	r9,r12,32
8000564a:	f6 09 09 49 	lsl	r9,r11,r9
8000564e:	f7 b8 01 01 	subne	r8,1
80005652:	5f 19       	srne	r9
80005654:	f6 0c 0a 4b 	lsr	r11,r11,r12

80005658 <__avr32_f32_sub_shift_done>:
80005658:	16 18       	sub	r8,r11
8000565a:	1b 0c       	ld.w	r12,sp++
8000565c:	f0 0b 12 00 	clz	r11,r8
80005660:	5e 3d       	retlo	0
80005662:	f0 0b 09 48 	lsl	r8,r8,r11
80005666:	16 1a       	sub	r10,r11
80005668:	e0 8a 00 26 	brle	800056b4 <__avr32_f32_sub_subnormal_result>
8000566c:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80005670:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80005674:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80005678 <__avr32_f32_sub_round>:
80005678:	fc 1a 80 00 	movh	r10,0x8000
8000567c:	ed bc 00 00 	bld	r12,0x0
80005680:	f7 ba 01 ff 	subne	r10,-1
80005684:	14 39       	cp.w	r9,r10
80005686:	f7 bc 02 ff 	subhs	r12,-1
8000568a:	5e fc       	retal	r12

8000568c <__avr32_f32_sub_op2_subnormal>:
8000568c:	bf db       	cbr	r11,0x1f
8000568e:	f9 b9 01 01 	movne	r9,1
80005692:	58 0a       	cp.w	r10,0
80005694:	cd 41       	brne	8000563c <__avr32_f32_sub+0x3c>
80005696:	bf d8       	cbr	r8,0x1f
80005698:	f9 ba 01 01 	movne	r10,1
8000569c:	cd 0b       	rjmp	8000563c <__avr32_f32_sub+0x3c>

8000569e <__avr32_f32_sub_op1_nan_or_inf>:
8000569e:	f0 0b 15 01 	lsl	r11,r8,0x1
800056a2:	5e 1e       	retne	-1
800056a4:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800056a8:	f2 0b 16 17 	lsr	r11,r9,0x17
800056ac:	e0 4b 00 ff 	cp.w	r11,255
800056b0:	5e 1c       	retne	r12
800056b2:	5e fe       	retal	-1

800056b4 <__avr32_f32_sub_subnormal_result>:
800056b4:	f4 0a 11 09 	rsub	r10,r10,9
800056b8:	f4 0b 11 20 	rsub	r11,r10,32
800056bc:	5e 3d       	retlo	0
800056be:	f0 0a 0a 4a 	lsr	r10,r8,r10
800056c2:	14 4c       	or	r12,r10
800056c4:	f0 0b 09 48 	lsl	r8,r8,r11
800056c8:	10 49       	or	r9,r8
800056ca:	cd 7b       	rjmp	80005678 <__avr32_f32_sub_round>

800056cc <__avr32_f32_add_from_sub>:
800056cc:	ee 1b 80 00 	eorh	r11,0x8000

800056d0 <__avr32_f32_add>:
800056d0:	f7 ec 20 08 	eor	r8,r11,r12
800056d4:	c9 46       	brmi	800055fc <__avr32_f32_sub_from_add>
800056d6:	18 98       	mov	r8,r12
800056d8:	e6 1c 80 00 	andh	r12,0x8000,COH
800056dc:	bf db       	cbr	r11,0x1f
800056de:	bf d8       	cbr	r8,0x1f
800056e0:	f0 0b 0c 4a 	max	r10,r8,r11
800056e4:	f0 0b 0d 49 	min	r9,r8,r11
800056e8:	f4 08 15 08 	lsl	r8,r10,0x8
800056ec:	bf b8       	sbr	r8,0x1f
800056ee:	b7 9a       	lsr	r10,0x17
800056f0:	e0 4a 00 ff 	cp.w	r10,255
800056f4:	c2 d0       	breq	8000574e <__avr32_f32_add_op1_nan_or_inf>
800056f6:	f2 0b 15 08 	lsl	r11,r9,0x8
800056fa:	bf bb       	sbr	r11,0x1f
800056fc:	b7 99       	lsr	r9,0x17
800056fe:	c1 e0       	breq	8000573a <__avr32_f32_add_op2_subnormal>
80005700:	1a dc       	st.w	--sp,r12
80005702:	14 29       	rsub	r9,r10
80005704:	f1 b9 04 a0 	satu	r9,0x5
80005708:	f6 09 0a 4c 	lsr	r12,r11,r9
8000570c:	f2 09 11 18 	rsub	r9,r9,24
80005710:	f6 09 09 4b 	lsl	r11,r11,r9
80005714:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80005718:	18 08       	add	r8,r12
8000571a:	1b 0c       	ld.w	r12,sp++
8000571c:	c2 63       	brcs	80005768 <__avr32_f32_add_res_of>
8000571e:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80005722:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005726:	fc 1a 80 00 	movh	r10,0x8000
8000572a:	ed bc 00 00 	bld	r12,0x0
8000572e:	f7 ba 01 ff 	subne	r10,-1
80005732:	14 3b       	cp.w	r11,r10
80005734:	f7 bc 02 ff 	subhs	r12,-1
80005738:	5e fc       	retal	r12

8000573a <__avr32_f32_add_op2_subnormal>:
8000573a:	bf db       	cbr	r11,0x1f
8000573c:	f9 b9 01 01 	movne	r9,1
80005740:	58 0a       	cp.w	r10,0
80005742:	cd f1       	brne	80005700 <__avr32_f32_add+0x30>
80005744:	bf d8       	cbr	r8,0x1f
80005746:	10 0b       	add	r11,r8
80005748:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000574c:	5e fc       	retal	r12

8000574e <__avr32_f32_add_op1_nan_or_inf>:
8000574e:	f0 0b 15 01 	lsl	r11,r8,0x1
80005752:	5e 1e       	retne	-1
80005754:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005758:	f2 0b 16 17 	lsr	r11,r9,0x17
8000575c:	e0 4b 00 ff 	cp.w	r11,255
80005760:	5e 1c       	retne	r12
80005762:	a9 79       	lsl	r9,0x9
80005764:	5e 0c       	reteq	r12
80005766:	5e fe       	retal	-1

80005768 <__avr32_f32_add_res_of>:
80005768:	a1 98       	lsr	r8,0x1
8000576a:	2f fa       	sub	r10,-1
8000576c:	e0 4a 00 ff 	cp.w	r10,255
80005770:	f9 b8 00 00 	moveq	r8,0
80005774:	f9 bb 00 00 	moveq	r11,0
80005778:	cd 3b       	rjmp	8000571e <__avr32_f32_add+0x4e>
8000577a:	d7 03       	nop

8000577c <__avr32_f32_mul>:
8000577c:	18 98       	mov	r8,r12
8000577e:	16 5c       	eor	r12,r11
80005780:	e6 1c 80 00 	andh	r12,0x8000,COH
80005784:	bf d8       	cbr	r8,0x1f
80005786:	c6 60       	breq	80005852 <__avr32_f32_mul_op1_zero>
80005788:	bf db       	cbr	r11,0x1f
8000578a:	f0 0b 0c 4a 	max	r10,r8,r11
8000578e:	f0 0b 0d 49 	min	r9,r8,r11
80005792:	f4 08 15 08 	lsl	r8,r10,0x8
80005796:	bf b8       	sbr	r8,0x1f
80005798:	b7 9a       	lsr	r10,0x17
8000579a:	e0 4a 00 ff 	cp.w	r10,255
8000579e:	c3 d0       	breq	80005818 <__avr32_f32_mul_op1_nan_or_inf>
800057a0:	f2 0b 15 08 	lsl	r11,r9,0x8
800057a4:	bf bb       	sbr	r11,0x1f
800057a6:	b7 99       	lsr	r9,0x17
800057a8:	c2 40       	breq	800057f0 <__avr32_f32_mul_op2_subnormal>
800057aa:	14 09       	add	r9,r10
800057ac:	f0 0b 06 4a 	mulu.d	r10,r8,r11
800057b0:	f6 08 15 01 	lsl	r8,r11,0x1
800057b4:	f0 0b 17 20 	movhs	r11,r8
800057b8:	f7 b9 02 01 	subhs	r9,1
800057bc:	a9 8a       	lsr	r10,0x8
800057be:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
800057c2:	27 e9       	sub	r9,126
800057c4:	e0 8a 00 39 	brle	80005836 <__avr32_f32_mul_res_subnormal>
800057c8:	e0 49 00 ff 	cp.w	r9,255
800057cc:	c0 f4       	brge	800057ea <__avr32_f32_mul_round+0x14>
800057ce:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
800057d2:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

800057d6 <__avr32_f32_mul_round>:
800057d6:	fc 18 80 00 	movh	r8,0x8000
800057da:	ed bc 00 00 	bld	r12,0x0
800057de:	f7 b8 01 ff 	subne	r8,-1
800057e2:	10 3a       	cp.w	r10,r8
800057e4:	f7 bc 02 ff 	subhs	r12,-1
800057e8:	5e fc       	retal	r12
800057ea:	ea 1c 7f 80 	orh	r12,0x7f80
800057ee:	5e fc       	retal	r12

800057f0 <__avr32_f32_mul_op2_subnormal>:
800057f0:	bf db       	cbr	r11,0x1f
800057f2:	f6 09 12 00 	clz	r9,r11
800057f6:	5e 3d       	retlo	0
800057f8:	20 89       	sub	r9,8
800057fa:	f6 09 09 4b 	lsl	r11,r11,r9
800057fe:	f2 09 11 01 	rsub	r9,r9,1
80005802:	14 7a       	tst	r10,r10
80005804:	cd 31       	brne	800057aa <__avr32_f32_mul+0x2e>
80005806:	bf d8       	cbr	r8,0x1f
80005808:	f6 0a 12 00 	clz	r10,r11
8000580c:	5e 3d       	retlo	0
8000580e:	f0 0a 09 48 	lsl	r8,r8,r10
80005812:	f4 0a 11 01 	rsub	r10,r10,1
80005816:	cc ab       	rjmp	800057aa <__avr32_f32_mul+0x2e>

80005818 <__avr32_f32_mul_op1_nan_or_inf>:
80005818:	f0 0b 15 01 	lsl	r11,r8,0x1
8000581c:	5e 1e       	retne	-1
8000581e:	12 79       	tst	r9,r9
80005820:	5e 0e       	reteq	-1
80005822:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005826:	f2 0b 16 17 	lsr	r11,r9,0x17
8000582a:	e0 4b 00 ff 	cp.w	r11,255
8000582e:	5e 1c       	retne	r12
80005830:	a9 79       	lsl	r9,0x9
80005832:	5e 0c       	reteq	r12
80005834:	5e fe       	retal	-1

80005836 <__avr32_f32_mul_res_subnormal>:
80005836:	f2 09 11 09 	rsub	r9,r9,9
8000583a:	f2 08 11 20 	rsub	r8,r9,32
8000583e:	5e 3d       	retlo	0
80005840:	f6 09 0a 49 	lsr	r9,r11,r9
80005844:	12 4c       	or	r12,r9
80005846:	f6 08 09 4b 	lsl	r11,r11,r8
8000584a:	e4 1a 00 ff 	andh	r10,0xff
8000584e:	16 4a       	or	r10,r11
80005850:	cc 3b       	rjmp	800057d6 <__avr32_f32_mul_round>

80005852 <__avr32_f32_mul_op1_zero>:
80005852:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80005856:	e0 4a 00 ff 	cp.w	r10,255
8000585a:	5e 1c       	retne	r12
8000585c:	5e 0e       	reteq	-1

8000585e <__avr32_s32_to_f32>:
8000585e:	58 0c       	cp.w	r12,0
80005860:	5e 0c       	reteq	r12
80005862:	18 9b       	mov	r11,r12
80005864:	5c 4c       	abs	r12
80005866:	e0 6a 00 9e 	mov	r10,158
8000586a:	f8 09 12 00 	clz	r9,r12
8000586e:	12 1a       	sub	r10,r9
80005870:	f8 09 09 4c 	lsl	r12,r12,r9
80005874:	58 0a       	cp.w	r10,0
80005876:	e0 8a 00 15 	brle	800058a0 <__avr32_s32_to_f32_subnormal>
8000587a:	37 f9       	mov	r9,127
8000587c:	ed bc 00 08 	bld	r12,0x8
80005880:	f7 b9 00 ff 	subeq	r9,-1
80005884:	12 0c       	add	r12,r9
80005886:	f7 ba 03 fe 	sublo	r10,-2
8000588a:	ed bc 00 1f 	bld	r12,0x1f
8000588e:	f7 ba 01 01 	subne	r10,1
80005892:	f8 0c 16 07 	lsr	r12,r12,0x7
80005896:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
8000589a:	a1 7b       	lsl	r11,0x1
8000589c:	5d 0c       	ror	r12
8000589e:	5e fc       	retal	r12

800058a0 <__avr32_s32_to_f32_subnormal>:
800058a0:	f4 0a 11 01 	rsub	r10,r10,1
800058a4:	59 9a       	cp.w	r10,25
800058a6:	f9 bc 02 00 	movhs	r12,0
800058aa:	c1 32       	brcc	800058d0 <__avr32_s32_to_f32_subnormal+0x30>
800058ac:	f4 09 11 20 	rsub	r9,r10,32
800058b0:	f8 09 09 49 	lsl	r9,r12,r9
800058b4:	5f 19       	srne	r9
800058b6:	f8 0a 0a 4c 	lsr	r12,r12,r10
800058ba:	12 4c       	or	r12,r9
800058bc:	37 f9       	mov	r9,127
800058be:	ed bc 00 08 	bld	r12,0x8
800058c2:	f7 b9 00 ff 	subeq	r9,-1
800058c6:	12 0c       	add	r12,r9
800058c8:	f8 0c 16 07 	lsr	r12,r12,0x7
800058cc:	a1 7b       	lsl	r11,0x1
800058ce:	5d 0c       	ror	r12
800058d0:	5e fc       	retal	r12

800058d2 <__avr32_f32_to_f64>:
800058d2:	f8 0b 15 01 	lsl	r11,r12,0x1
800058d6:	f9 ba 00 00 	moveq	r10,0
800058da:	5e 0b       	reteq	r11
800058dc:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800058e0:	e0 49 00 ff 	cp.w	r9,255
800058e4:	c1 e0       	breq	80005920 <__extendsfdf_return_op1+0x6>
800058e6:	a7 7b       	lsl	r11,0x7
800058e8:	30 0a       	mov	r10,0
800058ea:	58 09       	cp.w	r9,0
800058ec:	f7 b9 00 ff 	subeq	r9,-1
800058f0:	5f 18       	srne	r8
800058f2:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
800058f6:	fe 39 fc 80 	sub	r9,-896
800058fa:	f6 08 12 00 	clz	r8,r11
800058fe:	10 19       	sub	r9,r8
80005900:	f6 08 09 4b 	lsl	r11,r11,r8
80005904:	ed bb 00 1f 	bld	r11,0x1f
80005908:	f7 b9 01 01 	subne	r9,1
8000590c:	ab 9a       	lsr	r10,0xb
8000590e:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005912:	a1 7b       	lsl	r11,0x1
80005914:	ab 9b       	lsr	r11,0xb
80005916:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000591a <__extendsfdf_return_op1>:
8000591a:	a1 7c       	lsl	r12,0x1
8000591c:	5d 0b       	ror	r11
8000591e:	5e fb       	retal	r11
80005920:	fc 1a ff e0 	movh	r10,0xffe0
80005924:	a9 6b       	lsl	r11,0x8
80005926:	f9 bb 01 ff 	movne	r11,-1
8000592a:	f4 0b 17 00 	moveq	r11,r10
8000592e:	30 0a       	mov	r10,0
80005930:	cf 5b       	rjmp	8000591a <__extendsfdf_return_op1>

80005932 <__avr32_udiv64>:
80005932:	d4 31       	pushm	r0-r7,lr
80005934:	1a 97       	mov	r7,sp
80005936:	20 3d       	sub	sp,12
80005938:	10 9c       	mov	r12,r8
8000593a:	12 9e       	mov	lr,r9
8000593c:	14 93       	mov	r3,r10
8000593e:	58 09       	cp.w	r9,0
80005940:	e0 81 00 bd 	brne	80005aba <__avr32_udiv64+0x188>
80005944:	16 38       	cp.w	r8,r11
80005946:	e0 88 00 40 	brls	800059c6 <__avr32_udiv64+0x94>
8000594a:	f0 08 12 00 	clz	r8,r8
8000594e:	c0 d0       	breq	80005968 <__avr32_udiv64+0x36>
80005950:	f6 08 09 4b 	lsl	r11,r11,r8
80005954:	f0 09 11 20 	rsub	r9,r8,32
80005958:	f8 08 09 4c 	lsl	r12,r12,r8
8000595c:	f4 09 0a 49 	lsr	r9,r10,r9
80005960:	f4 08 09 43 	lsl	r3,r10,r8
80005964:	f3 eb 10 0b 	or	r11,r9,r11
80005968:	f8 0e 16 10 	lsr	lr,r12,0x10
8000596c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005970:	f6 0e 0d 00 	divu	r0,r11,lr
80005974:	e6 0b 16 10 	lsr	r11,r3,0x10
80005978:	00 99       	mov	r9,r0
8000597a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000597e:	e0 0a 02 48 	mul	r8,r0,r10
80005982:	10 3b       	cp.w	r11,r8
80005984:	c0 a2       	brcc	80005998 <__avr32_udiv64+0x66>
80005986:	20 19       	sub	r9,1
80005988:	18 0b       	add	r11,r12
8000598a:	18 3b       	cp.w	r11,r12
8000598c:	c0 63       	brcs	80005998 <__avr32_udiv64+0x66>
8000598e:	10 3b       	cp.w	r11,r8
80005990:	f7 b9 03 01 	sublo	r9,1
80005994:	f7 dc e3 0b 	addcs	r11,r11,r12
80005998:	f6 08 01 01 	sub	r1,r11,r8
8000599c:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800059a0:	e2 0e 0d 00 	divu	r0,r1,lr
800059a4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800059a8:	00 98       	mov	r8,r0
800059aa:	e0 0a 02 4a 	mul	r10,r0,r10
800059ae:	14 33       	cp.w	r3,r10
800059b0:	c0 82       	brcc	800059c0 <__avr32_udiv64+0x8e>
800059b2:	20 18       	sub	r8,1
800059b4:	18 03       	add	r3,r12
800059b6:	18 33       	cp.w	r3,r12
800059b8:	c0 43       	brcs	800059c0 <__avr32_udiv64+0x8e>
800059ba:	14 33       	cp.w	r3,r10
800059bc:	f7 b8 03 01 	sublo	r8,1
800059c0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800059c4:	cd f8       	rjmp	80005b82 <__avr32_udiv64+0x250>
800059c6:	58 08       	cp.w	r8,0
800059c8:	c0 51       	brne	800059d2 <__avr32_udiv64+0xa0>
800059ca:	30 19       	mov	r9,1
800059cc:	f2 08 0d 08 	divu	r8,r9,r8
800059d0:	10 9c       	mov	r12,r8
800059d2:	f8 06 12 00 	clz	r6,r12
800059d6:	c0 41       	brne	800059de <__avr32_udiv64+0xac>
800059d8:	18 1b       	sub	r11,r12
800059da:	30 19       	mov	r9,1
800059dc:	c4 08       	rjmp	80005a5c <__avr32_udiv64+0x12a>
800059de:	ec 01 11 20 	rsub	r1,r6,32
800059e2:	f4 01 0a 49 	lsr	r9,r10,r1
800059e6:	f8 06 09 4c 	lsl	r12,r12,r6
800059ea:	f6 06 09 48 	lsl	r8,r11,r6
800059ee:	f6 01 0a 41 	lsr	r1,r11,r1
800059f2:	f3 e8 10 08 	or	r8,r9,r8
800059f6:	f8 03 16 10 	lsr	r3,r12,0x10
800059fa:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800059fe:	e2 03 0d 00 	divu	r0,r1,r3
80005a02:	f0 0b 16 10 	lsr	r11,r8,0x10
80005a06:	00 9e       	mov	lr,r0
80005a08:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005a0c:	e0 05 02 49 	mul	r9,r0,r5
80005a10:	12 3b       	cp.w	r11,r9
80005a12:	c0 a2       	brcc	80005a26 <__avr32_udiv64+0xf4>
80005a14:	20 1e       	sub	lr,1
80005a16:	18 0b       	add	r11,r12
80005a18:	18 3b       	cp.w	r11,r12
80005a1a:	c0 63       	brcs	80005a26 <__avr32_udiv64+0xf4>
80005a1c:	12 3b       	cp.w	r11,r9
80005a1e:	f7 be 03 01 	sublo	lr,1
80005a22:	f7 dc e3 0b 	addcs	r11,r11,r12
80005a26:	12 1b       	sub	r11,r9
80005a28:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80005a2c:	f6 03 0d 02 	divu	r2,r11,r3
80005a30:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80005a34:	04 99       	mov	r9,r2
80005a36:	e4 05 02 4b 	mul	r11,r2,r5
80005a3a:	16 38       	cp.w	r8,r11
80005a3c:	c0 a2       	brcc	80005a50 <__avr32_udiv64+0x11e>
80005a3e:	20 19       	sub	r9,1
80005a40:	18 08       	add	r8,r12
80005a42:	18 38       	cp.w	r8,r12
80005a44:	c0 63       	brcs	80005a50 <__avr32_udiv64+0x11e>
80005a46:	16 38       	cp.w	r8,r11
80005a48:	f7 b9 03 01 	sublo	r9,1
80005a4c:	f1 dc e3 08 	addcs	r8,r8,r12
80005a50:	f4 06 09 43 	lsl	r3,r10,r6
80005a54:	f0 0b 01 0b 	sub	r11,r8,r11
80005a58:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80005a5c:	f8 06 16 10 	lsr	r6,r12,0x10
80005a60:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80005a64:	f6 06 0d 00 	divu	r0,r11,r6
80005a68:	e6 0b 16 10 	lsr	r11,r3,0x10
80005a6c:	00 9a       	mov	r10,r0
80005a6e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005a72:	e0 0e 02 48 	mul	r8,r0,lr
80005a76:	10 3b       	cp.w	r11,r8
80005a78:	c0 a2       	brcc	80005a8c <__avr32_udiv64+0x15a>
80005a7a:	20 1a       	sub	r10,1
80005a7c:	18 0b       	add	r11,r12
80005a7e:	18 3b       	cp.w	r11,r12
80005a80:	c0 63       	brcs	80005a8c <__avr32_udiv64+0x15a>
80005a82:	10 3b       	cp.w	r11,r8
80005a84:	f7 ba 03 01 	sublo	r10,1
80005a88:	f7 dc e3 0b 	addcs	r11,r11,r12
80005a8c:	f6 08 01 01 	sub	r1,r11,r8
80005a90:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80005a94:	e2 06 0d 00 	divu	r0,r1,r6
80005a98:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80005a9c:	00 98       	mov	r8,r0
80005a9e:	e0 0e 02 4b 	mul	r11,r0,lr
80005aa2:	16 33       	cp.w	r3,r11
80005aa4:	c0 82       	brcc	80005ab4 <__avr32_udiv64+0x182>
80005aa6:	20 18       	sub	r8,1
80005aa8:	18 03       	add	r3,r12
80005aaa:	18 33       	cp.w	r3,r12
80005aac:	c0 43       	brcs	80005ab4 <__avr32_udiv64+0x182>
80005aae:	16 33       	cp.w	r3,r11
80005ab0:	f7 b8 03 01 	sublo	r8,1
80005ab4:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80005ab8:	c6 98       	rjmp	80005b8a <__avr32_udiv64+0x258>
80005aba:	16 39       	cp.w	r9,r11
80005abc:	e0 8b 00 65 	brhi	80005b86 <__avr32_udiv64+0x254>
80005ac0:	f2 09 12 00 	clz	r9,r9
80005ac4:	c0 b1       	brne	80005ada <__avr32_udiv64+0x1a8>
80005ac6:	10 3a       	cp.w	r10,r8
80005ac8:	5f 2a       	srhs	r10
80005aca:	1c 3b       	cp.w	r11,lr
80005acc:	5f b8       	srhi	r8
80005ace:	10 4a       	or	r10,r8
80005ad0:	f2 0a 18 00 	cp.b	r10,r9
80005ad4:	c5 90       	breq	80005b86 <__avr32_udiv64+0x254>
80005ad6:	30 18       	mov	r8,1
80005ad8:	c5 98       	rjmp	80005b8a <__avr32_udiv64+0x258>
80005ada:	f0 09 09 46 	lsl	r6,r8,r9
80005ade:	f2 03 11 20 	rsub	r3,r9,32
80005ae2:	fc 09 09 4e 	lsl	lr,lr,r9
80005ae6:	f0 03 0a 48 	lsr	r8,r8,r3
80005aea:	f6 09 09 4c 	lsl	r12,r11,r9
80005aee:	f4 03 0a 42 	lsr	r2,r10,r3
80005af2:	ef 46 ff f4 	st.w	r7[-12],r6
80005af6:	f6 03 0a 43 	lsr	r3,r11,r3
80005afa:	18 42       	or	r2,r12
80005afc:	f1 ee 10 0c 	or	r12,r8,lr
80005b00:	f8 01 16 10 	lsr	r1,r12,0x10
80005b04:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80005b08:	e6 01 0d 04 	divu	r4,r3,r1
80005b0c:	e4 03 16 10 	lsr	r3,r2,0x10
80005b10:	08 9e       	mov	lr,r4
80005b12:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80005b16:	e8 06 02 48 	mul	r8,r4,r6
80005b1a:	10 33       	cp.w	r3,r8
80005b1c:	c0 a2       	brcc	80005b30 <__avr32_udiv64+0x1fe>
80005b1e:	20 1e       	sub	lr,1
80005b20:	18 03       	add	r3,r12
80005b22:	18 33       	cp.w	r3,r12
80005b24:	c0 63       	brcs	80005b30 <__avr32_udiv64+0x1fe>
80005b26:	10 33       	cp.w	r3,r8
80005b28:	f7 be 03 01 	sublo	lr,1
80005b2c:	e7 dc e3 03 	addcs	r3,r3,r12
80005b30:	10 13       	sub	r3,r8
80005b32:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80005b36:	e6 01 0d 00 	divu	r0,r3,r1
80005b3a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005b3e:	00 98       	mov	r8,r0
80005b40:	e0 06 02 46 	mul	r6,r0,r6
80005b44:	0c 3b       	cp.w	r11,r6
80005b46:	c0 a2       	brcc	80005b5a <__avr32_udiv64+0x228>
80005b48:	20 18       	sub	r8,1
80005b4a:	18 0b       	add	r11,r12
80005b4c:	18 3b       	cp.w	r11,r12
80005b4e:	c0 63       	brcs	80005b5a <__avr32_udiv64+0x228>
80005b50:	0c 3b       	cp.w	r11,r6
80005b52:	f7 dc e3 0b 	addcs	r11,r11,r12
80005b56:	f7 b8 03 01 	sublo	r8,1
80005b5a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80005b5e:	ee f4 ff f4 	ld.w	r4,r7[-12]
80005b62:	0c 1b       	sub	r11,r6
80005b64:	f0 04 06 42 	mulu.d	r2,r8,r4
80005b68:	06 95       	mov	r5,r3
80005b6a:	16 35       	cp.w	r5,r11
80005b6c:	e0 8b 00 0a 	brhi	80005b80 <__avr32_udiv64+0x24e>
80005b70:	5f 0b       	sreq	r11
80005b72:	f4 09 09 49 	lsl	r9,r10,r9
80005b76:	12 32       	cp.w	r2,r9
80005b78:	5f b9       	srhi	r9
80005b7a:	f7 e9 00 09 	and	r9,r11,r9
80005b7e:	c0 60       	breq	80005b8a <__avr32_udiv64+0x258>
80005b80:	20 18       	sub	r8,1
80005b82:	30 09       	mov	r9,0
80005b84:	c0 38       	rjmp	80005b8a <__avr32_udiv64+0x258>
80005b86:	30 09       	mov	r9,0
80005b88:	12 98       	mov	r8,r9
80005b8a:	10 9a       	mov	r10,r8
80005b8c:	12 93       	mov	r3,r9
80005b8e:	10 92       	mov	r2,r8
80005b90:	12 9b       	mov	r11,r9
80005b92:	2f dd       	sub	sp,-12
80005b94:	d8 32       	popm	r0-r7,pc
80005b96:	d7 03       	nop

80005b98 <sprintf>:
80005b98:	d4 01       	pushm	lr
80005b9a:	21 7d       	sub	sp,92
80005b9c:	e0 68 ff ff 	mov	r8,65535
80005ba0:	ea 18 7f ff 	orh	r8,0x7fff
80005ba4:	50 58       	stdsp	sp[0x14],r8
80005ba6:	50 28       	stdsp	sp[0x8],r8
80005ba8:	e0 68 02 08 	mov	r8,520
80005bac:	ba 68       	st.h	sp[0xc],r8
80005bae:	3f f8       	mov	r8,-1
80005bb0:	ba 78       	st.h	sp[0xe],r8
80005bb2:	48 88       	lddpc	r8,80005bd0 <sprintf+0x38>
80005bb4:	50 4c       	stdsp	sp[0x10],r12
80005bb6:	16 9a       	mov	r10,r11
80005bb8:	50 0c       	stdsp	sp[0x0],r12
80005bba:	fa c9 ff a0 	sub	r9,sp,-96
80005bbe:	70 0c       	ld.w	r12,r8[0x0]
80005bc0:	1a 9b       	mov	r11,sp
80005bc2:	ca 7d       	rcall	80005f10 <_vfprintf_r>
80005bc4:	30 09       	mov	r9,0
80005bc6:	40 08       	lddsp	r8,sp[0x0]
80005bc8:	b0 89       	st.b	r8[0x0],r9
80005bca:	2e 9d       	sub	sp,-92
80005bcc:	d8 02       	popm	pc
80005bce:	d7 03       	nop
80005bd0:	00 00       	add	r0,r0
80005bd2:	00 fc       	st.b	--r0,r12

80005bd4 <get_arg>:
80005bd4:	d4 31       	pushm	r0-r7,lr
80005bd6:	20 8d       	sub	sp,32
80005bd8:	fa c4 ff bc 	sub	r4,sp,-68
80005bdc:	50 4b       	stdsp	sp[0x10],r11
80005bde:	68 2e       	ld.w	lr,r4[0x8]
80005be0:	50 58       	stdsp	sp[0x14],r8
80005be2:	12 96       	mov	r6,r9
80005be4:	7c 0b       	ld.w	r11,lr[0x0]
80005be6:	70 05       	ld.w	r5,r8[0x0]
80005be8:	50 6e       	stdsp	sp[0x18],lr
80005bea:	58 0b       	cp.w	r11,0
80005bec:	f4 0b 17 00 	moveq	r11,r10
80005bf0:	68 03       	ld.w	r3,r4[0x0]
80005bf2:	68 11       	ld.w	r1,r4[0x4]
80005bf4:	40 49       	lddsp	r9,sp[0x10]
80005bf6:	30 08       	mov	r8,0
80005bf8:	c2 e9       	rjmp	80005e54 <get_arg+0x280>
80005bfa:	2f fb       	sub	r11,-1
80005bfc:	32 5c       	mov	r12,37
80005bfe:	17 8a       	ld.ub	r10,r11[0x0]
80005c00:	f8 0a 18 00 	cp.b	r10,r12
80005c04:	5f 1e       	srne	lr
80005c06:	f0 0a 18 00 	cp.b	r10,r8
80005c0a:	5f 1c       	srne	r12
80005c0c:	fd ec 00 0c 	and	r12,lr,r12
80005c10:	f0 0c 18 00 	cp.b	r12,r8
80005c14:	cf 31       	brne	80005bfa <get_arg+0x26>
80005c16:	58 0a       	cp.w	r10,0
80005c18:	e0 80 01 2b 	breq	80005e6e <get_arg+0x29a>
80005c1c:	30 0c       	mov	r12,0
80005c1e:	3f fa       	mov	r10,-1
80005c20:	18 90       	mov	r0,r12
80005c22:	50 3a       	stdsp	sp[0xc],r10
80005c24:	18 94       	mov	r4,r12
80005c26:	18 92       	mov	r2,r12
80005c28:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80005c2c:	16 97       	mov	r7,r11
80005c2e:	50 7c       	stdsp	sp[0x1c],r12
80005c30:	4c ec       	lddpc	r12,80005d68 <get_arg+0x194>
80005c32:	0f 3a       	ld.ub	r10,r7++
80005c34:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80005c38:	40 7c       	lddsp	r12,sp[0x1c]
80005c3a:	1c 0c       	add	r12,lr
80005c3c:	4c ce       	lddpc	lr,80005d6c <get_arg+0x198>
80005c3e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80005c42:	20 1e       	sub	lr,1
80005c44:	50 0e       	stdsp	sp[0x0],lr
80005c46:	4c be       	lddpc	lr,80005d70 <get_arg+0x19c>
80005c48:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80005c4c:	50 7c       	stdsp	sp[0x1c],r12
80005c4e:	40 0c       	lddsp	r12,sp[0x0]
80005c50:	58 7c       	cp.w	r12,7
80005c52:	e0 8b 00 fa 	brhi	80005e46 <get_arg+0x272>
80005c56:	4c 8e       	lddpc	lr,80005d74 <get_arg+0x1a0>
80005c58:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80005c5c:	36 8b       	mov	r11,104
80005c5e:	f6 0a 18 00 	cp.b	r10,r11
80005c62:	e0 80 00 f2 	breq	80005e46 <get_arg+0x272>
80005c66:	37 1b       	mov	r11,113
80005c68:	f6 0a 18 00 	cp.b	r10,r11
80005c6c:	c0 70       	breq	80005c7a <get_arg+0xa6>
80005c6e:	34 cb       	mov	r11,76
80005c70:	f6 0a 18 00 	cp.b	r10,r11
80005c74:	c0 51       	brne	80005c7e <get_arg+0xaa>
80005c76:	a3 b4       	sbr	r4,0x3
80005c78:	ce 78       	rjmp	80005e46 <get_arg+0x272>
80005c7a:	a5 b4       	sbr	r4,0x5
80005c7c:	ce 58       	rjmp	80005e46 <get_arg+0x272>
80005c7e:	08 9a       	mov	r10,r4
80005c80:	0e 9b       	mov	r11,r7
80005c82:	a5 aa       	sbr	r10,0x4
80005c84:	17 3c       	ld.ub	r12,r11++
80005c86:	a5 b4       	sbr	r4,0x5
80005c88:	36 ce       	mov	lr,108
80005c8a:	fc 0c 18 00 	cp.b	r12,lr
80005c8e:	e0 80 00 dd 	breq	80005e48 <get_arg+0x274>
80005c92:	14 94       	mov	r4,r10
80005c94:	cd 98       	rjmp	80005e46 <get_arg+0x272>
80005c96:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80005c9a:	36 7c       	mov	r12,103
80005c9c:	f8 0a 18 00 	cp.b	r10,r12
80005ca0:	e0 8b 00 27 	brhi	80005cee <get_arg+0x11a>
80005ca4:	36 5b       	mov	r11,101
80005ca6:	f6 0a 18 00 	cp.b	r10,r11
80005caa:	c4 82       	brcc	80005d3a <get_arg+0x166>
80005cac:	34 fb       	mov	r11,79
80005cae:	f6 0a 18 00 	cp.b	r10,r11
80005cb2:	c4 80       	breq	80005d42 <get_arg+0x16e>
80005cb4:	e0 8b 00 0c 	brhi	80005ccc <get_arg+0xf8>
80005cb8:	34 5b       	mov	r11,69
80005cba:	f6 0a 18 00 	cp.b	r10,r11
80005cbe:	c3 e0       	breq	80005d3a <get_arg+0x166>
80005cc0:	34 7b       	mov	r11,71
80005cc2:	f6 0a 18 00 	cp.b	r10,r11
80005cc6:	c3 a0       	breq	80005d3a <get_arg+0x166>
80005cc8:	34 4b       	mov	r11,68
80005cca:	c0 88       	rjmp	80005cda <get_arg+0x106>
80005ccc:	35 8b       	mov	r11,88
80005cce:	f6 0a 18 00 	cp.b	r10,r11
80005cd2:	c2 c0       	breq	80005d2a <get_arg+0x156>
80005cd4:	e0 8b 00 07 	brhi	80005ce2 <get_arg+0x10e>
80005cd8:	35 5b       	mov	r11,85
80005cda:	f6 0a 18 00 	cp.b	r10,r11
80005cde:	c3 51       	brne	80005d48 <get_arg+0x174>
80005ce0:	c3 18       	rjmp	80005d42 <get_arg+0x16e>
80005ce2:	36 3b       	mov	r11,99
80005ce4:	f6 0a 18 00 	cp.b	r10,r11
80005ce8:	c2 f0       	breq	80005d46 <get_arg+0x172>
80005cea:	36 4b       	mov	r11,100
80005cec:	c0 e8       	rjmp	80005d08 <get_arg+0x134>
80005cee:	37 0b       	mov	r11,112
80005cf0:	f6 0a 18 00 	cp.b	r10,r11
80005cf4:	c2 50       	breq	80005d3e <get_arg+0x16a>
80005cf6:	e0 8b 00 0d 	brhi	80005d10 <get_arg+0x13c>
80005cfa:	36 eb       	mov	r11,110
80005cfc:	f6 0a 18 00 	cp.b	r10,r11
80005d00:	c1 f0       	breq	80005d3e <get_arg+0x16a>
80005d02:	e0 8b 00 14 	brhi	80005d2a <get_arg+0x156>
80005d06:	36 9b       	mov	r11,105
80005d08:	f6 0a 18 00 	cp.b	r10,r11
80005d0c:	c1 e1       	brne	80005d48 <get_arg+0x174>
80005d0e:	c0 e8       	rjmp	80005d2a <get_arg+0x156>
80005d10:	37 5b       	mov	r11,117
80005d12:	f6 0a 18 00 	cp.b	r10,r11
80005d16:	c0 a0       	breq	80005d2a <get_arg+0x156>
80005d18:	37 8b       	mov	r11,120
80005d1a:	f6 0a 18 00 	cp.b	r10,r11
80005d1e:	c0 60       	breq	80005d2a <get_arg+0x156>
80005d20:	37 3b       	mov	r11,115
80005d22:	f6 0a 18 00 	cp.b	r10,r11
80005d26:	c1 11       	brne	80005d48 <get_arg+0x174>
80005d28:	c0 b8       	rjmp	80005d3e <get_arg+0x16a>
80005d2a:	ed b4 00 04 	bld	r4,0x4
80005d2e:	c0 a0       	breq	80005d42 <get_arg+0x16e>
80005d30:	ed b4 00 05 	bld	r4,0x5
80005d34:	c0 91       	brne	80005d46 <get_arg+0x172>
80005d36:	30 20       	mov	r0,2
80005d38:	c0 88       	rjmp	80005d48 <get_arg+0x174>
80005d3a:	30 40       	mov	r0,4
80005d3c:	c0 68       	rjmp	80005d48 <get_arg+0x174>
80005d3e:	30 30       	mov	r0,3
80005d40:	c0 48       	rjmp	80005d48 <get_arg+0x174>
80005d42:	30 10       	mov	r0,1
80005d44:	c0 28       	rjmp	80005d48 <get_arg+0x174>
80005d46:	30 00       	mov	r0,0
80005d48:	40 3b       	lddsp	r11,sp[0xc]
80005d4a:	5b fb       	cp.w	r11,-1
80005d4c:	c0 40       	breq	80005d54 <get_arg+0x180>
80005d4e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80005d52:	c7 a8       	rjmp	80005e46 <get_arg+0x272>
80005d54:	58 60       	cp.w	r0,6
80005d56:	e0 8b 00 78 	brhi	80005e46 <get_arg+0x272>
80005d5a:	6c 0a       	ld.w	r10,r6[0x0]
80005d5c:	ea cc ff ff 	sub	r12,r5,-1
80005d60:	48 6e       	lddpc	lr,80005d78 <get_arg+0x1a4>
80005d62:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80005d66:	d7 03       	nop
80005d68:	80 00       	ld.sh	r0,r0[0x0]
80005d6a:	c4 6c       	rcall	80005df6 <get_arg+0x222>
80005d6c:	80 00       	ld.sh	r0,r0[0x0]
80005d6e:	c3 a4       	brge	80005de2 <get_arg+0x20e>
80005d70:	80 00       	ld.sh	r0,r0[0x0]
80005d72:	c3 38       	rjmp	80005dd8 <get_arg+0x204>
80005d74:	80 00       	ld.sh	r0,r0[0x0]
80005d76:	c1 98       	rjmp	80005da8 <get_arg+0x1d4>
80005d78:	80 00       	ld.sh	r0,r0[0x0]
80005d7a:	c1 b8       	rjmp	80005db0 <get_arg+0x1dc>
80005d7c:	f4 cb ff f8 	sub	r11,r10,-8
80005d80:	8d 0b       	st.w	r6[0x0],r11
80005d82:	f4 ea 00 00 	ld.d	r10,r10[0]
80005d86:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005d8a:	c0 f8       	rjmp	80005da8 <get_arg+0x1d4>
80005d8c:	f4 cb ff fc 	sub	r11,r10,-4
80005d90:	8d 0b       	st.w	r6[0x0],r11
80005d92:	74 0a       	ld.w	r10,r10[0x0]
80005d94:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005d98:	c0 88       	rjmp	80005da8 <get_arg+0x1d4>
80005d9a:	f4 cb ff f8 	sub	r11,r10,-8
80005d9e:	8d 0b       	st.w	r6[0x0],r11
80005da0:	f4 ea 00 00 	ld.d	r10,r10[0]
80005da4:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80005da8:	0e 9b       	mov	r11,r7
80005daa:	18 95       	mov	r5,r12
80005dac:	c4 e8       	rjmp	80005e48 <get_arg+0x274>
80005dae:	62 0a       	ld.w	r10,r1[0x0]
80005db0:	5b fa       	cp.w	r10,-1
80005db2:	c0 b1       	brne	80005dc8 <get_arg+0x1f4>
80005db4:	50 19       	stdsp	sp[0x4],r9
80005db6:	50 28       	stdsp	sp[0x8],r8
80005db8:	e0 6a 00 80 	mov	r10,128
80005dbc:	30 0b       	mov	r11,0
80005dbe:	02 9c       	mov	r12,r1
80005dc0:	e0 a0 1e 30 	rcall	80009a20 <memset>
80005dc4:	40 28       	lddsp	r8,sp[0x8]
80005dc6:	40 19       	lddsp	r9,sp[0x4]
80005dc8:	e4 cc 00 01 	sub	r12,r2,1
80005dcc:	0e 9b       	mov	r11,r7
80005dce:	50 3c       	stdsp	sp[0xc],r12
80005dd0:	f2 0c 0c 49 	max	r9,r9,r12
80005dd4:	c3 a8       	rjmp	80005e48 <get_arg+0x274>
80005dd6:	62 0a       	ld.w	r10,r1[0x0]
80005dd8:	5b fa       	cp.w	r10,-1
80005dda:	c0 b1       	brne	80005df0 <get_arg+0x21c>
80005ddc:	50 19       	stdsp	sp[0x4],r9
80005dde:	50 28       	stdsp	sp[0x8],r8
80005de0:	e0 6a 00 80 	mov	r10,128
80005de4:	30 0b       	mov	r11,0
80005de6:	02 9c       	mov	r12,r1
80005de8:	e0 a0 1e 1c 	rcall	80009a20 <memset>
80005dec:	40 28       	lddsp	r8,sp[0x8]
80005dee:	40 19       	lddsp	r9,sp[0x4]
80005df0:	20 12       	sub	r2,1
80005df2:	30 0a       	mov	r10,0
80005df4:	0e 9b       	mov	r11,r7
80005df6:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80005dfa:	f2 02 0c 49 	max	r9,r9,r2
80005dfe:	c2 58       	rjmp	80005e48 <get_arg+0x274>
80005e00:	16 97       	mov	r7,r11
80005e02:	6c 0a       	ld.w	r10,r6[0x0]
80005e04:	f4 cb ff fc 	sub	r11,r10,-4
80005e08:	8d 0b       	st.w	r6[0x0],r11
80005e0a:	74 0a       	ld.w	r10,r10[0x0]
80005e0c:	0e 9b       	mov	r11,r7
80005e0e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80005e12:	2f f5       	sub	r5,-1
80005e14:	c1 a8       	rjmp	80005e48 <get_arg+0x274>
80005e16:	f4 c2 00 30 	sub	r2,r10,48
80005e1a:	c0 68       	rjmp	80005e26 <get_arg+0x252>
80005e1c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80005e20:	2f f7       	sub	r7,-1
80005e22:	f4 02 00 12 	add	r2,r10,r2<<0x1
80005e26:	0f 8a       	ld.ub	r10,r7[0x0]
80005e28:	58 0a       	cp.w	r10,0
80005e2a:	c0 e0       	breq	80005e46 <get_arg+0x272>
80005e2c:	23 0a       	sub	r10,48
80005e2e:	58 9a       	cp.w	r10,9
80005e30:	fe 98 ff f6 	brls	80005e1c <get_arg+0x248>
80005e34:	c0 98       	rjmp	80005e46 <get_arg+0x272>
80005e36:	2f f7       	sub	r7,-1
80005e38:	0f 8a       	ld.ub	r10,r7[0x0]
80005e3a:	58 0a       	cp.w	r10,0
80005e3c:	c0 50       	breq	80005e46 <get_arg+0x272>
80005e3e:	23 0a       	sub	r10,48
80005e40:	58 9a       	cp.w	r10,9
80005e42:	fe 98 ff fa 	brls	80005e36 <get_arg+0x262>
80005e46:	0e 9b       	mov	r11,r7
80005e48:	40 7c       	lddsp	r12,sp[0x1c]
80005e4a:	30 ba       	mov	r10,11
80005e4c:	f4 0c 18 00 	cp.b	r12,r10
80005e50:	fe 91 fe ec 	brne	80005c28 <get_arg+0x54>
80005e54:	40 42       	lddsp	r2,sp[0x10]
80005e56:	17 8c       	ld.ub	r12,r11[0x0]
80005e58:	0a 32       	cp.w	r2,r5
80005e5a:	5f 4a       	srge	r10
80005e5c:	f0 0c 18 00 	cp.b	r12,r8
80005e60:	5f 1c       	srne	r12
80005e62:	f9 ea 00 0a 	and	r10,r12,r10
80005e66:	f0 0a 18 00 	cp.b	r10,r8
80005e6a:	fe 91 fe c9 	brne	80005bfc <get_arg+0x28>
80005e6e:	30 08       	mov	r8,0
80005e70:	40 4e       	lddsp	lr,sp[0x10]
80005e72:	17 8a       	ld.ub	r10,r11[0x0]
80005e74:	e2 05 00 21 	add	r1,r1,r5<<0x2
80005e78:	f0 0a 18 00 	cp.b	r10,r8
80005e7c:	fc 09 17 10 	movne	r9,lr
80005e80:	e6 05 00 38 	add	r8,r3,r5<<0x3
80005e84:	06 9e       	mov	lr,r3
80005e86:	c2 a8       	rjmp	80005eda <get_arg+0x306>
80005e88:	62 0a       	ld.w	r10,r1[0x0]
80005e8a:	58 3a       	cp.w	r10,3
80005e8c:	c1 e0       	breq	80005ec8 <get_arg+0x2f4>
80005e8e:	e0 89 00 07 	brgt	80005e9c <get_arg+0x2c8>
80005e92:	58 1a       	cp.w	r10,1
80005e94:	c1 a0       	breq	80005ec8 <get_arg+0x2f4>
80005e96:	58 2a       	cp.w	r10,2
80005e98:	c1 81       	brne	80005ec8 <get_arg+0x2f4>
80005e9a:	c0 58       	rjmp	80005ea4 <get_arg+0x2d0>
80005e9c:	58 5a       	cp.w	r10,5
80005e9e:	c0 c0       	breq	80005eb6 <get_arg+0x2e2>
80005ea0:	c0 b5       	brlt	80005eb6 <get_arg+0x2e2>
80005ea2:	c1 38       	rjmp	80005ec8 <get_arg+0x2f4>
80005ea4:	6c 0a       	ld.w	r10,r6[0x0]
80005ea6:	f4 cc ff f8 	sub	r12,r10,-8
80005eaa:	8d 0c       	st.w	r6[0x0],r12
80005eac:	f4 e2 00 00 	ld.d	r2,r10[0]
80005eb0:	f0 e3 00 00 	st.d	r8[0],r2
80005eb4:	c1 08       	rjmp	80005ed4 <get_arg+0x300>
80005eb6:	6c 0a       	ld.w	r10,r6[0x0]
80005eb8:	f4 cc ff f8 	sub	r12,r10,-8
80005ebc:	8d 0c       	st.w	r6[0x0],r12
80005ebe:	f4 e2 00 00 	ld.d	r2,r10[0]
80005ec2:	f0 e3 00 00 	st.d	r8[0],r2
80005ec6:	c0 78       	rjmp	80005ed4 <get_arg+0x300>
80005ec8:	6c 0a       	ld.w	r10,r6[0x0]
80005eca:	f4 cc ff fc 	sub	r12,r10,-4
80005ece:	8d 0c       	st.w	r6[0x0],r12
80005ed0:	74 0a       	ld.w	r10,r10[0x0]
80005ed2:	91 0a       	st.w	r8[0x0],r10
80005ed4:	2f f5       	sub	r5,-1
80005ed6:	2f 88       	sub	r8,-8
80005ed8:	2f c1       	sub	r1,-4
80005eda:	12 35       	cp.w	r5,r9
80005edc:	fe 9a ff d6 	brle	80005e88 <get_arg+0x2b4>
80005ee0:	1c 93       	mov	r3,lr
80005ee2:	40 52       	lddsp	r2,sp[0x14]
80005ee4:	40 6e       	lddsp	lr,sp[0x18]
80005ee6:	85 05       	st.w	r2[0x0],r5
80005ee8:	9d 0b       	st.w	lr[0x0],r11
80005eea:	40 4b       	lddsp	r11,sp[0x10]
80005eec:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80005ef0:	2f 8d       	sub	sp,-32
80005ef2:	d8 32       	popm	r0-r7,pc

80005ef4 <__sprint_r>:
80005ef4:	d4 21       	pushm	r4-r7,lr
80005ef6:	14 97       	mov	r7,r10
80005ef8:	74 28       	ld.w	r8,r10[0x8]
80005efa:	58 08       	cp.w	r8,0
80005efc:	c0 41       	brne	80005f04 <__sprint_r+0x10>
80005efe:	95 18       	st.w	r10[0x4],r8
80005f00:	10 9c       	mov	r12,r8
80005f02:	d8 22       	popm	r4-r7,pc
80005f04:	e0 a0 18 ca 	rcall	80009098 <__sfvwrite_r>
80005f08:	30 08       	mov	r8,0
80005f0a:	8f 18       	st.w	r7[0x4],r8
80005f0c:	8f 28       	st.w	r7[0x8],r8
80005f0e:	d8 22       	popm	r4-r7,pc

80005f10 <_vfprintf_r>:
80005f10:	d4 31       	pushm	r0-r7,lr
80005f12:	fa cd 06 bc 	sub	sp,sp,1724
80005f16:	51 09       	stdsp	sp[0x40],r9
80005f18:	16 91       	mov	r1,r11
80005f1a:	14 97       	mov	r7,r10
80005f1c:	18 95       	mov	r5,r12
80005f1e:	e0 a0 1a 33 	rcall	80009384 <_localeconv_r>
80005f22:	78 0c       	ld.w	r12,r12[0x0]
80005f24:	50 cc       	stdsp	sp[0x30],r12
80005f26:	58 05       	cp.w	r5,0
80005f28:	c0 70       	breq	80005f36 <_vfprintf_r+0x26>
80005f2a:	6a 68       	ld.w	r8,r5[0x18]
80005f2c:	58 08       	cp.w	r8,0
80005f2e:	c0 41       	brne	80005f36 <_vfprintf_r+0x26>
80005f30:	0a 9c       	mov	r12,r5
80005f32:	e0 a0 17 4f 	rcall	80008dd0 <__sinit>
80005f36:	4d 08       	lddpc	r8,80006074 <_vfprintf_r+0x164>
80005f38:	10 31       	cp.w	r1,r8
80005f3a:	c0 31       	brne	80005f40 <_vfprintf_r+0x30>
80005f3c:	6a 01       	ld.w	r1,r5[0x0]
80005f3e:	c0 a8       	rjmp	80005f52 <_vfprintf_r+0x42>
80005f40:	4c e8       	lddpc	r8,80006078 <_vfprintf_r+0x168>
80005f42:	10 31       	cp.w	r1,r8
80005f44:	c0 31       	brne	80005f4a <_vfprintf_r+0x3a>
80005f46:	6a 11       	ld.w	r1,r5[0x4]
80005f48:	c0 58       	rjmp	80005f52 <_vfprintf_r+0x42>
80005f4a:	4c d8       	lddpc	r8,8000607c <_vfprintf_r+0x16c>
80005f4c:	10 31       	cp.w	r1,r8
80005f4e:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80005f52:	82 68       	ld.sh	r8,r1[0xc]
80005f54:	ed b8 00 03 	bld	r8,0x3
80005f58:	c0 41       	brne	80005f60 <_vfprintf_r+0x50>
80005f5a:	62 48       	ld.w	r8,r1[0x10]
80005f5c:	58 08       	cp.w	r8,0
80005f5e:	c0 71       	brne	80005f6c <_vfprintf_r+0x5c>
80005f60:	02 9b       	mov	r11,r1
80005f62:	0a 9c       	mov	r12,r5
80005f64:	e0 a0 0f 6c 	rcall	80007e3c <__swsetup_r>
80005f68:	e0 81 0f 63 	brne	80007e2e <_vfprintf_r+0x1f1e>
80005f6c:	82 68       	ld.sh	r8,r1[0xc]
80005f6e:	10 99       	mov	r9,r8
80005f70:	e2 19 00 1a 	andl	r9,0x1a,COH
80005f74:	58 a9       	cp.w	r9,10
80005f76:	c3 c1       	brne	80005fee <_vfprintf_r+0xde>
80005f78:	82 79       	ld.sh	r9,r1[0xe]
80005f7a:	30 0a       	mov	r10,0
80005f7c:	f4 09 19 00 	cp.h	r9,r10
80005f80:	c3 75       	brlt	80005fee <_vfprintf_r+0xde>
80005f82:	a1 d8       	cbr	r8,0x1
80005f84:	fb 58 05 d0 	st.h	sp[1488],r8
80005f88:	62 88       	ld.w	r8,r1[0x20]
80005f8a:	fb 48 05 e4 	st.w	sp[1508],r8
80005f8e:	62 a8       	ld.w	r8,r1[0x28]
80005f90:	fb 48 05 ec 	st.w	sp[1516],r8
80005f94:	fa c8 ff bc 	sub	r8,sp,-68
80005f98:	fb 48 05 d4 	st.w	sp[1492],r8
80005f9c:	fb 48 05 c4 	st.w	sp[1476],r8
80005fa0:	e0 68 04 00 	mov	r8,1024
80005fa4:	fb 48 05 d8 	st.w	sp[1496],r8
80005fa8:	fb 48 05 cc 	st.w	sp[1484],r8
80005fac:	30 08       	mov	r8,0
80005fae:	fb 59 05 d2 	st.h	sp[1490],r9
80005fb2:	0e 9a       	mov	r10,r7
80005fb4:	41 09       	lddsp	r9,sp[0x40]
80005fb6:	fa c7 fa 3c 	sub	r7,sp,-1476
80005fba:	fb 48 05 dc 	st.w	sp[1500],r8
80005fbe:	0a 9c       	mov	r12,r5
80005fc0:	0e 9b       	mov	r11,r7
80005fc2:	ca 7f       	rcall	80005f10 <_vfprintf_r>
80005fc4:	50 bc       	stdsp	sp[0x2c],r12
80005fc6:	c0 95       	brlt	80005fd8 <_vfprintf_r+0xc8>
80005fc8:	0e 9b       	mov	r11,r7
80005fca:	0a 9c       	mov	r12,r5
80005fcc:	e0 a0 16 26 	rcall	80008c18 <_fflush_r>
80005fd0:	40 be       	lddsp	lr,sp[0x2c]
80005fd2:	f9 be 01 ff 	movne	lr,-1
80005fd6:	50 be       	stdsp	sp[0x2c],lr
80005fd8:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80005fdc:	ed b8 00 06 	bld	r8,0x6
80005fe0:	e0 81 0f 29 	brne	80007e32 <_vfprintf_r+0x1f22>
80005fe4:	82 68       	ld.sh	r8,r1[0xc]
80005fe6:	a7 a8       	sbr	r8,0x6
80005fe8:	a2 68       	st.h	r1[0xc],r8
80005fea:	e0 8f 0f 24 	bral	80007e32 <_vfprintf_r+0x1f22>
80005fee:	30 08       	mov	r8,0
80005ff0:	fb 48 06 b4 	st.w	sp[1716],r8
80005ff4:	fb 48 06 90 	st.w	sp[1680],r8
80005ff8:	fb 48 06 8c 	st.w	sp[1676],r8
80005ffc:	fb 48 06 b0 	st.w	sp[1712],r8
80006000:	30 08       	mov	r8,0
80006002:	30 09       	mov	r9,0
80006004:	50 a7       	stdsp	sp[0x28],r7
80006006:	50 78       	stdsp	sp[0x1c],r8
80006008:	fa c3 f9 e0 	sub	r3,sp,-1568
8000600c:	3f f8       	mov	r8,-1
8000600e:	50 59       	stdsp	sp[0x14],r9
80006010:	fb 43 06 88 	st.w	sp[1672],r3
80006014:	fb 48 05 44 	st.w	sp[1348],r8
80006018:	12 9c       	mov	r12,r9
8000601a:	50 69       	stdsp	sp[0x18],r9
8000601c:	50 d9       	stdsp	sp[0x34],r9
8000601e:	50 e9       	stdsp	sp[0x38],r9
80006020:	50 b9       	stdsp	sp[0x2c],r9
80006022:	12 97       	mov	r7,r9
80006024:	0a 94       	mov	r4,r5
80006026:	40 a2       	lddsp	r2,sp[0x28]
80006028:	32 5a       	mov	r10,37
8000602a:	30 08       	mov	r8,0
8000602c:	c0 28       	rjmp	80006030 <_vfprintf_r+0x120>
8000602e:	2f f2       	sub	r2,-1
80006030:	05 89       	ld.ub	r9,r2[0x0]
80006032:	f0 09 18 00 	cp.b	r9,r8
80006036:	5f 1b       	srne	r11
80006038:	f4 09 18 00 	cp.b	r9,r10
8000603c:	5f 19       	srne	r9
8000603e:	f3 eb 00 0b 	and	r11,r9,r11
80006042:	f0 0b 18 00 	cp.b	r11,r8
80006046:	cf 41       	brne	8000602e <_vfprintf_r+0x11e>
80006048:	40 ab       	lddsp	r11,sp[0x28]
8000604a:	e4 0b 01 06 	sub	r6,r2,r11
8000604e:	c2 50       	breq	80006098 <_vfprintf_r+0x188>
80006050:	fa f8 06 90 	ld.w	r8,sp[1680]
80006054:	0c 08       	add	r8,r6
80006056:	87 0b       	st.w	r3[0x0],r11
80006058:	fb 48 06 90 	st.w	sp[1680],r8
8000605c:	87 16       	st.w	r3[0x4],r6
8000605e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006062:	2f f8       	sub	r8,-1
80006064:	fb 48 06 8c 	st.w	sp[1676],r8
80006068:	58 78       	cp.w	r8,7
8000606a:	e0 89 00 0b 	brgt	80006080 <_vfprintf_r+0x170>
8000606e:	2f 83       	sub	r3,-8
80006070:	c1 18       	rjmp	80006092 <_vfprintf_r+0x182>
80006072:	d7 03       	nop
80006074:	80 00       	ld.sh	r0,r0[0x0]
80006076:	c5 7c       	rcall	80006124 <_vfprintf_r+0x214>
80006078:	80 00       	ld.sh	r0,r0[0x0]
8000607a:	c5 9c       	rcall	8000612c <_vfprintf_r+0x21c>
8000607c:	80 00       	ld.sh	r0,r0[0x0]
8000607e:	c5 bc       	rcall	80006134 <_vfprintf_r+0x224>
80006080:	fa ca f9 78 	sub	r10,sp,-1672
80006084:	02 9b       	mov	r11,r1
80006086:	08 9c       	mov	r12,r4
80006088:	c3 6f       	rcall	80005ef4 <__sprint_r>
8000608a:	e0 81 0e ce 	brne	80007e26 <_vfprintf_r+0x1f16>
8000608e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006092:	40 ba       	lddsp	r10,sp[0x2c]
80006094:	0c 0a       	add	r10,r6
80006096:	50 ba       	stdsp	sp[0x2c],r10
80006098:	05 89       	ld.ub	r9,r2[0x0]
8000609a:	30 08       	mov	r8,0
8000609c:	f0 09 18 00 	cp.b	r9,r8
800060a0:	e0 80 0e b2 	breq	80007e04 <_vfprintf_r+0x1ef4>
800060a4:	30 09       	mov	r9,0
800060a6:	fb 68 06 bb 	st.b	sp[1723],r8
800060aa:	0e 96       	mov	r6,r7
800060ac:	e4 c8 ff ff 	sub	r8,r2,-1
800060b0:	3f fe       	mov	lr,-1
800060b2:	50 93       	stdsp	sp[0x24],r3
800060b4:	50 41       	stdsp	sp[0x10],r1
800060b6:	0e 93       	mov	r3,r7
800060b8:	04 91       	mov	r1,r2
800060ba:	50 89       	stdsp	sp[0x20],r9
800060bc:	50 a8       	stdsp	sp[0x28],r8
800060be:	50 2e       	stdsp	sp[0x8],lr
800060c0:	50 39       	stdsp	sp[0xc],r9
800060c2:	12 95       	mov	r5,r9
800060c4:	12 90       	mov	r0,r9
800060c6:	10 97       	mov	r7,r8
800060c8:	08 92       	mov	r2,r4
800060ca:	c0 78       	rjmp	800060d8 <_vfprintf_r+0x1c8>
800060cc:	3f fc       	mov	r12,-1
800060ce:	08 97       	mov	r7,r4
800060d0:	50 2c       	stdsp	sp[0x8],r12
800060d2:	c0 38       	rjmp	800060d8 <_vfprintf_r+0x1c8>
800060d4:	30 0b       	mov	r11,0
800060d6:	50 3b       	stdsp	sp[0xc],r11
800060d8:	0f 38       	ld.ub	r8,r7++
800060da:	c0 28       	rjmp	800060de <_vfprintf_r+0x1ce>
800060dc:	12 90       	mov	r0,r9
800060de:	f0 c9 00 20 	sub	r9,r8,32
800060e2:	e0 49 00 58 	cp.w	r9,88
800060e6:	e0 8b 0a 36 	brhi	80007552 <_vfprintf_r+0x1642>
800060ea:	4d 9a       	lddpc	r10,8000624c <_vfprintf_r+0x33c>
800060ec:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
800060f0:	50 a7       	stdsp	sp[0x28],r7
800060f2:	50 80       	stdsp	sp[0x20],r0
800060f4:	0c 97       	mov	r7,r6
800060f6:	04 94       	mov	r4,r2
800060f8:	06 96       	mov	r6,r3
800060fa:	02 92       	mov	r2,r1
800060fc:	4d 59       	lddpc	r9,80006250 <_vfprintf_r+0x340>
800060fe:	40 93       	lddsp	r3,sp[0x24]
80006100:	10 90       	mov	r0,r8
80006102:	40 41       	lddsp	r1,sp[0x10]
80006104:	50 d9       	stdsp	sp[0x34],r9
80006106:	e0 8f 08 95 	bral	80007230 <_vfprintf_r+0x1320>
8000610a:	30 08       	mov	r8,0
8000610c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80006110:	f0 09 18 00 	cp.b	r9,r8
80006114:	ce 21       	brne	800060d8 <_vfprintf_r+0x1c8>
80006116:	32 08       	mov	r8,32
80006118:	c6 e8       	rjmp	800061f4 <_vfprintf_r+0x2e4>
8000611a:	a1 a5       	sbr	r5,0x0
8000611c:	cd eb       	rjmp	800060d8 <_vfprintf_r+0x1c8>
8000611e:	0f 89       	ld.ub	r9,r7[0x0]
80006120:	f2 c8 00 30 	sub	r8,r9,48
80006124:	58 98       	cp.w	r8,9
80006126:	e0 8b 00 1d 	brhi	80006160 <_vfprintf_r+0x250>
8000612a:	ee c8 ff ff 	sub	r8,r7,-1
8000612e:	30 0b       	mov	r11,0
80006130:	23 09       	sub	r9,48
80006132:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80006136:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000613a:	11 39       	ld.ub	r9,r8++
8000613c:	f2 ca 00 30 	sub	r10,r9,48
80006140:	58 9a       	cp.w	r10,9
80006142:	fe 98 ff f7 	brls	80006130 <_vfprintf_r+0x220>
80006146:	e0 49 00 24 	cp.w	r9,36
8000614a:	cc 51       	brne	800060d4 <_vfprintf_r+0x1c4>
8000614c:	e0 4b 00 20 	cp.w	r11,32
80006150:	e0 89 0e 6a 	brgt	80007e24 <_vfprintf_r+0x1f14>
80006154:	20 1b       	sub	r11,1
80006156:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000615a:	12 3b       	cp.w	r11,r9
8000615c:	c0 95       	brlt	8000616e <_vfprintf_r+0x25e>
8000615e:	c1 08       	rjmp	8000617e <_vfprintf_r+0x26e>
80006160:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006164:	ec ca ff ff 	sub	r10,r6,-1
80006168:	12 36       	cp.w	r6,r9
8000616a:	c1 f5       	brlt	800061a8 <_vfprintf_r+0x298>
8000616c:	c2 68       	rjmp	800061b8 <_vfprintf_r+0x2a8>
8000616e:	fa ce f9 44 	sub	lr,sp,-1724
80006172:	10 97       	mov	r7,r8
80006174:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80006178:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000617c:	c3 58       	rjmp	800061e6 <_vfprintf_r+0x2d6>
8000617e:	10 97       	mov	r7,r8
80006180:	fa c8 f9 50 	sub	r8,sp,-1712
80006184:	1a d8       	st.w	--sp,r8
80006186:	fa c8 fa b8 	sub	r8,sp,-1352
8000618a:	1a d8       	st.w	--sp,r8
8000618c:	fa c8 fb b4 	sub	r8,sp,-1100
80006190:	02 9a       	mov	r10,r1
80006192:	1a d8       	st.w	--sp,r8
80006194:	04 9c       	mov	r12,r2
80006196:	fa c8 f9 40 	sub	r8,sp,-1728
8000619a:	fa c9 ff b4 	sub	r9,sp,-76
8000619e:	fe b0 fd 1b 	rcall	80005bd4 <get_arg>
800061a2:	2f dd       	sub	sp,-12
800061a4:	78 00       	ld.w	r0,r12[0x0]
800061a6:	c2 08       	rjmp	800061e6 <_vfprintf_r+0x2d6>
800061a8:	fa cc f9 44 	sub	r12,sp,-1724
800061ac:	14 96       	mov	r6,r10
800061ae:	f8 03 00 38 	add	r8,r12,r3<<0x3
800061b2:	f0 f0 fd 88 	ld.w	r0,r8[-632]
800061b6:	c1 88       	rjmp	800061e6 <_vfprintf_r+0x2d6>
800061b8:	41 08       	lddsp	r8,sp[0x40]
800061ba:	59 f9       	cp.w	r9,31
800061bc:	e0 89 00 11 	brgt	800061de <_vfprintf_r+0x2ce>
800061c0:	f0 cb ff fc 	sub	r11,r8,-4
800061c4:	51 0b       	stdsp	sp[0x40],r11
800061c6:	70 00       	ld.w	r0,r8[0x0]
800061c8:	fa cb f9 44 	sub	r11,sp,-1724
800061cc:	f6 09 00 38 	add	r8,r11,r9<<0x3
800061d0:	f1 40 fd 88 	st.w	r8[-632],r0
800061d4:	2f f9       	sub	r9,-1
800061d6:	14 96       	mov	r6,r10
800061d8:	fb 49 06 b4 	st.w	sp[1716],r9
800061dc:	c0 58       	rjmp	800061e6 <_vfprintf_r+0x2d6>
800061de:	70 00       	ld.w	r0,r8[0x0]
800061e0:	14 96       	mov	r6,r10
800061e2:	2f c8       	sub	r8,-4
800061e4:	51 08       	stdsp	sp[0x40],r8
800061e6:	58 00       	cp.w	r0,0
800061e8:	fe 94 ff 78 	brge	800060d8 <_vfprintf_r+0x1c8>
800061ec:	5c 30       	neg	r0
800061ee:	a3 a5       	sbr	r5,0x2
800061f0:	c7 4b       	rjmp	800060d8 <_vfprintf_r+0x1c8>
800061f2:	32 b8       	mov	r8,43
800061f4:	fb 68 06 bb 	st.b	sp[1723],r8
800061f8:	c7 0b       	rjmp	800060d8 <_vfprintf_r+0x1c8>
800061fa:	0f 38       	ld.ub	r8,r7++
800061fc:	e0 48 00 2a 	cp.w	r8,42
80006200:	c0 30       	breq	80006206 <_vfprintf_r+0x2f6>
80006202:	30 09       	mov	r9,0
80006204:	c7 d8       	rjmp	800062fe <_vfprintf_r+0x3ee>
80006206:	0f 88       	ld.ub	r8,r7[0x0]
80006208:	f0 c9 00 30 	sub	r9,r8,48
8000620c:	58 99       	cp.w	r9,9
8000620e:	e0 8b 00 23 	brhi	80006254 <_vfprintf_r+0x344>
80006212:	ee c4 ff ff 	sub	r4,r7,-1
80006216:	30 0b       	mov	r11,0
80006218:	23 08       	sub	r8,48
8000621a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000621e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80006222:	09 38       	ld.ub	r8,r4++
80006224:	f0 c9 00 30 	sub	r9,r8,48
80006228:	58 99       	cp.w	r9,9
8000622a:	fe 98 ff f7 	brls	80006218 <_vfprintf_r+0x308>
8000622e:	e0 48 00 24 	cp.w	r8,36
80006232:	fe 91 ff 51 	brne	800060d4 <_vfprintf_r+0x1c4>
80006236:	e0 4b 00 20 	cp.w	r11,32
8000623a:	e0 89 0d f5 	brgt	80007e24 <_vfprintf_r+0x1f14>
8000623e:	20 1b       	sub	r11,1
80006240:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006244:	10 3b       	cp.w	r11,r8
80006246:	c0 e5       	brlt	80006262 <_vfprintf_r+0x352>
80006248:	c1 58       	rjmp	80006272 <_vfprintf_r+0x362>
8000624a:	d7 03       	nop
8000624c:	80 00       	ld.sh	r0,r0[0x0]
8000624e:	c1 d4       	brge	80006288 <_vfprintf_r+0x378>
80006250:	80 00       	ld.sh	r0,r0[0x0]
80006252:	c4 10       	breq	800062d4 <_vfprintf_r+0x3c4>
80006254:	fa fa 06 b4 	ld.w	r10,sp[1716]
80006258:	ec c9 ff ff 	sub	r9,r6,-1
8000625c:	14 36       	cp.w	r6,r10
8000625e:	c1 f5       	brlt	8000629c <_vfprintf_r+0x38c>
80006260:	c2 88       	rjmp	800062b0 <_vfprintf_r+0x3a0>
80006262:	fa ca f9 44 	sub	r10,sp,-1724
80006266:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000626a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000626e:	50 2b       	stdsp	sp[0x8],r11
80006270:	c3 c8       	rjmp	800062e8 <_vfprintf_r+0x3d8>
80006272:	fa c8 f9 50 	sub	r8,sp,-1712
80006276:	1a d8       	st.w	--sp,r8
80006278:	fa c8 fa b8 	sub	r8,sp,-1352
8000627c:	1a d8       	st.w	--sp,r8
8000627e:	fa c8 fb b4 	sub	r8,sp,-1100
80006282:	02 9a       	mov	r10,r1
80006284:	1a d8       	st.w	--sp,r8
80006286:	04 9c       	mov	r12,r2
80006288:	fa c8 f9 40 	sub	r8,sp,-1728
8000628c:	fa c9 ff b4 	sub	r9,sp,-76
80006290:	fe b0 fc a2 	rcall	80005bd4 <get_arg>
80006294:	2f dd       	sub	sp,-12
80006296:	78 0c       	ld.w	r12,r12[0x0]
80006298:	50 2c       	stdsp	sp[0x8],r12
8000629a:	c2 78       	rjmp	800062e8 <_vfprintf_r+0x3d8>
8000629c:	12 96       	mov	r6,r9
8000629e:	0e 94       	mov	r4,r7
800062a0:	fa c9 f9 44 	sub	r9,sp,-1724
800062a4:	f2 03 00 38 	add	r8,r9,r3<<0x3
800062a8:	f0 f8 fd 88 	ld.w	r8,r8[-632]
800062ac:	50 28       	stdsp	sp[0x8],r8
800062ae:	c1 d8       	rjmp	800062e8 <_vfprintf_r+0x3d8>
800062b0:	41 08       	lddsp	r8,sp[0x40]
800062b2:	59 fa       	cp.w	r10,31
800062b4:	e0 89 00 14 	brgt	800062dc <_vfprintf_r+0x3cc>
800062b8:	f0 cb ff fc 	sub	r11,r8,-4
800062bc:	70 08       	ld.w	r8,r8[0x0]
800062be:	51 0b       	stdsp	sp[0x40],r11
800062c0:	50 28       	stdsp	sp[0x8],r8
800062c2:	fa c6 f9 44 	sub	r6,sp,-1724
800062c6:	40 2e       	lddsp	lr,sp[0x8]
800062c8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
800062cc:	f1 4e fd 88 	st.w	r8[-632],lr
800062d0:	2f fa       	sub	r10,-1
800062d2:	0e 94       	mov	r4,r7
800062d4:	fb 4a 06 b4 	st.w	sp[1716],r10
800062d8:	12 96       	mov	r6,r9
800062da:	c0 78       	rjmp	800062e8 <_vfprintf_r+0x3d8>
800062dc:	70 0c       	ld.w	r12,r8[0x0]
800062de:	0e 94       	mov	r4,r7
800062e0:	2f c8       	sub	r8,-4
800062e2:	50 2c       	stdsp	sp[0x8],r12
800062e4:	12 96       	mov	r6,r9
800062e6:	51 08       	stdsp	sp[0x40],r8
800062e8:	40 2b       	lddsp	r11,sp[0x8]
800062ea:	58 0b       	cp.w	r11,0
800062ec:	fe 95 fe f0 	brlt	800060cc <_vfprintf_r+0x1bc>
800062f0:	08 97       	mov	r7,r4
800062f2:	cf 3a       	rjmp	800060d8 <_vfprintf_r+0x1c8>
800062f4:	f2 09 00 29 	add	r9,r9,r9<<0x2
800062f8:	0f 38       	ld.ub	r8,r7++
800062fa:	f4 09 00 19 	add	r9,r10,r9<<0x1
800062fe:	f0 ca 00 30 	sub	r10,r8,48
80006302:	58 9a       	cp.w	r10,9
80006304:	fe 98 ff f8 	brls	800062f4 <_vfprintf_r+0x3e4>
80006308:	3f fa       	mov	r10,-1
8000630a:	f2 0a 0c 49 	max	r9,r9,r10
8000630e:	50 29       	stdsp	sp[0x8],r9
80006310:	ce 7a       	rjmp	800060de <_vfprintf_r+0x1ce>
80006312:	a7 b5       	sbr	r5,0x7
80006314:	ce 2a       	rjmp	800060d8 <_vfprintf_r+0x1c8>
80006316:	30 09       	mov	r9,0
80006318:	23 08       	sub	r8,48
8000631a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000631e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80006322:	0f 38       	ld.ub	r8,r7++
80006324:	f0 ca 00 30 	sub	r10,r8,48
80006328:	58 9a       	cp.w	r10,9
8000632a:	fe 98 ff f7 	brls	80006318 <_vfprintf_r+0x408>
8000632e:	e0 48 00 24 	cp.w	r8,36
80006332:	fe 91 fe d5 	brne	800060dc <_vfprintf_r+0x1cc>
80006336:	e0 49 00 20 	cp.w	r9,32
8000633a:	e0 89 0d 75 	brgt	80007e24 <_vfprintf_r+0x1f14>
8000633e:	f2 c3 00 01 	sub	r3,r9,1
80006342:	30 19       	mov	r9,1
80006344:	50 39       	stdsp	sp[0xc],r9
80006346:	cc 9a       	rjmp	800060d8 <_vfprintf_r+0x1c8>
80006348:	a3 b5       	sbr	r5,0x3
8000634a:	cc 7a       	rjmp	800060d8 <_vfprintf_r+0x1c8>
8000634c:	a7 a5       	sbr	r5,0x6
8000634e:	cc 5a       	rjmp	800060d8 <_vfprintf_r+0x1c8>
80006350:	0a 98       	mov	r8,r5
80006352:	a5 b5       	sbr	r5,0x5
80006354:	a5 a8       	sbr	r8,0x4
80006356:	0f 89       	ld.ub	r9,r7[0x0]
80006358:	36 ce       	mov	lr,108
8000635a:	fc 09 18 00 	cp.b	r9,lr
8000635e:	f7 b7 00 ff 	subeq	r7,-1
80006362:	f0 05 17 10 	movne	r5,r8
80006366:	cb 9a       	rjmp	800060d8 <_vfprintf_r+0x1c8>
80006368:	a5 b5       	sbr	r5,0x5
8000636a:	cb 7a       	rjmp	800060d8 <_vfprintf_r+0x1c8>
8000636c:	50 a7       	stdsp	sp[0x28],r7
8000636e:	50 80       	stdsp	sp[0x20],r0
80006370:	0c 97       	mov	r7,r6
80006372:	10 90       	mov	r0,r8
80006374:	06 96       	mov	r6,r3
80006376:	04 94       	mov	r4,r2
80006378:	40 93       	lddsp	r3,sp[0x24]
8000637a:	02 92       	mov	r2,r1
8000637c:	0e 99       	mov	r9,r7
8000637e:	40 41       	lddsp	r1,sp[0x10]
80006380:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006384:	40 3c       	lddsp	r12,sp[0xc]
80006386:	58 0c       	cp.w	r12,0
80006388:	c1 d0       	breq	800063c2 <_vfprintf_r+0x4b2>
8000638a:	10 36       	cp.w	r6,r8
8000638c:	c0 64       	brge	80006398 <_vfprintf_r+0x488>
8000638e:	fa cb f9 44 	sub	r11,sp,-1724
80006392:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006396:	c1 d8       	rjmp	800063d0 <_vfprintf_r+0x4c0>
80006398:	fa c8 f9 50 	sub	r8,sp,-1712
8000639c:	1a d8       	st.w	--sp,r8
8000639e:	fa c8 fa b8 	sub	r8,sp,-1352
800063a2:	1a d8       	st.w	--sp,r8
800063a4:	fa c8 fb b4 	sub	r8,sp,-1100
800063a8:	1a d8       	st.w	--sp,r8
800063aa:	fa c8 f9 40 	sub	r8,sp,-1728
800063ae:	fa c9 ff b4 	sub	r9,sp,-76
800063b2:	04 9a       	mov	r10,r2
800063b4:	0c 9b       	mov	r11,r6
800063b6:	08 9c       	mov	r12,r4
800063b8:	fe b0 fc 0e 	rcall	80005bd4 <get_arg>
800063bc:	2f dd       	sub	sp,-12
800063be:	19 b8       	ld.ub	r8,r12[0x3]
800063c0:	c2 28       	rjmp	80006404 <_vfprintf_r+0x4f4>
800063c2:	2f f7       	sub	r7,-1
800063c4:	10 39       	cp.w	r9,r8
800063c6:	c0 84       	brge	800063d6 <_vfprintf_r+0x4c6>
800063c8:	fa ca f9 44 	sub	r10,sp,-1724
800063cc:	f4 06 00 36 	add	r6,r10,r6<<0x3
800063d0:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800063d4:	c1 88       	rjmp	80006404 <_vfprintf_r+0x4f4>
800063d6:	41 09       	lddsp	r9,sp[0x40]
800063d8:	59 f8       	cp.w	r8,31
800063da:	e0 89 00 12 	brgt	800063fe <_vfprintf_r+0x4ee>
800063de:	f2 ca ff fc 	sub	r10,r9,-4
800063e2:	51 0a       	stdsp	sp[0x40],r10
800063e4:	72 09       	ld.w	r9,r9[0x0]
800063e6:	fa c6 f9 44 	sub	r6,sp,-1724
800063ea:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800063ee:	2f f8       	sub	r8,-1
800063f0:	f5 49 fd 88 	st.w	r10[-632],r9
800063f4:	fb 48 06 b4 	st.w	sp[1716],r8
800063f8:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
800063fc:	c0 48       	rjmp	80006404 <_vfprintf_r+0x4f4>
800063fe:	13 b8       	ld.ub	r8,r9[0x3]
80006400:	2f c9       	sub	r9,-4
80006402:	51 09       	stdsp	sp[0x40],r9
80006404:	fb 68 06 60 	st.b	sp[1632],r8
80006408:	30 0e       	mov	lr,0
8000640a:	30 08       	mov	r8,0
8000640c:	30 12       	mov	r2,1
8000640e:	fb 68 06 bb 	st.b	sp[1723],r8
80006412:	50 2e       	stdsp	sp[0x8],lr
80006414:	e0 8f 08 b1 	bral	80007576 <_vfprintf_r+0x1666>
80006418:	50 a7       	stdsp	sp[0x28],r7
8000641a:	50 80       	stdsp	sp[0x20],r0
8000641c:	0c 97       	mov	r7,r6
8000641e:	04 94       	mov	r4,r2
80006420:	06 96       	mov	r6,r3
80006422:	02 92       	mov	r2,r1
80006424:	40 93       	lddsp	r3,sp[0x24]
80006426:	10 90       	mov	r0,r8
80006428:	40 41       	lddsp	r1,sp[0x10]
8000642a:	a5 a5       	sbr	r5,0x4
8000642c:	c0 a8       	rjmp	80006440 <_vfprintf_r+0x530>
8000642e:	50 a7       	stdsp	sp[0x28],r7
80006430:	50 80       	stdsp	sp[0x20],r0
80006432:	0c 97       	mov	r7,r6
80006434:	04 94       	mov	r4,r2
80006436:	06 96       	mov	r6,r3
80006438:	02 92       	mov	r2,r1
8000643a:	40 93       	lddsp	r3,sp[0x24]
8000643c:	10 90       	mov	r0,r8
8000643e:	40 41       	lddsp	r1,sp[0x10]
80006440:	ed b5 00 05 	bld	r5,0x5
80006444:	c5 11       	brne	800064e6 <_vfprintf_r+0x5d6>
80006446:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000644a:	40 3c       	lddsp	r12,sp[0xc]
8000644c:	58 0c       	cp.w	r12,0
8000644e:	c1 e0       	breq	8000648a <_vfprintf_r+0x57a>
80006450:	10 36       	cp.w	r6,r8
80006452:	c0 64       	brge	8000645e <_vfprintf_r+0x54e>
80006454:	fa cb f9 44 	sub	r11,sp,-1724
80006458:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000645c:	c2 08       	rjmp	8000649c <_vfprintf_r+0x58c>
8000645e:	fa c8 f9 50 	sub	r8,sp,-1712
80006462:	1a d8       	st.w	--sp,r8
80006464:	fa c8 fa b8 	sub	r8,sp,-1352
80006468:	0c 9b       	mov	r11,r6
8000646a:	1a d8       	st.w	--sp,r8
8000646c:	fa c8 fb b4 	sub	r8,sp,-1100
80006470:	1a d8       	st.w	--sp,r8
80006472:	fa c9 ff b4 	sub	r9,sp,-76
80006476:	fa c8 f9 40 	sub	r8,sp,-1728
8000647a:	04 9a       	mov	r10,r2
8000647c:	08 9c       	mov	r12,r4
8000647e:	fe b0 fb ab 	rcall	80005bd4 <get_arg>
80006482:	2f dd       	sub	sp,-12
80006484:	78 1b       	ld.w	r11,r12[0x4]
80006486:	78 09       	ld.w	r9,r12[0x0]
80006488:	c2 b8       	rjmp	800064de <_vfprintf_r+0x5ce>
8000648a:	ee ca ff ff 	sub	r10,r7,-1
8000648e:	10 37       	cp.w	r7,r8
80006490:	c0 b4       	brge	800064a6 <_vfprintf_r+0x596>
80006492:	fa c9 f9 44 	sub	r9,sp,-1724
80006496:	14 97       	mov	r7,r10
80006498:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000649c:	ec fb fd 8c 	ld.w	r11,r6[-628]
800064a0:	ec f9 fd 88 	ld.w	r9,r6[-632]
800064a4:	c1 d8       	rjmp	800064de <_vfprintf_r+0x5ce>
800064a6:	41 09       	lddsp	r9,sp[0x40]
800064a8:	59 f8       	cp.w	r8,31
800064aa:	e0 89 00 14 	brgt	800064d2 <_vfprintf_r+0x5c2>
800064ae:	f2 cb ff f8 	sub	r11,r9,-8
800064b2:	51 0b       	stdsp	sp[0x40],r11
800064b4:	fa c6 f9 44 	sub	r6,sp,-1724
800064b8:	72 1b       	ld.w	r11,r9[0x4]
800064ba:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800064be:	72 09       	ld.w	r9,r9[0x0]
800064c0:	f9 4b fd 8c 	st.w	r12[-628],r11
800064c4:	f9 49 fd 88 	st.w	r12[-632],r9
800064c8:	2f f8       	sub	r8,-1
800064ca:	14 97       	mov	r7,r10
800064cc:	fb 48 06 b4 	st.w	sp[1716],r8
800064d0:	c0 78       	rjmp	800064de <_vfprintf_r+0x5ce>
800064d2:	f2 c8 ff f8 	sub	r8,r9,-8
800064d6:	72 1b       	ld.w	r11,r9[0x4]
800064d8:	14 97       	mov	r7,r10
800064da:	51 08       	stdsp	sp[0x40],r8
800064dc:	72 09       	ld.w	r9,r9[0x0]
800064de:	16 98       	mov	r8,r11
800064e0:	fa e9 00 00 	st.d	sp[0],r8
800064e4:	ca e8       	rjmp	80006640 <_vfprintf_r+0x730>
800064e6:	ed b5 00 04 	bld	r5,0x4
800064ea:	c1 71       	brne	80006518 <_vfprintf_r+0x608>
800064ec:	fa f8 06 b4 	ld.w	r8,sp[1716]
800064f0:	40 3e       	lddsp	lr,sp[0xc]
800064f2:	58 0e       	cp.w	lr,0
800064f4:	c0 80       	breq	80006504 <_vfprintf_r+0x5f4>
800064f6:	10 36       	cp.w	r6,r8
800064f8:	c6 94       	brge	800065ca <_vfprintf_r+0x6ba>
800064fa:	fa cc f9 44 	sub	r12,sp,-1724
800064fe:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006502:	c8 28       	rjmp	80006606 <_vfprintf_r+0x6f6>
80006504:	ee ca ff ff 	sub	r10,r7,-1
80006508:	10 37       	cp.w	r7,r8
8000650a:	e0 84 00 81 	brge	8000660c <_vfprintf_r+0x6fc>
8000650e:	fa cb f9 44 	sub	r11,sp,-1724
80006512:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006516:	c7 78       	rjmp	80006604 <_vfprintf_r+0x6f4>
80006518:	ed b5 00 06 	bld	r5,0x6
8000651c:	c4 b1       	brne	800065b2 <_vfprintf_r+0x6a2>
8000651e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006522:	40 3c       	lddsp	r12,sp[0xc]
80006524:	58 0c       	cp.w	r12,0
80006526:	c1 d0       	breq	80006560 <_vfprintf_r+0x650>
80006528:	10 36       	cp.w	r6,r8
8000652a:	c0 64       	brge	80006536 <_vfprintf_r+0x626>
8000652c:	fa cb f9 44 	sub	r11,sp,-1724
80006530:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006534:	c1 f8       	rjmp	80006572 <_vfprintf_r+0x662>
80006536:	fa c8 f9 50 	sub	r8,sp,-1712
8000653a:	1a d8       	st.w	--sp,r8
8000653c:	fa c8 fa b8 	sub	r8,sp,-1352
80006540:	1a d8       	st.w	--sp,r8
80006542:	fa c8 fb b4 	sub	r8,sp,-1100
80006546:	1a d8       	st.w	--sp,r8
80006548:	fa c8 f9 40 	sub	r8,sp,-1728
8000654c:	fa c9 ff b4 	sub	r9,sp,-76
80006550:	04 9a       	mov	r10,r2
80006552:	0c 9b       	mov	r11,r6
80006554:	08 9c       	mov	r12,r4
80006556:	fe b0 fb 3f 	rcall	80005bd4 <get_arg>
8000655a:	2f dd       	sub	sp,-12
8000655c:	98 18       	ld.sh	r8,r12[0x2]
8000655e:	c2 68       	rjmp	800065aa <_vfprintf_r+0x69a>
80006560:	ee ca ff ff 	sub	r10,r7,-1
80006564:	10 37       	cp.w	r7,r8
80006566:	c0 94       	brge	80006578 <_vfprintf_r+0x668>
80006568:	fa c9 f9 44 	sub	r9,sp,-1724
8000656c:	14 97       	mov	r7,r10
8000656e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006572:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006576:	c1 a8       	rjmp	800065aa <_vfprintf_r+0x69a>
80006578:	41 09       	lddsp	r9,sp[0x40]
8000657a:	59 f8       	cp.w	r8,31
8000657c:	e0 89 00 13 	brgt	800065a2 <_vfprintf_r+0x692>
80006580:	f2 cb ff fc 	sub	r11,r9,-4
80006584:	51 0b       	stdsp	sp[0x40],r11
80006586:	72 09       	ld.w	r9,r9[0x0]
80006588:	fa c6 f9 44 	sub	r6,sp,-1724
8000658c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006590:	2f f8       	sub	r8,-1
80006592:	f7 49 fd 88 	st.w	r11[-632],r9
80006596:	fb 48 06 b4 	st.w	sp[1716],r8
8000659a:	14 97       	mov	r7,r10
8000659c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800065a0:	c0 58       	rjmp	800065aa <_vfprintf_r+0x69a>
800065a2:	92 18       	ld.sh	r8,r9[0x2]
800065a4:	14 97       	mov	r7,r10
800065a6:	2f c9       	sub	r9,-4
800065a8:	51 09       	stdsp	sp[0x40],r9
800065aa:	50 18       	stdsp	sp[0x4],r8
800065ac:	bf 58       	asr	r8,0x1f
800065ae:	50 08       	stdsp	sp[0x0],r8
800065b0:	c4 88       	rjmp	80006640 <_vfprintf_r+0x730>
800065b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800065b6:	40 3c       	lddsp	r12,sp[0xc]
800065b8:	58 0c       	cp.w	r12,0
800065ba:	c1 d0       	breq	800065f4 <_vfprintf_r+0x6e4>
800065bc:	10 36       	cp.w	r6,r8
800065be:	c0 64       	brge	800065ca <_vfprintf_r+0x6ba>
800065c0:	fa cb f9 44 	sub	r11,sp,-1724
800065c4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800065c8:	c1 f8       	rjmp	80006606 <_vfprintf_r+0x6f6>
800065ca:	fa c8 f9 50 	sub	r8,sp,-1712
800065ce:	1a d8       	st.w	--sp,r8
800065d0:	fa c8 fa b8 	sub	r8,sp,-1352
800065d4:	0c 9b       	mov	r11,r6
800065d6:	1a d8       	st.w	--sp,r8
800065d8:	fa c8 fb b4 	sub	r8,sp,-1100
800065dc:	04 9a       	mov	r10,r2
800065de:	1a d8       	st.w	--sp,r8
800065e0:	08 9c       	mov	r12,r4
800065e2:	fa c8 f9 40 	sub	r8,sp,-1728
800065e6:	fa c9 ff b4 	sub	r9,sp,-76
800065ea:	fe b0 fa f5 	rcall	80005bd4 <get_arg>
800065ee:	2f dd       	sub	sp,-12
800065f0:	78 0b       	ld.w	r11,r12[0x0]
800065f2:	c2 48       	rjmp	8000663a <_vfprintf_r+0x72a>
800065f4:	ee ca ff ff 	sub	r10,r7,-1
800065f8:	10 37       	cp.w	r7,r8
800065fa:	c0 94       	brge	8000660c <_vfprintf_r+0x6fc>
800065fc:	fa c9 f9 44 	sub	r9,sp,-1724
80006600:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006604:	14 97       	mov	r7,r10
80006606:	ec fb fd 88 	ld.w	r11,r6[-632]
8000660a:	c1 88       	rjmp	8000663a <_vfprintf_r+0x72a>
8000660c:	41 09       	lddsp	r9,sp[0x40]
8000660e:	59 f8       	cp.w	r8,31
80006610:	e0 89 00 11 	brgt	80006632 <_vfprintf_r+0x722>
80006614:	f2 cb ff fc 	sub	r11,r9,-4
80006618:	51 0b       	stdsp	sp[0x40],r11
8000661a:	fa c6 f9 44 	sub	r6,sp,-1724
8000661e:	72 0b       	ld.w	r11,r9[0x0]
80006620:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006624:	f3 4b fd 88 	st.w	r9[-632],r11
80006628:	2f f8       	sub	r8,-1
8000662a:	14 97       	mov	r7,r10
8000662c:	fb 48 06 b4 	st.w	sp[1716],r8
80006630:	c0 58       	rjmp	8000663a <_vfprintf_r+0x72a>
80006632:	72 0b       	ld.w	r11,r9[0x0]
80006634:	14 97       	mov	r7,r10
80006636:	2f c9       	sub	r9,-4
80006638:	51 09       	stdsp	sp[0x40],r9
8000663a:	50 1b       	stdsp	sp[0x4],r11
8000663c:	bf 5b       	asr	r11,0x1f
8000663e:	50 0b       	stdsp	sp[0x0],r11
80006640:	fa ea 00 00 	ld.d	r10,sp[0]
80006644:	58 0a       	cp.w	r10,0
80006646:	5c 2b       	cpc	r11
80006648:	c0 e4       	brge	80006664 <_vfprintf_r+0x754>
8000664a:	30 08       	mov	r8,0
8000664c:	fa ea 00 00 	ld.d	r10,sp[0]
80006650:	30 09       	mov	r9,0
80006652:	f0 0a 01 0a 	sub	r10,r8,r10
80006656:	f2 0b 01 4b 	sbc	r11,r9,r11
8000665a:	32 d8       	mov	r8,45
8000665c:	fa eb 00 00 	st.d	sp[0],r10
80006660:	fb 68 06 bb 	st.b	sp[1723],r8
80006664:	30 18       	mov	r8,1
80006666:	e0 8f 06 fe 	bral	80007462 <_vfprintf_r+0x1552>
8000666a:	50 a7       	stdsp	sp[0x28],r7
8000666c:	50 80       	stdsp	sp[0x20],r0
8000666e:	0c 97       	mov	r7,r6
80006670:	04 94       	mov	r4,r2
80006672:	06 96       	mov	r6,r3
80006674:	02 92       	mov	r2,r1
80006676:	40 93       	lddsp	r3,sp[0x24]
80006678:	10 90       	mov	r0,r8
8000667a:	40 41       	lddsp	r1,sp[0x10]
8000667c:	0e 99       	mov	r9,r7
8000667e:	ed b5 00 03 	bld	r5,0x3
80006682:	c4 11       	brne	80006704 <_vfprintf_r+0x7f4>
80006684:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006688:	40 3a       	lddsp	r10,sp[0xc]
8000668a:	58 0a       	cp.w	r10,0
8000668c:	c1 90       	breq	800066be <_vfprintf_r+0x7ae>
8000668e:	10 36       	cp.w	r6,r8
80006690:	c6 45       	brlt	80006758 <_vfprintf_r+0x848>
80006692:	fa c8 f9 50 	sub	r8,sp,-1712
80006696:	1a d8       	st.w	--sp,r8
80006698:	fa c8 fa b8 	sub	r8,sp,-1352
8000669c:	1a d8       	st.w	--sp,r8
8000669e:	fa c8 fb b4 	sub	r8,sp,-1100
800066a2:	0c 9b       	mov	r11,r6
800066a4:	1a d8       	st.w	--sp,r8
800066a6:	04 9a       	mov	r10,r2
800066a8:	fa c8 f9 40 	sub	r8,sp,-1728
800066ac:	fa c9 ff b4 	sub	r9,sp,-76
800066b0:	08 9c       	mov	r12,r4
800066b2:	fe b0 fa 91 	rcall	80005bd4 <get_arg>
800066b6:	2f dd       	sub	sp,-12
800066b8:	78 16       	ld.w	r6,r12[0x4]
800066ba:	50 76       	stdsp	sp[0x1c],r6
800066bc:	c4 88       	rjmp	8000674c <_vfprintf_r+0x83c>
800066be:	2f f7       	sub	r7,-1
800066c0:	10 39       	cp.w	r9,r8
800066c2:	c0 c4       	brge	800066da <_vfprintf_r+0x7ca>
800066c4:	fa ce f9 44 	sub	lr,sp,-1724
800066c8:	fc 06 00 36 	add	r6,lr,r6<<0x3
800066cc:	ec fc fd 8c 	ld.w	r12,r6[-628]
800066d0:	50 7c       	stdsp	sp[0x1c],r12
800066d2:	ec f6 fd 88 	ld.w	r6,r6[-632]
800066d6:	50 56       	stdsp	sp[0x14],r6
800066d8:	c6 68       	rjmp	800067a4 <_vfprintf_r+0x894>
800066da:	41 09       	lddsp	r9,sp[0x40]
800066dc:	59 f8       	cp.w	r8,31
800066de:	e0 89 00 10 	brgt	800066fe <_vfprintf_r+0x7ee>
800066e2:	f2 ca ff f8 	sub	r10,r9,-8
800066e6:	72 1b       	ld.w	r11,r9[0x4]
800066e8:	51 0a       	stdsp	sp[0x40],r10
800066ea:	72 09       	ld.w	r9,r9[0x0]
800066ec:	fa ca f9 44 	sub	r10,sp,-1724
800066f0:	50 7b       	stdsp	sp[0x1c],r11
800066f2:	50 59       	stdsp	sp[0x14],r9
800066f4:	f4 08 00 39 	add	r9,r10,r8<<0x3
800066f8:	40 5b       	lddsp	r11,sp[0x14]
800066fa:	40 7a       	lddsp	r10,sp[0x1c]
800066fc:	c4 78       	rjmp	8000678a <_vfprintf_r+0x87a>
800066fe:	72 18       	ld.w	r8,r9[0x4]
80006700:	50 78       	stdsp	sp[0x1c],r8
80006702:	c4 c8       	rjmp	8000679a <_vfprintf_r+0x88a>
80006704:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006708:	40 3e       	lddsp	lr,sp[0xc]
8000670a:	58 0e       	cp.w	lr,0
8000670c:	c2 30       	breq	80006752 <_vfprintf_r+0x842>
8000670e:	10 36       	cp.w	r6,r8
80006710:	c0 94       	brge	80006722 <_vfprintf_r+0x812>
80006712:	fa cc f9 44 	sub	r12,sp,-1724
80006716:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000671a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000671e:	50 7b       	stdsp	sp[0x1c],r11
80006720:	cd 9b       	rjmp	800066d2 <_vfprintf_r+0x7c2>
80006722:	fa c8 f9 50 	sub	r8,sp,-1712
80006726:	1a d8       	st.w	--sp,r8
80006728:	fa c8 fa b8 	sub	r8,sp,-1352
8000672c:	04 9a       	mov	r10,r2
8000672e:	1a d8       	st.w	--sp,r8
80006730:	fa c8 fb b4 	sub	r8,sp,-1100
80006734:	0c 9b       	mov	r11,r6
80006736:	1a d8       	st.w	--sp,r8
80006738:	08 9c       	mov	r12,r4
8000673a:	fa c8 f9 40 	sub	r8,sp,-1728
8000673e:	fa c9 ff b4 	sub	r9,sp,-76
80006742:	fe b0 fa 49 	rcall	80005bd4 <get_arg>
80006746:	2f dd       	sub	sp,-12
80006748:	78 1a       	ld.w	r10,r12[0x4]
8000674a:	50 7a       	stdsp	sp[0x1c],r10
8000674c:	78 0c       	ld.w	r12,r12[0x0]
8000674e:	50 5c       	stdsp	sp[0x14],r12
80006750:	c2 a8       	rjmp	800067a4 <_vfprintf_r+0x894>
80006752:	2f f7       	sub	r7,-1
80006754:	10 39       	cp.w	r9,r8
80006756:	c0 94       	brge	80006768 <_vfprintf_r+0x858>
80006758:	fa c9 f9 44 	sub	r9,sp,-1724
8000675c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006760:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80006764:	50 78       	stdsp	sp[0x1c],r8
80006766:	cb 6b       	rjmp	800066d2 <_vfprintf_r+0x7c2>
80006768:	41 09       	lddsp	r9,sp[0x40]
8000676a:	59 f8       	cp.w	r8,31
8000676c:	e0 89 00 15 	brgt	80006796 <_vfprintf_r+0x886>
80006770:	f2 ca ff f8 	sub	r10,r9,-8
80006774:	72 16       	ld.w	r6,r9[0x4]
80006776:	72 09       	ld.w	r9,r9[0x0]
80006778:	51 0a       	stdsp	sp[0x40],r10
8000677a:	50 59       	stdsp	sp[0x14],r9
8000677c:	fa ce f9 44 	sub	lr,sp,-1724
80006780:	50 76       	stdsp	sp[0x1c],r6
80006782:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006786:	40 5b       	lddsp	r11,sp[0x14]
80006788:	0c 9a       	mov	r10,r6
8000678a:	f2 eb fd 88 	st.d	r9[-632],r10
8000678e:	2f f8       	sub	r8,-1
80006790:	fb 48 06 b4 	st.w	sp[1716],r8
80006794:	c0 88       	rjmp	800067a4 <_vfprintf_r+0x894>
80006796:	72 1c       	ld.w	r12,r9[0x4]
80006798:	50 7c       	stdsp	sp[0x1c],r12
8000679a:	f2 c8 ff f8 	sub	r8,r9,-8
8000679e:	51 08       	stdsp	sp[0x40],r8
800067a0:	72 09       	ld.w	r9,r9[0x0]
800067a2:	50 59       	stdsp	sp[0x14],r9
800067a4:	40 5b       	lddsp	r11,sp[0x14]
800067a6:	40 7a       	lddsp	r10,sp[0x1c]
800067a8:	e0 a0 1d 94 	rcall	8000a2d0 <__isinfd>
800067ac:	18 96       	mov	r6,r12
800067ae:	c1 50       	breq	800067d8 <_vfprintf_r+0x8c8>
800067b0:	30 08       	mov	r8,0
800067b2:	30 09       	mov	r9,0
800067b4:	40 5b       	lddsp	r11,sp[0x14]
800067b6:	40 7a       	lddsp	r10,sp[0x1c]
800067b8:	e0 a0 22 98 	rcall	8000ace8 <__avr32_f64_cmp_lt>
800067bc:	c0 40       	breq	800067c4 <_vfprintf_r+0x8b4>
800067be:	32 d8       	mov	r8,45
800067c0:	fb 68 06 bb 	st.b	sp[1723],r8
800067c4:	4d 18       	lddpc	r8,80006908 <_vfprintf_r+0x9f8>
800067c6:	4d 26       	lddpc	r6,8000690c <_vfprintf_r+0x9fc>
800067c8:	a7 d5       	cbr	r5,0x7
800067ca:	e0 40 00 47 	cp.w	r0,71
800067ce:	f0 06 17 a0 	movle	r6,r8
800067d2:	30 32       	mov	r2,3
800067d4:	e0 8f 06 d4 	bral	8000757c <_vfprintf_r+0x166c>
800067d8:	40 5b       	lddsp	r11,sp[0x14]
800067da:	40 7a       	lddsp	r10,sp[0x1c]
800067dc:	e0 a0 1d 8f 	rcall	8000a2fa <__isnand>
800067e0:	c0 c0       	breq	800067f8 <_vfprintf_r+0x8e8>
800067e2:	50 26       	stdsp	sp[0x8],r6
800067e4:	4c b8       	lddpc	r8,80006910 <_vfprintf_r+0xa00>
800067e6:	4c c6       	lddpc	r6,80006914 <_vfprintf_r+0xa04>
800067e8:	a7 d5       	cbr	r5,0x7
800067ea:	e0 40 00 47 	cp.w	r0,71
800067ee:	f0 06 17 a0 	movle	r6,r8
800067f2:	30 32       	mov	r2,3
800067f4:	e0 8f 06 ca 	bral	80007588 <_vfprintf_r+0x1678>
800067f8:	40 2a       	lddsp	r10,sp[0x8]
800067fa:	5b fa       	cp.w	r10,-1
800067fc:	c0 41       	brne	80006804 <_vfprintf_r+0x8f4>
800067fe:	30 69       	mov	r9,6
80006800:	50 29       	stdsp	sp[0x8],r9
80006802:	c1 18       	rjmp	80006824 <_vfprintf_r+0x914>
80006804:	e0 40 00 47 	cp.w	r0,71
80006808:	5f 09       	sreq	r9
8000680a:	e0 40 00 67 	cp.w	r0,103
8000680e:	5f 08       	sreq	r8
80006810:	f3 e8 10 08 	or	r8,r9,r8
80006814:	f8 08 18 00 	cp.b	r8,r12
80006818:	c0 60       	breq	80006824 <_vfprintf_r+0x914>
8000681a:	40 28       	lddsp	r8,sp[0x8]
8000681c:	58 08       	cp.w	r8,0
8000681e:	f9 b8 00 01 	moveq	r8,1
80006822:	50 28       	stdsp	sp[0x8],r8
80006824:	40 78       	lddsp	r8,sp[0x1c]
80006826:	40 59       	lddsp	r9,sp[0x14]
80006828:	fa e9 06 94 	st.d	sp[1684],r8
8000682c:	a9 a5       	sbr	r5,0x8
8000682e:	fa f8 06 94 	ld.w	r8,sp[1684]
80006832:	58 08       	cp.w	r8,0
80006834:	c0 65       	brlt	80006840 <_vfprintf_r+0x930>
80006836:	40 5e       	lddsp	lr,sp[0x14]
80006838:	30 0c       	mov	r12,0
8000683a:	50 6e       	stdsp	sp[0x18],lr
8000683c:	50 9c       	stdsp	sp[0x24],r12
8000683e:	c0 78       	rjmp	8000684c <_vfprintf_r+0x93c>
80006840:	40 5b       	lddsp	r11,sp[0x14]
80006842:	32 da       	mov	r10,45
80006844:	ee 1b 80 00 	eorh	r11,0x8000
80006848:	50 9a       	stdsp	sp[0x24],r10
8000684a:	50 6b       	stdsp	sp[0x18],r11
8000684c:	e0 40 00 46 	cp.w	r0,70
80006850:	5f 09       	sreq	r9
80006852:	e0 40 00 66 	cp.w	r0,102
80006856:	5f 08       	sreq	r8
80006858:	f3 e8 10 08 	or	r8,r9,r8
8000685c:	50 48       	stdsp	sp[0x10],r8
8000685e:	c0 40       	breq	80006866 <_vfprintf_r+0x956>
80006860:	40 22       	lddsp	r2,sp[0x8]
80006862:	30 39       	mov	r9,3
80006864:	c1 08       	rjmp	80006884 <_vfprintf_r+0x974>
80006866:	e0 40 00 45 	cp.w	r0,69
8000686a:	5f 09       	sreq	r9
8000686c:	e0 40 00 65 	cp.w	r0,101
80006870:	5f 08       	sreq	r8
80006872:	40 22       	lddsp	r2,sp[0x8]
80006874:	10 49       	or	r9,r8
80006876:	2f f2       	sub	r2,-1
80006878:	40 46       	lddsp	r6,sp[0x10]
8000687a:	ec 09 18 00 	cp.b	r9,r6
8000687e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80006882:	30 29       	mov	r9,2
80006884:	fa c8 f9 5c 	sub	r8,sp,-1700
80006888:	1a d8       	st.w	--sp,r8
8000688a:	fa c8 f9 54 	sub	r8,sp,-1708
8000688e:	1a d8       	st.w	--sp,r8
80006890:	fa c8 f9 4c 	sub	r8,sp,-1716
80006894:	08 9c       	mov	r12,r4
80006896:	1a d8       	st.w	--sp,r8
80006898:	04 98       	mov	r8,r2
8000689a:	40 9b       	lddsp	r11,sp[0x24]
8000689c:	40 aa       	lddsp	r10,sp[0x28]
8000689e:	e0 a0 0b cd 	rcall	80008038 <_dtoa_r>
800068a2:	e0 40 00 47 	cp.w	r0,71
800068a6:	5f 19       	srne	r9
800068a8:	e0 40 00 67 	cp.w	r0,103
800068ac:	5f 18       	srne	r8
800068ae:	18 96       	mov	r6,r12
800068b0:	2f dd       	sub	sp,-12
800068b2:	f3 e8 00 08 	and	r8,r9,r8
800068b6:	c0 41       	brne	800068be <_vfprintf_r+0x9ae>
800068b8:	ed b5 00 00 	bld	r5,0x0
800068bc:	c3 81       	brne	8000692c <_vfprintf_r+0xa1c>
800068be:	ec 02 00 0e 	add	lr,r6,r2
800068c2:	50 3e       	stdsp	sp[0xc],lr
800068c4:	40 4c       	lddsp	r12,sp[0x10]
800068c6:	58 0c       	cp.w	r12,0
800068c8:	c1 50       	breq	800068f2 <_vfprintf_r+0x9e2>
800068ca:	0d 89       	ld.ub	r9,r6[0x0]
800068cc:	33 08       	mov	r8,48
800068ce:	f0 09 18 00 	cp.b	r9,r8
800068d2:	c0 b1       	brne	800068e8 <_vfprintf_r+0x9d8>
800068d4:	30 08       	mov	r8,0
800068d6:	30 09       	mov	r9,0
800068d8:	40 6b       	lddsp	r11,sp[0x18]
800068da:	40 7a       	lddsp	r10,sp[0x1c]
800068dc:	e0 a0 21 bf 	rcall	8000ac5a <__avr32_f64_cmp_eq>
800068e0:	fb b2 00 01 	rsubeq	r2,1
800068e4:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800068e8:	40 3b       	lddsp	r11,sp[0xc]
800068ea:	fa f8 06 ac 	ld.w	r8,sp[1708]
800068ee:	10 0b       	add	r11,r8
800068f0:	50 3b       	stdsp	sp[0xc],r11
800068f2:	40 6b       	lddsp	r11,sp[0x18]
800068f4:	30 08       	mov	r8,0
800068f6:	30 09       	mov	r9,0
800068f8:	40 7a       	lddsp	r10,sp[0x1c]
800068fa:	e0 a0 21 b0 	rcall	8000ac5a <__avr32_f64_cmp_eq>
800068fe:	c1 10       	breq	80006920 <_vfprintf_r+0xa10>
80006900:	40 3a       	lddsp	r10,sp[0xc]
80006902:	fb 4a 06 a4 	st.w	sp[1700],r10
80006906:	c0 d8       	rjmp	80006920 <_vfprintf_r+0xa10>
80006908:	80 00       	ld.sh	r0,r0[0x0]
8000690a:	c4 24       	brge	8000698e <_vfprintf_r+0xa7e>
8000690c:	80 00       	ld.sh	r0,r0[0x0]
8000690e:	c4 28       	rjmp	80006992 <_vfprintf_r+0xa82>
80006910:	80 00       	ld.sh	r0,r0[0x0]
80006912:	c4 2c       	rcall	80006996 <_vfprintf_r+0xa86>
80006914:	80 00       	ld.sh	r0,r0[0x0]
80006916:	c4 30       	breq	8000699c <_vfprintf_r+0xa8c>
80006918:	10 c9       	st.b	r8++,r9
8000691a:	fb 48 06 a4 	st.w	sp[1700],r8
8000691e:	c0 28       	rjmp	80006922 <_vfprintf_r+0xa12>
80006920:	33 09       	mov	r9,48
80006922:	fa f8 06 a4 	ld.w	r8,sp[1700]
80006926:	40 3e       	lddsp	lr,sp[0xc]
80006928:	1c 38       	cp.w	r8,lr
8000692a:	cf 73       	brcs	80006918 <_vfprintf_r+0xa08>
8000692c:	e0 40 00 47 	cp.w	r0,71
80006930:	5f 09       	sreq	r9
80006932:	e0 40 00 67 	cp.w	r0,103
80006936:	5f 08       	sreq	r8
80006938:	f3 e8 10 08 	or	r8,r9,r8
8000693c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80006940:	0c 19       	sub	r9,r6
80006942:	50 69       	stdsp	sp[0x18],r9
80006944:	58 08       	cp.w	r8,0
80006946:	c0 b0       	breq	8000695c <_vfprintf_r+0xa4c>
80006948:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000694c:	5b d8       	cp.w	r8,-3
8000694e:	c0 55       	brlt	80006958 <_vfprintf_r+0xa48>
80006950:	40 2c       	lddsp	r12,sp[0x8]
80006952:	18 38       	cp.w	r8,r12
80006954:	e0 8a 00 6a 	brle	80006a28 <_vfprintf_r+0xb18>
80006958:	20 20       	sub	r0,2
8000695a:	c0 58       	rjmp	80006964 <_vfprintf_r+0xa54>
8000695c:	e0 40 00 65 	cp.w	r0,101
80006960:	e0 89 00 46 	brgt	800069ec <_vfprintf_r+0xadc>
80006964:	fa fb 06 ac 	ld.w	r11,sp[1708]
80006968:	fb 60 06 9c 	st.b	sp[1692],r0
8000696c:	20 1b       	sub	r11,1
8000696e:	fb 4b 06 ac 	st.w	sp[1708],r11
80006972:	c0 47       	brpl	8000697a <_vfprintf_r+0xa6a>
80006974:	5c 3b       	neg	r11
80006976:	32 d8       	mov	r8,45
80006978:	c0 28       	rjmp	8000697c <_vfprintf_r+0xa6c>
8000697a:	32 b8       	mov	r8,43
8000697c:	fb 68 06 9d 	st.b	sp[1693],r8
80006980:	58 9b       	cp.w	r11,9
80006982:	e0 8a 00 1d 	brle	800069bc <_vfprintf_r+0xaac>
80006986:	fa c9 fa 35 	sub	r9,sp,-1483
8000698a:	30 aa       	mov	r10,10
8000698c:	12 98       	mov	r8,r9
8000698e:	0e 9c       	mov	r12,r7
80006990:	0c 92       	mov	r2,r6
80006992:	f6 0a 0c 06 	divs	r6,r11,r10
80006996:	0e 9b       	mov	r11,r7
80006998:	2d 0b       	sub	r11,-48
8000699a:	10 fb       	st.b	--r8,r11
8000699c:	0c 9b       	mov	r11,r6
8000699e:	58 96       	cp.w	r6,9
800069a0:	fe 99 ff f9 	brgt	80006992 <_vfprintf_r+0xa82>
800069a4:	2d 0b       	sub	r11,-48
800069a6:	18 97       	mov	r7,r12
800069a8:	04 96       	mov	r6,r2
800069aa:	10 fb       	st.b	--r8,r11
800069ac:	fa ca f9 62 	sub	r10,sp,-1694
800069b0:	c0 38       	rjmp	800069b6 <_vfprintf_r+0xaa6>
800069b2:	11 3b       	ld.ub	r11,r8++
800069b4:	14 cb       	st.b	r10++,r11
800069b6:	12 38       	cp.w	r8,r9
800069b8:	cf d3       	brcs	800069b2 <_vfprintf_r+0xaa2>
800069ba:	c0 98       	rjmp	800069cc <_vfprintf_r+0xabc>
800069bc:	2d 0b       	sub	r11,-48
800069be:	33 08       	mov	r8,48
800069c0:	fb 6b 06 9f 	st.b	sp[1695],r11
800069c4:	fb 68 06 9e 	st.b	sp[1694],r8
800069c8:	fa ca f9 60 	sub	r10,sp,-1696
800069cc:	fa c8 f9 64 	sub	r8,sp,-1692
800069d0:	f4 08 01 08 	sub	r8,r10,r8
800069d4:	50 e8       	stdsp	sp[0x38],r8
800069d6:	10 92       	mov	r2,r8
800069d8:	40 6b       	lddsp	r11,sp[0x18]
800069da:	16 02       	add	r2,r11
800069dc:	58 1b       	cp.w	r11,1
800069de:	e0 89 00 05 	brgt	800069e8 <_vfprintf_r+0xad8>
800069e2:	ed b5 00 00 	bld	r5,0x0
800069e6:	c3 51       	brne	80006a50 <_vfprintf_r+0xb40>
800069e8:	2f f2       	sub	r2,-1
800069ea:	c3 38       	rjmp	80006a50 <_vfprintf_r+0xb40>
800069ec:	e0 40 00 66 	cp.w	r0,102
800069f0:	c1 c1       	brne	80006a28 <_vfprintf_r+0xb18>
800069f2:	fa f2 06 ac 	ld.w	r2,sp[1708]
800069f6:	58 02       	cp.w	r2,0
800069f8:	e0 8a 00 0c 	brle	80006a10 <_vfprintf_r+0xb00>
800069fc:	40 2a       	lddsp	r10,sp[0x8]
800069fe:	58 0a       	cp.w	r10,0
80006a00:	c0 41       	brne	80006a08 <_vfprintf_r+0xaf8>
80006a02:	ed b5 00 00 	bld	r5,0x0
80006a06:	c2 51       	brne	80006a50 <_vfprintf_r+0xb40>
80006a08:	2f f2       	sub	r2,-1
80006a0a:	40 29       	lddsp	r9,sp[0x8]
80006a0c:	12 02       	add	r2,r9
80006a0e:	c0 b8       	rjmp	80006a24 <_vfprintf_r+0xb14>
80006a10:	40 28       	lddsp	r8,sp[0x8]
80006a12:	58 08       	cp.w	r8,0
80006a14:	c0 61       	brne	80006a20 <_vfprintf_r+0xb10>
80006a16:	ed b5 00 00 	bld	r5,0x0
80006a1a:	c0 30       	breq	80006a20 <_vfprintf_r+0xb10>
80006a1c:	30 12       	mov	r2,1
80006a1e:	c1 98       	rjmp	80006a50 <_vfprintf_r+0xb40>
80006a20:	40 22       	lddsp	r2,sp[0x8]
80006a22:	2f e2       	sub	r2,-2
80006a24:	36 60       	mov	r0,102
80006a26:	c1 58       	rjmp	80006a50 <_vfprintf_r+0xb40>
80006a28:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006a2c:	40 6e       	lddsp	lr,sp[0x18]
80006a2e:	1c 32       	cp.w	r2,lr
80006a30:	c0 65       	brlt	80006a3c <_vfprintf_r+0xb2c>
80006a32:	ed b5 00 00 	bld	r5,0x0
80006a36:	f7 b2 00 ff 	subeq	r2,-1
80006a3a:	c0 a8       	rjmp	80006a4e <_vfprintf_r+0xb3e>
80006a3c:	e4 08 11 02 	rsub	r8,r2,2
80006a40:	40 6c       	lddsp	r12,sp[0x18]
80006a42:	58 02       	cp.w	r2,0
80006a44:	f0 02 17 a0 	movle	r2,r8
80006a48:	f9 b2 09 01 	movgt	r2,1
80006a4c:	18 02       	add	r2,r12
80006a4e:	36 70       	mov	r0,103
80006a50:	40 9b       	lddsp	r11,sp[0x24]
80006a52:	58 0b       	cp.w	r11,0
80006a54:	e0 80 05 94 	breq	8000757c <_vfprintf_r+0x166c>
80006a58:	32 d8       	mov	r8,45
80006a5a:	fb 68 06 bb 	st.b	sp[1723],r8
80006a5e:	e0 8f 05 93 	bral	80007584 <_vfprintf_r+0x1674>
80006a62:	50 a7       	stdsp	sp[0x28],r7
80006a64:	04 94       	mov	r4,r2
80006a66:	0c 97       	mov	r7,r6
80006a68:	02 92       	mov	r2,r1
80006a6a:	06 96       	mov	r6,r3
80006a6c:	40 41       	lddsp	r1,sp[0x10]
80006a6e:	40 93       	lddsp	r3,sp[0x24]
80006a70:	0e 99       	mov	r9,r7
80006a72:	ed b5 00 05 	bld	r5,0x5
80006a76:	c4 81       	brne	80006b06 <_vfprintf_r+0xbf6>
80006a78:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006a7c:	40 3e       	lddsp	lr,sp[0xc]
80006a7e:	58 0e       	cp.w	lr,0
80006a80:	c1 d0       	breq	80006aba <_vfprintf_r+0xbaa>
80006a82:	10 36       	cp.w	r6,r8
80006a84:	c0 64       	brge	80006a90 <_vfprintf_r+0xb80>
80006a86:	fa cc f9 44 	sub	r12,sp,-1724
80006a8a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006a8e:	c1 d8       	rjmp	80006ac8 <_vfprintf_r+0xbb8>
80006a90:	fa c8 f9 50 	sub	r8,sp,-1712
80006a94:	1a d8       	st.w	--sp,r8
80006a96:	fa c8 fa b8 	sub	r8,sp,-1352
80006a9a:	04 9a       	mov	r10,r2
80006a9c:	1a d8       	st.w	--sp,r8
80006a9e:	fa c8 fb b4 	sub	r8,sp,-1100
80006aa2:	0c 9b       	mov	r11,r6
80006aa4:	1a d8       	st.w	--sp,r8
80006aa6:	08 9c       	mov	r12,r4
80006aa8:	fa c8 f9 40 	sub	r8,sp,-1728
80006aac:	fa c9 ff b4 	sub	r9,sp,-76
80006ab0:	fe b0 f8 92 	rcall	80005bd4 <get_arg>
80006ab4:	2f dd       	sub	sp,-12
80006ab6:	78 0a       	ld.w	r10,r12[0x0]
80006ab8:	c2 08       	rjmp	80006af8 <_vfprintf_r+0xbe8>
80006aba:	2f f7       	sub	r7,-1
80006abc:	10 39       	cp.w	r9,r8
80006abe:	c0 84       	brge	80006ace <_vfprintf_r+0xbbe>
80006ac0:	fa cb f9 44 	sub	r11,sp,-1724
80006ac4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006ac8:	ec fa fd 88 	ld.w	r10,r6[-632]
80006acc:	c1 68       	rjmp	80006af8 <_vfprintf_r+0xbe8>
80006ace:	41 09       	lddsp	r9,sp[0x40]
80006ad0:	59 f8       	cp.w	r8,31
80006ad2:	e0 89 00 10 	brgt	80006af2 <_vfprintf_r+0xbe2>
80006ad6:	f2 ca ff fc 	sub	r10,r9,-4
80006ada:	51 0a       	stdsp	sp[0x40],r10
80006adc:	fa c6 f9 44 	sub	r6,sp,-1724
80006ae0:	72 0a       	ld.w	r10,r9[0x0]
80006ae2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006ae6:	f3 4a fd 88 	st.w	r9[-632],r10
80006aea:	2f f8       	sub	r8,-1
80006aec:	fb 48 06 b4 	st.w	sp[1716],r8
80006af0:	c0 48       	rjmp	80006af8 <_vfprintf_r+0xbe8>
80006af2:	72 0a       	ld.w	r10,r9[0x0]
80006af4:	2f c9       	sub	r9,-4
80006af6:	51 09       	stdsp	sp[0x40],r9
80006af8:	40 be       	lddsp	lr,sp[0x2c]
80006afa:	1c 98       	mov	r8,lr
80006afc:	95 1e       	st.w	r10[0x4],lr
80006afe:	bf 58       	asr	r8,0x1f
80006b00:	95 08       	st.w	r10[0x0],r8
80006b02:	fe 9f fa 92 	bral	80006026 <_vfprintf_r+0x116>
80006b06:	ed b5 00 04 	bld	r5,0x4
80006b0a:	c4 80       	breq	80006b9a <_vfprintf_r+0xc8a>
80006b0c:	e2 15 00 40 	andl	r5,0x40,COH
80006b10:	c4 50       	breq	80006b9a <_vfprintf_r+0xc8a>
80006b12:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b16:	40 3c       	lddsp	r12,sp[0xc]
80006b18:	58 0c       	cp.w	r12,0
80006b1a:	c1 d0       	breq	80006b54 <_vfprintf_r+0xc44>
80006b1c:	10 36       	cp.w	r6,r8
80006b1e:	c0 64       	brge	80006b2a <_vfprintf_r+0xc1a>
80006b20:	fa cb f9 44 	sub	r11,sp,-1724
80006b24:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006b28:	c1 d8       	rjmp	80006b62 <_vfprintf_r+0xc52>
80006b2a:	fa c8 f9 50 	sub	r8,sp,-1712
80006b2e:	1a d8       	st.w	--sp,r8
80006b30:	fa c8 fa b8 	sub	r8,sp,-1352
80006b34:	04 9a       	mov	r10,r2
80006b36:	1a d8       	st.w	--sp,r8
80006b38:	fa c8 fb b4 	sub	r8,sp,-1100
80006b3c:	0c 9b       	mov	r11,r6
80006b3e:	1a d8       	st.w	--sp,r8
80006b40:	08 9c       	mov	r12,r4
80006b42:	fa c8 f9 40 	sub	r8,sp,-1728
80006b46:	fa c9 ff b4 	sub	r9,sp,-76
80006b4a:	fe b0 f8 45 	rcall	80005bd4 <get_arg>
80006b4e:	2f dd       	sub	sp,-12
80006b50:	78 0a       	ld.w	r10,r12[0x0]
80006b52:	c2 08       	rjmp	80006b92 <_vfprintf_r+0xc82>
80006b54:	2f f7       	sub	r7,-1
80006b56:	10 39       	cp.w	r9,r8
80006b58:	c0 84       	brge	80006b68 <_vfprintf_r+0xc58>
80006b5a:	fa ca f9 44 	sub	r10,sp,-1724
80006b5e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006b62:	ec fa fd 88 	ld.w	r10,r6[-632]
80006b66:	c1 68       	rjmp	80006b92 <_vfprintf_r+0xc82>
80006b68:	41 09       	lddsp	r9,sp[0x40]
80006b6a:	59 f8       	cp.w	r8,31
80006b6c:	e0 89 00 10 	brgt	80006b8c <_vfprintf_r+0xc7c>
80006b70:	f2 ca ff fc 	sub	r10,r9,-4
80006b74:	51 0a       	stdsp	sp[0x40],r10
80006b76:	fa c6 f9 44 	sub	r6,sp,-1724
80006b7a:	72 0a       	ld.w	r10,r9[0x0]
80006b7c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006b80:	f3 4a fd 88 	st.w	r9[-632],r10
80006b84:	2f f8       	sub	r8,-1
80006b86:	fb 48 06 b4 	st.w	sp[1716],r8
80006b8a:	c0 48       	rjmp	80006b92 <_vfprintf_r+0xc82>
80006b8c:	72 0a       	ld.w	r10,r9[0x0]
80006b8e:	2f c9       	sub	r9,-4
80006b90:	51 09       	stdsp	sp[0x40],r9
80006b92:	40 be       	lddsp	lr,sp[0x2c]
80006b94:	b4 0e       	st.h	r10[0x0],lr
80006b96:	fe 9f fa 48 	bral	80006026 <_vfprintf_r+0x116>
80006b9a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006b9e:	40 3c       	lddsp	r12,sp[0xc]
80006ba0:	58 0c       	cp.w	r12,0
80006ba2:	c1 d0       	breq	80006bdc <_vfprintf_r+0xccc>
80006ba4:	10 36       	cp.w	r6,r8
80006ba6:	c0 64       	brge	80006bb2 <_vfprintf_r+0xca2>
80006ba8:	fa cb f9 44 	sub	r11,sp,-1724
80006bac:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006bb0:	c1 d8       	rjmp	80006bea <_vfprintf_r+0xcda>
80006bb2:	fa c8 f9 50 	sub	r8,sp,-1712
80006bb6:	1a d8       	st.w	--sp,r8
80006bb8:	fa c8 fa b8 	sub	r8,sp,-1352
80006bbc:	04 9a       	mov	r10,r2
80006bbe:	1a d8       	st.w	--sp,r8
80006bc0:	fa c8 fb b4 	sub	r8,sp,-1100
80006bc4:	0c 9b       	mov	r11,r6
80006bc6:	1a d8       	st.w	--sp,r8
80006bc8:	08 9c       	mov	r12,r4
80006bca:	fa c8 f9 40 	sub	r8,sp,-1728
80006bce:	fa c9 ff b4 	sub	r9,sp,-76
80006bd2:	fe b0 f8 01 	rcall	80005bd4 <get_arg>
80006bd6:	2f dd       	sub	sp,-12
80006bd8:	78 0a       	ld.w	r10,r12[0x0]
80006bda:	c2 08       	rjmp	80006c1a <_vfprintf_r+0xd0a>
80006bdc:	2f f7       	sub	r7,-1
80006bde:	10 39       	cp.w	r9,r8
80006be0:	c0 84       	brge	80006bf0 <_vfprintf_r+0xce0>
80006be2:	fa ca f9 44 	sub	r10,sp,-1724
80006be6:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006bea:	ec fa fd 88 	ld.w	r10,r6[-632]
80006bee:	c1 68       	rjmp	80006c1a <_vfprintf_r+0xd0a>
80006bf0:	41 09       	lddsp	r9,sp[0x40]
80006bf2:	59 f8       	cp.w	r8,31
80006bf4:	e0 89 00 10 	brgt	80006c14 <_vfprintf_r+0xd04>
80006bf8:	f2 ca ff fc 	sub	r10,r9,-4
80006bfc:	51 0a       	stdsp	sp[0x40],r10
80006bfe:	fa c6 f9 44 	sub	r6,sp,-1724
80006c02:	72 0a       	ld.w	r10,r9[0x0]
80006c04:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006c08:	f3 4a fd 88 	st.w	r9[-632],r10
80006c0c:	2f f8       	sub	r8,-1
80006c0e:	fb 48 06 b4 	st.w	sp[1716],r8
80006c12:	c0 48       	rjmp	80006c1a <_vfprintf_r+0xd0a>
80006c14:	72 0a       	ld.w	r10,r9[0x0]
80006c16:	2f c9       	sub	r9,-4
80006c18:	51 09       	stdsp	sp[0x40],r9
80006c1a:	40 be       	lddsp	lr,sp[0x2c]
80006c1c:	95 0e       	st.w	r10[0x0],lr
80006c1e:	fe 9f fa 04 	bral	80006026 <_vfprintf_r+0x116>
80006c22:	50 a7       	stdsp	sp[0x28],r7
80006c24:	50 80       	stdsp	sp[0x20],r0
80006c26:	0c 97       	mov	r7,r6
80006c28:	04 94       	mov	r4,r2
80006c2a:	06 96       	mov	r6,r3
80006c2c:	02 92       	mov	r2,r1
80006c2e:	40 93       	lddsp	r3,sp[0x24]
80006c30:	10 90       	mov	r0,r8
80006c32:	40 41       	lddsp	r1,sp[0x10]
80006c34:	a5 a5       	sbr	r5,0x4
80006c36:	c0 a8       	rjmp	80006c4a <_vfprintf_r+0xd3a>
80006c38:	50 a7       	stdsp	sp[0x28],r7
80006c3a:	50 80       	stdsp	sp[0x20],r0
80006c3c:	0c 97       	mov	r7,r6
80006c3e:	04 94       	mov	r4,r2
80006c40:	06 96       	mov	r6,r3
80006c42:	02 92       	mov	r2,r1
80006c44:	40 93       	lddsp	r3,sp[0x24]
80006c46:	10 90       	mov	r0,r8
80006c48:	40 41       	lddsp	r1,sp[0x10]
80006c4a:	ed b5 00 05 	bld	r5,0x5
80006c4e:	c5 d1       	brne	80006d08 <_vfprintf_r+0xdf8>
80006c50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006c54:	40 3c       	lddsp	r12,sp[0xc]
80006c56:	58 0c       	cp.w	r12,0
80006c58:	c2 60       	breq	80006ca4 <_vfprintf_r+0xd94>
80006c5a:	10 36       	cp.w	r6,r8
80006c5c:	c0 a4       	brge	80006c70 <_vfprintf_r+0xd60>
80006c5e:	fa cb f9 44 	sub	r11,sp,-1724
80006c62:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006c66:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006c6a:	fa e9 00 00 	st.d	sp[0],r8
80006c6e:	c1 88       	rjmp	80006c9e <_vfprintf_r+0xd8e>
80006c70:	fa c8 f9 50 	sub	r8,sp,-1712
80006c74:	1a d8       	st.w	--sp,r8
80006c76:	fa c8 fa b8 	sub	r8,sp,-1352
80006c7a:	04 9a       	mov	r10,r2
80006c7c:	1a d8       	st.w	--sp,r8
80006c7e:	0c 9b       	mov	r11,r6
80006c80:	fa c8 fb b4 	sub	r8,sp,-1100
80006c84:	08 9c       	mov	r12,r4
80006c86:	1a d8       	st.w	--sp,r8
80006c88:	fa c8 f9 40 	sub	r8,sp,-1728
80006c8c:	fa c9 ff b4 	sub	r9,sp,-76
80006c90:	fe b0 f7 a2 	rcall	80005bd4 <get_arg>
80006c94:	2f dd       	sub	sp,-12
80006c96:	f8 ea 00 00 	ld.d	r10,r12[0]
80006c9a:	fa eb 00 00 	st.d	sp[0],r10
80006c9e:	30 08       	mov	r8,0
80006ca0:	e0 8f 03 de 	bral	8000745c <_vfprintf_r+0x154c>
80006ca4:	ee ca ff ff 	sub	r10,r7,-1
80006ca8:	10 37       	cp.w	r7,r8
80006caa:	c0 b4       	brge	80006cc0 <_vfprintf_r+0xdb0>
80006cac:	fa c9 f9 44 	sub	r9,sp,-1724
80006cb0:	14 97       	mov	r7,r10
80006cb2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006cb6:	ec ea fd 88 	ld.d	r10,r6[-632]
80006cba:	fa eb 00 00 	st.d	sp[0],r10
80006cbe:	c1 88       	rjmp	80006cee <_vfprintf_r+0xdde>
80006cc0:	41 09       	lddsp	r9,sp[0x40]
80006cc2:	59 f8       	cp.w	r8,31
80006cc4:	e0 89 00 18 	brgt	80006cf4 <_vfprintf_r+0xde4>
80006cc8:	f2 e6 00 00 	ld.d	r6,r9[0]
80006ccc:	f2 cb ff f8 	sub	r11,r9,-8
80006cd0:	fa e7 00 00 	st.d	sp[0],r6
80006cd4:	51 0b       	stdsp	sp[0x40],r11
80006cd6:	fa c6 f9 44 	sub	r6,sp,-1724
80006cda:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006cde:	fa e6 00 00 	ld.d	r6,sp[0]
80006ce2:	f2 e7 fd 88 	st.d	r9[-632],r6
80006ce6:	2f f8       	sub	r8,-1
80006ce8:	14 97       	mov	r7,r10
80006cea:	fb 48 06 b4 	st.w	sp[1716],r8
80006cee:	40 38       	lddsp	r8,sp[0xc]
80006cf0:	e0 8f 03 b6 	bral	8000745c <_vfprintf_r+0x154c>
80006cf4:	f2 e6 00 00 	ld.d	r6,r9[0]
80006cf8:	40 38       	lddsp	r8,sp[0xc]
80006cfa:	fa e7 00 00 	st.d	sp[0],r6
80006cfe:	2f 89       	sub	r9,-8
80006d00:	14 97       	mov	r7,r10
80006d02:	51 09       	stdsp	sp[0x40],r9
80006d04:	e0 8f 03 ac 	bral	8000745c <_vfprintf_r+0x154c>
80006d08:	ed b5 00 04 	bld	r5,0x4
80006d0c:	c1 61       	brne	80006d38 <_vfprintf_r+0xe28>
80006d0e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d12:	40 3e       	lddsp	lr,sp[0xc]
80006d14:	58 0e       	cp.w	lr,0
80006d16:	c0 80       	breq	80006d26 <_vfprintf_r+0xe16>
80006d18:	10 36       	cp.w	r6,r8
80006d1a:	c6 74       	brge	80006de8 <_vfprintf_r+0xed8>
80006d1c:	fa cc f9 44 	sub	r12,sp,-1724
80006d20:	f8 06 00 36 	add	r6,r12,r6<<0x3
80006d24:	c8 08       	rjmp	80006e24 <_vfprintf_r+0xf14>
80006d26:	ee ca ff ff 	sub	r10,r7,-1
80006d2a:	10 37       	cp.w	r7,r8
80006d2c:	c7 f4       	brge	80006e2a <_vfprintf_r+0xf1a>
80006d2e:	fa cb f9 44 	sub	r11,sp,-1724
80006d32:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006d36:	c7 68       	rjmp	80006e22 <_vfprintf_r+0xf12>
80006d38:	ed b5 00 06 	bld	r5,0x6
80006d3c:	c4 a1       	brne	80006dd0 <_vfprintf_r+0xec0>
80006d3e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006d42:	40 3c       	lddsp	r12,sp[0xc]
80006d44:	58 0c       	cp.w	r12,0
80006d46:	c1 d0       	breq	80006d80 <_vfprintf_r+0xe70>
80006d48:	10 36       	cp.w	r6,r8
80006d4a:	c0 64       	brge	80006d56 <_vfprintf_r+0xe46>
80006d4c:	fa cb f9 44 	sub	r11,sp,-1724
80006d50:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006d54:	c1 f8       	rjmp	80006d92 <_vfprintf_r+0xe82>
80006d56:	fa c8 f9 50 	sub	r8,sp,-1712
80006d5a:	1a d8       	st.w	--sp,r8
80006d5c:	fa c8 fa b8 	sub	r8,sp,-1352
80006d60:	1a d8       	st.w	--sp,r8
80006d62:	fa c8 fb b4 	sub	r8,sp,-1100
80006d66:	1a d8       	st.w	--sp,r8
80006d68:	fa c8 f9 40 	sub	r8,sp,-1728
80006d6c:	fa c9 ff b4 	sub	r9,sp,-76
80006d70:	04 9a       	mov	r10,r2
80006d72:	0c 9b       	mov	r11,r6
80006d74:	08 9c       	mov	r12,r4
80006d76:	fe b0 f7 2f 	rcall	80005bd4 <get_arg>
80006d7a:	2f dd       	sub	sp,-12
80006d7c:	98 18       	ld.sh	r8,r12[0x2]
80006d7e:	c2 68       	rjmp	80006dca <_vfprintf_r+0xeba>
80006d80:	ee ca ff ff 	sub	r10,r7,-1
80006d84:	10 37       	cp.w	r7,r8
80006d86:	c0 94       	brge	80006d98 <_vfprintf_r+0xe88>
80006d88:	fa c9 f9 44 	sub	r9,sp,-1724
80006d8c:	14 97       	mov	r7,r10
80006d8e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006d92:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006d96:	c1 a8       	rjmp	80006dca <_vfprintf_r+0xeba>
80006d98:	41 09       	lddsp	r9,sp[0x40]
80006d9a:	59 f8       	cp.w	r8,31
80006d9c:	e0 89 00 13 	brgt	80006dc2 <_vfprintf_r+0xeb2>
80006da0:	f2 cb ff fc 	sub	r11,r9,-4
80006da4:	51 0b       	stdsp	sp[0x40],r11
80006da6:	72 09       	ld.w	r9,r9[0x0]
80006da8:	fa c6 f9 44 	sub	r6,sp,-1724
80006dac:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80006db0:	2f f8       	sub	r8,-1
80006db2:	f7 49 fd 88 	st.w	r11[-632],r9
80006db6:	fb 48 06 b4 	st.w	sp[1716],r8
80006dba:	14 97       	mov	r7,r10
80006dbc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80006dc0:	c0 58       	rjmp	80006dca <_vfprintf_r+0xeba>
80006dc2:	92 18       	ld.sh	r8,r9[0x2]
80006dc4:	14 97       	mov	r7,r10
80006dc6:	2f c9       	sub	r9,-4
80006dc8:	51 09       	stdsp	sp[0x40],r9
80006dca:	5c 78       	castu.h	r8
80006dcc:	50 18       	stdsp	sp[0x4],r8
80006dce:	c4 68       	rjmp	80006e5a <_vfprintf_r+0xf4a>
80006dd0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006dd4:	40 3c       	lddsp	r12,sp[0xc]
80006dd6:	58 0c       	cp.w	r12,0
80006dd8:	c1 d0       	breq	80006e12 <_vfprintf_r+0xf02>
80006dda:	10 36       	cp.w	r6,r8
80006ddc:	c0 64       	brge	80006de8 <_vfprintf_r+0xed8>
80006dde:	fa cb f9 44 	sub	r11,sp,-1724
80006de2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006de6:	c1 f8       	rjmp	80006e24 <_vfprintf_r+0xf14>
80006de8:	fa c8 f9 50 	sub	r8,sp,-1712
80006dec:	1a d8       	st.w	--sp,r8
80006dee:	fa c8 fa b8 	sub	r8,sp,-1352
80006df2:	0c 9b       	mov	r11,r6
80006df4:	1a d8       	st.w	--sp,r8
80006df6:	fa c8 fb b4 	sub	r8,sp,-1100
80006dfa:	04 9a       	mov	r10,r2
80006dfc:	1a d8       	st.w	--sp,r8
80006dfe:	08 9c       	mov	r12,r4
80006e00:	fa c8 f9 40 	sub	r8,sp,-1728
80006e04:	fa c9 ff b4 	sub	r9,sp,-76
80006e08:	fe b0 f6 e6 	rcall	80005bd4 <get_arg>
80006e0c:	2f dd       	sub	sp,-12
80006e0e:	78 0b       	ld.w	r11,r12[0x0]
80006e10:	c2 48       	rjmp	80006e58 <_vfprintf_r+0xf48>
80006e12:	ee ca ff ff 	sub	r10,r7,-1
80006e16:	10 37       	cp.w	r7,r8
80006e18:	c0 94       	brge	80006e2a <_vfprintf_r+0xf1a>
80006e1a:	fa c9 f9 44 	sub	r9,sp,-1724
80006e1e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006e22:	14 97       	mov	r7,r10
80006e24:	ec fb fd 88 	ld.w	r11,r6[-632]
80006e28:	c1 88       	rjmp	80006e58 <_vfprintf_r+0xf48>
80006e2a:	41 09       	lddsp	r9,sp[0x40]
80006e2c:	59 f8       	cp.w	r8,31
80006e2e:	e0 89 00 11 	brgt	80006e50 <_vfprintf_r+0xf40>
80006e32:	f2 cb ff fc 	sub	r11,r9,-4
80006e36:	51 0b       	stdsp	sp[0x40],r11
80006e38:	fa c6 f9 44 	sub	r6,sp,-1724
80006e3c:	72 0b       	ld.w	r11,r9[0x0]
80006e3e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80006e42:	f3 4b fd 88 	st.w	r9[-632],r11
80006e46:	2f f8       	sub	r8,-1
80006e48:	14 97       	mov	r7,r10
80006e4a:	fb 48 06 b4 	st.w	sp[1716],r8
80006e4e:	c0 58       	rjmp	80006e58 <_vfprintf_r+0xf48>
80006e50:	72 0b       	ld.w	r11,r9[0x0]
80006e52:	14 97       	mov	r7,r10
80006e54:	2f c9       	sub	r9,-4
80006e56:	51 09       	stdsp	sp[0x40],r9
80006e58:	50 1b       	stdsp	sp[0x4],r11
80006e5a:	30 0e       	mov	lr,0
80006e5c:	50 0e       	stdsp	sp[0x0],lr
80006e5e:	1c 98       	mov	r8,lr
80006e60:	e0 8f 02 fe 	bral	8000745c <_vfprintf_r+0x154c>
80006e64:	50 a7       	stdsp	sp[0x28],r7
80006e66:	50 80       	stdsp	sp[0x20],r0
80006e68:	0c 97       	mov	r7,r6
80006e6a:	04 94       	mov	r4,r2
80006e6c:	06 96       	mov	r6,r3
80006e6e:	02 92       	mov	r2,r1
80006e70:	40 93       	lddsp	r3,sp[0x24]
80006e72:	40 41       	lddsp	r1,sp[0x10]
80006e74:	0e 99       	mov	r9,r7
80006e76:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006e7a:	40 3c       	lddsp	r12,sp[0xc]
80006e7c:	58 0c       	cp.w	r12,0
80006e7e:	c1 d0       	breq	80006eb8 <_vfprintf_r+0xfa8>
80006e80:	10 36       	cp.w	r6,r8
80006e82:	c0 64       	brge	80006e8e <_vfprintf_r+0xf7e>
80006e84:	fa cb f9 44 	sub	r11,sp,-1724
80006e88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006e8c:	c1 d8       	rjmp	80006ec6 <_vfprintf_r+0xfb6>
80006e8e:	fa c8 f9 50 	sub	r8,sp,-1712
80006e92:	1a d8       	st.w	--sp,r8
80006e94:	fa c8 fa b8 	sub	r8,sp,-1352
80006e98:	1a d8       	st.w	--sp,r8
80006e9a:	fa c8 fb b4 	sub	r8,sp,-1100
80006e9e:	1a d8       	st.w	--sp,r8
80006ea0:	fa c9 ff b4 	sub	r9,sp,-76
80006ea4:	fa c8 f9 40 	sub	r8,sp,-1728
80006ea8:	04 9a       	mov	r10,r2
80006eaa:	0c 9b       	mov	r11,r6
80006eac:	08 9c       	mov	r12,r4
80006eae:	fe b0 f6 93 	rcall	80005bd4 <get_arg>
80006eb2:	2f dd       	sub	sp,-12
80006eb4:	78 09       	ld.w	r9,r12[0x0]
80006eb6:	c2 18       	rjmp	80006ef8 <_vfprintf_r+0xfe8>
80006eb8:	2f f7       	sub	r7,-1
80006eba:	10 39       	cp.w	r9,r8
80006ebc:	c0 84       	brge	80006ecc <_vfprintf_r+0xfbc>
80006ebe:	fa ca f9 44 	sub	r10,sp,-1724
80006ec2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006ec6:	ec f9 fd 88 	ld.w	r9,r6[-632]
80006eca:	c1 78       	rjmp	80006ef8 <_vfprintf_r+0xfe8>
80006ecc:	41 09       	lddsp	r9,sp[0x40]
80006ece:	59 f8       	cp.w	r8,31
80006ed0:	e0 89 00 10 	brgt	80006ef0 <_vfprintf_r+0xfe0>
80006ed4:	f2 ca ff fc 	sub	r10,r9,-4
80006ed8:	51 0a       	stdsp	sp[0x40],r10
80006eda:	fa c6 f9 44 	sub	r6,sp,-1724
80006ede:	72 09       	ld.w	r9,r9[0x0]
80006ee0:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80006ee4:	f5 49 fd 88 	st.w	r10[-632],r9
80006ee8:	2f f8       	sub	r8,-1
80006eea:	fb 48 06 b4 	st.w	sp[1716],r8
80006eee:	c0 58       	rjmp	80006ef8 <_vfprintf_r+0xfe8>
80006ef0:	f2 c8 ff fc 	sub	r8,r9,-4
80006ef4:	51 08       	stdsp	sp[0x40],r8
80006ef6:	72 09       	ld.w	r9,r9[0x0]
80006ef8:	33 08       	mov	r8,48
80006efa:	fb 68 06 b8 	st.b	sp[1720],r8
80006efe:	37 88       	mov	r8,120
80006f00:	30 0e       	mov	lr,0
80006f02:	fb 68 06 b9 	st.b	sp[1721],r8
80006f06:	4c ac       	lddpc	r12,8000702c <_vfprintf_r+0x111c>
80006f08:	50 19       	stdsp	sp[0x4],r9
80006f0a:	a1 b5       	sbr	r5,0x1
80006f0c:	50 0e       	stdsp	sp[0x0],lr
80006f0e:	50 dc       	stdsp	sp[0x34],r12
80006f10:	30 28       	mov	r8,2
80006f12:	37 80       	mov	r0,120
80006f14:	e0 8f 02 a4 	bral	8000745c <_vfprintf_r+0x154c>
80006f18:	50 a7       	stdsp	sp[0x28],r7
80006f1a:	50 80       	stdsp	sp[0x20],r0
80006f1c:	10 90       	mov	r0,r8
80006f1e:	30 08       	mov	r8,0
80006f20:	fb 68 06 bb 	st.b	sp[1723],r8
80006f24:	0c 97       	mov	r7,r6
80006f26:	04 94       	mov	r4,r2
80006f28:	06 96       	mov	r6,r3
80006f2a:	02 92       	mov	r2,r1
80006f2c:	40 93       	lddsp	r3,sp[0x24]
80006f2e:	40 41       	lddsp	r1,sp[0x10]
80006f30:	0e 99       	mov	r9,r7
80006f32:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006f36:	40 3b       	lddsp	r11,sp[0xc]
80006f38:	58 0b       	cp.w	r11,0
80006f3a:	c1 d0       	breq	80006f74 <_vfprintf_r+0x1064>
80006f3c:	10 36       	cp.w	r6,r8
80006f3e:	c0 64       	brge	80006f4a <_vfprintf_r+0x103a>
80006f40:	fa ca f9 44 	sub	r10,sp,-1724
80006f44:	f4 06 00 36 	add	r6,r10,r6<<0x3
80006f48:	c1 d8       	rjmp	80006f82 <_vfprintf_r+0x1072>
80006f4a:	fa c8 f9 50 	sub	r8,sp,-1712
80006f4e:	1a d8       	st.w	--sp,r8
80006f50:	fa c8 fa b8 	sub	r8,sp,-1352
80006f54:	1a d8       	st.w	--sp,r8
80006f56:	fa c8 fb b4 	sub	r8,sp,-1100
80006f5a:	0c 9b       	mov	r11,r6
80006f5c:	1a d8       	st.w	--sp,r8
80006f5e:	04 9a       	mov	r10,r2
80006f60:	fa c8 f9 40 	sub	r8,sp,-1728
80006f64:	fa c9 ff b4 	sub	r9,sp,-76
80006f68:	08 9c       	mov	r12,r4
80006f6a:	fe b0 f6 35 	rcall	80005bd4 <get_arg>
80006f6e:	2f dd       	sub	sp,-12
80006f70:	78 06       	ld.w	r6,r12[0x0]
80006f72:	c2 08       	rjmp	80006fb2 <_vfprintf_r+0x10a2>
80006f74:	2f f7       	sub	r7,-1
80006f76:	10 39       	cp.w	r9,r8
80006f78:	c0 84       	brge	80006f88 <_vfprintf_r+0x1078>
80006f7a:	fa c9 f9 44 	sub	r9,sp,-1724
80006f7e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006f82:	ec f6 fd 88 	ld.w	r6,r6[-632]
80006f86:	c1 68       	rjmp	80006fb2 <_vfprintf_r+0x10a2>
80006f88:	41 09       	lddsp	r9,sp[0x40]
80006f8a:	59 f8       	cp.w	r8,31
80006f8c:	e0 89 00 10 	brgt	80006fac <_vfprintf_r+0x109c>
80006f90:	f2 ca ff fc 	sub	r10,r9,-4
80006f94:	51 0a       	stdsp	sp[0x40],r10
80006f96:	72 06       	ld.w	r6,r9[0x0]
80006f98:	fa ce f9 44 	sub	lr,sp,-1724
80006f9c:	fc 08 00 39 	add	r9,lr,r8<<0x3
80006fa0:	f3 46 fd 88 	st.w	r9[-632],r6
80006fa4:	2f f8       	sub	r8,-1
80006fa6:	fb 48 06 b4 	st.w	sp[1716],r8
80006faa:	c0 48       	rjmp	80006fb2 <_vfprintf_r+0x10a2>
80006fac:	72 06       	ld.w	r6,r9[0x0]
80006fae:	2f c9       	sub	r9,-4
80006fb0:	51 09       	stdsp	sp[0x40],r9
80006fb2:	40 2c       	lddsp	r12,sp[0x8]
80006fb4:	58 0c       	cp.w	r12,0
80006fb6:	c1 05       	brlt	80006fd6 <_vfprintf_r+0x10c6>
80006fb8:	18 9a       	mov	r10,r12
80006fba:	30 0b       	mov	r11,0
80006fbc:	0c 9c       	mov	r12,r6
80006fbe:	e0 a0 14 63 	rcall	80009884 <memchr>
80006fc2:	e0 80 02 e0 	breq	80007582 <_vfprintf_r+0x1672>
80006fc6:	f8 06 01 02 	sub	r2,r12,r6
80006fca:	40 2b       	lddsp	r11,sp[0x8]
80006fcc:	16 32       	cp.w	r2,r11
80006fce:	e0 89 02 da 	brgt	80007582 <_vfprintf_r+0x1672>
80006fd2:	e0 8f 02 d5 	bral	8000757c <_vfprintf_r+0x166c>
80006fd6:	30 0a       	mov	r10,0
80006fd8:	0c 9c       	mov	r12,r6
80006fda:	50 2a       	stdsp	sp[0x8],r10
80006fdc:	e0 a0 19 e6 	rcall	8000a3a8 <strlen>
80006fe0:	18 92       	mov	r2,r12
80006fe2:	e0 8f 02 d3 	bral	80007588 <_vfprintf_r+0x1678>
80006fe6:	50 a7       	stdsp	sp[0x28],r7
80006fe8:	50 80       	stdsp	sp[0x20],r0
80006fea:	0c 97       	mov	r7,r6
80006fec:	04 94       	mov	r4,r2
80006fee:	06 96       	mov	r6,r3
80006ff0:	02 92       	mov	r2,r1
80006ff2:	40 93       	lddsp	r3,sp[0x24]
80006ff4:	10 90       	mov	r0,r8
80006ff6:	40 41       	lddsp	r1,sp[0x10]
80006ff8:	a5 a5       	sbr	r5,0x4
80006ffa:	c0 a8       	rjmp	8000700e <_vfprintf_r+0x10fe>
80006ffc:	50 a7       	stdsp	sp[0x28],r7
80006ffe:	50 80       	stdsp	sp[0x20],r0
80007000:	0c 97       	mov	r7,r6
80007002:	04 94       	mov	r4,r2
80007004:	06 96       	mov	r6,r3
80007006:	02 92       	mov	r2,r1
80007008:	40 93       	lddsp	r3,sp[0x24]
8000700a:	10 90       	mov	r0,r8
8000700c:	40 41       	lddsp	r1,sp[0x10]
8000700e:	ed b5 00 05 	bld	r5,0x5
80007012:	c5 71       	brne	800070c0 <_vfprintf_r+0x11b0>
80007014:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007018:	40 39       	lddsp	r9,sp[0xc]
8000701a:	58 09       	cp.w	r9,0
8000701c:	c2 20       	breq	80007060 <_vfprintf_r+0x1150>
8000701e:	10 36       	cp.w	r6,r8
80007020:	c0 84       	brge	80007030 <_vfprintf_r+0x1120>
80007022:	fa c8 f9 44 	sub	r8,sp,-1724
80007026:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000702a:	c2 48       	rjmp	80007072 <_vfprintf_r+0x1162>
8000702c:	80 00       	ld.sh	r0,r0[0x0]
8000702e:	c4 34       	brge	800070b4 <_vfprintf_r+0x11a4>
80007030:	fa c8 f9 50 	sub	r8,sp,-1712
80007034:	1a d8       	st.w	--sp,r8
80007036:	fa c8 fa b8 	sub	r8,sp,-1352
8000703a:	1a d8       	st.w	--sp,r8
8000703c:	fa c8 fb b4 	sub	r8,sp,-1100
80007040:	1a d8       	st.w	--sp,r8
80007042:	fa c8 f9 40 	sub	r8,sp,-1728
80007046:	fa c9 ff b4 	sub	r9,sp,-76
8000704a:	04 9a       	mov	r10,r2
8000704c:	0c 9b       	mov	r11,r6
8000704e:	08 9c       	mov	r12,r4
80007050:	fe b0 f5 c2 	rcall	80005bd4 <get_arg>
80007054:	2f dd       	sub	sp,-12
80007056:	f8 e8 00 00 	ld.d	r8,r12[0]
8000705a:	fa e9 00 00 	st.d	sp[0],r8
8000705e:	c2 e8       	rjmp	800070ba <_vfprintf_r+0x11aa>
80007060:	ee ca ff ff 	sub	r10,r7,-1
80007064:	10 37       	cp.w	r7,r8
80007066:	c0 b4       	brge	8000707c <_vfprintf_r+0x116c>
80007068:	fa c8 f9 44 	sub	r8,sp,-1724
8000706c:	14 97       	mov	r7,r10
8000706e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80007072:	ec ea fd 88 	ld.d	r10,r6[-632]
80007076:	fa eb 00 00 	st.d	sp[0],r10
8000707a:	c2 08       	rjmp	800070ba <_vfprintf_r+0x11aa>
8000707c:	41 09       	lddsp	r9,sp[0x40]
8000707e:	59 f8       	cp.w	r8,31
80007080:	e0 89 00 16 	brgt	800070ac <_vfprintf_r+0x119c>
80007084:	f2 e6 00 00 	ld.d	r6,r9[0]
80007088:	f2 cb ff f8 	sub	r11,r9,-8
8000708c:	fa e7 00 00 	st.d	sp[0],r6
80007090:	51 0b       	stdsp	sp[0x40],r11
80007092:	fa c6 f9 44 	sub	r6,sp,-1724
80007096:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000709a:	fa e6 00 00 	ld.d	r6,sp[0]
8000709e:	f2 e7 fd 88 	st.d	r9[-632],r6
800070a2:	2f f8       	sub	r8,-1
800070a4:	14 97       	mov	r7,r10
800070a6:	fb 48 06 b4 	st.w	sp[1716],r8
800070aa:	c0 88       	rjmp	800070ba <_vfprintf_r+0x11aa>
800070ac:	f2 e6 00 00 	ld.d	r6,r9[0]
800070b0:	2f 89       	sub	r9,-8
800070b2:	fa e7 00 00 	st.d	sp[0],r6
800070b6:	51 09       	stdsp	sp[0x40],r9
800070b8:	14 97       	mov	r7,r10
800070ba:	30 18       	mov	r8,1
800070bc:	e0 8f 01 d0 	bral	8000745c <_vfprintf_r+0x154c>
800070c0:	ed b5 00 04 	bld	r5,0x4
800070c4:	c1 61       	brne	800070f0 <_vfprintf_r+0x11e0>
800070c6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800070ca:	40 3e       	lddsp	lr,sp[0xc]
800070cc:	58 0e       	cp.w	lr,0
800070ce:	c0 80       	breq	800070de <_vfprintf_r+0x11ce>
800070d0:	10 36       	cp.w	r6,r8
800070d2:	c6 74       	brge	800071a0 <_vfprintf_r+0x1290>
800070d4:	fa cc f9 44 	sub	r12,sp,-1724
800070d8:	f8 06 00 36 	add	r6,r12,r6<<0x3
800070dc:	c8 08       	rjmp	800071dc <_vfprintf_r+0x12cc>
800070de:	ee ca ff ff 	sub	r10,r7,-1
800070e2:	10 37       	cp.w	r7,r8
800070e4:	c7 f4       	brge	800071e2 <_vfprintf_r+0x12d2>
800070e6:	fa cb f9 44 	sub	r11,sp,-1724
800070ea:	f6 06 00 36 	add	r6,r11,r6<<0x3
800070ee:	c7 68       	rjmp	800071da <_vfprintf_r+0x12ca>
800070f0:	ed b5 00 06 	bld	r5,0x6
800070f4:	c4 a1       	brne	80007188 <_vfprintf_r+0x1278>
800070f6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800070fa:	40 3c       	lddsp	r12,sp[0xc]
800070fc:	58 0c       	cp.w	r12,0
800070fe:	c1 d0       	breq	80007138 <_vfprintf_r+0x1228>
80007100:	10 36       	cp.w	r6,r8
80007102:	c0 64       	brge	8000710e <_vfprintf_r+0x11fe>
80007104:	fa cb f9 44 	sub	r11,sp,-1724
80007108:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000710c:	c1 f8       	rjmp	8000714a <_vfprintf_r+0x123a>
8000710e:	fa c8 f9 50 	sub	r8,sp,-1712
80007112:	1a d8       	st.w	--sp,r8
80007114:	fa c8 fa b8 	sub	r8,sp,-1352
80007118:	1a d8       	st.w	--sp,r8
8000711a:	fa c8 fb b4 	sub	r8,sp,-1100
8000711e:	1a d8       	st.w	--sp,r8
80007120:	fa c8 f9 40 	sub	r8,sp,-1728
80007124:	fa c9 ff b4 	sub	r9,sp,-76
80007128:	04 9a       	mov	r10,r2
8000712a:	0c 9b       	mov	r11,r6
8000712c:	08 9c       	mov	r12,r4
8000712e:	fe b0 f5 53 	rcall	80005bd4 <get_arg>
80007132:	2f dd       	sub	sp,-12
80007134:	98 18       	ld.sh	r8,r12[0x2]
80007136:	c2 68       	rjmp	80007182 <_vfprintf_r+0x1272>
80007138:	ee ca ff ff 	sub	r10,r7,-1
8000713c:	10 37       	cp.w	r7,r8
8000713e:	c0 94       	brge	80007150 <_vfprintf_r+0x1240>
80007140:	fa c9 f9 44 	sub	r9,sp,-1724
80007144:	14 97       	mov	r7,r10
80007146:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000714a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000714e:	c1 a8       	rjmp	80007182 <_vfprintf_r+0x1272>
80007150:	41 09       	lddsp	r9,sp[0x40]
80007152:	59 f8       	cp.w	r8,31
80007154:	e0 89 00 13 	brgt	8000717a <_vfprintf_r+0x126a>
80007158:	f2 cb ff fc 	sub	r11,r9,-4
8000715c:	51 0b       	stdsp	sp[0x40],r11
8000715e:	72 09       	ld.w	r9,r9[0x0]
80007160:	fa c6 f9 44 	sub	r6,sp,-1724
80007164:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007168:	2f f8       	sub	r8,-1
8000716a:	f7 49 fd 88 	st.w	r11[-632],r9
8000716e:	fb 48 06 b4 	st.w	sp[1716],r8
80007172:	14 97       	mov	r7,r10
80007174:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007178:	c0 58       	rjmp	80007182 <_vfprintf_r+0x1272>
8000717a:	92 18       	ld.sh	r8,r9[0x2]
8000717c:	14 97       	mov	r7,r10
8000717e:	2f c9       	sub	r9,-4
80007180:	51 09       	stdsp	sp[0x40],r9
80007182:	5c 78       	castu.h	r8
80007184:	50 18       	stdsp	sp[0x4],r8
80007186:	c4 68       	rjmp	80007212 <_vfprintf_r+0x1302>
80007188:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000718c:	40 3c       	lddsp	r12,sp[0xc]
8000718e:	58 0c       	cp.w	r12,0
80007190:	c1 d0       	breq	800071ca <_vfprintf_r+0x12ba>
80007192:	10 36       	cp.w	r6,r8
80007194:	c0 64       	brge	800071a0 <_vfprintf_r+0x1290>
80007196:	fa cb f9 44 	sub	r11,sp,-1724
8000719a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000719e:	c1 f8       	rjmp	800071dc <_vfprintf_r+0x12cc>
800071a0:	fa c8 f9 50 	sub	r8,sp,-1712
800071a4:	1a d8       	st.w	--sp,r8
800071a6:	fa c8 fa b8 	sub	r8,sp,-1352
800071aa:	0c 9b       	mov	r11,r6
800071ac:	1a d8       	st.w	--sp,r8
800071ae:	fa c8 fb b4 	sub	r8,sp,-1100
800071b2:	04 9a       	mov	r10,r2
800071b4:	1a d8       	st.w	--sp,r8
800071b6:	08 9c       	mov	r12,r4
800071b8:	fa c8 f9 40 	sub	r8,sp,-1728
800071bc:	fa c9 ff b4 	sub	r9,sp,-76
800071c0:	fe b0 f5 0a 	rcall	80005bd4 <get_arg>
800071c4:	2f dd       	sub	sp,-12
800071c6:	78 0b       	ld.w	r11,r12[0x0]
800071c8:	c2 48       	rjmp	80007210 <_vfprintf_r+0x1300>
800071ca:	ee ca ff ff 	sub	r10,r7,-1
800071ce:	10 37       	cp.w	r7,r8
800071d0:	c0 94       	brge	800071e2 <_vfprintf_r+0x12d2>
800071d2:	fa c9 f9 44 	sub	r9,sp,-1724
800071d6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800071da:	14 97       	mov	r7,r10
800071dc:	ec fb fd 88 	ld.w	r11,r6[-632]
800071e0:	c1 88       	rjmp	80007210 <_vfprintf_r+0x1300>
800071e2:	41 09       	lddsp	r9,sp[0x40]
800071e4:	59 f8       	cp.w	r8,31
800071e6:	e0 89 00 11 	brgt	80007208 <_vfprintf_r+0x12f8>
800071ea:	f2 cb ff fc 	sub	r11,r9,-4
800071ee:	51 0b       	stdsp	sp[0x40],r11
800071f0:	fa c6 f9 44 	sub	r6,sp,-1724
800071f4:	72 0b       	ld.w	r11,r9[0x0]
800071f6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800071fa:	f3 4b fd 88 	st.w	r9[-632],r11
800071fe:	2f f8       	sub	r8,-1
80007200:	14 97       	mov	r7,r10
80007202:	fb 48 06 b4 	st.w	sp[1716],r8
80007206:	c0 58       	rjmp	80007210 <_vfprintf_r+0x1300>
80007208:	72 0b       	ld.w	r11,r9[0x0]
8000720a:	14 97       	mov	r7,r10
8000720c:	2f c9       	sub	r9,-4
8000720e:	51 09       	stdsp	sp[0x40],r9
80007210:	50 1b       	stdsp	sp[0x4],r11
80007212:	30 0e       	mov	lr,0
80007214:	30 18       	mov	r8,1
80007216:	50 0e       	stdsp	sp[0x0],lr
80007218:	c2 29       	rjmp	8000745c <_vfprintf_r+0x154c>
8000721a:	50 a7       	stdsp	sp[0x28],r7
8000721c:	50 80       	stdsp	sp[0x20],r0
8000721e:	0c 97       	mov	r7,r6
80007220:	04 94       	mov	r4,r2
80007222:	06 96       	mov	r6,r3
80007224:	02 92       	mov	r2,r1
80007226:	4d 3c       	lddpc	r12,80007370 <_vfprintf_r+0x1460>
80007228:	40 93       	lddsp	r3,sp[0x24]
8000722a:	10 90       	mov	r0,r8
8000722c:	40 41       	lddsp	r1,sp[0x10]
8000722e:	50 dc       	stdsp	sp[0x34],r12
80007230:	ed b5 00 05 	bld	r5,0x5
80007234:	c5 51       	brne	800072de <_vfprintf_r+0x13ce>
80007236:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000723a:	40 3b       	lddsp	r11,sp[0xc]
8000723c:	58 0b       	cp.w	r11,0
8000723e:	c2 20       	breq	80007282 <_vfprintf_r+0x1372>
80007240:	10 36       	cp.w	r6,r8
80007242:	c0 a4       	brge	80007256 <_vfprintf_r+0x1346>
80007244:	fa ca f9 44 	sub	r10,sp,-1724
80007248:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000724c:	ec e8 fd 88 	ld.d	r8,r6[-632]
80007250:	fa e9 00 00 	st.d	sp[0],r8
80007254:	cf 38       	rjmp	8000743a <_vfprintf_r+0x152a>
80007256:	fa c8 f9 50 	sub	r8,sp,-1712
8000725a:	1a d8       	st.w	--sp,r8
8000725c:	fa c8 fa b8 	sub	r8,sp,-1352
80007260:	04 9a       	mov	r10,r2
80007262:	1a d8       	st.w	--sp,r8
80007264:	0c 9b       	mov	r11,r6
80007266:	fa c8 fb b4 	sub	r8,sp,-1100
8000726a:	08 9c       	mov	r12,r4
8000726c:	1a d8       	st.w	--sp,r8
8000726e:	fa c8 f9 40 	sub	r8,sp,-1728
80007272:	fa c9 ff b4 	sub	r9,sp,-76
80007276:	fe b0 f4 af 	rcall	80005bd4 <get_arg>
8000727a:	2f dd       	sub	sp,-12
8000727c:	f8 ea 00 00 	ld.d	r10,r12[0]
80007280:	c0 c8       	rjmp	80007298 <_vfprintf_r+0x1388>
80007282:	ee ca ff ff 	sub	r10,r7,-1
80007286:	10 37       	cp.w	r7,r8
80007288:	c0 b4       	brge	8000729e <_vfprintf_r+0x138e>
8000728a:	fa c9 f9 44 	sub	r9,sp,-1724
8000728e:	14 97       	mov	r7,r10
80007290:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007294:	ec ea fd 88 	ld.d	r10,r6[-632]
80007298:	fa eb 00 00 	st.d	sp[0],r10
8000729c:	cc f8       	rjmp	8000743a <_vfprintf_r+0x152a>
8000729e:	41 09       	lddsp	r9,sp[0x40]
800072a0:	59 f8       	cp.w	r8,31
800072a2:	e0 89 00 16 	brgt	800072ce <_vfprintf_r+0x13be>
800072a6:	f2 e6 00 00 	ld.d	r6,r9[0]
800072aa:	f2 cb ff f8 	sub	r11,r9,-8
800072ae:	fa e7 00 00 	st.d	sp[0],r6
800072b2:	51 0b       	stdsp	sp[0x40],r11
800072b4:	fa c6 f9 44 	sub	r6,sp,-1724
800072b8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800072bc:	fa e6 00 00 	ld.d	r6,sp[0]
800072c0:	f2 e7 fd 88 	st.d	r9[-632],r6
800072c4:	2f f8       	sub	r8,-1
800072c6:	14 97       	mov	r7,r10
800072c8:	fb 48 06 b4 	st.w	sp[1716],r8
800072cc:	cb 78       	rjmp	8000743a <_vfprintf_r+0x152a>
800072ce:	f2 e6 00 00 	ld.d	r6,r9[0]
800072d2:	2f 89       	sub	r9,-8
800072d4:	fa e7 00 00 	st.d	sp[0],r6
800072d8:	51 09       	stdsp	sp[0x40],r9
800072da:	14 97       	mov	r7,r10
800072dc:	ca f8       	rjmp	8000743a <_vfprintf_r+0x152a>
800072de:	ed b5 00 04 	bld	r5,0x4
800072e2:	c1 71       	brne	80007310 <_vfprintf_r+0x1400>
800072e4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800072e8:	40 3e       	lddsp	lr,sp[0xc]
800072ea:	58 0e       	cp.w	lr,0
800072ec:	c0 80       	breq	800072fc <_vfprintf_r+0x13ec>
800072ee:	10 36       	cp.w	r6,r8
800072f0:	c6 a4       	brge	800073c4 <_vfprintf_r+0x14b4>
800072f2:	fa cc f9 44 	sub	r12,sp,-1724
800072f6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800072fa:	c8 38       	rjmp	80007400 <_vfprintf_r+0x14f0>
800072fc:	ee ca ff ff 	sub	r10,r7,-1
80007300:	10 37       	cp.w	r7,r8
80007302:	e0 84 00 82 	brge	80007406 <_vfprintf_r+0x14f6>
80007306:	fa cb f9 44 	sub	r11,sp,-1724
8000730a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000730e:	c7 88       	rjmp	800073fe <_vfprintf_r+0x14ee>
80007310:	ed b5 00 06 	bld	r5,0x6
80007314:	c4 c1       	brne	800073ac <_vfprintf_r+0x149c>
80007316:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000731a:	40 3c       	lddsp	r12,sp[0xc]
8000731c:	58 0c       	cp.w	r12,0
8000731e:	c1 d0       	breq	80007358 <_vfprintf_r+0x1448>
80007320:	10 36       	cp.w	r6,r8
80007322:	c0 64       	brge	8000732e <_vfprintf_r+0x141e>
80007324:	fa cb f9 44 	sub	r11,sp,-1724
80007328:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000732c:	c1 f8       	rjmp	8000736a <_vfprintf_r+0x145a>
8000732e:	fa c8 f9 50 	sub	r8,sp,-1712
80007332:	1a d8       	st.w	--sp,r8
80007334:	fa c8 fa b8 	sub	r8,sp,-1352
80007338:	1a d8       	st.w	--sp,r8
8000733a:	fa c8 fb b4 	sub	r8,sp,-1100
8000733e:	1a d8       	st.w	--sp,r8
80007340:	fa c8 f9 40 	sub	r8,sp,-1728
80007344:	fa c9 ff b4 	sub	r9,sp,-76
80007348:	04 9a       	mov	r10,r2
8000734a:	0c 9b       	mov	r11,r6
8000734c:	08 9c       	mov	r12,r4
8000734e:	fe b0 f4 43 	rcall	80005bd4 <get_arg>
80007352:	2f dd       	sub	sp,-12
80007354:	98 18       	ld.sh	r8,r12[0x2]
80007356:	c2 88       	rjmp	800073a6 <_vfprintf_r+0x1496>
80007358:	ee ca ff ff 	sub	r10,r7,-1
8000735c:	10 37       	cp.w	r7,r8
8000735e:	c0 b4       	brge	80007374 <_vfprintf_r+0x1464>
80007360:	fa c9 f9 44 	sub	r9,sp,-1724
80007364:	14 97       	mov	r7,r10
80007366:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000736a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000736e:	c1 c8       	rjmp	800073a6 <_vfprintf_r+0x1496>
80007370:	80 00       	ld.sh	r0,r0[0x0]
80007372:	c4 34       	brge	800073f8 <_vfprintf_r+0x14e8>
80007374:	41 09       	lddsp	r9,sp[0x40]
80007376:	59 f8       	cp.w	r8,31
80007378:	e0 89 00 13 	brgt	8000739e <_vfprintf_r+0x148e>
8000737c:	f2 cb ff fc 	sub	r11,r9,-4
80007380:	51 0b       	stdsp	sp[0x40],r11
80007382:	72 09       	ld.w	r9,r9[0x0]
80007384:	fa c6 f9 44 	sub	r6,sp,-1724
80007388:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000738c:	2f f8       	sub	r8,-1
8000738e:	f7 49 fd 88 	st.w	r11[-632],r9
80007392:	fb 48 06 b4 	st.w	sp[1716],r8
80007396:	14 97       	mov	r7,r10
80007398:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000739c:	c0 58       	rjmp	800073a6 <_vfprintf_r+0x1496>
8000739e:	92 18       	ld.sh	r8,r9[0x2]
800073a0:	14 97       	mov	r7,r10
800073a2:	2f c9       	sub	r9,-4
800073a4:	51 09       	stdsp	sp[0x40],r9
800073a6:	5c 78       	castu.h	r8
800073a8:	50 18       	stdsp	sp[0x4],r8
800073aa:	c4 68       	rjmp	80007436 <_vfprintf_r+0x1526>
800073ac:	fa f8 06 b4 	ld.w	r8,sp[1716]
800073b0:	40 3c       	lddsp	r12,sp[0xc]
800073b2:	58 0c       	cp.w	r12,0
800073b4:	c1 d0       	breq	800073ee <_vfprintf_r+0x14de>
800073b6:	10 36       	cp.w	r6,r8
800073b8:	c0 64       	brge	800073c4 <_vfprintf_r+0x14b4>
800073ba:	fa cb f9 44 	sub	r11,sp,-1724
800073be:	f6 06 00 36 	add	r6,r11,r6<<0x3
800073c2:	c1 f8       	rjmp	80007400 <_vfprintf_r+0x14f0>
800073c4:	fa c8 f9 50 	sub	r8,sp,-1712
800073c8:	1a d8       	st.w	--sp,r8
800073ca:	fa c8 fa b8 	sub	r8,sp,-1352
800073ce:	0c 9b       	mov	r11,r6
800073d0:	1a d8       	st.w	--sp,r8
800073d2:	fa c8 fb b4 	sub	r8,sp,-1100
800073d6:	04 9a       	mov	r10,r2
800073d8:	1a d8       	st.w	--sp,r8
800073da:	08 9c       	mov	r12,r4
800073dc:	fa c8 f9 40 	sub	r8,sp,-1728
800073e0:	fa c9 ff b4 	sub	r9,sp,-76
800073e4:	fe b0 f3 f8 	rcall	80005bd4 <get_arg>
800073e8:	2f dd       	sub	sp,-12
800073ea:	78 0b       	ld.w	r11,r12[0x0]
800073ec:	c2 48       	rjmp	80007434 <_vfprintf_r+0x1524>
800073ee:	ee ca ff ff 	sub	r10,r7,-1
800073f2:	10 37       	cp.w	r7,r8
800073f4:	c0 94       	brge	80007406 <_vfprintf_r+0x14f6>
800073f6:	fa c9 f9 44 	sub	r9,sp,-1724
800073fa:	f2 06 00 36 	add	r6,r9,r6<<0x3
800073fe:	14 97       	mov	r7,r10
80007400:	ec fb fd 88 	ld.w	r11,r6[-632]
80007404:	c1 88       	rjmp	80007434 <_vfprintf_r+0x1524>
80007406:	41 09       	lddsp	r9,sp[0x40]
80007408:	59 f8       	cp.w	r8,31
8000740a:	e0 89 00 11 	brgt	8000742c <_vfprintf_r+0x151c>
8000740e:	f2 cb ff fc 	sub	r11,r9,-4
80007412:	51 0b       	stdsp	sp[0x40],r11
80007414:	fa c6 f9 44 	sub	r6,sp,-1724
80007418:	72 0b       	ld.w	r11,r9[0x0]
8000741a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000741e:	f3 4b fd 88 	st.w	r9[-632],r11
80007422:	2f f8       	sub	r8,-1
80007424:	14 97       	mov	r7,r10
80007426:	fb 48 06 b4 	st.w	sp[1716],r8
8000742a:	c0 58       	rjmp	80007434 <_vfprintf_r+0x1524>
8000742c:	72 0b       	ld.w	r11,r9[0x0]
8000742e:	14 97       	mov	r7,r10
80007430:	2f c9       	sub	r9,-4
80007432:	51 09       	stdsp	sp[0x40],r9
80007434:	50 1b       	stdsp	sp[0x4],r11
80007436:	30 0e       	mov	lr,0
80007438:	50 0e       	stdsp	sp[0x0],lr
8000743a:	40 08       	lddsp	r8,sp[0x0]
8000743c:	40 1c       	lddsp	r12,sp[0x4]
8000743e:	18 48       	or	r8,r12
80007440:	5f 19       	srne	r9
80007442:	0a 98       	mov	r8,r5
80007444:	eb e9 00 09 	and	r9,r5,r9
80007448:	a1 b8       	sbr	r8,0x1
8000744a:	58 09       	cp.w	r9,0
8000744c:	c0 70       	breq	8000745a <_vfprintf_r+0x154a>
8000744e:	10 95       	mov	r5,r8
80007450:	fb 60 06 b9 	st.b	sp[1721],r0
80007454:	33 08       	mov	r8,48
80007456:	fb 68 06 b8 	st.b	sp[1720],r8
8000745a:	30 28       	mov	r8,2
8000745c:	30 09       	mov	r9,0
8000745e:	fb 69 06 bb 	st.b	sp[1723],r9
80007462:	0a 99       	mov	r9,r5
80007464:	a7 d9       	cbr	r9,0x7
80007466:	40 2b       	lddsp	r11,sp[0x8]
80007468:	40 16       	lddsp	r6,sp[0x4]
8000746a:	58 0b       	cp.w	r11,0
8000746c:	5f 1a       	srne	r10
8000746e:	f2 05 17 40 	movge	r5,r9
80007472:	fa c2 f9 78 	sub	r2,sp,-1672
80007476:	40 09       	lddsp	r9,sp[0x0]
80007478:	0c 49       	or	r9,r6
8000747a:	5f 19       	srne	r9
8000747c:	f5 e9 10 09 	or	r9,r10,r9
80007480:	c5 c0       	breq	80007538 <_vfprintf_r+0x1628>
80007482:	30 19       	mov	r9,1
80007484:	f2 08 18 00 	cp.b	r8,r9
80007488:	c0 60       	breq	80007494 <_vfprintf_r+0x1584>
8000748a:	30 29       	mov	r9,2
8000748c:	f2 08 18 00 	cp.b	r8,r9
80007490:	c0 41       	brne	80007498 <_vfprintf_r+0x1588>
80007492:	c3 c8       	rjmp	8000750a <_vfprintf_r+0x15fa>
80007494:	04 96       	mov	r6,r2
80007496:	c3 08       	rjmp	800074f6 <_vfprintf_r+0x15e6>
80007498:	04 96       	mov	r6,r2
8000749a:	fa e8 00 00 	ld.d	r8,sp[0]
8000749e:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800074a2:	2d 0a       	sub	r10,-48
800074a4:	0c fa       	st.b	--r6,r10
800074a6:	f0 0b 16 03 	lsr	r11,r8,0x3
800074aa:	f2 0c 16 03 	lsr	r12,r9,0x3
800074ae:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800074b2:	18 99       	mov	r9,r12
800074b4:	16 98       	mov	r8,r11
800074b6:	58 08       	cp.w	r8,0
800074b8:	5c 29       	cpc	r9
800074ba:	cf 21       	brne	8000749e <_vfprintf_r+0x158e>
800074bc:	fa e9 00 00 	st.d	sp[0],r8
800074c0:	ed b5 00 00 	bld	r5,0x0
800074c4:	c4 51       	brne	8000754e <_vfprintf_r+0x163e>
800074c6:	33 09       	mov	r9,48
800074c8:	f2 0a 18 00 	cp.b	r10,r9
800074cc:	c4 10       	breq	8000754e <_vfprintf_r+0x163e>
800074ce:	0c f9       	st.b	--r6,r9
800074d0:	c3 f8       	rjmp	8000754e <_vfprintf_r+0x163e>
800074d2:	fa ea 00 00 	ld.d	r10,sp[0]
800074d6:	30 a8       	mov	r8,10
800074d8:	30 09       	mov	r9,0
800074da:	e0 a0 1d c7 	rcall	8000b068 <__avr32_umod64>
800074de:	30 a8       	mov	r8,10
800074e0:	2d 0a       	sub	r10,-48
800074e2:	30 09       	mov	r9,0
800074e4:	ac 8a       	st.b	r6[0x0],r10
800074e6:	fa ea 00 00 	ld.d	r10,sp[0]
800074ea:	fe b0 f2 24 	rcall	80005932 <__avr32_udiv64>
800074ee:	16 99       	mov	r9,r11
800074f0:	14 98       	mov	r8,r10
800074f2:	fa e9 00 00 	st.d	sp[0],r8
800074f6:	20 16       	sub	r6,1
800074f8:	fa ea 00 00 	ld.d	r10,sp[0]
800074fc:	58 9a       	cp.w	r10,9
800074fe:	5c 2b       	cpc	r11
80007500:	fe 9b ff e9 	brhi	800074d2 <_vfprintf_r+0x15c2>
80007504:	1b f8       	ld.ub	r8,sp[0x7]
80007506:	2d 08       	sub	r8,-48
80007508:	c2 08       	rjmp	80007548 <_vfprintf_r+0x1638>
8000750a:	04 96       	mov	r6,r2
8000750c:	fa e8 00 00 	ld.d	r8,sp[0]
80007510:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80007514:	40 de       	lddsp	lr,sp[0x34]
80007516:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000751a:	0c fa       	st.b	--r6,r10
8000751c:	f2 0b 16 04 	lsr	r11,r9,0x4
80007520:	f0 0a 16 04 	lsr	r10,r8,0x4
80007524:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80007528:	16 99       	mov	r9,r11
8000752a:	14 98       	mov	r8,r10
8000752c:	58 08       	cp.w	r8,0
8000752e:	5c 29       	cpc	r9
80007530:	cf 01       	brne	80007510 <_vfprintf_r+0x1600>
80007532:	fa e9 00 00 	st.d	sp[0],r8
80007536:	c0 c8       	rjmp	8000754e <_vfprintf_r+0x163e>
80007538:	58 08       	cp.w	r8,0
8000753a:	c0 91       	brne	8000754c <_vfprintf_r+0x163c>
8000753c:	ed b5 00 00 	bld	r5,0x0
80007540:	c0 61       	brne	8000754c <_vfprintf_r+0x163c>
80007542:	fa c6 f9 79 	sub	r6,sp,-1671
80007546:	33 08       	mov	r8,48
80007548:	ac 88       	st.b	r6[0x0],r8
8000754a:	c0 28       	rjmp	8000754e <_vfprintf_r+0x163e>
8000754c:	04 96       	mov	r6,r2
8000754e:	0c 12       	sub	r2,r6
80007550:	c1 c8       	rjmp	80007588 <_vfprintf_r+0x1678>
80007552:	50 a7       	stdsp	sp[0x28],r7
80007554:	50 80       	stdsp	sp[0x20],r0
80007556:	40 93       	lddsp	r3,sp[0x24]
80007558:	0c 97       	mov	r7,r6
8000755a:	10 90       	mov	r0,r8
8000755c:	04 94       	mov	r4,r2
8000755e:	40 41       	lddsp	r1,sp[0x10]
80007560:	58 08       	cp.w	r8,0
80007562:	e0 80 04 51 	breq	80007e04 <_vfprintf_r+0x1ef4>
80007566:	fb 68 06 60 	st.b	sp[1632],r8
8000756a:	30 0c       	mov	r12,0
8000756c:	30 08       	mov	r8,0
8000756e:	30 12       	mov	r2,1
80007570:	fb 68 06 bb 	st.b	sp[1723],r8
80007574:	50 2c       	stdsp	sp[0x8],r12
80007576:	fa c6 f9 a0 	sub	r6,sp,-1632
8000757a:	c0 78       	rjmp	80007588 <_vfprintf_r+0x1678>
8000757c:	30 0b       	mov	r11,0
8000757e:	50 2b       	stdsp	sp[0x8],r11
80007580:	c0 48       	rjmp	80007588 <_vfprintf_r+0x1678>
80007582:	40 22       	lddsp	r2,sp[0x8]
80007584:	30 0a       	mov	r10,0
80007586:	50 2a       	stdsp	sp[0x8],r10
80007588:	40 29       	lddsp	r9,sp[0x8]
8000758a:	e4 09 0c 49 	max	r9,r2,r9
8000758e:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80007592:	50 39       	stdsp	sp[0xc],r9
80007594:	0a 9e       	mov	lr,r5
80007596:	30 09       	mov	r9,0
80007598:	e2 1e 00 02 	andl	lr,0x2,COH
8000759c:	f2 08 18 00 	cp.b	r8,r9
800075a0:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800075a4:	f7 b8 01 ff 	subne	r8,-1
800075a8:	fb f8 1a 03 	st.wne	sp[0xc],r8
800075ac:	0a 9b       	mov	r11,r5
800075ae:	58 0e       	cp.w	lr,0
800075b0:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800075b4:	f7 bc 01 fe 	subne	r12,-2
800075b8:	fb fc 1a 03 	st.wne	sp[0xc],r12
800075bc:	e2 1b 00 84 	andl	r11,0x84,COH
800075c0:	50 fe       	stdsp	sp[0x3c],lr
800075c2:	50 9b       	stdsp	sp[0x24],r11
800075c4:	c4 51       	brne	8000764e <_vfprintf_r+0x173e>
800075c6:	40 8a       	lddsp	r10,sp[0x20]
800075c8:	40 39       	lddsp	r9,sp[0xc]
800075ca:	12 1a       	sub	r10,r9
800075cc:	50 4a       	stdsp	sp[0x10],r10
800075ce:	58 0a       	cp.w	r10,0
800075d0:	e0 89 00 1f 	brgt	8000760e <_vfprintf_r+0x16fe>
800075d4:	c3 d8       	rjmp	8000764e <_vfprintf_r+0x173e>
800075d6:	2f 09       	sub	r9,-16
800075d8:	2f f8       	sub	r8,-1
800075da:	4c ee       	lddpc	lr,80007710 <_vfprintf_r+0x1800>
800075dc:	31 0c       	mov	r12,16
800075de:	fb 49 06 90 	st.w	sp[1680],r9
800075e2:	87 0e       	st.w	r3[0x0],lr
800075e4:	87 1c       	st.w	r3[0x4],r12
800075e6:	fb 48 06 8c 	st.w	sp[1676],r8
800075ea:	58 78       	cp.w	r8,7
800075ec:	e0 89 00 04 	brgt	800075f4 <_vfprintf_r+0x16e4>
800075f0:	2f 83       	sub	r3,-8
800075f2:	c0 b8       	rjmp	80007608 <_vfprintf_r+0x16f8>
800075f4:	fa ca f9 78 	sub	r10,sp,-1672
800075f8:	02 9b       	mov	r11,r1
800075fa:	08 9c       	mov	r12,r4
800075fc:	fe b0 f4 7c 	rcall	80005ef4 <__sprint_r>
80007600:	e0 81 04 13 	brne	80007e26 <_vfprintf_r+0x1f16>
80007604:	fa c3 f9 e0 	sub	r3,sp,-1568
80007608:	40 4b       	lddsp	r11,sp[0x10]
8000760a:	21 0b       	sub	r11,16
8000760c:	50 4b       	stdsp	sp[0x10],r11
8000760e:	fa f9 06 90 	ld.w	r9,sp[1680]
80007612:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007616:	4b fa       	lddpc	r10,80007710 <_vfprintf_r+0x1800>
80007618:	40 4e       	lddsp	lr,sp[0x10]
8000761a:	59 0e       	cp.w	lr,16
8000761c:	fe 99 ff dd 	brgt	800075d6 <_vfprintf_r+0x16c6>
80007620:	1c 09       	add	r9,lr
80007622:	2f f8       	sub	r8,-1
80007624:	87 0a       	st.w	r3[0x0],r10
80007626:	fb 49 06 90 	st.w	sp[1680],r9
8000762a:	87 1e       	st.w	r3[0x4],lr
8000762c:	fb 48 06 8c 	st.w	sp[1676],r8
80007630:	58 78       	cp.w	r8,7
80007632:	e0 89 00 04 	brgt	8000763a <_vfprintf_r+0x172a>
80007636:	2f 83       	sub	r3,-8
80007638:	c0 b8       	rjmp	8000764e <_vfprintf_r+0x173e>
8000763a:	fa ca f9 78 	sub	r10,sp,-1672
8000763e:	02 9b       	mov	r11,r1
80007640:	08 9c       	mov	r12,r4
80007642:	fe b0 f4 59 	rcall	80005ef4 <__sprint_r>
80007646:	e0 81 03 f0 	brne	80007e26 <_vfprintf_r+0x1f16>
8000764a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000764e:	30 09       	mov	r9,0
80007650:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80007654:	f2 08 18 00 	cp.b	r8,r9
80007658:	c1 f0       	breq	80007696 <_vfprintf_r+0x1786>
8000765a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000765e:	fa c9 f9 45 	sub	r9,sp,-1723
80007662:	2f f8       	sub	r8,-1
80007664:	87 09       	st.w	r3[0x0],r9
80007666:	fb 48 06 90 	st.w	sp[1680],r8
8000766a:	30 19       	mov	r9,1
8000766c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007670:	87 19       	st.w	r3[0x4],r9
80007672:	2f f8       	sub	r8,-1
80007674:	fb 48 06 8c 	st.w	sp[1676],r8
80007678:	58 78       	cp.w	r8,7
8000767a:	e0 89 00 04 	brgt	80007682 <_vfprintf_r+0x1772>
8000767e:	2f 83       	sub	r3,-8
80007680:	c0 b8       	rjmp	80007696 <_vfprintf_r+0x1786>
80007682:	fa ca f9 78 	sub	r10,sp,-1672
80007686:	02 9b       	mov	r11,r1
80007688:	08 9c       	mov	r12,r4
8000768a:	fe b0 f4 35 	rcall	80005ef4 <__sprint_r>
8000768e:	e0 81 03 cc 	brne	80007e26 <_vfprintf_r+0x1f16>
80007692:	fa c3 f9 e0 	sub	r3,sp,-1568
80007696:	40 fc       	lddsp	r12,sp[0x3c]
80007698:	58 0c       	cp.w	r12,0
8000769a:	c1 f0       	breq	800076d8 <_vfprintf_r+0x17c8>
8000769c:	fa f8 06 90 	ld.w	r8,sp[1680]
800076a0:	fa c9 f9 48 	sub	r9,sp,-1720
800076a4:	2f e8       	sub	r8,-2
800076a6:	87 09       	st.w	r3[0x0],r9
800076a8:	fb 48 06 90 	st.w	sp[1680],r8
800076ac:	30 29       	mov	r9,2
800076ae:	fa f8 06 8c 	ld.w	r8,sp[1676]
800076b2:	87 19       	st.w	r3[0x4],r9
800076b4:	2f f8       	sub	r8,-1
800076b6:	fb 48 06 8c 	st.w	sp[1676],r8
800076ba:	58 78       	cp.w	r8,7
800076bc:	e0 89 00 04 	brgt	800076c4 <_vfprintf_r+0x17b4>
800076c0:	2f 83       	sub	r3,-8
800076c2:	c0 b8       	rjmp	800076d8 <_vfprintf_r+0x17c8>
800076c4:	fa ca f9 78 	sub	r10,sp,-1672
800076c8:	02 9b       	mov	r11,r1
800076ca:	08 9c       	mov	r12,r4
800076cc:	fe b0 f4 14 	rcall	80005ef4 <__sprint_r>
800076d0:	e0 81 03 ab 	brne	80007e26 <_vfprintf_r+0x1f16>
800076d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800076d8:	40 9b       	lddsp	r11,sp[0x24]
800076da:	e0 4b 00 80 	cp.w	r11,128
800076de:	c4 a1       	brne	80007772 <_vfprintf_r+0x1862>
800076e0:	40 8a       	lddsp	r10,sp[0x20]
800076e2:	40 39       	lddsp	r9,sp[0xc]
800076e4:	12 1a       	sub	r10,r9
800076e6:	50 4a       	stdsp	sp[0x10],r10
800076e8:	58 0a       	cp.w	r10,0
800076ea:	e0 89 00 24 	brgt	80007732 <_vfprintf_r+0x1822>
800076ee:	c4 28       	rjmp	80007772 <_vfprintf_r+0x1862>
800076f0:	2f 09       	sub	r9,-16
800076f2:	2f f8       	sub	r8,-1
800076f4:	48 8e       	lddpc	lr,80007714 <_vfprintf_r+0x1804>
800076f6:	31 0c       	mov	r12,16
800076f8:	fb 49 06 90 	st.w	sp[1680],r9
800076fc:	87 0e       	st.w	r3[0x0],lr
800076fe:	87 1c       	st.w	r3[0x4],r12
80007700:	fb 48 06 8c 	st.w	sp[1676],r8
80007704:	58 78       	cp.w	r8,7
80007706:	e0 89 00 09 	brgt	80007718 <_vfprintf_r+0x1808>
8000770a:	2f 83       	sub	r3,-8
8000770c:	c1 08       	rjmp	8000772c <_vfprintf_r+0x181c>
8000770e:	d7 03       	nop
80007710:	80 00       	ld.sh	r0,r0[0x0]
80007712:	c4 4c       	rcall	8000779a <_vfprintf_r+0x188a>
80007714:	80 00       	ld.sh	r0,r0[0x0]
80007716:	c4 5c       	rcall	800077a0 <_vfprintf_r+0x1890>
80007718:	fa ca f9 78 	sub	r10,sp,-1672
8000771c:	02 9b       	mov	r11,r1
8000771e:	08 9c       	mov	r12,r4
80007720:	fe b0 f3 ea 	rcall	80005ef4 <__sprint_r>
80007724:	e0 81 03 81 	brne	80007e26 <_vfprintf_r+0x1f16>
80007728:	fa c3 f9 e0 	sub	r3,sp,-1568
8000772c:	40 4b       	lddsp	r11,sp[0x10]
8000772e:	21 0b       	sub	r11,16
80007730:	50 4b       	stdsp	sp[0x10],r11
80007732:	fa f9 06 90 	ld.w	r9,sp[1680]
80007736:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000773a:	4c 6a       	lddpc	r10,80007850 <_vfprintf_r+0x1940>
8000773c:	40 4e       	lddsp	lr,sp[0x10]
8000773e:	59 0e       	cp.w	lr,16
80007740:	fe 99 ff d8 	brgt	800076f0 <_vfprintf_r+0x17e0>
80007744:	1c 09       	add	r9,lr
80007746:	2f f8       	sub	r8,-1
80007748:	87 0a       	st.w	r3[0x0],r10
8000774a:	fb 49 06 90 	st.w	sp[1680],r9
8000774e:	87 1e       	st.w	r3[0x4],lr
80007750:	fb 48 06 8c 	st.w	sp[1676],r8
80007754:	58 78       	cp.w	r8,7
80007756:	e0 89 00 04 	brgt	8000775e <_vfprintf_r+0x184e>
8000775a:	2f 83       	sub	r3,-8
8000775c:	c0 b8       	rjmp	80007772 <_vfprintf_r+0x1862>
8000775e:	fa ca f9 78 	sub	r10,sp,-1672
80007762:	02 9b       	mov	r11,r1
80007764:	08 9c       	mov	r12,r4
80007766:	fe b0 f3 c7 	rcall	80005ef4 <__sprint_r>
8000776a:	e0 81 03 5e 	brne	80007e26 <_vfprintf_r+0x1f16>
8000776e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007772:	40 2c       	lddsp	r12,sp[0x8]
80007774:	04 1c       	sub	r12,r2
80007776:	50 2c       	stdsp	sp[0x8],r12
80007778:	58 0c       	cp.w	r12,0
8000777a:	e0 89 00 1f 	brgt	800077b8 <_vfprintf_r+0x18a8>
8000777e:	c3 d8       	rjmp	800077f8 <_vfprintf_r+0x18e8>
80007780:	2f 09       	sub	r9,-16
80007782:	2f f8       	sub	r8,-1
80007784:	4b 3b       	lddpc	r11,80007850 <_vfprintf_r+0x1940>
80007786:	31 0a       	mov	r10,16
80007788:	fb 49 06 90 	st.w	sp[1680],r9
8000778c:	87 0b       	st.w	r3[0x0],r11
8000778e:	87 1a       	st.w	r3[0x4],r10
80007790:	fb 48 06 8c 	st.w	sp[1676],r8
80007794:	58 78       	cp.w	r8,7
80007796:	e0 89 00 04 	brgt	8000779e <_vfprintf_r+0x188e>
8000779a:	2f 83       	sub	r3,-8
8000779c:	c0 b8       	rjmp	800077b2 <_vfprintf_r+0x18a2>
8000779e:	fa ca f9 78 	sub	r10,sp,-1672
800077a2:	02 9b       	mov	r11,r1
800077a4:	08 9c       	mov	r12,r4
800077a6:	fe b0 f3 a7 	rcall	80005ef4 <__sprint_r>
800077aa:	e0 81 03 3e 	brne	80007e26 <_vfprintf_r+0x1f16>
800077ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800077b2:	40 29       	lddsp	r9,sp[0x8]
800077b4:	21 09       	sub	r9,16
800077b6:	50 29       	stdsp	sp[0x8],r9
800077b8:	fa f9 06 90 	ld.w	r9,sp[1680]
800077bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800077c0:	4a 4a       	lddpc	r10,80007850 <_vfprintf_r+0x1940>
800077c2:	40 2e       	lddsp	lr,sp[0x8]
800077c4:	59 0e       	cp.w	lr,16
800077c6:	fe 99 ff dd 	brgt	80007780 <_vfprintf_r+0x1870>
800077ca:	1c 09       	add	r9,lr
800077cc:	2f f8       	sub	r8,-1
800077ce:	87 0a       	st.w	r3[0x0],r10
800077d0:	fb 49 06 90 	st.w	sp[1680],r9
800077d4:	87 1e       	st.w	r3[0x4],lr
800077d6:	fb 48 06 8c 	st.w	sp[1676],r8
800077da:	58 78       	cp.w	r8,7
800077dc:	e0 89 00 04 	brgt	800077e4 <_vfprintf_r+0x18d4>
800077e0:	2f 83       	sub	r3,-8
800077e2:	c0 b8       	rjmp	800077f8 <_vfprintf_r+0x18e8>
800077e4:	fa ca f9 78 	sub	r10,sp,-1672
800077e8:	02 9b       	mov	r11,r1
800077ea:	08 9c       	mov	r12,r4
800077ec:	fe b0 f3 84 	rcall	80005ef4 <__sprint_r>
800077f0:	e0 81 03 1b 	brne	80007e26 <_vfprintf_r+0x1f16>
800077f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800077f8:	ed b5 00 08 	bld	r5,0x8
800077fc:	c0 b0       	breq	80007812 <_vfprintf_r+0x1902>
800077fe:	fa f8 06 90 	ld.w	r8,sp[1680]
80007802:	87 12       	st.w	r3[0x4],r2
80007804:	87 06       	st.w	r3[0x0],r6
80007806:	f0 02 00 02 	add	r2,r8,r2
8000780a:	fb 42 06 90 	st.w	sp[1680],r2
8000780e:	e0 8f 01 d5 	bral	80007bb8 <_vfprintf_r+0x1ca8>
80007812:	e0 40 00 65 	cp.w	r0,101
80007816:	e0 8a 01 d7 	brle	80007bc4 <_vfprintf_r+0x1cb4>
8000781a:	30 08       	mov	r8,0
8000781c:	30 09       	mov	r9,0
8000781e:	40 5b       	lddsp	r11,sp[0x14]
80007820:	40 7a       	lddsp	r10,sp[0x1c]
80007822:	e0 a0 1a 1c 	rcall	8000ac5a <__avr32_f64_cmp_eq>
80007826:	c7 a0       	breq	8000791a <_vfprintf_r+0x1a0a>
80007828:	fa f8 06 90 	ld.w	r8,sp[1680]
8000782c:	48 a9       	lddpc	r9,80007854 <_vfprintf_r+0x1944>
8000782e:	2f f8       	sub	r8,-1
80007830:	87 09       	st.w	r3[0x0],r9
80007832:	fb 48 06 90 	st.w	sp[1680],r8
80007836:	30 19       	mov	r9,1
80007838:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000783c:	87 19       	st.w	r3[0x4],r9
8000783e:	2f f8       	sub	r8,-1
80007840:	fb 48 06 8c 	st.w	sp[1676],r8
80007844:	58 78       	cp.w	r8,7
80007846:	e0 89 00 09 	brgt	80007858 <_vfprintf_r+0x1948>
8000784a:	2f 83       	sub	r3,-8
8000784c:	c1 08       	rjmp	8000786c <_vfprintf_r+0x195c>
8000784e:	d7 03       	nop
80007850:	80 00       	ld.sh	r0,r0[0x0]
80007852:	c4 5c       	rcall	800078dc <_vfprintf_r+0x19cc>
80007854:	80 00       	ld.sh	r0,r0[0x0]
80007856:	c4 48       	rjmp	800078de <_vfprintf_r+0x19ce>
80007858:	fa ca f9 78 	sub	r10,sp,-1672
8000785c:	02 9b       	mov	r11,r1
8000785e:	08 9c       	mov	r12,r4
80007860:	fe b0 f3 4a 	rcall	80005ef4 <__sprint_r>
80007864:	e0 81 02 e1 	brne	80007e26 <_vfprintf_r+0x1f16>
80007868:	fa c3 f9 e0 	sub	r3,sp,-1568
8000786c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007870:	40 6c       	lddsp	r12,sp[0x18]
80007872:	18 38       	cp.w	r8,r12
80007874:	c0 55       	brlt	8000787e <_vfprintf_r+0x196e>
80007876:	ed b5 00 00 	bld	r5,0x0
8000787a:	e0 81 02 69 	brne	80007d4c <_vfprintf_r+0x1e3c>
8000787e:	fa f8 06 90 	ld.w	r8,sp[1680]
80007882:	2f f8       	sub	r8,-1
80007884:	40 cb       	lddsp	r11,sp[0x30]
80007886:	fb 48 06 90 	st.w	sp[1680],r8
8000788a:	30 19       	mov	r9,1
8000788c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007890:	87 0b       	st.w	r3[0x0],r11
80007892:	2f f8       	sub	r8,-1
80007894:	87 19       	st.w	r3[0x4],r9
80007896:	fb 48 06 8c 	st.w	sp[1676],r8
8000789a:	58 78       	cp.w	r8,7
8000789c:	e0 89 00 04 	brgt	800078a4 <_vfprintf_r+0x1994>
800078a0:	2f 83       	sub	r3,-8
800078a2:	c0 b8       	rjmp	800078b8 <_vfprintf_r+0x19a8>
800078a4:	fa ca f9 78 	sub	r10,sp,-1672
800078a8:	02 9b       	mov	r11,r1
800078aa:	08 9c       	mov	r12,r4
800078ac:	fe b0 f3 24 	rcall	80005ef4 <__sprint_r>
800078b0:	e0 81 02 bb 	brne	80007e26 <_vfprintf_r+0x1f16>
800078b4:	fa c3 f9 e0 	sub	r3,sp,-1568
800078b8:	40 66       	lddsp	r6,sp[0x18]
800078ba:	20 16       	sub	r6,1
800078bc:	58 06       	cp.w	r6,0
800078be:	e0 89 00 1d 	brgt	800078f8 <_vfprintf_r+0x19e8>
800078c2:	e0 8f 02 45 	bral	80007d4c <_vfprintf_r+0x1e3c>
800078c6:	2f 09       	sub	r9,-16
800078c8:	2f f8       	sub	r8,-1
800078ca:	fb 49 06 90 	st.w	sp[1680],r9
800078ce:	87 02       	st.w	r3[0x0],r2
800078d0:	87 10       	st.w	r3[0x4],r0
800078d2:	fb 48 06 8c 	st.w	sp[1676],r8
800078d6:	58 78       	cp.w	r8,7
800078d8:	e0 89 00 04 	brgt	800078e0 <_vfprintf_r+0x19d0>
800078dc:	2f 83       	sub	r3,-8
800078de:	c0 b8       	rjmp	800078f4 <_vfprintf_r+0x19e4>
800078e0:	fa ca f9 78 	sub	r10,sp,-1672
800078e4:	02 9b       	mov	r11,r1
800078e6:	08 9c       	mov	r12,r4
800078e8:	fe b0 f3 06 	rcall	80005ef4 <__sprint_r>
800078ec:	e0 81 02 9d 	brne	80007e26 <_vfprintf_r+0x1f16>
800078f0:	fa c3 f9 e0 	sub	r3,sp,-1568
800078f4:	21 06       	sub	r6,16
800078f6:	c0 38       	rjmp	800078fc <_vfprintf_r+0x19ec>
800078f8:	4d 22       	lddpc	r2,80007a40 <_vfprintf_r+0x1b30>
800078fa:	31 00       	mov	r0,16
800078fc:	fa f9 06 90 	ld.w	r9,sp[1680]
80007900:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007904:	4c fa       	lddpc	r10,80007a40 <_vfprintf_r+0x1b30>
80007906:	59 06       	cp.w	r6,16
80007908:	fe 99 ff df 	brgt	800078c6 <_vfprintf_r+0x19b6>
8000790c:	0c 09       	add	r9,r6
8000790e:	87 0a       	st.w	r3[0x0],r10
80007910:	fb 49 06 90 	st.w	sp[1680],r9
80007914:	2f f8       	sub	r8,-1
80007916:	87 16       	st.w	r3[0x4],r6
80007918:	c5 39       	rjmp	80007bbe <_vfprintf_r+0x1cae>
8000791a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000791e:	58 0a       	cp.w	r10,0
80007920:	e0 89 00 94 	brgt	80007a48 <_vfprintf_r+0x1b38>
80007924:	fa f8 06 90 	ld.w	r8,sp[1680]
80007928:	4c 79       	lddpc	r9,80007a44 <_vfprintf_r+0x1b34>
8000792a:	2f f8       	sub	r8,-1
8000792c:	87 09       	st.w	r3[0x0],r9
8000792e:	fb 48 06 90 	st.w	sp[1680],r8
80007932:	30 19       	mov	r9,1
80007934:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007938:	87 19       	st.w	r3[0x4],r9
8000793a:	2f f8       	sub	r8,-1
8000793c:	fb 48 06 8c 	st.w	sp[1676],r8
80007940:	58 78       	cp.w	r8,7
80007942:	e0 89 00 04 	brgt	8000794a <_vfprintf_r+0x1a3a>
80007946:	2f 83       	sub	r3,-8
80007948:	c0 b8       	rjmp	8000795e <_vfprintf_r+0x1a4e>
8000794a:	fa ca f9 78 	sub	r10,sp,-1672
8000794e:	02 9b       	mov	r11,r1
80007950:	08 9c       	mov	r12,r4
80007952:	fe b0 f2 d1 	rcall	80005ef4 <__sprint_r>
80007956:	e0 81 02 68 	brne	80007e26 <_vfprintf_r+0x1f16>
8000795a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000795e:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007962:	58 08       	cp.w	r8,0
80007964:	c0 81       	brne	80007974 <_vfprintf_r+0x1a64>
80007966:	40 6a       	lddsp	r10,sp[0x18]
80007968:	58 0a       	cp.w	r10,0
8000796a:	c0 51       	brne	80007974 <_vfprintf_r+0x1a64>
8000796c:	ed b5 00 00 	bld	r5,0x0
80007970:	e0 81 01 ee 	brne	80007d4c <_vfprintf_r+0x1e3c>
80007974:	40 c9       	lddsp	r9,sp[0x30]
80007976:	fa f8 06 90 	ld.w	r8,sp[1680]
8000797a:	2f f8       	sub	r8,-1
8000797c:	87 09       	st.w	r3[0x0],r9
8000797e:	fb 48 06 90 	st.w	sp[1680],r8
80007982:	30 19       	mov	r9,1
80007984:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007988:	87 19       	st.w	r3[0x4],r9
8000798a:	2f f8       	sub	r8,-1
8000798c:	fb 48 06 8c 	st.w	sp[1676],r8
80007990:	58 78       	cp.w	r8,7
80007992:	e0 89 00 04 	brgt	8000799a <_vfprintf_r+0x1a8a>
80007996:	2f 83       	sub	r3,-8
80007998:	c0 b8       	rjmp	800079ae <_vfprintf_r+0x1a9e>
8000799a:	fa ca f9 78 	sub	r10,sp,-1672
8000799e:	02 9b       	mov	r11,r1
800079a0:	08 9c       	mov	r12,r4
800079a2:	fe b0 f2 a9 	rcall	80005ef4 <__sprint_r>
800079a6:	e0 81 02 40 	brne	80007e26 <_vfprintf_r+0x1f16>
800079aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800079ae:	fa f2 06 ac 	ld.w	r2,sp[1708]
800079b2:	5c 32       	neg	r2
800079b4:	58 02       	cp.w	r2,0
800079b6:	e0 89 00 1d 	brgt	800079f0 <_vfprintf_r+0x1ae0>
800079ba:	c3 b8       	rjmp	80007a30 <_vfprintf_r+0x1b20>
800079bc:	2f 09       	sub	r9,-16
800079be:	2f f8       	sub	r8,-1
800079c0:	31 0e       	mov	lr,16
800079c2:	fb 49 06 90 	st.w	sp[1680],r9
800079c6:	87 00       	st.w	r3[0x0],r0
800079c8:	87 1e       	st.w	r3[0x4],lr
800079ca:	fb 48 06 8c 	st.w	sp[1676],r8
800079ce:	58 78       	cp.w	r8,7
800079d0:	e0 89 00 04 	brgt	800079d8 <_vfprintf_r+0x1ac8>
800079d4:	2f 83       	sub	r3,-8
800079d6:	c0 b8       	rjmp	800079ec <_vfprintf_r+0x1adc>
800079d8:	fa ca f9 78 	sub	r10,sp,-1672
800079dc:	02 9b       	mov	r11,r1
800079de:	08 9c       	mov	r12,r4
800079e0:	fe b0 f2 8a 	rcall	80005ef4 <__sprint_r>
800079e4:	e0 81 02 21 	brne	80007e26 <_vfprintf_r+0x1f16>
800079e8:	fa c3 f9 e0 	sub	r3,sp,-1568
800079ec:	21 02       	sub	r2,16
800079ee:	c0 28       	rjmp	800079f2 <_vfprintf_r+0x1ae2>
800079f0:	49 40       	lddpc	r0,80007a40 <_vfprintf_r+0x1b30>
800079f2:	fa f9 06 90 	ld.w	r9,sp[1680]
800079f6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800079fa:	49 2a       	lddpc	r10,80007a40 <_vfprintf_r+0x1b30>
800079fc:	59 02       	cp.w	r2,16
800079fe:	fe 99 ff df 	brgt	800079bc <_vfprintf_r+0x1aac>
80007a02:	04 09       	add	r9,r2
80007a04:	2f f8       	sub	r8,-1
80007a06:	87 0a       	st.w	r3[0x0],r10
80007a08:	fb 49 06 90 	st.w	sp[1680],r9
80007a0c:	87 12       	st.w	r3[0x4],r2
80007a0e:	fb 48 06 8c 	st.w	sp[1676],r8
80007a12:	58 78       	cp.w	r8,7
80007a14:	e0 89 00 04 	brgt	80007a1c <_vfprintf_r+0x1b0c>
80007a18:	2f 83       	sub	r3,-8
80007a1a:	c0 b8       	rjmp	80007a30 <_vfprintf_r+0x1b20>
80007a1c:	fa ca f9 78 	sub	r10,sp,-1672
80007a20:	02 9b       	mov	r11,r1
80007a22:	08 9c       	mov	r12,r4
80007a24:	fe b0 f2 68 	rcall	80005ef4 <__sprint_r>
80007a28:	e0 81 01 ff 	brne	80007e26 <_vfprintf_r+0x1f16>
80007a2c:	fa c3 f9 e0 	sub	r3,sp,-1568
80007a30:	40 6c       	lddsp	r12,sp[0x18]
80007a32:	fa f8 06 90 	ld.w	r8,sp[1680]
80007a36:	87 06       	st.w	r3[0x0],r6
80007a38:	87 1c       	st.w	r3[0x4],r12
80007a3a:	18 08       	add	r8,r12
80007a3c:	cb c8       	rjmp	80007bb4 <_vfprintf_r+0x1ca4>
80007a3e:	d7 03       	nop
80007a40:	80 00       	ld.sh	r0,r0[0x0]
80007a42:	c4 5c       	rcall	80007acc <_vfprintf_r+0x1bbc>
80007a44:	80 00       	ld.sh	r0,r0[0x0]
80007a46:	c4 48       	rjmp	80007ace <_vfprintf_r+0x1bbe>
80007a48:	fa f9 06 90 	ld.w	r9,sp[1680]
80007a4c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007a50:	40 6b       	lddsp	r11,sp[0x18]
80007a52:	16 3a       	cp.w	r10,r11
80007a54:	c6 d5       	brlt	80007b2e <_vfprintf_r+0x1c1e>
80007a56:	16 09       	add	r9,r11
80007a58:	2f f8       	sub	r8,-1
80007a5a:	87 06       	st.w	r3[0x0],r6
80007a5c:	fb 49 06 90 	st.w	sp[1680],r9
80007a60:	87 1b       	st.w	r3[0x4],r11
80007a62:	fb 48 06 8c 	st.w	sp[1676],r8
80007a66:	58 78       	cp.w	r8,7
80007a68:	e0 89 00 04 	brgt	80007a70 <_vfprintf_r+0x1b60>
80007a6c:	2f 83       	sub	r3,-8
80007a6e:	c0 b8       	rjmp	80007a84 <_vfprintf_r+0x1b74>
80007a70:	fa ca f9 78 	sub	r10,sp,-1672
80007a74:	02 9b       	mov	r11,r1
80007a76:	08 9c       	mov	r12,r4
80007a78:	fe b0 f2 3e 	rcall	80005ef4 <__sprint_r>
80007a7c:	e0 81 01 d5 	brne	80007e26 <_vfprintf_r+0x1f16>
80007a80:	fa c3 f9 e0 	sub	r3,sp,-1568
80007a84:	fa f6 06 ac 	ld.w	r6,sp[1708]
80007a88:	40 6a       	lddsp	r10,sp[0x18]
80007a8a:	14 16       	sub	r6,r10
80007a8c:	58 06       	cp.w	r6,0
80007a8e:	e0 89 00 1c 	brgt	80007ac6 <_vfprintf_r+0x1bb6>
80007a92:	c3 b8       	rjmp	80007b08 <_vfprintf_r+0x1bf8>
80007a94:	2f 09       	sub	r9,-16
80007a96:	2f f8       	sub	r8,-1
80007a98:	fb 49 06 90 	st.w	sp[1680],r9
80007a9c:	87 02       	st.w	r3[0x0],r2
80007a9e:	87 10       	st.w	r3[0x4],r0
80007aa0:	fb 48 06 8c 	st.w	sp[1676],r8
80007aa4:	58 78       	cp.w	r8,7
80007aa6:	e0 89 00 04 	brgt	80007aae <_vfprintf_r+0x1b9e>
80007aaa:	2f 83       	sub	r3,-8
80007aac:	c0 b8       	rjmp	80007ac2 <_vfprintf_r+0x1bb2>
80007aae:	fa ca f9 78 	sub	r10,sp,-1672
80007ab2:	02 9b       	mov	r11,r1
80007ab4:	08 9c       	mov	r12,r4
80007ab6:	fe b0 f2 1f 	rcall	80005ef4 <__sprint_r>
80007aba:	e0 81 01 b6 	brne	80007e26 <_vfprintf_r+0x1f16>
80007abe:	fa c3 f9 e0 	sub	r3,sp,-1568
80007ac2:	21 06       	sub	r6,16
80007ac4:	c0 38       	rjmp	80007aca <_vfprintf_r+0x1bba>
80007ac6:	4d c2       	lddpc	r2,80007c34 <_vfprintf_r+0x1d24>
80007ac8:	31 00       	mov	r0,16
80007aca:	fa f9 06 90 	ld.w	r9,sp[1680]
80007ace:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007ad2:	4d 9a       	lddpc	r10,80007c34 <_vfprintf_r+0x1d24>
80007ad4:	59 06       	cp.w	r6,16
80007ad6:	fe 99 ff df 	brgt	80007a94 <_vfprintf_r+0x1b84>
80007ada:	0c 09       	add	r9,r6
80007adc:	2f f8       	sub	r8,-1
80007ade:	87 0a       	st.w	r3[0x0],r10
80007ae0:	fb 49 06 90 	st.w	sp[1680],r9
80007ae4:	87 16       	st.w	r3[0x4],r6
80007ae6:	fb 48 06 8c 	st.w	sp[1676],r8
80007aea:	58 78       	cp.w	r8,7
80007aec:	e0 89 00 04 	brgt	80007af4 <_vfprintf_r+0x1be4>
80007af0:	2f 83       	sub	r3,-8
80007af2:	c0 b8       	rjmp	80007b08 <_vfprintf_r+0x1bf8>
80007af4:	fa ca f9 78 	sub	r10,sp,-1672
80007af8:	02 9b       	mov	r11,r1
80007afa:	08 9c       	mov	r12,r4
80007afc:	fe b0 f1 fc 	rcall	80005ef4 <__sprint_r>
80007b00:	e0 81 01 93 	brne	80007e26 <_vfprintf_r+0x1f16>
80007b04:	fa c3 f9 e0 	sub	r3,sp,-1568
80007b08:	ed b5 00 00 	bld	r5,0x0
80007b0c:	e0 81 01 20 	brne	80007d4c <_vfprintf_r+0x1e3c>
80007b10:	40 c9       	lddsp	r9,sp[0x30]
80007b12:	fa f8 06 90 	ld.w	r8,sp[1680]
80007b16:	2f f8       	sub	r8,-1
80007b18:	87 09       	st.w	r3[0x0],r9
80007b1a:	fb 48 06 90 	st.w	sp[1680],r8
80007b1e:	30 19       	mov	r9,1
80007b20:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007b24:	87 19       	st.w	r3[0x4],r9
80007b26:	2f f8       	sub	r8,-1
80007b28:	fb 48 06 8c 	st.w	sp[1676],r8
80007b2c:	c0 29       	rjmp	80007d30 <_vfprintf_r+0x1e20>
80007b2e:	14 09       	add	r9,r10
80007b30:	2f f8       	sub	r8,-1
80007b32:	fb 49 06 90 	st.w	sp[1680],r9
80007b36:	87 06       	st.w	r3[0x0],r6
80007b38:	87 1a       	st.w	r3[0x4],r10
80007b3a:	fb 48 06 8c 	st.w	sp[1676],r8
80007b3e:	58 78       	cp.w	r8,7
80007b40:	e0 89 00 04 	brgt	80007b48 <_vfprintf_r+0x1c38>
80007b44:	2f 83       	sub	r3,-8
80007b46:	c0 b8       	rjmp	80007b5c <_vfprintf_r+0x1c4c>
80007b48:	fa ca f9 78 	sub	r10,sp,-1672
80007b4c:	02 9b       	mov	r11,r1
80007b4e:	08 9c       	mov	r12,r4
80007b50:	fe b0 f1 d2 	rcall	80005ef4 <__sprint_r>
80007b54:	e0 81 01 69 	brne	80007e26 <_vfprintf_r+0x1f16>
80007b58:	fa c3 f9 e0 	sub	r3,sp,-1568
80007b5c:	40 c8       	lddsp	r8,sp[0x30]
80007b5e:	87 08       	st.w	r3[0x0],r8
80007b60:	fa f8 06 90 	ld.w	r8,sp[1680]
80007b64:	2f f8       	sub	r8,-1
80007b66:	30 19       	mov	r9,1
80007b68:	fb 48 06 90 	st.w	sp[1680],r8
80007b6c:	87 19       	st.w	r3[0x4],r9
80007b6e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007b72:	2f f8       	sub	r8,-1
80007b74:	fb 48 06 8c 	st.w	sp[1676],r8
80007b78:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007b7c:	58 78       	cp.w	r8,7
80007b7e:	e0 89 00 04 	brgt	80007b86 <_vfprintf_r+0x1c76>
80007b82:	2f 83       	sub	r3,-8
80007b84:	c0 b8       	rjmp	80007b9a <_vfprintf_r+0x1c8a>
80007b86:	fa ca f9 78 	sub	r10,sp,-1672
80007b8a:	02 9b       	mov	r11,r1
80007b8c:	08 9c       	mov	r12,r4
80007b8e:	fe b0 f1 b3 	rcall	80005ef4 <__sprint_r>
80007b92:	e0 81 01 4a 	brne	80007e26 <_vfprintf_r+0x1f16>
80007b96:	fa c3 f9 e0 	sub	r3,sp,-1568
80007b9a:	04 06       	add	r6,r2
80007b9c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80007ba0:	87 06       	st.w	r3[0x0],r6
80007ba2:	fa f9 06 90 	ld.w	r9,sp[1680]
80007ba6:	40 66       	lddsp	r6,sp[0x18]
80007ba8:	40 6e       	lddsp	lr,sp[0x18]
80007baa:	10 16       	sub	r6,r8
80007bac:	f2 08 01 08 	sub	r8,r9,r8
80007bb0:	87 16       	st.w	r3[0x4],r6
80007bb2:	1c 08       	add	r8,lr
80007bb4:	fb 48 06 90 	st.w	sp[1680],r8
80007bb8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007bbc:	2f f8       	sub	r8,-1
80007bbe:	fb 48 06 8c 	st.w	sp[1676],r8
80007bc2:	cb 78       	rjmp	80007d30 <_vfprintf_r+0x1e20>
80007bc4:	40 6c       	lddsp	r12,sp[0x18]
80007bc6:	58 1c       	cp.w	r12,1
80007bc8:	e0 89 00 06 	brgt	80007bd4 <_vfprintf_r+0x1cc4>
80007bcc:	ed b5 00 00 	bld	r5,0x0
80007bd0:	e0 81 00 85 	brne	80007cda <_vfprintf_r+0x1dca>
80007bd4:	fa f8 06 90 	ld.w	r8,sp[1680]
80007bd8:	2f f8       	sub	r8,-1
80007bda:	30 19       	mov	r9,1
80007bdc:	fb 48 06 90 	st.w	sp[1680],r8
80007be0:	87 06       	st.w	r3[0x0],r6
80007be2:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007be6:	87 19       	st.w	r3[0x4],r9
80007be8:	2f f8       	sub	r8,-1
80007bea:	fb 48 06 8c 	st.w	sp[1676],r8
80007bee:	58 78       	cp.w	r8,7
80007bf0:	e0 89 00 04 	brgt	80007bf8 <_vfprintf_r+0x1ce8>
80007bf4:	2f 83       	sub	r3,-8
80007bf6:	c0 b8       	rjmp	80007c0c <_vfprintf_r+0x1cfc>
80007bf8:	fa ca f9 78 	sub	r10,sp,-1672
80007bfc:	02 9b       	mov	r11,r1
80007bfe:	08 9c       	mov	r12,r4
80007c00:	fe b0 f1 7a 	rcall	80005ef4 <__sprint_r>
80007c04:	e0 81 01 11 	brne	80007e26 <_vfprintf_r+0x1f16>
80007c08:	fa c3 f9 e0 	sub	r3,sp,-1568
80007c0c:	fa f8 06 90 	ld.w	r8,sp[1680]
80007c10:	2f f8       	sub	r8,-1
80007c12:	40 cb       	lddsp	r11,sp[0x30]
80007c14:	fb 48 06 90 	st.w	sp[1680],r8
80007c18:	30 19       	mov	r9,1
80007c1a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007c1e:	87 0b       	st.w	r3[0x0],r11
80007c20:	2f f8       	sub	r8,-1
80007c22:	87 19       	st.w	r3[0x4],r9
80007c24:	fb 48 06 8c 	st.w	sp[1676],r8
80007c28:	58 78       	cp.w	r8,7
80007c2a:	e0 89 00 07 	brgt	80007c38 <_vfprintf_r+0x1d28>
80007c2e:	2f 83       	sub	r3,-8
80007c30:	c0 e8       	rjmp	80007c4c <_vfprintf_r+0x1d3c>
80007c32:	d7 03       	nop
80007c34:	80 00       	ld.sh	r0,r0[0x0]
80007c36:	c4 5c       	rcall	80007cc0 <_vfprintf_r+0x1db0>
80007c38:	fa ca f9 78 	sub	r10,sp,-1672
80007c3c:	02 9b       	mov	r11,r1
80007c3e:	08 9c       	mov	r12,r4
80007c40:	fe b0 f1 5a 	rcall	80005ef4 <__sprint_r>
80007c44:	e0 81 00 f1 	brne	80007e26 <_vfprintf_r+0x1f16>
80007c48:	fa c3 f9 e0 	sub	r3,sp,-1568
80007c4c:	30 08       	mov	r8,0
80007c4e:	30 09       	mov	r9,0
80007c50:	40 5b       	lddsp	r11,sp[0x14]
80007c52:	40 7a       	lddsp	r10,sp[0x1c]
80007c54:	e0 a0 18 03 	rcall	8000ac5a <__avr32_f64_cmp_eq>
80007c58:	40 68       	lddsp	r8,sp[0x18]
80007c5a:	20 18       	sub	r8,1
80007c5c:	58 0c       	cp.w	r12,0
80007c5e:	c0 d1       	brne	80007c78 <_vfprintf_r+0x1d68>
80007c60:	2f f6       	sub	r6,-1
80007c62:	87 18       	st.w	r3[0x4],r8
80007c64:	87 06       	st.w	r3[0x0],r6
80007c66:	fa f6 06 90 	ld.w	r6,sp[1680]
80007c6a:	10 06       	add	r6,r8
80007c6c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007c70:	fb 46 06 90 	st.w	sp[1680],r6
80007c74:	2f f8       	sub	r8,-1
80007c76:	c2 f8       	rjmp	80007cd4 <_vfprintf_r+0x1dc4>
80007c78:	10 96       	mov	r6,r8
80007c7a:	58 08       	cp.w	r8,0
80007c7c:	e0 89 00 1c 	brgt	80007cb4 <_vfprintf_r+0x1da4>
80007c80:	c4 98       	rjmp	80007d12 <_vfprintf_r+0x1e02>
80007c82:	2f 09       	sub	r9,-16
80007c84:	2f f8       	sub	r8,-1
80007c86:	fb 49 06 90 	st.w	sp[1680],r9
80007c8a:	87 02       	st.w	r3[0x0],r2
80007c8c:	87 10       	st.w	r3[0x4],r0
80007c8e:	fb 48 06 8c 	st.w	sp[1676],r8
80007c92:	58 78       	cp.w	r8,7
80007c94:	e0 89 00 04 	brgt	80007c9c <_vfprintf_r+0x1d8c>
80007c98:	2f 83       	sub	r3,-8
80007c9a:	c0 b8       	rjmp	80007cb0 <_vfprintf_r+0x1da0>
80007c9c:	fa ca f9 78 	sub	r10,sp,-1672
80007ca0:	02 9b       	mov	r11,r1
80007ca2:	08 9c       	mov	r12,r4
80007ca4:	fe b0 f1 28 	rcall	80005ef4 <__sprint_r>
80007ca8:	e0 81 00 bf 	brne	80007e26 <_vfprintf_r+0x1f16>
80007cac:	fa c3 f9 e0 	sub	r3,sp,-1568
80007cb0:	21 06       	sub	r6,16
80007cb2:	c0 38       	rjmp	80007cb8 <_vfprintf_r+0x1da8>
80007cb4:	4d 22       	lddpc	r2,80007dfc <_vfprintf_r+0x1eec>
80007cb6:	31 00       	mov	r0,16
80007cb8:	fa f9 06 90 	ld.w	r9,sp[1680]
80007cbc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007cc0:	4c fa       	lddpc	r10,80007dfc <_vfprintf_r+0x1eec>
80007cc2:	59 06       	cp.w	r6,16
80007cc4:	fe 99 ff df 	brgt	80007c82 <_vfprintf_r+0x1d72>
80007cc8:	0c 09       	add	r9,r6
80007cca:	87 0a       	st.w	r3[0x0],r10
80007ccc:	fb 49 06 90 	st.w	sp[1680],r9
80007cd0:	2f f8       	sub	r8,-1
80007cd2:	87 16       	st.w	r3[0x4],r6
80007cd4:	fb 48 06 8c 	st.w	sp[1676],r8
80007cd8:	c0 e8       	rjmp	80007cf4 <_vfprintf_r+0x1de4>
80007cda:	fa f8 06 90 	ld.w	r8,sp[1680]
80007cde:	2f f8       	sub	r8,-1
80007ce0:	30 19       	mov	r9,1
80007ce2:	fb 48 06 90 	st.w	sp[1680],r8
80007ce6:	87 06       	st.w	r3[0x0],r6
80007ce8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007cec:	87 19       	st.w	r3[0x4],r9
80007cee:	2f f8       	sub	r8,-1
80007cf0:	fb 48 06 8c 	st.w	sp[1676],r8
80007cf4:	58 78       	cp.w	r8,7
80007cf6:	e0 89 00 04 	brgt	80007cfe <_vfprintf_r+0x1dee>
80007cfa:	2f 83       	sub	r3,-8
80007cfc:	c0 b8       	rjmp	80007d12 <_vfprintf_r+0x1e02>
80007cfe:	fa ca f9 78 	sub	r10,sp,-1672
80007d02:	02 9b       	mov	r11,r1
80007d04:	08 9c       	mov	r12,r4
80007d06:	fe b0 f0 f7 	rcall	80005ef4 <__sprint_r>
80007d0a:	e0 81 00 8e 	brne	80007e26 <_vfprintf_r+0x1f16>
80007d0e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007d12:	40 ea       	lddsp	r10,sp[0x38]
80007d14:	fa f8 06 90 	ld.w	r8,sp[1680]
80007d18:	14 08       	add	r8,r10
80007d1a:	fa c9 f9 64 	sub	r9,sp,-1692
80007d1e:	fb 48 06 90 	st.w	sp[1680],r8
80007d22:	87 1a       	st.w	r3[0x4],r10
80007d24:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007d28:	87 09       	st.w	r3[0x0],r9
80007d2a:	2f f8       	sub	r8,-1
80007d2c:	fb 48 06 8c 	st.w	sp[1676],r8
80007d30:	58 78       	cp.w	r8,7
80007d32:	e0 89 00 04 	brgt	80007d3a <_vfprintf_r+0x1e2a>
80007d36:	2f 83       	sub	r3,-8
80007d38:	c0 a8       	rjmp	80007d4c <_vfprintf_r+0x1e3c>
80007d3a:	fa ca f9 78 	sub	r10,sp,-1672
80007d3e:	02 9b       	mov	r11,r1
80007d40:	08 9c       	mov	r12,r4
80007d42:	fe b0 f0 d9 	rcall	80005ef4 <__sprint_r>
80007d46:	c7 01       	brne	80007e26 <_vfprintf_r+0x1f16>
80007d48:	fa c3 f9 e0 	sub	r3,sp,-1568
80007d4c:	e2 15 00 04 	andl	r5,0x4,COH
80007d50:	c3 d0       	breq	80007dca <_vfprintf_r+0x1eba>
80007d52:	40 86       	lddsp	r6,sp[0x20]
80007d54:	40 39       	lddsp	r9,sp[0xc]
80007d56:	12 16       	sub	r6,r9
80007d58:	58 06       	cp.w	r6,0
80007d5a:	e0 89 00 1a 	brgt	80007d8e <_vfprintf_r+0x1e7e>
80007d5e:	c3 68       	rjmp	80007dca <_vfprintf_r+0x1eba>
80007d60:	2f 09       	sub	r9,-16
80007d62:	2f f8       	sub	r8,-1
80007d64:	fb 49 06 90 	st.w	sp[1680],r9
80007d68:	87 05       	st.w	r3[0x0],r5
80007d6a:	87 12       	st.w	r3[0x4],r2
80007d6c:	fb 48 06 8c 	st.w	sp[1676],r8
80007d70:	58 78       	cp.w	r8,7
80007d72:	e0 89 00 04 	brgt	80007d7a <_vfprintf_r+0x1e6a>
80007d76:	2f 83       	sub	r3,-8
80007d78:	c0 98       	rjmp	80007d8a <_vfprintf_r+0x1e7a>
80007d7a:	00 9a       	mov	r10,r0
80007d7c:	02 9b       	mov	r11,r1
80007d7e:	08 9c       	mov	r12,r4
80007d80:	fe b0 f0 ba 	rcall	80005ef4 <__sprint_r>
80007d84:	c5 11       	brne	80007e26 <_vfprintf_r+0x1f16>
80007d86:	fa c3 f9 e0 	sub	r3,sp,-1568
80007d8a:	21 06       	sub	r6,16
80007d8c:	c0 58       	rjmp	80007d96 <_vfprintf_r+0x1e86>
80007d8e:	49 d5       	lddpc	r5,80007e00 <_vfprintf_r+0x1ef0>
80007d90:	31 02       	mov	r2,16
80007d92:	fa c0 f9 78 	sub	r0,sp,-1672
80007d96:	fa f9 06 90 	ld.w	r9,sp[1680]
80007d9a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007d9e:	49 9a       	lddpc	r10,80007e00 <_vfprintf_r+0x1ef0>
80007da0:	59 06       	cp.w	r6,16
80007da2:	fe 99 ff df 	brgt	80007d60 <_vfprintf_r+0x1e50>
80007da6:	0c 09       	add	r9,r6
80007da8:	2f f8       	sub	r8,-1
80007daa:	87 0a       	st.w	r3[0x0],r10
80007dac:	87 16       	st.w	r3[0x4],r6
80007dae:	fb 49 06 90 	st.w	sp[1680],r9
80007db2:	fb 48 06 8c 	st.w	sp[1676],r8
80007db6:	58 78       	cp.w	r8,7
80007db8:	e0 8a 00 09 	brle	80007dca <_vfprintf_r+0x1eba>
80007dbc:	fa ca f9 78 	sub	r10,sp,-1672
80007dc0:	02 9b       	mov	r11,r1
80007dc2:	08 9c       	mov	r12,r4
80007dc4:	fe b0 f0 98 	rcall	80005ef4 <__sprint_r>
80007dc8:	c2 f1       	brne	80007e26 <_vfprintf_r+0x1f16>
80007dca:	40 bc       	lddsp	r12,sp[0x2c]
80007dcc:	40 36       	lddsp	r6,sp[0xc]
80007dce:	40 8e       	lddsp	lr,sp[0x20]
80007dd0:	ec 0e 0c 48 	max	r8,r6,lr
80007dd4:	10 0c       	add	r12,r8
80007dd6:	50 bc       	stdsp	sp[0x2c],r12
80007dd8:	fa f8 06 90 	ld.w	r8,sp[1680]
80007ddc:	58 08       	cp.w	r8,0
80007dde:	c0 80       	breq	80007dee <_vfprintf_r+0x1ede>
80007de0:	fa ca f9 78 	sub	r10,sp,-1672
80007de4:	02 9b       	mov	r11,r1
80007de6:	08 9c       	mov	r12,r4
80007de8:	fe b0 f0 86 	rcall	80005ef4 <__sprint_r>
80007dec:	c1 d1       	brne	80007e26 <_vfprintf_r+0x1f16>
80007dee:	30 0b       	mov	r11,0
80007df0:	fa c3 f9 e0 	sub	r3,sp,-1568
80007df4:	fb 4b 06 8c 	st.w	sp[1676],r11
80007df8:	fe 9f f1 17 	bral	80006026 <_vfprintf_r+0x116>
80007dfc:	80 00       	ld.sh	r0,r0[0x0]
80007dfe:	c4 5c       	rcall	80007e88 <__swsetup_r+0x4c>
80007e00:	80 00       	ld.sh	r0,r0[0x0]
80007e02:	c4 4c       	rcall	80007e8a <__swsetup_r+0x4e>
80007e04:	08 95       	mov	r5,r4
80007e06:	fa f8 06 90 	ld.w	r8,sp[1680]
80007e0a:	58 08       	cp.w	r8,0
80007e0c:	c0 80       	breq	80007e1c <_vfprintf_r+0x1f0c>
80007e0e:	08 9c       	mov	r12,r4
80007e10:	fa ca f9 78 	sub	r10,sp,-1672
80007e14:	02 9b       	mov	r11,r1
80007e16:	fe b0 f0 6f 	rcall	80005ef4 <__sprint_r>
80007e1a:	c0 61       	brne	80007e26 <_vfprintf_r+0x1f16>
80007e1c:	30 08       	mov	r8,0
80007e1e:	fb 48 06 8c 	st.w	sp[1676],r8
80007e22:	c0 28       	rjmp	80007e26 <_vfprintf_r+0x1f16>
80007e24:	40 41       	lddsp	r1,sp[0x10]
80007e26:	82 68       	ld.sh	r8,r1[0xc]
80007e28:	ed b8 00 06 	bld	r8,0x6
80007e2c:	c0 31       	brne	80007e32 <_vfprintf_r+0x1f22>
80007e2e:	3f fa       	mov	r10,-1
80007e30:	50 ba       	stdsp	sp[0x2c],r10
80007e32:	40 bc       	lddsp	r12,sp[0x2c]
80007e34:	fe 3d f9 44 	sub	sp,-1724
80007e38:	d8 32       	popm	r0-r7,pc
80007e3a:	d7 03       	nop

80007e3c <__swsetup_r>:
80007e3c:	d4 21       	pushm	r4-r7,lr
80007e3e:	4b 38       	lddpc	r8,80007f08 <__swsetup_r+0xcc>
80007e40:	18 96       	mov	r6,r12
80007e42:	16 97       	mov	r7,r11
80007e44:	70 0c       	ld.w	r12,r8[0x0]
80007e46:	58 0c       	cp.w	r12,0
80007e48:	c0 60       	breq	80007e54 <__swsetup_r+0x18>
80007e4a:	78 68       	ld.w	r8,r12[0x18]
80007e4c:	58 08       	cp.w	r8,0
80007e4e:	c0 31       	brne	80007e54 <__swsetup_r+0x18>
80007e50:	e0 a0 07 c0 	rcall	80008dd0 <__sinit>
80007e54:	4a e8       	lddpc	r8,80007f0c <__swsetup_r+0xd0>
80007e56:	10 37       	cp.w	r7,r8
80007e58:	c0 51       	brne	80007e62 <__swsetup_r+0x26>
80007e5a:	4a c8       	lddpc	r8,80007f08 <__swsetup_r+0xcc>
80007e5c:	70 08       	ld.w	r8,r8[0x0]
80007e5e:	70 07       	ld.w	r7,r8[0x0]
80007e60:	c0 e8       	rjmp	80007e7c <__swsetup_r+0x40>
80007e62:	4a c8       	lddpc	r8,80007f10 <__swsetup_r+0xd4>
80007e64:	10 37       	cp.w	r7,r8
80007e66:	c0 51       	brne	80007e70 <__swsetup_r+0x34>
80007e68:	4a 88       	lddpc	r8,80007f08 <__swsetup_r+0xcc>
80007e6a:	70 08       	ld.w	r8,r8[0x0]
80007e6c:	70 17       	ld.w	r7,r8[0x4]
80007e6e:	c0 78       	rjmp	80007e7c <__swsetup_r+0x40>
80007e70:	4a 98       	lddpc	r8,80007f14 <__swsetup_r+0xd8>
80007e72:	10 37       	cp.w	r7,r8
80007e74:	c0 41       	brne	80007e7c <__swsetup_r+0x40>
80007e76:	4a 58       	lddpc	r8,80007f08 <__swsetup_r+0xcc>
80007e78:	70 08       	ld.w	r8,r8[0x0]
80007e7a:	70 27       	ld.w	r7,r8[0x8]
80007e7c:	8e 68       	ld.sh	r8,r7[0xc]
80007e7e:	ed b8 00 03 	bld	r8,0x3
80007e82:	c1 e0       	breq	80007ebe <__swsetup_r+0x82>
80007e84:	ed b8 00 04 	bld	r8,0x4
80007e88:	c3 e1       	brne	80007f04 <__swsetup_r+0xc8>
80007e8a:	ed b8 00 02 	bld	r8,0x2
80007e8e:	c1 51       	brne	80007eb8 <__swsetup_r+0x7c>
80007e90:	6e db       	ld.w	r11,r7[0x34]
80007e92:	58 0b       	cp.w	r11,0
80007e94:	c0 a0       	breq	80007ea8 <__swsetup_r+0x6c>
80007e96:	ee c8 ff bc 	sub	r8,r7,-68
80007e9a:	10 3b       	cp.w	r11,r8
80007e9c:	c0 40       	breq	80007ea4 <__swsetup_r+0x68>
80007e9e:	0c 9c       	mov	r12,r6
80007ea0:	e0 a0 08 34 	rcall	80008f08 <_free_r>
80007ea4:	30 08       	mov	r8,0
80007ea6:	8f d8       	st.w	r7[0x34],r8
80007ea8:	8e 68       	ld.sh	r8,r7[0xc]
80007eaa:	e0 18 ff db 	andl	r8,0xffdb
80007eae:	ae 68       	st.h	r7[0xc],r8
80007eb0:	30 08       	mov	r8,0
80007eb2:	8f 18       	st.w	r7[0x4],r8
80007eb4:	6e 48       	ld.w	r8,r7[0x10]
80007eb6:	8f 08       	st.w	r7[0x0],r8
80007eb8:	8e 68       	ld.sh	r8,r7[0xc]
80007eba:	a3 b8       	sbr	r8,0x3
80007ebc:	ae 68       	st.h	r7[0xc],r8
80007ebe:	6e 48       	ld.w	r8,r7[0x10]
80007ec0:	58 08       	cp.w	r8,0
80007ec2:	c0 b1       	brne	80007ed8 <__swsetup_r+0x9c>
80007ec4:	8e 68       	ld.sh	r8,r7[0xc]
80007ec6:	e2 18 02 80 	andl	r8,0x280,COH
80007eca:	e0 48 02 00 	cp.w	r8,512
80007ece:	c0 50       	breq	80007ed8 <__swsetup_r+0x9c>
80007ed0:	0c 9c       	mov	r12,r6
80007ed2:	0e 9b       	mov	r11,r7
80007ed4:	e0 a0 0a 5c 	rcall	8000938c <__smakebuf_r>
80007ed8:	8e 69       	ld.sh	r9,r7[0xc]
80007eda:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80007ede:	c0 70       	breq	80007eec <__swsetup_r+0xb0>
80007ee0:	30 08       	mov	r8,0
80007ee2:	8f 28       	st.w	r7[0x8],r8
80007ee4:	6e 58       	ld.w	r8,r7[0x14]
80007ee6:	5c 38       	neg	r8
80007ee8:	8f 68       	st.w	r7[0x18],r8
80007eea:	c0 68       	rjmp	80007ef6 <__swsetup_r+0xba>
80007eec:	ed b9 00 01 	bld	r9,0x1
80007ef0:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80007ef4:	8f 28       	st.w	r7[0x8],r8
80007ef6:	6e 48       	ld.w	r8,r7[0x10]
80007ef8:	58 08       	cp.w	r8,0
80007efa:	c0 61       	brne	80007f06 <__swsetup_r+0xca>
80007efc:	8e 68       	ld.sh	r8,r7[0xc]
80007efe:	ed b8 00 07 	bld	r8,0x7
80007f02:	c0 21       	brne	80007f06 <__swsetup_r+0xca>
80007f04:	dc 2a       	popm	r4-r7,pc,r12=-1
80007f06:	d8 2a       	popm	r4-r7,pc,r12=0
80007f08:	00 00       	add	r0,r0
80007f0a:	00 fc       	st.b	--r0,r12
80007f0c:	80 00       	ld.sh	r0,r0[0x0]
80007f0e:	c5 7c       	rcall	80007fbc <quorem+0xa4>
80007f10:	80 00       	ld.sh	r0,r0[0x0]
80007f12:	c5 9c       	rcall	80007fc4 <quorem+0xac>
80007f14:	80 00       	ld.sh	r0,r0[0x0]
80007f16:	c5 bc       	rcall	80007fcc <quorem+0xb4>

80007f18 <quorem>:
80007f18:	d4 31       	pushm	r0-r7,lr
80007f1a:	20 2d       	sub	sp,8
80007f1c:	18 97       	mov	r7,r12
80007f1e:	78 48       	ld.w	r8,r12[0x10]
80007f20:	76 46       	ld.w	r6,r11[0x10]
80007f22:	0c 38       	cp.w	r8,r6
80007f24:	c0 34       	brge	80007f2a <quorem+0x12>
80007f26:	30 0c       	mov	r12,0
80007f28:	c8 58       	rjmp	80008032 <quorem+0x11a>
80007f2a:	ec c2 ff fc 	sub	r2,r6,-4
80007f2e:	f6 c3 ff ec 	sub	r3,r11,-20
80007f32:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80007f36:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80007f3a:	2f f9       	sub	r9,-1
80007f3c:	20 16       	sub	r6,1
80007f3e:	f8 09 0d 08 	divu	r8,r12,r9
80007f42:	f6 02 00 22 	add	r2,r11,r2<<0x2
80007f46:	ee c4 ff ec 	sub	r4,r7,-20
80007f4a:	10 95       	mov	r5,r8
80007f4c:	58 08       	cp.w	r8,0
80007f4e:	c4 10       	breq	80007fd0 <quorem+0xb8>
80007f50:	30 09       	mov	r9,0
80007f52:	06 9a       	mov	r10,r3
80007f54:	08 98       	mov	r8,r4
80007f56:	12 91       	mov	r1,r9
80007f58:	50 0b       	stdsp	sp[0x0],r11
80007f5a:	70 0e       	ld.w	lr,r8[0x0]
80007f5c:	b1 8e       	lsr	lr,0x10
80007f5e:	50 1e       	stdsp	sp[0x4],lr
80007f60:	15 0e       	ld.w	lr,r10++
80007f62:	fc 00 16 10 	lsr	r0,lr,0x10
80007f66:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80007f6a:	ea 0e 03 41 	mac	r1,r5,lr
80007f6e:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80007f72:	b1 81       	lsr	r1,0x10
80007f74:	40 1b       	lddsp	r11,sp[0x4]
80007f76:	ea 00 02 40 	mul	r0,r5,r0
80007f7a:	e2 00 00 00 	add	r0,r1,r0
80007f7e:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80007f82:	02 1b       	sub	r11,r1
80007f84:	50 1b       	stdsp	sp[0x4],r11
80007f86:	70 0b       	ld.w	r11,r8[0x0]
80007f88:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80007f8c:	02 09       	add	r9,r1
80007f8e:	f2 0e 01 0e 	sub	lr,r9,lr
80007f92:	b0 1e       	st.h	r8[0x2],lr
80007f94:	fc 09 14 10 	asr	r9,lr,0x10
80007f98:	40 1e       	lddsp	lr,sp[0x4]
80007f9a:	fc 09 00 09 	add	r9,lr,r9
80007f9e:	b0 09       	st.h	r8[0x0],r9
80007fa0:	e0 01 16 10 	lsr	r1,r0,0x10
80007fa4:	2f c8       	sub	r8,-4
80007fa6:	b1 49       	asr	r9,0x10
80007fa8:	04 3a       	cp.w	r10,r2
80007faa:	fe 98 ff d8 	brls	80007f5a <quorem+0x42>
80007fae:	40 0b       	lddsp	r11,sp[0x0]
80007fb0:	58 0c       	cp.w	r12,0
80007fb2:	c0 f1       	brne	80007fd0 <quorem+0xb8>
80007fb4:	ec c8 ff fb 	sub	r8,r6,-5
80007fb8:	ee 08 00 28 	add	r8,r7,r8<<0x2
80007fbc:	c0 28       	rjmp	80007fc0 <quorem+0xa8>
80007fbe:	20 16       	sub	r6,1
80007fc0:	20 48       	sub	r8,4
80007fc2:	08 38       	cp.w	r8,r4
80007fc4:	e0 88 00 05 	brls	80007fce <quorem+0xb6>
80007fc8:	70 09       	ld.w	r9,r8[0x0]
80007fca:	58 09       	cp.w	r9,0
80007fcc:	cf 90       	breq	80007fbe <quorem+0xa6>
80007fce:	8f 46       	st.w	r7[0x10],r6
80007fd0:	0e 9c       	mov	r12,r7
80007fd2:	e0 a0 0d a7 	rcall	80009b20 <__mcmp>
80007fd6:	c2 d5       	brlt	80008030 <quorem+0x118>
80007fd8:	2f f5       	sub	r5,-1
80007fda:	08 98       	mov	r8,r4
80007fdc:	30 09       	mov	r9,0
80007fde:	07 0b       	ld.w	r11,r3++
80007fe0:	f6 0a 16 10 	lsr	r10,r11,0x10
80007fe4:	70 0c       	ld.w	r12,r8[0x0]
80007fe6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007fea:	f8 0e 16 10 	lsr	lr,r12,0x10
80007fee:	14 1e       	sub	lr,r10
80007ff0:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80007ff4:	16 1a       	sub	r10,r11
80007ff6:	12 0a       	add	r10,r9
80007ff8:	b0 1a       	st.h	r8[0x2],r10
80007ffa:	b1 4a       	asr	r10,0x10
80007ffc:	fc 0a 00 09 	add	r9,lr,r10
80008000:	b0 09       	st.h	r8[0x0],r9
80008002:	2f c8       	sub	r8,-4
80008004:	b1 49       	asr	r9,0x10
80008006:	04 33       	cp.w	r3,r2
80008008:	fe 98 ff eb 	brls	80007fde <quorem+0xc6>
8000800c:	ec c8 ff fb 	sub	r8,r6,-5
80008010:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80008014:	58 09       	cp.w	r9,0
80008016:	c0 d1       	brne	80008030 <quorem+0x118>
80008018:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000801c:	c0 28       	rjmp	80008020 <quorem+0x108>
8000801e:	20 16       	sub	r6,1
80008020:	20 48       	sub	r8,4
80008022:	08 38       	cp.w	r8,r4
80008024:	e0 88 00 05 	brls	8000802e <quorem+0x116>
80008028:	70 09       	ld.w	r9,r8[0x0]
8000802a:	58 09       	cp.w	r9,0
8000802c:	cf 90       	breq	8000801e <quorem+0x106>
8000802e:	8f 46       	st.w	r7[0x10],r6
80008030:	0a 9c       	mov	r12,r5
80008032:	2f ed       	sub	sp,-8
80008034:	d8 32       	popm	r0-r7,pc
80008036:	d7 03       	nop

80008038 <_dtoa_r>:
80008038:	d4 31       	pushm	r0-r7,lr
8000803a:	21 ad       	sub	sp,104
8000803c:	fa c4 ff 74 	sub	r4,sp,-140
80008040:	18 97       	mov	r7,r12
80008042:	16 95       	mov	r5,r11
80008044:	68 2c       	ld.w	r12,r4[0x8]
80008046:	50 c9       	stdsp	sp[0x30],r9
80008048:	68 16       	ld.w	r6,r4[0x4]
8000804a:	68 09       	ld.w	r9,r4[0x0]
8000804c:	50 e8       	stdsp	sp[0x38],r8
8000804e:	14 94       	mov	r4,r10
80008050:	51 2c       	stdsp	sp[0x48],r12
80008052:	fa e5 00 08 	st.d	sp[8],r4
80008056:	51 59       	stdsp	sp[0x54],r9
80008058:	6e 95       	ld.w	r5,r7[0x24]
8000805a:	58 05       	cp.w	r5,0
8000805c:	c0 91       	brne	8000806e <_dtoa_r+0x36>
8000805e:	31 0c       	mov	r12,16
80008060:	e0 a0 09 f4 	rcall	80009448 <malloc>
80008064:	99 35       	st.w	r12[0xc],r5
80008066:	8f 9c       	st.w	r7[0x24],r12
80008068:	99 15       	st.w	r12[0x4],r5
8000806a:	99 25       	st.w	r12[0x8],r5
8000806c:	99 05       	st.w	r12[0x0],r5
8000806e:	6e 99       	ld.w	r9,r7[0x24]
80008070:	72 08       	ld.w	r8,r9[0x0]
80008072:	58 08       	cp.w	r8,0
80008074:	c0 f0       	breq	80008092 <_dtoa_r+0x5a>
80008076:	72 1a       	ld.w	r10,r9[0x4]
80008078:	91 1a       	st.w	r8[0x4],r10
8000807a:	30 1a       	mov	r10,1
8000807c:	72 19       	ld.w	r9,r9[0x4]
8000807e:	f4 09 09 49 	lsl	r9,r10,r9
80008082:	10 9b       	mov	r11,r8
80008084:	91 29       	st.w	r8[0x8],r9
80008086:	0e 9c       	mov	r12,r7
80008088:	e0 a0 0d 66 	rcall	80009b54 <_Bfree>
8000808c:	6e 98       	ld.w	r8,r7[0x24]
8000808e:	30 09       	mov	r9,0
80008090:	91 09       	st.w	r8[0x0],r9
80008092:	40 28       	lddsp	r8,sp[0x8]
80008094:	10 94       	mov	r4,r8
80008096:	58 08       	cp.w	r8,0
80008098:	c0 64       	brge	800080a4 <_dtoa_r+0x6c>
8000809a:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
8000809e:	50 28       	stdsp	sp[0x8],r8
800080a0:	30 18       	mov	r8,1
800080a2:	c0 28       	rjmp	800080a6 <_dtoa_r+0x6e>
800080a4:	30 08       	mov	r8,0
800080a6:	8d 08       	st.w	r6[0x0],r8
800080a8:	fc 1c 7f f0 	movh	r12,0x7ff0
800080ac:	40 26       	lddsp	r6,sp[0x8]
800080ae:	0c 98       	mov	r8,r6
800080b0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800080b4:	18 38       	cp.w	r8,r12
800080b6:	c1 e1       	brne	800080f2 <_dtoa_r+0xba>
800080b8:	e0 68 27 0f 	mov	r8,9999
800080bc:	41 5b       	lddsp	r11,sp[0x54]
800080be:	97 08       	st.w	r11[0x0],r8
800080c0:	40 3a       	lddsp	r10,sp[0xc]
800080c2:	58 0a       	cp.w	r10,0
800080c4:	c0 61       	brne	800080d0 <_dtoa_r+0x98>
800080c6:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800080ca:	c0 31       	brne	800080d0 <_dtoa_r+0x98>
800080cc:	4a cc       	lddpc	r12,8000817c <_dtoa_r+0x144>
800080ce:	c0 28       	rjmp	800080d2 <_dtoa_r+0x9a>
800080d0:	4a cc       	lddpc	r12,80008180 <_dtoa_r+0x148>
800080d2:	41 29       	lddsp	r9,sp[0x48]
800080d4:	58 09       	cp.w	r9,0
800080d6:	e0 80 05 9e 	breq	80008c12 <_dtoa_r+0xbda>
800080da:	f8 c8 ff fd 	sub	r8,r12,-3
800080de:	f8 c9 ff f8 	sub	r9,r12,-8
800080e2:	11 8b       	ld.ub	r11,r8[0x0]
800080e4:	30 0a       	mov	r10,0
800080e6:	41 25       	lddsp	r5,sp[0x48]
800080e8:	f4 0b 18 00 	cp.b	r11,r10
800080ec:	f2 08 17 10 	movne	r8,r9
800080f0:	c1 58       	rjmp	8000811a <_dtoa_r+0xe2>
800080f2:	fa ea 00 08 	ld.d	r10,sp[8]
800080f6:	30 08       	mov	r8,0
800080f8:	fa eb 00 3c 	st.d	sp[60],r10
800080fc:	30 09       	mov	r9,0
800080fe:	e0 a0 15 ae 	rcall	8000ac5a <__avr32_f64_cmp_eq>
80008102:	c0 f0       	breq	80008120 <_dtoa_r+0xe8>
80008104:	30 18       	mov	r8,1
80008106:	41 5a       	lddsp	r10,sp[0x54]
80008108:	95 08       	st.w	r10[0x0],r8
8000810a:	49 fc       	lddpc	r12,80008184 <_dtoa_r+0x14c>
8000810c:	41 29       	lddsp	r9,sp[0x48]
8000810e:	f8 08 00 08 	add	r8,r12,r8
80008112:	58 09       	cp.w	r9,0
80008114:	e0 80 05 7f 	breq	80008c12 <_dtoa_r+0xbda>
80008118:	12 95       	mov	r5,r9
8000811a:	8b 08       	st.w	r5[0x0],r8
8000811c:	e0 8f 05 7b 	bral	80008c12 <_dtoa_r+0xbda>
80008120:	fa c8 ff 9c 	sub	r8,sp,-100
80008124:	fa c9 ff a0 	sub	r9,sp,-96
80008128:	fa ea 00 3c 	ld.d	r10,sp[60]
8000812c:	0e 9c       	mov	r12,r7
8000812e:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80008132:	e0 a0 0d 63 	rcall	80009bf8 <__d2b>
80008136:	18 93       	mov	r3,r12
80008138:	58 05       	cp.w	r5,0
8000813a:	c0 d0       	breq	80008154 <_dtoa_r+0x11c>
8000813c:	fa ea 00 3c 	ld.d	r10,sp[60]
80008140:	30 04       	mov	r4,0
80008142:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80008146:	ea c5 03 ff 	sub	r5,r5,1023
8000814a:	10 9b       	mov	r11,r8
8000814c:	51 74       	stdsp	sp[0x5c],r4
8000814e:	ea 1b 3f f0 	orh	r11,0x3ff0
80008152:	c2 a8       	rjmp	800081a6 <_dtoa_r+0x16e>
80008154:	41 88       	lddsp	r8,sp[0x60]
80008156:	41 9c       	lddsp	r12,sp[0x64]
80008158:	10 0c       	add	r12,r8
8000815a:	f8 c5 fb ce 	sub	r5,r12,-1074
8000815e:	e0 45 00 20 	cp.w	r5,32
80008162:	e0 8a 00 13 	brle	80008188 <_dtoa_r+0x150>
80008166:	f8 cc fb ee 	sub	r12,r12,-1042
8000816a:	40 3b       	lddsp	r11,sp[0xc]
8000816c:	ea 08 11 40 	rsub	r8,r5,64
80008170:	f6 0c 0a 4c 	lsr	r12,r11,r12
80008174:	ec 08 09 46 	lsl	r6,r6,r8
80008178:	0c 4c       	or	r12,r6
8000817a:	c0 c8       	rjmp	80008192 <_dtoa_r+0x15a>
8000817c:	80 00       	ld.sh	r0,r0[0x0]
8000817e:	c5 6c       	rcall	8000822a <_dtoa_r+0x1f2>
80008180:	80 00       	ld.sh	r0,r0[0x0]
80008182:	c5 78       	rjmp	80008230 <_dtoa_r+0x1f8>
80008184:	80 00       	ld.sh	r0,r0[0x0]
80008186:	c4 48       	rjmp	8000820e <_dtoa_r+0x1d6>
80008188:	ea 0c 11 20 	rsub	r12,r5,32
8000818c:	40 3a       	lddsp	r10,sp[0xc]
8000818e:	f4 0c 09 4c 	lsl	r12,r10,r12
80008192:	e0 a0 14 f0 	rcall	8000ab72 <__avr32_u32_to_f64>
80008196:	fc 18 fe 10 	movh	r8,0xfe10
8000819a:	30 19       	mov	r9,1
8000819c:	ea c5 04 33 	sub	r5,r5,1075
800081a0:	f0 0b 00 0b 	add	r11,r8,r11
800081a4:	51 79       	stdsp	sp[0x5c],r9
800081a6:	30 08       	mov	r8,0
800081a8:	fc 19 3f f8 	movh	r9,0x3ff8
800081ac:	e0 a0 13 78 	rcall	8000a89c <__avr32_f64_sub>
800081b0:	e0 68 43 61 	mov	r8,17249
800081b4:	ea 18 63 6f 	orh	r8,0x636f
800081b8:	e0 69 87 a7 	mov	r9,34727
800081bc:	ea 19 3f d2 	orh	r9,0x3fd2
800081c0:	e0 a0 12 82 	rcall	8000a6c4 <__avr32_f64_mul>
800081c4:	e0 68 c8 b3 	mov	r8,51379
800081c8:	ea 18 8b 60 	orh	r8,0x8b60
800081cc:	e0 69 8a 28 	mov	r9,35368
800081d0:	ea 19 3f c6 	orh	r9,0x3fc6
800081d4:	e0 a0 14 32 	rcall	8000aa38 <__avr32_f64_add>
800081d8:	0a 9c       	mov	r12,r5
800081da:	14 90       	mov	r0,r10
800081dc:	16 91       	mov	r1,r11
800081de:	e0 a0 14 ce 	rcall	8000ab7a <__avr32_s32_to_f64>
800081e2:	e0 68 79 fb 	mov	r8,31227
800081e6:	ea 18 50 9f 	orh	r8,0x509f
800081ea:	e0 69 44 13 	mov	r9,17427
800081ee:	ea 19 3f d3 	orh	r9,0x3fd3
800081f2:	e0 a0 12 69 	rcall	8000a6c4 <__avr32_f64_mul>
800081f6:	14 98       	mov	r8,r10
800081f8:	16 99       	mov	r9,r11
800081fa:	00 9a       	mov	r10,r0
800081fc:	02 9b       	mov	r11,r1
800081fe:	e0 a0 14 1d 	rcall	8000aa38 <__avr32_f64_add>
80008202:	14 90       	mov	r0,r10
80008204:	16 91       	mov	r1,r11
80008206:	e0 a0 14 a3 	rcall	8000ab4c <__avr32_f64_to_s32>
8000820a:	30 08       	mov	r8,0
8000820c:	18 96       	mov	r6,r12
8000820e:	30 09       	mov	r9,0
80008210:	00 9a       	mov	r10,r0
80008212:	02 9b       	mov	r11,r1
80008214:	e0 a0 15 6a 	rcall	8000ace8 <__avr32_f64_cmp_lt>
80008218:	c0 c0       	breq	80008230 <_dtoa_r+0x1f8>
8000821a:	0c 9c       	mov	r12,r6
8000821c:	e0 a0 14 af 	rcall	8000ab7a <__avr32_s32_to_f64>
80008220:	14 98       	mov	r8,r10
80008222:	16 99       	mov	r9,r11
80008224:	00 9a       	mov	r10,r0
80008226:	02 9b       	mov	r11,r1
80008228:	e0 a0 15 19 	rcall	8000ac5a <__avr32_f64_cmp_eq>
8000822c:	f7 b6 00 01 	subeq	r6,1
80008230:	59 66       	cp.w	r6,22
80008232:	e0 88 00 05 	brls	8000823c <_dtoa_r+0x204>
80008236:	30 18       	mov	r8,1
80008238:	51 48       	stdsp	sp[0x50],r8
8000823a:	c1 28       	rjmp	8000825e <_dtoa_r+0x226>
8000823c:	4c 08       	lddpc	r8,8000833c <_dtoa_r+0x304>
8000823e:	fa ea 00 3c 	ld.d	r10,sp[60]
80008242:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80008246:	e0 a0 15 51 	rcall	8000ace8 <__avr32_f64_cmp_lt>
8000824a:	f9 b4 00 00 	moveq	r4,0
8000824e:	fb f4 0a 14 	st.weq	sp[0x50],r4
80008252:	f7 b6 01 01 	subne	r6,1
80008256:	f9 bc 01 00 	movne	r12,0
8000825a:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000825e:	41 90       	lddsp	r0,sp[0x64]
80008260:	20 10       	sub	r0,1
80008262:	0a 10       	sub	r0,r5
80008264:	c0 46       	brmi	8000826c <_dtoa_r+0x234>
80008266:	50 40       	stdsp	sp[0x10],r0
80008268:	30 00       	mov	r0,0
8000826a:	c0 48       	rjmp	80008272 <_dtoa_r+0x23a>
8000826c:	30 0b       	mov	r11,0
8000826e:	5c 30       	neg	r0
80008270:	50 4b       	stdsp	sp[0x10],r11
80008272:	ec 02 11 00 	rsub	r2,r6,0
80008276:	58 06       	cp.w	r6,0
80008278:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000827c:	f5 d6 e4 0a 	addge	r10,r10,r6
80008280:	fb fa 4a 04 	st.wge	sp[0x10],r10
80008284:	fb f6 4a 11 	st.wge	sp[0x44],r6
80008288:	f9 b2 04 00 	movge	r2,0
8000828c:	e1 d6 e5 10 	sublt	r0,r0,r6
80008290:	f9 b9 05 00 	movlt	r9,0
80008294:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80008298:	40 c8       	lddsp	r8,sp[0x30]
8000829a:	58 98       	cp.w	r8,9
8000829c:	e0 8b 00 20 	brhi	800082dc <_dtoa_r+0x2a4>
800082a0:	58 58       	cp.w	r8,5
800082a2:	f9 b4 0a 01 	movle	r4,1
800082a6:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
800082aa:	f7 b5 09 04 	subgt	r5,4
800082ae:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
800082b2:	f9 b4 09 00 	movgt	r4,0
800082b6:	40 cc       	lddsp	r12,sp[0x30]
800082b8:	58 3c       	cp.w	r12,3
800082ba:	c2 d0       	breq	80008314 <_dtoa_r+0x2dc>
800082bc:	e0 89 00 05 	brgt	800082c6 <_dtoa_r+0x28e>
800082c0:	58 2c       	cp.w	r12,2
800082c2:	c1 01       	brne	800082e2 <_dtoa_r+0x2aa>
800082c4:	c1 88       	rjmp	800082f4 <_dtoa_r+0x2bc>
800082c6:	40 cb       	lddsp	r11,sp[0x30]
800082c8:	58 4b       	cp.w	r11,4
800082ca:	c0 60       	breq	800082d6 <_dtoa_r+0x29e>
800082cc:	58 5b       	cp.w	r11,5
800082ce:	c0 a1       	brne	800082e2 <_dtoa_r+0x2aa>
800082d0:	30 1a       	mov	r10,1
800082d2:	50 da       	stdsp	sp[0x34],r10
800082d4:	c2 28       	rjmp	80008318 <_dtoa_r+0x2e0>
800082d6:	30 19       	mov	r9,1
800082d8:	50 d9       	stdsp	sp[0x34],r9
800082da:	c0 f8       	rjmp	800082f8 <_dtoa_r+0x2c0>
800082dc:	30 08       	mov	r8,0
800082de:	30 14       	mov	r4,1
800082e0:	50 c8       	stdsp	sp[0x30],r8
800082e2:	3f f5       	mov	r5,-1
800082e4:	30 1c       	mov	r12,1
800082e6:	30 0b       	mov	r11,0
800082e8:	50 95       	stdsp	sp[0x24],r5
800082ea:	50 dc       	stdsp	sp[0x34],r12
800082ec:	0a 91       	mov	r1,r5
800082ee:	31 28       	mov	r8,18
800082f0:	50 eb       	stdsp	sp[0x38],r11
800082f2:	c2 08       	rjmp	80008332 <_dtoa_r+0x2fa>
800082f4:	30 0a       	mov	r10,0
800082f6:	50 da       	stdsp	sp[0x34],r10
800082f8:	40 e9       	lddsp	r9,sp[0x38]
800082fa:	58 09       	cp.w	r9,0
800082fc:	e0 89 00 07 	brgt	8000830a <_dtoa_r+0x2d2>
80008300:	30 18       	mov	r8,1
80008302:	50 98       	stdsp	sp[0x24],r8
80008304:	10 91       	mov	r1,r8
80008306:	50 e8       	stdsp	sp[0x38],r8
80008308:	c1 58       	rjmp	80008332 <_dtoa_r+0x2fa>
8000830a:	40 e5       	lddsp	r5,sp[0x38]
8000830c:	50 95       	stdsp	sp[0x24],r5
8000830e:	0a 91       	mov	r1,r5
80008310:	0a 98       	mov	r8,r5
80008312:	c1 08       	rjmp	80008332 <_dtoa_r+0x2fa>
80008314:	30 0c       	mov	r12,0
80008316:	50 dc       	stdsp	sp[0x34],r12
80008318:	40 eb       	lddsp	r11,sp[0x38]
8000831a:	ec 0b 00 0b 	add	r11,r6,r11
8000831e:	50 9b       	stdsp	sp[0x24],r11
80008320:	16 98       	mov	r8,r11
80008322:	2f f8       	sub	r8,-1
80008324:	58 08       	cp.w	r8,0
80008326:	e0 89 00 05 	brgt	80008330 <_dtoa_r+0x2f8>
8000832a:	10 91       	mov	r1,r8
8000832c:	30 18       	mov	r8,1
8000832e:	c0 28       	rjmp	80008332 <_dtoa_r+0x2fa>
80008330:	10 91       	mov	r1,r8
80008332:	30 09       	mov	r9,0
80008334:	6e 9a       	ld.w	r10,r7[0x24]
80008336:	95 19       	st.w	r10[0x4],r9
80008338:	30 49       	mov	r9,4
8000833a:	c0 78       	rjmp	80008348 <_dtoa_r+0x310>
8000833c:	80 00       	ld.sh	r0,r0[0x0]
8000833e:	c6 30       	breq	80008404 <_dtoa_r+0x3cc>
80008340:	6a 1a       	ld.w	r10,r5[0x4]
80008342:	a1 79       	lsl	r9,0x1
80008344:	2f fa       	sub	r10,-1
80008346:	8b 1a       	st.w	r5[0x4],r10
80008348:	6e 95       	ld.w	r5,r7[0x24]
8000834a:	f2 ca ff ec 	sub	r10,r9,-20
8000834e:	10 3a       	cp.w	r10,r8
80008350:	fe 98 ff f8 	brls	80008340 <_dtoa_r+0x308>
80008354:	6a 1b       	ld.w	r11,r5[0x4]
80008356:	0e 9c       	mov	r12,r7
80008358:	e0 a0 0c 18 	rcall	80009b88 <_Balloc>
8000835c:	58 e1       	cp.w	r1,14
8000835e:	5f 88       	srls	r8
80008360:	8b 0c       	st.w	r5[0x0],r12
80008362:	f1 e4 00 04 	and	r4,r8,r4
80008366:	6e 98       	ld.w	r8,r7[0x24]
80008368:	70 08       	ld.w	r8,r8[0x0]
8000836a:	50 88       	stdsp	sp[0x20],r8
8000836c:	e0 80 01 82 	breq	80008670 <_dtoa_r+0x638>
80008370:	58 06       	cp.w	r6,0
80008372:	e0 8a 00 40 	brle	800083f2 <_dtoa_r+0x3ba>
80008376:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000837a:	4c b8       	lddpc	r8,800084a4 <_dtoa_r+0x46c>
8000837c:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80008380:	fa e5 00 18 	st.d	sp[24],r4
80008384:	ec 04 14 04 	asr	r4,r6,0x4
80008388:	ed b4 00 04 	bld	r4,0x4
8000838c:	c0 30       	breq	80008392 <_dtoa_r+0x35a>
8000838e:	30 25       	mov	r5,2
80008390:	c0 f8       	rjmp	800083ae <_dtoa_r+0x376>
80008392:	4c 68       	lddpc	r8,800084a8 <_dtoa_r+0x470>
80008394:	f0 e8 00 20 	ld.d	r8,r8[32]
80008398:	fa ea 00 3c 	ld.d	r10,sp[60]
8000839c:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800083a0:	e0 a0 14 d8 	rcall	8000ad50 <__avr32_f64_div>
800083a4:	30 35       	mov	r5,3
800083a6:	14 98       	mov	r8,r10
800083a8:	16 99       	mov	r9,r11
800083aa:	fa e9 00 08 	st.d	sp[8],r8
800083ae:	4b fc       	lddpc	r12,800084a8 <_dtoa_r+0x470>
800083b0:	50 a3       	stdsp	sp[0x28],r3
800083b2:	0c 93       	mov	r3,r6
800083b4:	18 96       	mov	r6,r12
800083b6:	c0 f8       	rjmp	800083d4 <_dtoa_r+0x39c>
800083b8:	fa ea 00 18 	ld.d	r10,sp[24]
800083bc:	ed b4 00 00 	bld	r4,0x0
800083c0:	c0 81       	brne	800083d0 <_dtoa_r+0x398>
800083c2:	ec e8 00 00 	ld.d	r8,r6[0]
800083c6:	2f f5       	sub	r5,-1
800083c8:	e0 a0 11 7e 	rcall	8000a6c4 <__avr32_f64_mul>
800083cc:	fa eb 00 18 	st.d	sp[24],r10
800083d0:	a1 54       	asr	r4,0x1
800083d2:	2f 86       	sub	r6,-8
800083d4:	58 04       	cp.w	r4,0
800083d6:	cf 11       	brne	800083b8 <_dtoa_r+0x380>
800083d8:	fa e8 00 18 	ld.d	r8,sp[24]
800083dc:	fa ea 00 08 	ld.d	r10,sp[8]
800083e0:	06 96       	mov	r6,r3
800083e2:	e0 a0 14 b7 	rcall	8000ad50 <__avr32_f64_div>
800083e6:	40 a3       	lddsp	r3,sp[0x28]
800083e8:	14 98       	mov	r8,r10
800083ea:	16 99       	mov	r9,r11
800083ec:	fa e9 00 08 	st.d	sp[8],r8
800083f0:	c2 d8       	rjmp	8000844a <_dtoa_r+0x412>
800083f2:	ec 08 11 00 	rsub	r8,r6,0
800083f6:	c0 31       	brne	800083fc <_dtoa_r+0x3c4>
800083f8:	30 25       	mov	r5,2
800083fa:	c2 88       	rjmp	8000844a <_dtoa_r+0x412>
800083fc:	4a bc       	lddpc	r12,800084a8 <_dtoa_r+0x470>
800083fe:	f0 04 14 04 	asr	r4,r8,0x4
80008402:	50 1c       	stdsp	sp[0x4],r12
80008404:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008408:	4a 79       	lddpc	r9,800084a4 <_dtoa_r+0x46c>
8000840a:	fa ea 00 3c 	ld.d	r10,sp[60]
8000840e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80008412:	e0 a0 11 59 	rcall	8000a6c4 <__avr32_f64_mul>
80008416:	40 1c       	lddsp	r12,sp[0x4]
80008418:	50 63       	stdsp	sp[0x18],r3
8000841a:	30 25       	mov	r5,2
8000841c:	0c 93       	mov	r3,r6
8000841e:	fa eb 00 08 	st.d	sp[8],r10
80008422:	18 96       	mov	r6,r12
80008424:	c0 f8       	rjmp	80008442 <_dtoa_r+0x40a>
80008426:	fa ea 00 08 	ld.d	r10,sp[8]
8000842a:	ed b4 00 00 	bld	r4,0x0
8000842e:	c0 81       	brne	8000843e <_dtoa_r+0x406>
80008430:	ec e8 00 00 	ld.d	r8,r6[0]
80008434:	2f f5       	sub	r5,-1
80008436:	e0 a0 11 47 	rcall	8000a6c4 <__avr32_f64_mul>
8000843a:	fa eb 00 08 	st.d	sp[8],r10
8000843e:	a1 54       	asr	r4,0x1
80008440:	2f 86       	sub	r6,-8
80008442:	58 04       	cp.w	r4,0
80008444:	cf 11       	brne	80008426 <_dtoa_r+0x3ee>
80008446:	06 96       	mov	r6,r3
80008448:	40 63       	lddsp	r3,sp[0x18]
8000844a:	41 4a       	lddsp	r10,sp[0x50]
8000844c:	58 0a       	cp.w	r10,0
8000844e:	c2 f0       	breq	800084ac <_dtoa_r+0x474>
80008450:	fa e8 00 08 	ld.d	r8,sp[8]
80008454:	58 01       	cp.w	r1,0
80008456:	5f 94       	srgt	r4
80008458:	fa e9 00 18 	st.d	sp[24],r8
8000845c:	30 08       	mov	r8,0
8000845e:	fc 19 3f f0 	movh	r9,0x3ff0
80008462:	fa ea 00 18 	ld.d	r10,sp[24]
80008466:	e0 a0 14 41 	rcall	8000ace8 <__avr32_f64_cmp_lt>
8000846a:	f9 bc 00 00 	moveq	r12,0
8000846e:	f9 bc 01 01 	movne	r12,1
80008472:	e9 ec 00 0c 	and	r12,r4,r12
80008476:	c1 b0       	breq	800084ac <_dtoa_r+0x474>
80008478:	40 98       	lddsp	r8,sp[0x24]
8000847a:	58 08       	cp.w	r8,0
8000847c:	e0 8a 00 f6 	brle	80008668 <_dtoa_r+0x630>
80008480:	30 08       	mov	r8,0
80008482:	fc 19 40 24 	movh	r9,0x4024
80008486:	ec c4 00 01 	sub	r4,r6,1
8000848a:	fa ea 00 18 	ld.d	r10,sp[24]
8000848e:	2f f5       	sub	r5,-1
80008490:	50 64       	stdsp	sp[0x18],r4
80008492:	e0 a0 11 19 	rcall	8000a6c4 <__avr32_f64_mul>
80008496:	40 94       	lddsp	r4,sp[0x24]
80008498:	14 98       	mov	r8,r10
8000849a:	16 99       	mov	r9,r11
8000849c:	fa e9 00 08 	st.d	sp[8],r8
800084a0:	c0 88       	rjmp	800084b0 <_dtoa_r+0x478>
800084a2:	d7 03       	nop
800084a4:	80 00       	ld.sh	r0,r0[0x0]
800084a6:	c6 30       	breq	8000856c <_dtoa_r+0x534>
800084a8:	80 00       	ld.sh	r0,r0[0x0]
800084aa:	c6 f8       	rjmp	80008588 <_dtoa_r+0x550>
800084ac:	50 66       	stdsp	sp[0x18],r6
800084ae:	02 94       	mov	r4,r1
800084b0:	0a 9c       	mov	r12,r5
800084b2:	e0 a0 13 64 	rcall	8000ab7a <__avr32_s32_to_f64>
800084b6:	fa e8 00 08 	ld.d	r8,sp[8]
800084ba:	e0 a0 11 05 	rcall	8000a6c4 <__avr32_f64_mul>
800084be:	30 08       	mov	r8,0
800084c0:	fc 19 40 1c 	movh	r9,0x401c
800084c4:	e0 a0 12 ba 	rcall	8000aa38 <__avr32_f64_add>
800084c8:	14 98       	mov	r8,r10
800084ca:	16 99       	mov	r9,r11
800084cc:	fa e9 00 28 	st.d	sp[40],r8
800084d0:	fc 18 fc c0 	movh	r8,0xfcc0
800084d4:	40 a5       	lddsp	r5,sp[0x28]
800084d6:	10 05       	add	r5,r8
800084d8:	50 a5       	stdsp	sp[0x28],r5
800084da:	58 04       	cp.w	r4,0
800084dc:	c2 11       	brne	8000851e <_dtoa_r+0x4e6>
800084de:	fa ea 00 08 	ld.d	r10,sp[8]
800084e2:	30 08       	mov	r8,0
800084e4:	fc 19 40 14 	movh	r9,0x4014
800084e8:	e0 a0 11 da 	rcall	8000a89c <__avr32_f64_sub>
800084ec:	40 bc       	lddsp	r12,sp[0x2c]
800084ee:	fa eb 00 08 	st.d	sp[8],r10
800084f2:	14 98       	mov	r8,r10
800084f4:	16 99       	mov	r9,r11
800084f6:	18 9a       	mov	r10,r12
800084f8:	0a 9b       	mov	r11,r5
800084fa:	e0 a0 13 f7 	rcall	8000ace8 <__avr32_f64_cmp_lt>
800084fe:	e0 81 02 54 	brne	800089a6 <_dtoa_r+0x96e>
80008502:	0a 98       	mov	r8,r5
80008504:	40 b9       	lddsp	r9,sp[0x2c]
80008506:	ee 18 80 00 	eorh	r8,0x8000
8000850a:	fa ea 00 08 	ld.d	r10,sp[8]
8000850e:	10 95       	mov	r5,r8
80008510:	12 98       	mov	r8,r9
80008512:	0a 99       	mov	r9,r5
80008514:	e0 a0 13 ea 	rcall	8000ace8 <__avr32_f64_cmp_lt>
80008518:	e0 81 02 3e 	brne	80008994 <_dtoa_r+0x95c>
8000851c:	ca 68       	rjmp	80008668 <_dtoa_r+0x630>
8000851e:	4c e9       	lddpc	r9,80008654 <_dtoa_r+0x61c>
80008520:	e8 c8 00 01 	sub	r8,r4,1
80008524:	40 d5       	lddsp	r5,sp[0x34]
80008526:	58 05       	cp.w	r5,0
80008528:	c4 f0       	breq	800085c6 <_dtoa_r+0x58e>
8000852a:	30 0c       	mov	r12,0
8000852c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80008530:	51 3c       	stdsp	sp[0x4c],r12
80008532:	30 0a       	mov	r10,0
80008534:	fc 1b 3f e0 	movh	r11,0x3fe0
80008538:	e0 a0 14 0c 	rcall	8000ad50 <__avr32_f64_div>
8000853c:	fa e8 00 28 	ld.d	r8,sp[40]
80008540:	40 85       	lddsp	r5,sp[0x20]
80008542:	e0 a0 11 ad 	rcall	8000a89c <__avr32_f64_sub>
80008546:	fa eb 00 28 	st.d	sp[40],r10
8000854a:	fa ea 00 08 	ld.d	r10,sp[8]
8000854e:	e0 a0 12 ff 	rcall	8000ab4c <__avr32_f64_to_s32>
80008552:	51 6c       	stdsp	sp[0x58],r12
80008554:	e0 a0 13 13 	rcall	8000ab7a <__avr32_s32_to_f64>
80008558:	14 98       	mov	r8,r10
8000855a:	16 99       	mov	r9,r11
8000855c:	fa ea 00 08 	ld.d	r10,sp[8]
80008560:	e0 a0 11 9e 	rcall	8000a89c <__avr32_f64_sub>
80008564:	fa eb 00 08 	st.d	sp[8],r10
80008568:	41 68       	lddsp	r8,sp[0x58]
8000856a:	2d 08       	sub	r8,-48
8000856c:	0a c8       	st.b	r5++,r8
8000856e:	41 39       	lddsp	r9,sp[0x4c]
80008570:	2f f9       	sub	r9,-1
80008572:	51 39       	stdsp	sp[0x4c],r9
80008574:	fa e8 00 28 	ld.d	r8,sp[40]
80008578:	e0 a0 13 b8 	rcall	8000ace8 <__avr32_f64_cmp_lt>
8000857c:	e0 81 03 3a 	brne	80008bf0 <_dtoa_r+0xbb8>
80008580:	fa e8 00 08 	ld.d	r8,sp[8]
80008584:	30 0a       	mov	r10,0
80008586:	fc 1b 3f f0 	movh	r11,0x3ff0
8000858a:	e0 a0 11 89 	rcall	8000a89c <__avr32_f64_sub>
8000858e:	fa e8 00 28 	ld.d	r8,sp[40]
80008592:	e0 a0 13 ab 	rcall	8000ace8 <__avr32_f64_cmp_lt>
80008596:	fa ea 00 28 	ld.d	r10,sp[40]
8000859a:	30 08       	mov	r8,0
8000859c:	fc 19 40 24 	movh	r9,0x4024
800085a0:	e0 81 00 da 	brne	80008754 <_dtoa_r+0x71c>
800085a4:	41 3c       	lddsp	r12,sp[0x4c]
800085a6:	08 3c       	cp.w	r12,r4
800085a8:	c6 04       	brge	80008668 <_dtoa_r+0x630>
800085aa:	e0 a0 10 8d 	rcall	8000a6c4 <__avr32_f64_mul>
800085ae:	30 08       	mov	r8,0
800085b0:	fa eb 00 28 	st.d	sp[40],r10
800085b4:	fc 19 40 24 	movh	r9,0x4024
800085b8:	fa ea 00 08 	ld.d	r10,sp[8]
800085bc:	e0 a0 10 84 	rcall	8000a6c4 <__avr32_f64_mul>
800085c0:	fa eb 00 08 	st.d	sp[8],r10
800085c4:	cc 3b       	rjmp	8000854a <_dtoa_r+0x512>
800085c6:	40 85       	lddsp	r5,sp[0x20]
800085c8:	08 05       	add	r5,r4
800085ca:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800085ce:	51 35       	stdsp	sp[0x4c],r5
800085d0:	fa e8 00 28 	ld.d	r8,sp[40]
800085d4:	40 85       	lddsp	r5,sp[0x20]
800085d6:	e0 a0 10 77 	rcall	8000a6c4 <__avr32_f64_mul>
800085da:	fa eb 00 28 	st.d	sp[40],r10
800085de:	fa ea 00 08 	ld.d	r10,sp[8]
800085e2:	e0 a0 12 b5 	rcall	8000ab4c <__avr32_f64_to_s32>
800085e6:	51 6c       	stdsp	sp[0x58],r12
800085e8:	e0 a0 12 c9 	rcall	8000ab7a <__avr32_s32_to_f64>
800085ec:	14 98       	mov	r8,r10
800085ee:	16 99       	mov	r9,r11
800085f0:	fa ea 00 08 	ld.d	r10,sp[8]
800085f4:	e0 a0 11 54 	rcall	8000a89c <__avr32_f64_sub>
800085f8:	fa eb 00 08 	st.d	sp[8],r10
800085fc:	41 68       	lddsp	r8,sp[0x58]
800085fe:	2d 08       	sub	r8,-48
80008600:	0a c8       	st.b	r5++,r8
80008602:	41 3c       	lddsp	r12,sp[0x4c]
80008604:	18 35       	cp.w	r5,r12
80008606:	c2 91       	brne	80008658 <_dtoa_r+0x620>
80008608:	30 08       	mov	r8,0
8000860a:	fc 19 3f e0 	movh	r9,0x3fe0
8000860e:	fa ea 00 28 	ld.d	r10,sp[40]
80008612:	e0 a0 12 13 	rcall	8000aa38 <__avr32_f64_add>
80008616:	40 85       	lddsp	r5,sp[0x20]
80008618:	fa e8 00 08 	ld.d	r8,sp[8]
8000861c:	08 05       	add	r5,r4
8000861e:	e0 a0 13 65 	rcall	8000ace8 <__avr32_f64_cmp_lt>
80008622:	e0 81 00 99 	brne	80008754 <_dtoa_r+0x71c>
80008626:	fa e8 00 28 	ld.d	r8,sp[40]
8000862a:	30 0a       	mov	r10,0
8000862c:	fc 1b 3f e0 	movh	r11,0x3fe0
80008630:	e0 a0 11 36 	rcall	8000a89c <__avr32_f64_sub>
80008634:	14 98       	mov	r8,r10
80008636:	16 99       	mov	r9,r11
80008638:	fa ea 00 08 	ld.d	r10,sp[8]
8000863c:	e0 a0 13 56 	rcall	8000ace8 <__avr32_f64_cmp_lt>
80008640:	c1 40       	breq	80008668 <_dtoa_r+0x630>
80008642:	33 09       	mov	r9,48
80008644:	0a 98       	mov	r8,r5
80008646:	11 7a       	ld.ub	r10,--r8
80008648:	f2 0a 18 00 	cp.b	r10,r9
8000864c:	e0 81 02 d2 	brne	80008bf0 <_dtoa_r+0xbb8>
80008650:	10 95       	mov	r5,r8
80008652:	cf 9b       	rjmp	80008644 <_dtoa_r+0x60c>
80008654:	80 00       	ld.sh	r0,r0[0x0]
80008656:	c6 30       	breq	8000871c <_dtoa_r+0x6e4>
80008658:	30 08       	mov	r8,0
8000865a:	fc 19 40 24 	movh	r9,0x4024
8000865e:	e0 a0 10 33 	rcall	8000a6c4 <__avr32_f64_mul>
80008662:	fa eb 00 08 	st.d	sp[8],r10
80008666:	cb cb       	rjmp	800085de <_dtoa_r+0x5a6>
80008668:	fa ea 00 3c 	ld.d	r10,sp[60]
8000866c:	fa eb 00 08 	st.d	sp[8],r10
80008670:	58 e6       	cp.w	r6,14
80008672:	5f ab       	srle	r11
80008674:	41 8a       	lddsp	r10,sp[0x60]
80008676:	30 08       	mov	r8,0
80008678:	f4 09 11 ff 	rsub	r9,r10,-1
8000867c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008680:	f0 09 18 00 	cp.b	r9,r8
80008684:	e0 80 00 81 	breq	80008786 <_dtoa_r+0x74e>
80008688:	40 ea       	lddsp	r10,sp[0x38]
8000868a:	58 01       	cp.w	r1,0
8000868c:	5f a9       	srle	r9
8000868e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80008692:	4c 9a       	lddpc	r10,800087b4 <_dtoa_r+0x77c>
80008694:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80008698:	fa e5 00 10 	st.d	sp[16],r4
8000869c:	f0 09 18 00 	cp.b	r9,r8
800086a0:	c1 40       	breq	800086c8 <_dtoa_r+0x690>
800086a2:	58 01       	cp.w	r1,0
800086a4:	e0 81 01 78 	brne	80008994 <_dtoa_r+0x95c>
800086a8:	30 08       	mov	r8,0
800086aa:	fc 19 40 14 	movh	r9,0x4014
800086ae:	08 9a       	mov	r10,r4
800086b0:	0a 9b       	mov	r11,r5
800086b2:	e0 a0 10 09 	rcall	8000a6c4 <__avr32_f64_mul>
800086b6:	fa e8 00 08 	ld.d	r8,sp[8]
800086ba:	e0 a0 12 e3 	rcall	8000ac80 <__avr32_f64_cmp_ge>
800086be:	e0 81 01 6b 	brne	80008994 <_dtoa_r+0x95c>
800086c2:	02 92       	mov	r2,r1
800086c4:	e0 8f 01 73 	bral	800089aa <_dtoa_r+0x972>
800086c8:	40 85       	lddsp	r5,sp[0x20]
800086ca:	30 14       	mov	r4,1
800086cc:	fa e8 00 10 	ld.d	r8,sp[16]
800086d0:	fa ea 00 08 	ld.d	r10,sp[8]
800086d4:	e0 a0 13 3e 	rcall	8000ad50 <__avr32_f64_div>
800086d8:	e0 a0 12 3a 	rcall	8000ab4c <__avr32_f64_to_s32>
800086dc:	18 92       	mov	r2,r12
800086de:	e0 a0 12 4e 	rcall	8000ab7a <__avr32_s32_to_f64>
800086e2:	fa e8 00 10 	ld.d	r8,sp[16]
800086e6:	e0 a0 0f ef 	rcall	8000a6c4 <__avr32_f64_mul>
800086ea:	14 98       	mov	r8,r10
800086ec:	16 99       	mov	r9,r11
800086ee:	fa ea 00 08 	ld.d	r10,sp[8]
800086f2:	e0 a0 10 d5 	rcall	8000a89c <__avr32_f64_sub>
800086f6:	fa eb 00 08 	st.d	sp[8],r10
800086fa:	e4 c8 ff d0 	sub	r8,r2,-48
800086fe:	0a c8       	st.b	r5++,r8
80008700:	fc 19 40 24 	movh	r9,0x4024
80008704:	30 08       	mov	r8,0
80008706:	02 34       	cp.w	r4,r1
80008708:	c3 31       	brne	8000876e <_dtoa_r+0x736>
8000870a:	fa e8 00 08 	ld.d	r8,sp[8]
8000870e:	e0 a0 11 95 	rcall	8000aa38 <__avr32_f64_add>
80008712:	16 91       	mov	r1,r11
80008714:	14 90       	mov	r0,r10
80008716:	14 98       	mov	r8,r10
80008718:	02 99       	mov	r9,r1
8000871a:	fa ea 00 10 	ld.d	r10,sp[16]
8000871e:	e0 a0 12 e5 	rcall	8000ace8 <__avr32_f64_cmp_lt>
80008722:	c1 a1       	brne	80008756 <_dtoa_r+0x71e>
80008724:	fa e8 00 10 	ld.d	r8,sp[16]
80008728:	00 9a       	mov	r10,r0
8000872a:	02 9b       	mov	r11,r1
8000872c:	e0 a0 12 97 	rcall	8000ac5a <__avr32_f64_cmp_eq>
80008730:	e0 80 02 5f 	breq	80008bee <_dtoa_r+0xbb6>
80008734:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80008738:	c0 f1       	brne	80008756 <_dtoa_r+0x71e>
8000873a:	e0 8f 02 5a 	bral	80008bee <_dtoa_r+0xbb6>
8000873e:	40 8a       	lddsp	r10,sp[0x20]
80008740:	14 38       	cp.w	r8,r10
80008742:	c0 30       	breq	80008748 <_dtoa_r+0x710>
80008744:	10 95       	mov	r5,r8
80008746:	c0 98       	rjmp	80008758 <_dtoa_r+0x720>
80008748:	33 08       	mov	r8,48
8000874a:	40 89       	lddsp	r9,sp[0x20]
8000874c:	2f f6       	sub	r6,-1
8000874e:	b2 88       	st.b	r9[0x0],r8
80008750:	40 88       	lddsp	r8,sp[0x20]
80008752:	c0 88       	rjmp	80008762 <_dtoa_r+0x72a>
80008754:	40 66       	lddsp	r6,sp[0x18]
80008756:	33 99       	mov	r9,57
80008758:	0a 98       	mov	r8,r5
8000875a:	11 7a       	ld.ub	r10,--r8
8000875c:	f2 0a 18 00 	cp.b	r10,r9
80008760:	ce f0       	breq	8000873e <_dtoa_r+0x706>
80008762:	50 66       	stdsp	sp[0x18],r6
80008764:	11 89       	ld.ub	r9,r8[0x0]
80008766:	2f f9       	sub	r9,-1
80008768:	b0 89       	st.b	r8[0x0],r9
8000876a:	e0 8f 02 43 	bral	80008bf0 <_dtoa_r+0xbb8>
8000876e:	e0 a0 0f ab 	rcall	8000a6c4 <__avr32_f64_mul>
80008772:	2f f4       	sub	r4,-1
80008774:	fa eb 00 08 	st.d	sp[8],r10
80008778:	30 08       	mov	r8,0
8000877a:	30 09       	mov	r9,0
8000877c:	e0 a0 12 6f 	rcall	8000ac5a <__avr32_f64_cmp_eq>
80008780:	ca 60       	breq	800086cc <_dtoa_r+0x694>
80008782:	e0 8f 02 36 	bral	80008bee <_dtoa_r+0xbb6>
80008786:	40 d8       	lddsp	r8,sp[0x34]
80008788:	58 08       	cp.w	r8,0
8000878a:	c0 51       	brne	80008794 <_dtoa_r+0x75c>
8000878c:	04 98       	mov	r8,r2
8000878e:	00 95       	mov	r5,r0
80008790:	40 d4       	lddsp	r4,sp[0x34]
80008792:	c3 88       	rjmp	80008802 <_dtoa_r+0x7ca>
80008794:	40 c5       	lddsp	r5,sp[0x30]
80008796:	58 15       	cp.w	r5,1
80008798:	e0 89 00 10 	brgt	800087b8 <_dtoa_r+0x780>
8000879c:	41 74       	lddsp	r4,sp[0x5c]
8000879e:	58 04       	cp.w	r4,0
800087a0:	c0 40       	breq	800087a8 <_dtoa_r+0x770>
800087a2:	f4 c9 fb cd 	sub	r9,r10,-1075
800087a6:	c0 48       	rjmp	800087ae <_dtoa_r+0x776>
800087a8:	41 99       	lddsp	r9,sp[0x64]
800087aa:	f2 09 11 36 	rsub	r9,r9,54
800087ae:	04 98       	mov	r8,r2
800087b0:	00 95       	mov	r5,r0
800087b2:	c1 d8       	rjmp	800087ec <_dtoa_r+0x7b4>
800087b4:	80 00       	ld.sh	r0,r0[0x0]
800087b6:	c6 30       	breq	8000887c <_dtoa_r+0x844>
800087b8:	e2 c8 00 01 	sub	r8,r1,1
800087bc:	58 01       	cp.w	r1,0
800087be:	e0 05 17 40 	movge	r5,r0
800087c2:	e2 09 17 40 	movge	r9,r1
800087c6:	e1 d1 e5 15 	sublt	r5,r0,r1
800087ca:	f9 b9 05 00 	movlt	r9,0
800087ce:	10 32       	cp.w	r2,r8
800087d0:	e5 d8 e4 18 	subge	r8,r2,r8
800087d4:	f1 d2 e5 18 	sublt	r8,r8,r2
800087d8:	e5 d8 e5 02 	addlt	r2,r2,r8
800087dc:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800087e0:	f9 d8 e5 0c 	addlt	r12,r12,r8
800087e4:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800087e8:	f9 b8 05 00 	movlt	r8,0
800087ec:	40 4b       	lddsp	r11,sp[0x10]
800087ee:	12 0b       	add	r11,r9
800087f0:	50 08       	stdsp	sp[0x0],r8
800087f2:	50 4b       	stdsp	sp[0x10],r11
800087f4:	12 00       	add	r0,r9
800087f6:	30 1b       	mov	r11,1
800087f8:	0e 9c       	mov	r12,r7
800087fa:	e0 a0 0b 7b 	rcall	80009ef0 <__i2b>
800087fe:	40 08       	lddsp	r8,sp[0x0]
80008800:	18 94       	mov	r4,r12
80008802:	40 4a       	lddsp	r10,sp[0x10]
80008804:	58 05       	cp.w	r5,0
80008806:	5f 99       	srgt	r9
80008808:	58 0a       	cp.w	r10,0
8000880a:	5f 9a       	srgt	r10
8000880c:	f5 e9 00 09 	and	r9,r10,r9
80008810:	c0 80       	breq	80008820 <_dtoa_r+0x7e8>
80008812:	40 4c       	lddsp	r12,sp[0x10]
80008814:	f8 05 0d 49 	min	r9,r12,r5
80008818:	12 1c       	sub	r12,r9
8000881a:	12 10       	sub	r0,r9
8000881c:	50 4c       	stdsp	sp[0x10],r12
8000881e:	12 15       	sub	r5,r9
80008820:	58 02       	cp.w	r2,0
80008822:	e0 8a 00 27 	brle	80008870 <_dtoa_r+0x838>
80008826:	40 db       	lddsp	r11,sp[0x34]
80008828:	58 0b       	cp.w	r11,0
8000882a:	c1 d0       	breq	80008864 <_dtoa_r+0x82c>
8000882c:	58 08       	cp.w	r8,0
8000882e:	e0 8a 00 17 	brle	8000885c <_dtoa_r+0x824>
80008832:	10 9a       	mov	r10,r8
80008834:	50 08       	stdsp	sp[0x0],r8
80008836:	08 9b       	mov	r11,r4
80008838:	0e 9c       	mov	r12,r7
8000883a:	e0 a0 0b a1 	rcall	80009f7c <__pow5mult>
8000883e:	06 9a       	mov	r10,r3
80008840:	18 9b       	mov	r11,r12
80008842:	18 94       	mov	r4,r12
80008844:	0e 9c       	mov	r12,r7
80008846:	e0 a0 0a d5 	rcall	80009df0 <__multiply>
8000884a:	18 99       	mov	r9,r12
8000884c:	06 9b       	mov	r11,r3
8000884e:	50 19       	stdsp	sp[0x4],r9
80008850:	0e 9c       	mov	r12,r7
80008852:	e0 a0 09 81 	rcall	80009b54 <_Bfree>
80008856:	40 19       	lddsp	r9,sp[0x4]
80008858:	40 08       	lddsp	r8,sp[0x0]
8000885a:	12 93       	mov	r3,r9
8000885c:	e4 08 01 0a 	sub	r10,r2,r8
80008860:	c0 80       	breq	80008870 <_dtoa_r+0x838>
80008862:	c0 28       	rjmp	80008866 <_dtoa_r+0x82e>
80008864:	04 9a       	mov	r10,r2
80008866:	06 9b       	mov	r11,r3
80008868:	0e 9c       	mov	r12,r7
8000886a:	e0 a0 0b 89 	rcall	80009f7c <__pow5mult>
8000886e:	18 93       	mov	r3,r12
80008870:	30 1b       	mov	r11,1
80008872:	0e 9c       	mov	r12,r7
80008874:	e0 a0 0b 3e 	rcall	80009ef0 <__i2b>
80008878:	41 1a       	lddsp	r10,sp[0x44]
8000887a:	18 92       	mov	r2,r12
8000887c:	58 0a       	cp.w	r10,0
8000887e:	e0 8a 00 07 	brle	8000888c <_dtoa_r+0x854>
80008882:	18 9b       	mov	r11,r12
80008884:	0e 9c       	mov	r12,r7
80008886:	e0 a0 0b 7b 	rcall	80009f7c <__pow5mult>
8000888a:	18 92       	mov	r2,r12
8000888c:	40 c9       	lddsp	r9,sp[0x30]
8000888e:	58 19       	cp.w	r9,1
80008890:	e0 89 00 14 	brgt	800088b8 <_dtoa_r+0x880>
80008894:	40 38       	lddsp	r8,sp[0xc]
80008896:	58 08       	cp.w	r8,0
80008898:	c1 01       	brne	800088b8 <_dtoa_r+0x880>
8000889a:	40 29       	lddsp	r9,sp[0x8]
8000889c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800088a0:	c0 c1       	brne	800088b8 <_dtoa_r+0x880>
800088a2:	12 98       	mov	r8,r9
800088a4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800088a8:	c0 80       	breq	800088b8 <_dtoa_r+0x880>
800088aa:	40 4c       	lddsp	r12,sp[0x10]
800088ac:	30 1b       	mov	r11,1
800088ae:	2f fc       	sub	r12,-1
800088b0:	2f f0       	sub	r0,-1
800088b2:	50 4c       	stdsp	sp[0x10],r12
800088b4:	50 6b       	stdsp	sp[0x18],r11
800088b6:	c0 38       	rjmp	800088bc <_dtoa_r+0x884>
800088b8:	30 0a       	mov	r10,0
800088ba:	50 6a       	stdsp	sp[0x18],r10
800088bc:	41 19       	lddsp	r9,sp[0x44]
800088be:	58 09       	cp.w	r9,0
800088c0:	c0 31       	brne	800088c6 <_dtoa_r+0x88e>
800088c2:	30 1c       	mov	r12,1
800088c4:	c0 98       	rjmp	800088d6 <_dtoa_r+0x89e>
800088c6:	64 48       	ld.w	r8,r2[0x10]
800088c8:	2f c8       	sub	r8,-4
800088ca:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800088ce:	e0 a0 08 b2 	rcall	80009a32 <__hi0bits>
800088d2:	f8 0c 11 20 	rsub	r12,r12,32
800088d6:	40 4b       	lddsp	r11,sp[0x10]
800088d8:	f8 0b 00 08 	add	r8,r12,r11
800088dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800088e0:	c0 c0       	breq	800088f8 <_dtoa_r+0x8c0>
800088e2:	f0 08 11 20 	rsub	r8,r8,32
800088e6:	58 48       	cp.w	r8,4
800088e8:	e0 8a 00 06 	brle	800088f4 <_dtoa_r+0x8bc>
800088ec:	20 48       	sub	r8,4
800088ee:	10 0b       	add	r11,r8
800088f0:	50 4b       	stdsp	sp[0x10],r11
800088f2:	c0 78       	rjmp	80008900 <_dtoa_r+0x8c8>
800088f4:	58 48       	cp.w	r8,4
800088f6:	c0 70       	breq	80008904 <_dtoa_r+0x8cc>
800088f8:	40 4a       	lddsp	r10,sp[0x10]
800088fa:	2e 48       	sub	r8,-28
800088fc:	10 0a       	add	r10,r8
800088fe:	50 4a       	stdsp	sp[0x10],r10
80008900:	10 00       	add	r0,r8
80008902:	10 05       	add	r5,r8
80008904:	58 00       	cp.w	r0,0
80008906:	e0 8a 00 08 	brle	80008916 <_dtoa_r+0x8de>
8000890a:	06 9b       	mov	r11,r3
8000890c:	00 9a       	mov	r10,r0
8000890e:	0e 9c       	mov	r12,r7
80008910:	e0 a0 0a 2c 	rcall	80009d68 <__lshift>
80008914:	18 93       	mov	r3,r12
80008916:	40 49       	lddsp	r9,sp[0x10]
80008918:	58 09       	cp.w	r9,0
8000891a:	e0 8a 00 08 	brle	8000892a <_dtoa_r+0x8f2>
8000891e:	04 9b       	mov	r11,r2
80008920:	12 9a       	mov	r10,r9
80008922:	0e 9c       	mov	r12,r7
80008924:	e0 a0 0a 22 	rcall	80009d68 <__lshift>
80008928:	18 92       	mov	r2,r12
8000892a:	41 48       	lddsp	r8,sp[0x50]
8000892c:	58 08       	cp.w	r8,0
8000892e:	c1 b0       	breq	80008964 <_dtoa_r+0x92c>
80008930:	04 9b       	mov	r11,r2
80008932:	06 9c       	mov	r12,r3
80008934:	e0 a0 08 f6 	rcall	80009b20 <__mcmp>
80008938:	c1 64       	brge	80008964 <_dtoa_r+0x92c>
8000893a:	06 9b       	mov	r11,r3
8000893c:	30 09       	mov	r9,0
8000893e:	30 aa       	mov	r10,10
80008940:	0e 9c       	mov	r12,r7
80008942:	e0 a0 0a df 	rcall	80009f00 <__multadd>
80008946:	20 16       	sub	r6,1
80008948:	18 93       	mov	r3,r12
8000894a:	40 dc       	lddsp	r12,sp[0x34]
8000894c:	58 0c       	cp.w	r12,0
8000894e:	c0 31       	brne	80008954 <_dtoa_r+0x91c>
80008950:	40 91       	lddsp	r1,sp[0x24]
80008952:	c0 98       	rjmp	80008964 <_dtoa_r+0x92c>
80008954:	08 9b       	mov	r11,r4
80008956:	40 91       	lddsp	r1,sp[0x24]
80008958:	30 09       	mov	r9,0
8000895a:	30 aa       	mov	r10,10
8000895c:	0e 9c       	mov	r12,r7
8000895e:	e0 a0 0a d1 	rcall	80009f00 <__multadd>
80008962:	18 94       	mov	r4,r12
80008964:	58 01       	cp.w	r1,0
80008966:	5f a9       	srle	r9
80008968:	40 cb       	lddsp	r11,sp[0x30]
8000896a:	58 2b       	cp.w	r11,2
8000896c:	5f 98       	srgt	r8
8000896e:	f3 e8 00 08 	and	r8,r9,r8
80008972:	c2 50       	breq	800089bc <_dtoa_r+0x984>
80008974:	58 01       	cp.w	r1,0
80008976:	c1 11       	brne	80008998 <_dtoa_r+0x960>
80008978:	04 9b       	mov	r11,r2
8000897a:	02 99       	mov	r9,r1
8000897c:	30 5a       	mov	r10,5
8000897e:	0e 9c       	mov	r12,r7
80008980:	e0 a0 0a c0 	rcall	80009f00 <__multadd>
80008984:	18 92       	mov	r2,r12
80008986:	18 9b       	mov	r11,r12
80008988:	06 9c       	mov	r12,r3
8000898a:	e0 a0 08 cb 	rcall	80009b20 <__mcmp>
8000898e:	e0 89 00 0f 	brgt	800089ac <_dtoa_r+0x974>
80008992:	c0 38       	rjmp	80008998 <_dtoa_r+0x960>
80008994:	30 02       	mov	r2,0
80008996:	04 94       	mov	r4,r2
80008998:	40 ea       	lddsp	r10,sp[0x38]
8000899a:	30 09       	mov	r9,0
8000899c:	5c da       	com	r10
8000899e:	40 85       	lddsp	r5,sp[0x20]
800089a0:	50 6a       	stdsp	sp[0x18],r10
800089a2:	50 49       	stdsp	sp[0x10],r9
800089a4:	c0 f9       	rjmp	80008bc2 <_dtoa_r+0xb8a>
800089a6:	08 92       	mov	r2,r4
800089a8:	40 66       	lddsp	r6,sp[0x18]
800089aa:	04 94       	mov	r4,r2
800089ac:	2f f6       	sub	r6,-1
800089ae:	50 66       	stdsp	sp[0x18],r6
800089b0:	33 18       	mov	r8,49
800089b2:	40 85       	lddsp	r5,sp[0x20]
800089b4:	0a c8       	st.b	r5++,r8
800089b6:	30 08       	mov	r8,0
800089b8:	50 48       	stdsp	sp[0x10],r8
800089ba:	c0 49       	rjmp	80008bc2 <_dtoa_r+0xb8a>
800089bc:	40 dc       	lddsp	r12,sp[0x34]
800089be:	58 0c       	cp.w	r12,0
800089c0:	e0 80 00 b5 	breq	80008b2a <_dtoa_r+0xaf2>
800089c4:	58 05       	cp.w	r5,0
800089c6:	e0 8a 00 08 	brle	800089d6 <_dtoa_r+0x99e>
800089ca:	08 9b       	mov	r11,r4
800089cc:	0a 9a       	mov	r10,r5
800089ce:	0e 9c       	mov	r12,r7
800089d0:	e0 a0 09 cc 	rcall	80009d68 <__lshift>
800089d4:	18 94       	mov	r4,r12
800089d6:	40 6b       	lddsp	r11,sp[0x18]
800089d8:	58 0b       	cp.w	r11,0
800089da:	c0 31       	brne	800089e0 <_dtoa_r+0x9a8>
800089dc:	08 9c       	mov	r12,r4
800089de:	c1 38       	rjmp	80008a04 <_dtoa_r+0x9cc>
800089e0:	68 1b       	ld.w	r11,r4[0x4]
800089e2:	0e 9c       	mov	r12,r7
800089e4:	e0 a0 08 d2 	rcall	80009b88 <_Balloc>
800089e8:	68 4a       	ld.w	r10,r4[0x10]
800089ea:	18 95       	mov	r5,r12
800089ec:	e8 cb ff f4 	sub	r11,r4,-12
800089f0:	2f ea       	sub	r10,-2
800089f2:	2f 4c       	sub	r12,-12
800089f4:	a3 6a       	lsl	r10,0x2
800089f6:	e0 a0 07 52 	rcall	8000989a <memcpy>
800089fa:	0a 9b       	mov	r11,r5
800089fc:	30 1a       	mov	r10,1
800089fe:	0e 9c       	mov	r12,r7
80008a00:	e0 a0 09 b4 	rcall	80009d68 <__lshift>
80008a04:	50 44       	stdsp	sp[0x10],r4
80008a06:	40 3a       	lddsp	r10,sp[0xc]
80008a08:	30 19       	mov	r9,1
80008a0a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008a0e:	18 94       	mov	r4,r12
80008a10:	50 da       	stdsp	sp[0x34],r10
80008a12:	40 85       	lddsp	r5,sp[0x20]
80008a14:	50 99       	stdsp	sp[0x24],r9
80008a16:	50 26       	stdsp	sp[0x8],r6
80008a18:	50 e1       	stdsp	sp[0x38],r1
80008a1a:	04 9b       	mov	r11,r2
80008a1c:	06 9c       	mov	r12,r3
80008a1e:	fe b0 fa 7d 	rcall	80007f18 <quorem>
80008a22:	40 4b       	lddsp	r11,sp[0x10]
80008a24:	f8 c0 ff d0 	sub	r0,r12,-48
80008a28:	06 9c       	mov	r12,r3
80008a2a:	e0 a0 08 7b 	rcall	80009b20 <__mcmp>
80008a2e:	08 9a       	mov	r10,r4
80008a30:	50 6c       	stdsp	sp[0x18],r12
80008a32:	04 9b       	mov	r11,r2
80008a34:	0e 9c       	mov	r12,r7
80008a36:	e0 a0 09 31 	rcall	80009c98 <__mdiff>
80008a3a:	18 91       	mov	r1,r12
80008a3c:	78 38       	ld.w	r8,r12[0xc]
80008a3e:	58 08       	cp.w	r8,0
80008a40:	c0 30       	breq	80008a46 <_dtoa_r+0xa0e>
80008a42:	30 16       	mov	r6,1
80008a44:	c0 68       	rjmp	80008a50 <_dtoa_r+0xa18>
80008a46:	18 9b       	mov	r11,r12
80008a48:	06 9c       	mov	r12,r3
80008a4a:	e0 a0 08 6b 	rcall	80009b20 <__mcmp>
80008a4e:	18 96       	mov	r6,r12
80008a50:	0e 9c       	mov	r12,r7
80008a52:	02 9b       	mov	r11,r1
80008a54:	e0 a0 08 80 	rcall	80009b54 <_Bfree>
80008a58:	40 cc       	lddsp	r12,sp[0x30]
80008a5a:	ed ec 10 08 	or	r8,r6,r12
80008a5e:	c0 d1       	brne	80008a78 <_dtoa_r+0xa40>
80008a60:	40 db       	lddsp	r11,sp[0x34]
80008a62:	58 0b       	cp.w	r11,0
80008a64:	c0 a1       	brne	80008a78 <_dtoa_r+0xa40>
80008a66:	40 26       	lddsp	r6,sp[0x8]
80008a68:	e0 40 00 39 	cp.w	r0,57
80008a6c:	c3 00       	breq	80008acc <_dtoa_r+0xa94>
80008a6e:	40 6a       	lddsp	r10,sp[0x18]
80008a70:	58 0a       	cp.w	r10,0
80008a72:	e0 89 00 24 	brgt	80008aba <_dtoa_r+0xa82>
80008a76:	c2 f8       	rjmp	80008ad4 <_dtoa_r+0xa9c>
80008a78:	40 69       	lddsp	r9,sp[0x18]
80008a7a:	58 09       	cp.w	r9,0
80008a7c:	c0 85       	brlt	80008a8c <_dtoa_r+0xa54>
80008a7e:	12 98       	mov	r8,r9
80008a80:	40 cc       	lddsp	r12,sp[0x30]
80008a82:	18 48       	or	r8,r12
80008a84:	c1 d1       	brne	80008abe <_dtoa_r+0xa86>
80008a86:	40 db       	lddsp	r11,sp[0x34]
80008a88:	58 0b       	cp.w	r11,0
80008a8a:	c1 a1       	brne	80008abe <_dtoa_r+0xa86>
80008a8c:	0c 99       	mov	r9,r6
80008a8e:	40 26       	lddsp	r6,sp[0x8]
80008a90:	58 09       	cp.w	r9,0
80008a92:	e0 8a 00 21 	brle	80008ad4 <_dtoa_r+0xa9c>
80008a96:	06 9b       	mov	r11,r3
80008a98:	30 1a       	mov	r10,1
80008a9a:	0e 9c       	mov	r12,r7
80008a9c:	e0 a0 09 66 	rcall	80009d68 <__lshift>
80008aa0:	04 9b       	mov	r11,r2
80008aa2:	18 93       	mov	r3,r12
80008aa4:	e0 a0 08 3e 	rcall	80009b20 <__mcmp>
80008aa8:	e0 89 00 06 	brgt	80008ab4 <_dtoa_r+0xa7c>
80008aac:	c1 41       	brne	80008ad4 <_dtoa_r+0xa9c>
80008aae:	ed b0 00 00 	bld	r0,0x0
80008ab2:	c1 11       	brne	80008ad4 <_dtoa_r+0xa9c>
80008ab4:	e0 40 00 39 	cp.w	r0,57
80008ab8:	c0 a0       	breq	80008acc <_dtoa_r+0xa94>
80008aba:	2f f0       	sub	r0,-1
80008abc:	c0 c8       	rjmp	80008ad4 <_dtoa_r+0xa9c>
80008abe:	58 06       	cp.w	r6,0
80008ac0:	e0 8a 00 0c 	brle	80008ad8 <_dtoa_r+0xaa0>
80008ac4:	40 26       	lddsp	r6,sp[0x8]
80008ac6:	e0 40 00 39 	cp.w	r0,57
80008aca:	c0 41       	brne	80008ad2 <_dtoa_r+0xa9a>
80008acc:	33 98       	mov	r8,57
80008ace:	0a c8       	st.b	r5++,r8
80008ad0:	c6 78       	rjmp	80008b9e <_dtoa_r+0xb66>
80008ad2:	2f f0       	sub	r0,-1
80008ad4:	0a c0       	st.b	r5++,r0
80008ad6:	c7 58       	rjmp	80008bc0 <_dtoa_r+0xb88>
80008ad8:	0a c0       	st.b	r5++,r0
80008ada:	40 9a       	lddsp	r10,sp[0x24]
80008adc:	40 e9       	lddsp	r9,sp[0x38]
80008ade:	12 3a       	cp.w	r10,r9
80008ae0:	c4 30       	breq	80008b66 <_dtoa_r+0xb2e>
80008ae2:	06 9b       	mov	r11,r3
80008ae4:	30 09       	mov	r9,0
80008ae6:	30 aa       	mov	r10,10
80008ae8:	0e 9c       	mov	r12,r7
80008aea:	e0 a0 0a 0b 	rcall	80009f00 <__multadd>
80008aee:	40 48       	lddsp	r8,sp[0x10]
80008af0:	18 93       	mov	r3,r12
80008af2:	08 38       	cp.w	r8,r4
80008af4:	c0 91       	brne	80008b06 <_dtoa_r+0xace>
80008af6:	10 9b       	mov	r11,r8
80008af8:	30 09       	mov	r9,0
80008afa:	30 aa       	mov	r10,10
80008afc:	0e 9c       	mov	r12,r7
80008afe:	e0 a0 0a 01 	rcall	80009f00 <__multadd>
80008b02:	50 4c       	stdsp	sp[0x10],r12
80008b04:	c0 e8       	rjmp	80008b20 <_dtoa_r+0xae8>
80008b06:	40 4b       	lddsp	r11,sp[0x10]
80008b08:	30 09       	mov	r9,0
80008b0a:	30 aa       	mov	r10,10
80008b0c:	0e 9c       	mov	r12,r7
80008b0e:	e0 a0 09 f9 	rcall	80009f00 <__multadd>
80008b12:	08 9b       	mov	r11,r4
80008b14:	50 4c       	stdsp	sp[0x10],r12
80008b16:	30 09       	mov	r9,0
80008b18:	30 aa       	mov	r10,10
80008b1a:	0e 9c       	mov	r12,r7
80008b1c:	e0 a0 09 f2 	rcall	80009f00 <__multadd>
80008b20:	18 94       	mov	r4,r12
80008b22:	40 9c       	lddsp	r12,sp[0x24]
80008b24:	2f fc       	sub	r12,-1
80008b26:	50 9c       	stdsp	sp[0x24],r12
80008b28:	c7 9b       	rjmp	80008a1a <_dtoa_r+0x9e2>
80008b2a:	30 18       	mov	r8,1
80008b2c:	06 90       	mov	r0,r3
80008b2e:	40 85       	lddsp	r5,sp[0x20]
80008b30:	08 93       	mov	r3,r4
80008b32:	0c 94       	mov	r4,r6
80008b34:	10 96       	mov	r6,r8
80008b36:	04 9b       	mov	r11,r2
80008b38:	00 9c       	mov	r12,r0
80008b3a:	fe b0 f9 ef 	rcall	80007f18 <quorem>
80008b3e:	2d 0c       	sub	r12,-48
80008b40:	0a cc       	st.b	r5++,r12
80008b42:	02 36       	cp.w	r6,r1
80008b44:	c0 a4       	brge	80008b58 <_dtoa_r+0xb20>
80008b46:	00 9b       	mov	r11,r0
80008b48:	30 09       	mov	r9,0
80008b4a:	30 aa       	mov	r10,10
80008b4c:	0e 9c       	mov	r12,r7
80008b4e:	2f f6       	sub	r6,-1
80008b50:	e0 a0 09 d8 	rcall	80009f00 <__multadd>
80008b54:	18 90       	mov	r0,r12
80008b56:	cf 0b       	rjmp	80008b36 <_dtoa_r+0xafe>
80008b58:	08 96       	mov	r6,r4
80008b5a:	30 0b       	mov	r11,0
80008b5c:	06 94       	mov	r4,r3
80008b5e:	50 4b       	stdsp	sp[0x10],r11
80008b60:	00 93       	mov	r3,r0
80008b62:	18 90       	mov	r0,r12
80008b64:	c0 28       	rjmp	80008b68 <_dtoa_r+0xb30>
80008b66:	40 26       	lddsp	r6,sp[0x8]
80008b68:	06 9b       	mov	r11,r3
80008b6a:	30 1a       	mov	r10,1
80008b6c:	0e 9c       	mov	r12,r7
80008b6e:	e0 a0 08 fd 	rcall	80009d68 <__lshift>
80008b72:	04 9b       	mov	r11,r2
80008b74:	18 93       	mov	r3,r12
80008b76:	e0 a0 07 d5 	rcall	80009b20 <__mcmp>
80008b7a:	e0 89 00 12 	brgt	80008b9e <_dtoa_r+0xb66>
80008b7e:	c1 b1       	brne	80008bb4 <_dtoa_r+0xb7c>
80008b80:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80008b84:	c0 d1       	brne	80008b9e <_dtoa_r+0xb66>
80008b86:	c1 78       	rjmp	80008bb4 <_dtoa_r+0xb7c>
80008b88:	40 89       	lddsp	r9,sp[0x20]
80008b8a:	12 38       	cp.w	r8,r9
80008b8c:	c0 30       	breq	80008b92 <_dtoa_r+0xb5a>
80008b8e:	10 95       	mov	r5,r8
80008b90:	c0 88       	rjmp	80008ba0 <_dtoa_r+0xb68>
80008b92:	2f f6       	sub	r6,-1
80008b94:	50 66       	stdsp	sp[0x18],r6
80008b96:	33 18       	mov	r8,49
80008b98:	40 8c       	lddsp	r12,sp[0x20]
80008b9a:	b8 88       	st.b	r12[0x0],r8
80008b9c:	c1 38       	rjmp	80008bc2 <_dtoa_r+0xb8a>
80008b9e:	33 9a       	mov	r10,57
80008ba0:	0a 98       	mov	r8,r5
80008ba2:	11 79       	ld.ub	r9,--r8
80008ba4:	f4 09 18 00 	cp.b	r9,r10
80008ba8:	cf 00       	breq	80008b88 <_dtoa_r+0xb50>
80008baa:	2f f9       	sub	r9,-1
80008bac:	b0 89       	st.b	r8[0x0],r9
80008bae:	c0 98       	rjmp	80008bc0 <_dtoa_r+0xb88>
80008bb0:	10 95       	mov	r5,r8
80008bb2:	c0 28       	rjmp	80008bb6 <_dtoa_r+0xb7e>
80008bb4:	33 09       	mov	r9,48
80008bb6:	0a 98       	mov	r8,r5
80008bb8:	11 7a       	ld.ub	r10,--r8
80008bba:	f2 0a 18 00 	cp.b	r10,r9
80008bbe:	cf 90       	breq	80008bb0 <_dtoa_r+0xb78>
80008bc0:	50 66       	stdsp	sp[0x18],r6
80008bc2:	04 9b       	mov	r11,r2
80008bc4:	0e 9c       	mov	r12,r7
80008bc6:	e0 a0 07 c7 	rcall	80009b54 <_Bfree>
80008bca:	58 04       	cp.w	r4,0
80008bcc:	c1 20       	breq	80008bf0 <_dtoa_r+0xbb8>
80008bce:	40 4b       	lddsp	r11,sp[0x10]
80008bd0:	08 3b       	cp.w	r11,r4
80008bd2:	5f 19       	srne	r9
80008bd4:	58 0b       	cp.w	r11,0
80008bd6:	5f 18       	srne	r8
80008bd8:	f3 e8 00 08 	and	r8,r9,r8
80008bdc:	c0 40       	breq	80008be4 <_dtoa_r+0xbac>
80008bde:	0e 9c       	mov	r12,r7
80008be0:	e0 a0 07 ba 	rcall	80009b54 <_Bfree>
80008be4:	08 9b       	mov	r11,r4
80008be6:	0e 9c       	mov	r12,r7
80008be8:	e0 a0 07 b6 	rcall	80009b54 <_Bfree>
80008bec:	c0 28       	rjmp	80008bf0 <_dtoa_r+0xbb8>
80008bee:	50 66       	stdsp	sp[0x18],r6
80008bf0:	0e 9c       	mov	r12,r7
80008bf2:	06 9b       	mov	r11,r3
80008bf4:	e0 a0 07 b0 	rcall	80009b54 <_Bfree>
80008bf8:	30 08       	mov	r8,0
80008bfa:	aa 88       	st.b	r5[0x0],r8
80008bfc:	40 68       	lddsp	r8,sp[0x18]
80008bfe:	41 5a       	lddsp	r10,sp[0x54]
80008c00:	2f f8       	sub	r8,-1
80008c02:	41 29       	lddsp	r9,sp[0x48]
80008c04:	95 08       	st.w	r10[0x0],r8
80008c06:	40 8c       	lddsp	r12,sp[0x20]
80008c08:	58 09       	cp.w	r9,0
80008c0a:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80008c0e:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80008c12:	2e 6d       	sub	sp,-104
80008c14:	d8 32       	popm	r0-r7,pc
80008c16:	d7 03       	nop

80008c18 <_fflush_r>:
80008c18:	d4 21       	pushm	r4-r7,lr
80008c1a:	16 97       	mov	r7,r11
80008c1c:	18 96       	mov	r6,r12
80008c1e:	76 48       	ld.w	r8,r11[0x10]
80008c20:	58 08       	cp.w	r8,0
80008c22:	c7 c0       	breq	80008d1a <_fflush_r+0x102>
80008c24:	58 0c       	cp.w	r12,0
80008c26:	c0 50       	breq	80008c30 <_fflush_r+0x18>
80008c28:	78 68       	ld.w	r8,r12[0x18]
80008c2a:	58 08       	cp.w	r8,0
80008c2c:	c0 21       	brne	80008c30 <_fflush_r+0x18>
80008c2e:	cd 1c       	rcall	80008dd0 <__sinit>
80008c30:	4b b8       	lddpc	r8,80008d1c <_fflush_r+0x104>
80008c32:	10 37       	cp.w	r7,r8
80008c34:	c0 31       	brne	80008c3a <_fflush_r+0x22>
80008c36:	6c 07       	ld.w	r7,r6[0x0]
80008c38:	c0 a8       	rjmp	80008c4c <_fflush_r+0x34>
80008c3a:	4b a8       	lddpc	r8,80008d20 <_fflush_r+0x108>
80008c3c:	10 37       	cp.w	r7,r8
80008c3e:	c0 31       	brne	80008c44 <_fflush_r+0x2c>
80008c40:	6c 17       	ld.w	r7,r6[0x4]
80008c42:	c0 58       	rjmp	80008c4c <_fflush_r+0x34>
80008c44:	4b 88       	lddpc	r8,80008d24 <_fflush_r+0x10c>
80008c46:	10 37       	cp.w	r7,r8
80008c48:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008c4c:	8e 6a       	ld.sh	r10,r7[0xc]
80008c4e:	14 98       	mov	r8,r10
80008c50:	ed ba 00 03 	bld	r10,0x3
80008c54:	c4 20       	breq	80008cd8 <_fflush_r+0xc0>
80008c56:	ab ba       	sbr	r10,0xb
80008c58:	ae 6a       	st.h	r7[0xc],r10
80008c5a:	6e 18       	ld.w	r8,r7[0x4]
80008c5c:	58 08       	cp.w	r8,0
80008c5e:	e0 89 00 06 	brgt	80008c6a <_fflush_r+0x52>
80008c62:	6f 08       	ld.w	r8,r7[0x40]
80008c64:	58 08       	cp.w	r8,0
80008c66:	e0 8a 00 5a 	brle	80008d1a <_fflush_r+0x102>
80008c6a:	6e b8       	ld.w	r8,r7[0x2c]
80008c6c:	58 08       	cp.w	r8,0
80008c6e:	c5 60       	breq	80008d1a <_fflush_r+0x102>
80008c70:	e2 1a 10 00 	andl	r10,0x1000,COH
80008c74:	c0 30       	breq	80008c7a <_fflush_r+0x62>
80008c76:	6f 55       	ld.w	r5,r7[0x54]
80008c78:	c0 f8       	rjmp	80008c96 <_fflush_r+0x7e>
80008c7a:	30 19       	mov	r9,1
80008c7c:	6e 8b       	ld.w	r11,r7[0x20]
80008c7e:	0c 9c       	mov	r12,r6
80008c80:	5d 18       	icall	r8
80008c82:	18 95       	mov	r5,r12
80008c84:	5b fc       	cp.w	r12,-1
80008c86:	c0 81       	brne	80008c96 <_fflush_r+0x7e>
80008c88:	6c 38       	ld.w	r8,r6[0xc]
80008c8a:	59 d8       	cp.w	r8,29
80008c8c:	c4 70       	breq	80008d1a <_fflush_r+0x102>
80008c8e:	8e 68       	ld.sh	r8,r7[0xc]
80008c90:	a7 a8       	sbr	r8,0x6
80008c92:	ae 68       	st.h	r7[0xc],r8
80008c94:	d8 22       	popm	r4-r7,pc
80008c96:	8e 68       	ld.sh	r8,r7[0xc]
80008c98:	ed b8 00 02 	bld	r8,0x2
80008c9c:	c0 91       	brne	80008cae <_fflush_r+0x96>
80008c9e:	6e 18       	ld.w	r8,r7[0x4]
80008ca0:	10 15       	sub	r5,r8
80008ca2:	6e d8       	ld.w	r8,r7[0x34]
80008ca4:	58 08       	cp.w	r8,0
80008ca6:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80008caa:	eb d8 e1 15 	subne	r5,r5,r8
80008cae:	6e b8       	ld.w	r8,r7[0x2c]
80008cb0:	0c 9c       	mov	r12,r6
80008cb2:	30 09       	mov	r9,0
80008cb4:	0a 9a       	mov	r10,r5
80008cb6:	6e 8b       	ld.w	r11,r7[0x20]
80008cb8:	5d 18       	icall	r8
80008cba:	8e 68       	ld.sh	r8,r7[0xc]
80008cbc:	0a 3c       	cp.w	r12,r5
80008cbe:	c2 61       	brne	80008d0a <_fflush_r+0xf2>
80008cc0:	ab d8       	cbr	r8,0xb
80008cc2:	30 0c       	mov	r12,0
80008cc4:	6e 49       	ld.w	r9,r7[0x10]
80008cc6:	ae 68       	st.h	r7[0xc],r8
80008cc8:	8f 1c       	st.w	r7[0x4],r12
80008cca:	8f 09       	st.w	r7[0x0],r9
80008ccc:	ed b8 00 0c 	bld	r8,0xc
80008cd0:	c2 51       	brne	80008d1a <_fflush_r+0x102>
80008cd2:	ef 45 00 54 	st.w	r7[84],r5
80008cd6:	d8 22       	popm	r4-r7,pc
80008cd8:	6e 45       	ld.w	r5,r7[0x10]
80008cda:	58 05       	cp.w	r5,0
80008cdc:	c1 f0       	breq	80008d1a <_fflush_r+0x102>
80008cde:	6e 04       	ld.w	r4,r7[0x0]
80008ce0:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80008ce4:	8f 05       	st.w	r7[0x0],r5
80008ce6:	f9 b8 01 00 	movne	r8,0
80008cea:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80008cee:	0a 14       	sub	r4,r5
80008cf0:	8f 28       	st.w	r7[0x8],r8
80008cf2:	c1 18       	rjmp	80008d14 <_fflush_r+0xfc>
80008cf4:	08 99       	mov	r9,r4
80008cf6:	0a 9a       	mov	r10,r5
80008cf8:	6e a8       	ld.w	r8,r7[0x28]
80008cfa:	6e 8b       	ld.w	r11,r7[0x20]
80008cfc:	0c 9c       	mov	r12,r6
80008cfe:	5d 18       	icall	r8
80008d00:	18 14       	sub	r4,r12
80008d02:	58 0c       	cp.w	r12,0
80008d04:	e0 89 00 07 	brgt	80008d12 <_fflush_r+0xfa>
80008d08:	8e 68       	ld.sh	r8,r7[0xc]
80008d0a:	a7 a8       	sbr	r8,0x6
80008d0c:	3f fc       	mov	r12,-1
80008d0e:	ae 68       	st.h	r7[0xc],r8
80008d10:	d8 22       	popm	r4-r7,pc
80008d12:	18 05       	add	r5,r12
80008d14:	58 04       	cp.w	r4,0
80008d16:	fe 99 ff ef 	brgt	80008cf4 <_fflush_r+0xdc>
80008d1a:	d8 2a       	popm	r4-r7,pc,r12=0
80008d1c:	80 00       	ld.sh	r0,r0[0x0]
80008d1e:	c5 7c       	rcall	80008dcc <__sfp+0x6c>
80008d20:	80 00       	ld.sh	r0,r0[0x0]
80008d22:	c5 9c       	rcall	80008dd4 <__sinit+0x4>
80008d24:	80 00       	ld.sh	r0,r0[0x0]
80008d26:	c5 bc       	rcall	80008ddc <__sinit+0xc>

80008d28 <__sfp_lock_acquire>:
80008d28:	5e fc       	retal	r12

80008d2a <__sfp_lock_release>:
80008d2a:	5e fc       	retal	r12

80008d2c <_cleanup_r>:
80008d2c:	d4 01       	pushm	lr
80008d2e:	fe cb e6 ee 	sub	r11,pc,-6418
80008d32:	e0 a0 03 03 	rcall	80009338 <_fwalk>
80008d36:	d8 02       	popm	pc

80008d38 <__sfmoreglue>:
80008d38:	d4 21       	pushm	r4-r7,lr
80008d3a:	16 95       	mov	r5,r11
80008d3c:	f6 06 10 5c 	mul	r6,r11,92
80008d40:	ec cb ff f4 	sub	r11,r6,-12
80008d44:	e0 a0 03 8a 	rcall	80009458 <_malloc_r>
80008d48:	18 97       	mov	r7,r12
80008d4a:	c0 90       	breq	80008d5c <__sfmoreglue+0x24>
80008d4c:	99 15       	st.w	r12[0x4],r5
80008d4e:	30 0b       	mov	r11,0
80008d50:	2f 4c       	sub	r12,-12
80008d52:	0c 9a       	mov	r10,r6
80008d54:	8f 2c       	st.w	r7[0x8],r12
80008d56:	8f 0b       	st.w	r7[0x0],r11
80008d58:	e0 a0 06 64 	rcall	80009a20 <memset>
80008d5c:	0e 9c       	mov	r12,r7
80008d5e:	d8 22       	popm	r4-r7,pc

80008d60 <__sfp>:
80008d60:	d4 21       	pushm	r4-r7,lr
80008d62:	49 b8       	lddpc	r8,80008dcc <__sfp+0x6c>
80008d64:	18 96       	mov	r6,r12
80008d66:	70 07       	ld.w	r7,r8[0x0]
80008d68:	6e 68       	ld.w	r8,r7[0x18]
80008d6a:	58 08       	cp.w	r8,0
80008d6c:	c0 31       	brne	80008d72 <__sfp+0x12>
80008d6e:	0e 9c       	mov	r12,r7
80008d70:	c3 0c       	rcall	80008dd0 <__sinit>
80008d72:	ee c7 ff 28 	sub	r7,r7,-216
80008d76:	30 05       	mov	r5,0
80008d78:	6e 2c       	ld.w	r12,r7[0x8]
80008d7a:	6e 18       	ld.w	r8,r7[0x4]
80008d7c:	c0 68       	rjmp	80008d88 <__sfp+0x28>
80008d7e:	98 69       	ld.sh	r9,r12[0xc]
80008d80:	ea 09 19 00 	cp.h	r9,r5
80008d84:	c1 10       	breq	80008da6 <__sfp+0x46>
80008d86:	2a 4c       	sub	r12,-92
80008d88:	20 18       	sub	r8,1
80008d8a:	cf a7       	brpl	80008d7e <__sfp+0x1e>
80008d8c:	6e 08       	ld.w	r8,r7[0x0]
80008d8e:	58 08       	cp.w	r8,0
80008d90:	c0 61       	brne	80008d9c <__sfp+0x3c>
80008d92:	30 4b       	mov	r11,4
80008d94:	0c 9c       	mov	r12,r6
80008d96:	cd 1f       	rcall	80008d38 <__sfmoreglue>
80008d98:	8f 0c       	st.w	r7[0x0],r12
80008d9a:	c0 30       	breq	80008da0 <__sfp+0x40>
80008d9c:	6e 07       	ld.w	r7,r7[0x0]
80008d9e:	ce db       	rjmp	80008d78 <__sfp+0x18>
80008da0:	30 c8       	mov	r8,12
80008da2:	8d 38       	st.w	r6[0xc],r8
80008da4:	d8 22       	popm	r4-r7,pc
80008da6:	30 08       	mov	r8,0
80008da8:	f9 48 00 4c 	st.w	r12[76],r8
80008dac:	99 08       	st.w	r12[0x0],r8
80008dae:	99 28       	st.w	r12[0x8],r8
80008db0:	99 18       	st.w	r12[0x4],r8
80008db2:	99 48       	st.w	r12[0x10],r8
80008db4:	99 58       	st.w	r12[0x14],r8
80008db6:	99 68       	st.w	r12[0x18],r8
80008db8:	99 d8       	st.w	r12[0x34],r8
80008dba:	99 e8       	st.w	r12[0x38],r8
80008dbc:	f9 48 00 48 	st.w	r12[72],r8
80008dc0:	3f f8       	mov	r8,-1
80008dc2:	b8 78       	st.h	r12[0xe],r8
80008dc4:	30 18       	mov	r8,1
80008dc6:	b8 68       	st.h	r12[0xc],r8
80008dc8:	d8 22       	popm	r4-r7,pc
80008dca:	d7 03       	nop
80008dcc:	80 00       	ld.sh	r0,r0[0x0]
80008dce:	c5 e0       	breq	80008e8a <_malloc_trim_r+0x1e>

80008dd0 <__sinit>:
80008dd0:	d4 21       	pushm	r4-r7,lr
80008dd2:	18 96       	mov	r6,r12
80008dd4:	78 67       	ld.w	r7,r12[0x18]
80008dd6:	58 07       	cp.w	r7,0
80008dd8:	c4 91       	brne	80008e6a <__sinit+0x9a>
80008dda:	fe c8 00 ae 	sub	r8,pc,174
80008dde:	30 15       	mov	r5,1
80008de0:	99 a8       	st.w	r12[0x28],r8
80008de2:	f9 47 00 d8 	st.w	r12[216],r7
80008de6:	f9 47 00 dc 	st.w	r12[220],r7
80008dea:	f9 47 00 e0 	st.w	r12[224],r7
80008dee:	99 65       	st.w	r12[0x18],r5
80008df0:	cb 8f       	rcall	80008d60 <__sfp>
80008df2:	8d 0c       	st.w	r6[0x0],r12
80008df4:	0c 9c       	mov	r12,r6
80008df6:	cb 5f       	rcall	80008d60 <__sfp>
80008df8:	8d 1c       	st.w	r6[0x4],r12
80008dfa:	0c 9c       	mov	r12,r6
80008dfc:	cb 2f       	rcall	80008d60 <__sfp>
80008dfe:	6c 09       	ld.w	r9,r6[0x0]
80008e00:	30 48       	mov	r8,4
80008e02:	93 07       	st.w	r9[0x0],r7
80008e04:	b2 68       	st.h	r9[0xc],r8
80008e06:	93 17       	st.w	r9[0x4],r7
80008e08:	93 27       	st.w	r9[0x8],r7
80008e0a:	6c 18       	ld.w	r8,r6[0x4]
80008e0c:	b2 77       	st.h	r9[0xe],r7
80008e0e:	93 47       	st.w	r9[0x10],r7
80008e10:	93 57       	st.w	r9[0x14],r7
80008e12:	93 67       	st.w	r9[0x18],r7
80008e14:	93 89       	st.w	r9[0x20],r9
80008e16:	91 07       	st.w	r8[0x0],r7
80008e18:	91 17       	st.w	r8[0x4],r7
80008e1a:	91 27       	st.w	r8[0x8],r7
80008e1c:	fe ce ea 90 	sub	lr,pc,-5488
80008e20:	fe cb ea c0 	sub	r11,pc,-5440
80008e24:	93 9e       	st.w	r9[0x24],lr
80008e26:	93 ab       	st.w	r9[0x28],r11
80008e28:	fe ca ea e8 	sub	r10,pc,-5400
80008e2c:	fe c4 ea f4 	sub	r4,pc,-5388
80008e30:	93 ba       	st.w	r9[0x2c],r10
80008e32:	93 c4       	st.w	r9[0x30],r4
80008e34:	30 99       	mov	r9,9
80008e36:	b0 69       	st.h	r8[0xc],r9
80008e38:	b0 75       	st.h	r8[0xe],r5
80008e3a:	91 c4       	st.w	r8[0x30],r4
80008e3c:	91 47       	st.w	r8[0x10],r7
80008e3e:	91 57       	st.w	r8[0x14],r7
80008e40:	91 67       	st.w	r8[0x18],r7
80008e42:	91 88       	st.w	r8[0x20],r8
80008e44:	91 9e       	st.w	r8[0x24],lr
80008e46:	91 ab       	st.w	r8[0x28],r11
80008e48:	91 ba       	st.w	r8[0x2c],r10
80008e4a:	8d 2c       	st.w	r6[0x8],r12
80008e4c:	31 28       	mov	r8,18
80008e4e:	99 07       	st.w	r12[0x0],r7
80008e50:	b8 68       	st.h	r12[0xc],r8
80008e52:	99 17       	st.w	r12[0x4],r7
80008e54:	99 27       	st.w	r12[0x8],r7
80008e56:	30 28       	mov	r8,2
80008e58:	b8 78       	st.h	r12[0xe],r8
80008e5a:	99 c4       	st.w	r12[0x30],r4
80008e5c:	99 67       	st.w	r12[0x18],r7
80008e5e:	99 9e       	st.w	r12[0x24],lr
80008e60:	99 ab       	st.w	r12[0x28],r11
80008e62:	99 ba       	st.w	r12[0x2c],r10
80008e64:	99 47       	st.w	r12[0x10],r7
80008e66:	99 57       	st.w	r12[0x14],r7
80008e68:	99 8c       	st.w	r12[0x20],r12
80008e6a:	d8 22       	popm	r4-r7,pc

80008e6c <_malloc_trim_r>:
80008e6c:	d4 21       	pushm	r4-r7,lr
80008e6e:	16 95       	mov	r5,r11
80008e70:	18 97       	mov	r7,r12
80008e72:	e0 a0 05 de 	rcall	80009a2e <__malloc_lock>
80008e76:	4a 24       	lddpc	r4,80008efc <_malloc_trim_r+0x90>
80008e78:	68 28       	ld.w	r8,r4[0x8]
80008e7a:	70 16       	ld.w	r6,r8[0x4]
80008e7c:	e0 16 ff fc 	andl	r6,0xfffc
80008e80:	ec c8 ff 91 	sub	r8,r6,-111
80008e84:	f0 05 01 05 	sub	r5,r8,r5
80008e88:	e0 15 ff 80 	andl	r5,0xff80
80008e8c:	ea c5 00 80 	sub	r5,r5,128
80008e90:	e0 45 00 7f 	cp.w	r5,127
80008e94:	e0 8a 00 23 	brle	80008eda <_malloc_trim_r+0x6e>
80008e98:	30 0b       	mov	r11,0
80008e9a:	0e 9c       	mov	r12,r7
80008e9c:	e0 a0 0a 3e 	rcall	8000a318 <_sbrk_r>
80008ea0:	68 28       	ld.w	r8,r4[0x8]
80008ea2:	0c 08       	add	r8,r6
80008ea4:	10 3c       	cp.w	r12,r8
80008ea6:	c1 a1       	brne	80008eda <_malloc_trim_r+0x6e>
80008ea8:	ea 0b 11 00 	rsub	r11,r5,0
80008eac:	0e 9c       	mov	r12,r7
80008eae:	e0 a0 0a 35 	rcall	8000a318 <_sbrk_r>
80008eb2:	5b fc       	cp.w	r12,-1
80008eb4:	c1 71       	brne	80008ee2 <_malloc_trim_r+0x76>
80008eb6:	30 0b       	mov	r11,0
80008eb8:	0e 9c       	mov	r12,r7
80008eba:	e0 a0 0a 2f 	rcall	8000a318 <_sbrk_r>
80008ebe:	68 28       	ld.w	r8,r4[0x8]
80008ec0:	f8 08 01 09 	sub	r9,r12,r8
80008ec4:	58 f9       	cp.w	r9,15
80008ec6:	e0 8a 00 0a 	brle	80008eda <_malloc_trim_r+0x6e>
80008eca:	a1 a9       	sbr	r9,0x0
80008ecc:	91 19       	st.w	r8[0x4],r9
80008ece:	48 d8       	lddpc	r8,80008f00 <_malloc_trim_r+0x94>
80008ed0:	70 09       	ld.w	r9,r8[0x0]
80008ed2:	48 d8       	lddpc	r8,80008f04 <_malloc_trim_r+0x98>
80008ed4:	f8 09 01 09 	sub	r9,r12,r9
80008ed8:	91 09       	st.w	r8[0x0],r9
80008eda:	0e 9c       	mov	r12,r7
80008edc:	e0 a0 05 aa 	rcall	80009a30 <__malloc_unlock>
80008ee0:	d8 2a       	popm	r4-r7,pc,r12=0
80008ee2:	68 28       	ld.w	r8,r4[0x8]
80008ee4:	0a 16       	sub	r6,r5
80008ee6:	a1 a6       	sbr	r6,0x0
80008ee8:	91 16       	st.w	r8[0x4],r6
80008eea:	48 78       	lddpc	r8,80008f04 <_malloc_trim_r+0x98>
80008eec:	70 09       	ld.w	r9,r8[0x0]
80008eee:	0a 19       	sub	r9,r5
80008ef0:	0e 9c       	mov	r12,r7
80008ef2:	91 09       	st.w	r8[0x0],r9
80008ef4:	e0 a0 05 9e 	rcall	80009a30 <__malloc_unlock>
80008ef8:	da 2a       	popm	r4-r7,pc,r12=1
80008efa:	d7 03       	nop
80008efc:	00 00       	add	r0,r0
80008efe:	01 00       	ld.w	r0,r0++
80008f00:	00 00       	add	r0,r0
80008f02:	05 0c       	ld.w	r12,r2++
80008f04:	00 00       	add	r0,r0
80008f06:	06 1c       	sub	r12,r3

80008f08 <_free_r>:
80008f08:	d4 21       	pushm	r4-r7,lr
80008f0a:	16 96       	mov	r6,r11
80008f0c:	18 97       	mov	r7,r12
80008f0e:	58 0b       	cp.w	r11,0
80008f10:	e0 80 00 c2 	breq	80009094 <_free_r+0x18c>
80008f14:	e0 a0 05 8d 	rcall	80009a2e <__malloc_lock>
80008f18:	20 86       	sub	r6,8
80008f1a:	4c ba       	lddpc	r10,80009044 <_free_r+0x13c>
80008f1c:	6c 18       	ld.w	r8,r6[0x4]
80008f1e:	74 2e       	ld.w	lr,r10[0x8]
80008f20:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80008f24:	a1 c8       	cbr	r8,0x0
80008f26:	ec 08 00 09 	add	r9,r6,r8
80008f2a:	72 1b       	ld.w	r11,r9[0x4]
80008f2c:	e0 1b ff fc 	andl	r11,0xfffc
80008f30:	1c 39       	cp.w	r9,lr
80008f32:	c1 c1       	brne	80008f6a <_free_r+0x62>
80008f34:	f6 08 00 08 	add	r8,r11,r8
80008f38:	58 0c       	cp.w	r12,0
80008f3a:	c0 81       	brne	80008f4a <_free_r+0x42>
80008f3c:	6c 09       	ld.w	r9,r6[0x0]
80008f3e:	12 16       	sub	r6,r9
80008f40:	12 08       	add	r8,r9
80008f42:	6c 3b       	ld.w	r11,r6[0xc]
80008f44:	6c 29       	ld.w	r9,r6[0x8]
80008f46:	97 29       	st.w	r11[0x8],r9
80008f48:	93 3b       	st.w	r9[0xc],r11
80008f4a:	10 99       	mov	r9,r8
80008f4c:	95 26       	st.w	r10[0x8],r6
80008f4e:	a1 a9       	sbr	r9,0x0
80008f50:	8d 19       	st.w	r6[0x4],r9
80008f52:	4b e9       	lddpc	r9,80009048 <_free_r+0x140>
80008f54:	72 09       	ld.w	r9,r9[0x0]
80008f56:	12 38       	cp.w	r8,r9
80008f58:	c0 53       	brcs	80008f62 <_free_r+0x5a>
80008f5a:	4b d8       	lddpc	r8,8000904c <_free_r+0x144>
80008f5c:	0e 9c       	mov	r12,r7
80008f5e:	70 0b       	ld.w	r11,r8[0x0]
80008f60:	c8 6f       	rcall	80008e6c <_malloc_trim_r>
80008f62:	0e 9c       	mov	r12,r7
80008f64:	e0 a0 05 66 	rcall	80009a30 <__malloc_unlock>
80008f68:	d8 22       	popm	r4-r7,pc
80008f6a:	93 1b       	st.w	r9[0x4],r11
80008f6c:	58 0c       	cp.w	r12,0
80008f6e:	c0 30       	breq	80008f74 <_free_r+0x6c>
80008f70:	30 0c       	mov	r12,0
80008f72:	c1 08       	rjmp	80008f92 <_free_r+0x8a>
80008f74:	6c 0e       	ld.w	lr,r6[0x0]
80008f76:	f4 c5 ff f8 	sub	r5,r10,-8
80008f7a:	1c 16       	sub	r6,lr
80008f7c:	1c 08       	add	r8,lr
80008f7e:	6c 2e       	ld.w	lr,r6[0x8]
80008f80:	0a 3e       	cp.w	lr,r5
80008f82:	f9 bc 00 01 	moveq	r12,1
80008f86:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80008f8a:	eb fe 1a 02 	st.wne	r5[0x8],lr
80008f8e:	fd f5 1a 03 	st.wne	lr[0xc],r5
80008f92:	f2 0b 00 0e 	add	lr,r9,r11
80008f96:	7c 1e       	ld.w	lr,lr[0x4]
80008f98:	ed be 00 00 	bld	lr,0x0
80008f9c:	c1 30       	breq	80008fc2 <_free_r+0xba>
80008f9e:	16 08       	add	r8,r11
80008fa0:	58 0c       	cp.w	r12,0
80008fa2:	c0 c1       	brne	80008fba <_free_r+0xb2>
80008fa4:	4a 8e       	lddpc	lr,80009044 <_free_r+0x13c>
80008fa6:	72 2b       	ld.w	r11,r9[0x8]
80008fa8:	2f 8e       	sub	lr,-8
80008faa:	1c 3b       	cp.w	r11,lr
80008fac:	c0 71       	brne	80008fba <_free_r+0xb2>
80008fae:	97 36       	st.w	r11[0xc],r6
80008fb0:	97 26       	st.w	r11[0x8],r6
80008fb2:	8d 2b       	st.w	r6[0x8],r11
80008fb4:	8d 3b       	st.w	r6[0xc],r11
80008fb6:	30 1c       	mov	r12,1
80008fb8:	c0 58       	rjmp	80008fc2 <_free_r+0xba>
80008fba:	72 2b       	ld.w	r11,r9[0x8]
80008fbc:	72 39       	ld.w	r9,r9[0xc]
80008fbe:	93 2b       	st.w	r9[0x8],r11
80008fc0:	97 39       	st.w	r11[0xc],r9
80008fc2:	10 99       	mov	r9,r8
80008fc4:	ec 08 09 08 	st.w	r6[r8],r8
80008fc8:	a1 a9       	sbr	r9,0x0
80008fca:	8d 19       	st.w	r6[0x4],r9
80008fcc:	58 0c       	cp.w	r12,0
80008fce:	c6 01       	brne	8000908e <_free_r+0x186>
80008fd0:	e0 48 01 ff 	cp.w	r8,511
80008fd4:	e0 8b 00 13 	brhi	80008ffa <_free_r+0xf2>
80008fd8:	a3 98       	lsr	r8,0x3
80008fda:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008fde:	72 2b       	ld.w	r11,r9[0x8]
80008fe0:	8d 39       	st.w	r6[0xc],r9
80008fe2:	8d 2b       	st.w	r6[0x8],r11
80008fe4:	97 36       	st.w	r11[0xc],r6
80008fe6:	93 26       	st.w	r9[0x8],r6
80008fe8:	a3 48       	asr	r8,0x2
80008fea:	74 19       	ld.w	r9,r10[0x4]
80008fec:	30 1b       	mov	r11,1
80008fee:	f6 08 09 48 	lsl	r8,r11,r8
80008ff2:	f3 e8 10 08 	or	r8,r9,r8
80008ff6:	95 18       	st.w	r10[0x4],r8
80008ff8:	c4 b8       	rjmp	8000908e <_free_r+0x186>
80008ffa:	f0 0b 16 09 	lsr	r11,r8,0x9
80008ffe:	58 4b       	cp.w	r11,4
80009000:	e0 8b 00 06 	brhi	8000900c <_free_r+0x104>
80009004:	f0 0b 16 06 	lsr	r11,r8,0x6
80009008:	2c 8b       	sub	r11,-56
8000900a:	c2 68       	rjmp	80009056 <_free_r+0x14e>
8000900c:	59 4b       	cp.w	r11,20
8000900e:	e0 8b 00 04 	brhi	80009016 <_free_r+0x10e>
80009012:	2a 5b       	sub	r11,-91
80009014:	c2 18       	rjmp	80009056 <_free_r+0x14e>
80009016:	e0 4b 00 54 	cp.w	r11,84
8000901a:	e0 8b 00 06 	brhi	80009026 <_free_r+0x11e>
8000901e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80009022:	29 2b       	sub	r11,-110
80009024:	c1 98       	rjmp	80009056 <_free_r+0x14e>
80009026:	e0 4b 01 54 	cp.w	r11,340
8000902a:	e0 8b 00 06 	brhi	80009036 <_free_r+0x12e>
8000902e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80009032:	28 9b       	sub	r11,-119
80009034:	c1 18       	rjmp	80009056 <_free_r+0x14e>
80009036:	e0 4b 05 54 	cp.w	r11,1364
8000903a:	e0 88 00 0b 	brls	80009050 <_free_r+0x148>
8000903e:	37 eb       	mov	r11,126
80009040:	c0 b8       	rjmp	80009056 <_free_r+0x14e>
80009042:	d7 03       	nop
80009044:	00 00       	add	r0,r0
80009046:	01 00       	ld.w	r0,r0++
80009048:	00 00       	add	r0,r0
8000904a:	05 08       	ld.w	r8,r2++
8000904c:	00 00       	add	r0,r0
8000904e:	06 18       	sub	r8,r3
80009050:	f0 0b 16 12 	lsr	r11,r8,0x12
80009054:	28 4b       	sub	r11,-124
80009056:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000905a:	78 29       	ld.w	r9,r12[0x8]
8000905c:	18 39       	cp.w	r9,r12
8000905e:	c0 e1       	brne	8000907a <_free_r+0x172>
80009060:	74 18       	ld.w	r8,r10[0x4]
80009062:	a3 4b       	asr	r11,0x2
80009064:	30 1c       	mov	r12,1
80009066:	f8 0b 09 4b 	lsl	r11,r12,r11
8000906a:	f1 eb 10 0b 	or	r11,r8,r11
8000906e:	12 98       	mov	r8,r9
80009070:	95 1b       	st.w	r10[0x4],r11
80009072:	c0 a8       	rjmp	80009086 <_free_r+0x17e>
80009074:	72 29       	ld.w	r9,r9[0x8]
80009076:	18 39       	cp.w	r9,r12
80009078:	c0 60       	breq	80009084 <_free_r+0x17c>
8000907a:	72 1a       	ld.w	r10,r9[0x4]
8000907c:	e0 1a ff fc 	andl	r10,0xfffc
80009080:	14 38       	cp.w	r8,r10
80009082:	cf 93       	brcs	80009074 <_free_r+0x16c>
80009084:	72 38       	ld.w	r8,r9[0xc]
80009086:	8d 38       	st.w	r6[0xc],r8
80009088:	8d 29       	st.w	r6[0x8],r9
8000908a:	93 36       	st.w	r9[0xc],r6
8000908c:	91 26       	st.w	r8[0x8],r6
8000908e:	0e 9c       	mov	r12,r7
80009090:	e0 a0 04 d0 	rcall	80009a30 <__malloc_unlock>
80009094:	d8 22       	popm	r4-r7,pc
80009096:	d7 03       	nop

80009098 <__sfvwrite_r>:
80009098:	d4 31       	pushm	r0-r7,lr
8000909a:	20 3d       	sub	sp,12
8000909c:	14 94       	mov	r4,r10
8000909e:	18 95       	mov	r5,r12
800090a0:	16 97       	mov	r7,r11
800090a2:	74 28       	ld.w	r8,r10[0x8]
800090a4:	58 08       	cp.w	r8,0
800090a6:	e0 80 01 45 	breq	80009330 <__sfvwrite_r+0x298>
800090aa:	96 68       	ld.sh	r8,r11[0xc]
800090ac:	ed b8 00 03 	bld	r8,0x3
800090b0:	c0 41       	brne	800090b8 <__sfvwrite_r+0x20>
800090b2:	76 48       	ld.w	r8,r11[0x10]
800090b4:	58 08       	cp.w	r8,0
800090b6:	c0 c1       	brne	800090ce <__sfvwrite_r+0x36>
800090b8:	0e 9b       	mov	r11,r7
800090ba:	0a 9c       	mov	r12,r5
800090bc:	fe b0 f6 c0 	rcall	80007e3c <__swsetup_r>
800090c0:	c0 70       	breq	800090ce <__sfvwrite_r+0x36>
800090c2:	8e 68       	ld.sh	r8,r7[0xc]
800090c4:	a7 a8       	sbr	r8,0x6
800090c6:	ae 68       	st.h	r7[0xc],r8
800090c8:	30 98       	mov	r8,9
800090ca:	8b 38       	st.w	r5[0xc],r8
800090cc:	c3 09       	rjmp	8000932c <__sfvwrite_r+0x294>
800090ce:	8e 63       	ld.sh	r3,r7[0xc]
800090d0:	68 00       	ld.w	r0,r4[0x0]
800090d2:	06 96       	mov	r6,r3
800090d4:	e2 16 00 02 	andl	r6,0x2,COH
800090d8:	c2 10       	breq	8000911a <__sfvwrite_r+0x82>
800090da:	30 03       	mov	r3,0
800090dc:	e0 62 04 00 	mov	r2,1024
800090e0:	06 96       	mov	r6,r3
800090e2:	c0 48       	rjmp	800090ea <__sfvwrite_r+0x52>
800090e4:	60 03       	ld.w	r3,r0[0x0]
800090e6:	60 16       	ld.w	r6,r0[0x4]
800090e8:	2f 80       	sub	r0,-8
800090ea:	58 06       	cp.w	r6,0
800090ec:	cf c0       	breq	800090e4 <__sfvwrite_r+0x4c>
800090ee:	e0 46 04 00 	cp.w	r6,1024
800090f2:	ec 09 17 80 	movls	r9,r6
800090f6:	e4 09 17 b0 	movhi	r9,r2
800090fa:	06 9a       	mov	r10,r3
800090fc:	6e a8       	ld.w	r8,r7[0x28]
800090fe:	6e 8b       	ld.w	r11,r7[0x20]
80009100:	0a 9c       	mov	r12,r5
80009102:	5d 18       	icall	r8
80009104:	18 16       	sub	r6,r12
80009106:	58 0c       	cp.w	r12,0
80009108:	e0 8a 01 0f 	brle	80009326 <__sfvwrite_r+0x28e>
8000910c:	68 28       	ld.w	r8,r4[0x8]
8000910e:	18 18       	sub	r8,r12
80009110:	89 28       	st.w	r4[0x8],r8
80009112:	e0 80 01 0f 	breq	80009330 <__sfvwrite_r+0x298>
80009116:	18 03       	add	r3,r12
80009118:	ce 9b       	rjmp	800090ea <__sfvwrite_r+0x52>
8000911a:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000911e:	c0 70       	breq	8000912c <__sfvwrite_r+0x94>
80009120:	50 06       	stdsp	sp[0x0],r6
80009122:	0c 93       	mov	r3,r6
80009124:	0c 91       	mov	r1,r6
80009126:	50 15       	stdsp	sp[0x4],r5
80009128:	08 92       	mov	r2,r4
8000912a:	c9 e8       	rjmp	80009266 <__sfvwrite_r+0x1ce>
8000912c:	06 96       	mov	r6,r3
8000912e:	08 91       	mov	r1,r4
80009130:	c0 48       	rjmp	80009138 <__sfvwrite_r+0xa0>
80009132:	60 03       	ld.w	r3,r0[0x0]
80009134:	60 16       	ld.w	r6,r0[0x4]
80009136:	2f 80       	sub	r0,-8
80009138:	58 06       	cp.w	r6,0
8000913a:	cf c0       	breq	80009132 <__sfvwrite_r+0x9a>
8000913c:	8e 68       	ld.sh	r8,r7[0xc]
8000913e:	6e 24       	ld.w	r4,r7[0x8]
80009140:	10 99       	mov	r9,r8
80009142:	e2 19 02 00 	andl	r9,0x200,COH
80009146:	c5 50       	breq	800091f0 <__sfvwrite_r+0x158>
80009148:	08 36       	cp.w	r6,r4
8000914a:	c4 33       	brcs	800091d0 <__sfvwrite_r+0x138>
8000914c:	10 99       	mov	r9,r8
8000914e:	e2 19 04 80 	andl	r9,0x480,COH
80009152:	c3 f0       	breq	800091d0 <__sfvwrite_r+0x138>
80009154:	6e 4b       	ld.w	r11,r7[0x10]
80009156:	6e 09       	ld.w	r9,r7[0x0]
80009158:	16 19       	sub	r9,r11
8000915a:	50 09       	stdsp	sp[0x0],r9
8000915c:	6e 59       	ld.w	r9,r7[0x14]
8000915e:	10 9c       	mov	r12,r8
80009160:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80009164:	30 28       	mov	r8,2
80009166:	f4 08 0c 08 	divs	r8,r10,r8
8000916a:	fa e9 00 04 	st.d	sp[4],r8
8000916e:	10 94       	mov	r4,r8
80009170:	40 09       	lddsp	r9,sp[0x0]
80009172:	e2 1c 04 00 	andl	r12,0x400,COH
80009176:	2f f9       	sub	r9,-1
80009178:	0c 09       	add	r9,r6
8000917a:	12 38       	cp.w	r8,r9
8000917c:	f2 04 17 30 	movlo	r4,r9
80009180:	58 0c       	cp.w	r12,0
80009182:	c1 00       	breq	800091a2 <__sfvwrite_r+0x10a>
80009184:	08 9b       	mov	r11,r4
80009186:	0a 9c       	mov	r12,r5
80009188:	c6 8d       	rcall	80009458 <_malloc_r>
8000918a:	18 92       	mov	r2,r12
8000918c:	c1 40       	breq	800091b4 <__sfvwrite_r+0x11c>
8000918e:	40 0a       	lddsp	r10,sp[0x0]
80009190:	6e 4b       	ld.w	r11,r7[0x10]
80009192:	e0 a0 03 84 	rcall	8000989a <memcpy>
80009196:	8e 68       	ld.sh	r8,r7[0xc]
80009198:	e0 18 fb 7f 	andl	r8,0xfb7f
8000919c:	a7 b8       	sbr	r8,0x7
8000919e:	ae 68       	st.h	r7[0xc],r8
800091a0:	c0 d8       	rjmp	800091ba <__sfvwrite_r+0x122>
800091a2:	08 9a       	mov	r10,r4
800091a4:	0a 9c       	mov	r12,r5
800091a6:	e0 a0 07 33 	rcall	8000a00c <_realloc_r>
800091aa:	18 92       	mov	r2,r12
800091ac:	c0 71       	brne	800091ba <__sfvwrite_r+0x122>
800091ae:	6e 4b       	ld.w	r11,r7[0x10]
800091b0:	0a 9c       	mov	r12,r5
800091b2:	ca be       	rcall	80008f08 <_free_r>
800091b4:	30 c8       	mov	r8,12
800091b6:	8b 38       	st.w	r5[0xc],r8
800091b8:	cb 78       	rjmp	80009326 <__sfvwrite_r+0x28e>
800091ba:	40 0a       	lddsp	r10,sp[0x0]
800091bc:	40 09       	lddsp	r9,sp[0x0]
800091be:	e8 0a 01 0a 	sub	r10,r4,r10
800091c2:	e4 09 00 08 	add	r8,r2,r9
800091c6:	8f 54       	st.w	r7[0x14],r4
800091c8:	8f 2a       	st.w	r7[0x8],r10
800091ca:	8f 08       	st.w	r7[0x0],r8
800091cc:	8f 42       	st.w	r7[0x10],r2
800091ce:	0c 94       	mov	r4,r6
800091d0:	08 36       	cp.w	r6,r4
800091d2:	ec 04 17 30 	movlo	r4,r6
800091d6:	06 9b       	mov	r11,r3
800091d8:	08 9a       	mov	r10,r4
800091da:	6e 0c       	ld.w	r12,r7[0x0]
800091dc:	e0 a0 04 03 	rcall	800099e2 <memmove>
800091e0:	6e 08       	ld.w	r8,r7[0x0]
800091e2:	08 08       	add	r8,r4
800091e4:	8f 08       	st.w	r7[0x0],r8
800091e6:	6e 28       	ld.w	r8,r7[0x8]
800091e8:	08 18       	sub	r8,r4
800091ea:	0c 94       	mov	r4,r6
800091ec:	8f 28       	st.w	r7[0x8],r8
800091ee:	c3 08       	rjmp	8000924e <__sfvwrite_r+0x1b6>
800091f0:	08 36       	cp.w	r6,r4
800091f2:	5f ba       	srhi	r10
800091f4:	6e 0c       	ld.w	r12,r7[0x0]
800091f6:	6e 48       	ld.w	r8,r7[0x10]
800091f8:	10 3c       	cp.w	r12,r8
800091fa:	5f b8       	srhi	r8
800091fc:	f5 e8 00 08 	and	r8,r10,r8
80009200:	f2 08 18 00 	cp.b	r8,r9
80009204:	c0 e0       	breq	80009220 <__sfvwrite_r+0x188>
80009206:	06 9b       	mov	r11,r3
80009208:	08 9a       	mov	r10,r4
8000920a:	e0 a0 03 ec 	rcall	800099e2 <memmove>
8000920e:	6e 08       	ld.w	r8,r7[0x0]
80009210:	08 08       	add	r8,r4
80009212:	0e 9b       	mov	r11,r7
80009214:	8f 08       	st.w	r7[0x0],r8
80009216:	0a 9c       	mov	r12,r5
80009218:	fe b0 fd 00 	rcall	80008c18 <_fflush_r>
8000921c:	c1 90       	breq	8000924e <__sfvwrite_r+0x1b6>
8000921e:	c8 48       	rjmp	80009326 <__sfvwrite_r+0x28e>
80009220:	6e 59       	ld.w	r9,r7[0x14]
80009222:	12 36       	cp.w	r6,r9
80009224:	c0 a3       	brcs	80009238 <__sfvwrite_r+0x1a0>
80009226:	6e a8       	ld.w	r8,r7[0x28]
80009228:	06 9a       	mov	r10,r3
8000922a:	6e 8b       	ld.w	r11,r7[0x20]
8000922c:	0a 9c       	mov	r12,r5
8000922e:	5d 18       	icall	r8
80009230:	18 94       	mov	r4,r12
80009232:	e0 89 00 0e 	brgt	8000924e <__sfvwrite_r+0x1b6>
80009236:	c7 88       	rjmp	80009326 <__sfvwrite_r+0x28e>
80009238:	0c 9a       	mov	r10,r6
8000923a:	06 9b       	mov	r11,r3
8000923c:	e0 a0 03 d3 	rcall	800099e2 <memmove>
80009240:	6e 08       	ld.w	r8,r7[0x0]
80009242:	0c 08       	add	r8,r6
80009244:	0c 94       	mov	r4,r6
80009246:	8f 08       	st.w	r7[0x0],r8
80009248:	6e 28       	ld.w	r8,r7[0x8]
8000924a:	0c 18       	sub	r8,r6
8000924c:	8f 28       	st.w	r7[0x8],r8
8000924e:	62 28       	ld.w	r8,r1[0x8]
80009250:	08 18       	sub	r8,r4
80009252:	83 28       	st.w	r1[0x8],r8
80009254:	c6 e0       	breq	80009330 <__sfvwrite_r+0x298>
80009256:	08 16       	sub	r6,r4
80009258:	08 03       	add	r3,r4
8000925a:	c6 fb       	rjmp	80009138 <__sfvwrite_r+0xa0>
8000925c:	60 03       	ld.w	r3,r0[0x0]
8000925e:	60 11       	ld.w	r1,r0[0x4]
80009260:	30 08       	mov	r8,0
80009262:	2f 80       	sub	r0,-8
80009264:	50 08       	stdsp	sp[0x0],r8
80009266:	58 01       	cp.w	r1,0
80009268:	cf a0       	breq	8000925c <__sfvwrite_r+0x1c4>
8000926a:	40 0a       	lddsp	r10,sp[0x0]
8000926c:	58 0a       	cp.w	r10,0
8000926e:	c1 51       	brne	80009298 <__sfvwrite_r+0x200>
80009270:	e2 c6 ff ff 	sub	r6,r1,-1
80009274:	02 9a       	mov	r10,r1
80009276:	30 ab       	mov	r11,10
80009278:	06 9c       	mov	r12,r3
8000927a:	e0 a0 03 05 	rcall	80009884 <memchr>
8000927e:	f8 c8 ff ff 	sub	r8,r12,-1
80009282:	58 0c       	cp.w	r12,0
80009284:	f1 d3 e1 16 	subne	r6,r8,r3
80009288:	f9 b9 01 01 	movne	r9,1
8000928c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009290:	f9 b8 00 01 	moveq	r8,1
80009294:	fb f8 0a 00 	st.weq	sp[0x0],r8
80009298:	02 36       	cp.w	r6,r1
8000929a:	ec 04 17 80 	movls	r4,r6
8000929e:	e2 04 17 b0 	movhi	r4,r1
800092a2:	6e 59       	ld.w	r9,r7[0x14]
800092a4:	6e 25       	ld.w	r5,r7[0x8]
800092a6:	f2 05 00 05 	add	r5,r9,r5
800092aa:	0a 34       	cp.w	r4,r5
800092ac:	5f 9a       	srgt	r10
800092ae:	6e 0c       	ld.w	r12,r7[0x0]
800092b0:	6e 48       	ld.w	r8,r7[0x10]
800092b2:	10 3c       	cp.w	r12,r8
800092b4:	5f b8       	srhi	r8
800092b6:	f5 e8 00 08 	and	r8,r10,r8
800092ba:	30 0a       	mov	r10,0
800092bc:	f4 08 18 00 	cp.b	r8,r10
800092c0:	c0 e0       	breq	800092dc <__sfvwrite_r+0x244>
800092c2:	06 9b       	mov	r11,r3
800092c4:	0a 9a       	mov	r10,r5
800092c6:	e0 a0 03 8e 	rcall	800099e2 <memmove>
800092ca:	6e 08       	ld.w	r8,r7[0x0]
800092cc:	0a 08       	add	r8,r5
800092ce:	0e 9b       	mov	r11,r7
800092d0:	8f 08       	st.w	r7[0x0],r8
800092d2:	40 1c       	lddsp	r12,sp[0x4]
800092d4:	fe b0 fc a2 	rcall	80008c18 <_fflush_r>
800092d8:	c1 80       	breq	80009308 <__sfvwrite_r+0x270>
800092da:	c2 68       	rjmp	80009326 <__sfvwrite_r+0x28e>
800092dc:	12 34       	cp.w	r4,r9
800092de:	c0 a5       	brlt	800092f2 <__sfvwrite_r+0x25a>
800092e0:	6e a8       	ld.w	r8,r7[0x28]
800092e2:	06 9a       	mov	r10,r3
800092e4:	6e 8b       	ld.w	r11,r7[0x20]
800092e6:	40 1c       	lddsp	r12,sp[0x4]
800092e8:	5d 18       	icall	r8
800092ea:	18 95       	mov	r5,r12
800092ec:	e0 89 00 0e 	brgt	80009308 <__sfvwrite_r+0x270>
800092f0:	c1 b8       	rjmp	80009326 <__sfvwrite_r+0x28e>
800092f2:	08 9a       	mov	r10,r4
800092f4:	06 9b       	mov	r11,r3
800092f6:	e0 a0 03 76 	rcall	800099e2 <memmove>
800092fa:	6e 08       	ld.w	r8,r7[0x0]
800092fc:	08 08       	add	r8,r4
800092fe:	08 95       	mov	r5,r4
80009300:	8f 08       	st.w	r7[0x0],r8
80009302:	6e 28       	ld.w	r8,r7[0x8]
80009304:	08 18       	sub	r8,r4
80009306:	8f 28       	st.w	r7[0x8],r8
80009308:	0a 16       	sub	r6,r5
8000930a:	c0 71       	brne	80009318 <__sfvwrite_r+0x280>
8000930c:	0e 9b       	mov	r11,r7
8000930e:	40 1c       	lddsp	r12,sp[0x4]
80009310:	fe b0 fc 84 	rcall	80008c18 <_fflush_r>
80009314:	c0 91       	brne	80009326 <__sfvwrite_r+0x28e>
80009316:	50 06       	stdsp	sp[0x0],r6
80009318:	64 28       	ld.w	r8,r2[0x8]
8000931a:	0a 18       	sub	r8,r5
8000931c:	85 28       	st.w	r2[0x8],r8
8000931e:	c0 90       	breq	80009330 <__sfvwrite_r+0x298>
80009320:	0a 11       	sub	r1,r5
80009322:	0a 03       	add	r3,r5
80009324:	ca 1b       	rjmp	80009266 <__sfvwrite_r+0x1ce>
80009326:	8e 68       	ld.sh	r8,r7[0xc]
80009328:	a7 a8       	sbr	r8,0x6
8000932a:	ae 68       	st.h	r7[0xc],r8
8000932c:	3f fc       	mov	r12,-1
8000932e:	c0 28       	rjmp	80009332 <__sfvwrite_r+0x29a>
80009330:	30 0c       	mov	r12,0
80009332:	2f dd       	sub	sp,-12
80009334:	d8 32       	popm	r0-r7,pc
80009336:	d7 03       	nop

80009338 <_fwalk>:
80009338:	d4 31       	pushm	r0-r7,lr
8000933a:	30 05       	mov	r5,0
8000933c:	16 91       	mov	r1,r11
8000933e:	f8 c7 ff 28 	sub	r7,r12,-216
80009342:	0a 92       	mov	r2,r5
80009344:	fe b0 fc f2 	rcall	80008d28 <__sfp_lock_acquire>
80009348:	3f f3       	mov	r3,-1
8000934a:	c1 68       	rjmp	80009376 <_fwalk+0x3e>
8000934c:	6e 26       	ld.w	r6,r7[0x8]
8000934e:	6e 14       	ld.w	r4,r7[0x4]
80009350:	2f 46       	sub	r6,-12
80009352:	c0 c8       	rjmp	8000936a <_fwalk+0x32>
80009354:	8c 08       	ld.sh	r8,r6[0x0]
80009356:	e4 08 19 00 	cp.h	r8,r2
8000935a:	c0 70       	breq	80009368 <_fwalk+0x30>
8000935c:	8c 18       	ld.sh	r8,r6[0x2]
8000935e:	e6 08 19 00 	cp.h	r8,r3
80009362:	c0 30       	breq	80009368 <_fwalk+0x30>
80009364:	5d 11       	icall	r1
80009366:	18 45       	or	r5,r12
80009368:	2a 46       	sub	r6,-92
8000936a:	20 14       	sub	r4,1
8000936c:	ec cc 00 0c 	sub	r12,r6,12
80009370:	58 04       	cp.w	r4,0
80009372:	cf 14       	brge	80009354 <_fwalk+0x1c>
80009374:	6e 07       	ld.w	r7,r7[0x0]
80009376:	58 07       	cp.w	r7,0
80009378:	ce a1       	brne	8000934c <_fwalk+0x14>
8000937a:	fe b0 fc d8 	rcall	80008d2a <__sfp_lock_release>
8000937e:	0a 9c       	mov	r12,r5
80009380:	d8 32       	popm	r0-r7,pc
80009382:	d7 03       	nop

80009384 <_localeconv_r>:
80009384:	48 1c       	lddpc	r12,80009388 <_localeconv_r+0x4>
80009386:	5e fc       	retal	r12
80009388:	80 00       	ld.sh	r0,r0[0x0]
8000938a:	c5 e4       	brge	80009446 <__smakebuf_r+0xba>

8000938c <__smakebuf_r>:
8000938c:	d4 21       	pushm	r4-r7,lr
8000938e:	20 fd       	sub	sp,60
80009390:	96 68       	ld.sh	r8,r11[0xc]
80009392:	16 97       	mov	r7,r11
80009394:	18 96       	mov	r6,r12
80009396:	e2 18 00 02 	andl	r8,0x2,COH
8000939a:	c3 c1       	brne	80009412 <__smakebuf_r+0x86>
8000939c:	96 7b       	ld.sh	r11,r11[0xe]
8000939e:	f0 0b 19 00 	cp.h	r11,r8
800093a2:	c0 55       	brlt	800093ac <__smakebuf_r+0x20>
800093a4:	1a 9a       	mov	r10,sp
800093a6:	e0 a0 09 55 	rcall	8000a650 <_fstat_r>
800093aa:	c0 f4       	brge	800093c8 <__smakebuf_r+0x3c>
800093ac:	8e 65       	ld.sh	r5,r7[0xc]
800093ae:	0a 98       	mov	r8,r5
800093b0:	ab b8       	sbr	r8,0xb
800093b2:	e2 15 00 80 	andl	r5,0x80,COH
800093b6:	ae 68       	st.h	r7[0xc],r8
800093b8:	30 04       	mov	r4,0
800093ba:	e0 68 04 00 	mov	r8,1024
800093be:	f9 b5 01 40 	movne	r5,64
800093c2:	f0 05 17 00 	moveq	r5,r8
800093c6:	c1 c8       	rjmp	800093fe <__smakebuf_r+0x72>
800093c8:	40 18       	lddsp	r8,sp[0x4]
800093ca:	e2 18 f0 00 	andl	r8,0xf000,COH
800093ce:	e0 48 20 00 	cp.w	r8,8192
800093d2:	5f 04       	sreq	r4
800093d4:	e0 48 80 00 	cp.w	r8,32768
800093d8:	c0 e1       	brne	800093f4 <__smakebuf_r+0x68>
800093da:	6e b9       	ld.w	r9,r7[0x2c]
800093dc:	fe c8 f0 9c 	sub	r8,pc,-3940
800093e0:	10 39       	cp.w	r9,r8
800093e2:	c0 91       	brne	800093f4 <__smakebuf_r+0x68>
800093e4:	8e 68       	ld.sh	r8,r7[0xc]
800093e6:	e0 65 04 00 	mov	r5,1024
800093ea:	ab a8       	sbr	r8,0xa
800093ec:	ef 45 00 50 	st.w	r7[80],r5
800093f0:	ae 68       	st.h	r7[0xc],r8
800093f2:	c0 68       	rjmp	800093fe <__smakebuf_r+0x72>
800093f4:	8e 68       	ld.sh	r8,r7[0xc]
800093f6:	e0 65 04 00 	mov	r5,1024
800093fa:	ab b8       	sbr	r8,0xb
800093fc:	ae 68       	st.h	r7[0xc],r8
800093fe:	0a 9b       	mov	r11,r5
80009400:	0c 9c       	mov	r12,r6
80009402:	c2 bc       	rcall	80009458 <_malloc_r>
80009404:	8e 68       	ld.sh	r8,r7[0xc]
80009406:	c0 d1       	brne	80009420 <__smakebuf_r+0x94>
80009408:	ed b8 00 09 	bld	r8,0x9
8000940c:	c1 b0       	breq	80009442 <__smakebuf_r+0xb6>
8000940e:	a1 b8       	sbr	r8,0x1
80009410:	ae 68       	st.h	r7[0xc],r8
80009412:	ee c8 ff b9 	sub	r8,r7,-71
80009416:	8f 48       	st.w	r7[0x10],r8
80009418:	8f 08       	st.w	r7[0x0],r8
8000941a:	30 18       	mov	r8,1
8000941c:	8f 58       	st.w	r7[0x14],r8
8000941e:	c1 28       	rjmp	80009442 <__smakebuf_r+0xb6>
80009420:	a7 b8       	sbr	r8,0x7
80009422:	8f 4c       	st.w	r7[0x10],r12
80009424:	ae 68       	st.h	r7[0xc],r8
80009426:	8f 55       	st.w	r7[0x14],r5
80009428:	fe c8 06 fc 	sub	r8,pc,1788
8000942c:	8f 0c       	st.w	r7[0x0],r12
8000942e:	8d a8       	st.w	r6[0x28],r8
80009430:	58 04       	cp.w	r4,0
80009432:	c0 80       	breq	80009442 <__smakebuf_r+0xb6>
80009434:	8e 7c       	ld.sh	r12,r7[0xe]
80009436:	e0 a0 07 f5 	rcall	8000a420 <isatty>
8000943a:	c0 40       	breq	80009442 <__smakebuf_r+0xb6>
8000943c:	8e 68       	ld.sh	r8,r7[0xc]
8000943e:	a1 a8       	sbr	r8,0x0
80009440:	ae 68       	st.h	r7[0xc],r8
80009442:	2f 1d       	sub	sp,-60
80009444:	d8 22       	popm	r4-r7,pc
80009446:	d7 03       	nop

80009448 <malloc>:
80009448:	d4 01       	pushm	lr
8000944a:	48 38       	lddpc	r8,80009454 <malloc+0xc>
8000944c:	18 9b       	mov	r11,r12
8000944e:	70 0c       	ld.w	r12,r8[0x0]
80009450:	c0 4c       	rcall	80009458 <_malloc_r>
80009452:	d8 02       	popm	pc
80009454:	00 00       	add	r0,r0
80009456:	00 fc       	st.b	--r0,r12

80009458 <_malloc_r>:
80009458:	d4 31       	pushm	r0-r7,lr
8000945a:	f6 c8 ff f5 	sub	r8,r11,-11
8000945e:	18 95       	mov	r5,r12
80009460:	10 97       	mov	r7,r8
80009462:	e0 17 ff f8 	andl	r7,0xfff8
80009466:	59 68       	cp.w	r8,22
80009468:	f9 b7 08 10 	movls	r7,16
8000946c:	16 37       	cp.w	r7,r11
8000946e:	5f 38       	srlo	r8
80009470:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80009474:	c0 50       	breq	8000947e <_malloc_r+0x26>
80009476:	30 c8       	mov	r8,12
80009478:	99 38       	st.w	r12[0xc],r8
8000947a:	e0 8f 01 ec 	bral	80009852 <_malloc_r+0x3fa>
8000947e:	e0 a0 02 d8 	rcall	80009a2e <__malloc_lock>
80009482:	e0 47 01 f7 	cp.w	r7,503
80009486:	e0 8b 00 1c 	brhi	800094be <_malloc_r+0x66>
8000948a:	ee 03 16 03 	lsr	r3,r7,0x3
8000948e:	4c c8       	lddpc	r8,800095bc <_malloc_r+0x164>
80009490:	f0 03 00 38 	add	r8,r8,r3<<0x3
80009494:	70 36       	ld.w	r6,r8[0xc]
80009496:	10 36       	cp.w	r6,r8
80009498:	c0 61       	brne	800094a4 <_malloc_r+0x4c>
8000949a:	ec c8 ff f8 	sub	r8,r6,-8
8000949e:	70 36       	ld.w	r6,r8[0xc]
800094a0:	10 36       	cp.w	r6,r8
800094a2:	c0 c0       	breq	800094ba <_malloc_r+0x62>
800094a4:	6c 18       	ld.w	r8,r6[0x4]
800094a6:	e0 18 ff fc 	andl	r8,0xfffc
800094aa:	6c 3a       	ld.w	r10,r6[0xc]
800094ac:	ec 08 00 09 	add	r9,r6,r8
800094b0:	0a 9c       	mov	r12,r5
800094b2:	6c 28       	ld.w	r8,r6[0x8]
800094b4:	95 28       	st.w	r10[0x8],r8
800094b6:	91 3a       	st.w	r8[0xc],r10
800094b8:	c4 68       	rjmp	80009544 <_malloc_r+0xec>
800094ba:	2f e3       	sub	r3,-2
800094bc:	c4 c8       	rjmp	80009554 <_malloc_r+0xfc>
800094be:	ee 03 16 09 	lsr	r3,r7,0x9
800094c2:	c0 41       	brne	800094ca <_malloc_r+0x72>
800094c4:	ee 03 16 03 	lsr	r3,r7,0x3
800094c8:	c2 68       	rjmp	80009514 <_malloc_r+0xbc>
800094ca:	58 43       	cp.w	r3,4
800094cc:	e0 8b 00 06 	brhi	800094d8 <_malloc_r+0x80>
800094d0:	ee 03 16 06 	lsr	r3,r7,0x6
800094d4:	2c 83       	sub	r3,-56
800094d6:	c1 f8       	rjmp	80009514 <_malloc_r+0xbc>
800094d8:	59 43       	cp.w	r3,20
800094da:	e0 8b 00 04 	brhi	800094e2 <_malloc_r+0x8a>
800094de:	2a 53       	sub	r3,-91
800094e0:	c1 a8       	rjmp	80009514 <_malloc_r+0xbc>
800094e2:	e0 43 00 54 	cp.w	r3,84
800094e6:	e0 8b 00 06 	brhi	800094f2 <_malloc_r+0x9a>
800094ea:	ee 03 16 0c 	lsr	r3,r7,0xc
800094ee:	29 23       	sub	r3,-110
800094f0:	c1 28       	rjmp	80009514 <_malloc_r+0xbc>
800094f2:	e0 43 01 54 	cp.w	r3,340
800094f6:	e0 8b 00 06 	brhi	80009502 <_malloc_r+0xaa>
800094fa:	ee 03 16 0f 	lsr	r3,r7,0xf
800094fe:	28 93       	sub	r3,-119
80009500:	c0 a8       	rjmp	80009514 <_malloc_r+0xbc>
80009502:	e0 43 05 54 	cp.w	r3,1364
80009506:	e0 88 00 04 	brls	8000950e <_malloc_r+0xb6>
8000950a:	37 e3       	mov	r3,126
8000950c:	c0 48       	rjmp	80009514 <_malloc_r+0xbc>
8000950e:	ee 03 16 12 	lsr	r3,r7,0x12
80009512:	28 43       	sub	r3,-124
80009514:	4a aa       	lddpc	r10,800095bc <_malloc_r+0x164>
80009516:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000951a:	74 36       	ld.w	r6,r10[0xc]
8000951c:	c1 98       	rjmp	8000954e <_malloc_r+0xf6>
8000951e:	6c 19       	ld.w	r9,r6[0x4]
80009520:	e0 19 ff fc 	andl	r9,0xfffc
80009524:	f2 07 01 0b 	sub	r11,r9,r7
80009528:	58 fb       	cp.w	r11,15
8000952a:	e0 8a 00 04 	brle	80009532 <_malloc_r+0xda>
8000952e:	20 13       	sub	r3,1
80009530:	c1 18       	rjmp	80009552 <_malloc_r+0xfa>
80009532:	6c 38       	ld.w	r8,r6[0xc]
80009534:	58 0b       	cp.w	r11,0
80009536:	c0 b5       	brlt	8000954c <_malloc_r+0xf4>
80009538:	6c 2a       	ld.w	r10,r6[0x8]
8000953a:	ec 09 00 09 	add	r9,r6,r9
8000953e:	0a 9c       	mov	r12,r5
80009540:	91 2a       	st.w	r8[0x8],r10
80009542:	95 38       	st.w	r10[0xc],r8
80009544:	72 18       	ld.w	r8,r9[0x4]
80009546:	a1 a8       	sbr	r8,0x0
80009548:	93 18       	st.w	r9[0x4],r8
8000954a:	cb a8       	rjmp	800096be <_malloc_r+0x266>
8000954c:	10 96       	mov	r6,r8
8000954e:	14 36       	cp.w	r6,r10
80009550:	ce 71       	brne	8000951e <_malloc_r+0xc6>
80009552:	2f f3       	sub	r3,-1
80009554:	49 aa       	lddpc	r10,800095bc <_malloc_r+0x164>
80009556:	f4 cc ff f8 	sub	r12,r10,-8
8000955a:	78 26       	ld.w	r6,r12[0x8]
8000955c:	18 36       	cp.w	r6,r12
8000955e:	c6 c0       	breq	80009636 <_malloc_r+0x1de>
80009560:	6c 19       	ld.w	r9,r6[0x4]
80009562:	e0 19 ff fc 	andl	r9,0xfffc
80009566:	f2 07 01 08 	sub	r8,r9,r7
8000956a:	58 f8       	cp.w	r8,15
8000956c:	e0 89 00 8e 	brgt	80009688 <_malloc_r+0x230>
80009570:	99 3c       	st.w	r12[0xc],r12
80009572:	99 2c       	st.w	r12[0x8],r12
80009574:	58 08       	cp.w	r8,0
80009576:	c0 55       	brlt	80009580 <_malloc_r+0x128>
80009578:	ec 09 00 09 	add	r9,r6,r9
8000957c:	0a 9c       	mov	r12,r5
8000957e:	ce 3b       	rjmp	80009544 <_malloc_r+0xec>
80009580:	e0 49 01 ff 	cp.w	r9,511
80009584:	e0 8b 00 13 	brhi	800095aa <_malloc_r+0x152>
80009588:	a3 99       	lsr	r9,0x3
8000958a:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000958e:	70 2b       	ld.w	r11,r8[0x8]
80009590:	8d 38       	st.w	r6[0xc],r8
80009592:	8d 2b       	st.w	r6[0x8],r11
80009594:	97 36       	st.w	r11[0xc],r6
80009596:	91 26       	st.w	r8[0x8],r6
80009598:	a3 49       	asr	r9,0x2
8000959a:	74 18       	ld.w	r8,r10[0x4]
8000959c:	30 1b       	mov	r11,1
8000959e:	f6 09 09 49 	lsl	r9,r11,r9
800095a2:	f1 e9 10 09 	or	r9,r8,r9
800095a6:	95 19       	st.w	r10[0x4],r9
800095a8:	c4 78       	rjmp	80009636 <_malloc_r+0x1de>
800095aa:	f2 0a 16 09 	lsr	r10,r9,0x9
800095ae:	58 4a       	cp.w	r10,4
800095b0:	e0 8b 00 08 	brhi	800095c0 <_malloc_r+0x168>
800095b4:	f2 0a 16 06 	lsr	r10,r9,0x6
800095b8:	2c 8a       	sub	r10,-56
800095ba:	c2 18       	rjmp	800095fc <_malloc_r+0x1a4>
800095bc:	00 00       	add	r0,r0
800095be:	01 00       	ld.w	r0,r0++
800095c0:	59 4a       	cp.w	r10,20
800095c2:	e0 8b 00 04 	brhi	800095ca <_malloc_r+0x172>
800095c6:	2a 5a       	sub	r10,-91
800095c8:	c1 a8       	rjmp	800095fc <_malloc_r+0x1a4>
800095ca:	e0 4a 00 54 	cp.w	r10,84
800095ce:	e0 8b 00 06 	brhi	800095da <_malloc_r+0x182>
800095d2:	f2 0a 16 0c 	lsr	r10,r9,0xc
800095d6:	29 2a       	sub	r10,-110
800095d8:	c1 28       	rjmp	800095fc <_malloc_r+0x1a4>
800095da:	e0 4a 01 54 	cp.w	r10,340
800095de:	e0 8b 00 06 	brhi	800095ea <_malloc_r+0x192>
800095e2:	f2 0a 16 0f 	lsr	r10,r9,0xf
800095e6:	28 9a       	sub	r10,-119
800095e8:	c0 a8       	rjmp	800095fc <_malloc_r+0x1a4>
800095ea:	e0 4a 05 54 	cp.w	r10,1364
800095ee:	e0 88 00 04 	brls	800095f6 <_malloc_r+0x19e>
800095f2:	37 ea       	mov	r10,126
800095f4:	c0 48       	rjmp	800095fc <_malloc_r+0x1a4>
800095f6:	f2 0a 16 12 	lsr	r10,r9,0x12
800095fa:	28 4a       	sub	r10,-124
800095fc:	4c 7b       	lddpc	r11,80009718 <_malloc_r+0x2c0>
800095fe:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80009602:	68 28       	ld.w	r8,r4[0x8]
80009604:	08 38       	cp.w	r8,r4
80009606:	c0 e1       	brne	80009622 <_malloc_r+0x1ca>
80009608:	76 19       	ld.w	r9,r11[0x4]
8000960a:	a3 4a       	asr	r10,0x2
8000960c:	30 1e       	mov	lr,1
8000960e:	fc 0a 09 4a 	lsl	r10,lr,r10
80009612:	f3 ea 10 0a 	or	r10,r9,r10
80009616:	10 99       	mov	r9,r8
80009618:	97 1a       	st.w	r11[0x4],r10
8000961a:	c0 a8       	rjmp	8000962e <_malloc_r+0x1d6>
8000961c:	70 28       	ld.w	r8,r8[0x8]
8000961e:	08 38       	cp.w	r8,r4
80009620:	c0 60       	breq	8000962c <_malloc_r+0x1d4>
80009622:	70 1a       	ld.w	r10,r8[0x4]
80009624:	e0 1a ff fc 	andl	r10,0xfffc
80009628:	14 39       	cp.w	r9,r10
8000962a:	cf 93       	brcs	8000961c <_malloc_r+0x1c4>
8000962c:	70 39       	ld.w	r9,r8[0xc]
8000962e:	8d 39       	st.w	r6[0xc],r9
80009630:	8d 28       	st.w	r6[0x8],r8
80009632:	91 36       	st.w	r8[0xc],r6
80009634:	93 26       	st.w	r9[0x8],r6
80009636:	e6 08 14 02 	asr	r8,r3,0x2
8000963a:	30 1b       	mov	r11,1
8000963c:	4b 74       	lddpc	r4,80009718 <_malloc_r+0x2c0>
8000963e:	f6 08 09 4b 	lsl	r11,r11,r8
80009642:	68 18       	ld.w	r8,r4[0x4]
80009644:	10 3b       	cp.w	r11,r8
80009646:	e0 8b 00 6b 	brhi	8000971c <_malloc_r+0x2c4>
8000964a:	f7 e8 00 09 	and	r9,r11,r8
8000964e:	c0 b1       	brne	80009664 <_malloc_r+0x20c>
80009650:	e0 13 ff fc 	andl	r3,0xfffc
80009654:	a1 7b       	lsl	r11,0x1
80009656:	2f c3       	sub	r3,-4
80009658:	c0 38       	rjmp	8000965e <_malloc_r+0x206>
8000965a:	2f c3       	sub	r3,-4
8000965c:	a1 7b       	lsl	r11,0x1
8000965e:	f7 e8 00 09 	and	r9,r11,r8
80009662:	cf c0       	breq	8000965a <_malloc_r+0x202>
80009664:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80009668:	06 92       	mov	r2,r3
8000966a:	1c 91       	mov	r1,lr
8000966c:	62 36       	ld.w	r6,r1[0xc]
8000966e:	c2 d8       	rjmp	800096c8 <_malloc_r+0x270>
80009670:	6c 1a       	ld.w	r10,r6[0x4]
80009672:	e0 1a ff fc 	andl	r10,0xfffc
80009676:	f4 07 01 08 	sub	r8,r10,r7
8000967a:	58 f8       	cp.w	r8,15
8000967c:	e0 8a 00 15 	brle	800096a6 <_malloc_r+0x24e>
80009680:	6c 3a       	ld.w	r10,r6[0xc]
80009682:	6c 29       	ld.w	r9,r6[0x8]
80009684:	95 29       	st.w	r10[0x8],r9
80009686:	93 3a       	st.w	r9[0xc],r10
80009688:	0e 99       	mov	r9,r7
8000968a:	ec 07 00 07 	add	r7,r6,r7
8000968e:	a1 a9       	sbr	r9,0x0
80009690:	99 37       	st.w	r12[0xc],r7
80009692:	99 27       	st.w	r12[0x8],r7
80009694:	8d 19       	st.w	r6[0x4],r9
80009696:	ee 08 09 08 	st.w	r7[r8],r8
8000969a:	8f 2c       	st.w	r7[0x8],r12
8000969c:	8f 3c       	st.w	r7[0xc],r12
8000969e:	a1 a8       	sbr	r8,0x0
800096a0:	0a 9c       	mov	r12,r5
800096a2:	8f 18       	st.w	r7[0x4],r8
800096a4:	c0 d8       	rjmp	800096be <_malloc_r+0x266>
800096a6:	6c 39       	ld.w	r9,r6[0xc]
800096a8:	58 08       	cp.w	r8,0
800096aa:	c0 e5       	brlt	800096c6 <_malloc_r+0x26e>
800096ac:	ec 0a 00 0a 	add	r10,r6,r10
800096b0:	74 18       	ld.w	r8,r10[0x4]
800096b2:	a1 a8       	sbr	r8,0x0
800096b4:	0a 9c       	mov	r12,r5
800096b6:	95 18       	st.w	r10[0x4],r8
800096b8:	6c 28       	ld.w	r8,r6[0x8]
800096ba:	93 28       	st.w	r9[0x8],r8
800096bc:	91 39       	st.w	r8[0xc],r9
800096be:	cb 9d       	rcall	80009a30 <__malloc_unlock>
800096c0:	ec cc ff f8 	sub	r12,r6,-8
800096c4:	d8 32       	popm	r0-r7,pc
800096c6:	12 96       	mov	r6,r9
800096c8:	02 36       	cp.w	r6,r1
800096ca:	cd 31       	brne	80009670 <_malloc_r+0x218>
800096cc:	2f f2       	sub	r2,-1
800096ce:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800096d2:	c0 30       	breq	800096d8 <_malloc_r+0x280>
800096d4:	2f 81       	sub	r1,-8
800096d6:	cc bb       	rjmp	8000966c <_malloc_r+0x214>
800096d8:	1c 98       	mov	r8,lr
800096da:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800096de:	c0 81       	brne	800096ee <_malloc_r+0x296>
800096e0:	68 19       	ld.w	r9,r4[0x4]
800096e2:	f6 08 11 ff 	rsub	r8,r11,-1
800096e6:	f3 e8 00 08 	and	r8,r9,r8
800096ea:	89 18       	st.w	r4[0x4],r8
800096ec:	c0 78       	rjmp	800096fa <_malloc_r+0x2a2>
800096ee:	f0 c9 00 08 	sub	r9,r8,8
800096f2:	20 13       	sub	r3,1
800096f4:	70 08       	ld.w	r8,r8[0x0]
800096f6:	12 38       	cp.w	r8,r9
800096f8:	cf 10       	breq	800096da <_malloc_r+0x282>
800096fa:	a1 7b       	lsl	r11,0x1
800096fc:	68 18       	ld.w	r8,r4[0x4]
800096fe:	10 3b       	cp.w	r11,r8
80009700:	e0 8b 00 0e 	brhi	8000971c <_malloc_r+0x2c4>
80009704:	58 0b       	cp.w	r11,0
80009706:	c0 b0       	breq	8000971c <_malloc_r+0x2c4>
80009708:	04 93       	mov	r3,r2
8000970a:	c0 38       	rjmp	80009710 <_malloc_r+0x2b8>
8000970c:	2f c3       	sub	r3,-4
8000970e:	a1 7b       	lsl	r11,0x1
80009710:	f7 e8 00 09 	and	r9,r11,r8
80009714:	ca 81       	brne	80009664 <_malloc_r+0x20c>
80009716:	cf bb       	rjmp	8000970c <_malloc_r+0x2b4>
80009718:	00 00       	add	r0,r0
8000971a:	01 00       	ld.w	r0,r0++
8000971c:	68 23       	ld.w	r3,r4[0x8]
8000971e:	66 12       	ld.w	r2,r3[0x4]
80009720:	e0 12 ff fc 	andl	r2,0xfffc
80009724:	0e 32       	cp.w	r2,r7
80009726:	5f 39       	srlo	r9
80009728:	e4 07 01 08 	sub	r8,r2,r7
8000972c:	58 f8       	cp.w	r8,15
8000972e:	5f aa       	srle	r10
80009730:	f5 e9 10 09 	or	r9,r10,r9
80009734:	e0 80 00 9a 	breq	80009868 <_malloc_r+0x410>
80009738:	4c 78       	lddpc	r8,80009854 <_malloc_r+0x3fc>
8000973a:	70 01       	ld.w	r1,r8[0x0]
8000973c:	4c 78       	lddpc	r8,80009858 <_malloc_r+0x400>
8000973e:	2f 01       	sub	r1,-16
80009740:	70 08       	ld.w	r8,r8[0x0]
80009742:	0e 01       	add	r1,r7
80009744:	5b f8       	cp.w	r8,-1
80009746:	c0 40       	breq	8000974e <_malloc_r+0x2f6>
80009748:	28 11       	sub	r1,-127
8000974a:	e0 11 ff 80 	andl	r1,0xff80
8000974e:	02 9b       	mov	r11,r1
80009750:	0a 9c       	mov	r12,r5
80009752:	e0 a0 05 e3 	rcall	8000a318 <_sbrk_r>
80009756:	18 96       	mov	r6,r12
80009758:	5b fc       	cp.w	r12,-1
8000975a:	c6 e0       	breq	80009836 <_malloc_r+0x3de>
8000975c:	e6 02 00 08 	add	r8,r3,r2
80009760:	10 3c       	cp.w	r12,r8
80009762:	c0 32       	brcc	80009768 <_malloc_r+0x310>
80009764:	08 33       	cp.w	r3,r4
80009766:	c6 81       	brne	80009836 <_malloc_r+0x3de>
80009768:	4b da       	lddpc	r10,8000985c <_malloc_r+0x404>
8000976a:	74 09       	ld.w	r9,r10[0x0]
8000976c:	e2 09 00 09 	add	r9,r1,r9
80009770:	95 09       	st.w	r10[0x0],r9
80009772:	10 36       	cp.w	r6,r8
80009774:	c0 a1       	brne	80009788 <_malloc_r+0x330>
80009776:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000977a:	c0 71       	brne	80009788 <_malloc_r+0x330>
8000977c:	e2 02 00 02 	add	r2,r1,r2
80009780:	68 28       	ld.w	r8,r4[0x8]
80009782:	a1 a2       	sbr	r2,0x0
80009784:	91 12       	st.w	r8[0x4],r2
80009786:	c4 c8       	rjmp	8000981e <_malloc_r+0x3c6>
80009788:	4b 4a       	lddpc	r10,80009858 <_malloc_r+0x400>
8000978a:	74 0b       	ld.w	r11,r10[0x0]
8000978c:	5b fb       	cp.w	r11,-1
8000978e:	c0 31       	brne	80009794 <_malloc_r+0x33c>
80009790:	95 06       	st.w	r10[0x0],r6
80009792:	c0 68       	rjmp	8000979e <_malloc_r+0x346>
80009794:	ec 09 00 09 	add	r9,r6,r9
80009798:	4b 1a       	lddpc	r10,8000985c <_malloc_r+0x404>
8000979a:	10 19       	sub	r9,r8
8000979c:	95 09       	st.w	r10[0x0],r9
8000979e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800097a2:	f0 09 11 08 	rsub	r9,r8,8
800097a6:	58 08       	cp.w	r8,0
800097a8:	f2 08 17 10 	movne	r8,r9
800097ac:	ed d8 e1 06 	addne	r6,r6,r8
800097b0:	28 08       	sub	r8,-128
800097b2:	ec 01 00 01 	add	r1,r6,r1
800097b6:	0a 9c       	mov	r12,r5
800097b8:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800097bc:	f0 01 01 01 	sub	r1,r8,r1
800097c0:	02 9b       	mov	r11,r1
800097c2:	e0 a0 05 ab 	rcall	8000a318 <_sbrk_r>
800097c6:	4a 68       	lddpc	r8,8000985c <_malloc_r+0x404>
800097c8:	5b fc       	cp.w	r12,-1
800097ca:	ec 0c 17 00 	moveq	r12,r6
800097ce:	f9 b1 00 00 	moveq	r1,0
800097d2:	70 09       	ld.w	r9,r8[0x0]
800097d4:	0c 1c       	sub	r12,r6
800097d6:	89 26       	st.w	r4[0x8],r6
800097d8:	02 0c       	add	r12,r1
800097da:	12 01       	add	r1,r9
800097dc:	a1 ac       	sbr	r12,0x0
800097de:	91 01       	st.w	r8[0x0],r1
800097e0:	8d 1c       	st.w	r6[0x4],r12
800097e2:	08 33       	cp.w	r3,r4
800097e4:	c1 d0       	breq	8000981e <_malloc_r+0x3c6>
800097e6:	58 f2       	cp.w	r2,15
800097e8:	e0 8b 00 05 	brhi	800097f2 <_malloc_r+0x39a>
800097ec:	30 18       	mov	r8,1
800097ee:	8d 18       	st.w	r6[0x4],r8
800097f0:	c2 38       	rjmp	80009836 <_malloc_r+0x3de>
800097f2:	30 59       	mov	r9,5
800097f4:	20 c2       	sub	r2,12
800097f6:	e0 12 ff f8 	andl	r2,0xfff8
800097fa:	e6 02 00 08 	add	r8,r3,r2
800097fe:	91 29       	st.w	r8[0x8],r9
80009800:	91 19       	st.w	r8[0x4],r9
80009802:	66 18       	ld.w	r8,r3[0x4]
80009804:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009808:	e5 e8 10 08 	or	r8,r2,r8
8000980c:	87 18       	st.w	r3[0x4],r8
8000980e:	58 f2       	cp.w	r2,15
80009810:	e0 88 00 07 	brls	8000981e <_malloc_r+0x3c6>
80009814:	e6 cb ff f8 	sub	r11,r3,-8
80009818:	0a 9c       	mov	r12,r5
8000981a:	fe b0 fb 77 	rcall	80008f08 <_free_r>
8000981e:	49 19       	lddpc	r9,80009860 <_malloc_r+0x408>
80009820:	72 0a       	ld.w	r10,r9[0x0]
80009822:	48 f8       	lddpc	r8,8000985c <_malloc_r+0x404>
80009824:	70 08       	ld.w	r8,r8[0x0]
80009826:	14 38       	cp.w	r8,r10
80009828:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000982c:	48 e9       	lddpc	r9,80009864 <_malloc_r+0x40c>
8000982e:	72 0a       	ld.w	r10,r9[0x0]
80009830:	14 38       	cp.w	r8,r10
80009832:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80009836:	68 28       	ld.w	r8,r4[0x8]
80009838:	70 18       	ld.w	r8,r8[0x4]
8000983a:	e0 18 ff fc 	andl	r8,0xfffc
8000983e:	0e 38       	cp.w	r8,r7
80009840:	5f 39       	srlo	r9
80009842:	0e 18       	sub	r8,r7
80009844:	58 f8       	cp.w	r8,15
80009846:	5f aa       	srle	r10
80009848:	f5 e9 10 09 	or	r9,r10,r9
8000984c:	c0 e0       	breq	80009868 <_malloc_r+0x410>
8000984e:	0a 9c       	mov	r12,r5
80009850:	cf 0c       	rcall	80009a30 <__malloc_unlock>
80009852:	d8 3a       	popm	r0-r7,pc,r12=0
80009854:	00 00       	add	r0,r0
80009856:	06 18       	sub	r8,r3
80009858:	00 00       	add	r0,r0
8000985a:	05 0c       	ld.w	r12,r2++
8000985c:	00 00       	add	r0,r0
8000985e:	06 1c       	sub	r12,r3
80009860:	00 00       	add	r0,r0
80009862:	06 14       	sub	r4,r3
80009864:	00 00       	add	r0,r0
80009866:	06 10       	sub	r0,r3
80009868:	68 26       	ld.w	r6,r4[0x8]
8000986a:	a1 a8       	sbr	r8,0x0
8000986c:	0e 99       	mov	r9,r7
8000986e:	a1 a9       	sbr	r9,0x0
80009870:	8d 19       	st.w	r6[0x4],r9
80009872:	ec 07 00 07 	add	r7,r6,r7
80009876:	0a 9c       	mov	r12,r5
80009878:	89 27       	st.w	r4[0x8],r7
8000987a:	8f 18       	st.w	r7[0x4],r8
8000987c:	cd ac       	rcall	80009a30 <__malloc_unlock>
8000987e:	ec cc ff f8 	sub	r12,r6,-8
80009882:	d8 32       	popm	r0-r7,pc

80009884 <memchr>:
80009884:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80009888:	c0 68       	rjmp	80009894 <memchr+0x10>
8000988a:	20 1a       	sub	r10,1
8000988c:	19 88       	ld.ub	r8,r12[0x0]
8000988e:	16 38       	cp.w	r8,r11
80009890:	5e 0c       	reteq	r12
80009892:	2f fc       	sub	r12,-1
80009894:	58 0a       	cp.w	r10,0
80009896:	cf a1       	brne	8000988a <memchr+0x6>
80009898:	5e fa       	retal	r10

8000989a <memcpy>:
8000989a:	58 8a       	cp.w	r10,8
8000989c:	c2 f5       	brlt	800098fa <memcpy+0x60>
8000989e:	f9 eb 10 09 	or	r9,r12,r11
800098a2:	e2 19 00 03 	andl	r9,0x3,COH
800098a6:	e0 81 00 97 	brne	800099d4 <memcpy+0x13a>
800098aa:	e0 4a 00 20 	cp.w	r10,32
800098ae:	c3 b4       	brge	80009924 <memcpy+0x8a>
800098b0:	f4 08 14 02 	asr	r8,r10,0x2
800098b4:	f0 09 11 08 	rsub	r9,r8,8
800098b8:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800098bc:	76 69       	ld.w	r9,r11[0x18]
800098be:	99 69       	st.w	r12[0x18],r9
800098c0:	76 59       	ld.w	r9,r11[0x14]
800098c2:	99 59       	st.w	r12[0x14],r9
800098c4:	76 49       	ld.w	r9,r11[0x10]
800098c6:	99 49       	st.w	r12[0x10],r9
800098c8:	76 39       	ld.w	r9,r11[0xc]
800098ca:	99 39       	st.w	r12[0xc],r9
800098cc:	76 29       	ld.w	r9,r11[0x8]
800098ce:	99 29       	st.w	r12[0x8],r9
800098d0:	76 19       	ld.w	r9,r11[0x4]
800098d2:	99 19       	st.w	r12[0x4],r9
800098d4:	76 09       	ld.w	r9,r11[0x0]
800098d6:	99 09       	st.w	r12[0x0],r9
800098d8:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800098dc:	f8 08 00 28 	add	r8,r12,r8<<0x2
800098e0:	e0 1a 00 03 	andl	r10,0x3
800098e4:	f4 0a 11 04 	rsub	r10,r10,4
800098e8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800098ec:	17 a9       	ld.ub	r9,r11[0x2]
800098ee:	b0 a9       	st.b	r8[0x2],r9
800098f0:	17 99       	ld.ub	r9,r11[0x1]
800098f2:	b0 99       	st.b	r8[0x1],r9
800098f4:	17 89       	ld.ub	r9,r11[0x0]
800098f6:	b0 89       	st.b	r8[0x0],r9
800098f8:	5e fc       	retal	r12
800098fa:	f4 0a 11 09 	rsub	r10,r10,9
800098fe:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80009902:	17 f9       	ld.ub	r9,r11[0x7]
80009904:	b8 f9       	st.b	r12[0x7],r9
80009906:	17 e9       	ld.ub	r9,r11[0x6]
80009908:	b8 e9       	st.b	r12[0x6],r9
8000990a:	17 d9       	ld.ub	r9,r11[0x5]
8000990c:	b8 d9       	st.b	r12[0x5],r9
8000990e:	17 c9       	ld.ub	r9,r11[0x4]
80009910:	b8 c9       	st.b	r12[0x4],r9
80009912:	17 b9       	ld.ub	r9,r11[0x3]
80009914:	b8 b9       	st.b	r12[0x3],r9
80009916:	17 a9       	ld.ub	r9,r11[0x2]
80009918:	b8 a9       	st.b	r12[0x2],r9
8000991a:	17 99       	ld.ub	r9,r11[0x1]
8000991c:	b8 99       	st.b	r12[0x1],r9
8000991e:	17 89       	ld.ub	r9,r11[0x0]
80009920:	b8 89       	st.b	r12[0x0],r9
80009922:	5e fc       	retal	r12
80009924:	eb cd 40 c0 	pushm	r6-r7,lr
80009928:	18 99       	mov	r9,r12
8000992a:	22 0a       	sub	r10,32
8000992c:	b7 07       	ld.d	r6,r11++
8000992e:	b3 26       	st.d	r9++,r6
80009930:	b7 07       	ld.d	r6,r11++
80009932:	b3 26       	st.d	r9++,r6
80009934:	b7 07       	ld.d	r6,r11++
80009936:	b3 26       	st.d	r9++,r6
80009938:	b7 07       	ld.d	r6,r11++
8000993a:	b3 26       	st.d	r9++,r6
8000993c:	22 0a       	sub	r10,32
8000993e:	cf 74       	brge	8000992c <memcpy+0x92>
80009940:	2f 0a       	sub	r10,-16
80009942:	c0 65       	brlt	8000994e <memcpy+0xb4>
80009944:	b7 07       	ld.d	r6,r11++
80009946:	b3 26       	st.d	r9++,r6
80009948:	b7 07       	ld.d	r6,r11++
8000994a:	b3 26       	st.d	r9++,r6
8000994c:	21 0a       	sub	r10,16
8000994e:	5c 3a       	neg	r10
80009950:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80009954:	d7 03       	nop
80009956:	d7 03       	nop
80009958:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000995c:	f3 66 00 0e 	st.b	r9[14],r6
80009960:	f7 36 00 0d 	ld.ub	r6,r11[13]
80009964:	f3 66 00 0d 	st.b	r9[13],r6
80009968:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000996c:	f3 66 00 0c 	st.b	r9[12],r6
80009970:	f7 36 00 0b 	ld.ub	r6,r11[11]
80009974:	f3 66 00 0b 	st.b	r9[11],r6
80009978:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000997c:	f3 66 00 0a 	st.b	r9[10],r6
80009980:	f7 36 00 09 	ld.ub	r6,r11[9]
80009984:	f3 66 00 09 	st.b	r9[9],r6
80009988:	f7 36 00 08 	ld.ub	r6,r11[8]
8000998c:	f3 66 00 08 	st.b	r9[8],r6
80009990:	f7 36 00 07 	ld.ub	r6,r11[7]
80009994:	f3 66 00 07 	st.b	r9[7],r6
80009998:	f7 36 00 06 	ld.ub	r6,r11[6]
8000999c:	f3 66 00 06 	st.b	r9[6],r6
800099a0:	f7 36 00 05 	ld.ub	r6,r11[5]
800099a4:	f3 66 00 05 	st.b	r9[5],r6
800099a8:	f7 36 00 04 	ld.ub	r6,r11[4]
800099ac:	f3 66 00 04 	st.b	r9[4],r6
800099b0:	f7 36 00 03 	ld.ub	r6,r11[3]
800099b4:	f3 66 00 03 	st.b	r9[3],r6
800099b8:	f7 36 00 02 	ld.ub	r6,r11[2]
800099bc:	f3 66 00 02 	st.b	r9[2],r6
800099c0:	f7 36 00 01 	ld.ub	r6,r11[1]
800099c4:	f3 66 00 01 	st.b	r9[1],r6
800099c8:	f7 36 00 00 	ld.ub	r6,r11[0]
800099cc:	f3 66 00 00 	st.b	r9[0],r6
800099d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800099d4:	20 1a       	sub	r10,1
800099d6:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800099da:	f8 0a 0b 09 	st.b	r12[r10],r9
800099de:	cf b1       	brne	800099d4 <memcpy+0x13a>
800099e0:	5e fc       	retal	r12

800099e2 <memmove>:
800099e2:	d4 01       	pushm	lr
800099e4:	18 3b       	cp.w	r11,r12
800099e6:	c1 92       	brcc	80009a18 <memmove+0x36>
800099e8:	f6 0a 00 09 	add	r9,r11,r10
800099ec:	12 3c       	cp.w	r12,r9
800099ee:	c1 52       	brcc	80009a18 <memmove+0x36>
800099f0:	f8 0a 00 0b 	add	r11,r12,r10
800099f4:	30 08       	mov	r8,0
800099f6:	c0 68       	rjmp	80009a02 <memmove+0x20>
800099f8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800099fc:	20 1a       	sub	r10,1
800099fe:	f6 08 0b 0e 	st.b	r11[r8],lr
80009a02:	20 18       	sub	r8,1
80009a04:	58 0a       	cp.w	r10,0
80009a06:	cf 91       	brne	800099f8 <memmove+0x16>
80009a08:	d8 02       	popm	pc
80009a0a:	f6 08 07 09 	ld.ub	r9,r11[r8]
80009a0e:	20 1a       	sub	r10,1
80009a10:	f8 08 0b 09 	st.b	r12[r8],r9
80009a14:	2f f8       	sub	r8,-1
80009a16:	c0 28       	rjmp	80009a1a <memmove+0x38>
80009a18:	30 08       	mov	r8,0
80009a1a:	58 0a       	cp.w	r10,0
80009a1c:	cf 71       	brne	80009a0a <memmove+0x28>
80009a1e:	d8 02       	popm	pc

80009a20 <memset>:
80009a20:	18 98       	mov	r8,r12
80009a22:	c0 38       	rjmp	80009a28 <memset+0x8>
80009a24:	10 cb       	st.b	r8++,r11
80009a26:	20 1a       	sub	r10,1
80009a28:	58 0a       	cp.w	r10,0
80009a2a:	cf d1       	brne	80009a24 <memset+0x4>
80009a2c:	5e fc       	retal	r12

80009a2e <__malloc_lock>:
80009a2e:	5e fc       	retal	r12

80009a30 <__malloc_unlock>:
80009a30:	5e fc       	retal	r12

80009a32 <__hi0bits>:
80009a32:	18 98       	mov	r8,r12
80009a34:	e0 1c 00 00 	andl	r12,0x0
80009a38:	f0 09 15 10 	lsl	r9,r8,0x10
80009a3c:	58 0c       	cp.w	r12,0
80009a3e:	f2 08 17 00 	moveq	r8,r9
80009a42:	f9 bc 00 10 	moveq	r12,16
80009a46:	f9 bc 01 00 	movne	r12,0
80009a4a:	10 9a       	mov	r10,r8
80009a4c:	f0 09 15 08 	lsl	r9,r8,0x8
80009a50:	e6 1a ff 00 	andh	r10,0xff00,COH
80009a54:	f7 bc 00 f8 	subeq	r12,-8
80009a58:	f2 08 17 00 	moveq	r8,r9
80009a5c:	10 9a       	mov	r10,r8
80009a5e:	f0 09 15 04 	lsl	r9,r8,0x4
80009a62:	e6 1a f0 00 	andh	r10,0xf000,COH
80009a66:	f7 bc 00 fc 	subeq	r12,-4
80009a6a:	f2 08 17 00 	moveq	r8,r9
80009a6e:	10 9a       	mov	r10,r8
80009a70:	f0 09 15 02 	lsl	r9,r8,0x2
80009a74:	e6 1a c0 00 	andh	r10,0xc000,COH
80009a78:	f7 bc 00 fe 	subeq	r12,-2
80009a7c:	f2 08 17 00 	moveq	r8,r9
80009a80:	58 08       	cp.w	r8,0
80009a82:	5e 5c       	retlt	r12
80009a84:	ed b8 00 1e 	bld	r8,0x1e
80009a88:	f9 bc 01 20 	movne	r12,32
80009a8c:	f7 bc 00 ff 	subeq	r12,-1
80009a90:	5e fc       	retal	r12

80009a92 <__lo0bits>:
80009a92:	18 99       	mov	r9,r12
80009a94:	78 08       	ld.w	r8,r12[0x0]
80009a96:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80009a9a:	c1 50       	breq	80009ac4 <__lo0bits+0x32>
80009a9c:	ed b8 00 00 	bld	r8,0x0
80009aa0:	c0 21       	brne	80009aa4 <__lo0bits+0x12>
80009aa2:	5e fd       	retal	0
80009aa4:	10 9b       	mov	r11,r8
80009aa6:	f0 0a 16 01 	lsr	r10,r8,0x1
80009aaa:	e2 1b 00 02 	andl	r11,0x2,COH
80009aae:	a3 88       	lsr	r8,0x2
80009ab0:	58 0b       	cp.w	r11,0
80009ab2:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80009ab6:	f9 bc 01 01 	movne	r12,1
80009aba:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80009abe:	f9 bc 00 02 	moveq	r12,2
80009ac2:	5e fc       	retal	r12
80009ac4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80009ac8:	f0 0b 16 10 	lsr	r11,r8,0x10
80009acc:	58 0a       	cp.w	r10,0
80009ace:	f6 08 17 00 	moveq	r8,r11
80009ad2:	f9 bc 00 10 	moveq	r12,16
80009ad6:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80009ada:	f0 0a 16 08 	lsr	r10,r8,0x8
80009ade:	58 0b       	cp.w	r11,0
80009ae0:	f7 bc 00 f8 	subeq	r12,-8
80009ae4:	f4 08 17 00 	moveq	r8,r10
80009ae8:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80009aec:	f0 0a 16 04 	lsr	r10,r8,0x4
80009af0:	58 0b       	cp.w	r11,0
80009af2:	f7 bc 00 fc 	subeq	r12,-4
80009af6:	f4 08 17 00 	moveq	r8,r10
80009afa:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80009afe:	f0 0a 16 02 	lsr	r10,r8,0x2
80009b02:	58 0b       	cp.w	r11,0
80009b04:	f7 bc 00 fe 	subeq	r12,-2
80009b08:	f4 08 17 00 	moveq	r8,r10
80009b0c:	ed b8 00 00 	bld	r8,0x0
80009b10:	c0 60       	breq	80009b1c <__lo0bits+0x8a>
80009b12:	a1 98       	lsr	r8,0x1
80009b14:	c0 31       	brne	80009b1a <__lo0bits+0x88>
80009b16:	32 0c       	mov	r12,32
80009b18:	5e fc       	retal	r12
80009b1a:	2f fc       	sub	r12,-1
80009b1c:	93 08       	st.w	r9[0x0],r8
80009b1e:	5e fc       	retal	r12

80009b20 <__mcmp>:
80009b20:	d4 01       	pushm	lr
80009b22:	18 98       	mov	r8,r12
80009b24:	76 49       	ld.w	r9,r11[0x10]
80009b26:	78 4c       	ld.w	r12,r12[0x10]
80009b28:	12 1c       	sub	r12,r9
80009b2a:	c1 31       	brne	80009b50 <__mcmp+0x30>
80009b2c:	2f b9       	sub	r9,-5
80009b2e:	a3 69       	lsl	r9,0x2
80009b30:	12 0b       	add	r11,r9
80009b32:	f0 09 00 09 	add	r9,r8,r9
80009b36:	2e c8       	sub	r8,-20
80009b38:	13 4e       	ld.w	lr,--r9
80009b3a:	17 4a       	ld.w	r10,--r11
80009b3c:	14 3e       	cp.w	lr,r10
80009b3e:	c0 60       	breq	80009b4a <__mcmp+0x2a>
80009b40:	f9 bc 03 ff 	movlo	r12,-1
80009b44:	f9 bc 02 01 	movhs	r12,1
80009b48:	d8 02       	popm	pc
80009b4a:	10 39       	cp.w	r9,r8
80009b4c:	fe 9b ff f6 	brhi	80009b38 <__mcmp+0x18>
80009b50:	d8 02       	popm	pc
80009b52:	d7 03       	nop

80009b54 <_Bfree>:
80009b54:	d4 21       	pushm	r4-r7,lr
80009b56:	18 97       	mov	r7,r12
80009b58:	16 95       	mov	r5,r11
80009b5a:	78 96       	ld.w	r6,r12[0x24]
80009b5c:	58 06       	cp.w	r6,0
80009b5e:	c0 91       	brne	80009b70 <_Bfree+0x1c>
80009b60:	31 0c       	mov	r12,16
80009b62:	fe b0 fc 73 	rcall	80009448 <malloc>
80009b66:	99 36       	st.w	r12[0xc],r6
80009b68:	8f 9c       	st.w	r7[0x24],r12
80009b6a:	99 16       	st.w	r12[0x4],r6
80009b6c:	99 26       	st.w	r12[0x8],r6
80009b6e:	99 06       	st.w	r12[0x0],r6
80009b70:	58 05       	cp.w	r5,0
80009b72:	c0 90       	breq	80009b84 <_Bfree+0x30>
80009b74:	6a 19       	ld.w	r9,r5[0x4]
80009b76:	6e 98       	ld.w	r8,r7[0x24]
80009b78:	70 38       	ld.w	r8,r8[0xc]
80009b7a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80009b7e:	8b 0a       	st.w	r5[0x0],r10
80009b80:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80009b84:	d8 22       	popm	r4-r7,pc
80009b86:	d7 03       	nop

80009b88 <_Balloc>:
80009b88:	d4 21       	pushm	r4-r7,lr
80009b8a:	18 97       	mov	r7,r12
80009b8c:	16 96       	mov	r6,r11
80009b8e:	78 95       	ld.w	r5,r12[0x24]
80009b90:	58 05       	cp.w	r5,0
80009b92:	c0 91       	brne	80009ba4 <_Balloc+0x1c>
80009b94:	31 0c       	mov	r12,16
80009b96:	fe b0 fc 59 	rcall	80009448 <malloc>
80009b9a:	99 35       	st.w	r12[0xc],r5
80009b9c:	8f 9c       	st.w	r7[0x24],r12
80009b9e:	99 15       	st.w	r12[0x4],r5
80009ba0:	99 25       	st.w	r12[0x8],r5
80009ba2:	99 05       	st.w	r12[0x0],r5
80009ba4:	6e 95       	ld.w	r5,r7[0x24]
80009ba6:	6a 38       	ld.w	r8,r5[0xc]
80009ba8:	58 08       	cp.w	r8,0
80009baa:	c0 b1       	brne	80009bc0 <_Balloc+0x38>
80009bac:	31 0a       	mov	r10,16
80009bae:	30 4b       	mov	r11,4
80009bb0:	0e 9c       	mov	r12,r7
80009bb2:	e0 a0 04 a7 	rcall	8000a500 <_calloc_r>
80009bb6:	8b 3c       	st.w	r5[0xc],r12
80009bb8:	6e 98       	ld.w	r8,r7[0x24]
80009bba:	70 3c       	ld.w	r12,r8[0xc]
80009bbc:	58 0c       	cp.w	r12,0
80009bbe:	c1 b0       	breq	80009bf4 <_Balloc+0x6c>
80009bc0:	6e 98       	ld.w	r8,r7[0x24]
80009bc2:	70 38       	ld.w	r8,r8[0xc]
80009bc4:	f0 06 00 28 	add	r8,r8,r6<<0x2
80009bc8:	70 0c       	ld.w	r12,r8[0x0]
80009bca:	58 0c       	cp.w	r12,0
80009bcc:	c0 40       	breq	80009bd4 <_Balloc+0x4c>
80009bce:	78 09       	ld.w	r9,r12[0x0]
80009bd0:	91 09       	st.w	r8[0x0],r9
80009bd2:	c0 e8       	rjmp	80009bee <_Balloc+0x66>
80009bd4:	0e 9c       	mov	r12,r7
80009bd6:	30 17       	mov	r7,1
80009bd8:	0e 9b       	mov	r11,r7
80009bda:	ee 06 09 47 	lsl	r7,r7,r6
80009bde:	ee ca ff fb 	sub	r10,r7,-5
80009be2:	a3 6a       	lsl	r10,0x2
80009be4:	e0 a0 04 8e 	rcall	8000a500 <_calloc_r>
80009be8:	c0 60       	breq	80009bf4 <_Balloc+0x6c>
80009bea:	99 16       	st.w	r12[0x4],r6
80009bec:	99 27       	st.w	r12[0x8],r7
80009bee:	30 08       	mov	r8,0
80009bf0:	99 38       	st.w	r12[0xc],r8
80009bf2:	99 48       	st.w	r12[0x10],r8
80009bf4:	d8 22       	popm	r4-r7,pc
80009bf6:	d7 03       	nop

80009bf8 <__d2b>:
80009bf8:	d4 31       	pushm	r0-r7,lr
80009bfa:	20 2d       	sub	sp,8
80009bfc:	16 93       	mov	r3,r11
80009bfe:	12 96       	mov	r6,r9
80009c00:	10 95       	mov	r5,r8
80009c02:	14 92       	mov	r2,r10
80009c04:	30 1b       	mov	r11,1
80009c06:	cc 1f       	rcall	80009b88 <_Balloc>
80009c08:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80009c0c:	50 09       	stdsp	sp[0x0],r9
80009c0e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80009c12:	b5 a9       	sbr	r9,0x14
80009c14:	f0 01 16 14 	lsr	r1,r8,0x14
80009c18:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009c1c:	18 94       	mov	r4,r12
80009c1e:	58 02       	cp.w	r2,0
80009c20:	c1 d0       	breq	80009c5a <__d2b+0x62>
80009c22:	fa cc ff f8 	sub	r12,sp,-8
80009c26:	18 d2       	st.w	--r12,r2
80009c28:	c3 5f       	rcall	80009a92 <__lo0bits>
80009c2a:	40 18       	lddsp	r8,sp[0x4]
80009c2c:	c0 d0       	breq	80009c46 <__d2b+0x4e>
80009c2e:	40 09       	lddsp	r9,sp[0x0]
80009c30:	f8 0a 11 20 	rsub	r10,r12,32
80009c34:	f2 0a 09 4a 	lsl	r10,r9,r10
80009c38:	f5 e8 10 08 	or	r8,r10,r8
80009c3c:	89 58       	st.w	r4[0x14],r8
80009c3e:	f2 0c 0a 49 	lsr	r9,r9,r12
80009c42:	50 09       	stdsp	sp[0x0],r9
80009c44:	c0 28       	rjmp	80009c48 <__d2b+0x50>
80009c46:	89 58       	st.w	r4[0x14],r8
80009c48:	40 08       	lddsp	r8,sp[0x0]
80009c4a:	58 08       	cp.w	r8,0
80009c4c:	f9 b3 01 02 	movne	r3,2
80009c50:	f9 b3 00 01 	moveq	r3,1
80009c54:	89 68       	st.w	r4[0x18],r8
80009c56:	89 43       	st.w	r4[0x10],r3
80009c58:	c0 88       	rjmp	80009c68 <__d2b+0x70>
80009c5a:	1a 9c       	mov	r12,sp
80009c5c:	c1 bf       	rcall	80009a92 <__lo0bits>
80009c5e:	30 13       	mov	r3,1
80009c60:	40 08       	lddsp	r8,sp[0x0]
80009c62:	2e 0c       	sub	r12,-32
80009c64:	89 43       	st.w	r4[0x10],r3
80009c66:	89 58       	st.w	r4[0x14],r8
80009c68:	58 01       	cp.w	r1,0
80009c6a:	c0 90       	breq	80009c7c <__d2b+0x84>
80009c6c:	e2 c1 04 33 	sub	r1,r1,1075
80009c70:	18 01       	add	r1,r12
80009c72:	8d 01       	st.w	r6[0x0],r1
80009c74:	f8 0c 11 35 	rsub	r12,r12,53
80009c78:	8b 0c       	st.w	r5[0x0],r12
80009c7a:	c0 c8       	rjmp	80009c92 <__d2b+0x9a>
80009c7c:	e6 c8 ff fc 	sub	r8,r3,-4
80009c80:	f8 cc 04 32 	sub	r12,r12,1074
80009c84:	a5 73       	lsl	r3,0x5
80009c86:	8d 0c       	st.w	r6[0x0],r12
80009c88:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80009c8c:	cd 3e       	rcall	80009a32 <__hi0bits>
80009c8e:	18 13       	sub	r3,r12
80009c90:	8b 03       	st.w	r5[0x0],r3
80009c92:	08 9c       	mov	r12,r4
80009c94:	2f ed       	sub	sp,-8
80009c96:	d8 32       	popm	r0-r7,pc

80009c98 <__mdiff>:
80009c98:	d4 31       	pushm	r0-r7,lr
80009c9a:	74 48       	ld.w	r8,r10[0x10]
80009c9c:	76 45       	ld.w	r5,r11[0x10]
80009c9e:	16 97       	mov	r7,r11
80009ca0:	14 96       	mov	r6,r10
80009ca2:	10 15       	sub	r5,r8
80009ca4:	c1 31       	brne	80009cca <__mdiff+0x32>
80009ca6:	2f b8       	sub	r8,-5
80009ca8:	ee ce ff ec 	sub	lr,r7,-20
80009cac:	a3 68       	lsl	r8,0x2
80009cae:	f4 08 00 0b 	add	r11,r10,r8
80009cb2:	ee 08 00 08 	add	r8,r7,r8
80009cb6:	11 4a       	ld.w	r10,--r8
80009cb8:	17 49       	ld.w	r9,--r11
80009cba:	12 3a       	cp.w	r10,r9
80009cbc:	c0 30       	breq	80009cc2 <__mdiff+0x2a>
80009cbe:	c0 e2       	brcc	80009cda <__mdiff+0x42>
80009cc0:	c0 78       	rjmp	80009cce <__mdiff+0x36>
80009cc2:	1c 38       	cp.w	r8,lr
80009cc4:	fe 9b ff f9 	brhi	80009cb6 <__mdiff+0x1e>
80009cc8:	c4 98       	rjmp	80009d5a <__mdiff+0xc2>
80009cca:	58 05       	cp.w	r5,0
80009ccc:	c0 64       	brge	80009cd8 <__mdiff+0x40>
80009cce:	0e 98       	mov	r8,r7
80009cd0:	30 15       	mov	r5,1
80009cd2:	0c 97       	mov	r7,r6
80009cd4:	10 96       	mov	r6,r8
80009cd6:	c0 28       	rjmp	80009cda <__mdiff+0x42>
80009cd8:	30 05       	mov	r5,0
80009cda:	6e 1b       	ld.w	r11,r7[0x4]
80009cdc:	c5 6f       	rcall	80009b88 <_Balloc>
80009cde:	6e 49       	ld.w	r9,r7[0x10]
80009ce0:	6c 44       	ld.w	r4,r6[0x10]
80009ce2:	99 35       	st.w	r12[0xc],r5
80009ce4:	2f b4       	sub	r4,-5
80009ce6:	f2 c5 ff fb 	sub	r5,r9,-5
80009cea:	ec 04 00 24 	add	r4,r6,r4<<0x2
80009cee:	ee 05 00 25 	add	r5,r7,r5<<0x2
80009cf2:	2e c6       	sub	r6,-20
80009cf4:	2e c7       	sub	r7,-20
80009cf6:	f8 c8 ff ec 	sub	r8,r12,-20
80009cfa:	30 0a       	mov	r10,0
80009cfc:	0f 0e       	ld.w	lr,r7++
80009cfe:	0d 0b       	ld.w	r11,r6++
80009d00:	fc 02 16 10 	lsr	r2,lr,0x10
80009d04:	f6 03 16 10 	lsr	r3,r11,0x10
80009d08:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009d0c:	e4 03 01 03 	sub	r3,r2,r3
80009d10:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009d14:	fc 0b 01 0b 	sub	r11,lr,r11
80009d18:	f6 0a 00 0a 	add	r10,r11,r10
80009d1c:	b0 1a       	st.h	r8[0x2],r10
80009d1e:	b1 4a       	asr	r10,0x10
80009d20:	e6 0a 00 0a 	add	r10,r3,r10
80009d24:	b0 0a       	st.h	r8[0x0],r10
80009d26:	2f c8       	sub	r8,-4
80009d28:	b1 4a       	asr	r10,0x10
80009d2a:	08 36       	cp.w	r6,r4
80009d2c:	ce 83       	brcs	80009cfc <__mdiff+0x64>
80009d2e:	c0 d8       	rjmp	80009d48 <__mdiff+0xb0>
80009d30:	0f 0b       	ld.w	r11,r7++
80009d32:	f6 0e 16 10 	lsr	lr,r11,0x10
80009d36:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009d3a:	16 0a       	add	r10,r11
80009d3c:	b0 1a       	st.h	r8[0x2],r10
80009d3e:	b1 4a       	asr	r10,0x10
80009d40:	1c 0a       	add	r10,lr
80009d42:	b0 0a       	st.h	r8[0x0],r10
80009d44:	2f c8       	sub	r8,-4
80009d46:	b1 4a       	asr	r10,0x10
80009d48:	0a 37       	cp.w	r7,r5
80009d4a:	cf 33       	brcs	80009d30 <__mdiff+0x98>
80009d4c:	c0 28       	rjmp	80009d50 <__mdiff+0xb8>
80009d4e:	20 19       	sub	r9,1
80009d50:	11 4a       	ld.w	r10,--r8
80009d52:	58 0a       	cp.w	r10,0
80009d54:	cf d0       	breq	80009d4e <__mdiff+0xb6>
80009d56:	99 49       	st.w	r12[0x10],r9
80009d58:	d8 32       	popm	r0-r7,pc
80009d5a:	30 0b       	mov	r11,0
80009d5c:	c1 6f       	rcall	80009b88 <_Balloc>
80009d5e:	30 18       	mov	r8,1
80009d60:	99 48       	st.w	r12[0x10],r8
80009d62:	30 08       	mov	r8,0
80009d64:	99 58       	st.w	r12[0x14],r8
80009d66:	d8 32       	popm	r0-r7,pc

80009d68 <__lshift>:
80009d68:	d4 31       	pushm	r0-r7,lr
80009d6a:	16 97       	mov	r7,r11
80009d6c:	76 46       	ld.w	r6,r11[0x10]
80009d6e:	f4 02 14 05 	asr	r2,r10,0x5
80009d72:	2f f6       	sub	r6,-1
80009d74:	14 93       	mov	r3,r10
80009d76:	18 94       	mov	r4,r12
80009d78:	04 06       	add	r6,r2
80009d7a:	76 1b       	ld.w	r11,r11[0x4]
80009d7c:	6e 28       	ld.w	r8,r7[0x8]
80009d7e:	c0 38       	rjmp	80009d84 <__lshift+0x1c>
80009d80:	2f fb       	sub	r11,-1
80009d82:	a1 78       	lsl	r8,0x1
80009d84:	10 36       	cp.w	r6,r8
80009d86:	fe 99 ff fd 	brgt	80009d80 <__lshift+0x18>
80009d8a:	08 9c       	mov	r12,r4
80009d8c:	cf ee       	rcall	80009b88 <_Balloc>
80009d8e:	30 09       	mov	r9,0
80009d90:	18 95       	mov	r5,r12
80009d92:	f8 c8 ff ec 	sub	r8,r12,-20
80009d96:	12 9a       	mov	r10,r9
80009d98:	c0 38       	rjmp	80009d9e <__lshift+0x36>
80009d9a:	10 aa       	st.w	r8++,r10
80009d9c:	2f f9       	sub	r9,-1
80009d9e:	04 39       	cp.w	r9,r2
80009da0:	cf d5       	brlt	80009d9a <__lshift+0x32>
80009da2:	6e 4b       	ld.w	r11,r7[0x10]
80009da4:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80009da8:	2f bb       	sub	r11,-5
80009daa:	ee c9 ff ec 	sub	r9,r7,-20
80009dae:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80009db2:	58 03       	cp.w	r3,0
80009db4:	c1 30       	breq	80009dda <__lshift+0x72>
80009db6:	e6 0c 11 20 	rsub	r12,r3,32
80009dba:	30 0a       	mov	r10,0
80009dbc:	72 02       	ld.w	r2,r9[0x0]
80009dbe:	e4 03 09 42 	lsl	r2,r2,r3
80009dc2:	04 4a       	or	r10,r2
80009dc4:	10 aa       	st.w	r8++,r10
80009dc6:	13 0a       	ld.w	r10,r9++
80009dc8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80009dcc:	16 39       	cp.w	r9,r11
80009dce:	cf 73       	brcs	80009dbc <__lshift+0x54>
80009dd0:	91 0a       	st.w	r8[0x0],r10
80009dd2:	58 0a       	cp.w	r10,0
80009dd4:	c0 70       	breq	80009de2 <__lshift+0x7a>
80009dd6:	2f f6       	sub	r6,-1
80009dd8:	c0 58       	rjmp	80009de2 <__lshift+0x7a>
80009dda:	13 0a       	ld.w	r10,r9++
80009ddc:	10 aa       	st.w	r8++,r10
80009dde:	16 39       	cp.w	r9,r11
80009de0:	cf d3       	brcs	80009dda <__lshift+0x72>
80009de2:	08 9c       	mov	r12,r4
80009de4:	20 16       	sub	r6,1
80009de6:	0e 9b       	mov	r11,r7
80009de8:	8b 46       	st.w	r5[0x10],r6
80009dea:	cb 5e       	rcall	80009b54 <_Bfree>
80009dec:	0a 9c       	mov	r12,r5
80009dee:	d8 32       	popm	r0-r7,pc

80009df0 <__multiply>:
80009df0:	d4 31       	pushm	r0-r7,lr
80009df2:	20 2d       	sub	sp,8
80009df4:	76 49       	ld.w	r9,r11[0x10]
80009df6:	74 48       	ld.w	r8,r10[0x10]
80009df8:	16 96       	mov	r6,r11
80009dfa:	14 95       	mov	r5,r10
80009dfc:	10 39       	cp.w	r9,r8
80009dfe:	ec 08 17 50 	movlt	r8,r6
80009e02:	ea 06 17 50 	movlt	r6,r5
80009e06:	f0 05 17 50 	movlt	r5,r8
80009e0a:	6c 28       	ld.w	r8,r6[0x8]
80009e0c:	76 43       	ld.w	r3,r11[0x10]
80009e0e:	74 42       	ld.w	r2,r10[0x10]
80009e10:	76 1b       	ld.w	r11,r11[0x4]
80009e12:	e4 03 00 07 	add	r7,r2,r3
80009e16:	10 37       	cp.w	r7,r8
80009e18:	f7 bb 09 ff 	subgt	r11,-1
80009e1c:	cb 6e       	rcall	80009b88 <_Balloc>
80009e1e:	ee c4 ff fb 	sub	r4,r7,-5
80009e22:	f8 c9 ff ec 	sub	r9,r12,-20
80009e26:	f8 04 00 24 	add	r4,r12,r4<<0x2
80009e2a:	30 0a       	mov	r10,0
80009e2c:	12 98       	mov	r8,r9
80009e2e:	c0 28       	rjmp	80009e32 <__multiply+0x42>
80009e30:	10 aa       	st.w	r8++,r10
80009e32:	08 38       	cp.w	r8,r4
80009e34:	cf e3       	brcs	80009e30 <__multiply+0x40>
80009e36:	2f b3       	sub	r3,-5
80009e38:	2f b2       	sub	r2,-5
80009e3a:	ec 03 00 23 	add	r3,r6,r3<<0x2
80009e3e:	ea 02 00 22 	add	r2,r5,r2<<0x2
80009e42:	ec cb ff ec 	sub	r11,r6,-20
80009e46:	50 12       	stdsp	sp[0x4],r2
80009e48:	ea ca ff ec 	sub	r10,r5,-20
80009e4c:	c4 48       	rjmp	80009ed4 <__multiply+0xe4>
80009e4e:	94 95       	ld.uh	r5,r10[0x2]
80009e50:	58 05       	cp.w	r5,0
80009e52:	c2 00       	breq	80009e92 <__multiply+0xa2>
80009e54:	12 98       	mov	r8,r9
80009e56:	16 96       	mov	r6,r11
80009e58:	30 0e       	mov	lr,0
80009e5a:	50 09       	stdsp	sp[0x0],r9
80009e5c:	0d 02       	ld.w	r2,r6++
80009e5e:	e4 00 16 10 	lsr	r0,r2,0x10
80009e62:	70 01       	ld.w	r1,r8[0x0]
80009e64:	70 09       	ld.w	r9,r8[0x0]
80009e66:	b1 81       	lsr	r1,0x10
80009e68:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80009e6c:	e0 05 03 41 	mac	r1,r0,r5
80009e70:	ab 32       	mul	r2,r5
80009e72:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80009e76:	00 02       	add	r2,r0
80009e78:	e4 0e 00 0e 	add	lr,r2,lr
80009e7c:	b0 1e       	st.h	r8[0x2],lr
80009e7e:	b1 8e       	lsr	lr,0x10
80009e80:	1c 01       	add	r1,lr
80009e82:	b0 01       	st.h	r8[0x0],r1
80009e84:	e2 0e 16 10 	lsr	lr,r1,0x10
80009e88:	2f c8       	sub	r8,-4
80009e8a:	06 36       	cp.w	r6,r3
80009e8c:	ce 83       	brcs	80009e5c <__multiply+0x6c>
80009e8e:	40 09       	lddsp	r9,sp[0x0]
80009e90:	91 0e       	st.w	r8[0x0],lr
80009e92:	94 86       	ld.uh	r6,r10[0x0]
80009e94:	58 06       	cp.w	r6,0
80009e96:	c1 d0       	breq	80009ed0 <__multiply+0xe0>
80009e98:	72 02       	ld.w	r2,r9[0x0]
80009e9a:	12 98       	mov	r8,r9
80009e9c:	16 9e       	mov	lr,r11
80009e9e:	30 05       	mov	r5,0
80009ea0:	b0 12       	st.h	r8[0x2],r2
80009ea2:	1d 01       	ld.w	r1,lr++
80009ea4:	90 82       	ld.uh	r2,r8[0x0]
80009ea6:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80009eaa:	ad 30       	mul	r0,r6
80009eac:	e0 02 00 02 	add	r2,r0,r2
80009eb0:	e4 05 00 05 	add	r5,r2,r5
80009eb4:	b0 05       	st.h	r8[0x0],r5
80009eb6:	b1 85       	lsr	r5,0x10
80009eb8:	b1 81       	lsr	r1,0x10
80009eba:	2f c8       	sub	r8,-4
80009ebc:	ad 31       	mul	r1,r6
80009ebe:	90 92       	ld.uh	r2,r8[0x2]
80009ec0:	e2 02 00 02 	add	r2,r1,r2
80009ec4:	0a 02       	add	r2,r5
80009ec6:	e4 05 16 10 	lsr	r5,r2,0x10
80009eca:	06 3e       	cp.w	lr,r3
80009ecc:	ce a3       	brcs	80009ea0 <__multiply+0xb0>
80009ece:	91 02       	st.w	r8[0x0],r2
80009ed0:	2f ca       	sub	r10,-4
80009ed2:	2f c9       	sub	r9,-4
80009ed4:	40 18       	lddsp	r8,sp[0x4]
80009ed6:	10 3a       	cp.w	r10,r8
80009ed8:	cb b3       	brcs	80009e4e <__multiply+0x5e>
80009eda:	c0 28       	rjmp	80009ede <__multiply+0xee>
80009edc:	20 17       	sub	r7,1
80009ede:	58 07       	cp.w	r7,0
80009ee0:	e0 8a 00 05 	brle	80009eea <__multiply+0xfa>
80009ee4:	09 48       	ld.w	r8,--r4
80009ee6:	58 08       	cp.w	r8,0
80009ee8:	cf a0       	breq	80009edc <__multiply+0xec>
80009eea:	99 47       	st.w	r12[0x10],r7
80009eec:	2f ed       	sub	sp,-8
80009eee:	d8 32       	popm	r0-r7,pc

80009ef0 <__i2b>:
80009ef0:	d4 21       	pushm	r4-r7,lr
80009ef2:	16 97       	mov	r7,r11
80009ef4:	30 1b       	mov	r11,1
80009ef6:	c4 9e       	rcall	80009b88 <_Balloc>
80009ef8:	30 19       	mov	r9,1
80009efa:	99 57       	st.w	r12[0x14],r7
80009efc:	99 49       	st.w	r12[0x10],r9
80009efe:	d8 22       	popm	r4-r7,pc

80009f00 <__multadd>:
80009f00:	d4 31       	pushm	r0-r7,lr
80009f02:	30 08       	mov	r8,0
80009f04:	12 95       	mov	r5,r9
80009f06:	16 97       	mov	r7,r11
80009f08:	18 96       	mov	r6,r12
80009f0a:	76 44       	ld.w	r4,r11[0x10]
80009f0c:	f6 c9 ff ec 	sub	r9,r11,-20
80009f10:	72 0b       	ld.w	r11,r9[0x0]
80009f12:	f6 0c 16 10 	lsr	r12,r11,0x10
80009f16:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009f1a:	f4 0c 02 4c 	mul	r12,r10,r12
80009f1e:	f4 0b 03 45 	mac	r5,r10,r11
80009f22:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80009f26:	b1 85       	lsr	r5,0x10
80009f28:	18 05       	add	r5,r12
80009f2a:	ea 0c 15 10 	lsl	r12,r5,0x10
80009f2e:	f8 0b 00 0b 	add	r11,r12,r11
80009f32:	12 ab       	st.w	r9++,r11
80009f34:	2f f8       	sub	r8,-1
80009f36:	b1 85       	lsr	r5,0x10
80009f38:	08 38       	cp.w	r8,r4
80009f3a:	ce b5       	brlt	80009f10 <__multadd+0x10>
80009f3c:	58 05       	cp.w	r5,0
80009f3e:	c1 c0       	breq	80009f76 <__multadd+0x76>
80009f40:	6e 28       	ld.w	r8,r7[0x8]
80009f42:	10 34       	cp.w	r4,r8
80009f44:	c1 35       	brlt	80009f6a <__multadd+0x6a>
80009f46:	6e 1b       	ld.w	r11,r7[0x4]
80009f48:	0c 9c       	mov	r12,r6
80009f4a:	2f fb       	sub	r11,-1
80009f4c:	c1 ee       	rcall	80009b88 <_Balloc>
80009f4e:	6e 4a       	ld.w	r10,r7[0x10]
80009f50:	ee cb ff f4 	sub	r11,r7,-12
80009f54:	18 93       	mov	r3,r12
80009f56:	2f ea       	sub	r10,-2
80009f58:	2f 4c       	sub	r12,-12
80009f5a:	a3 6a       	lsl	r10,0x2
80009f5c:	fe b0 fc 9f 	rcall	8000989a <memcpy>
80009f60:	0e 9b       	mov	r11,r7
80009f62:	0c 9c       	mov	r12,r6
80009f64:	fe b0 fd f8 	rcall	80009b54 <_Bfree>
80009f68:	06 97       	mov	r7,r3
80009f6a:	e8 c8 ff ff 	sub	r8,r4,-1
80009f6e:	2f b4       	sub	r4,-5
80009f70:	8f 48       	st.w	r7[0x10],r8
80009f72:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80009f76:	0e 9c       	mov	r12,r7
80009f78:	d8 32       	popm	r0-r7,pc
80009f7a:	d7 03       	nop

80009f7c <__pow5mult>:
80009f7c:	d4 31       	pushm	r0-r7,lr
80009f7e:	14 96       	mov	r6,r10
80009f80:	18 97       	mov	r7,r12
80009f82:	16 94       	mov	r4,r11
80009f84:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80009f88:	c0 80       	breq	80009f98 <__pow5mult+0x1c>
80009f8a:	20 18       	sub	r8,1
80009f8c:	49 f9       	lddpc	r9,8000a008 <__pow5mult+0x8c>
80009f8e:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80009f92:	30 09       	mov	r9,0
80009f94:	cb 6f       	rcall	80009f00 <__multadd>
80009f96:	18 94       	mov	r4,r12
80009f98:	a3 46       	asr	r6,0x2
80009f9a:	c3 40       	breq	8000a002 <__pow5mult+0x86>
80009f9c:	6e 95       	ld.w	r5,r7[0x24]
80009f9e:	58 05       	cp.w	r5,0
80009fa0:	c0 91       	brne	80009fb2 <__pow5mult+0x36>
80009fa2:	31 0c       	mov	r12,16
80009fa4:	fe b0 fa 52 	rcall	80009448 <malloc>
80009fa8:	99 35       	st.w	r12[0xc],r5
80009faa:	8f 9c       	st.w	r7[0x24],r12
80009fac:	99 15       	st.w	r12[0x4],r5
80009fae:	99 25       	st.w	r12[0x8],r5
80009fb0:	99 05       	st.w	r12[0x0],r5
80009fb2:	6e 93       	ld.w	r3,r7[0x24]
80009fb4:	66 25       	ld.w	r5,r3[0x8]
80009fb6:	58 05       	cp.w	r5,0
80009fb8:	c0 c1       	brne	80009fd0 <__pow5mult+0x54>
80009fba:	e0 6b 02 71 	mov	r11,625
80009fbe:	0e 9c       	mov	r12,r7
80009fc0:	c9 8f       	rcall	80009ef0 <__i2b>
80009fc2:	87 2c       	st.w	r3[0x8],r12
80009fc4:	30 08       	mov	r8,0
80009fc6:	18 95       	mov	r5,r12
80009fc8:	99 08       	st.w	r12[0x0],r8
80009fca:	c0 38       	rjmp	80009fd0 <__pow5mult+0x54>
80009fcc:	06 9c       	mov	r12,r3
80009fce:	18 95       	mov	r5,r12
80009fd0:	ed b6 00 00 	bld	r6,0x0
80009fd4:	c0 b1       	brne	80009fea <__pow5mult+0x6e>
80009fd6:	08 9b       	mov	r11,r4
80009fd8:	0a 9a       	mov	r10,r5
80009fda:	0e 9c       	mov	r12,r7
80009fdc:	c0 af       	rcall	80009df0 <__multiply>
80009fde:	08 9b       	mov	r11,r4
80009fe0:	18 93       	mov	r3,r12
80009fe2:	0e 9c       	mov	r12,r7
80009fe4:	06 94       	mov	r4,r3
80009fe6:	fe b0 fd b7 	rcall	80009b54 <_Bfree>
80009fea:	a1 56       	asr	r6,0x1
80009fec:	c0 b0       	breq	8000a002 <__pow5mult+0x86>
80009fee:	6a 03       	ld.w	r3,r5[0x0]
80009ff0:	58 03       	cp.w	r3,0
80009ff2:	ce d1       	brne	80009fcc <__pow5mult+0x50>
80009ff4:	0a 9a       	mov	r10,r5
80009ff6:	0a 9b       	mov	r11,r5
80009ff8:	0e 9c       	mov	r12,r7
80009ffa:	cf be       	rcall	80009df0 <__multiply>
80009ffc:	8b 0c       	st.w	r5[0x0],r12
80009ffe:	99 03       	st.w	r12[0x0],r3
8000a000:	ce 7b       	rjmp	80009fce <__pow5mult+0x52>
8000a002:	08 9c       	mov	r12,r4
8000a004:	d8 32       	popm	r0-r7,pc
8000a006:	d7 03       	nop
8000a008:	80 00       	ld.sh	r0,r0[0x0]
8000a00a:	c6 24       	brge	8000a0ce <_realloc_r+0xc2>

8000a00c <_realloc_r>:
8000a00c:	d4 31       	pushm	r0-r7,lr
8000a00e:	20 1d       	sub	sp,4
8000a010:	16 94       	mov	r4,r11
8000a012:	18 92       	mov	r2,r12
8000a014:	14 9b       	mov	r11,r10
8000a016:	58 04       	cp.w	r4,0
8000a018:	c0 51       	brne	8000a022 <_realloc_r+0x16>
8000a01a:	fe b0 fa 1f 	rcall	80009458 <_malloc_r>
8000a01e:	18 95       	mov	r5,r12
8000a020:	c5 59       	rjmp	8000a2ca <_realloc_r+0x2be>
8000a022:	50 0a       	stdsp	sp[0x0],r10
8000a024:	fe b0 fd 05 	rcall	80009a2e <__malloc_lock>
8000a028:	40 0b       	lddsp	r11,sp[0x0]
8000a02a:	f6 c8 ff f5 	sub	r8,r11,-11
8000a02e:	e8 c1 00 08 	sub	r1,r4,8
8000a032:	10 96       	mov	r6,r8
8000a034:	62 1c       	ld.w	r12,r1[0x4]
8000a036:	e0 16 ff f8 	andl	r6,0xfff8
8000a03a:	59 68       	cp.w	r8,22
8000a03c:	f9 b6 08 10 	movls	r6,16
8000a040:	16 36       	cp.w	r6,r11
8000a042:	5f 38       	srlo	r8
8000a044:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000a048:	c0 50       	breq	8000a052 <_realloc_r+0x46>
8000a04a:	30 c8       	mov	r8,12
8000a04c:	30 05       	mov	r5,0
8000a04e:	85 38       	st.w	r2[0xc],r8
8000a050:	c3 d9       	rjmp	8000a2ca <_realloc_r+0x2be>
8000a052:	18 90       	mov	r0,r12
8000a054:	e0 10 ff fc 	andl	r0,0xfffc
8000a058:	0c 30       	cp.w	r0,r6
8000a05a:	e0 84 01 0d 	brge	8000a274 <_realloc_r+0x268>
8000a05e:	4c a8       	lddpc	r8,8000a184 <_realloc_r+0x178>
8000a060:	e2 00 00 09 	add	r9,r1,r0
8000a064:	70 25       	ld.w	r5,r8[0x8]
8000a066:	0a 39       	cp.w	r9,r5
8000a068:	c0 90       	breq	8000a07a <_realloc_r+0x6e>
8000a06a:	72 1a       	ld.w	r10,r9[0x4]
8000a06c:	a1 ca       	cbr	r10,0x0
8000a06e:	f2 0a 00 0a 	add	r10,r9,r10
8000a072:	74 1a       	ld.w	r10,r10[0x4]
8000a074:	ed ba 00 00 	bld	r10,0x0
8000a078:	c2 20       	breq	8000a0bc <_realloc_r+0xb0>
8000a07a:	72 1a       	ld.w	r10,r9[0x4]
8000a07c:	e0 1a ff fc 	andl	r10,0xfffc
8000a080:	f4 00 00 03 	add	r3,r10,r0
8000a084:	0a 39       	cp.w	r9,r5
8000a086:	c1 31       	brne	8000a0ac <_realloc_r+0xa0>
8000a088:	ec c7 ff f0 	sub	r7,r6,-16
8000a08c:	0e 33       	cp.w	r3,r7
8000a08e:	c1 95       	brlt	8000a0c0 <_realloc_r+0xb4>
8000a090:	e2 06 00 09 	add	r9,r1,r6
8000a094:	0c 13       	sub	r3,r6
8000a096:	a1 a3       	sbr	r3,0x0
8000a098:	93 13       	st.w	r9[0x4],r3
8000a09a:	91 29       	st.w	r8[0x8],r9
8000a09c:	04 9c       	mov	r12,r2
8000a09e:	62 18       	ld.w	r8,r1[0x4]
8000a0a0:	08 95       	mov	r5,r4
8000a0a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a0a6:	10 46       	or	r6,r8
8000a0a8:	83 16       	st.w	r1[0x4],r6
8000a0aa:	c0 e9       	rjmp	8000a2c6 <_realloc_r+0x2ba>
8000a0ac:	0c 33       	cp.w	r3,r6
8000a0ae:	c0 95       	brlt	8000a0c0 <_realloc_r+0xb4>
8000a0b0:	72 28       	ld.w	r8,r9[0x8]
8000a0b2:	02 97       	mov	r7,r1
8000a0b4:	72 39       	ld.w	r9,r9[0xc]
8000a0b6:	93 28       	st.w	r9[0x8],r8
8000a0b8:	91 39       	st.w	r8[0xc],r9
8000a0ba:	cd f8       	rjmp	8000a278 <_realloc_r+0x26c>
8000a0bc:	30 0a       	mov	r10,0
8000a0be:	14 99       	mov	r9,r10
8000a0c0:	ed bc 00 00 	bld	r12,0x0
8000a0c4:	e0 80 00 98 	breq	8000a1f4 <_realloc_r+0x1e8>
8000a0c8:	62 07       	ld.w	r7,r1[0x0]
8000a0ca:	e2 07 01 07 	sub	r7,r1,r7
8000a0ce:	6e 1c       	ld.w	r12,r7[0x4]
8000a0d0:	e0 1c ff fc 	andl	r12,0xfffc
8000a0d4:	58 09       	cp.w	r9,0
8000a0d6:	c5 90       	breq	8000a188 <_realloc_r+0x17c>
8000a0d8:	f8 00 00 03 	add	r3,r12,r0
8000a0dc:	0a 39       	cp.w	r9,r5
8000a0de:	c4 81       	brne	8000a16e <_realloc_r+0x162>
8000a0e0:	14 03       	add	r3,r10
8000a0e2:	ec c9 ff f0 	sub	r9,r6,-16
8000a0e6:	12 33       	cp.w	r3,r9
8000a0e8:	c5 05       	brlt	8000a188 <_realloc_r+0x17c>
8000a0ea:	6e 3a       	ld.w	r10,r7[0xc]
8000a0ec:	6e 29       	ld.w	r9,r7[0x8]
8000a0ee:	95 29       	st.w	r10[0x8],r9
8000a0f0:	93 3a       	st.w	r9[0xc],r10
8000a0f2:	ee c5 ff f8 	sub	r5,r7,-8
8000a0f6:	e0 ca 00 04 	sub	r10,r0,4
8000a0fa:	e0 4a 00 24 	cp.w	r10,36
8000a0fe:	e0 8b 00 25 	brhi	8000a148 <_realloc_r+0x13c>
8000a102:	0a 99       	mov	r9,r5
8000a104:	59 3a       	cp.w	r10,19
8000a106:	e0 88 00 1a 	brls	8000a13a <_realloc_r+0x12e>
8000a10a:	09 09       	ld.w	r9,r4++
8000a10c:	8b 09       	st.w	r5[0x0],r9
8000a10e:	09 09       	ld.w	r9,r4++
8000a110:	8f 39       	st.w	r7[0xc],r9
8000a112:	ee c9 ff f0 	sub	r9,r7,-16
8000a116:	59 ba       	cp.w	r10,27
8000a118:	e0 88 00 11 	brls	8000a13a <_realloc_r+0x12e>
8000a11c:	09 0b       	ld.w	r11,r4++
8000a11e:	93 0b       	st.w	r9[0x0],r11
8000a120:	09 09       	ld.w	r9,r4++
8000a122:	8f 59       	st.w	r7[0x14],r9
8000a124:	ee c9 ff e8 	sub	r9,r7,-24
8000a128:	e0 4a 00 24 	cp.w	r10,36
8000a12c:	c0 71       	brne	8000a13a <_realloc_r+0x12e>
8000a12e:	09 0a       	ld.w	r10,r4++
8000a130:	93 0a       	st.w	r9[0x0],r10
8000a132:	ee c9 ff e0 	sub	r9,r7,-32
8000a136:	09 0a       	ld.w	r10,r4++
8000a138:	8f 7a       	st.w	r7[0x1c],r10
8000a13a:	09 0a       	ld.w	r10,r4++
8000a13c:	12 aa       	st.w	r9++,r10
8000a13e:	68 0a       	ld.w	r10,r4[0x0]
8000a140:	93 0a       	st.w	r9[0x0],r10
8000a142:	68 1a       	ld.w	r10,r4[0x4]
8000a144:	93 1a       	st.w	r9[0x4],r10
8000a146:	c0 78       	rjmp	8000a154 <_realloc_r+0x148>
8000a148:	50 08       	stdsp	sp[0x0],r8
8000a14a:	08 9b       	mov	r11,r4
8000a14c:	0a 9c       	mov	r12,r5
8000a14e:	fe b0 fc 4a 	rcall	800099e2 <memmove>
8000a152:	40 08       	lddsp	r8,sp[0x0]
8000a154:	ee 06 00 09 	add	r9,r7,r6
8000a158:	0c 13       	sub	r3,r6
8000a15a:	a1 a3       	sbr	r3,0x0
8000a15c:	93 13       	st.w	r9[0x4],r3
8000a15e:	91 29       	st.w	r8[0x8],r9
8000a160:	04 9c       	mov	r12,r2
8000a162:	6e 18       	ld.w	r8,r7[0x4]
8000a164:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a168:	10 46       	or	r6,r8
8000a16a:	8f 16       	st.w	r7[0x4],r6
8000a16c:	ca d8       	rjmp	8000a2c6 <_realloc_r+0x2ba>
8000a16e:	14 03       	add	r3,r10
8000a170:	0c 33       	cp.w	r3,r6
8000a172:	c0 b5       	brlt	8000a188 <_realloc_r+0x17c>
8000a174:	72 28       	ld.w	r8,r9[0x8]
8000a176:	72 39       	ld.w	r9,r9[0xc]
8000a178:	93 28       	st.w	r9[0x8],r8
8000a17a:	91 39       	st.w	r8[0xc],r9
8000a17c:	6e 28       	ld.w	r8,r7[0x8]
8000a17e:	6e 39       	ld.w	r9,r7[0xc]
8000a180:	c0 a8       	rjmp	8000a194 <_realloc_r+0x188>
8000a182:	d7 03       	nop
8000a184:	00 00       	add	r0,r0
8000a186:	01 00       	ld.w	r0,r0++
8000a188:	f8 00 00 03 	add	r3,r12,r0
8000a18c:	0c 33       	cp.w	r3,r6
8000a18e:	c3 35       	brlt	8000a1f4 <_realloc_r+0x1e8>
8000a190:	6e 39       	ld.w	r9,r7[0xc]
8000a192:	6e 28       	ld.w	r8,r7[0x8]
8000a194:	93 28       	st.w	r9[0x8],r8
8000a196:	91 39       	st.w	r8[0xc],r9
8000a198:	e0 ca 00 04 	sub	r10,r0,4
8000a19c:	ee cc ff f8 	sub	r12,r7,-8
8000a1a0:	e0 4a 00 24 	cp.w	r10,36
8000a1a4:	e0 8b 00 24 	brhi	8000a1ec <_realloc_r+0x1e0>
8000a1a8:	59 3a       	cp.w	r10,19
8000a1aa:	e0 88 00 1a 	brls	8000a1de <_realloc_r+0x1d2>
8000a1ae:	09 08       	ld.w	r8,r4++
8000a1b0:	99 08       	st.w	r12[0x0],r8
8000a1b2:	09 08       	ld.w	r8,r4++
8000a1b4:	8f 38       	st.w	r7[0xc],r8
8000a1b6:	ee cc ff f0 	sub	r12,r7,-16
8000a1ba:	59 ba       	cp.w	r10,27
8000a1bc:	e0 88 00 11 	brls	8000a1de <_realloc_r+0x1d2>
8000a1c0:	09 08       	ld.w	r8,r4++
8000a1c2:	99 08       	st.w	r12[0x0],r8
8000a1c4:	09 08       	ld.w	r8,r4++
8000a1c6:	8f 58       	st.w	r7[0x14],r8
8000a1c8:	ee cc ff e8 	sub	r12,r7,-24
8000a1cc:	e0 4a 00 24 	cp.w	r10,36
8000a1d0:	c0 71       	brne	8000a1de <_realloc_r+0x1d2>
8000a1d2:	09 08       	ld.w	r8,r4++
8000a1d4:	99 08       	st.w	r12[0x0],r8
8000a1d6:	ee cc ff e0 	sub	r12,r7,-32
8000a1da:	09 08       	ld.w	r8,r4++
8000a1dc:	8f 78       	st.w	r7[0x1c],r8
8000a1de:	09 08       	ld.w	r8,r4++
8000a1e0:	18 a8       	st.w	r12++,r8
8000a1e2:	68 08       	ld.w	r8,r4[0x0]
8000a1e4:	99 08       	st.w	r12[0x0],r8
8000a1e6:	68 18       	ld.w	r8,r4[0x4]
8000a1e8:	99 18       	st.w	r12[0x4],r8
8000a1ea:	c4 78       	rjmp	8000a278 <_realloc_r+0x26c>
8000a1ec:	08 9b       	mov	r11,r4
8000a1ee:	fe b0 fb fa 	rcall	800099e2 <memmove>
8000a1f2:	c4 38       	rjmp	8000a278 <_realloc_r+0x26c>
8000a1f4:	04 9c       	mov	r12,r2
8000a1f6:	fe b0 f9 31 	rcall	80009458 <_malloc_r>
8000a1fa:	18 95       	mov	r5,r12
8000a1fc:	c3 a0       	breq	8000a270 <_realloc_r+0x264>
8000a1fe:	62 18       	ld.w	r8,r1[0x4]
8000a200:	f8 c9 00 08 	sub	r9,r12,8
8000a204:	a1 c8       	cbr	r8,0x0
8000a206:	e2 08 00 08 	add	r8,r1,r8
8000a20a:	10 39       	cp.w	r9,r8
8000a20c:	c0 71       	brne	8000a21a <_realloc_r+0x20e>
8000a20e:	72 13       	ld.w	r3,r9[0x4]
8000a210:	02 97       	mov	r7,r1
8000a212:	e0 13 ff fc 	andl	r3,0xfffc
8000a216:	00 03       	add	r3,r0
8000a218:	c3 08       	rjmp	8000a278 <_realloc_r+0x26c>
8000a21a:	e0 ca 00 04 	sub	r10,r0,4
8000a21e:	e0 4a 00 24 	cp.w	r10,36
8000a222:	e0 8b 00 20 	brhi	8000a262 <_realloc_r+0x256>
8000a226:	08 99       	mov	r9,r4
8000a228:	18 98       	mov	r8,r12
8000a22a:	59 3a       	cp.w	r10,19
8000a22c:	e0 88 00 14 	brls	8000a254 <_realloc_r+0x248>
8000a230:	13 0b       	ld.w	r11,r9++
8000a232:	10 ab       	st.w	r8++,r11
8000a234:	13 0b       	ld.w	r11,r9++
8000a236:	10 ab       	st.w	r8++,r11
8000a238:	59 ba       	cp.w	r10,27
8000a23a:	e0 88 00 0d 	brls	8000a254 <_realloc_r+0x248>
8000a23e:	13 0b       	ld.w	r11,r9++
8000a240:	10 ab       	st.w	r8++,r11
8000a242:	13 0b       	ld.w	r11,r9++
8000a244:	10 ab       	st.w	r8++,r11
8000a246:	e0 4a 00 24 	cp.w	r10,36
8000a24a:	c0 51       	brne	8000a254 <_realloc_r+0x248>
8000a24c:	13 0a       	ld.w	r10,r9++
8000a24e:	10 aa       	st.w	r8++,r10
8000a250:	13 0a       	ld.w	r10,r9++
8000a252:	10 aa       	st.w	r8++,r10
8000a254:	13 0a       	ld.w	r10,r9++
8000a256:	10 aa       	st.w	r8++,r10
8000a258:	72 0a       	ld.w	r10,r9[0x0]
8000a25a:	91 0a       	st.w	r8[0x0],r10
8000a25c:	72 19       	ld.w	r9,r9[0x4]
8000a25e:	91 19       	st.w	r8[0x4],r9
8000a260:	c0 48       	rjmp	8000a268 <_realloc_r+0x25c>
8000a262:	08 9b       	mov	r11,r4
8000a264:	fe b0 fb bf 	rcall	800099e2 <memmove>
8000a268:	08 9b       	mov	r11,r4
8000a26a:	04 9c       	mov	r12,r2
8000a26c:	fe b0 f6 4e 	rcall	80008f08 <_free_r>
8000a270:	04 9c       	mov	r12,r2
8000a272:	c2 a8       	rjmp	8000a2c6 <_realloc_r+0x2ba>
8000a274:	00 93       	mov	r3,r0
8000a276:	02 97       	mov	r7,r1
8000a278:	e6 06 01 09 	sub	r9,r3,r6
8000a27c:	6e 18       	ld.w	r8,r7[0x4]
8000a27e:	58 f9       	cp.w	r9,15
8000a280:	e0 88 00 16 	brls	8000a2ac <_realloc_r+0x2a0>
8000a284:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a288:	ed e8 10 08 	or	r8,r6,r8
8000a28c:	8f 18       	st.w	r7[0x4],r8
8000a28e:	12 98       	mov	r8,r9
8000a290:	a1 a8       	sbr	r8,0x0
8000a292:	ee 06 00 0b 	add	r11,r7,r6
8000a296:	f6 09 00 09 	add	r9,r11,r9
8000a29a:	97 18       	st.w	r11[0x4],r8
8000a29c:	72 18       	ld.w	r8,r9[0x4]
8000a29e:	a1 a8       	sbr	r8,0x0
8000a2a0:	2f 8b       	sub	r11,-8
8000a2a2:	93 18       	st.w	r9[0x4],r8
8000a2a4:	04 9c       	mov	r12,r2
8000a2a6:	fe b0 f6 31 	rcall	80008f08 <_free_r>
8000a2aa:	c0 b8       	rjmp	8000a2c0 <_realloc_r+0x2b4>
8000a2ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a2b0:	e7 e8 10 08 	or	r8,r3,r8
8000a2b4:	8f 18       	st.w	r7[0x4],r8
8000a2b6:	ee 03 00 03 	add	r3,r7,r3
8000a2ba:	66 18       	ld.w	r8,r3[0x4]
8000a2bc:	a1 a8       	sbr	r8,0x0
8000a2be:	87 18       	st.w	r3[0x4],r8
8000a2c0:	04 9c       	mov	r12,r2
8000a2c2:	ee c5 ff f8 	sub	r5,r7,-8
8000a2c6:	fe b0 fb b5 	rcall	80009a30 <__malloc_unlock>
8000a2ca:	0a 9c       	mov	r12,r5
8000a2cc:	2f fd       	sub	sp,-4
8000a2ce:	d8 32       	popm	r0-r7,pc

8000a2d0 <__isinfd>:
8000a2d0:	14 98       	mov	r8,r10
8000a2d2:	fc 19 7f f0 	movh	r9,0x7ff0
8000a2d6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a2da:	f0 0b 11 00 	rsub	r11,r8,0
8000a2de:	f7 e8 10 08 	or	r8,r11,r8
8000a2e2:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000a2e6:	f2 08 01 08 	sub	r8,r9,r8
8000a2ea:	f0 0c 11 00 	rsub	r12,r8,0
8000a2ee:	f9 e8 10 08 	or	r8,r12,r8
8000a2f2:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000a2f6:	2f fc       	sub	r12,-1
8000a2f8:	5e fc       	retal	r12

8000a2fa <__isnand>:
8000a2fa:	14 98       	mov	r8,r10
8000a2fc:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a300:	f0 0c 11 00 	rsub	r12,r8,0
8000a304:	10 4c       	or	r12,r8
8000a306:	fc 18 7f f0 	movh	r8,0x7ff0
8000a30a:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000a30e:	f0 0c 01 0c 	sub	r12,r8,r12
8000a312:	bf 9c       	lsr	r12,0x1f
8000a314:	5e fc       	retal	r12
8000a316:	d7 03       	nop

8000a318 <_sbrk_r>:
8000a318:	d4 21       	pushm	r4-r7,lr
8000a31a:	30 08       	mov	r8,0
8000a31c:	18 97       	mov	r7,r12
8000a31e:	48 66       	lddpc	r6,8000a334 <_sbrk_r+0x1c>
8000a320:	16 9c       	mov	r12,r11
8000a322:	8d 08       	st.w	r6[0x0],r8
8000a324:	cb cc       	rcall	8000a49c <_sbrk>
8000a326:	5b fc       	cp.w	r12,-1
8000a328:	c0 51       	brne	8000a332 <_sbrk_r+0x1a>
8000a32a:	6c 08       	ld.w	r8,r6[0x0]
8000a32c:	58 08       	cp.w	r8,0
8000a32e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a332:	d8 22       	popm	r4-r7,pc
8000a334:	00 00       	add	r0,r0
8000a336:	09 1c       	ld.sh	r12,r4++

8000a338 <__sclose>:
8000a338:	d4 01       	pushm	lr
8000a33a:	96 7b       	ld.sh	r11,r11[0xe]
8000a33c:	c0 ed       	rcall	8000a558 <_close_r>
8000a33e:	d8 02       	popm	pc

8000a340 <__sseek>:
8000a340:	d4 21       	pushm	r4-r7,lr
8000a342:	16 97       	mov	r7,r11
8000a344:	96 7b       	ld.sh	r11,r11[0xe]
8000a346:	c9 7d       	rcall	8000a674 <_lseek_r>
8000a348:	8e 68       	ld.sh	r8,r7[0xc]
8000a34a:	10 99       	mov	r9,r8
8000a34c:	ad c8       	cbr	r8,0xc
8000a34e:	ad a9       	sbr	r9,0xc
8000a350:	5b fc       	cp.w	r12,-1
8000a352:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000a356:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000a35a:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000a35e:	d8 22       	popm	r4-r7,pc

8000a360 <__swrite>:
8000a360:	d4 21       	pushm	r4-r7,lr
8000a362:	96 68       	ld.sh	r8,r11[0xc]
8000a364:	16 97       	mov	r7,r11
8000a366:	14 95       	mov	r5,r10
8000a368:	12 94       	mov	r4,r9
8000a36a:	e2 18 01 00 	andl	r8,0x100,COH
8000a36e:	18 96       	mov	r6,r12
8000a370:	c0 50       	breq	8000a37a <__swrite+0x1a>
8000a372:	30 29       	mov	r9,2
8000a374:	30 0a       	mov	r10,0
8000a376:	96 7b       	ld.sh	r11,r11[0xe]
8000a378:	c7 ed       	rcall	8000a674 <_lseek_r>
8000a37a:	8e 68       	ld.sh	r8,r7[0xc]
8000a37c:	ad c8       	cbr	r8,0xc
8000a37e:	08 99       	mov	r9,r4
8000a380:	0a 9a       	mov	r10,r5
8000a382:	8e 7b       	ld.sh	r11,r7[0xe]
8000a384:	0c 9c       	mov	r12,r6
8000a386:	ae 68       	st.h	r7[0xc],r8
8000a388:	ca 8c       	rcall	8000a4d8 <_write_r>
8000a38a:	d8 22       	popm	r4-r7,pc

8000a38c <__sread>:
8000a38c:	d4 21       	pushm	r4-r7,lr
8000a38e:	16 97       	mov	r7,r11
8000a390:	96 7b       	ld.sh	r11,r11[0xe]
8000a392:	c8 5d       	rcall	8000a69c <_read_r>
8000a394:	c0 65       	brlt	8000a3a0 <__sread+0x14>
8000a396:	6f 58       	ld.w	r8,r7[0x54]
8000a398:	18 08       	add	r8,r12
8000a39a:	ef 48 00 54 	st.w	r7[84],r8
8000a39e:	d8 22       	popm	r4-r7,pc
8000a3a0:	8e 68       	ld.sh	r8,r7[0xc]
8000a3a2:	ad c8       	cbr	r8,0xc
8000a3a4:	ae 68       	st.h	r7[0xc],r8
8000a3a6:	d8 22       	popm	r4-r7,pc

8000a3a8 <strlen>:
8000a3a8:	30 09       	mov	r9,0
8000a3aa:	18 98       	mov	r8,r12
8000a3ac:	c0 28       	rjmp	8000a3b0 <strlen+0x8>
8000a3ae:	2f f8       	sub	r8,-1
8000a3b0:	11 8a       	ld.ub	r10,r8[0x0]
8000a3b2:	f2 0a 18 00 	cp.b	r10,r9
8000a3b6:	cf c1       	brne	8000a3ae <strlen+0x6>
8000a3b8:	f0 0c 01 0c 	sub	r12,r8,r12
8000a3bc:	5e fc       	retal	r12
8000a3be:	d7 03       	nop

8000a3c0 <_close>:
8000a3c0:	30 28       	mov	r8,2
8000a3c2:	d6 73       	breakpoint
8000a3c4:	3f fc       	mov	r12,-1
8000a3c6:	35 8b       	mov	r11,88
8000a3c8:	58 0c       	cp.w	r12,0
8000a3ca:	5e 4c       	retge	r12
8000a3cc:	48 2a       	lddpc	r10,8000a3d4 <_close+0x14>
8000a3ce:	95 0b       	st.w	r10[0x0],r11
8000a3d0:	5e fc       	retal	r12
8000a3d2:	d7 03       	nop
8000a3d4:	00 00       	add	r0,r0
8000a3d6:	09 1c       	ld.sh	r12,r4++

8000a3d8 <_lseek>:
8000a3d8:	30 58       	mov	r8,5
8000a3da:	d6 73       	breakpoint
8000a3dc:	3f fc       	mov	r12,-1
8000a3de:	35 8b       	mov	r11,88
8000a3e0:	58 0c       	cp.w	r12,0
8000a3e2:	5e 4c       	retge	r12
8000a3e4:	48 2a       	lddpc	r10,8000a3ec <_lseek+0x14>
8000a3e6:	95 0b       	st.w	r10[0x0],r11
8000a3e8:	5e fc       	retal	r12
8000a3ea:	d7 03       	nop
8000a3ec:	00 00       	add	r0,r0
8000a3ee:	09 1c       	ld.sh	r12,r4++

8000a3f0 <_read>:
8000a3f0:	30 38       	mov	r8,3
8000a3f2:	d6 73       	breakpoint
8000a3f4:	3f fc       	mov	r12,-1
8000a3f6:	35 8b       	mov	r11,88
8000a3f8:	58 0c       	cp.w	r12,0
8000a3fa:	5e 4c       	retge	r12
8000a3fc:	48 2a       	lddpc	r10,8000a404 <_read+0x14>
8000a3fe:	95 0b       	st.w	r10[0x0],r11
8000a400:	5e fc       	retal	r12
8000a402:	d7 03       	nop
8000a404:	00 00       	add	r0,r0
8000a406:	09 1c       	ld.sh	r12,r4++

8000a408 <_write>:
8000a408:	30 48       	mov	r8,4
8000a40a:	d6 73       	breakpoint
8000a40c:	3f fc       	mov	r12,-1
8000a40e:	35 8b       	mov	r11,88
8000a410:	58 0c       	cp.w	r12,0
8000a412:	5e 4c       	retge	r12
8000a414:	48 2a       	lddpc	r10,8000a41c <_write+0x14>
8000a416:	95 0b       	st.w	r10[0x0],r11
8000a418:	5e fc       	retal	r12
8000a41a:	d7 03       	nop
8000a41c:	00 00       	add	r0,r0
8000a41e:	09 1c       	ld.sh	r12,r4++

8000a420 <isatty>:
8000a420:	30 b8       	mov	r8,11
8000a422:	d6 73       	breakpoint
8000a424:	3f fc       	mov	r12,-1
8000a426:	35 8b       	mov	r11,88
8000a428:	58 0c       	cp.w	r12,0
8000a42a:	5e 4c       	retge	r12
8000a42c:	48 2a       	lddpc	r10,8000a434 <isatty+0x14>
8000a42e:	95 0b       	st.w	r10[0x0],r11
8000a430:	5e fc       	retal	r12
8000a432:	d7 03       	nop
8000a434:	00 00       	add	r0,r0
8000a436:	09 1c       	ld.sh	r12,r4++

8000a438 <_fstat_host>:
8000a438:	30 98       	mov	r8,9
8000a43a:	d6 73       	breakpoint
8000a43c:	3f fc       	mov	r12,-1
8000a43e:	35 8b       	mov	r11,88
8000a440:	58 0c       	cp.w	r12,0
8000a442:	5e 4c       	retge	r12
8000a444:	48 2a       	lddpc	r10,8000a44c <_fstat_host+0x14>
8000a446:	95 0b       	st.w	r10[0x0],r11
8000a448:	5e fc       	retal	r12
8000a44a:	d7 03       	nop
8000a44c:	00 00       	add	r0,r0
8000a44e:	09 1c       	ld.sh	r12,r4++

8000a450 <_fstat>:
8000a450:	d4 21       	pushm	r4-r7,lr
8000a452:	21 0d       	sub	sp,64
8000a454:	16 97       	mov	r7,r11
8000a456:	1a 9b       	mov	r11,sp
8000a458:	cf 0f       	rcall	8000a438 <_fstat_host>
8000a45a:	c0 34       	brge	8000a460 <_fstat+0x10>
8000a45c:	3f fc       	mov	r12,-1
8000a45e:	c1 c8       	rjmp	8000a496 <_fstat+0x46>
8000a460:	40 08       	lddsp	r8,sp[0x0]
8000a462:	ae 08       	st.h	r7[0x0],r8
8000a464:	40 18       	lddsp	r8,sp[0x4]
8000a466:	ae 18       	st.h	r7[0x2],r8
8000a468:	40 28       	lddsp	r8,sp[0x8]
8000a46a:	8f 18       	st.w	r7[0x4],r8
8000a46c:	40 38       	lddsp	r8,sp[0xc]
8000a46e:	ae 48       	st.h	r7[0x8],r8
8000a470:	40 48       	lddsp	r8,sp[0x10]
8000a472:	ae 58       	st.h	r7[0xa],r8
8000a474:	40 58       	lddsp	r8,sp[0x14]
8000a476:	ae 68       	st.h	r7[0xc],r8
8000a478:	40 68       	lddsp	r8,sp[0x18]
8000a47a:	ae 78       	st.h	r7[0xe],r8
8000a47c:	40 88       	lddsp	r8,sp[0x20]
8000a47e:	8f 48       	st.w	r7[0x10],r8
8000a480:	40 a8       	lddsp	r8,sp[0x28]
8000a482:	8f b8       	st.w	r7[0x2c],r8
8000a484:	40 c8       	lddsp	r8,sp[0x30]
8000a486:	8f c8       	st.w	r7[0x30],r8
8000a488:	40 d8       	lddsp	r8,sp[0x34]
8000a48a:	8f 58       	st.w	r7[0x14],r8
8000a48c:	40 e8       	lddsp	r8,sp[0x38]
8000a48e:	30 0c       	mov	r12,0
8000a490:	8f 78       	st.w	r7[0x1c],r8
8000a492:	40 f8       	lddsp	r8,sp[0x3c]
8000a494:	8f 98       	st.w	r7[0x24],r8
8000a496:	2f 0d       	sub	sp,-64
8000a498:	d8 22       	popm	r4-r7,pc
8000a49a:	d7 03       	nop

8000a49c <_sbrk>:
8000a49c:	d4 01       	pushm	lr
8000a49e:	48 c8       	lddpc	r8,8000a4cc <_sbrk+0x30>
8000a4a0:	70 09       	ld.w	r9,r8[0x0]
8000a4a2:	58 09       	cp.w	r9,0
8000a4a4:	c0 31       	brne	8000a4aa <_sbrk+0xe>
8000a4a6:	48 b9       	lddpc	r9,8000a4d0 <_sbrk+0x34>
8000a4a8:	91 09       	st.w	r8[0x0],r9
8000a4aa:	48 99       	lddpc	r9,8000a4cc <_sbrk+0x30>
8000a4ac:	48 aa       	lddpc	r10,8000a4d4 <_sbrk+0x38>
8000a4ae:	72 08       	ld.w	r8,r9[0x0]
8000a4b0:	f0 0c 00 0c 	add	r12,r8,r12
8000a4b4:	14 3c       	cp.w	r12,r10
8000a4b6:	e0 8b 00 04 	brhi	8000a4be <_sbrk+0x22>
8000a4ba:	93 0c       	st.w	r9[0x0],r12
8000a4bc:	c0 58       	rjmp	8000a4c6 <_sbrk+0x2a>
8000a4be:	c5 dc       	rcall	8000a578 <__errno>
8000a4c0:	30 c8       	mov	r8,12
8000a4c2:	99 08       	st.w	r12[0x0],r8
8000a4c4:	3f f8       	mov	r8,-1
8000a4c6:	10 9c       	mov	r12,r8
8000a4c8:	d8 02       	popm	pc
8000a4ca:	d7 03       	nop
8000a4cc:	00 00       	add	r0,r0
8000a4ce:	06 44       	or	r4,r3
8000a4d0:	00 00       	add	r0,r0
8000a4d2:	09 20       	ld.uh	r0,r4++
8000a4d4:	00 00       	add	r0,r0
8000a4d6:	70 00       	ld.w	r0,r8[0x0]

8000a4d8 <_write_r>:
8000a4d8:	d4 21       	pushm	r4-r7,lr
8000a4da:	16 98       	mov	r8,r11
8000a4dc:	18 97       	mov	r7,r12
8000a4de:	10 9c       	mov	r12,r8
8000a4e0:	30 08       	mov	r8,0
8000a4e2:	14 9b       	mov	r11,r10
8000a4e4:	48 66       	lddpc	r6,8000a4fc <_write_r+0x24>
8000a4e6:	12 9a       	mov	r10,r9
8000a4e8:	8d 08       	st.w	r6[0x0],r8
8000a4ea:	c8 ff       	rcall	8000a408 <_write>
8000a4ec:	5b fc       	cp.w	r12,-1
8000a4ee:	c0 51       	brne	8000a4f8 <_write_r+0x20>
8000a4f0:	6c 08       	ld.w	r8,r6[0x0]
8000a4f2:	58 08       	cp.w	r8,0
8000a4f4:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a4f8:	d8 22       	popm	r4-r7,pc
8000a4fa:	d7 03       	nop
8000a4fc:	00 00       	add	r0,r0
8000a4fe:	09 1c       	ld.sh	r12,r4++

8000a500 <_calloc_r>:
8000a500:	d4 21       	pushm	r4-r7,lr
8000a502:	f4 0b 02 4b 	mul	r11,r10,r11
8000a506:	fe b0 f7 a9 	rcall	80009458 <_malloc_r>
8000a50a:	18 97       	mov	r7,r12
8000a50c:	c2 30       	breq	8000a552 <_calloc_r+0x52>
8000a50e:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000a512:	e0 1a ff fc 	andl	r10,0xfffc
8000a516:	20 4a       	sub	r10,4
8000a518:	e0 4a 00 24 	cp.w	r10,36
8000a51c:	e0 8b 00 18 	brhi	8000a54c <_calloc_r+0x4c>
8000a520:	18 98       	mov	r8,r12
8000a522:	59 3a       	cp.w	r10,19
8000a524:	e0 88 00 0f 	brls	8000a542 <_calloc_r+0x42>
8000a528:	30 09       	mov	r9,0
8000a52a:	10 a9       	st.w	r8++,r9
8000a52c:	10 a9       	st.w	r8++,r9
8000a52e:	59 ba       	cp.w	r10,27
8000a530:	e0 88 00 09 	brls	8000a542 <_calloc_r+0x42>
8000a534:	10 a9       	st.w	r8++,r9
8000a536:	10 a9       	st.w	r8++,r9
8000a538:	e0 4a 00 24 	cp.w	r10,36
8000a53c:	c0 31       	brne	8000a542 <_calloc_r+0x42>
8000a53e:	10 a9       	st.w	r8++,r9
8000a540:	10 a9       	st.w	r8++,r9
8000a542:	30 09       	mov	r9,0
8000a544:	10 a9       	st.w	r8++,r9
8000a546:	91 19       	st.w	r8[0x4],r9
8000a548:	91 09       	st.w	r8[0x0],r9
8000a54a:	c0 48       	rjmp	8000a552 <_calloc_r+0x52>
8000a54c:	30 0b       	mov	r11,0
8000a54e:	fe b0 fa 69 	rcall	80009a20 <memset>
8000a552:	0e 9c       	mov	r12,r7
8000a554:	d8 22       	popm	r4-r7,pc
8000a556:	d7 03       	nop

8000a558 <_close_r>:
8000a558:	d4 21       	pushm	r4-r7,lr
8000a55a:	30 08       	mov	r8,0
8000a55c:	18 97       	mov	r7,r12
8000a55e:	48 66       	lddpc	r6,8000a574 <_close_r+0x1c>
8000a560:	16 9c       	mov	r12,r11
8000a562:	8d 08       	st.w	r6[0x0],r8
8000a564:	c2 ef       	rcall	8000a3c0 <_close>
8000a566:	5b fc       	cp.w	r12,-1
8000a568:	c0 51       	brne	8000a572 <_close_r+0x1a>
8000a56a:	6c 08       	ld.w	r8,r6[0x0]
8000a56c:	58 08       	cp.w	r8,0
8000a56e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a572:	d8 22       	popm	r4-r7,pc
8000a574:	00 00       	add	r0,r0
8000a576:	09 1c       	ld.sh	r12,r4++

8000a578 <__errno>:
8000a578:	48 28       	lddpc	r8,8000a580 <__errno+0x8>
8000a57a:	70 0c       	ld.w	r12,r8[0x0]
8000a57c:	2f 4c       	sub	r12,-12
8000a57e:	5e fc       	retal	r12
8000a580:	00 00       	add	r0,r0
8000a582:	00 fc       	st.b	--r0,r12

8000a584 <_fclose_r>:
8000a584:	d4 21       	pushm	r4-r7,lr
8000a586:	18 96       	mov	r6,r12
8000a588:	16 97       	mov	r7,r11
8000a58a:	58 0b       	cp.w	r11,0
8000a58c:	c0 31       	brne	8000a592 <_fclose_r+0xe>
8000a58e:	16 95       	mov	r5,r11
8000a590:	c5 08       	rjmp	8000a630 <_fclose_r+0xac>
8000a592:	fe b0 f3 cb 	rcall	80008d28 <__sfp_lock_acquire>
8000a596:	58 06       	cp.w	r6,0
8000a598:	c0 70       	breq	8000a5a6 <_fclose_r+0x22>
8000a59a:	6c 68       	ld.w	r8,r6[0x18]
8000a59c:	58 08       	cp.w	r8,0
8000a59e:	c0 41       	brne	8000a5a6 <_fclose_r+0x22>
8000a5a0:	0c 9c       	mov	r12,r6
8000a5a2:	fe b0 f4 17 	rcall	80008dd0 <__sinit>
8000a5a6:	4a 48       	lddpc	r8,8000a634 <_fclose_r+0xb0>
8000a5a8:	10 37       	cp.w	r7,r8
8000a5aa:	c0 31       	brne	8000a5b0 <_fclose_r+0x2c>
8000a5ac:	6c 07       	ld.w	r7,r6[0x0]
8000a5ae:	c0 a8       	rjmp	8000a5c2 <_fclose_r+0x3e>
8000a5b0:	4a 28       	lddpc	r8,8000a638 <_fclose_r+0xb4>
8000a5b2:	10 37       	cp.w	r7,r8
8000a5b4:	c0 31       	brne	8000a5ba <_fclose_r+0x36>
8000a5b6:	6c 17       	ld.w	r7,r6[0x4]
8000a5b8:	c0 58       	rjmp	8000a5c2 <_fclose_r+0x3e>
8000a5ba:	4a 18       	lddpc	r8,8000a63c <_fclose_r+0xb8>
8000a5bc:	10 37       	cp.w	r7,r8
8000a5be:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000a5c2:	8e 69       	ld.sh	r9,r7[0xc]
8000a5c4:	30 08       	mov	r8,0
8000a5c6:	f0 09 19 00 	cp.h	r9,r8
8000a5ca:	c0 51       	brne	8000a5d4 <_fclose_r+0x50>
8000a5cc:	fe b0 f3 af 	rcall	80008d2a <__sfp_lock_release>
8000a5d0:	30 05       	mov	r5,0
8000a5d2:	c2 f8       	rjmp	8000a630 <_fclose_r+0xac>
8000a5d4:	0e 9b       	mov	r11,r7
8000a5d6:	0c 9c       	mov	r12,r6
8000a5d8:	fe b0 f3 20 	rcall	80008c18 <_fflush_r>
8000a5dc:	6e c8       	ld.w	r8,r7[0x30]
8000a5de:	18 95       	mov	r5,r12
8000a5e0:	58 08       	cp.w	r8,0
8000a5e2:	c0 60       	breq	8000a5ee <_fclose_r+0x6a>
8000a5e4:	6e 8b       	ld.w	r11,r7[0x20]
8000a5e6:	0c 9c       	mov	r12,r6
8000a5e8:	5d 18       	icall	r8
8000a5ea:	f9 b5 05 ff 	movlt	r5,-1
8000a5ee:	8e 68       	ld.sh	r8,r7[0xc]
8000a5f0:	ed b8 00 07 	bld	r8,0x7
8000a5f4:	c0 51       	brne	8000a5fe <_fclose_r+0x7a>
8000a5f6:	6e 4b       	ld.w	r11,r7[0x10]
8000a5f8:	0c 9c       	mov	r12,r6
8000a5fa:	fe b0 f4 87 	rcall	80008f08 <_free_r>
8000a5fe:	6e db       	ld.w	r11,r7[0x34]
8000a600:	58 0b       	cp.w	r11,0
8000a602:	c0 a0       	breq	8000a616 <_fclose_r+0x92>
8000a604:	ee c8 ff bc 	sub	r8,r7,-68
8000a608:	10 3b       	cp.w	r11,r8
8000a60a:	c0 40       	breq	8000a612 <_fclose_r+0x8e>
8000a60c:	0c 9c       	mov	r12,r6
8000a60e:	fe b0 f4 7d 	rcall	80008f08 <_free_r>
8000a612:	30 08       	mov	r8,0
8000a614:	8f d8       	st.w	r7[0x34],r8
8000a616:	6f 2b       	ld.w	r11,r7[0x48]
8000a618:	58 0b       	cp.w	r11,0
8000a61a:	c0 70       	breq	8000a628 <_fclose_r+0xa4>
8000a61c:	0c 9c       	mov	r12,r6
8000a61e:	fe b0 f4 75 	rcall	80008f08 <_free_r>
8000a622:	30 08       	mov	r8,0
8000a624:	ef 48 00 48 	st.w	r7[72],r8
8000a628:	30 08       	mov	r8,0
8000a62a:	ae 68       	st.h	r7[0xc],r8
8000a62c:	fe b0 f3 7f 	rcall	80008d2a <__sfp_lock_release>
8000a630:	0a 9c       	mov	r12,r5
8000a632:	d8 22       	popm	r4-r7,pc
8000a634:	80 00       	ld.sh	r0,r0[0x0]
8000a636:	c5 7c       	rcall	8000a6e4 <__avr32_f64_mul+0x20>
8000a638:	80 00       	ld.sh	r0,r0[0x0]
8000a63a:	c5 9c       	rcall	8000a6ec <__avr32_f64_mul+0x28>
8000a63c:	80 00       	ld.sh	r0,r0[0x0]
8000a63e:	c5 bc       	rcall	8000a6f4 <__avr32_f64_mul+0x30>

8000a640 <fclose>:
8000a640:	d4 01       	pushm	lr
8000a642:	48 38       	lddpc	r8,8000a64c <fclose+0xc>
8000a644:	18 9b       	mov	r11,r12
8000a646:	70 0c       	ld.w	r12,r8[0x0]
8000a648:	c9 ef       	rcall	8000a584 <_fclose_r>
8000a64a:	d8 02       	popm	pc
8000a64c:	00 00       	add	r0,r0
8000a64e:	00 fc       	st.b	--r0,r12

8000a650 <_fstat_r>:
8000a650:	d4 21       	pushm	r4-r7,lr
8000a652:	16 98       	mov	r8,r11
8000a654:	18 97       	mov	r7,r12
8000a656:	10 9c       	mov	r12,r8
8000a658:	30 08       	mov	r8,0
8000a65a:	48 66       	lddpc	r6,8000a670 <_fstat_r+0x20>
8000a65c:	14 9b       	mov	r11,r10
8000a65e:	8d 08       	st.w	r6[0x0],r8
8000a660:	cf 8e       	rcall	8000a450 <_fstat>
8000a662:	5b fc       	cp.w	r12,-1
8000a664:	c0 51       	brne	8000a66e <_fstat_r+0x1e>
8000a666:	6c 08       	ld.w	r8,r6[0x0]
8000a668:	58 08       	cp.w	r8,0
8000a66a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a66e:	d8 22       	popm	r4-r7,pc
8000a670:	00 00       	add	r0,r0
8000a672:	09 1c       	ld.sh	r12,r4++

8000a674 <_lseek_r>:
8000a674:	d4 21       	pushm	r4-r7,lr
8000a676:	16 98       	mov	r8,r11
8000a678:	18 97       	mov	r7,r12
8000a67a:	10 9c       	mov	r12,r8
8000a67c:	30 08       	mov	r8,0
8000a67e:	14 9b       	mov	r11,r10
8000a680:	48 66       	lddpc	r6,8000a698 <_lseek_r+0x24>
8000a682:	12 9a       	mov	r10,r9
8000a684:	8d 08       	st.w	r6[0x0],r8
8000a686:	ca 9e       	rcall	8000a3d8 <_lseek>
8000a688:	5b fc       	cp.w	r12,-1
8000a68a:	c0 51       	brne	8000a694 <_lseek_r+0x20>
8000a68c:	6c 08       	ld.w	r8,r6[0x0]
8000a68e:	58 08       	cp.w	r8,0
8000a690:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a694:	d8 22       	popm	r4-r7,pc
8000a696:	d7 03       	nop
8000a698:	00 00       	add	r0,r0
8000a69a:	09 1c       	ld.sh	r12,r4++

8000a69c <_read_r>:
8000a69c:	d4 21       	pushm	r4-r7,lr
8000a69e:	16 98       	mov	r8,r11
8000a6a0:	18 97       	mov	r7,r12
8000a6a2:	10 9c       	mov	r12,r8
8000a6a4:	30 08       	mov	r8,0
8000a6a6:	14 9b       	mov	r11,r10
8000a6a8:	48 66       	lddpc	r6,8000a6c0 <_read_r+0x24>
8000a6aa:	12 9a       	mov	r10,r9
8000a6ac:	8d 08       	st.w	r6[0x0],r8
8000a6ae:	ca 1e       	rcall	8000a3f0 <_read>
8000a6b0:	5b fc       	cp.w	r12,-1
8000a6b2:	c0 51       	brne	8000a6bc <_read_r+0x20>
8000a6b4:	6c 08       	ld.w	r8,r6[0x0]
8000a6b6:	58 08       	cp.w	r8,0
8000a6b8:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a6bc:	d8 22       	popm	r4-r7,pc
8000a6be:	d7 03       	nop
8000a6c0:	00 00       	add	r0,r0
8000a6c2:	09 1c       	ld.sh	r12,r4++

8000a6c4 <__avr32_f64_mul>:
8000a6c4:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000a6c8:	e0 80 00 dc 	breq	8000a880 <__avr32_f64_mul_op1_zero>
8000a6cc:	d4 21       	pushm	r4-r7,lr
8000a6ce:	f7 e9 20 0e 	eor	lr,r11,r9
8000a6d2:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000a6d6:	30 15       	mov	r5,1
8000a6d8:	c4 30       	breq	8000a75e <__avr32_f64_mul_op1_subnormal>
8000a6da:	ab 6b       	lsl	r11,0xa
8000a6dc:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000a6e0:	ab 6a       	lsl	r10,0xa
8000a6e2:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000a6e6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000a6ea:	c5 c0       	breq	8000a7a2 <__avr32_f64_mul_op2_subnormal>
8000a6ec:	a1 78       	lsl	r8,0x1
8000a6ee:	5c f9       	rol	r9
8000a6f0:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000a6f4:	e0 47 07 ff 	cp.w	r7,2047
8000a6f8:	c7 70       	breq	8000a7e6 <__avr32_f64_mul_op_nan_or_inf>
8000a6fa:	e0 46 07 ff 	cp.w	r6,2047
8000a6fe:	c7 40       	breq	8000a7e6 <__avr32_f64_mul_op_nan_or_inf>
8000a700:	ee 06 00 0c 	add	r12,r7,r6
8000a704:	e0 2c 03 fe 	sub	r12,1022
8000a708:	f6 08 06 44 	mulu.d	r4,r11,r8
8000a70c:	f4 09 07 44 	macu.d	r4,r10,r9
8000a710:	f4 08 06 46 	mulu.d	r6,r10,r8
8000a714:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000a718:	08 07       	add	r7,r4
8000a71a:	f4 05 00 4a 	adc	r10,r10,r5
8000a71e:	5c 0b       	acr	r11
8000a720:	ed bb 00 14 	bld	r11,0x14
8000a724:	c0 50       	breq	8000a72e <__avr32_f64_mul+0x6a>
8000a726:	a1 77       	lsl	r7,0x1
8000a728:	5c fa       	rol	r10
8000a72a:	5c fb       	rol	r11
8000a72c:	20 1c       	sub	r12,1
8000a72e:	58 0c       	cp.w	r12,0
8000a730:	e0 8a 00 6f 	brle	8000a80e <__avr32_f64_mul_res_subnormal>
8000a734:	e0 4c 07 ff 	cp.w	r12,2047
8000a738:	e0 84 00 9c 	brge	8000a870 <__avr32_f64_mul_res_inf>
8000a73c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000a740:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000a744:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000a748:	ee 17 80 00 	eorh	r7,0x8000
8000a74c:	f1 b7 04 20 	satu	r7,0x1
8000a750:	0e 0a       	add	r10,r7
8000a752:	5c 0b       	acr	r11
8000a754:	ed be 00 1f 	bld	lr,0x1f
8000a758:	ef bb 00 1f 	bst	r11,0x1f
8000a75c:	d8 22       	popm	r4-r7,pc

8000a75e <__avr32_f64_mul_op1_subnormal>:
8000a75e:	e4 1b 00 0f 	andh	r11,0xf
8000a762:	f4 0c 12 00 	clz	r12,r10
8000a766:	f6 06 12 00 	clz	r6,r11
8000a76a:	f7 bc 03 e1 	sublo	r12,-31
8000a76e:	f8 06 17 30 	movlo	r6,r12
8000a772:	f7 b6 02 01 	subhs	r6,1
8000a776:	e0 46 00 20 	cp.w	r6,32
8000a77a:	c0 d4       	brge	8000a794 <__avr32_f64_mul_op1_subnormal+0x36>
8000a77c:	ec 0c 11 20 	rsub	r12,r6,32
8000a780:	f6 06 09 4b 	lsl	r11,r11,r6
8000a784:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000a788:	18 4b       	or	r11,r12
8000a78a:	f4 06 09 4a 	lsl	r10,r10,r6
8000a78e:	20 b6       	sub	r6,11
8000a790:	0c 17       	sub	r7,r6
8000a792:	ca ab       	rjmp	8000a6e6 <__avr32_f64_mul+0x22>
8000a794:	f4 06 09 4b 	lsl	r11,r10,r6
8000a798:	c6 40       	breq	8000a860 <__avr32_f64_mul_res_zero>
8000a79a:	30 0a       	mov	r10,0
8000a79c:	20 b6       	sub	r6,11
8000a79e:	0c 17       	sub	r7,r6
8000a7a0:	ca 3b       	rjmp	8000a6e6 <__avr32_f64_mul+0x22>

8000a7a2 <__avr32_f64_mul_op2_subnormal>:
8000a7a2:	e4 19 00 0f 	andh	r9,0xf
8000a7a6:	f0 0c 12 00 	clz	r12,r8
8000a7aa:	f2 05 12 00 	clz	r5,r9
8000a7ae:	f7 bc 03 ea 	sublo	r12,-22
8000a7b2:	f8 05 17 30 	movlo	r5,r12
8000a7b6:	f7 b5 02 0a 	subhs	r5,10
8000a7ba:	e0 45 00 20 	cp.w	r5,32
8000a7be:	c0 d4       	brge	8000a7d8 <__avr32_f64_mul_op2_subnormal+0x36>
8000a7c0:	ea 0c 11 20 	rsub	r12,r5,32
8000a7c4:	f2 05 09 49 	lsl	r9,r9,r5
8000a7c8:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000a7cc:	18 49       	or	r9,r12
8000a7ce:	f0 05 09 48 	lsl	r8,r8,r5
8000a7d2:	20 25       	sub	r5,2
8000a7d4:	0a 16       	sub	r6,r5
8000a7d6:	c8 fb       	rjmp	8000a6f4 <__avr32_f64_mul+0x30>
8000a7d8:	f0 05 09 49 	lsl	r9,r8,r5
8000a7dc:	c4 20       	breq	8000a860 <__avr32_f64_mul_res_zero>
8000a7de:	30 08       	mov	r8,0
8000a7e0:	20 25       	sub	r5,2
8000a7e2:	0a 16       	sub	r6,r5
8000a7e4:	c8 8b       	rjmp	8000a6f4 <__avr32_f64_mul+0x30>

8000a7e6 <__avr32_f64_mul_op_nan_or_inf>:
8000a7e6:	e4 19 00 0f 	andh	r9,0xf
8000a7ea:	e4 1b 00 0f 	andh	r11,0xf
8000a7ee:	14 4b       	or	r11,r10
8000a7f0:	10 49       	or	r9,r8
8000a7f2:	e0 47 07 ff 	cp.w	r7,2047
8000a7f6:	c0 91       	brne	8000a808 <__avr32_f64_mul_op1_not_naninf>
8000a7f8:	58 0b       	cp.w	r11,0
8000a7fa:	c3 81       	brne	8000a86a <__avr32_f64_mul_res_nan>
8000a7fc:	e0 46 07 ff 	cp.w	r6,2047
8000a800:	c3 81       	brne	8000a870 <__avr32_f64_mul_res_inf>
8000a802:	58 09       	cp.w	r9,0
8000a804:	c3 60       	breq	8000a870 <__avr32_f64_mul_res_inf>
8000a806:	c3 28       	rjmp	8000a86a <__avr32_f64_mul_res_nan>

8000a808 <__avr32_f64_mul_op1_not_naninf>:
8000a808:	58 09       	cp.w	r9,0
8000a80a:	c3 30       	breq	8000a870 <__avr32_f64_mul_res_inf>
8000a80c:	c2 f8       	rjmp	8000a86a <__avr32_f64_mul_res_nan>

8000a80e <__avr32_f64_mul_res_subnormal>:
8000a80e:	5c 3c       	neg	r12
8000a810:	2f fc       	sub	r12,-1
8000a812:	f1 bc 04 c0 	satu	r12,0x6
8000a816:	e0 4c 00 20 	cp.w	r12,32
8000a81a:	c1 14       	brge	8000a83c <__avr32_f64_mul_res_subnormal+0x2e>
8000a81c:	f8 08 11 20 	rsub	r8,r12,32
8000a820:	0e 46       	or	r6,r7
8000a822:	ee 0c 0a 47 	lsr	r7,r7,r12
8000a826:	f4 08 09 49 	lsl	r9,r10,r8
8000a82a:	12 47       	or	r7,r9
8000a82c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a830:	f6 08 09 49 	lsl	r9,r11,r8
8000a834:	12 4a       	or	r10,r9
8000a836:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000a83a:	c8 3b       	rjmp	8000a740 <__avr32_f64_mul+0x7c>
8000a83c:	f8 08 11 20 	rsub	r8,r12,32
8000a840:	f9 b9 00 00 	moveq	r9,0
8000a844:	c0 30       	breq	8000a84a <__avr32_f64_mul_res_subnormal+0x3c>
8000a846:	f6 08 09 49 	lsl	r9,r11,r8
8000a84a:	0e 46       	or	r6,r7
8000a84c:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000a850:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a854:	f3 ea 10 07 	or	r7,r9,r10
8000a858:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000a85c:	30 0b       	mov	r11,0
8000a85e:	c7 1b       	rjmp	8000a740 <__avr32_f64_mul+0x7c>

8000a860 <__avr32_f64_mul_res_zero>:
8000a860:	1c 9b       	mov	r11,lr
8000a862:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a866:	30 0a       	mov	r10,0
8000a868:	d8 22       	popm	r4-r7,pc

8000a86a <__avr32_f64_mul_res_nan>:
8000a86a:	3f fb       	mov	r11,-1
8000a86c:	3f fa       	mov	r10,-1
8000a86e:	d8 22       	popm	r4-r7,pc

8000a870 <__avr32_f64_mul_res_inf>:
8000a870:	f0 6b 00 00 	mov	r11,-1048576
8000a874:	ed be 00 1f 	bld	lr,0x1f
8000a878:	ef bb 00 1f 	bst	r11,0x1f
8000a87c:	30 0a       	mov	r10,0
8000a87e:	d8 22       	popm	r4-r7,pc

8000a880 <__avr32_f64_mul_op1_zero>:
8000a880:	f7 e9 20 0b 	eor	r11,r11,r9
8000a884:	e6 1b 80 00 	andh	r11,0x8000,COH
8000a888:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000a88c:	e0 4c 07 ff 	cp.w	r12,2047
8000a890:	5e 1c       	retne	r12
8000a892:	3f fa       	mov	r10,-1
8000a894:	3f fb       	mov	r11,-1
8000a896:	5e fc       	retal	r12

8000a898 <__avr32_f64_sub_from_add>:
8000a898:	ee 19 80 00 	eorh	r9,0x8000

8000a89c <__avr32_f64_sub>:
8000a89c:	f7 e9 20 0c 	eor	r12,r11,r9
8000a8a0:	e0 86 00 ca 	brmi	8000aa34 <__avr32_f64_add_from_sub>
8000a8a4:	eb cd 40 e0 	pushm	r5-r7,lr
8000a8a8:	16 9c       	mov	r12,r11
8000a8aa:	e6 1c 80 00 	andh	r12,0x8000,COH
8000a8ae:	bf db       	cbr	r11,0x1f
8000a8b0:	bf d9       	cbr	r9,0x1f
8000a8b2:	10 3a       	cp.w	r10,r8
8000a8b4:	f2 0b 13 00 	cpc	r11,r9
8000a8b8:	c0 92       	brcc	8000a8ca <__avr32_f64_sub+0x2e>
8000a8ba:	16 97       	mov	r7,r11
8000a8bc:	12 9b       	mov	r11,r9
8000a8be:	0e 99       	mov	r9,r7
8000a8c0:	14 97       	mov	r7,r10
8000a8c2:	10 9a       	mov	r10,r8
8000a8c4:	0e 98       	mov	r8,r7
8000a8c6:	ee 1c 80 00 	eorh	r12,0x8000
8000a8ca:	f6 07 16 14 	lsr	r7,r11,0x14
8000a8ce:	ab 7b       	lsl	r11,0xb
8000a8d0:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000a8d4:	ab 7a       	lsl	r10,0xb
8000a8d6:	bf bb       	sbr	r11,0x1f
8000a8d8:	f2 06 16 14 	lsr	r6,r9,0x14
8000a8dc:	c4 40       	breq	8000a964 <__avr32_f64_sub_opL_subnormal>
8000a8de:	ab 79       	lsl	r9,0xb
8000a8e0:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a8e4:	ab 78       	lsl	r8,0xb
8000a8e6:	bf b9       	sbr	r9,0x1f

8000a8e8 <__avr32_f64_sub_opL_subnormal_done>:
8000a8e8:	e0 47 07 ff 	cp.w	r7,2047
8000a8ec:	c4 f0       	breq	8000a98a <__avr32_f64_sub_opH_nan_or_inf>
8000a8ee:	0e 26       	rsub	r6,r7
8000a8f0:	c1 20       	breq	8000a914 <__avr32_f64_sub_shift_done>
8000a8f2:	ec 05 11 20 	rsub	r5,r6,32
8000a8f6:	e0 46 00 20 	cp.w	r6,32
8000a8fa:	c7 c2       	brcc	8000a9f2 <__avr32_f64_sub_longshift>
8000a8fc:	f0 05 09 4e 	lsl	lr,r8,r5
8000a900:	f2 05 09 45 	lsl	r5,r9,r5
8000a904:	f0 06 0a 48 	lsr	r8,r8,r6
8000a908:	f2 06 0a 49 	lsr	r9,r9,r6
8000a90c:	0a 48       	or	r8,r5
8000a90e:	58 0e       	cp.w	lr,0
8000a910:	5f 1e       	srne	lr
8000a912:	1c 48       	or	r8,lr

8000a914 <__avr32_f64_sub_shift_done>:
8000a914:	10 1a       	sub	r10,r8
8000a916:	f6 09 01 4b 	sbc	r11,r11,r9
8000a91a:	f6 06 12 00 	clz	r6,r11
8000a91e:	c0 e0       	breq	8000a93a <__avr32_f64_sub_longnormalize_done>
8000a920:	c7 83       	brcs	8000aa10 <__avr32_f64_sub_longnormalize>
8000a922:	ec 0e 11 20 	rsub	lr,r6,32
8000a926:	f6 06 09 4b 	lsl	r11,r11,r6
8000a92a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000a92e:	1c 4b       	or	r11,lr
8000a930:	f4 06 09 4a 	lsl	r10,r10,r6
8000a934:	0c 17       	sub	r7,r6
8000a936:	e0 8a 00 39 	brle	8000a9a8 <__avr32_f64_sub_subnormal_result>

8000a93a <__avr32_f64_sub_longnormalize_done>:
8000a93a:	f4 09 15 15 	lsl	r9,r10,0x15
8000a93e:	ab 9a       	lsr	r10,0xb
8000a940:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000a944:	ab 9b       	lsr	r11,0xb
8000a946:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000a94a:	18 4b       	or	r11,r12

8000a94c <__avr32_f64_sub_round>:
8000a94c:	fc 17 80 00 	movh	r7,0x8000
8000a950:	ed ba 00 00 	bld	r10,0x0
8000a954:	f7 b7 01 ff 	subne	r7,-1
8000a958:	0e 39       	cp.w	r9,r7
8000a95a:	5f 29       	srhs	r9
8000a95c:	12 0a       	add	r10,r9
8000a95e:	5c 0b       	acr	r11
8000a960:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a964 <__avr32_f64_sub_opL_subnormal>:
8000a964:	ab 79       	lsl	r9,0xb
8000a966:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000a96a:	ab 78       	lsl	r8,0xb
8000a96c:	f3 e8 10 0e 	or	lr,r9,r8
8000a970:	f9 b6 01 01 	movne	r6,1
8000a974:	ee 0e 11 00 	rsub	lr,r7,0
8000a978:	f9 b7 00 01 	moveq	r7,1
8000a97c:	ef bb 00 1f 	bst	r11,0x1f
8000a980:	f7 ea 10 0e 	or	lr,r11,r10
8000a984:	f9 b7 00 00 	moveq	r7,0
8000a988:	cb 0b       	rjmp	8000a8e8 <__avr32_f64_sub_opL_subnormal_done>

8000a98a <__avr32_f64_sub_opH_nan_or_inf>:
8000a98a:	bf db       	cbr	r11,0x1f
8000a98c:	f7 ea 10 0e 	or	lr,r11,r10
8000a990:	c0 81       	brne	8000a9a0 <__avr32_f64_sub_return_nan>
8000a992:	e0 46 07 ff 	cp.w	r6,2047
8000a996:	c0 50       	breq	8000a9a0 <__avr32_f64_sub_return_nan>
8000a998:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000a99c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a9a0 <__avr32_f64_sub_return_nan>:
8000a9a0:	3f fa       	mov	r10,-1
8000a9a2:	3f fb       	mov	r11,-1
8000a9a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a9a8 <__avr32_f64_sub_subnormal_result>:
8000a9a8:	5c 37       	neg	r7
8000a9aa:	2f f7       	sub	r7,-1
8000a9ac:	f1 b7 04 c0 	satu	r7,0x6
8000a9b0:	e0 47 00 20 	cp.w	r7,32
8000a9b4:	c1 14       	brge	8000a9d6 <__avr32_f64_sub_subnormal_result+0x2e>
8000a9b6:	ee 08 11 20 	rsub	r8,r7,32
8000a9ba:	f4 08 09 49 	lsl	r9,r10,r8
8000a9be:	5f 16       	srne	r6
8000a9c0:	f4 07 0a 4a 	lsr	r10,r10,r7
8000a9c4:	0c 4a       	or	r10,r6
8000a9c6:	f6 08 09 49 	lsl	r9,r11,r8
8000a9ca:	f5 e9 10 0a 	or	r10,r10,r9
8000a9ce:	f4 07 0a 4b 	lsr	r11,r10,r7
8000a9d2:	30 07       	mov	r7,0
8000a9d4:	cb 3b       	rjmp	8000a93a <__avr32_f64_sub_longnormalize_done>
8000a9d6:	ee 08 11 40 	rsub	r8,r7,64
8000a9da:	f6 08 09 49 	lsl	r9,r11,r8
8000a9de:	14 49       	or	r9,r10
8000a9e0:	5f 16       	srne	r6
8000a9e2:	f6 07 0a 4a 	lsr	r10,r11,r7
8000a9e6:	0c 4a       	or	r10,r6
8000a9e8:	30 0b       	mov	r11,0
8000a9ea:	30 07       	mov	r7,0
8000a9ec:	ca 7b       	rjmp	8000a93a <__avr32_f64_sub_longnormalize_done>
8000a9ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000a9f2 <__avr32_f64_sub_longshift>:
8000a9f2:	f1 b6 04 c0 	satu	r6,0x6
8000a9f6:	f0 0e 17 00 	moveq	lr,r8
8000a9fa:	c0 40       	breq	8000aa02 <__avr32_f64_sub_longshift+0x10>
8000a9fc:	f2 05 09 4e 	lsl	lr,r9,r5
8000aa00:	10 4e       	or	lr,r8
8000aa02:	f2 06 0a 48 	lsr	r8,r9,r6
8000aa06:	30 09       	mov	r9,0
8000aa08:	58 0e       	cp.w	lr,0
8000aa0a:	5f 1e       	srne	lr
8000aa0c:	1c 48       	or	r8,lr
8000aa0e:	c8 3b       	rjmp	8000a914 <__avr32_f64_sub_shift_done>

8000aa10 <__avr32_f64_sub_longnormalize>:
8000aa10:	f4 06 12 00 	clz	r6,r10
8000aa14:	f9 b7 03 00 	movlo	r7,0
8000aa18:	f9 b6 03 00 	movlo	r6,0
8000aa1c:	f9 bc 03 00 	movlo	r12,0
8000aa20:	f7 b6 02 e0 	subhs	r6,-32
8000aa24:	f4 06 09 4b 	lsl	r11,r10,r6
8000aa28:	30 0a       	mov	r10,0
8000aa2a:	0c 17       	sub	r7,r6
8000aa2c:	fe 9a ff be 	brle	8000a9a8 <__avr32_f64_sub_subnormal_result>
8000aa30:	c8 5b       	rjmp	8000a93a <__avr32_f64_sub_longnormalize_done>
8000aa32:	d7 03       	nop

8000aa34 <__avr32_f64_add_from_sub>:
8000aa34:	ee 19 80 00 	eorh	r9,0x8000

8000aa38 <__avr32_f64_add>:
8000aa38:	f7 e9 20 0c 	eor	r12,r11,r9
8000aa3c:	fe 96 ff 2e 	brmi	8000a898 <__avr32_f64_sub_from_add>
8000aa40:	eb cd 40 e0 	pushm	r5-r7,lr
8000aa44:	16 9c       	mov	r12,r11
8000aa46:	e6 1c 80 00 	andh	r12,0x8000,COH
8000aa4a:	bf db       	cbr	r11,0x1f
8000aa4c:	bf d9       	cbr	r9,0x1f
8000aa4e:	12 3b       	cp.w	r11,r9
8000aa50:	c0 72       	brcc	8000aa5e <__avr32_f64_add+0x26>
8000aa52:	16 97       	mov	r7,r11
8000aa54:	12 9b       	mov	r11,r9
8000aa56:	0e 99       	mov	r9,r7
8000aa58:	14 97       	mov	r7,r10
8000aa5a:	10 9a       	mov	r10,r8
8000aa5c:	0e 98       	mov	r8,r7
8000aa5e:	30 0e       	mov	lr,0
8000aa60:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000aa64:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000aa68:	b5 ab       	sbr	r11,0x14
8000aa6a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000aa6e:	c6 20       	breq	8000ab32 <__avr32_f64_add_op2_subnormal>
8000aa70:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000aa74:	b5 a9       	sbr	r9,0x14
8000aa76:	e0 47 07 ff 	cp.w	r7,2047
8000aa7a:	c2 80       	breq	8000aaca <__avr32_f64_add_opH_nan_or_inf>
8000aa7c:	0e 26       	rsub	r6,r7
8000aa7e:	c1 20       	breq	8000aaa2 <__avr32_f64_add_shift_done>
8000aa80:	e0 46 00 36 	cp.w	r6,54
8000aa84:	c1 52       	brcc	8000aaae <__avr32_f64_add_res_of_done>
8000aa86:	ec 05 11 20 	rsub	r5,r6,32
8000aa8a:	e0 46 00 20 	cp.w	r6,32
8000aa8e:	c3 52       	brcc	8000aaf8 <__avr32_f64_add_longshift>
8000aa90:	f0 05 09 4e 	lsl	lr,r8,r5
8000aa94:	f2 05 09 45 	lsl	r5,r9,r5
8000aa98:	f0 06 0a 48 	lsr	r8,r8,r6
8000aa9c:	f2 06 0a 49 	lsr	r9,r9,r6
8000aaa0:	0a 48       	or	r8,r5

8000aaa2 <__avr32_f64_add_shift_done>:
8000aaa2:	10 0a       	add	r10,r8
8000aaa4:	f6 09 00 4b 	adc	r11,r11,r9
8000aaa8:	ed bb 00 15 	bld	r11,0x15
8000aaac:	c3 40       	breq	8000ab14 <__avr32_f64_add_res_of>

8000aaae <__avr32_f64_add_res_of_done>:
8000aaae:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000aab2:	18 4b       	or	r11,r12

8000aab4 <__avr32_f64_add_round>:
8000aab4:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000aab8:	18 4e       	or	lr,r12
8000aaba:	ee 1e 80 00 	eorh	lr,0x8000
8000aabe:	f1 be 04 20 	satu	lr,0x1
8000aac2:	1c 0a       	add	r10,lr
8000aac4:	5c 0b       	acr	r11
8000aac6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aaca <__avr32_f64_add_opH_nan_or_inf>:
8000aaca:	b5 cb       	cbr	r11,0x14
8000aacc:	f7 ea 10 0e 	or	lr,r11,r10
8000aad0:	c1 01       	brne	8000aaf0 <__avr32_f64_add_return_nan>
8000aad2:	e0 46 07 ff 	cp.w	r6,2047
8000aad6:	c0 30       	breq	8000aadc <__avr32_f64_add_opL_nan_or_inf>
8000aad8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aadc <__avr32_f64_add_opL_nan_or_inf>:
8000aadc:	b5 c9       	cbr	r9,0x14
8000aade:	f3 e8 10 0e 	or	lr,r9,r8
8000aae2:	c0 71       	brne	8000aaf0 <__avr32_f64_add_return_nan>
8000aae4:	30 0a       	mov	r10,0
8000aae6:	fc 1b 7f f0 	movh	r11,0x7ff0
8000aaea:	18 4b       	or	r11,r12
8000aaec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aaf0 <__avr32_f64_add_return_nan>:
8000aaf0:	3f fa       	mov	r10,-1
8000aaf2:	3f fb       	mov	r11,-1
8000aaf4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000aaf8 <__avr32_f64_add_longshift>:
8000aaf8:	f1 b6 04 c0 	satu	r6,0x6
8000aafc:	f0 0e 17 00 	moveq	lr,r8
8000ab00:	c0 60       	breq	8000ab0c <__avr32_f64_add_longshift+0x14>
8000ab02:	f2 05 09 4e 	lsl	lr,r9,r5
8000ab06:	58 08       	cp.w	r8,0
8000ab08:	5f 18       	srne	r8
8000ab0a:	10 4e       	or	lr,r8
8000ab0c:	f2 06 0a 48 	lsr	r8,r9,r6
8000ab10:	30 09       	mov	r9,0
8000ab12:	cc 8b       	rjmp	8000aaa2 <__avr32_f64_add_shift_done>

8000ab14 <__avr32_f64_add_res_of>:
8000ab14:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000ab18:	a1 9b       	lsr	r11,0x1
8000ab1a:	5d 0a       	ror	r10
8000ab1c:	5d 0e       	ror	lr
8000ab1e:	2f f7       	sub	r7,-1
8000ab20:	e0 47 07 ff 	cp.w	r7,2047
8000ab24:	f9 ba 00 00 	moveq	r10,0
8000ab28:	f9 bb 00 00 	moveq	r11,0
8000ab2c:	f9 be 00 00 	moveq	lr,0
8000ab30:	cb fb       	rjmp	8000aaae <__avr32_f64_add_res_of_done>

8000ab32 <__avr32_f64_add_op2_subnormal>:
8000ab32:	30 16       	mov	r6,1
8000ab34:	58 07       	cp.w	r7,0
8000ab36:	ca 01       	brne	8000aa76 <__avr32_f64_add+0x3e>
8000ab38:	b5 cb       	cbr	r11,0x14
8000ab3a:	10 0a       	add	r10,r8
8000ab3c:	f6 09 00 4b 	adc	r11,r11,r9
8000ab40:	18 4b       	or	r11,r12
8000ab42:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000ab46:	d7 03       	nop

8000ab48 <__avr32_f64_to_u32>:
8000ab48:	58 0b       	cp.w	r11,0
8000ab4a:	5e 6d       	retmi	0

8000ab4c <__avr32_f64_to_s32>:
8000ab4c:	f6 0c 15 01 	lsl	r12,r11,0x1
8000ab50:	b5 9c       	lsr	r12,0x15
8000ab52:	e0 2c 03 ff 	sub	r12,1023
8000ab56:	5e 3d       	retlo	0
8000ab58:	f8 0c 11 1f 	rsub	r12,r12,31
8000ab5c:	16 99       	mov	r9,r11
8000ab5e:	ab 7b       	lsl	r11,0xb
8000ab60:	bf bb       	sbr	r11,0x1f
8000ab62:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000ab66:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000ab6a:	a1 79       	lsl	r9,0x1
8000ab6c:	5e 2b       	reths	r11
8000ab6e:	5c 3b       	neg	r11
8000ab70:	5e fb       	retal	r11

8000ab72 <__avr32_u32_to_f64>:
8000ab72:	f8 cb 00 00 	sub	r11,r12,0
8000ab76:	30 0c       	mov	r12,0
8000ab78:	c0 38       	rjmp	8000ab7e <__avr32_s32_to_f64+0x4>

8000ab7a <__avr32_s32_to_f64>:
8000ab7a:	18 9b       	mov	r11,r12
8000ab7c:	5c 4b       	abs	r11
8000ab7e:	30 0a       	mov	r10,0
8000ab80:	5e 0b       	reteq	r11
8000ab82:	d4 01       	pushm	lr
8000ab84:	e0 69 04 1e 	mov	r9,1054
8000ab88:	f6 08 12 00 	clz	r8,r11
8000ab8c:	c1 70       	breq	8000abba <__avr32_s32_to_f64+0x40>
8000ab8e:	c0 c3       	brcs	8000aba6 <__avr32_s32_to_f64+0x2c>
8000ab90:	f0 0e 11 20 	rsub	lr,r8,32
8000ab94:	f6 08 09 4b 	lsl	r11,r11,r8
8000ab98:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000ab9c:	1c 4b       	or	r11,lr
8000ab9e:	f4 08 09 4a 	lsl	r10,r10,r8
8000aba2:	10 19       	sub	r9,r8
8000aba4:	c0 b8       	rjmp	8000abba <__avr32_s32_to_f64+0x40>
8000aba6:	f4 08 12 00 	clz	r8,r10
8000abaa:	f9 b8 03 00 	movlo	r8,0
8000abae:	f7 b8 02 e0 	subhs	r8,-32
8000abb2:	f4 08 09 4b 	lsl	r11,r10,r8
8000abb6:	30 0a       	mov	r10,0
8000abb8:	10 19       	sub	r9,r8
8000abba:	58 09       	cp.w	r9,0
8000abbc:	e0 89 00 30 	brgt	8000ac1c <__avr32_s32_to_f64+0xa2>
8000abc0:	5c 39       	neg	r9
8000abc2:	2f f9       	sub	r9,-1
8000abc4:	e0 49 00 36 	cp.w	r9,54
8000abc8:	c0 43       	brcs	8000abd0 <__avr32_s32_to_f64+0x56>
8000abca:	30 0b       	mov	r11,0
8000abcc:	30 0a       	mov	r10,0
8000abce:	c2 68       	rjmp	8000ac1a <__avr32_s32_to_f64+0xa0>
8000abd0:	2f 69       	sub	r9,-10
8000abd2:	f2 08 11 20 	rsub	r8,r9,32
8000abd6:	e0 49 00 20 	cp.w	r9,32
8000abda:	c0 b2       	brcc	8000abf0 <__avr32_s32_to_f64+0x76>
8000abdc:	f4 08 09 4e 	lsl	lr,r10,r8
8000abe0:	f6 08 09 48 	lsl	r8,r11,r8
8000abe4:	f4 09 0a 4a 	lsr	r10,r10,r9
8000abe8:	f6 09 0a 4b 	lsr	r11,r11,r9
8000abec:	10 4b       	or	r11,r8
8000abee:	c0 88       	rjmp	8000abfe <__avr32_s32_to_f64+0x84>
8000abf0:	f6 08 09 4e 	lsl	lr,r11,r8
8000abf4:	14 4e       	or	lr,r10
8000abf6:	16 9a       	mov	r10,r11
8000abf8:	30 0b       	mov	r11,0
8000abfa:	f4 09 0a 4a 	lsr	r10,r10,r9
8000abfe:	ed ba 00 00 	bld	r10,0x0
8000ac02:	c0 92       	brcc	8000ac14 <__avr32_s32_to_f64+0x9a>
8000ac04:	1c 7e       	tst	lr,lr
8000ac06:	c0 41       	brne	8000ac0e <__avr32_s32_to_f64+0x94>
8000ac08:	ed ba 00 01 	bld	r10,0x1
8000ac0c:	c0 42       	brcc	8000ac14 <__avr32_s32_to_f64+0x9a>
8000ac0e:	2f fa       	sub	r10,-1
8000ac10:	f7 bb 02 ff 	subhs	r11,-1
8000ac14:	5c fc       	rol	r12
8000ac16:	5d 0b       	ror	r11
8000ac18:	5d 0a       	ror	r10
8000ac1a:	d8 02       	popm	pc
8000ac1c:	e0 68 03 ff 	mov	r8,1023
8000ac20:	ed ba 00 0b 	bld	r10,0xb
8000ac24:	f7 b8 00 ff 	subeq	r8,-1
8000ac28:	10 0a       	add	r10,r8
8000ac2a:	5c 0b       	acr	r11
8000ac2c:	f7 b9 03 fe 	sublo	r9,-2
8000ac30:	e0 49 07 ff 	cp.w	r9,2047
8000ac34:	c0 55       	brlt	8000ac3e <__avr32_s32_to_f64+0xc4>
8000ac36:	30 0a       	mov	r10,0
8000ac38:	fc 1b ff e0 	movh	r11,0xffe0
8000ac3c:	c0 c8       	rjmp	8000ac54 <__floatsidf_return_op1>
8000ac3e:	ed bb 00 1f 	bld	r11,0x1f
8000ac42:	f7 b9 01 01 	subne	r9,1
8000ac46:	ab 9a       	lsr	r10,0xb
8000ac48:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000ac4c:	a1 7b       	lsl	r11,0x1
8000ac4e:	ab 9b       	lsr	r11,0xb
8000ac50:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000ac54 <__floatsidf_return_op1>:
8000ac54:	a1 7c       	lsl	r12,0x1
8000ac56:	5d 0b       	ror	r11
8000ac58:	d8 02       	popm	pc

8000ac5a <__avr32_f64_cmp_eq>:
8000ac5a:	10 3a       	cp.w	r10,r8
8000ac5c:	f2 0b 13 00 	cpc	r11,r9
8000ac60:	c0 80       	breq	8000ac70 <__avr32_f64_cmp_eq+0x16>
8000ac62:	a1 7b       	lsl	r11,0x1
8000ac64:	a1 79       	lsl	r9,0x1
8000ac66:	14 4b       	or	r11,r10
8000ac68:	12 4b       	or	r11,r9
8000ac6a:	10 4b       	or	r11,r8
8000ac6c:	5e 0f       	reteq	1
8000ac6e:	5e fd       	retal	0
8000ac70:	a1 7b       	lsl	r11,0x1
8000ac72:	fc 1c ff e0 	movh	r12,0xffe0
8000ac76:	58 0a       	cp.w	r10,0
8000ac78:	f8 0b 13 00 	cpc	r11,r12
8000ac7c:	5e 8f       	retls	1
8000ac7e:	5e fd       	retal	0

8000ac80 <__avr32_f64_cmp_ge>:
8000ac80:	1a de       	st.w	--sp,lr
8000ac82:	1a d7       	st.w	--sp,r7
8000ac84:	a1 7b       	lsl	r11,0x1
8000ac86:	5f 3c       	srlo	r12
8000ac88:	a1 79       	lsl	r9,0x1
8000ac8a:	5f 37       	srlo	r7
8000ac8c:	5c fc       	rol	r12
8000ac8e:	fc 1e ff e0 	movh	lr,0xffe0
8000ac92:	58 0a       	cp.w	r10,0
8000ac94:	fc 0b 13 00 	cpc	r11,lr
8000ac98:	e0 8b 00 1d 	brhi	8000acd2 <__avr32_f64_cmp_ge+0x52>
8000ac9c:	58 08       	cp.w	r8,0
8000ac9e:	fc 09 13 00 	cpc	r9,lr
8000aca2:	e0 8b 00 18 	brhi	8000acd2 <__avr32_f64_cmp_ge+0x52>
8000aca6:	58 0b       	cp.w	r11,0
8000aca8:	f5 ba 00 00 	subfeq	r10,0
8000acac:	c1 50       	breq	8000acd6 <__avr32_f64_cmp_ge+0x56>
8000acae:	1b 07       	ld.w	r7,sp++
8000acb0:	1b 0e       	ld.w	lr,sp++
8000acb2:	58 3c       	cp.w	r12,3
8000acb4:	c0 a0       	breq	8000acc8 <__avr32_f64_cmp_ge+0x48>
8000acb6:	58 1c       	cp.w	r12,1
8000acb8:	c0 33       	brcs	8000acbe <__avr32_f64_cmp_ge+0x3e>
8000acba:	5e 0f       	reteq	1
8000acbc:	5e 1d       	retne	0
8000acbe:	10 3a       	cp.w	r10,r8
8000acc0:	f2 0b 13 00 	cpc	r11,r9
8000acc4:	5e 2f       	reths	1
8000acc6:	5e 3d       	retlo	0
8000acc8:	14 38       	cp.w	r8,r10
8000acca:	f6 09 13 00 	cpc	r9,r11
8000acce:	5e 2f       	reths	1
8000acd0:	5e 3d       	retlo	0
8000acd2:	1b 07       	ld.w	r7,sp++
8000acd4:	d8 0a       	popm	pc,r12=0
8000acd6:	58 17       	cp.w	r7,1
8000acd8:	5f 0c       	sreq	r12
8000acda:	58 09       	cp.w	r9,0
8000acdc:	f5 b8 00 00 	subfeq	r8,0
8000ace0:	1b 07       	ld.w	r7,sp++
8000ace2:	1b 0e       	ld.w	lr,sp++
8000ace4:	5e 0f       	reteq	1
8000ace6:	5e fc       	retal	r12

8000ace8 <__avr32_f64_cmp_lt>:
8000ace8:	1a de       	st.w	--sp,lr
8000acea:	1a d7       	st.w	--sp,r7
8000acec:	a1 7b       	lsl	r11,0x1
8000acee:	5f 3c       	srlo	r12
8000acf0:	a1 79       	lsl	r9,0x1
8000acf2:	5f 37       	srlo	r7
8000acf4:	5c fc       	rol	r12
8000acf6:	fc 1e ff e0 	movh	lr,0xffe0
8000acfa:	58 0a       	cp.w	r10,0
8000acfc:	fc 0b 13 00 	cpc	r11,lr
8000ad00:	e0 8b 00 1d 	brhi	8000ad3a <__avr32_f64_cmp_lt+0x52>
8000ad04:	58 08       	cp.w	r8,0
8000ad06:	fc 09 13 00 	cpc	r9,lr
8000ad0a:	e0 8b 00 18 	brhi	8000ad3a <__avr32_f64_cmp_lt+0x52>
8000ad0e:	58 0b       	cp.w	r11,0
8000ad10:	f5 ba 00 00 	subfeq	r10,0
8000ad14:	c1 50       	breq	8000ad3e <__avr32_f64_cmp_lt+0x56>
8000ad16:	1b 07       	ld.w	r7,sp++
8000ad18:	1b 0e       	ld.w	lr,sp++
8000ad1a:	58 3c       	cp.w	r12,3
8000ad1c:	c0 a0       	breq	8000ad30 <__avr32_f64_cmp_lt+0x48>
8000ad1e:	58 1c       	cp.w	r12,1
8000ad20:	c0 33       	brcs	8000ad26 <__avr32_f64_cmp_lt+0x3e>
8000ad22:	5e 0d       	reteq	0
8000ad24:	5e 1f       	retne	1
8000ad26:	10 3a       	cp.w	r10,r8
8000ad28:	f2 0b 13 00 	cpc	r11,r9
8000ad2c:	5e 2d       	reths	0
8000ad2e:	5e 3f       	retlo	1
8000ad30:	14 38       	cp.w	r8,r10
8000ad32:	f6 09 13 00 	cpc	r9,r11
8000ad36:	5e 2d       	reths	0
8000ad38:	5e 3f       	retlo	1
8000ad3a:	1b 07       	ld.w	r7,sp++
8000ad3c:	d8 0a       	popm	pc,r12=0
8000ad3e:	58 17       	cp.w	r7,1
8000ad40:	5f 1c       	srne	r12
8000ad42:	58 09       	cp.w	r9,0
8000ad44:	f5 b8 00 00 	subfeq	r8,0
8000ad48:	1b 07       	ld.w	r7,sp++
8000ad4a:	1b 0e       	ld.w	lr,sp++
8000ad4c:	5e 0d       	reteq	0
8000ad4e:	5e fc       	retal	r12

8000ad50 <__avr32_f64_div>:
8000ad50:	eb cd 40 ff 	pushm	r0-r7,lr
8000ad54:	f7 e9 20 0e 	eor	lr,r11,r9
8000ad58:	f6 07 16 14 	lsr	r7,r11,0x14
8000ad5c:	a9 7b       	lsl	r11,0x9
8000ad5e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000ad62:	a9 7a       	lsl	r10,0x9
8000ad64:	bd bb       	sbr	r11,0x1d
8000ad66:	e4 1b 3f ff 	andh	r11,0x3fff
8000ad6a:	ab d7       	cbr	r7,0xb
8000ad6c:	e0 80 00 cc 	breq	8000af04 <__avr32_f64_div_round_subnormal+0x54>
8000ad70:	e0 47 07 ff 	cp.w	r7,2047
8000ad74:	e0 84 00 b5 	brge	8000aede <__avr32_f64_div_round_subnormal+0x2e>
8000ad78:	f2 06 16 14 	lsr	r6,r9,0x14
8000ad7c:	a9 79       	lsl	r9,0x9
8000ad7e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000ad82:	a9 78       	lsl	r8,0x9
8000ad84:	bd b9       	sbr	r9,0x1d
8000ad86:	e4 19 3f ff 	andh	r9,0x3fff
8000ad8a:	ab d6       	cbr	r6,0xb
8000ad8c:	e0 80 00 e2 	breq	8000af50 <__avr32_f64_div_round_subnormal+0xa0>
8000ad90:	e0 46 07 ff 	cp.w	r6,2047
8000ad94:	e0 84 00 b2 	brge	8000aef8 <__avr32_f64_div_round_subnormal+0x48>
8000ad98:	0c 17       	sub	r7,r6
8000ad9a:	fe 37 fc 01 	sub	r7,-1023
8000ad9e:	fc 1c 80 00 	movh	r12,0x8000
8000ada2:	f8 03 16 01 	lsr	r3,r12,0x1
8000ada6:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000adaa:	5c d4       	com	r4
8000adac:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000adb0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000adb4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000adb8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000adbc:	ea 03 15 02 	lsl	r3,r5,0x2
8000adc0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000adc4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000adc8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000adcc:	ea 03 15 02 	lsl	r3,r5,0x2
8000add0:	e6 09 06 44 	mulu.d	r4,r3,r9
8000add4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000add8:	e6 05 06 44 	mulu.d	r4,r3,r5
8000addc:	ea 03 15 02 	lsl	r3,r5,0x2
8000ade0:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ade4:	e4 09 07 40 	macu.d	r0,r2,r9
8000ade8:	e6 09 06 44 	mulu.d	r4,r3,r9
8000adec:	02 04       	add	r4,r1
8000adee:	5c 05       	acr	r5
8000adf0:	a3 65       	lsl	r5,0x2
8000adf2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000adf6:	a3 64       	lsl	r4,0x2
8000adf8:	5c 34       	neg	r4
8000adfa:	f8 05 01 45 	sbc	r5,r12,r5
8000adfe:	e6 04 06 40 	mulu.d	r0,r3,r4
8000ae02:	e4 05 07 40 	macu.d	r0,r2,r5
8000ae06:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ae0a:	02 04       	add	r4,r1
8000ae0c:	5c 05       	acr	r5
8000ae0e:	ea 03 15 02 	lsl	r3,r5,0x2
8000ae12:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000ae16:	e8 02 15 02 	lsl	r2,r4,0x2
8000ae1a:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ae1e:	e4 09 07 40 	macu.d	r0,r2,r9
8000ae22:	e6 09 06 44 	mulu.d	r4,r3,r9
8000ae26:	02 04       	add	r4,r1
8000ae28:	5c 05       	acr	r5
8000ae2a:	a3 65       	lsl	r5,0x2
8000ae2c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000ae30:	a3 64       	lsl	r4,0x2
8000ae32:	5c 34       	neg	r4
8000ae34:	f8 05 01 45 	sbc	r5,r12,r5
8000ae38:	e6 04 06 40 	mulu.d	r0,r3,r4
8000ae3c:	e4 05 07 40 	macu.d	r0,r2,r5
8000ae40:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ae44:	02 04       	add	r4,r1
8000ae46:	5c 05       	acr	r5
8000ae48:	ea 03 15 02 	lsl	r3,r5,0x2
8000ae4c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000ae50:	e8 02 15 02 	lsl	r2,r4,0x2
8000ae54:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000ae58:	e4 0b 07 40 	macu.d	r0,r2,r11
8000ae5c:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000ae60:	02 02       	add	r2,r1
8000ae62:	5c 03       	acr	r3
8000ae64:	ed b3 00 1c 	bld	r3,0x1c
8000ae68:	c0 90       	breq	8000ae7a <__avr32_f64_div+0x12a>
8000ae6a:	a1 72       	lsl	r2,0x1
8000ae6c:	5c f3       	rol	r3
8000ae6e:	20 17       	sub	r7,1
8000ae70:	a3 9a       	lsr	r10,0x3
8000ae72:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000ae76:	a3 9b       	lsr	r11,0x3
8000ae78:	c0 58       	rjmp	8000ae82 <__avr32_f64_div+0x132>
8000ae7a:	a5 8a       	lsr	r10,0x4
8000ae7c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000ae80:	a5 8b       	lsr	r11,0x4
8000ae82:	58 07       	cp.w	r7,0
8000ae84:	e0 8a 00 8b 	brle	8000af9a <__avr32_f64_div_res_subnormal>
8000ae88:	e0 12 ff 00 	andl	r2,0xff00
8000ae8c:	e8 12 00 80 	orl	r2,0x80
8000ae90:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ae94:	e4 09 07 40 	macu.d	r0,r2,r9
8000ae98:	e4 08 06 44 	mulu.d	r4,r2,r8
8000ae9c:	e6 09 06 48 	mulu.d	r8,r3,r9
8000aea0:	00 05       	add	r5,r0
8000aea2:	f0 01 00 48 	adc	r8,r8,r1
8000aea6:	5c 09       	acr	r9
8000aea8:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000aeac:	58 04       	cp.w	r4,0
8000aeae:	5c 25       	cpc	r5

8000aeb0 <__avr32_f64_div_round_subnormal>:
8000aeb0:	f4 08 13 00 	cpc	r8,r10
8000aeb4:	f6 09 13 00 	cpc	r9,r11
8000aeb8:	5f 36       	srlo	r6
8000aeba:	f8 06 17 00 	moveq	r6,r12
8000aebe:	e4 0a 16 08 	lsr	r10,r2,0x8
8000aec2:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000aec6:	e6 0b 16 08 	lsr	r11,r3,0x8
8000aeca:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000aece:	ed be 00 1f 	bld	lr,0x1f
8000aed2:	ef bb 00 1f 	bst	r11,0x1f
8000aed6:	0c 0a       	add	r10,r6
8000aed8:	5c 0b       	acr	r11
8000aeda:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000aede:	e4 1b 00 0f 	andh	r11,0xf
8000aee2:	14 4b       	or	r11,r10
8000aee4:	e0 81 00 a7 	brne	8000b032 <__avr32_f64_div_res_subnormal+0x98>
8000aee8:	f2 06 16 14 	lsr	r6,r9,0x14
8000aeec:	ab d6       	cbr	r6,0xb
8000aeee:	e0 46 07 ff 	cp.w	r6,2047
8000aef2:	e0 81 00 a4 	brne	8000b03a <__avr32_f64_div_res_subnormal+0xa0>
8000aef6:	c9 e8       	rjmp	8000b032 <__avr32_f64_div_res_subnormal+0x98>
8000aef8:	e4 19 00 0f 	andh	r9,0xf
8000aefc:	10 49       	or	r9,r8
8000aefe:	e0 81 00 9a 	brne	8000b032 <__avr32_f64_div_res_subnormal+0x98>
8000af02:	c9 28       	rjmp	8000b026 <__avr32_f64_div_res_subnormal+0x8c>
8000af04:	a3 7b       	lsl	r11,0x3
8000af06:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000af0a:	a3 7a       	lsl	r10,0x3
8000af0c:	f5 eb 10 04 	or	r4,r10,r11
8000af10:	e0 80 00 a0 	breq	8000b050 <__avr32_f64_div_op1_zero>
8000af14:	f6 04 12 00 	clz	r4,r11
8000af18:	c1 70       	breq	8000af46 <__avr32_f64_div_round_subnormal+0x96>
8000af1a:	c0 c3       	brcs	8000af32 <__avr32_f64_div_round_subnormal+0x82>
8000af1c:	e8 05 11 20 	rsub	r5,r4,32
8000af20:	f6 04 09 4b 	lsl	r11,r11,r4
8000af24:	f4 05 0a 45 	lsr	r5,r10,r5
8000af28:	0a 4b       	or	r11,r5
8000af2a:	f4 04 09 4a 	lsl	r10,r10,r4
8000af2e:	08 17       	sub	r7,r4
8000af30:	c0 b8       	rjmp	8000af46 <__avr32_f64_div_round_subnormal+0x96>
8000af32:	f4 04 12 00 	clz	r4,r10
8000af36:	f9 b4 03 00 	movlo	r4,0
8000af3a:	f7 b4 02 e0 	subhs	r4,-32
8000af3e:	f4 04 09 4b 	lsl	r11,r10,r4
8000af42:	30 0a       	mov	r10,0
8000af44:	08 17       	sub	r7,r4
8000af46:	a3 8a       	lsr	r10,0x2
8000af48:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000af4c:	a3 8b       	lsr	r11,0x2
8000af4e:	c1 1b       	rjmp	8000ad70 <__avr32_f64_div+0x20>
8000af50:	a3 79       	lsl	r9,0x3
8000af52:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000af56:	a3 78       	lsl	r8,0x3
8000af58:	f3 e8 10 04 	or	r4,r9,r8
8000af5c:	c6 f0       	breq	8000b03a <__avr32_f64_div_res_subnormal+0xa0>
8000af5e:	f2 04 12 00 	clz	r4,r9
8000af62:	c1 70       	breq	8000af90 <__avr32_f64_div_round_subnormal+0xe0>
8000af64:	c0 c3       	brcs	8000af7c <__avr32_f64_div_round_subnormal+0xcc>
8000af66:	e8 05 11 20 	rsub	r5,r4,32
8000af6a:	f2 04 09 49 	lsl	r9,r9,r4
8000af6e:	f0 05 0a 45 	lsr	r5,r8,r5
8000af72:	0a 49       	or	r9,r5
8000af74:	f0 04 09 48 	lsl	r8,r8,r4
8000af78:	08 16       	sub	r6,r4
8000af7a:	c0 b8       	rjmp	8000af90 <__avr32_f64_div_round_subnormal+0xe0>
8000af7c:	f0 04 12 00 	clz	r4,r8
8000af80:	f9 b4 03 00 	movlo	r4,0
8000af84:	f7 b4 02 e0 	subhs	r4,-32
8000af88:	f0 04 09 49 	lsl	r9,r8,r4
8000af8c:	30 08       	mov	r8,0
8000af8e:	08 16       	sub	r6,r4
8000af90:	a3 88       	lsr	r8,0x2
8000af92:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000af96:	a3 89       	lsr	r9,0x2
8000af98:	cf ca       	rjmp	8000ad90 <__avr32_f64_div+0x40>

8000af9a <__avr32_f64_div_res_subnormal>:
8000af9a:	5c 37       	neg	r7
8000af9c:	2f f7       	sub	r7,-1
8000af9e:	f1 b7 04 c0 	satu	r7,0x6
8000afa2:	e0 47 00 20 	cp.w	r7,32
8000afa6:	c1 54       	brge	8000afd0 <__avr32_f64_div_res_subnormal+0x36>
8000afa8:	ee 06 11 20 	rsub	r6,r7,32
8000afac:	e4 07 0a 42 	lsr	r2,r2,r7
8000afb0:	e6 06 09 4c 	lsl	r12,r3,r6
8000afb4:	18 42       	or	r2,r12
8000afb6:	e6 07 0a 43 	lsr	r3,r3,r7
8000afba:	f4 06 09 41 	lsl	r1,r10,r6
8000afbe:	f4 07 0a 4a 	lsr	r10,r10,r7
8000afc2:	f6 06 09 4c 	lsl	r12,r11,r6
8000afc6:	18 4a       	or	r10,r12
8000afc8:	f6 07 0a 4b 	lsr	r11,r11,r7
8000afcc:	30 00       	mov	r0,0
8000afce:	c1 58       	rjmp	8000aff8 <__avr32_f64_div_res_subnormal+0x5e>
8000afd0:	ee 06 11 20 	rsub	r6,r7,32
8000afd4:	f9 b0 00 00 	moveq	r0,0
8000afd8:	f9 bc 00 00 	moveq	r12,0
8000afdc:	c0 50       	breq	8000afe6 <__avr32_f64_div_res_subnormal+0x4c>
8000afde:	f4 06 09 40 	lsl	r0,r10,r6
8000afe2:	f6 06 09 4c 	lsl	r12,r11,r6
8000afe6:	e6 07 0a 42 	lsr	r2,r3,r7
8000afea:	30 03       	mov	r3,0
8000afec:	f4 07 0a 41 	lsr	r1,r10,r7
8000aff0:	18 41       	or	r1,r12
8000aff2:	f6 07 0a 4a 	lsr	r10,r11,r7
8000aff6:	30 0b       	mov	r11,0
8000aff8:	e0 12 ff 00 	andl	r2,0xff00
8000affc:	e8 12 00 80 	orl	r2,0x80
8000b000:	e6 08 06 46 	mulu.d	r6,r3,r8
8000b004:	e4 09 07 46 	macu.d	r6,r2,r9
8000b008:	e4 08 06 44 	mulu.d	r4,r2,r8
8000b00c:	e6 09 06 48 	mulu.d	r8,r3,r9
8000b010:	0c 05       	add	r5,r6
8000b012:	f0 07 00 48 	adc	r8,r8,r7
8000b016:	5c 09       	acr	r9
8000b018:	30 07       	mov	r7,0
8000b01a:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000b01e:	00 34       	cp.w	r4,r0
8000b020:	e2 05 13 00 	cpc	r5,r1
8000b024:	c4 6b       	rjmp	8000aeb0 <__avr32_f64_div_round_subnormal>
8000b026:	1c 9b       	mov	r11,lr
8000b028:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b02c:	30 0a       	mov	r10,0
8000b02e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b032:	3f fb       	mov	r11,-1
8000b034:	30 0a       	mov	r10,0
8000b036:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000b03a:	f5 eb 10 04 	or	r4,r10,r11
8000b03e:	c0 90       	breq	8000b050 <__avr32_f64_div_op1_zero>
8000b040:	1c 9b       	mov	r11,lr
8000b042:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b046:	ea 1b 7f f0 	orh	r11,0x7ff0
8000b04a:	30 0a       	mov	r10,0
8000b04c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000b050 <__avr32_f64_div_op1_zero>:
8000b050:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000b054:	ce f0       	breq	8000b032 <__avr32_f64_div_res_subnormal+0x98>
8000b056:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000b05a:	e0 44 07 ff 	cp.w	r4,2047
8000b05e:	ce 41       	brne	8000b026 <__avr32_f64_div_res_subnormal+0x8c>
8000b060:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000b064:	ce 10       	breq	8000b026 <__avr32_f64_div_res_subnormal+0x8c>
8000b066:	ce 6b       	rjmp	8000b032 <__avr32_f64_div_res_subnormal+0x98>

8000b068 <__avr32_umod64>:
8000b068:	d4 31       	pushm	r0-r7,lr
8000b06a:	1a 97       	mov	r7,sp
8000b06c:	20 3d       	sub	sp,12
8000b06e:	10 9c       	mov	r12,r8
8000b070:	12 95       	mov	r5,r9
8000b072:	14 9e       	mov	lr,r10
8000b074:	16 91       	mov	r1,r11
8000b076:	16 96       	mov	r6,r11
8000b078:	58 09       	cp.w	r9,0
8000b07a:	e0 81 00 81 	brne	8000b17c <__avr32_umod64+0x114>
8000b07e:	16 38       	cp.w	r8,r11
8000b080:	e0 88 00 12 	brls	8000b0a4 <__avr32_umod64+0x3c>
8000b084:	f0 08 12 00 	clz	r8,r8
8000b088:	c4 e0       	breq	8000b124 <__avr32_umod64+0xbc>
8000b08a:	f6 08 09 46 	lsl	r6,r11,r8
8000b08e:	f8 08 09 4c 	lsl	r12,r12,r8
8000b092:	f0 0b 11 20 	rsub	r11,r8,32
8000b096:	f4 08 09 4e 	lsl	lr,r10,r8
8000b09a:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000b09e:	f7 e6 10 06 	or	r6,r11,r6
8000b0a2:	c4 18       	rjmp	8000b124 <__avr32_umod64+0xbc>
8000b0a4:	58 08       	cp.w	r8,0
8000b0a6:	c0 51       	brne	8000b0b0 <__avr32_umod64+0x48>
8000b0a8:	30 19       	mov	r9,1
8000b0aa:	f2 08 0d 08 	divu	r8,r9,r8
8000b0ae:	10 9c       	mov	r12,r8
8000b0b0:	f8 08 12 00 	clz	r8,r12
8000b0b4:	c0 31       	brne	8000b0ba <__avr32_umod64+0x52>
8000b0b6:	18 16       	sub	r6,r12
8000b0b8:	c3 68       	rjmp	8000b124 <__avr32_umod64+0xbc>
8000b0ba:	f0 03 11 20 	rsub	r3,r8,32
8000b0be:	f4 03 0a 4b 	lsr	r11,r10,r3
8000b0c2:	f8 08 09 4c 	lsl	r12,r12,r8
8000b0c6:	ec 08 09 49 	lsl	r9,r6,r8
8000b0ca:	ec 03 0a 43 	lsr	r3,r6,r3
8000b0ce:	f7 e9 10 09 	or	r9,r11,r9
8000b0d2:	f8 05 16 10 	lsr	r5,r12,0x10
8000b0d6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000b0da:	e6 05 0d 02 	divu	r2,r3,r5
8000b0de:	f2 0e 16 10 	lsr	lr,r9,0x10
8000b0e2:	ec 02 02 4b 	mul	r11,r6,r2
8000b0e6:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000b0ea:	16 3e       	cp.w	lr,r11
8000b0ec:	c0 72       	brcc	8000b0fa <__avr32_umod64+0x92>
8000b0ee:	18 0e       	add	lr,r12
8000b0f0:	18 3e       	cp.w	lr,r12
8000b0f2:	c0 43       	brcs	8000b0fa <__avr32_umod64+0x92>
8000b0f4:	16 3e       	cp.w	lr,r11
8000b0f6:	fd dc e3 0e 	addcs	lr,lr,r12
8000b0fa:	fc 0b 01 03 	sub	r3,lr,r11
8000b0fe:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000b102:	e6 05 0d 02 	divu	r2,r3,r5
8000b106:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b10a:	a5 36       	mul	r6,r2
8000b10c:	0c 39       	cp.w	r9,r6
8000b10e:	c0 72       	brcc	8000b11c <__avr32_umod64+0xb4>
8000b110:	18 09       	add	r9,r12
8000b112:	18 39       	cp.w	r9,r12
8000b114:	c0 43       	brcs	8000b11c <__avr32_umod64+0xb4>
8000b116:	0c 39       	cp.w	r9,r6
8000b118:	f3 dc e3 09 	addcs	r9,r9,r12
8000b11c:	f2 06 01 06 	sub	r6,r9,r6
8000b120:	f4 08 09 4e 	lsl	lr,r10,r8
8000b124:	f8 0a 16 10 	lsr	r10,r12,0x10
8000b128:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000b12c:	ec 0a 0d 02 	divu	r2,r6,r10
8000b130:	fc 09 16 10 	lsr	r9,lr,0x10
8000b134:	ea 02 02 4b 	mul	r11,r5,r2
8000b138:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b13c:	16 39       	cp.w	r9,r11
8000b13e:	c0 72       	brcc	8000b14c <__avr32_umod64+0xe4>
8000b140:	18 09       	add	r9,r12
8000b142:	18 39       	cp.w	r9,r12
8000b144:	c0 43       	brcs	8000b14c <__avr32_umod64+0xe4>
8000b146:	16 39       	cp.w	r9,r11
8000b148:	f3 dc e3 09 	addcs	r9,r9,r12
8000b14c:	f2 0b 01 0b 	sub	r11,r9,r11
8000b150:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000b154:	f6 0a 0d 0a 	divu	r10,r11,r10
8000b158:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000b15c:	ea 0a 02 4a 	mul	r10,r5,r10
8000b160:	14 3e       	cp.w	lr,r10
8000b162:	c0 72       	brcc	8000b170 <__avr32_umod64+0x108>
8000b164:	18 0e       	add	lr,r12
8000b166:	18 3e       	cp.w	lr,r12
8000b168:	c0 43       	brcs	8000b170 <__avr32_umod64+0x108>
8000b16a:	14 3e       	cp.w	lr,r10
8000b16c:	fd dc e3 0e 	addcs	lr,lr,r12
8000b170:	fc 0a 01 0a 	sub	r10,lr,r10
8000b174:	30 0b       	mov	r11,0
8000b176:	f4 08 0a 4a 	lsr	r10,r10,r8
8000b17a:	c7 b8       	rjmp	8000b270 <__avr32_umod64+0x208>
8000b17c:	16 39       	cp.w	r9,r11
8000b17e:	e0 8b 00 79 	brhi	8000b270 <__avr32_umod64+0x208>
8000b182:	f2 09 12 00 	clz	r9,r9
8000b186:	c1 21       	brne	8000b1aa <__avr32_umod64+0x142>
8000b188:	10 3a       	cp.w	r10,r8
8000b18a:	5f 2b       	srhs	r11
8000b18c:	0a 31       	cp.w	r1,r5
8000b18e:	5f ba       	srhi	r10
8000b190:	f7 ea 10 0a 	or	r10,r11,r10
8000b194:	f2 0a 18 00 	cp.b	r10,r9
8000b198:	c0 60       	breq	8000b1a4 <__avr32_umod64+0x13c>
8000b19a:	fc 08 01 0c 	sub	r12,lr,r8
8000b19e:	e2 05 01 46 	sbc	r6,r1,r5
8000b1a2:	18 9e       	mov	lr,r12
8000b1a4:	0c 9b       	mov	r11,r6
8000b1a6:	1c 9a       	mov	r10,lr
8000b1a8:	c6 48       	rjmp	8000b270 <__avr32_umod64+0x208>
8000b1aa:	ea 09 09 4c 	lsl	r12,r5,r9
8000b1ae:	f2 06 11 20 	rsub	r6,r9,32
8000b1b2:	f6 09 09 4b 	lsl	r11,r11,r9
8000b1b6:	f0 09 09 42 	lsl	r2,r8,r9
8000b1ba:	ef 46 ff f4 	st.w	r7[-12],r6
8000b1be:	f0 06 0a 48 	lsr	r8,r8,r6
8000b1c2:	18 48       	or	r8,r12
8000b1c4:	e2 06 0a 4c 	lsr	r12,r1,r6
8000b1c8:	f4 09 09 43 	lsl	r3,r10,r9
8000b1cc:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000b1d0:	f4 06 0a 4a 	lsr	r10,r10,r6
8000b1d4:	16 4a       	or	r10,r11
8000b1d6:	f0 0b 16 10 	lsr	r11,r8,0x10
8000b1da:	f8 0b 0d 04 	divu	r4,r12,r11
8000b1de:	f4 0c 16 10 	lsr	r12,r10,0x10
8000b1e2:	08 91       	mov	r1,r4
8000b1e4:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000b1e8:	e8 0e 02 46 	mul	r6,r4,lr
8000b1ec:	0c 3c       	cp.w	r12,r6
8000b1ee:	c0 a2       	brcc	8000b202 <__avr32_umod64+0x19a>
8000b1f0:	20 11       	sub	r1,1
8000b1f2:	10 0c       	add	r12,r8
8000b1f4:	10 3c       	cp.w	r12,r8
8000b1f6:	c0 63       	brcs	8000b202 <__avr32_umod64+0x19a>
8000b1f8:	0c 3c       	cp.w	r12,r6
8000b1fa:	f7 b1 03 01 	sublo	r1,1
8000b1fe:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000b202:	0c 1c       	sub	r12,r6
8000b204:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000b208:	f8 0b 0d 04 	divu	r4,r12,r11
8000b20c:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000b210:	08 96       	mov	r6,r4
8000b212:	e8 0e 02 4e 	mul	lr,r4,lr
8000b216:	1c 3b       	cp.w	r11,lr
8000b218:	c0 a2       	brcc	8000b22c <__avr32_umod64+0x1c4>
8000b21a:	20 16       	sub	r6,1
8000b21c:	10 0b       	add	r11,r8
8000b21e:	10 3b       	cp.w	r11,r8
8000b220:	c0 63       	brcs	8000b22c <__avr32_umod64+0x1c4>
8000b222:	1c 3b       	cp.w	r11,lr
8000b224:	f7 b6 03 01 	sublo	r6,1
8000b228:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000b22c:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000b230:	1c 1b       	sub	r11,lr
8000b232:	e2 02 06 40 	mulu.d	r0,r1,r2
8000b236:	00 9e       	mov	lr,r0
8000b238:	02 9c       	mov	r12,r1
8000b23a:	16 3c       	cp.w	r12,r11
8000b23c:	e0 8b 00 08 	brhi	8000b24c <__avr32_umod64+0x1e4>
8000b240:	5f 06       	sreq	r6
8000b242:	06 30       	cp.w	r0,r3
8000b244:	5f ba       	srhi	r10
8000b246:	ed ea 00 0a 	and	r10,r6,r10
8000b24a:	c0 60       	breq	8000b256 <__avr32_umod64+0x1ee>
8000b24c:	fc 02 01 04 	sub	r4,lr,r2
8000b250:	f8 08 01 4c 	sbc	r12,r12,r8
8000b254:	08 9e       	mov	lr,r4
8000b256:	e6 0e 01 0a 	sub	r10,r3,lr
8000b25a:	f6 0c 01 4c 	sbc	r12,r11,r12
8000b25e:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000b262:	f8 09 0a 4b 	lsr	r11,r12,r9
8000b266:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b26a:	f8 01 09 4c 	lsl	r12,r12,r1
8000b26e:	18 4a       	or	r10,r12
8000b270:	2f dd       	sub	sp,-12
8000b272:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000b400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000b400:	c0 08       	rjmp	8000b400 <_evba>
	...

8000b404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000b404:	c0 08       	rjmp	8000b404 <_handle_TLB_Multiple_Hit>
	...

8000b408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000b408:	c0 08       	rjmp	8000b408 <_handle_Bus_Error_Data_Fetch>
	...

8000b40c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000b40c:	c0 08       	rjmp	8000b40c <_handle_Bus_Error_Instruction_Fetch>
	...

8000b410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000b410:	c0 08       	rjmp	8000b410 <_handle_NMI>
	...

8000b414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000b414:	c0 08       	rjmp	8000b414 <_handle_Instruction_Address>
	...

8000b418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000b418:	c0 08       	rjmp	8000b418 <_handle_ITLB_Protection>
	...

8000b41c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000b41c:	c0 08       	rjmp	8000b41c <_handle_Breakpoint>
	...

8000b420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000b420:	c0 08       	rjmp	8000b420 <_handle_Illegal_Opcode>
	...

8000b424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000b424:	c0 08       	rjmp	8000b424 <_handle_Unimplemented_Instruction>
	...

8000b428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000b428:	c0 08       	rjmp	8000b428 <_handle_Privilege_Violation>
	...

8000b42c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000b42c:	c0 08       	rjmp	8000b42c <_handle_Floating_Point>
	...

8000b430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000b430:	c0 08       	rjmp	8000b430 <_handle_Coprocessor_Absent>
	...

8000b434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000b434:	c0 08       	rjmp	8000b434 <_handle_Data_Address_Read>
	...

8000b438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000b438:	c0 08       	rjmp	8000b438 <_handle_Data_Address_Write>
	...

8000b43c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000b43c:	c0 08       	rjmp	8000b43c <_handle_DTLB_Protection_Read>
	...

8000b440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000b440:	c0 08       	rjmp	8000b440 <_handle_DTLB_Protection_Write>
	...

8000b444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000b444:	c0 08       	rjmp	8000b444 <_handle_DTLB_Modified>
	...

8000b450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000b450:	c0 08       	rjmp	8000b450 <_handle_ITLB_Miss>
	...

8000b460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000b460:	c0 08       	rjmp	8000b460 <_handle_DTLB_Miss_Read>
	...

8000b470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000b470:	c0 08       	rjmp	8000b470 <_handle_DTLB_Miss_Write>
	...

8000b500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000b500:	c0 08       	rjmp	8000b500 <_handle_Supervisor_Call>
8000b502:	d7 03       	nop

8000b504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b504:	30 0c       	mov	r12,0
8000b506:	fe b0 b7 e5 	rcall	800024d0 <_get_interrupt_handler>
8000b50a:	58 0c       	cp.w	r12,0
8000b50c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b510:	d6 03       	rete

8000b512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b512:	30 1c       	mov	r12,1
8000b514:	fe b0 b7 de 	rcall	800024d0 <_get_interrupt_handler>
8000b518:	58 0c       	cp.w	r12,0
8000b51a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b51e:	d6 03       	rete

8000b520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b520:	30 2c       	mov	r12,2
8000b522:	fe b0 b7 d7 	rcall	800024d0 <_get_interrupt_handler>
8000b526:	58 0c       	cp.w	r12,0
8000b528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b52c:	d6 03       	rete

8000b52e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b52e:	30 3c       	mov	r12,3
8000b530:	fe b0 b7 d0 	rcall	800024d0 <_get_interrupt_handler>
8000b534:	58 0c       	cp.w	r12,0
8000b536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b53a:	d6 03       	rete
8000b53c:	d7 03       	nop
8000b53e:	d7 03       	nop
8000b540:	d7 03       	nop
8000b542:	d7 03       	nop
8000b544:	d7 03       	nop
8000b546:	d7 03       	nop
8000b548:	d7 03       	nop
8000b54a:	d7 03       	nop
8000b54c:	d7 03       	nop
8000b54e:	d7 03       	nop
8000b550:	d7 03       	nop
8000b552:	d7 03       	nop
8000b554:	d7 03       	nop
8000b556:	d7 03       	nop
8000b558:	d7 03       	nop
8000b55a:	d7 03       	nop
8000b55c:	d7 03       	nop
8000b55e:	d7 03       	nop
8000b560:	d7 03       	nop
8000b562:	d7 03       	nop
8000b564:	d7 03       	nop
8000b566:	d7 03       	nop
8000b568:	d7 03       	nop
8000b56a:	d7 03       	nop
8000b56c:	d7 03       	nop
8000b56e:	d7 03       	nop
8000b570:	d7 03       	nop
8000b572:	d7 03       	nop
8000b574:	d7 03       	nop
8000b576:	d7 03       	nop
8000b578:	d7 03       	nop
8000b57a:	d7 03       	nop
8000b57c:	d7 03       	nop
8000b57e:	d7 03       	nop
8000b580:	d7 03       	nop
8000b582:	d7 03       	nop
8000b584:	d7 03       	nop
8000b586:	d7 03       	nop
8000b588:	d7 03       	nop
8000b58a:	d7 03       	nop
8000b58c:	d7 03       	nop
8000b58e:	d7 03       	nop
8000b590:	d7 03       	nop
8000b592:	d7 03       	nop
8000b594:	d7 03       	nop
8000b596:	d7 03       	nop
8000b598:	d7 03       	nop
8000b59a:	d7 03       	nop
8000b59c:	d7 03       	nop
8000b59e:	d7 03       	nop
8000b5a0:	d7 03       	nop
8000b5a2:	d7 03       	nop
8000b5a4:	d7 03       	nop
8000b5a6:	d7 03       	nop
8000b5a8:	d7 03       	nop
8000b5aa:	d7 03       	nop
8000b5ac:	d7 03       	nop
8000b5ae:	d7 03       	nop
8000b5b0:	d7 03       	nop
8000b5b2:	d7 03       	nop
8000b5b4:	d7 03       	nop
8000b5b6:	d7 03       	nop
8000b5b8:	d7 03       	nop
8000b5ba:	d7 03       	nop
8000b5bc:	d7 03       	nop
8000b5be:	d7 03       	nop
8000b5c0:	d7 03       	nop
8000b5c2:	d7 03       	nop
8000b5c4:	d7 03       	nop
8000b5c6:	d7 03       	nop
8000b5c8:	d7 03       	nop
8000b5ca:	d7 03       	nop
8000b5cc:	d7 03       	nop
8000b5ce:	d7 03       	nop
8000b5d0:	d7 03       	nop
8000b5d2:	d7 03       	nop
8000b5d4:	d7 03       	nop
8000b5d6:	d7 03       	nop
8000b5d8:	d7 03       	nop
8000b5da:	d7 03       	nop
8000b5dc:	d7 03       	nop
8000b5de:	d7 03       	nop
8000b5e0:	d7 03       	nop
8000b5e2:	d7 03       	nop
8000b5e4:	d7 03       	nop
8000b5e6:	d7 03       	nop
8000b5e8:	d7 03       	nop
8000b5ea:	d7 03       	nop
8000b5ec:	d7 03       	nop
8000b5ee:	d7 03       	nop
8000b5f0:	d7 03       	nop
8000b5f2:	d7 03       	nop
8000b5f4:	d7 03       	nop
8000b5f6:	d7 03       	nop
8000b5f8:	d7 03       	nop
8000b5fa:	d7 03       	nop
8000b5fc:	d7 03       	nop
8000b5fe:	d7 03       	nop
